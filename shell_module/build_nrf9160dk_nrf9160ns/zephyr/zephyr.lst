
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	2002bfc0 	.word	0x2002bfc0
    c004:	0001dad9 	.word	0x0001dad9
    c008:	00022e79 	.word	0x00022e79
    c00c:	0001db15 	.word	0x0001db15
    c010:	0001db15 	.word	0x0001db15
    c014:	0001db15 	.word	0x0001db15
    c018:	0001db15 	.word	0x0001db15
    c01c:	0001db15 	.word	0x0001db15
	...
    c02c:	0001da35 	.word	0x0001da35
    c030:	0001db15 	.word	0x0001db15
    c034:	00000000 	.word	0x00000000
    c038:	0001d9d9 	.word	0x0001d9d9
    c03c:	00022e41 	.word	0x00022e41

0000c040 <_irq_vector_table>:
    c040:	0001da99 0001da99 0001da99 0001da99     ................
    c050:	0001da99 0001da99 0001da99 0001da99     ................
    c060:	0001da99 0001da99 0001da99 0001da99     ................
    c070:	0001da99 0001da99 0001da99 0001da99     ................
    c080:	0001da99 0001da99 0001da99 0001da99     ................
    c090:	0001da99 0001da99 0001da99 0001da99     ................
    c0a0:	0001da99 0001da99 0001da99 0001da99     ................
    c0b0:	0001da99 0001da99 0001da99 0001da99     ................
    c0c0:	0001da99 0001da99 0001da99 0001da99     ................
    c0d0:	0001da99 0001da99 0001da99 0001da99     ................
    c0e0:	0001da99 0001da99 0001da99 0001da99     ................
    c0f0:	0001da99 0001da99 0001da99 0001da99     ................
    c100:	0001da99 0001da99 0001da99 0001da99     ................
    c110:	0001da99 0001da99 0001da99 0001da99     ................
    c120:	0001da99 0001da99 0001da99 0001da99     ................
    c130:	0001da99 0001da99 0001da99 0001da99     ................
    c140:	0001da99                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0001c844 00000001 0000c000 0000c000     D...............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_ldivmod>:
    c240:	b97b      	cbnz	r3, c262 <__aeabi_ldivmod+0x22>
    c242:	b972      	cbnz	r2, c262 <__aeabi_ldivmod+0x22>
    c244:	2900      	cmp	r1, #0
    c246:	bfbe      	ittt	lt
    c248:	2000      	movlt	r0, #0
    c24a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c24e:	e006      	blt.n	c25e <__aeabi_ldivmod+0x1e>
    c250:	bf08      	it	eq
    c252:	2800      	cmpeq	r0, #0
    c254:	bf1c      	itt	ne
    c256:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c25a:	f04f 30ff 	movne.w	r0, #4294967295
    c25e:	f000 b9bb 	b.w	c5d8 <__aeabi_idiv0>
    c262:	f1ad 0c08 	sub.w	ip, sp, #8
    c266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c26a:	2900      	cmp	r1, #0
    c26c:	db09      	blt.n	c282 <__aeabi_ldivmod+0x42>
    c26e:	2b00      	cmp	r3, #0
    c270:	db1a      	blt.n	c2a8 <__aeabi_ldivmod+0x68>
    c272:	f000 f84d 	bl	c310 <__udivmoddi4>
    c276:	f8dd e004 	ldr.w	lr, [sp, #4]
    c27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c27e:	b004      	add	sp, #16
    c280:	4770      	bx	lr
    c282:	4240      	negs	r0, r0
    c284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c288:	2b00      	cmp	r3, #0
    c28a:	db1b      	blt.n	c2c4 <__aeabi_ldivmod+0x84>
    c28c:	f000 f840 	bl	c310 <__udivmoddi4>
    c290:	f8dd e004 	ldr.w	lr, [sp, #4]
    c294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c298:	b004      	add	sp, #16
    c29a:	4240      	negs	r0, r0
    c29c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2a0:	4252      	negs	r2, r2
    c2a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2a6:	4770      	bx	lr
    c2a8:	4252      	negs	r2, r2
    c2aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2ae:	f000 f82f 	bl	c310 <__udivmoddi4>
    c2b2:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2ba:	b004      	add	sp, #16
    c2bc:	4240      	negs	r0, r0
    c2be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2c2:	4770      	bx	lr
    c2c4:	4252      	negs	r2, r2
    c2c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2ca:	f000 f821 	bl	c310 <__udivmoddi4>
    c2ce:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2d6:	b004      	add	sp, #16
    c2d8:	4252      	negs	r2, r2
    c2da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2de:	4770      	bx	lr

0000c2e0 <__aeabi_uldivmod>:
    c2e0:	b953      	cbnz	r3, c2f8 <__aeabi_uldivmod+0x18>
    c2e2:	b94a      	cbnz	r2, c2f8 <__aeabi_uldivmod+0x18>
    c2e4:	2900      	cmp	r1, #0
    c2e6:	bf08      	it	eq
    c2e8:	2800      	cmpeq	r0, #0
    c2ea:	bf1c      	itt	ne
    c2ec:	f04f 31ff 	movne.w	r1, #4294967295
    c2f0:	f04f 30ff 	movne.w	r0, #4294967295
    c2f4:	f000 b970 	b.w	c5d8 <__aeabi_idiv0>
    c2f8:	f1ad 0c08 	sub.w	ip, sp, #8
    c2fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c300:	f000 f806 	bl	c310 <__udivmoddi4>
    c304:	f8dd e004 	ldr.w	lr, [sp, #4]
    c308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c30c:	b004      	add	sp, #16
    c30e:	4770      	bx	lr

0000c310 <__udivmoddi4>:
    c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c314:	9e08      	ldr	r6, [sp, #32]
    c316:	460d      	mov	r5, r1
    c318:	4604      	mov	r4, r0
    c31a:	468a      	mov	sl, r1
    c31c:	2b00      	cmp	r3, #0
    c31e:	d17f      	bne.n	c420 <__udivmoddi4+0x110>
    c320:	428a      	cmp	r2, r1
    c322:	4617      	mov	r7, r2
    c324:	d941      	bls.n	c3aa <__udivmoddi4+0x9a>
    c326:	fab2 f282 	clz	r2, r2
    c32a:	b14a      	cbz	r2, c340 <__udivmoddi4+0x30>
    c32c:	f1c2 0120 	rsb	r1, r2, #32
    c330:	fa05 f302 	lsl.w	r3, r5, r2
    c334:	4097      	lsls	r7, r2
    c336:	4094      	lsls	r4, r2
    c338:	fa20 f101 	lsr.w	r1, r0, r1
    c33c:	ea41 0a03 	orr.w	sl, r1, r3
    c340:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c344:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c348:	fa1f f987 	uxth.w	r9, r7
    c34c:	fbba fef8 	udiv	lr, sl, r8
    c350:	fb08 a31e 	mls	r3, r8, lr, sl
    c354:	fb0e f109 	mul.w	r1, lr, r9
    c358:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c35c:	4299      	cmp	r1, r3
    c35e:	d906      	bls.n	c36e <__udivmoddi4+0x5e>
    c360:	18fb      	adds	r3, r7, r3
    c362:	d202      	bcs.n	c36a <__udivmoddi4+0x5a>
    c364:	4299      	cmp	r1, r3
    c366:	f200 8124 	bhi.w	c5b2 <__udivmoddi4+0x2a2>
    c36a:	f10e 3eff 	add.w	lr, lr, #4294967295
    c36e:	1a59      	subs	r1, r3, r1
    c370:	b2a3      	uxth	r3, r4
    c372:	fbb1 f0f8 	udiv	r0, r1, r8
    c376:	fb08 1110 	mls	r1, r8, r0, r1
    c37a:	fb00 f909 	mul.w	r9, r0, r9
    c37e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c382:	45a1      	cmp	r9, r4
    c384:	d905      	bls.n	c392 <__udivmoddi4+0x82>
    c386:	193c      	adds	r4, r7, r4
    c388:	d202      	bcs.n	c390 <__udivmoddi4+0x80>
    c38a:	45a1      	cmp	r9, r4
    c38c:	f200 810e 	bhi.w	c5ac <__udivmoddi4+0x29c>
    c390:	3801      	subs	r0, #1
    c392:	eba4 0409 	sub.w	r4, r4, r9
    c396:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c39a:	2100      	movs	r1, #0
    c39c:	b11e      	cbz	r6, c3a6 <__udivmoddi4+0x96>
    c39e:	40d4      	lsrs	r4, r2
    c3a0:	2300      	movs	r3, #0
    c3a2:	e9c6 4300 	strd	r4, r3, [r6]
    c3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3aa:	b902      	cbnz	r2, c3ae <__udivmoddi4+0x9e>
    c3ac:	deff      	udf	#255	; 0xff
    c3ae:	fab2 f282 	clz	r2, r2
    c3b2:	2a00      	cmp	r2, #0
    c3b4:	d14f      	bne.n	c456 <__udivmoddi4+0x146>
    c3b6:	1bcb      	subs	r3, r1, r7
    c3b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c3bc:	fa1f f887 	uxth.w	r8, r7
    c3c0:	2101      	movs	r1, #1
    c3c2:	0c25      	lsrs	r5, r4, #16
    c3c4:	fbb3 fcfe 	udiv	ip, r3, lr
    c3c8:	fb0e 301c 	mls	r0, lr, ip, r3
    c3cc:	462b      	mov	r3, r5
    c3ce:	fb08 f90c 	mul.w	r9, r8, ip
    c3d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c3d6:	45a9      	cmp	r9, r5
    c3d8:	d90a      	bls.n	c3f0 <__udivmoddi4+0xe0>
    c3da:	197d      	adds	r5, r7, r5
    c3dc:	bf2c      	ite	cs
    c3de:	2301      	movcs	r3, #1
    c3e0:	2300      	movcc	r3, #0
    c3e2:	45a9      	cmp	r9, r5
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0xdc>
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 80d9 	beq.w	c59e <__udivmoddi4+0x28e>
    c3ec:	f10c 3cff 	add.w	ip, ip, #4294967295
    c3f0:	eba5 0509 	sub.w	r5, r5, r9
    c3f4:	b2a3      	uxth	r3, r4
    c3f6:	fbb5 f0fe 	udiv	r0, r5, lr
    c3fa:	fb0e 5510 	mls	r5, lr, r0, r5
    c3fe:	fb08 f800 	mul.w	r8, r8, r0
    c402:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c406:	45a0      	cmp	r8, r4
    c408:	d905      	bls.n	c416 <__udivmoddi4+0x106>
    c40a:	193c      	adds	r4, r7, r4
    c40c:	d202      	bcs.n	c414 <__udivmoddi4+0x104>
    c40e:	45a0      	cmp	r8, r4
    c410:	f200 80c9 	bhi.w	c5a6 <__udivmoddi4+0x296>
    c414:	3801      	subs	r0, #1
    c416:	eba4 0408 	sub.w	r4, r4, r8
    c41a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c41e:	e7bd      	b.n	c39c <__udivmoddi4+0x8c>
    c420:	428b      	cmp	r3, r1
    c422:	d908      	bls.n	c436 <__udivmoddi4+0x126>
    c424:	2e00      	cmp	r6, #0
    c426:	f000 80b1 	beq.w	c58c <__udivmoddi4+0x27c>
    c42a:	2100      	movs	r1, #0
    c42c:	e9c6 0500 	strd	r0, r5, [r6]
    c430:	4608      	mov	r0, r1
    c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c436:	fab3 f183 	clz	r1, r3
    c43a:	2900      	cmp	r1, #0
    c43c:	d146      	bne.n	c4cc <__udivmoddi4+0x1bc>
    c43e:	42ab      	cmp	r3, r5
    c440:	f0c0 80a7 	bcc.w	c592 <__udivmoddi4+0x282>
    c444:	4282      	cmp	r2, r0
    c446:	f240 80a4 	bls.w	c592 <__udivmoddi4+0x282>
    c44a:	4608      	mov	r0, r1
    c44c:	2e00      	cmp	r6, #0
    c44e:	d0aa      	beq.n	c3a6 <__udivmoddi4+0x96>
    c450:	e9c6 4a00 	strd	r4, sl, [r6]
    c454:	e7a7      	b.n	c3a6 <__udivmoddi4+0x96>
    c456:	f1c2 0020 	rsb	r0, r2, #32
    c45a:	4097      	lsls	r7, r2
    c45c:	fa01 f302 	lsl.w	r3, r1, r2
    c460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c464:	40c1      	lsrs	r1, r0
    c466:	fa24 f500 	lsr.w	r5, r4, r0
    c46a:	fa1f f887 	uxth.w	r8, r7
    c46e:	4094      	lsls	r4, r2
    c470:	431d      	orrs	r5, r3
    c472:	fbb1 f0fe 	udiv	r0, r1, lr
    c476:	0c2b      	lsrs	r3, r5, #16
    c478:	fb0e 1110 	mls	r1, lr, r0, r1
    c47c:	fb00 fc08 	mul.w	ip, r0, r8
    c480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c484:	459c      	cmp	ip, r3
    c486:	d909      	bls.n	c49c <__udivmoddi4+0x18c>
    c488:	18fb      	adds	r3, r7, r3
    c48a:	bf2c      	ite	cs
    c48c:	2101      	movcs	r1, #1
    c48e:	2100      	movcc	r1, #0
    c490:	459c      	cmp	ip, r3
    c492:	d902      	bls.n	c49a <__udivmoddi4+0x18a>
    c494:	2900      	cmp	r1, #0
    c496:	f000 8095 	beq.w	c5c4 <__udivmoddi4+0x2b4>
    c49a:	3801      	subs	r0, #1
    c49c:	eba3 030c 	sub.w	r3, r3, ip
    c4a0:	b2ad      	uxth	r5, r5
    c4a2:	fbb3 f1fe 	udiv	r1, r3, lr
    c4a6:	fb0e 3311 	mls	r3, lr, r1, r3
    c4aa:	fb01 fc08 	mul.w	ip, r1, r8
    c4ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c4b2:	45ac      	cmp	ip, r5
    c4b4:	d905      	bls.n	c4c2 <__udivmoddi4+0x1b2>
    c4b6:	197d      	adds	r5, r7, r5
    c4b8:	d202      	bcs.n	c4c0 <__udivmoddi4+0x1b0>
    c4ba:	45ac      	cmp	ip, r5
    c4bc:	f200 8089 	bhi.w	c5d2 <__udivmoddi4+0x2c2>
    c4c0:	3901      	subs	r1, #1
    c4c2:	eba5 030c 	sub.w	r3, r5, ip
    c4c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c4ca:	e77a      	b.n	c3c2 <__udivmoddi4+0xb2>
    c4cc:	f1c1 0420 	rsb	r4, r1, #32
    c4d0:	408b      	lsls	r3, r1
    c4d2:	fa02 f701 	lsl.w	r7, r2, r1
    c4d6:	fa05 fc01 	lsl.w	ip, r5, r1
    c4da:	40e2      	lsrs	r2, r4
    c4dc:	fa20 f804 	lsr.w	r8, r0, r4
    c4e0:	40e5      	lsrs	r5, r4
    c4e2:	fa00 fe01 	lsl.w	lr, r0, r1
    c4e6:	4313      	orrs	r3, r2
    c4e8:	ea48 020c 	orr.w	r2, r8, ip
    c4ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c4f0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c4f4:	fa1f f983 	uxth.w	r9, r3
    c4f8:	fbb5 faf8 	udiv	sl, r5, r8
    c4fc:	fb08 551a 	mls	r5, r8, sl, r5
    c500:	fb0a f009 	mul.w	r0, sl, r9
    c504:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c508:	4560      	cmp	r0, ip
    c50a:	d90a      	bls.n	c522 <__udivmoddi4+0x212>
    c50c:	eb13 0c0c 	adds.w	ip, r3, ip
    c510:	bf2c      	ite	cs
    c512:	2501      	movcs	r5, #1
    c514:	2500      	movcc	r5, #0
    c516:	4560      	cmp	r0, ip
    c518:	d901      	bls.n	c51e <__udivmoddi4+0x20e>
    c51a:	2d00      	cmp	r5, #0
    c51c:	d055      	beq.n	c5ca <__udivmoddi4+0x2ba>
    c51e:	f10a 3aff 	add.w	sl, sl, #4294967295
    c522:	ebac 0c00 	sub.w	ip, ip, r0
    c526:	b292      	uxth	r2, r2
    c528:	fbbc f0f8 	udiv	r0, ip, r8
    c52c:	fb08 cc10 	mls	ip, r8, r0, ip
    c530:	fb00 f909 	mul.w	r9, r0, r9
    c534:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c538:	45e1      	cmp	r9, ip
    c53a:	d905      	bls.n	c548 <__udivmoddi4+0x238>
    c53c:	eb13 0c0c 	adds.w	ip, r3, ip
    c540:	d201      	bcs.n	c546 <__udivmoddi4+0x236>
    c542:	45e1      	cmp	r9, ip
    c544:	d83b      	bhi.n	c5be <__udivmoddi4+0x2ae>
    c546:	3801      	subs	r0, #1
    c548:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c54c:	ebac 0c09 	sub.w	ip, ip, r9
    c550:	fba0 8907 	umull	r8, r9, r0, r7
    c554:	45cc      	cmp	ip, r9
    c556:	4645      	mov	r5, r8
    c558:	464a      	mov	r2, r9
    c55a:	d302      	bcc.n	c562 <__udivmoddi4+0x252>
    c55c:	d106      	bne.n	c56c <__udivmoddi4+0x25c>
    c55e:	45c6      	cmp	lr, r8
    c560:	d204      	bcs.n	c56c <__udivmoddi4+0x25c>
    c562:	3801      	subs	r0, #1
    c564:	ebb8 0507 	subs.w	r5, r8, r7
    c568:	eb69 0203 	sbc.w	r2, r9, r3
    c56c:	b32e      	cbz	r6, c5ba <__udivmoddi4+0x2aa>
    c56e:	ebbe 0305 	subs.w	r3, lr, r5
    c572:	eb6c 0c02 	sbc.w	ip, ip, r2
    c576:	fa23 f201 	lsr.w	r2, r3, r1
    c57a:	fa0c f404 	lsl.w	r4, ip, r4
    c57e:	fa2c f301 	lsr.w	r3, ip, r1
    c582:	2100      	movs	r1, #0
    c584:	4314      	orrs	r4, r2
    c586:	e9c6 4300 	strd	r4, r3, [r6]
    c58a:	e70c      	b.n	c3a6 <__udivmoddi4+0x96>
    c58c:	4631      	mov	r1, r6
    c58e:	4630      	mov	r0, r6
    c590:	e709      	b.n	c3a6 <__udivmoddi4+0x96>
    c592:	1a84      	subs	r4, r0, r2
    c594:	eb65 0303 	sbc.w	r3, r5, r3
    c598:	2001      	movs	r0, #1
    c59a:	469a      	mov	sl, r3
    c59c:	e756      	b.n	c44c <__udivmoddi4+0x13c>
    c59e:	f1ac 0c02 	sub.w	ip, ip, #2
    c5a2:	443d      	add	r5, r7
    c5a4:	e724      	b.n	c3f0 <__udivmoddi4+0xe0>
    c5a6:	3802      	subs	r0, #2
    c5a8:	443c      	add	r4, r7
    c5aa:	e734      	b.n	c416 <__udivmoddi4+0x106>
    c5ac:	3802      	subs	r0, #2
    c5ae:	443c      	add	r4, r7
    c5b0:	e6ef      	b.n	c392 <__udivmoddi4+0x82>
    c5b2:	f1ae 0e02 	sub.w	lr, lr, #2
    c5b6:	443b      	add	r3, r7
    c5b8:	e6d9      	b.n	c36e <__udivmoddi4+0x5e>
    c5ba:	4631      	mov	r1, r6
    c5bc:	e6f3      	b.n	c3a6 <__udivmoddi4+0x96>
    c5be:	3802      	subs	r0, #2
    c5c0:	449c      	add	ip, r3
    c5c2:	e7c1      	b.n	c548 <__udivmoddi4+0x238>
    c5c4:	3802      	subs	r0, #2
    c5c6:	443b      	add	r3, r7
    c5c8:	e768      	b.n	c49c <__udivmoddi4+0x18c>
    c5ca:	f1aa 0a02 	sub.w	sl, sl, #2
    c5ce:	449c      	add	ip, r3
    c5d0:	e7a7      	b.n	c522 <__udivmoddi4+0x212>
    c5d2:	3902      	subs	r1, #2
    c5d4:	443d      	add	r5, r7
    c5d6:	e774      	b.n	c4c2 <__udivmoddi4+0x1b2>

0000c5d8 <__aeabi_idiv0>:
    c5d8:	4770      	bx	lr
    c5da:	bf00      	nop

0000c5dc <sha256_init>:
    c5dc:	4b12      	ldr	r3, [pc, #72]	; (c628 <sha256_init+0x4c>)
    c5de:	6003      	str	r3, [r0, #0]
    c5e0:	4b12      	ldr	r3, [pc, #72]	; (c62c <sha256_init+0x50>)
    c5e2:	6043      	str	r3, [r0, #4]
    c5e4:	4b12      	ldr	r3, [pc, #72]	; (c630 <sha256_init+0x54>)
    c5e6:	6083      	str	r3, [r0, #8]
    c5e8:	4b12      	ldr	r3, [pc, #72]	; (c634 <sha256_init+0x58>)
    c5ea:	60c3      	str	r3, [r0, #12]
    c5ec:	4b12      	ldr	r3, [pc, #72]	; (c638 <sha256_init+0x5c>)
    c5ee:	6103      	str	r3, [r0, #16]
    c5f0:	4b12      	ldr	r3, [pc, #72]	; (c63c <sha256_init+0x60>)
    c5f2:	6143      	str	r3, [r0, #20]
    c5f4:	4b12      	ldr	r3, [pc, #72]	; (c640 <sha256_init+0x64>)
    c5f6:	6183      	str	r3, [r0, #24]
    c5f8:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    c5fc:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    c600:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    c604:	61c3      	str	r3, [r0, #28]
    c606:	2200      	movs	r2, #0
    c608:	2300      	movs	r3, #0
    c60a:	e9c0 2308 	strd	r2, r3, [r0, #32]
    c60e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
    c612:	4663      	mov	r3, ip
    c614:	f100 0168 	add.w	r1, r0, #104	; 0x68
    c618:	f843 2b04 	str.w	r2, [r3], #4
    c61c:	428b      	cmp	r3, r1
    c61e:	d1fb      	bne.n	c618 <sha256_init+0x3c>
    c620:	2300      	movs	r3, #0
    c622:	6683      	str	r3, [r0, #104]	; 0x68
    c624:	4770      	bx	lr
    c626:	bf00      	nop
    c628:	6a09e667 	.word	0x6a09e667
    c62c:	bb67ae85 	.word	0xbb67ae85
    c630:	3c6ef372 	.word	0x3c6ef372
    c634:	a54ff53a 	.word	0xa54ff53a
    c638:	510e527f 	.word	0x510e527f
    c63c:	9b05688c 	.word	0x9b05688c
    c640:	1f83d9ab 	.word	0x1f83d9ab

0000c644 <get_wval>:
    c644:	3a01      	subs	r2, #1
    c646:	440a      	add	r2, r1
    c648:	08d2      	lsrs	r2, r2, #3
    c64a:	5c83      	ldrb	r3, [r0, r2]
    c64c:	08ca      	lsrs	r2, r1, #3
    c64e:	5c80      	ldrb	r0, [r0, r2]
    c650:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    c654:	f001 0107 	and.w	r1, r1, #7
    c658:	40c8      	lsrs	r0, r1
    c65a:	4770      	bx	lr

0000c65c <booth_encode>:
    c65c:	fa20 f101 	lsr.w	r1, r0, r1
    c660:	3001      	adds	r0, #1
    c662:	0843      	lsrs	r3, r0, #1
    c664:	1e4a      	subs	r2, r1, #1
    c666:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    c66a:	425b      	negs	r3, r3
    c66c:	4249      	negs	r1, r1
    c66e:	4019      	ands	r1, r3
    c670:	4308      	orrs	r0, r1
    c672:	4770      	bx	lr

0000c674 <sub_mod_n>:
    c674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c678:	9f07      	ldr	r7, [sp, #28]
    c67a:	b397      	cbz	r7, c6e2 <sub_mod_n+0x6e>
    c67c:	4699      	mov	r9, r3
    c67e:	f1a1 0e04 	sub.w	lr, r1, #4
    c682:	1f14      	subs	r4, r2, #4
    c684:	f1a0 0c04 	sub.w	ip, r0, #4
    c688:	ea4f 0887 	mov.w	r8, r7, lsl #2
    c68c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    c690:	4666      	mov	r6, ip
    c692:	2100      	movs	r1, #0
    c694:	460d      	mov	r5, r1
    c696:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    c69a:	1a52      	subs	r2, r2, r1
    c69c:	eb65 0105 	sbc.w	r1, r5, r5
    c6a0:	f854 3f04 	ldr.w	r3, [r4, #4]!
    c6a4:	1ad2      	subs	r2, r2, r3
    c6a6:	f161 0100 	sbc.w	r1, r1, #0
    c6aa:	f846 2f04 	str.w	r2, [r6, #4]!
    c6ae:	f001 0101 	and.w	r1, r1, #1
    c6b2:	45be      	cmp	lr, r7
    c6b4:	d1ef      	bne.n	c696 <sub_mod_n+0x22>
    c6b6:	424a      	negs	r2, r1
    c6b8:	f1a9 0604 	sub.w	r6, r9, #4
    c6bc:	3804      	subs	r0, #4
    c6be:	4480      	add	r8, r0
    c6c0:	2400      	movs	r4, #0
    c6c2:	4625      	mov	r5, r4
    c6c4:	f856 3f04 	ldr.w	r3, [r6, #4]!
    c6c8:	4013      	ands	r3, r2
    c6ca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    c6ce:	1909      	adds	r1, r1, r4
    c6d0:	eb45 0405 	adc.w	r4, r5, r5
    c6d4:	185b      	adds	r3, r3, r1
    c6d6:	f8cc 3000 	str.w	r3, [ip]
    c6da:	f144 0400 	adc.w	r4, r4, #0
    c6de:	45c4      	cmp	ip, r8
    c6e0:	d1f0      	bne.n	c6c4 <sub_mod_n+0x50>
    c6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000c6e6 <check_mod_n>:
    c6e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6e8:	4604      	mov	r4, r0
    c6ea:	4610      	mov	r0, r2
    c6ec:	b302      	cbz	r2, c730 <check_mod_n+0x4a>
    c6ee:	f1a1 0e04 	sub.w	lr, r1, #4
    c6f2:	eb0e 0782 	add.w	r7, lr, r2, lsl #2
    c6f6:	2000      	movs	r0, #0
    c6f8:	4605      	mov	r5, r0
    c6fa:	4606      	mov	r6, r0
    c6fc:	e00d      	b.n	c71a <check_mod_n+0x34>
    c6fe:	3404      	adds	r4, #4
    c700:	430d      	orrs	r5, r1
    c702:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    c706:	181b      	adds	r3, r3, r0
    c708:	eb46 0006 	adc.w	r0, r6, r6
    c70c:	1ac9      	subs	r1, r1, r3
    c70e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    c712:	f000 0001 	and.w	r0, r0, #1
    c716:	45be      	cmp	lr, r7
    c718:	d00b      	beq.n	c732 <check_mod_n+0x4c>
    c71a:	46a4      	mov	ip, r4
    c71c:	2300      	movs	r3, #0
    c71e:	4619      	mov	r1, r3
    c720:	f81c 2b01 	ldrb.w	r2, [ip], #1
    c724:	409a      	lsls	r2, r3
    c726:	4311      	orrs	r1, r2
    c728:	3308      	adds	r3, #8
    c72a:	2b20      	cmp	r3, #32
    c72c:	d1f8      	bne.n	c720 <check_mod_n+0x3a>
    c72e:	e7e6      	b.n	c6fe <check_mod_n+0x18>
    c730:	4615      	mov	r5, r2
    c732:	1e6b      	subs	r3, r5, #1
    c734:	ea23 0505 	bic.w	r5, r3, r5
    c738:	2d00      	cmp	r5, #0
    c73a:	bfb4      	ite	lt
    c73c:	2000      	movlt	r0, #0
    c73e:	f000 0001 	andge.w	r0, r0, #1
    c742:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c744 <rshift_mod_n>:
    c744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c748:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    c74c:	2a00      	cmp	r2, #0
    c74e:	d049      	beq.n	c7e4 <rshift_mod_n+0xa0>
    c750:	4606      	mov	r6, r0
    c752:	460c      	mov	r4, r1
    c754:	4699      	mov	r9, r3
    c756:	1e57      	subs	r7, r2, #1
    c758:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    c75c:	f1aa 0a04 	sub.w	sl, sl, #4
    c760:	f04f 0e00 	mov.w	lr, #0
    c764:	e01c      	b.n	c7a0 <rshift_mod_n+0x5c>
    c766:	6832      	ldr	r2, [r6, #0]
    c768:	46c3      	mov	fp, r8
    c76a:	f04f 34ff 	mov.w	r4, #4294967295
    c76e:	4630      	mov	r0, r6
    c770:	2100      	movs	r1, #0
    c772:	0853      	lsrs	r3, r2, #1
    c774:	3101      	adds	r1, #1
    c776:	6842      	ldr	r2, [r0, #4]
    c778:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    c77c:	f840 3b04 	str.w	r3, [r0], #4
    c780:	42a1      	cmp	r1, r4
    c782:	d3f6      	bcc.n	c772 <rshift_mod_n+0x2e>
    c784:	2c00      	cmp	r4, #0
    c786:	bf08      	it	eq
    c788:	2401      	moveq	r4, #1
    c78a:	ea4f 7bcb 	mov.w	fp, fp, lsl #31
    c78e:	ea4b 0252 	orr.w	r2, fp, r2, lsr #1
    c792:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
    c796:	3f01      	subs	r7, #1
    c798:	f1b7 3fff 	cmp.w	r7, #4294967295
    c79c:	d022      	beq.n	c7e4 <rshift_mod_n+0xa0>
    c79e:	4634      	mov	r4, r6
    c7a0:	6825      	ldr	r5, [r4, #0]
    c7a2:	f345 0500 	sbfx	r5, r5, #0, #1
    c7a6:	f1b8 0f00 	cmp.w	r8, #0
    c7aa:	d0dc      	beq.n	c766 <rshift_mod_n+0x22>
    c7ac:	f1a4 0c04 	sub.w	ip, r4, #4
    c7b0:	f1a9 0004 	sub.w	r0, r9, #4
    c7b4:	1f33      	subs	r3, r6, #4
    c7b6:	4454      	add	r4, sl
    c7b8:	46f3      	mov	fp, lr
    c7ba:	f850 2f04 	ldr.w	r2, [r0, #4]!
    c7be:	402a      	ands	r2, r5
    c7c0:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    c7c4:	eb11 010b 	adds.w	r1, r1, fp
    c7c8:	eb4e 0b0e 	adc.w	fp, lr, lr
    c7cc:	1851      	adds	r1, r2, r1
    c7ce:	f843 1f04 	str.w	r1, [r3, #4]!
    c7d2:	f14b 0b00 	adc.w	fp, fp, #0
    c7d6:	45a4      	cmp	ip, r4
    c7d8:	d1ef      	bne.n	c7ba <rshift_mod_n+0x76>
    c7da:	6832      	ldr	r2, [r6, #0]
    c7dc:	f1b8 0401 	subs.w	r4, r8, #1
    c7e0:	d1c5      	bne.n	c76e <rshift_mod_n+0x2a>
    c7e2:	e7d2      	b.n	c78a <rshift_mod_n+0x46>
    c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c7e8 <inner_loop_n>:
    c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ec:	b083      	sub	sp, #12
    c7ee:	9001      	str	r0, [sp, #4]
    c7f0:	6808      	ldr	r0, [r1, #0]
    c7f2:	684e      	ldr	r6, [r1, #4]
    c7f4:	f8d2 8000 	ldr.w	r8, [r2]
    c7f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
    c7fc:	1e5a      	subs	r2, r3, #1
    c7fe:	9200      	str	r2, [sp, #0]
    c800:	2b00      	cmp	r3, #0
    c802:	d056      	beq.n	c8b2 <inner_loop_n+0xca>
    c804:	2401      	movs	r4, #1
    c806:	2500      	movs	r5, #0
    c808:	462b      	mov	r3, r5
    c80a:	4627      	mov	r7, r4
    c80c:	46aa      	mov	sl, r5
    c80e:	f340 0e00 	sbfx	lr, r0, #0, #1
    c812:	ea0e 0108 	and.w	r1, lr, r8
    c816:	1a42      	subs	r2, r0, r1
    c818:	1a41      	subs	r1, r0, r1
    c81a:	eb6a 010a 	sbc.w	r1, sl, sl
    c81e:	f001 0b01 	and.w	fp, r1, #1
    c822:	ea0e 0109 	and.w	r1, lr, r9
    c826:	1a71      	subs	r1, r6, r1
    c828:	eb6a 0c0a 	sbc.w	ip, sl, sl
    c82c:	ebb1 010b 	subs.w	r1, r1, fp
    c830:	f16c 0c00 	sbc.w	ip, ip, #0
    c834:	ea81 010c 	eor.w	r1, r1, ip
    c838:	ea82 020c 	eor.w	r2, r2, ip
    c83c:	f00c 0b01 	and.w	fp, ip, #1
    c840:	eb12 020b 	adds.w	r2, r2, fp
    c844:	f141 0100 	adc.w	r1, r1, #0
    c848:	ea80 0008 	eor.w	r0, r0, r8
    c84c:	ea00 000c 	and.w	r0, r0, ip
    c850:	ea88 0800 	eor.w	r8, r8, r0
    c854:	ea86 0609 	eor.w	r6, r6, r9
    c858:	ea06 060c 	and.w	r6, r6, ip
    c85c:	ea89 0906 	eor.w	r9, r9, r6
    c860:	ea87 0005 	eor.w	r0, r7, r5
    c864:	ea00 000c 	and.w	r0, r0, ip
    c868:	4047      	eors	r7, r0
    c86a:	4045      	eors	r5, r0
    c86c:	ea83 0004 	eor.w	r0, r3, r4
    c870:	ea00 0c0c 	and.w	ip, r0, ip
    c874:	ea8c 0303 	eor.w	r3, ip, r3
    c878:	ea8c 0404 	eor.w	r4, ip, r4
    c87c:	ea0e 0005 	and.w	r0, lr, r5
    c880:	1a3f      	subs	r7, r7, r0
    c882:	ea0e 0e04 	and.w	lr, lr, r4
    c886:	eba3 030e 	sub.w	r3, r3, lr
    c88a:	006d      	lsls	r5, r5, #1
    c88c:	0064      	lsls	r4, r4, #1
    c88e:	07c8      	lsls	r0, r1, #31
    c890:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
    c894:	084e      	lsrs	r6, r1, #1
    c896:	9a00      	ldr	r2, [sp, #0]
    c898:	3a01      	subs	r2, #1
    c89a:	9200      	str	r2, [sp, #0]
    c89c:	f1b2 3fff 	cmp.w	r2, #4294967295
    c8a0:	d1b5      	bne.n	c80e <inner_loop_n+0x26>
    c8a2:	9a01      	ldr	r2, [sp, #4]
    c8a4:	6017      	str	r7, [r2, #0]
    c8a6:	6053      	str	r3, [r2, #4]
    c8a8:	6095      	str	r5, [r2, #8]
    c8aa:	60d4      	str	r4, [r2, #12]
    c8ac:	b003      	add	sp, #12
    c8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8b2:	461d      	mov	r5, r3
    c8b4:	2401      	movs	r4, #1
    c8b6:	4627      	mov	r7, r4
    c8b8:	e7f3      	b.n	c8a2 <inner_loop_n+0xba>

0000c8ba <cneg_n>:
    c8ba:	b1bb      	cbz	r3, c8ec <cneg_n+0x32>
    c8bc:	b530      	push	{r4, r5, lr}
    c8be:	f002 0c01 	and.w	ip, r2, #1
    c8c2:	3904      	subs	r1, #4
    c8c4:	3804      	subs	r0, #4
    c8c6:	eb01 0583 	add.w	r5, r1, r3, lsl #2
    c8ca:	f04f 0e00 	mov.w	lr, #0
    c8ce:	f851 3f04 	ldr.w	r3, [r1, #4]!
    c8d2:	4053      	eors	r3, r2
    c8d4:	eb03 040c 	add.w	r4, r3, ip
    c8d8:	f840 4f04 	str.w	r4, [r0, #4]!
    c8dc:	eb13 030c 	adds.w	r3, r3, ip
    c8e0:	eb4e 030e 	adc.w	r3, lr, lr
    c8e4:	469c      	mov	ip, r3
    c8e6:	42a9      	cmp	r1, r5
    c8e8:	d1f1      	bne.n	c8ce <cneg_n+0x14>
    c8ea:	bd30      	pop	{r4, r5, pc}
    c8ec:	4770      	bx	lr

0000c8ee <umul_n>:
    c8ee:	b193      	cbz	r3, c916 <umul_n+0x28>
    c8f0:	b510      	push	{r4, lr}
    c8f2:	3904      	subs	r1, #4
    c8f4:	f1a0 0e04 	sub.w	lr, r0, #4
    c8f8:	eb01 0483 	add.w	r4, r1, r3, lsl #2
    c8fc:	2000      	movs	r0, #0
    c8fe:	f851 3f04 	ldr.w	r3, [r1, #4]!
    c902:	fba3 3c02 	umull	r3, ip, r3, r2
    c906:	181b      	adds	r3, r3, r0
    c908:	f84e 3f04 	str.w	r3, [lr, #4]!
    c90c:	f14c 0000 	adc.w	r0, ip, #0
    c910:	42a1      	cmp	r1, r4
    c912:	d1f4      	bne.n	c8fe <umul_n+0x10>
    c914:	bd10      	pop	{r4, pc}
    c916:	4618      	mov	r0, r3
    c918:	4770      	bx	lr

0000c91a <nibble>:
    c91a:	4603      	mov	r3, r0
    c91c:	3830      	subs	r0, #48	; 0x30
    c91e:	b2c0      	uxtb	r0, r0
    c920:	2809      	cmp	r0, #9
    c922:	d910      	bls.n	c946 <nibble+0x2c>
    c924:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    c928:	b2d2      	uxtb	r2, r2
    c92a:	2a05      	cmp	r2, #5
    c92c:	d907      	bls.n	c93e <nibble+0x24>
    c92e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    c932:	b2d2      	uxtb	r2, r2
    c934:	2a05      	cmp	r2, #5
    c936:	d805      	bhi.n	c944 <nibble+0x2a>
    c938:	3b37      	subs	r3, #55	; 0x37
    c93a:	b2d8      	uxtb	r0, r3
    c93c:	4770      	bx	lr
    c93e:	3b57      	subs	r3, #87	; 0x57
    c940:	b2d8      	uxtb	r0, r3
    c942:	4770      	bx	lr
    c944:	2010      	movs	r0, #16
    c946:	4770      	bx	lr

0000c948 <limbs_from_hexascii>:
    c948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c94c:	4607      	mov	r7, r0
    c94e:	4689      	mov	r9, r1
    c950:	4616      	mov	r6, r2
    c952:	7813      	ldrb	r3, [r2, #0]
    c954:	2b30      	cmp	r3, #48	; 0x30
    c956:	d00e      	beq.n	c976 <limbs_from_hexascii+0x2e>
    c958:	ea5f 0849 	movs.w	r8, r9, lsl #1
    c95c:	d013      	beq.n	c986 <limbs_from_hexascii+0x3e>
    c95e:	1e75      	subs	r5, r6, #1
    c960:	2400      	movs	r4, #0
    c962:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    c966:	f7ff ffd8 	bl	c91a <nibble>
    c96a:	280f      	cmp	r0, #15
    c96c:	d80a      	bhi.n	c984 <limbs_from_hexascii+0x3c>
    c96e:	3401      	adds	r4, #1
    c970:	4544      	cmp	r4, r8
    c972:	d1f6      	bne.n	c962 <limbs_from_hexascii+0x1a>
    c974:	e007      	b.n	c986 <limbs_from_hexascii+0x3e>
    c976:	7853      	ldrb	r3, [r2, #1]
    c978:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c97c:	2b58      	cmp	r3, #88	; 0x58
    c97e:	bf08      	it	eq
    c980:	3602      	addeq	r6, #2
    c982:	e7e9      	b.n	c958 <limbs_from_hexascii+0x10>
    c984:	46a0      	mov	r8, r4
    c986:	ea4f 0099 	mov.w	r0, r9, lsr #2
    c98a:	f1b9 0f03 	cmp.w	r9, #3
    c98e:	d907      	bls.n	c9a0 <limbs_from_hexascii+0x58>
    c990:	463a      	mov	r2, r7
    c992:	2300      	movs	r3, #0
    c994:	4619      	mov	r1, r3
    c996:	f842 1b04 	str.w	r1, [r2], #4
    c99a:	3301      	adds	r3, #1
    c99c:	4298      	cmp	r0, r3
    c99e:	d8fa      	bhi.n	c996 <limbs_from_hexascii+0x4e>
    c9a0:	f108 34ff 	add.w	r4, r8, #4294967295
    c9a4:	f1b8 0f00 	cmp.w	r8, #0
    c9a8:	d010      	beq.n	c9cc <limbs_from_hexascii+0x84>
    c9aa:	2500      	movs	r5, #0
    c9ac:	012d      	lsls	r5, r5, #4
    c9ae:	f816 0b01 	ldrb.w	r0, [r6], #1
    c9b2:	f7ff ffb2 	bl	c91a <nibble>
    c9b6:	4305      	orrs	r5, r0
    c9b8:	f014 0f07 	tst.w	r4, #7
    c9bc:	bf04      	itt	eq
    c9be:	08e3      	lsreq	r3, r4, #3
    c9c0:	f847 5023 	streq.w	r5, [r7, r3, lsl #2]
    c9c4:	3c01      	subs	r4, #1
    c9c6:	f1b4 3fff 	cmp.w	r4, #4294967295
    c9ca:	d1ef      	bne.n	c9ac <limbs_from_hexascii+0x64>
    c9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c9d0 <mul_mont_n>:
    c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9d4:	b087      	sub	sp, #28
    c9d6:	af00      	add	r7, sp, #0
    c9d8:	6038      	str	r0, [r7, #0]
    c9da:	60b9      	str	r1, [r7, #8]
    c9dc:	617b      	str	r3, [r7, #20]
    c9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9e0:	3301      	adds	r3, #1
    c9e2:	0098      	lsls	r0, r3, #2
    c9e4:	6078      	str	r0, [r7, #4]
    c9e6:	1dc3      	adds	r3, r0, #7
    c9e8:	f023 0307 	bic.w	r3, r3, #7
    c9ec:	ebad 0d03 	sub.w	sp, sp, r3
    c9f0:	46e8      	mov	r8, sp
    c9f2:	6815      	ldr	r5, [r2, #0]
    c9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c9f6:	b363      	cbz	r3, ca52 <mul_mont_n+0x82>
    c9f8:	1f0c      	subs	r4, r1, #4
    c9fa:	f1a8 0604 	sub.w	r6, r8, #4
    c9fe:	f1a0 0c04 	sub.w	ip, r0, #4
    ca02:	44a4      	add	ip, r4
    ca04:	2100      	movs	r1, #0
    ca06:	f854 3f04 	ldr.w	r3, [r4, #4]!
    ca0a:	fba3 3005 	umull	r3, r0, r3, r5
    ca0e:	185b      	adds	r3, r3, r1
    ca10:	f846 3f04 	str.w	r3, [r6, #4]!
    ca14:	f140 0100 	adc.w	r1, r0, #0
    ca18:	4564      	cmp	r4, ip
    ca1a:	d1f4      	bne.n	ca06 <mul_mont_n+0x36>
    ca1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
    ca1e:	f8d8 3000 	ldr.w	r3, [r8]
    ca22:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ca24:	fb04 f303 	mul.w	r3, r4, r3
    ca28:	f848 1020 	str.w	r1, [r8, r0, lsl #2]
    ca2c:	697d      	ldr	r5, [r7, #20]
    ca2e:	f855 1904 	ldr.w	r1, [r5], #-4
    ca32:	60f9      	str	r1, [r7, #12]
    ca34:	4691      	mov	r9, r2
    ca36:	6879      	ldr	r1, [r7, #4]
    ca38:	1f0e      	subs	r6, r1, #4
    ca3a:	3a04      	subs	r2, #4
    ca3c:	4631      	mov	r1, r6
    ca3e:	4432      	add	r2, r6
    ca40:	613a      	str	r2, [r7, #16]
    ca42:	4435      	add	r5, r6
    ca44:	68ba      	ldr	r2, [r7, #8]
    ca46:	1f16      	subs	r6, r2, #4
    ca48:	440e      	add	r6, r1
    ca4a:	f04f 0c00 	mov.w	ip, #0
    ca4e:	4664      	mov	r4, ip
    ca50:	e056      	b.n	cb00 <mul_mont_n+0x130>
    ca52:	6c78      	ldr	r0, [r7, #68]	; 0x44
    ca54:	4601      	mov	r1, r0
    ca56:	e7e2      	b.n	ca1e <mul_mont_n+0x4e>
    ca58:	2301      	movs	r3, #1
    ca5a:	e072      	b.n	cb42 <mul_mont_n+0x172>
    ca5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ca5e:	b37b      	cbz	r3, cac0 <mul_mont_n+0xf0>
    ca60:	f1a8 0404 	sub.w	r4, r8, #4
    ca64:	697b      	ldr	r3, [r7, #20]
    ca66:	f1a3 0c04 	sub.w	ip, r3, #4
    ca6a:	683b      	ldr	r3, [r7, #0]
    ca6c:	1f19      	subs	r1, r3, #4
    ca6e:	687b      	ldr	r3, [r7, #4]
    ca70:	3b08      	subs	r3, #8
    ca72:	4498      	add	r8, r3
    ca74:	460e      	mov	r6, r1
    ca76:	4620      	mov	r0, r4
    ca78:	2300      	movs	r3, #0
    ca7a:	461d      	mov	r5, r3
    ca7c:	f850 2f04 	ldr.w	r2, [r0, #4]!
    ca80:	1ad3      	subs	r3, r2, r3
    ca82:	eb65 0205 	sbc.w	r2, r5, r5
    ca86:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    ca8a:	ebb3 0309 	subs.w	r3, r3, r9
    ca8e:	f162 0200 	sbc.w	r2, r2, #0
    ca92:	f846 3f04 	str.w	r3, [r6, #4]!
    ca96:	f002 0301 	and.w	r3, r2, #1
    ca9a:	4540      	cmp	r0, r8
    ca9c:	d1ee      	bne.n	ca7c <mul_mont_n+0xac>
    ca9e:	ebae 0e03 	sub.w	lr, lr, r3
    caa2:	6838      	ldr	r0, [r7, #0]
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	4418      	add	r0, r3
    caa8:	3808      	subs	r0, #8
    caaa:	f851 2f04 	ldr.w	r2, [r1, #4]!
    caae:	f854 3f04 	ldr.w	r3, [r4, #4]!
    cab2:	4053      	eors	r3, r2
    cab4:	ea03 030e 	and.w	r3, r3, lr
    cab8:	4053      	eors	r3, r2
    caba:	600b      	str	r3, [r1, #0]
    cabc:	4281      	cmp	r1, r0
    cabe:	d1f4      	bne.n	caaa <mul_mont_n+0xda>
    cac0:	371c      	adds	r7, #28
    cac2:	46bd      	mov	sp, r7
    cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cac8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    cacc:	fba1 100b 	umull	r1, r0, r1, fp
    cad0:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    cad4:	189b      	adds	r3, r3, r2
    cad6:	eb44 0204 	adc.w	r2, r4, r4
    cada:	18cb      	adds	r3, r1, r3
    cadc:	f8cc 3000 	str.w	r3, [ip]
    cae0:	eb40 0202 	adc.w	r2, r0, r2
    cae4:	45b6      	cmp	lr, r6
    cae6:	d1ef      	bne.n	cac8 <mul_mont_n+0xf8>
    cae8:	6c79      	ldr	r1, [r7, #68]	; 0x44
    caea:	f8d8 3000 	ldr.w	r3, [r8]
    caee:	6c38      	ldr	r0, [r7, #64]	; 0x40
    caf0:	fb00 f303 	mul.w	r3, r0, r3
    caf4:	eb12 020a 	adds.w	r2, r2, sl
    caf8:	f144 0c00 	adc.w	ip, r4, #0
    cafc:	f848 2021 	str.w	r2, [r8, r1, lsl #2]
    cb00:	68fa      	ldr	r2, [r7, #12]
    cb02:	fba3 e102 	umull	lr, r1, r3, r2
    cb06:	f8d8 0000 	ldr.w	r0, [r8]
    cb0a:	eb1e 0000 	adds.w	r0, lr, r0
    cb0e:	f141 0200 	adc.w	r2, r1, #0
    cb12:	6c79      	ldr	r1, [r7, #68]	; 0x44
    cb14:	2901      	cmp	r1, #1
    cb16:	d99f      	bls.n	ca58 <mul_mont_n+0x88>
    cb18:	46c6      	mov	lr, r8
    cb1a:	6978      	ldr	r0, [r7, #20]
    cb1c:	46b3      	mov	fp, r6
    cb1e:	f850 1f04 	ldr.w	r1, [r0, #4]!
    cb22:	fba1 1a03 	umull	r1, sl, r1, r3
    cb26:	188a      	adds	r2, r1, r2
    cb28:	f14a 0100 	adc.w	r1, sl, #0
    cb2c:	f8de 6004 	ldr.w	r6, [lr, #4]
    cb30:	1992      	adds	r2, r2, r6
    cb32:	f84e 2b04 	str.w	r2, [lr], #4
    cb36:	f141 0200 	adc.w	r2, r1, #0
    cb3a:	42a8      	cmp	r0, r5
    cb3c:	d1ef      	bne.n	cb1e <mul_mont_n+0x14e>
    cb3e:	465e      	mov	r6, fp
    cb40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb42:	eb08 0083 	add.w	r0, r8, r3, lsl #2
    cb46:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
    cb4a:	eb12 010c 	adds.w	r1, r2, ip
    cb4e:	eb44 0e04 	adc.w	lr, r4, r4
    cb52:	1859      	adds	r1, r3, r1
    cb54:	f14e 0e00 	adc.w	lr, lr, #0
    cb58:	f840 1c04 	str.w	r1, [r0, #-4]
    cb5c:	46f2      	mov	sl, lr
    cb5e:	693b      	ldr	r3, [r7, #16]
    cb60:	4599      	cmp	r9, r3
    cb62:	f43f af7b 	beq.w	ca5c <mul_mont_n+0x8c>
    cb66:	f859 bf04 	ldr.w	fp, [r9, #4]!
    cb6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    cb6c:	b133      	cbz	r3, cb7c <mul_mont_n+0x1ac>
    cb6e:	68bb      	ldr	r3, [r7, #8]
    cb70:	f1a3 0e04 	sub.w	lr, r3, #4
    cb74:	f1a8 0c04 	sub.w	ip, r8, #4
    cb78:	4622      	mov	r2, r4
    cb7a:	e7a5      	b.n	cac8 <mul_mont_n+0xf8>
    cb7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
    cb7e:	460a      	mov	r2, r1
    cb80:	e7b3      	b.n	caea <mul_mont_n+0x11a>

0000cb82 <sigma>:
    cb82:	b510      	push	{r4, lr}
    cb84:	b082      	sub	sp, #8
    cb86:	1f0b      	subs	r3, r1, #4
    cb88:	1f02      	subs	r2, r0, #4
    cb8a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    cb8e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    cb92:	f842 4f04 	str.w	r4, [r2, #4]!
    cb96:	4563      	cmp	r3, ip
    cb98:	d1f9      	bne.n	cb8e <sigma+0xc>
    cb9a:	4b06      	ldr	r3, [pc, #24]	; (cbb4 <sigma+0x32>)
    cb9c:	220c      	movs	r2, #12
    cb9e:	9201      	str	r2, [sp, #4]
    cba0:	4a05      	ldr	r2, [pc, #20]	; (cbb8 <sigma+0x36>)
    cba2:	9200      	str	r2, [sp, #0]
    cba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
    cba8:	3160      	adds	r1, #96	; 0x60
    cbaa:	3060      	adds	r0, #96	; 0x60
    cbac:	f7ff ff10 	bl	c9d0 <mul_mont_n>
    cbb0:	b002      	add	sp, #8
    cbb2:	bd10      	pop	{r4, pc}
    cbb4:	00024108 	.word	0x00024108
    cbb8:	fffcfffd 	.word	0xfffcfffd

0000cbbc <map_fp_times_Zz>:
    cbbc:	b323      	cbz	r3, cc08 <map_fp_times_Zz+0x4c>
    cbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbc2:	b082      	sub	sp, #8
    cbc4:	1e5f      	subs	r7, r3, #1
    cbc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cbca:	011c      	lsls	r4, r3, #4
    cbcc:	3c30      	subs	r4, #48	; 0x30
    cbce:	1906      	adds	r6, r0, r4
    cbd0:	190d      	adds	r5, r1, r4
    cbd2:	4414      	add	r4, r2
    cbd4:	f8df a034 	ldr.w	sl, [pc, #52]	; cc0c <map_fp_times_Zz+0x50>
    cbd8:	f04f 090c 	mov.w	r9, #12
    cbdc:	f8df 8030 	ldr.w	r8, [pc, #48]	; cc10 <map_fp_times_Zz+0x54>
    cbe0:	f8cd 9004 	str.w	r9, [sp, #4]
    cbe4:	f8cd 8000 	str.w	r8, [sp]
    cbe8:	4653      	mov	r3, sl
    cbea:	4622      	mov	r2, r4
    cbec:	4629      	mov	r1, r5
    cbee:	4630      	mov	r0, r6
    cbf0:	f7ff feee 	bl	c9d0 <mul_mont_n>
    cbf4:	3f01      	subs	r7, #1
    cbf6:	3e30      	subs	r6, #48	; 0x30
    cbf8:	3d30      	subs	r5, #48	; 0x30
    cbfa:	3c30      	subs	r4, #48	; 0x30
    cbfc:	f1b7 3fff 	cmp.w	r7, #4294967295
    cc00:	d1ee      	bne.n	cbe0 <map_fp_times_Zz+0x24>
    cc02:	b002      	add	sp, #8
    cc04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc08:	4770      	bx	lr
    cc0a:	bf00      	nop
    cc0c:	00024108 	.word	0x00024108
    cc10:	fffcfffd 	.word	0xfffcfffd

0000cc14 <line_by_Px2>:
    cc14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc18:	b082      	sub	sp, #8
    cc1a:	4604      	mov	r4, r0
    cc1c:	460d      	mov	r5, r1
    cc1e:	3060      	adds	r0, #96	; 0x60
    cc20:	4e16      	ldr	r6, [pc, #88]	; (cc7c <line_by_Px2+0x68>)
    cc22:	f04f 080c 	mov.w	r8, #12
    cc26:	f8cd 8004 	str.w	r8, [sp, #4]
    cc2a:	4f15      	ldr	r7, [pc, #84]	; (cc80 <line_by_Px2+0x6c>)
    cc2c:	9700      	str	r7, [sp, #0]
    cc2e:	4633      	mov	r3, r6
    cc30:	460a      	mov	r2, r1
    cc32:	4601      	mov	r1, r0
    cc34:	f7ff fecc 	bl	c9d0 <mul_mont_n>
    cc38:	f104 0090 	add.w	r0, r4, #144	; 0x90
    cc3c:	f8cd 8004 	str.w	r8, [sp, #4]
    cc40:	9700      	str	r7, [sp, #0]
    cc42:	4633      	mov	r3, r6
    cc44:	462a      	mov	r2, r5
    cc46:	4601      	mov	r1, r0
    cc48:	f7ff fec2 	bl	c9d0 <mul_mont_n>
    cc4c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    cc50:	3530      	adds	r5, #48	; 0x30
    cc52:	f8cd 8004 	str.w	r8, [sp, #4]
    cc56:	9700      	str	r7, [sp, #0]
    cc58:	4633      	mov	r3, r6
    cc5a:	462a      	mov	r2, r5
    cc5c:	4601      	mov	r1, r0
    cc5e:	f7ff feb7 	bl	c9d0 <mul_mont_n>
    cc62:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    cc66:	f8cd 8004 	str.w	r8, [sp, #4]
    cc6a:	9700      	str	r7, [sp, #0]
    cc6c:	4633      	mov	r3, r6
    cc6e:	462a      	mov	r2, r5
    cc70:	4601      	mov	r1, r0
    cc72:	f7ff fead 	bl	c9d0 <mul_mont_n>
    cc76:	b002      	add	sp, #8
    cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc7c:	00024108 	.word	0x00024108
    cc80:	fffcfffd 	.word	0xfffcfffd

0000cc84 <post_line_by_Px2>:
    cc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cc88:	b083      	sub	sp, #12
    cc8a:	4607      	mov	r7, r0
    cc8c:	460d      	mov	r5, r1
    cc8e:	4616      	mov	r6, r2
    cc90:	1f0b      	subs	r3, r1, #4
    cc92:	f1a0 0c04 	sub.w	ip, r0, #4
    cc96:	f101 0e5c 	add.w	lr, r1, #92	; 0x5c
    cc9a:	f853 4f04 	ldr.w	r4, [r3, #4]!
    cc9e:	f84c 4f04 	str.w	r4, [ip, #4]!
    cca2:	4573      	cmp	r3, lr
    cca4:	d1f9      	bne.n	cc9a <post_line_by_Px2+0x16>
    cca6:	4c1c      	ldr	r4, [pc, #112]	; (cd18 <post_line_by_Px2+0x94>)
    cca8:	f04f 090c 	mov.w	r9, #12
    ccac:	f8cd 9004 	str.w	r9, [sp, #4]
    ccb0:	f8df 8068 	ldr.w	r8, [pc, #104]	; cd1c <post_line_by_Px2+0x98>
    ccb4:	f8cd 8000 	str.w	r8, [sp]
    ccb8:	4623      	mov	r3, r4
    ccba:	4632      	mov	r2, r6
    ccbc:	f105 0160 	add.w	r1, r5, #96	; 0x60
    ccc0:	f107 0060 	add.w	r0, r7, #96	; 0x60
    ccc4:	f7ff fe84 	bl	c9d0 <mul_mont_n>
    ccc8:	f8cd 9004 	str.w	r9, [sp, #4]
    cccc:	f8cd 8000 	str.w	r8, [sp]
    ccd0:	4623      	mov	r3, r4
    ccd2:	4632      	mov	r2, r6
    ccd4:	f105 0190 	add.w	r1, r5, #144	; 0x90
    ccd8:	f107 0090 	add.w	r0, r7, #144	; 0x90
    ccdc:	f7ff fe78 	bl	c9d0 <mul_mont_n>
    cce0:	3630      	adds	r6, #48	; 0x30
    cce2:	f8cd 9004 	str.w	r9, [sp, #4]
    cce6:	f8cd 8000 	str.w	r8, [sp]
    ccea:	4623      	mov	r3, r4
    ccec:	4632      	mov	r2, r6
    ccee:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    ccf2:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
    ccf6:	f7ff fe6b 	bl	c9d0 <mul_mont_n>
    ccfa:	f8cd 9004 	str.w	r9, [sp, #4]
    ccfe:	f8cd 8000 	str.w	r8, [sp]
    cd02:	4623      	mov	r3, r4
    cd04:	4632      	mov	r2, r6
    cd06:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    cd0a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    cd0e:	f7ff fe5f 	bl	c9d0 <mul_mont_n>
    cd12:	b003      	add	sp, #12
    cd14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cd18:	00024108 	.word	0x00024108
    cd1c:	fffcfffd 	.word	0xfffcfffd

0000cd20 <add_mod_n>:
    cd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd24:	b083      	sub	sp, #12
    cd26:	af00      	add	r7, sp, #0
    cd28:	607b      	str	r3, [r7, #4]
    cd2a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    cd2c:	ea4f 0985 	mov.w	r9, r5, lsl #2
    cd30:	f109 0407 	add.w	r4, r9, #7
    cd34:	f024 0407 	bic.w	r4, r4, #7
    cd38:	ebad 0d04 	sub.w	sp, sp, r4
    cd3c:	2d00      	cmp	r5, #0
    cd3e:	d044      	beq.n	cdca <add_mod_n+0xaa>
    cd40:	46ea      	mov	sl, sp
    cd42:	f1a1 0c04 	sub.w	ip, r1, #4
    cd46:	f1a2 0e04 	sub.w	lr, r2, #4
    cd4a:	f1aa 0404 	sub.w	r4, sl, #4
    cd4e:	eb0c 0809 	add.w	r8, ip, r9
    cd52:	4626      	mov	r6, r4
    cd54:	2100      	movs	r1, #0
    cd56:	460d      	mov	r5, r1
    cd58:	f85c 2f04 	ldr.w	r2, [ip, #4]!
    cd5c:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    cd60:	18d2      	adds	r2, r2, r3
    cd62:	eb45 0b05 	adc.w	fp, r5, r5
    cd66:	1852      	adds	r2, r2, r1
    cd68:	f846 2f04 	str.w	r2, [r6, #4]!
    cd6c:	f14b 0100 	adc.w	r1, fp, #0
    cd70:	45c4      	cmp	ip, r8
    cd72:	d1f1      	bne.n	cd58 <add_mod_n+0x38>
    cd74:	687b      	ldr	r3, [r7, #4]
    cd76:	3b04      	subs	r3, #4
    cd78:	1f05      	subs	r5, r0, #4
    cd7a:	f1a9 0204 	sub.w	r2, r9, #4
    cd7e:	4492      	add	sl, r2
    cd80:	46ae      	mov	lr, r5
    cd82:	4626      	mov	r6, r4
    cd84:	f04f 0800 	mov.w	r8, #0
    cd88:	46c4      	mov	ip, r8
    cd8a:	f856 2f04 	ldr.w	r2, [r6, #4]!
    cd8e:	ebb2 0208 	subs.w	r2, r2, r8
    cd92:	eb6c 080c 	sbc.w	r8, ip, ip
    cd96:	f853 bf04 	ldr.w	fp, [r3, #4]!
    cd9a:	ebb2 020b 	subs.w	r2, r2, fp
    cd9e:	f168 0800 	sbc.w	r8, r8, #0
    cda2:	f84e 2f04 	str.w	r2, [lr, #4]!
    cda6:	f008 0801 	and.w	r8, r8, #1
    cdaa:	4556      	cmp	r6, sl
    cdac:	d1ed      	bne.n	cd8a <add_mod_n+0x6a>
    cdae:	eba1 0208 	sub.w	r2, r1, r8
    cdb2:	3804      	subs	r0, #4
    cdb4:	4481      	add	r9, r0
    cdb6:	f855 1f04 	ldr.w	r1, [r5, #4]!
    cdba:	f854 3f04 	ldr.w	r3, [r4, #4]!
    cdbe:	404b      	eors	r3, r1
    cdc0:	4013      	ands	r3, r2
    cdc2:	404b      	eors	r3, r1
    cdc4:	602b      	str	r3, [r5, #0]
    cdc6:	454d      	cmp	r5, r9
    cdc8:	d1f5      	bne.n	cdb6 <add_mod_n+0x96>
    cdca:	370c      	adds	r7, #12
    cdcc:	46bd      	mov	sp, r7
    cdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cdd2 <map_fp>:
    cdd2:	b343      	cbz	r3, ce26 <map_fp+0x54>
    cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdd8:	b082      	sub	sp, #8
    cdda:	4604      	mov	r4, r0
    cddc:	4688      	mov	r8, r1
    cdde:	1e5e      	subs	r6, r3, #1
    cde0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    cde4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    cde8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
    cdec:	f8df 9038 	ldr.w	r9, [pc, #56]	; ce28 <map_fp+0x56>
    cdf0:	270c      	movs	r7, #12
    cdf2:	f8df a038 	ldr.w	sl, [pc, #56]	; ce2c <map_fp+0x5a>
    cdf6:	9701      	str	r7, [sp, #4]
    cdf8:	f8cd a000 	str.w	sl, [sp]
    cdfc:	464b      	mov	r3, r9
    cdfe:	4642      	mov	r2, r8
    ce00:	4621      	mov	r1, r4
    ce02:	4620      	mov	r0, r4
    ce04:	f7ff fde4 	bl	c9d0 <mul_mont_n>
    ce08:	9700      	str	r7, [sp, #0]
    ce0a:	464b      	mov	r3, r9
    ce0c:	462a      	mov	r2, r5
    ce0e:	4621      	mov	r1, r4
    ce10:	4620      	mov	r0, r4
    ce12:	f7ff ff85 	bl	cd20 <add_mod_n>
    ce16:	3e01      	subs	r6, #1
    ce18:	3d30      	subs	r5, #48	; 0x30
    ce1a:	f1b6 3fff 	cmp.w	r6, #4294967295
    ce1e:	d1ea      	bne.n	cdf6 <map_fp+0x24>
    ce20:	b002      	add	sp, #8
    ce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce26:	4770      	bx	lr
    ce28:	00024108 	.word	0x00024108
    ce2c:	fffcfffd 	.word	0xfffcfffd

0000ce30 <mul_by_3_mod_n>:
    ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce34:	b087      	sub	sp, #28
    ce36:	af00      	add	r7, sp, #0
    ce38:	60f8      	str	r0, [r7, #12]
    ce3a:	4618      	mov	r0, r3
    ce3c:	60bb      	str	r3, [r7, #8]
    ce3e:	009e      	lsls	r6, r3, #2
    ce40:	617e      	str	r6, [r7, #20]
    ce42:	1df3      	adds	r3, r6, #7
    ce44:	f023 0307 	bic.w	r3, r3, #7
    ce48:	ebad 0d03 	sub.w	sp, sp, r3
    ce4c:	466c      	mov	r4, sp
    ce4e:	613c      	str	r4, [r7, #16]
    ce50:	ebad 0d03 	sub.w	sp, sp, r3
    ce54:	2800      	cmp	r0, #0
    ce56:	f000 8087 	beq.w	cf68 <mul_by_3_mod_n+0x138>
    ce5a:	466d      	mov	r5, sp
    ce5c:	1f08      	subs	r0, r1, #4
    ce5e:	3c04      	subs	r4, #4
    ce60:	6078      	str	r0, [r7, #4]
    ce62:	eb00 0e06 	add.w	lr, r0, r6
    ce66:	46a4      	mov	ip, r4
    ce68:	4603      	mov	r3, r0
    ce6a:	2100      	movs	r1, #0
    ce6c:	f853 6f04 	ldr.w	r6, [r3, #4]!
    ce70:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    ce74:	f84c 1f04 	str.w	r1, [ip, #4]!
    ce78:	0ff1      	lsrs	r1, r6, #31
    ce7a:	4573      	cmp	r3, lr
    ce7c:	d1f6      	bne.n	ce6c <mul_by_3_mod_n+0x3c>
    ce7e:	f1a2 0e04 	sub.w	lr, r2, #4
    ce82:	3d04      	subs	r5, #4
    ce84:	697b      	ldr	r3, [r7, #20]
    ce86:	f1a3 0b04 	sub.w	fp, r3, #4
    ce8a:	693b      	ldr	r3, [r7, #16]
    ce8c:	449b      	add	fp, r3
    ce8e:	46a9      	mov	r9, r5
    ce90:	46f0      	mov	r8, lr
    ce92:	46a4      	mov	ip, r4
    ce94:	f04f 0a00 	mov.w	sl, #0
    ce98:	4656      	mov	r6, sl
    ce9a:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    ce9e:	ebb3 0a0a 	subs.w	sl, r3, sl
    cea2:	eb66 0206 	sbc.w	r2, r6, r6
    cea6:	f858 3f04 	ldr.w	r3, [r8, #4]!
    ceaa:	ebba 0303 	subs.w	r3, sl, r3
    ceae:	f162 0a00 	sbc.w	sl, r2, #0
    ceb2:	f849 3f04 	str.w	r3, [r9, #4]!
    ceb6:	f00a 0a01 	and.w	sl, sl, #1
    ceba:	45dc      	cmp	ip, fp
    cebc:	d1ed      	bne.n	ce9a <mul_by_3_mod_n+0x6a>
    cebe:	eba1 0a0a 	sub.w	sl, r1, sl
    cec2:	46a0      	mov	r8, r4
    cec4:	46ac      	mov	ip, r5
    cec6:	2600      	movs	r6, #0
    cec8:	68ba      	ldr	r2, [r7, #8]
    ceca:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    cece:	f858 3f04 	ldr.w	r3, [r8, #4]!
    ced2:	404b      	eors	r3, r1
    ced4:	ea03 030a 	and.w	r3, r3, sl
    ced8:	404b      	eors	r3, r1
    ceda:	f8cc 3000 	str.w	r3, [ip]
    cede:	3601      	adds	r6, #1
    cee0:	42b2      	cmp	r2, r6
    cee2:	d1f2      	bne.n	ceca <mul_by_3_mod_n+0x9a>
    cee4:	f8d7 c004 	ldr.w	ip, [r7, #4]
    cee8:	697b      	ldr	r3, [r7, #20]
    ceea:	449c      	add	ip, r3
    ceec:	4626      	mov	r6, r4
    ceee:	2300      	movs	r3, #0
    cef0:	4619      	mov	r1, r3
    cef2:	46a8      	mov	r8, r5
    cef4:	f850 2f04 	ldr.w	r2, [r0, #4]!
    cef8:	f858 5f04 	ldr.w	r5, [r8, #4]!
    cefc:	1952      	adds	r2, r2, r5
    cefe:	eb41 0501 	adc.w	r5, r1, r1
    cf02:	18d2      	adds	r2, r2, r3
    cf04:	f846 2f04 	str.w	r2, [r6, #4]!
    cf08:	f145 0300 	adc.w	r3, r5, #0
    cf0c:	4560      	cmp	r0, ip
    cf0e:	d1f1      	bne.n	cef4 <mul_by_3_mod_n+0xc4>
    cf10:	68fa      	ldr	r2, [r7, #12]
    cf12:	1f15      	subs	r5, r2, #4
    cf14:	697a      	ldr	r2, [r7, #20]
    cf16:	f1a2 0804 	sub.w	r8, r2, #4
    cf1a:	693a      	ldr	r2, [r7, #16]
    cf1c:	4442      	add	r2, r8
    cf1e:	4690      	mov	r8, r2
    cf20:	46ac      	mov	ip, r5
    cf22:	4620      	mov	r0, r4
    cf24:	2200      	movs	r2, #0
    cf26:	4616      	mov	r6, r2
    cf28:	f850 1f04 	ldr.w	r1, [r0, #4]!
    cf2c:	1a8a      	subs	r2, r1, r2
    cf2e:	eb66 0106 	sbc.w	r1, r6, r6
    cf32:	f85e 9f04 	ldr.w	r9, [lr, #4]!
    cf36:	ebb2 0209 	subs.w	r2, r2, r9
    cf3a:	f161 0100 	sbc.w	r1, r1, #0
    cf3e:	f84c 2f04 	str.w	r2, [ip, #4]!
    cf42:	f001 0201 	and.w	r2, r1, #1
    cf46:	4540      	cmp	r0, r8
    cf48:	d1ee      	bne.n	cf28 <mul_by_3_mod_n+0xf8>
    cf4a:	1a9b      	subs	r3, r3, r2
    cf4c:	68fa      	ldr	r2, [r7, #12]
    cf4e:	1f10      	subs	r0, r2, #4
    cf50:	697a      	ldr	r2, [r7, #20]
    cf52:	4410      	add	r0, r2
    cf54:	f855 1f04 	ldr.w	r1, [r5, #4]!
    cf58:	f854 2f04 	ldr.w	r2, [r4, #4]!
    cf5c:	404a      	eors	r2, r1
    cf5e:	401a      	ands	r2, r3
    cf60:	404a      	eors	r2, r1
    cf62:	602a      	str	r2, [r5, #0]
    cf64:	4285      	cmp	r5, r0
    cf66:	d1f5      	bne.n	cf54 <mul_by_3_mod_n+0x124>
    cf68:	371c      	adds	r7, #28
    cf6a:	46bd      	mov	sp, r7
    cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cf70 <lshift_mod_n>:
    cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf74:	b085      	sub	sp, #20
    cf76:	af00      	add	r7, sp, #0
    cf78:	60f8      	str	r0, [r7, #12]
    cf7a:	460d      	mov	r5, r1
    cf7c:	607b      	str	r3, [r7, #4]
    cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cf80:	0099      	lsls	r1, r3, #2
    cf82:	1dcb      	adds	r3, r1, #7
    cf84:	f023 0307 	bic.w	r3, r3, #7
    cf88:	ebad 0d03 	sub.w	sp, sp, r3
    cf8c:	466b      	mov	r3, sp
    cf8e:	60bb      	str	r3, [r7, #8]
    cf90:	2a00      	cmp	r2, #0
    cf92:	d04b      	beq.n	d02c <lshift_mod_n+0xbc>
    cf94:	f102 3bff 	add.w	fp, r2, #4294967295
    cf98:	1f0a      	subs	r2, r1, #4
    cf9a:	603a      	str	r2, [r7, #0]
    cf9c:	eb03 0a02 	add.w	sl, r3, r2
    cfa0:	f1a0 0904 	sub.w	r9, r0, #4
    cfa4:	4489      	add	r9, r1
    cfa6:	2400      	movs	r4, #0
    cfa8:	e010      	b.n	cfcc <lshift_mod_n+0x5c>
    cfaa:	f850 2f04 	ldr.w	r2, [r0, #4]!
    cfae:	f856 3f04 	ldr.w	r3, [r6, #4]!
    cfb2:	4053      	eors	r3, r2
    cfb4:	ea03 0308 	and.w	r3, r3, r8
    cfb8:	4053      	eors	r3, r2
    cfba:	6003      	str	r3, [r0, #0]
    cfbc:	4548      	cmp	r0, r9
    cfbe:	d1f4      	bne.n	cfaa <lshift_mod_n+0x3a>
    cfc0:	f10b 3bff 	add.w	fp, fp, #4294967295
    cfc4:	f1bb 3fff 	cmp.w	fp, #4294967295
    cfc8:	d030      	beq.n	d02c <lshift_mod_n+0xbc>
    cfca:	68fd      	ldr	r5, [r7, #12]
    cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cfce:	2b00      	cmp	r3, #0
    cfd0:	d0f6      	beq.n	cfc0 <lshift_mod_n+0x50>
    cfd2:	1f2b      	subs	r3, r5, #4
    cfd4:	68ba      	ldr	r2, [r7, #8]
    cfd6:	1f16      	subs	r6, r2, #4
    cfd8:	683a      	ldr	r2, [r7, #0]
    cfda:	4415      	add	r5, r2
    cfdc:	4630      	mov	r0, r6
    cfde:	4621      	mov	r1, r4
    cfe0:	f853 2f04 	ldr.w	r2, [r3, #4]!
    cfe4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    cfe8:	f840 1f04 	str.w	r1, [r0, #4]!
    cfec:	0fd1      	lsrs	r1, r2, #31
    cfee:	42ab      	cmp	r3, r5
    cff0:	d1f6      	bne.n	cfe0 <lshift_mod_n+0x70>
    cff2:	687b      	ldr	r3, [r7, #4]
    cff4:	f1a3 0e04 	sub.w	lr, r3, #4
    cff8:	68fb      	ldr	r3, [r7, #12]
    cffa:	1f18      	subs	r0, r3, #4
    cffc:	4684      	mov	ip, r0
    cffe:	4635      	mov	r5, r6
    d000:	46a0      	mov	r8, r4
    d002:	f855 3f04 	ldr.w	r3, [r5, #4]!
    d006:	ebb3 0808 	subs.w	r8, r3, r8
    d00a:	eb64 0204 	sbc.w	r2, r4, r4
    d00e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    d012:	ebb8 0303 	subs.w	r3, r8, r3
    d016:	f162 0800 	sbc.w	r8, r2, #0
    d01a:	f84c 3f04 	str.w	r3, [ip, #4]!
    d01e:	f008 0801 	and.w	r8, r8, #1
    d022:	4555      	cmp	r5, sl
    d024:	d1ed      	bne.n	d002 <lshift_mod_n+0x92>
    d026:	eba1 0808 	sub.w	r8, r1, r8
    d02a:	e7be      	b.n	cfaa <lshift_mod_n+0x3a>
    d02c:	3714      	adds	r7, #20
    d02e:	46bd      	mov	sp, r7
    d030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d034 <from_mont_n>:
    d034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d038:	b087      	sub	sp, #28
    d03a:	af00      	add	r7, sp, #0
    d03c:	6078      	str	r0, [r7, #4]
    d03e:	468c      	mov	ip, r1
    d040:	613a      	str	r2, [r7, #16]
    d042:	617b      	str	r3, [r7, #20]
    d044:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
    d048:	ea4f 0188 	mov.w	r1, r8, lsl #2
    d04c:	60b9      	str	r1, [r7, #8]
    d04e:	1dcb      	adds	r3, r1, #7
    d050:	f023 0307 	bic.w	r3, r3, #7
    d054:	ebad 0d03 	sub.w	sp, sp, r3
    d058:	f1b8 0f00 	cmp.w	r8, #0
    d05c:	d063      	beq.n	d126 <from_mont_n+0xf2>
    d05e:	46ea      	mov	sl, sp
    d060:	4616      	mov	r6, r2
    d062:	f856 3904 	ldr.w	r3, [r6], #-4
    d066:	60fb      	str	r3, [r7, #12]
    d068:	440e      	add	r6, r1
    d06a:	f04f 0900 	mov.w	r9, #0
    d06e:	464d      	mov	r5, r9
    d070:	e000      	b.n	d074 <from_mont_n+0x40>
    d072:	46d4      	mov	ip, sl
    d074:	f8dc 1000 	ldr.w	r1, [ip]
    d078:	697b      	ldr	r3, [r7, #20]
    d07a:	fb03 f401 	mul.w	r4, r3, r1
    d07e:	68fb      	ldr	r3, [r7, #12]
    d080:	fba4 2303 	umull	r2, r3, r4, r3
    d084:	1852      	adds	r2, r2, r1
    d086:	f143 0b00 	adc.w	fp, r3, #0
    d08a:	f1b8 0f01 	cmp.w	r8, #1
    d08e:	d94e      	bls.n	d12e <from_mont_n+0xfa>
    d090:	f1aa 0e04 	sub.w	lr, sl, #4
    d094:	6938      	ldr	r0, [r7, #16]
    d096:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d09a:	fba2 2104 	umull	r2, r1, r2, r4
    d09e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    d0a2:	eb13 030b 	adds.w	r3, r3, fp
    d0a6:	eb45 0b05 	adc.w	fp, r5, r5
    d0aa:	18d3      	adds	r3, r2, r3
    d0ac:	f84e 3f04 	str.w	r3, [lr, #4]!
    d0b0:	eb41 0b0b 	adc.w	fp, r1, fp
    d0b4:	42b0      	cmp	r0, r6
    d0b6:	d1ee      	bne.n	d096 <from_mont_n+0x62>
    d0b8:	4643      	mov	r3, r8
    d0ba:	3b01      	subs	r3, #1
    d0bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
    d0c0:	f109 0901 	add.w	r9, r9, #1
    d0c4:	45c8      	cmp	r8, r9
    d0c6:	d1d4      	bne.n	d072 <from_mont_n+0x3e>
    d0c8:	f1aa 0104 	sub.w	r1, sl, #4
    d0cc:	693b      	ldr	r3, [r7, #16]
    d0ce:	f1a3 0c04 	sub.w	ip, r3, #4
    d0d2:	687b      	ldr	r3, [r7, #4]
    d0d4:	1f18      	subs	r0, r3, #4
    d0d6:	68bb      	ldr	r3, [r7, #8]
    d0d8:	3b04      	subs	r3, #4
    d0da:	449a      	add	sl, r3
    d0dc:	4606      	mov	r6, r0
    d0de:	460c      	mov	r4, r1
    d0e0:	2300      	movs	r3, #0
    d0e2:	461d      	mov	r5, r3
    d0e4:	f854 2f04 	ldr.w	r2, [r4, #4]!
    d0e8:	1ad3      	subs	r3, r2, r3
    d0ea:	eb65 0205 	sbc.w	r2, r5, r5
    d0ee:	f85c ef04 	ldr.w	lr, [ip, #4]!
    d0f2:	ebb3 030e 	subs.w	r3, r3, lr
    d0f6:	f162 0200 	sbc.w	r2, r2, #0
    d0fa:	f846 3f04 	str.w	r3, [r6, #4]!
    d0fe:	f002 0301 	and.w	r3, r2, #1
    d102:	4554      	cmp	r4, sl
    d104:	d1ee      	bne.n	d0e4 <from_mont_n+0xb0>
    d106:	425e      	negs	r6, r3
    d108:	687a      	ldr	r2, [r7, #4]
    d10a:	1f15      	subs	r5, r2, #4
    d10c:	68ba      	ldr	r2, [r7, #8]
    d10e:	4415      	add	r5, r2
    d110:	3b01      	subs	r3, #1
    d112:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d116:	401a      	ands	r2, r3
    d118:	f851 4f04 	ldr.w	r4, [r1, #4]!
    d11c:	4034      	ands	r4, r6
    d11e:	4322      	orrs	r2, r4
    d120:	6002      	str	r2, [r0, #0]
    d122:	42a8      	cmp	r0, r5
    d124:	d1f5      	bne.n	d112 <from_mont_n+0xde>
    d126:	371c      	adds	r7, #28
    d128:	46bd      	mov	sp, r7
    d12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d12e:	2301      	movs	r3, #1
    d130:	e7c3      	b.n	d0ba <from_mont_n+0x86>

0000d132 <redc_mont_n>:
    d132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d136:	b087      	sub	sp, #28
    d138:	af00      	add	r7, sp, #0
    d13a:	6078      	str	r0, [r7, #4]
    d13c:	6039      	str	r1, [r7, #0]
    d13e:	613a      	str	r2, [r7, #16]
    d140:	617b      	str	r3, [r7, #20]
    d142:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
    d146:	ea4f 0088 	mov.w	r0, r8, lsl #2
    d14a:	60b8      	str	r0, [r7, #8]
    d14c:	1dc3      	adds	r3, r0, #7
    d14e:	f023 0307 	bic.w	r3, r3, #7
    d152:	ebad 0d03 	sub.w	sp, sp, r3
    d156:	f1b8 0f00 	cmp.w	r8, #0
    d15a:	d07a      	beq.n	d252 <redc_mont_n+0x120>
    d15c:	46ea      	mov	sl, sp
    d15e:	4616      	mov	r6, r2
    d160:	f856 3904 	ldr.w	r3, [r6], #-4
    d164:	60fb      	str	r3, [r7, #12]
    d166:	4406      	add	r6, r0
    d168:	468c      	mov	ip, r1
    d16a:	f04f 0900 	mov.w	r9, #0
    d16e:	464d      	mov	r5, r9
    d170:	e000      	b.n	d174 <redc_mont_n+0x42>
    d172:	46d4      	mov	ip, sl
    d174:	f8dc 1000 	ldr.w	r1, [ip]
    d178:	697b      	ldr	r3, [r7, #20]
    d17a:	fb03 f401 	mul.w	r4, r3, r1
    d17e:	68fb      	ldr	r3, [r7, #12]
    d180:	fba4 2303 	umull	r2, r3, r4, r3
    d184:	1852      	adds	r2, r2, r1
    d186:	f143 0b00 	adc.w	fp, r3, #0
    d18a:	f1b8 0f01 	cmp.w	r8, #1
    d18e:	d964      	bls.n	d25a <redc_mont_n+0x128>
    d190:	f1aa 0e04 	sub.w	lr, sl, #4
    d194:	6938      	ldr	r0, [r7, #16]
    d196:	f850 2f04 	ldr.w	r2, [r0, #4]!
    d19a:	fba2 2104 	umull	r2, r1, r2, r4
    d19e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    d1a2:	eb13 030b 	adds.w	r3, r3, fp
    d1a6:	eb45 0b05 	adc.w	fp, r5, r5
    d1aa:	18d3      	adds	r3, r2, r3
    d1ac:	f84e 3f04 	str.w	r3, [lr, #4]!
    d1b0:	eb41 0b0b 	adc.w	fp, r1, fp
    d1b4:	42b0      	cmp	r0, r6
    d1b6:	d1ee      	bne.n	d196 <redc_mont_n+0x64>
    d1b8:	4643      	mov	r3, r8
    d1ba:	3b01      	subs	r3, #1
    d1bc:	f84a b023 	str.w	fp, [sl, r3, lsl #2]
    d1c0:	f109 0901 	add.w	r9, r9, #1
    d1c4:	45c8      	cmp	r8, r9
    d1c6:	d1d4      	bne.n	d172 <redc_mont_n+0x40>
    d1c8:	68bb      	ldr	r3, [r7, #8]
    d1ca:	1f19      	subs	r1, r3, #4
    d1cc:	683b      	ldr	r3, [r7, #0]
    d1ce:	4419      	add	r1, r3
    d1d0:	f1aa 0504 	sub.w	r5, sl, #4
    d1d4:	3b04      	subs	r3, #4
    d1d6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    d1da:	4628      	mov	r0, r5
    d1dc:	2300      	movs	r3, #0
    d1de:	461c      	mov	r4, r3
    d1e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    d1e4:	f850 6f04 	ldr.w	r6, [r0, #4]!
    d1e8:	1992      	adds	r2, r2, r6
    d1ea:	eb44 0604 	adc.w	r6, r4, r4
    d1ee:	18d2      	adds	r2, r2, r3
    d1f0:	6002      	str	r2, [r0, #0]
    d1f2:	f146 0300 	adc.w	r3, r6, #0
    d1f6:	4549      	cmp	r1, r9
    d1f8:	d1f2      	bne.n	d1e0 <redc_mont_n+0xae>
    d1fa:	693a      	ldr	r2, [r7, #16]
    d1fc:	f1a2 0e04 	sub.w	lr, r2, #4
    d200:	687a      	ldr	r2, [r7, #4]
    d202:	1f10      	subs	r0, r2, #4
    d204:	68ba      	ldr	r2, [r7, #8]
    d206:	3a04      	subs	r2, #4
    d208:	4492      	add	sl, r2
    d20a:	4684      	mov	ip, r0
    d20c:	462c      	mov	r4, r5
    d20e:	2200      	movs	r2, #0
    d210:	4616      	mov	r6, r2
    d212:	f854 1f04 	ldr.w	r1, [r4, #4]!
    d216:	1a8a      	subs	r2, r1, r2
    d218:	eb66 0106 	sbc.w	r1, r6, r6
    d21c:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    d220:	ebb2 0208 	subs.w	r2, r2, r8
    d224:	f161 0100 	sbc.w	r1, r1, #0
    d228:	f84c 2f04 	str.w	r2, [ip, #4]!
    d22c:	f001 0201 	and.w	r2, r1, #1
    d230:	4554      	cmp	r4, sl
    d232:	d1ee      	bne.n	d212 <redc_mont_n+0xe0>
    d234:	1a9b      	subs	r3, r3, r2
    d236:	687a      	ldr	r2, [r7, #4]
    d238:	1f14      	subs	r4, r2, #4
    d23a:	68ba      	ldr	r2, [r7, #8]
    d23c:	4414      	add	r4, r2
    d23e:	f850 1f04 	ldr.w	r1, [r0, #4]!
    d242:	f855 2f04 	ldr.w	r2, [r5, #4]!
    d246:	404a      	eors	r2, r1
    d248:	401a      	ands	r2, r3
    d24a:	404a      	eors	r2, r1
    d24c:	6002      	str	r2, [r0, #0]
    d24e:	42a0      	cmp	r0, r4
    d250:	d1f5      	bne.n	d23e <redc_mont_n+0x10c>
    d252:	371c      	adds	r7, #28
    d254:	46bd      	mov	sp, r7
    d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d25a:	2301      	movs	r3, #1
    d25c:	e7ad      	b.n	d1ba <redc_mont_n+0x88>

0000d25e <sgn0_pty_mod_n>:
    d25e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d262:	af00      	add	r7, sp, #0
    d264:	ea4f 0982 	mov.w	r9, r2, lsl #2
    d268:	f109 0307 	add.w	r3, r9, #7
    d26c:	f023 0307 	bic.w	r3, r3, #7
    d270:	ebad 0d03 	sub.w	sp, sp, r3
    d274:	6803      	ldr	r3, [r0, #0]
    d276:	f003 0e01 	and.w	lr, r3, #1
    d27a:	b382      	cbz	r2, d2de <sgn0_pty_mod_n+0x80>
    d27c:	46e8      	mov	r8, sp
    d27e:	1f03      	subs	r3, r0, #4
    d280:	f1a8 0004 	sub.w	r0, r8, #4
    d284:	eb03 0409 	add.w	r4, r3, r9
    d288:	4605      	mov	r5, r0
    d28a:	f04f 0c00 	mov.w	ip, #0
    d28e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    d292:	ea4c 0642 	orr.w	r6, ip, r2, lsl #1
    d296:	f845 6f04 	str.w	r6, [r5, #4]!
    d29a:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
    d29e:	42a3      	cmp	r3, r4
    d2a0:	d1f5      	bne.n	d28e <sgn0_pty_mod_n+0x30>
    d2a2:	1f0c      	subs	r4, r1, #4
    d2a4:	f1a9 0604 	sub.w	r6, r9, #4
    d2a8:	4446      	add	r6, r8
    d2aa:	2200      	movs	r2, #0
    d2ac:	4615      	mov	r5, r2
    d2ae:	f850 3f04 	ldr.w	r3, [r0, #4]!
    d2b2:	1a9a      	subs	r2, r3, r2
    d2b4:	eb65 0305 	sbc.w	r3, r5, r5
    d2b8:	f854 1f04 	ldr.w	r1, [r4, #4]!
    d2bc:	1a52      	subs	r2, r2, r1
    d2be:	f163 0200 	sbc.w	r2, r3, #0
    d2c2:	f002 0201 	and.w	r2, r2, #1
    d2c6:	42b0      	cmp	r0, r6
    d2c8:	d1f1      	bne.n	d2ae <sgn0_pty_mod_n+0x50>
    d2ca:	ebac 0202 	sub.w	r2, ip, r2
    d2ce:	43d2      	mvns	r2, r2
    d2d0:	f002 0202 	and.w	r2, r2, #2
    d2d4:	ea42 000e 	orr.w	r0, r2, lr
    d2d8:	46bd      	mov	sp, r7
    d2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d2de:	4694      	mov	ip, r2
    d2e0:	e7f3      	b.n	d2ca <sgn0_pty_mod_n+0x6c>

0000d2e2 <mul_mont_nonred_n>:
    d2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2e6:	b087      	sub	sp, #28
    d2e8:	af00      	add	r7, sp, #0
    d2ea:	6038      	str	r0, [r7, #0]
    d2ec:	6079      	str	r1, [r7, #4]
    d2ee:	60fb      	str	r3, [r7, #12]
    d2f0:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
    d2f4:	f108 0401 	add.w	r4, r8, #1
    d2f8:	00a4      	lsls	r4, r4, #2
    d2fa:	1de3      	adds	r3, r4, #7
    d2fc:	f023 0307 	bic.w	r3, r3, #7
    d300:	ebad 0d03 	sub.w	sp, sp, r3
    d304:	46ea      	mov	sl, sp
    d306:	6816      	ldr	r6, [r2, #0]
    d308:	f1b8 0f00 	cmp.w	r8, #0
    d30c:	d029      	beq.n	d362 <mul_mont_nonred_n+0x80>
    d30e:	1f0d      	subs	r5, r1, #4
    d310:	f1aa 0c04 	sub.w	ip, sl, #4
    d314:	f1a4 0e04 	sub.w	lr, r4, #4
    d318:	44ae      	add	lr, r5
    d31a:	2100      	movs	r1, #0
    d31c:	f855 3f04 	ldr.w	r3, [r5, #4]!
    d320:	fba3 3006 	umull	r3, r0, r3, r6
    d324:	185b      	adds	r3, r3, r1
    d326:	f84c 3f04 	str.w	r3, [ip, #4]!
    d32a:	f140 0100 	adc.w	r1, r0, #0
    d32e:	4575      	cmp	r5, lr
    d330:	d1f4      	bne.n	d31c <mul_mont_nonred_n+0x3a>
    d332:	4640      	mov	r0, r8
    d334:	f8da 3000 	ldr.w	r3, [sl]
    d338:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    d33a:	fb05 f303 	mul.w	r3, r5, r3
    d33e:	f84a 1020 	str.w	r1, [sl, r0, lsl #2]
    d342:	f8d7 900c 	ldr.w	r9, [r7, #12]
    d346:	f859 1904 	ldr.w	r1, [r9], #-4
    d34a:	6139      	str	r1, [r7, #16]
    d34c:	3204      	adds	r2, #4
    d34e:	617a      	str	r2, [r7, #20]
    d350:	3c04      	subs	r4, #4
    d352:	44a1      	add	r9, r4
    d354:	f04f 0b01 	mov.w	fp, #1
    d358:	2600      	movs	r6, #0
    d35a:	eb0a 0288 	add.w	r2, sl, r8, lsl #2
    d35e:	60ba      	str	r2, [r7, #8]
    d360:	e03e      	b.n	d3e0 <mul_mont_nonred_n+0xfe>
    d362:	4641      	mov	r1, r8
    d364:	4640      	mov	r0, r8
    d366:	e7e5      	b.n	d334 <mul_mont_nonred_n+0x52>
    d368:	f8da 3004 	ldr.w	r3, [sl, #4]
    d36c:	440b      	add	r3, r1
    d36e:	f8ca 3000 	str.w	r3, [sl]
    d372:	45d8      	cmp	r8, fp
    d374:	d058      	beq.n	d428 <mul_mont_nonred_n+0x146>
    d376:	f1b8 0f00 	cmp.w	r8, #0
    d37a:	d102      	bne.n	d382 <mul_mont_nonred_n+0xa0>
    d37c:	4641      	mov	r1, r8
    d37e:	4642      	mov	r2, r8
    d380:	e022      	b.n	d3c8 <mul_mont_nonred_n+0xe6>
    d382:	697b      	ldr	r3, [r7, #20]
    d384:	f8d3 c000 	ldr.w	ip, [r3]
    d388:	e002      	b.n	d390 <mul_mont_nonred_n+0xae>
    d38a:	697b      	ldr	r3, [r7, #20]
    d38c:	f8d3 c000 	ldr.w	ip, [r3]
    d390:	687b      	ldr	r3, [r7, #4]
    d392:	f1a3 0e04 	sub.w	lr, r3, #4
    d396:	f1aa 0504 	sub.w	r5, sl, #4
    d39a:	2400      	movs	r4, #0
    d39c:	4622      	mov	r2, r4
    d39e:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    d3a2:	fba1 100c 	umull	r1, r0, r1, ip
    d3a6:	f855 3f04 	ldr.w	r3, [r5, #4]!
    d3aa:	189b      	adds	r3, r3, r2
    d3ac:	eb46 0206 	adc.w	r2, r6, r6
    d3b0:	18cb      	adds	r3, r1, r3
    d3b2:	602b      	str	r3, [r5, #0]
    d3b4:	eb40 0202 	adc.w	r2, r0, r2
    d3b8:	3401      	adds	r4, #1
    d3ba:	45a0      	cmp	r8, r4
    d3bc:	d8ef      	bhi.n	d39e <mul_mont_nonred_n+0xbc>
    d3be:	f1b8 0f00 	cmp.w	r8, #0
    d3c2:	bf14      	ite	ne
    d3c4:	4641      	movne	r1, r8
    d3c6:	2101      	moveq	r1, #1
    d3c8:	f8da 3000 	ldr.w	r3, [sl]
    d3cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
    d3ce:	fb00 f303 	mul.w	r3, r0, r3
    d3d2:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
    d3d6:	f10b 0b01 	add.w	fp, fp, #1
    d3da:	697a      	ldr	r2, [r7, #20]
    d3dc:	3204      	adds	r2, #4
    d3de:	617a      	str	r2, [r7, #20]
    d3e0:	693a      	ldr	r2, [r7, #16]
    d3e2:	fba3 1002 	umull	r1, r0, r3, r2
    d3e6:	f8da 2000 	ldr.w	r2, [sl]
    d3ea:	188a      	adds	r2, r1, r2
    d3ec:	f140 0100 	adc.w	r1, r0, #0
    d3f0:	460a      	mov	r2, r1
    d3f2:	f1b8 0f01 	cmp.w	r8, #1
    d3f6:	d9b7      	bls.n	d368 <mul_mont_nonred_n+0x86>
    d3f8:	4654      	mov	r4, sl
    d3fa:	68f8      	ldr	r0, [r7, #12]
    d3fc:	f850 1f04 	ldr.w	r1, [r0, #4]!
    d400:	fba1 1503 	umull	r1, r5, r1, r3
    d404:	188a      	adds	r2, r1, r2
    d406:	f145 0100 	adc.w	r1, r5, #0
    d40a:	6865      	ldr	r5, [r4, #4]
    d40c:	1952      	adds	r2, r2, r5
    d40e:	f844 2b04 	str.w	r2, [r4], #4
    d412:	f141 0200 	adc.w	r2, r1, #0
    d416:	4548      	cmp	r0, r9
    d418:	d1f0      	bne.n	d3fc <mul_mont_nonred_n+0x11a>
    d41a:	68b9      	ldr	r1, [r7, #8]
    d41c:	680b      	ldr	r3, [r1, #0]
    d41e:	4413      	add	r3, r2
    d420:	f841 3c04 	str.w	r3, [r1, #-4]
    d424:	45d8      	cmp	r8, fp
    d426:	d1b0      	bne.n	d38a <mul_mont_nonred_n+0xa8>
    d428:	f03b 4140 	bics.w	r1, fp, #3221225472	; 0xc0000000
    d42c:	d00b      	beq.n	d446 <mul_mont_nonred_n+0x164>
    d42e:	f1aa 0a04 	sub.w	sl, sl, #4
    d432:	683b      	ldr	r3, [r7, #0]
    d434:	3b04      	subs	r3, #4
    d436:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
    d43a:	f85a 2f04 	ldr.w	r2, [sl, #4]!
    d43e:	f843 2f04 	str.w	r2, [r3, #4]!
    d442:	458a      	cmp	sl, r1
    d444:	d1f9      	bne.n	d43a <mul_mont_nonred_n+0x158>
    d446:	371c      	adds	r7, #28
    d448:	46bd      	mov	sp, r7
    d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d44e <smul_n_shift_n>:
    d44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d452:	b085      	sub	sp, #20
    d454:	af00      	add	r7, sp, #0
    d456:	60f8      	str	r0, [r7, #12]
    d458:	4690      	mov	r8, r2
    d45a:	607b      	str	r3, [r7, #4]
    d45c:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
    d460:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
    d462:	1c72      	adds	r2, r6, #1
    d464:	60ba      	str	r2, [r7, #8]
    d466:	0090      	lsls	r0, r2, #2
    d468:	6038      	str	r0, [r7, #0]
    d46a:	1dc3      	adds	r3, r0, #7
    d46c:	f023 0307 	bic.w	r3, r3, #7
    d470:	ebad 0d03 	sub.w	sp, sp, r3
    d474:	466c      	mov	r4, sp
    d476:	ebad 0d03 	sub.w	sp, sp, r3
    d47a:	466d      	mov	r5, sp
    d47c:	f8d8 3000 	ldr.w	r3, [r8]
    d480:	ea4f 79e3 	mov.w	r9, r3, asr #31
    d484:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    d488:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    d48c:	4633      	mov	r3, r6
    d48e:	464a      	mov	r2, r9
    d490:	4620      	mov	r0, r4
    d492:	f7ff fa12 	bl	c8ba <cneg_n>
    d496:	4633      	mov	r3, r6
    d498:	4652      	mov	r2, sl
    d49a:	4621      	mov	r1, r4
    d49c:	4620      	mov	r0, r4
    d49e:	f7ff fa26 	bl	c8ee <umul_n>
    d4a2:	ea09 090a 	and.w	r9, r9, sl
    d4a6:	eba0 0009 	sub.w	r0, r0, r9
    d4aa:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    d4ae:	f8db 3000 	ldr.w	r3, [fp]
    d4b2:	ea4f 79e3 	mov.w	r9, r3, asr #31
    d4b6:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    d4ba:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    d4be:	4633      	mov	r3, r6
    d4c0:	464a      	mov	r2, r9
    d4c2:	6879      	ldr	r1, [r7, #4]
    d4c4:	4628      	mov	r0, r5
    d4c6:	f7ff f9f8 	bl	c8ba <cneg_n>
    d4ca:	4633      	mov	r3, r6
    d4cc:	4652      	mov	r2, sl
    d4ce:	4629      	mov	r1, r5
    d4d0:	4628      	mov	r0, r5
    d4d2:	f7ff fa0c 	bl	c8ee <umul_n>
    d4d6:	ea09 090a 	and.w	r9, r9, sl
    d4da:	eba0 0009 	sub.w	r0, r0, r9
    d4de:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
    d4e2:	68ba      	ldr	r2, [r7, #8]
    d4e4:	2a00      	cmp	r2, #0
    d4e6:	d03e      	beq.n	d566 <smul_n_shift_n+0x118>
    d4e8:	1f21      	subs	r1, r4, #4
    d4ea:	3d04      	subs	r5, #4
    d4ec:	6838      	ldr	r0, [r7, #0]
    d4ee:	f1a0 0c04 	sub.w	ip, r0, #4
    d4f2:	44a4      	add	ip, r4
    d4f4:	2200      	movs	r2, #0
    d4f6:	4610      	mov	r0, r2
    d4f8:	46ae      	mov	lr, r5
    d4fa:	f851 3f04 	ldr.w	r3, [r1, #4]!
    d4fe:	f85e 5f04 	ldr.w	r5, [lr, #4]!
    d502:	195b      	adds	r3, r3, r5
    d504:	eb40 0500 	adc.w	r5, r0, r0
    d508:	189b      	adds	r3, r3, r2
    d50a:	600b      	str	r3, [r1, #0]
    d50c:	f145 0200 	adc.w	r2, r5, #0
    d510:	4561      	cmp	r1, ip
    d512:	d1f2      	bne.n	d4fa <smul_n_shift_n+0xac>
    d514:	6822      	ldr	r2, [r4, #0]
    d516:	b166      	cbz	r6, d532 <smul_n_shift_n+0xe4>
    d518:	68fb      	ldr	r3, [r7, #12]
    d51a:	1f18      	subs	r0, r3, #4
    d51c:	2100      	movs	r1, #0
    d51e:	0f93      	lsrs	r3, r2, #30
    d520:	3101      	adds	r1, #1
    d522:	f854 2f04 	ldr.w	r2, [r4, #4]!
    d526:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
    d52a:	f840 3f04 	str.w	r3, [r0, #4]!
    d52e:	428e      	cmp	r6, r1
    d530:	d8f5      	bhi.n	d51e <smul_n_shift_n+0xd0>
    d532:	f8d8 3000 	ldr.w	r3, [r8]
    d536:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    d53a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    d53e:	f8c8 3000 	str.w	r3, [r8]
    d542:	f8db 3000 	ldr.w	r3, [fp]
    d546:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    d54a:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
    d54e:	f8cb 3000 	str.w	r3, [fp]
    d552:	4633      	mov	r3, r6
    d554:	17d2      	asrs	r2, r2, #31
    d556:	68f9      	ldr	r1, [r7, #12]
    d558:	4608      	mov	r0, r1
    d55a:	f7ff f9ae 	bl	c8ba <cneg_n>
    d55e:	3714      	adds	r7, #20
    d560:	46bd      	mov	sp, r7
    d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d566:	6822      	ldr	r2, [r4, #0]
    d568:	e7d6      	b.n	d518 <smul_n_shift_n+0xca>

0000d56a <quot_rem_n>:
    d56a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d56e:	b083      	sub	sp, #12
    d570:	af00      	add	r7, sp, #0
    d572:	6078      	str	r0, [r7, #4]
    d574:	4608      	mov	r0, r1
    d576:	6039      	str	r1, [r7, #0]
    d578:	1c5e      	adds	r6, r3, #1
    d57a:	00b6      	lsls	r6, r6, #2
    d57c:	1df1      	adds	r1, r6, #7
    d57e:	f021 0107 	bic.w	r1, r1, #7
    d582:	ebad 0d01 	sub.w	sp, sp, r1
    d586:	46eb      	mov	fp, sp
    d588:	2b00      	cmp	r3, #0
    d58a:	d055      	beq.n	d638 <quot_rem_n+0xce>
    d58c:	1f04      	subs	r4, r0, #4
    d58e:	f1ab 0504 	sub.w	r5, fp, #4
    d592:	f1a6 0c04 	sub.w	ip, r6, #4
    d596:	44a4      	add	ip, r4
    d598:	2000      	movs	r0, #0
    d59a:	f854 1f04 	ldr.w	r1, [r4, #4]!
    d59e:	fba1 1e02 	umull	r1, lr, r1, r2
    d5a2:	1809      	adds	r1, r1, r0
    d5a4:	f845 1f04 	str.w	r1, [r5, #4]!
    d5a8:	f14e 0000 	adc.w	r0, lr, #0
    d5ac:	4564      	cmp	r4, ip
    d5ae:	d1f4      	bne.n	d59a <quot_rem_n+0x30>
    d5b0:	4619      	mov	r1, r3
    d5b2:	f84b 0021 	str.w	r0, [fp, r1, lsl #2]
    d5b6:	6879      	ldr	r1, [r7, #4]
    d5b8:	1f0d      	subs	r5, r1, #4
    d5ba:	f1ab 0c04 	sub.w	ip, fp, #4
    d5be:	f1a6 0a04 	sub.w	sl, r6, #4
    d5c2:	448a      	add	sl, r1
    d5c4:	4664      	mov	r4, ip
    d5c6:	46ae      	mov	lr, r5
    d5c8:	f04f 0900 	mov.w	r9, #0
    d5cc:	46c8      	mov	r8, r9
    d5ce:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    d5d2:	ebb1 0909 	subs.w	r9, r1, r9
    d5d6:	eb68 0008 	sbc.w	r0, r8, r8
    d5da:	f854 1f04 	ldr.w	r1, [r4, #4]!
    d5de:	ebb9 0101 	subs.w	r1, r9, r1
    d5e2:	f160 0900 	sbc.w	r9, r0, #0
    d5e6:	6021      	str	r1, [r4, #0]
    d5e8:	f009 0901 	and.w	r9, r9, #1
    d5ec:	45d6      	cmp	lr, sl
    d5ee:	d1ee      	bne.n	d5ce <quot_rem_n+0x64>
    d5f0:	f1c9 0800 	rsb	r8, r9, #0
    d5f4:	b1bb      	cbz	r3, d626 <quot_rem_n+0xbc>
    d5f6:	6839      	ldr	r1, [r7, #0]
    d5f8:	3904      	subs	r1, #4
    d5fa:	3e08      	subs	r6, #8
    d5fc:	44b3      	add	fp, r6
    d5fe:	2400      	movs	r4, #0
    d600:	46a2      	mov	sl, r4
    d602:	f851 0f04 	ldr.w	r0, [r1, #4]!
    d606:	ea08 0000 	and.w	r0, r8, r0
    d60a:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    d60e:	1936      	adds	r6, r6, r4
    d610:	eb4a 040a 	adc.w	r4, sl, sl
    d614:	1986      	adds	r6, r0, r6
    d616:	f144 0400 	adc.w	r4, r4, #0
    d61a:	f845 6f04 	str.w	r6, [r5, #4]!
    d61e:	f004 0401 	and.w	r4, r4, #1
    d622:	45dc      	cmp	ip, fp
    d624:	d1ed      	bne.n	d602 <quot_rem_n+0x98>
    d626:	eba2 0009 	sub.w	r0, r2, r9
    d62a:	687a      	ldr	r2, [r7, #4]
    d62c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    d630:	370c      	adds	r7, #12
    d632:	46bd      	mov	sp, r7
    d634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d638:	4618      	mov	r0, r3
    d63a:	4619      	mov	r1, r3
    d63c:	e7b9      	b.n	d5b2 <quot_rem_n+0x48>

0000d63e <POINTonE1_affine_Compress_BE>:
    d63e:	b570      	push	{r4, r5, r6, lr}
    d640:	b09a      	sub	sp, #104	; 0x68
    d642:	4605      	mov	r5, r0
    d644:	460c      	mov	r4, r1
    d646:	230c      	movs	r3, #12
    d648:	9300      	str	r3, [sp, #0]
    d64a:	4b15      	ldr	r3, [pc, #84]	; (d6a0 <POINTonE1_affine_Compress_BE+0x62>)
    d64c:	4a15      	ldr	r2, [pc, #84]	; (d6a4 <POINTonE1_affine_Compress_BE+0x66>)
    d64e:	a80e      	add	r0, sp, #56	; 0x38
    d650:	f7ff fcf0 	bl	d034 <from_mont_n>
    d654:	f105 0c30 	add.w	ip, r5, #48	; 0x30
    d658:	462a      	mov	r2, r5
    d65a:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    d65e:	1a8b      	subs	r3, r1, r2
    d660:	f023 0003 	bic.w	r0, r3, #3
    d664:	ad1a      	add	r5, sp, #104	; 0x68
    d666:	4428      	add	r0, r5
    d668:	f003 0303 	and.w	r3, r3, #3
    d66c:	00db      	lsls	r3, r3, #3
    d66e:	f850 0c30 	ldr.w	r0, [r0, #-48]
    d672:	fa20 f303 	lsr.w	r3, r0, r3
    d676:	f802 3b01 	strb.w	r3, [r2], #1
    d67a:	4594      	cmp	ip, r2
    d67c:	d1ef      	bne.n	d65e <POINTonE1_affine_Compress_BE+0x20>
    d67e:	4d09      	ldr	r5, [pc, #36]	; (d6a4 <POINTonE1_affine_Compress_BE+0x66>)
    d680:	260c      	movs	r6, #12
    d682:	9600      	str	r6, [sp, #0]
    d684:	4b06      	ldr	r3, [pc, #24]	; (d6a0 <POINTonE1_affine_Compress_BE+0x62>)
    d686:	462a      	mov	r2, r5
    d688:	f104 0130 	add.w	r1, r4, #48	; 0x30
    d68c:	a802      	add	r0, sp, #8
    d68e:	f7ff fcd1 	bl	d034 <from_mont_n>
    d692:	4632      	mov	r2, r6
    d694:	4629      	mov	r1, r5
    d696:	a802      	add	r0, sp, #8
    d698:	f7ff fde1 	bl	d25e <sgn0_pty_mod_n>
    d69c:	b01a      	add	sp, #104	; 0x68
    d69e:	bd70      	pop	{r4, r5, r6, pc}
    d6a0:	fffcfffd 	.word	0xfffcfffd
    d6a4:	00024108 	.word	0x00024108

0000d6a8 <POINTonE1_affine_Serialize_BE>:
    d6a8:	b570      	push	{r4, r5, r6, lr}
    d6aa:	b08e      	sub	sp, #56	; 0x38
    d6ac:	4605      	mov	r5, r0
    d6ae:	460e      	mov	r6, r1
    d6b0:	230c      	movs	r3, #12
    d6b2:	9300      	str	r3, [sp, #0]
    d6b4:	4b1e      	ldr	r3, [pc, #120]	; (d730 <POINTonE1_affine_Serialize_BE+0x88>)
    d6b6:	4a1f      	ldr	r2, [pc, #124]	; (d734 <POINTonE1_affine_Serialize_BE+0x8c>)
    d6b8:	a802      	add	r0, sp, #8
    d6ba:	f7ff fcbb 	bl	d034 <from_mont_n>
    d6be:	f105 0430 	add.w	r4, r5, #48	; 0x30
    d6c2:	462a      	mov	r2, r5
    d6c4:	f105 002f 	add.w	r0, r5, #47	; 0x2f
    d6c8:	1a83      	subs	r3, r0, r2
    d6ca:	f023 0103 	bic.w	r1, r3, #3
    d6ce:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    d6d2:	4461      	add	r1, ip
    d6d4:	f003 0303 	and.w	r3, r3, #3
    d6d8:	00db      	lsls	r3, r3, #3
    d6da:	f851 1c30 	ldr.w	r1, [r1, #-48]
    d6de:	fa21 f303 	lsr.w	r3, r1, r3
    d6e2:	f802 3b01 	strb.w	r3, [r2], #1
    d6e6:	42a2      	cmp	r2, r4
    d6e8:	d1ee      	bne.n	d6c8 <POINTonE1_affine_Serialize_BE+0x20>
    d6ea:	230c      	movs	r3, #12
    d6ec:	9300      	str	r3, [sp, #0]
    d6ee:	4b10      	ldr	r3, [pc, #64]	; (d730 <POINTonE1_affine_Serialize_BE+0x88>)
    d6f0:	4a10      	ldr	r2, [pc, #64]	; (d734 <POINTonE1_affine_Serialize_BE+0x8c>)
    d6f2:	f106 0130 	add.w	r1, r6, #48	; 0x30
    d6f6:	a802      	add	r0, sp, #8
    d6f8:	f7ff fc9c 	bl	d034 <from_mont_n>
    d6fc:	f105 0160 	add.w	r1, r5, #96	; 0x60
    d700:	355f      	adds	r5, #95	; 0x5f
    d702:	1b2b      	subs	r3, r5, r4
    d704:	f023 0203 	bic.w	r2, r3, #3
    d708:	a80e      	add	r0, sp, #56	; 0x38
    d70a:	4402      	add	r2, r0
    d70c:	f003 0303 	and.w	r3, r3, #3
    d710:	00db      	lsls	r3, r3, #3
    d712:	f852 2c30 	ldr.w	r2, [r2, #-48]
    d716:	fa22 f303 	lsr.w	r3, r2, r3
    d71a:	f804 3b01 	strb.w	r3, [r4], #1
    d71e:	428c      	cmp	r4, r1
    d720:	d1ef      	bne.n	d702 <POINTonE1_affine_Serialize_BE+0x5a>
    d722:	220c      	movs	r2, #12
    d724:	4903      	ldr	r1, [pc, #12]	; (d734 <POINTonE1_affine_Serialize_BE+0x8c>)
    d726:	a802      	add	r0, sp, #8
    d728:	f7ff fd99 	bl	d25e <sgn0_pty_mod_n>
    d72c:	b00e      	add	sp, #56	; 0x38
    d72e:	bd70      	pop	{r4, r5, r6, pc}
    d730:	fffcfffd 	.word	0xfffcfffd
    d734:	00024108 	.word	0x00024108

0000d738 <POINTonE2_affine_Compress_BE>:
    d738:	b5f0      	push	{r4, r5, r6, r7, lr}
    d73a:	b0a7      	sub	sp, #156	; 0x9c
    d73c:	4606      	mov	r6, r0
    d73e:	460d      	mov	r5, r1
    d740:	230c      	movs	r3, #12
    d742:	9300      	str	r3, [sp, #0]
    d744:	4b3e      	ldr	r3, [pc, #248]	; (d840 <POINTonE2_affine_Compress_BE+0x108>)
    d746:	4a3f      	ldr	r2, [pc, #252]	; (d844 <POINTonE2_affine_Compress_BE+0x10c>)
    d748:	3130      	adds	r1, #48	; 0x30
    d74a:	a81a      	add	r0, sp, #104	; 0x68
    d74c:	f7ff fc72 	bl	d034 <from_mont_n>
    d750:	f106 0430 	add.w	r4, r6, #48	; 0x30
    d754:	4632      	mov	r2, r6
    d756:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    d75a:	1a83      	subs	r3, r0, r2
    d75c:	f023 0103 	bic.w	r1, r3, #3
    d760:	af26      	add	r7, sp, #152	; 0x98
    d762:	4439      	add	r1, r7
    d764:	f003 0303 	and.w	r3, r3, #3
    d768:	00db      	lsls	r3, r3, #3
    d76a:	f851 1c30 	ldr.w	r1, [r1, #-48]
    d76e:	fa21 f303 	lsr.w	r3, r1, r3
    d772:	f802 3b01 	strb.w	r3, [r2], #1
    d776:	42a2      	cmp	r2, r4
    d778:	d1ef      	bne.n	d75a <POINTonE2_affine_Compress_BE+0x22>
    d77a:	230c      	movs	r3, #12
    d77c:	9300      	str	r3, [sp, #0]
    d77e:	4b30      	ldr	r3, [pc, #192]	; (d840 <POINTonE2_affine_Compress_BE+0x108>)
    d780:	4a30      	ldr	r2, [pc, #192]	; (d844 <POINTonE2_affine_Compress_BE+0x10c>)
    d782:	4629      	mov	r1, r5
    d784:	a81a      	add	r0, sp, #104	; 0x68
    d786:	f7ff fc55 	bl	d034 <from_mont_n>
    d78a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    d78e:	365f      	adds	r6, #95	; 0x5f
    d790:	1b33      	subs	r3, r6, r4
    d792:	f023 0203 	bic.w	r2, r3, #3
    d796:	a826      	add	r0, sp, #152	; 0x98
    d798:	4402      	add	r2, r0
    d79a:	f003 0303 	and.w	r3, r3, #3
    d79e:	00db      	lsls	r3, r3, #3
    d7a0:	f852 2c30 	ldr.w	r2, [r2, #-48]
    d7a4:	fa22 f303 	lsr.w	r3, r2, r3
    d7a8:	f804 3b01 	strb.w	r3, [r4], #1
    d7ac:	428c      	cmp	r4, r1
    d7ae:	d1ef      	bne.n	d790 <POINTonE2_affine_Compress_BE+0x58>
    d7b0:	4f23      	ldr	r7, [pc, #140]	; (d840 <POINTonE2_affine_Compress_BE+0x108>)
    d7b2:	4c24      	ldr	r4, [pc, #144]	; (d844 <POINTonE2_affine_Compress_BE+0x10c>)
    d7b4:	260c      	movs	r6, #12
    d7b6:	9600      	str	r6, [sp, #0]
    d7b8:	463b      	mov	r3, r7
    d7ba:	4622      	mov	r2, r4
    d7bc:	f105 0160 	add.w	r1, r5, #96	; 0x60
    d7c0:	a802      	add	r0, sp, #8
    d7c2:	f7ff fc37 	bl	d034 <from_mont_n>
    d7c6:	9600      	str	r6, [sp, #0]
    d7c8:	463b      	mov	r3, r7
    d7ca:	4622      	mov	r2, r4
    d7cc:	f105 0190 	add.w	r1, r5, #144	; 0x90
    d7d0:	a80e      	add	r0, sp, #56	; 0x38
    d7d2:	f7ff fc2f 	bl	d034 <from_mont_n>
    d7d6:	4632      	mov	r2, r6
    d7d8:	4621      	mov	r1, r4
    d7da:	a802      	add	r0, sp, #8
    d7dc:	f7ff fd3f 	bl	d25e <sgn0_pty_mod_n>
    d7e0:	4605      	mov	r5, r0
    d7e2:	4632      	mov	r2, r6
    d7e4:	4621      	mov	r1, r4
    d7e6:	a80e      	add	r0, sp, #56	; 0x38
    d7e8:	f7ff fd39 	bl	d25e <sgn0_pty_mod_n>
    d7ec:	aa0d      	add	r2, sp, #52	; 0x34
    d7ee:	ab02      	add	r3, sp, #8
    d7f0:	ae19      	add	r6, sp, #100	; 0x64
    d7f2:	2100      	movs	r1, #0
    d7f4:	f852 4f04 	ldr.w	r4, [r2, #4]!
    d7f8:	4321      	orrs	r1, r4
    d7fa:	42b2      	cmp	r2, r6
    d7fc:	d1fa      	bne.n	d7f4 <POINTonE2_affine_Compress_BE+0xbc>
    d7fe:	1e4c      	subs	r4, r1, #1
    d800:	ea24 0101 	bic.w	r1, r4, r1
    d804:	0fcc      	lsrs	r4, r1, #31
    d806:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    d80a:	3c01      	subs	r4, #1
    d80c:	4004      	ands	r4, r0
    d80e:	430c      	orrs	r4, r1
    d810:	f103 0630 	add.w	r6, r3, #48	; 0x30
    d814:	2200      	movs	r2, #0
    d816:	f853 1b04 	ldr.w	r1, [r3], #4
    d81a:	430a      	orrs	r2, r1
    d81c:	429e      	cmp	r6, r3
    d81e:	d1fa      	bne.n	d816 <POINTonE2_affine_Compress_BE+0xde>
    d820:	1e53      	subs	r3, r2, #1
    d822:	ea23 0202 	bic.w	r2, r3, r2
    d826:	0fd3      	lsrs	r3, r2, #31
    d828:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    d82c:	3b01      	subs	r3, #1
    d82e:	402b      	ands	r3, r5
    d830:	4303      	orrs	r3, r0
    d832:	f003 0301 	and.w	r3, r3, #1
    d836:	f004 0002 	and.w	r0, r4, #2
    d83a:	4318      	orrs	r0, r3
    d83c:	b027      	add	sp, #156	; 0x9c
    d83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d840:	fffcfffd 	.word	0xfffcfffd
    d844:	00024108 	.word	0x00024108

0000d848 <POINTonE2_affine_Serialize_BE>:
    d848:	b5f0      	push	{r4, r5, r6, r7, lr}
    d84a:	b09b      	sub	sp, #108	; 0x6c
    d84c:	4606      	mov	r6, r0
    d84e:	460f      	mov	r7, r1
    d850:	230c      	movs	r3, #12
    d852:	9300      	str	r3, [sp, #0]
    d854:	4b52      	ldr	r3, [pc, #328]	; (d9a0 <POINTonE2_affine_Serialize_BE+0x158>)
    d856:	4a53      	ldr	r2, [pc, #332]	; (d9a4 <POINTonE2_affine_Serialize_BE+0x15c>)
    d858:	3130      	adds	r1, #48	; 0x30
    d85a:	a80e      	add	r0, sp, #56	; 0x38
    d85c:	f7ff fbea 	bl	d034 <from_mont_n>
    d860:	f106 0430 	add.w	r4, r6, #48	; 0x30
    d864:	4632      	mov	r2, r6
    d866:	f106 002f 	add.w	r0, r6, #47	; 0x2f
    d86a:	1a83      	subs	r3, r0, r2
    d86c:	f023 0103 	bic.w	r1, r3, #3
    d870:	ad1a      	add	r5, sp, #104	; 0x68
    d872:	4429      	add	r1, r5
    d874:	f003 0303 	and.w	r3, r3, #3
    d878:	00db      	lsls	r3, r3, #3
    d87a:	f851 1c30 	ldr.w	r1, [r1, #-48]
    d87e:	fa21 f303 	lsr.w	r3, r1, r3
    d882:	f802 3b01 	strb.w	r3, [r2], #1
    d886:	42a2      	cmp	r2, r4
    d888:	d1ef      	bne.n	d86a <POINTonE2_affine_Serialize_BE+0x22>
    d88a:	230c      	movs	r3, #12
    d88c:	9300      	str	r3, [sp, #0]
    d88e:	4b44      	ldr	r3, [pc, #272]	; (d9a0 <POINTonE2_affine_Serialize_BE+0x158>)
    d890:	4a44      	ldr	r2, [pc, #272]	; (d9a4 <POINTonE2_affine_Serialize_BE+0x15c>)
    d892:	4639      	mov	r1, r7
    d894:	a802      	add	r0, sp, #8
    d896:	f7ff fbcd 	bl	d034 <from_mont_n>
    d89a:	f106 0560 	add.w	r5, r6, #96	; 0x60
    d89e:	f106 015f 	add.w	r1, r6, #95	; 0x5f
    d8a2:	1b0b      	subs	r3, r1, r4
    d8a4:	f023 0203 	bic.w	r2, r3, #3
    d8a8:	a81a      	add	r0, sp, #104	; 0x68
    d8aa:	4402      	add	r2, r0
    d8ac:	f003 0303 	and.w	r3, r3, #3
    d8b0:	00db      	lsls	r3, r3, #3
    d8b2:	f852 2c60 	ldr.w	r2, [r2, #-96]
    d8b6:	fa22 f303 	lsr.w	r3, r2, r3
    d8ba:	f804 3b01 	strb.w	r3, [r4], #1
    d8be:	42ac      	cmp	r4, r5
    d8c0:	d1ef      	bne.n	d8a2 <POINTonE2_affine_Serialize_BE+0x5a>
    d8c2:	230c      	movs	r3, #12
    d8c4:	9300      	str	r3, [sp, #0]
    d8c6:	4b36      	ldr	r3, [pc, #216]	; (d9a0 <POINTonE2_affine_Serialize_BE+0x158>)
    d8c8:	4a36      	ldr	r2, [pc, #216]	; (d9a4 <POINTonE2_affine_Serialize_BE+0x15c>)
    d8ca:	f107 0190 	add.w	r1, r7, #144	; 0x90
    d8ce:	a80e      	add	r0, sp, #56	; 0x38
    d8d0:	f7ff fbb0 	bl	d034 <from_mont_n>
    d8d4:	f106 0490 	add.w	r4, r6, #144	; 0x90
    d8d8:	f106 018f 	add.w	r1, r6, #143	; 0x8f
    d8dc:	1b4b      	subs	r3, r1, r5
    d8de:	f023 0203 	bic.w	r2, r3, #3
    d8e2:	a81a      	add	r0, sp, #104	; 0x68
    d8e4:	4402      	add	r2, r0
    d8e6:	f003 0303 	and.w	r3, r3, #3
    d8ea:	00db      	lsls	r3, r3, #3
    d8ec:	f852 2c30 	ldr.w	r2, [r2, #-48]
    d8f0:	fa22 f303 	lsr.w	r3, r2, r3
    d8f4:	f805 3b01 	strb.w	r3, [r5], #1
    d8f8:	42ac      	cmp	r4, r5
    d8fa:	d1ef      	bne.n	d8dc <POINTonE2_affine_Serialize_BE+0x94>
    d8fc:	230c      	movs	r3, #12
    d8fe:	9300      	str	r3, [sp, #0]
    d900:	4b27      	ldr	r3, [pc, #156]	; (d9a0 <POINTonE2_affine_Serialize_BE+0x158>)
    d902:	4a28      	ldr	r2, [pc, #160]	; (d9a4 <POINTonE2_affine_Serialize_BE+0x15c>)
    d904:	f107 0160 	add.w	r1, r7, #96	; 0x60
    d908:	a802      	add	r0, sp, #8
    d90a:	f7ff fb93 	bl	d034 <from_mont_n>
    d90e:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
    d912:	36bf      	adds	r6, #191	; 0xbf
    d914:	1b33      	subs	r3, r6, r4
    d916:	f023 0203 	bic.w	r2, r3, #3
    d91a:	a81a      	add	r0, sp, #104	; 0x68
    d91c:	4402      	add	r2, r0
    d91e:	f003 0303 	and.w	r3, r3, #3
    d922:	00db      	lsls	r3, r3, #3
    d924:	f852 2c60 	ldr.w	r2, [r2, #-96]
    d928:	fa22 f303 	lsr.w	r3, r2, r3
    d92c:	f804 3b01 	strb.w	r3, [r4], #1
    d930:	428c      	cmp	r4, r1
    d932:	d1ef      	bne.n	d914 <POINTonE2_affine_Serialize_BE+0xcc>
    d934:	4c1b      	ldr	r4, [pc, #108]	; (d9a4 <POINTonE2_affine_Serialize_BE+0x15c>)
    d936:	220c      	movs	r2, #12
    d938:	4621      	mov	r1, r4
    d93a:	a802      	add	r0, sp, #8
    d93c:	f7ff fc8f 	bl	d25e <sgn0_pty_mod_n>
    d940:	4605      	mov	r5, r0
    d942:	220c      	movs	r2, #12
    d944:	4621      	mov	r1, r4
    d946:	a80e      	add	r0, sp, #56	; 0x38
    d948:	f7ff fc89 	bl	d25e <sgn0_pty_mod_n>
    d94c:	aa0d      	add	r2, sp, #52	; 0x34
    d94e:	ab02      	add	r3, sp, #8
    d950:	ae19      	add	r6, sp, #100	; 0x64
    d952:	2100      	movs	r1, #0
    d954:	f852 4f04 	ldr.w	r4, [r2, #4]!
    d958:	4321      	orrs	r1, r4
    d95a:	42b2      	cmp	r2, r6
    d95c:	d1fa      	bne.n	d954 <POINTonE2_affine_Serialize_BE+0x10c>
    d95e:	1e4c      	subs	r4, r1, #1
    d960:	ea24 0101 	bic.w	r1, r4, r1
    d964:	0fcc      	lsrs	r4, r1, #31
    d966:	ea05 71e1 	and.w	r1, r5, r1, asr #31
    d96a:	3c01      	subs	r4, #1
    d96c:	4004      	ands	r4, r0
    d96e:	430c      	orrs	r4, r1
    d970:	f103 0630 	add.w	r6, r3, #48	; 0x30
    d974:	2200      	movs	r2, #0
    d976:	f853 1b04 	ldr.w	r1, [r3], #4
    d97a:	430a      	orrs	r2, r1
    d97c:	429e      	cmp	r6, r3
    d97e:	d1fa      	bne.n	d976 <POINTonE2_affine_Serialize_BE+0x12e>
    d980:	1e53      	subs	r3, r2, #1
    d982:	ea23 0202 	bic.w	r2, r3, r2
    d986:	0fd3      	lsrs	r3, r2, #31
    d988:	ea00 70e2 	and.w	r0, r0, r2, asr #31
    d98c:	3b01      	subs	r3, #1
    d98e:	402b      	ands	r3, r5
    d990:	4303      	orrs	r3, r0
    d992:	f003 0301 	and.w	r3, r3, #1
    d996:	f004 0002 	and.w	r0, r4, #2
    d99a:	4318      	orrs	r0, r3
    d99c:	b01b      	add	sp, #108	; 0x6c
    d99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9a0:	fffcfffd 	.word	0xfffcfffd
    d9a4:	00024108 	.word	0x00024108

0000d9a8 <POINTonE1_affine_on_curve>:
    d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9aa:	b09b      	sub	sp, #108	; 0x6c
    d9ac:	4604      	mov	r4, r0
    d9ae:	4d24      	ldr	r5, [pc, #144]	; (da40 <POINTonE1_affine_on_curve+0x98>)
    d9b0:	260c      	movs	r6, #12
    d9b2:	9601      	str	r6, [sp, #4]
    d9b4:	4f23      	ldr	r7, [pc, #140]	; (da44 <POINTonE1_affine_on_curve+0x9c>)
    d9b6:	9700      	str	r7, [sp, #0]
    d9b8:	462b      	mov	r3, r5
    d9ba:	4602      	mov	r2, r0
    d9bc:	4601      	mov	r1, r0
    d9be:	a80e      	add	r0, sp, #56	; 0x38
    d9c0:	f7ff f806 	bl	c9d0 <mul_mont_n>
    d9c4:	9601      	str	r6, [sp, #4]
    d9c6:	9700      	str	r7, [sp, #0]
    d9c8:	462b      	mov	r3, r5
    d9ca:	4622      	mov	r2, r4
    d9cc:	a90e      	add	r1, sp, #56	; 0x38
    d9ce:	4608      	mov	r0, r1
    d9d0:	f7fe fffe 	bl	c9d0 <mul_mont_n>
    d9d4:	9600      	str	r6, [sp, #0]
    d9d6:	462b      	mov	r3, r5
    d9d8:	f105 0260 	add.w	r2, r5, #96	; 0x60
    d9dc:	a90e      	add	r1, sp, #56	; 0x38
    d9de:	4608      	mov	r0, r1
    d9e0:	f7ff f99e 	bl	cd20 <add_mod_n>
    d9e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    d9e8:	9601      	str	r6, [sp, #4]
    d9ea:	9700      	str	r7, [sp, #0]
    d9ec:	462b      	mov	r3, r5
    d9ee:	460a      	mov	r2, r1
    d9f0:	a802      	add	r0, sp, #8
    d9f2:	f7fe ffed 	bl	c9d0 <mul_mont_n>
    d9f6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    d9fa:	f10d 0e08 	add.w	lr, sp, #8
    d9fe:	a81a      	add	r0, sp, #104	; 0x68
    da00:	2100      	movs	r1, #0
    da02:	f85c 3b04 	ldr.w	r3, [ip], #4
    da06:	f85e 2b04 	ldr.w	r2, [lr], #4
    da0a:	4053      	eors	r3, r2
    da0c:	4319      	orrs	r1, r3
    da0e:	4584      	cmp	ip, r0
    da10:	d1f7      	bne.n	da02 <POINTonE1_affine_on_curve+0x5a>
    da12:	f101 3eff 	add.w	lr, r1, #4294967295
    da16:	ea2e 0101 	bic.w	r1, lr, r1
    da1a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
    da1e:	1f23      	subs	r3, r4, #4
    da20:	f104 0c5c 	add.w	ip, r4, #92	; 0x5c
    da24:	2100      	movs	r1, #0
    da26:	f853 2f04 	ldr.w	r2, [r3, #4]!
    da2a:	4311      	orrs	r1, r2
    da2c:	4563      	cmp	r3, ip
    da2e:	d1fa      	bne.n	da26 <POINTonE1_affine_on_curve+0x7e>
    da30:	1e48      	subs	r0, r1, #1
    da32:	ea20 0001 	bic.w	r0, r0, r1
    da36:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
    da3a:	b01b      	add	sp, #108	; 0x6c
    da3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da3e:	bf00      	nop
    da40:	00024108 	.word	0x00024108
    da44:	fffcfffd 	.word	0xfffcfffd

0000da48 <cneg_mod_n>:
    da48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da4c:	b083      	sub	sp, #12
    da4e:	af00      	add	r7, sp, #0
    da50:	607a      	str	r2, [r7, #4]
    da52:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
    da56:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
    da5a:	f10b 0207 	add.w	r2, fp, #7
    da5e:	f022 0207 	bic.w	r2, r2, #7
    da62:	ebad 0d02 	sub.w	sp, sp, r2
    da66:	f1ba 0f00 	cmp.w	sl, #0
    da6a:	d045      	beq.n	daf8 <cneg_mod_n+0xb0>
    da6c:	466d      	mov	r5, sp
    da6e:	f1a3 0e04 	sub.w	lr, r3, #4
    da72:	1f0c      	subs	r4, r1, #4
    da74:	f1a5 0904 	sub.w	r9, r5, #4
    da78:	44f3      	add	fp, lr
    da7a:	46a0      	mov	r8, r4
    da7c:	2300      	movs	r3, #0
    da7e:	461e      	mov	r6, r3
    da80:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    da84:	1ad3      	subs	r3, r2, r3
    da86:	eb66 0c06 	sbc.w	ip, r6, r6
    da8a:	f858 2f04 	ldr.w	r2, [r8, #4]!
    da8e:	1a9a      	subs	r2, r3, r2
    da90:	f16c 0300 	sbc.w	r3, ip, #0
    da94:	f849 2f04 	str.w	r2, [r9, #4]!
    da98:	f003 0301 	and.w	r3, r3, #1
    da9c:	45de      	cmp	lr, fp
    da9e:	d1ef      	bne.n	da80 <cneg_mod_n+0x38>
    daa0:	f03a 4c40 	bics.w	ip, sl, #3221225472	; 0xc0000000
    daa4:	d02c      	beq.n	db00 <cneg_mod_n+0xb8>
    daa6:	1f0e      	subs	r6, r1, #4
    daa8:	eb06 068c 	add.w	r6, r6, ip, lsl #2
    daac:	2300      	movs	r3, #0
    daae:	f854 2f04 	ldr.w	r2, [r4, #4]!
    dab2:	4313      	orrs	r3, r2
    dab4:	42b4      	cmp	r4, r6
    dab6:	d1fa      	bne.n	daae <cneg_mod_n+0x66>
    dab8:	1e5a      	subs	r2, r3, #1
    daba:	ea22 0303 	bic.w	r3, r2, r3
    dabe:	f8d7 c004 	ldr.w	ip, [r7, #4]
    dac2:	2b00      	cmp	r3, #0
    dac4:	bfb4      	ite	lt
    dac6:	f04f 0c00 	movlt.w	ip, #0
    daca:	f00c 0c01 	andge.w	ip, ip, #1
    dace:	f1cc 0600 	rsb	r6, ip, #0
    dad2:	3904      	subs	r1, #4
    dad4:	3d04      	subs	r5, #4
    dad6:	3804      	subs	r0, #4
    dad8:	2400      	movs	r4, #0
    dada:	f10c 3cff 	add.w	ip, ip, #4294967295
    dade:	f851 3f04 	ldr.w	r3, [r1, #4]!
    dae2:	ea0c 0303 	and.w	r3, ip, r3
    dae6:	f855 2f04 	ldr.w	r2, [r5, #4]!
    daea:	4032      	ands	r2, r6
    daec:	4313      	orrs	r3, r2
    daee:	f840 3f04 	str.w	r3, [r0, #4]!
    daf2:	3401      	adds	r4, #1
    daf4:	45a2      	cmp	sl, r4
    daf6:	d8f2      	bhi.n	dade <cneg_mod_n+0x96>
    daf8:	370c      	adds	r7, #12
    dafa:	46bd      	mov	sp, r7
    dafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db00:	4666      	mov	r6, ip
    db02:	e7e6      	b.n	dad2 <cneg_mod_n+0x8a>

0000db04 <POINTonE1_cneg>:
    db04:	b500      	push	{lr}
    db06:	b083      	sub	sp, #12
    db08:	460a      	mov	r2, r1
    db0a:	3030      	adds	r0, #48	; 0x30
    db0c:	230c      	movs	r3, #12
    db0e:	9300      	str	r3, [sp, #0]
    db10:	4b03      	ldr	r3, [pc, #12]	; (db20 <POINTonE1_cneg+0x1c>)
    db12:	4601      	mov	r1, r0
    db14:	f7ff ff98 	bl	da48 <cneg_mod_n>
    db18:	b003      	add	sp, #12
    db1a:	f85d fb04 	ldr.w	pc, [sp], #4
    db1e:	bf00      	nop
    db20:	00024108 	.word	0x00024108

0000db24 <POINTonE1_gather_booth_w4>:
    db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db26:	460d      	mov	r5, r1
    db28:	f3c2 1100 	ubfx	r1, r2, #4, #1
    db2c:	f002 070f 	and.w	r7, r2, #15
    db30:	4603      	mov	r3, r0
    db32:	f100 0490 	add.w	r4, r0, #144	; 0x90
    db36:	2200      	movs	r2, #0
    db38:	f843 2b04 	str.w	r2, [r3], #4
    db3c:	42a3      	cmp	r3, r4
    db3e:	d1fb      	bne.n	db38 <POINTonE1_gather_booth_w4+0x14>
    db40:	358c      	adds	r5, #140	; 0x8c
    db42:	2601      	movs	r6, #1
    db44:	ea87 0e06 	eor.w	lr, r7, r6
    db48:	fa5f fe8e 	uxtb.w	lr, lr
    db4c:	f10e 3eff 	add.w	lr, lr, #4294967295
    db50:	ea4f 7eee 	mov.w	lr, lr, asr #31
    db54:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
    db58:	1f02      	subs	r2, r0, #4
    db5a:	f852 4f04 	ldr.w	r4, [r2, #4]!
    db5e:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    db62:	4063      	eors	r3, r4
    db64:	ea03 030e 	and.w	r3, r3, lr
    db68:	4063      	eors	r3, r4
    db6a:	6013      	str	r3, [r2, #0]
    db6c:	45ac      	cmp	ip, r5
    db6e:	d1f4      	bne.n	db5a <POINTonE1_gather_booth_w4+0x36>
    db70:	3601      	adds	r6, #1
    db72:	3590      	adds	r5, #144	; 0x90
    db74:	2e09      	cmp	r6, #9
    db76:	d1e5      	bne.n	db44 <POINTonE1_gather_booth_w4+0x20>
    db78:	f7ff ffc4 	bl	db04 <POINTonE1_cneg>
    db7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000db7e <POINTonE1_gather_booth_w5>:
    db7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db80:	460d      	mov	r5, r1
    db82:	f3c2 1140 	ubfx	r1, r2, #5, #1
    db86:	f002 071f 	and.w	r7, r2, #31
    db8a:	4603      	mov	r3, r0
    db8c:	f100 0490 	add.w	r4, r0, #144	; 0x90
    db90:	2200      	movs	r2, #0
    db92:	f843 2b04 	str.w	r2, [r3], #4
    db96:	42a3      	cmp	r3, r4
    db98:	d1fb      	bne.n	db92 <POINTonE1_gather_booth_w5+0x14>
    db9a:	358c      	adds	r5, #140	; 0x8c
    db9c:	2601      	movs	r6, #1
    db9e:	e003      	b.n	dba8 <POINTonE1_gather_booth_w5+0x2a>
    dba0:	3601      	adds	r6, #1
    dba2:	3590      	adds	r5, #144	; 0x90
    dba4:	2e11      	cmp	r6, #17
    dba6:	d016      	beq.n	dbd6 <POINTonE1_gather_booth_w5+0x58>
    dba8:	ea87 0e06 	eor.w	lr, r7, r6
    dbac:	fa5f fe8e 	uxtb.w	lr, lr
    dbb0:	f10e 3eff 	add.w	lr, lr, #4294967295
    dbb4:	ea4f 7eee 	mov.w	lr, lr, asr #31
    dbb8:	f1a5 0c90 	sub.w	ip, r5, #144	; 0x90
    dbbc:	1f02      	subs	r2, r0, #4
    dbbe:	f852 4f04 	ldr.w	r4, [r2, #4]!
    dbc2:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    dbc6:	4063      	eors	r3, r4
    dbc8:	ea03 030e 	and.w	r3, r3, lr
    dbcc:	4063      	eors	r3, r4
    dbce:	6013      	str	r3, [r2, #0]
    dbd0:	45ac      	cmp	ip, r5
    dbd2:	d1f4      	bne.n	dbbe <POINTonE1_gather_booth_w5+0x40>
    dbd4:	e7e4      	b.n	dba0 <POINTonE1_gather_booth_w5+0x22>
    dbd6:	f7ff ff95 	bl	db04 <POINTonE1_cneg>
    dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dbdc <POINTonE2_cneg>:
    dbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbde:	b083      	sub	sp, #12
    dbe0:	4604      	mov	r4, r0
    dbe2:	460d      	mov	r5, r1
    dbe4:	3060      	adds	r0, #96	; 0x60
    dbe6:	4e09      	ldr	r6, [pc, #36]	; (dc0c <POINTonE2_cneg+0x30>)
    dbe8:	270c      	movs	r7, #12
    dbea:	9700      	str	r7, [sp, #0]
    dbec:	4633      	mov	r3, r6
    dbee:	460a      	mov	r2, r1
    dbf0:	4601      	mov	r1, r0
    dbf2:	f7ff ff29 	bl	da48 <cneg_mod_n>
    dbf6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    dbfa:	9700      	str	r7, [sp, #0]
    dbfc:	4633      	mov	r3, r6
    dbfe:	462a      	mov	r2, r5
    dc00:	4601      	mov	r1, r0
    dc02:	f7ff ff21 	bl	da48 <cneg_mod_n>
    dc06:	b003      	add	sp, #12
    dc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc0a:	bf00      	nop
    dc0c:	00024108 	.word	0x00024108

0000dc10 <POINTonE2_gather_booth_w4>:
    dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc12:	460d      	mov	r5, r1
    dc14:	f3c2 1100 	ubfx	r1, r2, #4, #1
    dc18:	f002 070f 	and.w	r7, r2, #15
    dc1c:	4603      	mov	r3, r0
    dc1e:	f500 7490 	add.w	r4, r0, #288	; 0x120
    dc22:	2200      	movs	r2, #0
    dc24:	f843 2b04 	str.w	r2, [r3], #4
    dc28:	42a3      	cmp	r3, r4
    dc2a:	d1fb      	bne.n	dc24 <POINTonE2_gather_booth_w4+0x14>
    dc2c:	f505 758e 	add.w	r5, r5, #284	; 0x11c
    dc30:	2601      	movs	r6, #1
    dc32:	ea87 0e06 	eor.w	lr, r7, r6
    dc36:	fa5f fe8e 	uxtb.w	lr, lr
    dc3a:	f10e 3eff 	add.w	lr, lr, #4294967295
    dc3e:	ea4f 7eee 	mov.w	lr, lr, asr #31
    dc42:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
    dc46:	1f02      	subs	r2, r0, #4
    dc48:	f852 4f04 	ldr.w	r4, [r2, #4]!
    dc4c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    dc50:	4063      	eors	r3, r4
    dc52:	ea03 030e 	and.w	r3, r3, lr
    dc56:	4063      	eors	r3, r4
    dc58:	6013      	str	r3, [r2, #0]
    dc5a:	45ac      	cmp	ip, r5
    dc5c:	d1f4      	bne.n	dc48 <POINTonE2_gather_booth_w4+0x38>
    dc5e:	3601      	adds	r6, #1
    dc60:	f505 7590 	add.w	r5, r5, #288	; 0x120
    dc64:	2e09      	cmp	r6, #9
    dc66:	d1e4      	bne.n	dc32 <POINTonE2_gather_booth_w4+0x22>
    dc68:	f7ff ffb8 	bl	dbdc <POINTonE2_cneg>
    dc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc6e <POINTonE2_gather_booth_w5>:
    dc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc70:	460d      	mov	r5, r1
    dc72:	f3c2 1140 	ubfx	r1, r2, #5, #1
    dc76:	f002 071f 	and.w	r7, r2, #31
    dc7a:	4603      	mov	r3, r0
    dc7c:	f500 7490 	add.w	r4, r0, #288	; 0x120
    dc80:	2200      	movs	r2, #0
    dc82:	f843 2b04 	str.w	r2, [r3], #4
    dc86:	42a3      	cmp	r3, r4
    dc88:	d1fb      	bne.n	dc82 <POINTonE2_gather_booth_w5+0x14>
    dc8a:	f505 758e 	add.w	r5, r5, #284	; 0x11c
    dc8e:	2601      	movs	r6, #1
    dc90:	e004      	b.n	dc9c <POINTonE2_gather_booth_w5+0x2e>
    dc92:	3601      	adds	r6, #1
    dc94:	f505 7590 	add.w	r5, r5, #288	; 0x120
    dc98:	2e11      	cmp	r6, #17
    dc9a:	d016      	beq.n	dcca <POINTonE2_gather_booth_w5+0x5c>
    dc9c:	ea87 0e06 	eor.w	lr, r7, r6
    dca0:	fa5f fe8e 	uxtb.w	lr, lr
    dca4:	f10e 3eff 	add.w	lr, lr, #4294967295
    dca8:	ea4f 7eee 	mov.w	lr, lr, asr #31
    dcac:	f5a5 7c90 	sub.w	ip, r5, #288	; 0x120
    dcb0:	1f02      	subs	r2, r0, #4
    dcb2:	f852 4f04 	ldr.w	r4, [r2, #4]!
    dcb6:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    dcba:	4063      	eors	r3, r4
    dcbc:	ea03 030e 	and.w	r3, r3, lr
    dcc0:	4063      	eors	r3, r4
    dcc2:	6013      	str	r3, [r2, #0]
    dcc4:	45ac      	cmp	ip, r5
    dcc6:	d1f4      	bne.n	dcb2 <POINTonE2_gather_booth_w5+0x44>
    dcc8:	e7e3      	b.n	dc92 <POINTonE2_gather_booth_w5+0x24>
    dcca:	f7ff ff87 	bl	dbdc <POINTonE2_cneg>
    dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dcd0 <neg_fp6>:
    dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dcd2:	b083      	sub	sp, #12
    dcd4:	4604      	mov	r4, r0
    dcd6:	460d      	mov	r5, r1
    dcd8:	4e1a      	ldr	r6, [pc, #104]	; (dd44 <neg_fp6+0x74>)
    dcda:	270c      	movs	r7, #12
    dcdc:	9700      	str	r7, [sp, #0]
    dcde:	4633      	mov	r3, r6
    dce0:	2201      	movs	r2, #1
    dce2:	f7ff feb1 	bl	da48 <cneg_mod_n>
    dce6:	9700      	str	r7, [sp, #0]
    dce8:	4633      	mov	r3, r6
    dcea:	2201      	movs	r2, #1
    dcec:	f105 0130 	add.w	r1, r5, #48	; 0x30
    dcf0:	f104 0030 	add.w	r0, r4, #48	; 0x30
    dcf4:	f7ff fea8 	bl	da48 <cneg_mod_n>
    dcf8:	9700      	str	r7, [sp, #0]
    dcfa:	4633      	mov	r3, r6
    dcfc:	2201      	movs	r2, #1
    dcfe:	f105 0160 	add.w	r1, r5, #96	; 0x60
    dd02:	f104 0060 	add.w	r0, r4, #96	; 0x60
    dd06:	f7ff fe9f 	bl	da48 <cneg_mod_n>
    dd0a:	9700      	str	r7, [sp, #0]
    dd0c:	4633      	mov	r3, r6
    dd0e:	2201      	movs	r2, #1
    dd10:	f105 0190 	add.w	r1, r5, #144	; 0x90
    dd14:	f104 0090 	add.w	r0, r4, #144	; 0x90
    dd18:	f7ff fe96 	bl	da48 <cneg_mod_n>
    dd1c:	9700      	str	r7, [sp, #0]
    dd1e:	4633      	mov	r3, r6
    dd20:	2201      	movs	r2, #1
    dd22:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    dd26:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    dd2a:	f7ff fe8d 	bl	da48 <cneg_mod_n>
    dd2e:	9700      	str	r7, [sp, #0]
    dd30:	4633      	mov	r3, r6
    dd32:	2201      	movs	r2, #1
    dd34:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    dd38:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    dd3c:	f7ff fe84 	bl	da48 <cneg_mod_n>
    dd40:	b003      	add	sp, #12
    dd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd44:	00024108 	.word	0x00024108

0000dd48 <conjugate_fp12>:
    dd48:	b508      	push	{r3, lr}
    dd4a:	f500 7090 	add.w	r0, r0, #288	; 0x120
    dd4e:	4601      	mov	r1, r0
    dd50:	f7ff ffbe 	bl	dcd0 <neg_fp6>
    dd54:	bd08      	pop	{r3, pc}

0000dd56 <POINTonE1_is_equal>:
    dd56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd5a:	b0cd      	sub	sp, #308	; 0x134
    dd5c:	4681      	mov	r9, r0
    dd5e:	4688      	mov	r8, r1
    dd60:	f100 0a60 	add.w	sl, r0, #96	; 0x60
    dd64:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    dd68:	308c      	adds	r0, #140	; 0x8c
    dd6a:	2200      	movs	r2, #0
    dd6c:	f853 1f04 	ldr.w	r1, [r3, #4]!
    dd70:	430a      	orrs	r2, r1
    dd72:	4283      	cmp	r3, r0
    dd74:	d1fa      	bne.n	dd6c <POINTonE1_is_equal+0x16>
    dd76:	1e53      	subs	r3, r2, #1
    dd78:	ea23 0202 	bic.w	r2, r3, r2
    dd7c:	0fd3      	lsrs	r3, r2, #31
    dd7e:	9303      	str	r3, [sp, #12]
    dd80:	f108 0b60 	add.w	fp, r8, #96	; 0x60
    dd84:	f108 035c 	add.w	r3, r8, #92	; 0x5c
    dd88:	f108 008c 	add.w	r0, r8, #140	; 0x8c
    dd8c:	2200      	movs	r2, #0
    dd8e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    dd92:	430a      	orrs	r2, r1
    dd94:	4283      	cmp	r3, r0
    dd96:	d1fa      	bne.n	dd8e <POINTonE1_is_equal+0x38>
    dd98:	1e54      	subs	r4, r2, #1
    dd9a:	ea24 0402 	bic.w	r4, r4, r2
    dd9e:	0fe4      	lsrs	r4, r4, #31
    dda0:	4d2e      	ldr	r5, [pc, #184]	; (de5c <POINTonE1_is_equal+0x106>)
    dda2:	270c      	movs	r7, #12
    dda4:	9701      	str	r7, [sp, #4]
    dda6:	4e2e      	ldr	r6, [pc, #184]	; (de60 <POINTonE1_is_equal+0x10a>)
    dda8:	9600      	str	r6, [sp, #0]
    ddaa:	462b      	mov	r3, r5
    ddac:	4652      	mov	r2, sl
    ddae:	4651      	mov	r1, sl
    ddb0:	a840      	add	r0, sp, #256	; 0x100
    ddb2:	f7fe fe0d 	bl	c9d0 <mul_mont_n>
    ddb6:	9701      	str	r7, [sp, #4]
    ddb8:	9600      	str	r6, [sp, #0]
    ddba:	462b      	mov	r3, r5
    ddbc:	465a      	mov	r2, fp
    ddbe:	4659      	mov	r1, fp
    ddc0:	a834      	add	r0, sp, #208	; 0xd0
    ddc2:	f7fe fe05 	bl	c9d0 <mul_mont_n>
    ddc6:	9701      	str	r7, [sp, #4]
    ddc8:	9600      	str	r6, [sp, #0]
    ddca:	462b      	mov	r3, r5
    ddcc:	aa34      	add	r2, sp, #208	; 0xd0
    ddce:	4649      	mov	r1, r9
    ddd0:	a81c      	add	r0, sp, #112	; 0x70
    ddd2:	f7fe fdfd 	bl	c9d0 <mul_mont_n>
    ddd6:	9701      	str	r7, [sp, #4]
    ddd8:	9600      	str	r6, [sp, #0]
    ddda:	462b      	mov	r3, r5
    dddc:	aa40      	add	r2, sp, #256	; 0x100
    ddde:	4641      	mov	r1, r8
    dde0:	a804      	add	r0, sp, #16
    dde2:	f7fe fdf5 	bl	c9d0 <mul_mont_n>
    dde6:	9701      	str	r7, [sp, #4]
    dde8:	9600      	str	r6, [sp, #0]
    ddea:	462b      	mov	r3, r5
    ddec:	465a      	mov	r2, fp
    ddee:	f109 0130 	add.w	r1, r9, #48	; 0x30
    ddf2:	a828      	add	r0, sp, #160	; 0xa0
    ddf4:	f7fe fdec 	bl	c9d0 <mul_mont_n>
    ddf8:	9701      	str	r7, [sp, #4]
    ddfa:	9600      	str	r6, [sp, #0]
    ddfc:	462b      	mov	r3, r5
    ddfe:	4652      	mov	r2, sl
    de00:	f108 0130 	add.w	r1, r8, #48	; 0x30
    de04:	a810      	add	r0, sp, #64	; 0x40
    de06:	f7fe fde3 	bl	c9d0 <mul_mont_n>
    de0a:	9701      	str	r7, [sp, #4]
    de0c:	9600      	str	r6, [sp, #0]
    de0e:	462b      	mov	r3, r5
    de10:	aa34      	add	r2, sp, #208	; 0xd0
    de12:	a928      	add	r1, sp, #160	; 0xa0
    de14:	4608      	mov	r0, r1
    de16:	f7fe fddb 	bl	c9d0 <mul_mont_n>
    de1a:	9701      	str	r7, [sp, #4]
    de1c:	9600      	str	r6, [sp, #0]
    de1e:	462b      	mov	r3, r5
    de20:	aa40      	add	r2, sp, #256	; 0x100
    de22:	a910      	add	r1, sp, #64	; 0x40
    de24:	4608      	mov	r0, r1
    de26:	f7fe fdd3 	bl	c9d0 <mul_mont_n>
    de2a:	aa1b      	add	r2, sp, #108	; 0x6c
    de2c:	eb0d 0107 	add.w	r1, sp, r7
    de30:	ae33      	add	r6, sp, #204	; 0xcc
    de32:	2000      	movs	r0, #0
    de34:	f852 3f04 	ldr.w	r3, [r2, #4]!
    de38:	f851 5f04 	ldr.w	r5, [r1, #4]!
    de3c:	406b      	eors	r3, r5
    de3e:	4318      	orrs	r0, r3
    de40:	42b2      	cmp	r2, r6
    de42:	d1f7      	bne.n	de34 <POINTonE1_is_equal+0xde>
    de44:	1e43      	subs	r3, r0, #1
    de46:	ea23 0000 	bic.w	r0, r3, r0
    de4a:	9b03      	ldr	r3, [sp, #12]
    de4c:	405c      	eors	r4, r3
    de4e:	f084 0401 	eor.w	r4, r4, #1
    de52:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
    de56:	b04d      	add	sp, #308	; 0x134
    de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de5c:	00024108 	.word	0x00024108
    de60:	fffcfffd 	.word	0xfffcfffd

0000de64 <POINTonE1_double>:
    de64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    de68:	b0a6      	sub	sp, #152	; 0x98
    de6a:	4606      	mov	r6, r0
    de6c:	460f      	mov	r7, r1
    de6e:	4c4c      	ldr	r4, [pc, #304]	; (dfa0 <POINTonE1_double+0x13c>)
    de70:	250c      	movs	r5, #12
    de72:	9501      	str	r5, [sp, #4]
    de74:	f8df 812c 	ldr.w	r8, [pc, #300]	; dfa4 <POINTonE1_double+0x140>
    de78:	f8cd 8000 	str.w	r8, [sp]
    de7c:	4623      	mov	r3, r4
    de7e:	460a      	mov	r2, r1
    de80:	a81a      	add	r0, sp, #104	; 0x68
    de82:	f7fe fda5 	bl	c9d0 <mul_mont_n>
    de86:	f107 0a30 	add.w	sl, r7, #48	; 0x30
    de8a:	9501      	str	r5, [sp, #4]
    de8c:	f8cd 8000 	str.w	r8, [sp]
    de90:	4623      	mov	r3, r4
    de92:	4652      	mov	r2, sl
    de94:	4651      	mov	r1, sl
    de96:	a80e      	add	r0, sp, #56	; 0x38
    de98:	f7fe fd9a 	bl	c9d0 <mul_mont_n>
    de9c:	9501      	str	r5, [sp, #4]
    de9e:	f8cd 8000 	str.w	r8, [sp]
    dea2:	4623      	mov	r3, r4
    dea4:	aa0e      	add	r2, sp, #56	; 0x38
    dea6:	4611      	mov	r1, r2
    dea8:	a802      	add	r0, sp, #8
    deaa:	f7fe fd91 	bl	c9d0 <mul_mont_n>
    deae:	9500      	str	r5, [sp, #0]
    deb0:	4623      	mov	r3, r4
    deb2:	463a      	mov	r2, r7
    deb4:	a90e      	add	r1, sp, #56	; 0x38
    deb6:	4608      	mov	r0, r1
    deb8:	f7fe ff32 	bl	cd20 <add_mod_n>
    debc:	9501      	str	r5, [sp, #4]
    debe:	f8cd 8000 	str.w	r8, [sp]
    dec2:	4623      	mov	r3, r4
    dec4:	aa0e      	add	r2, sp, #56	; 0x38
    dec6:	4611      	mov	r1, r2
    dec8:	4610      	mov	r0, r2
    deca:	f7fe fd81 	bl	c9d0 <mul_mont_n>
    dece:	9500      	str	r5, [sp, #0]
    ded0:	4623      	mov	r3, r4
    ded2:	aa1a      	add	r2, sp, #104	; 0x68
    ded4:	a90e      	add	r1, sp, #56	; 0x38
    ded6:	4608      	mov	r0, r1
    ded8:	f7fe fbcc 	bl	c674 <sub_mod_n>
    dedc:	9500      	str	r5, [sp, #0]
    dede:	4623      	mov	r3, r4
    dee0:	aa02      	add	r2, sp, #8
    dee2:	a90e      	add	r1, sp, #56	; 0x38
    dee4:	4608      	mov	r0, r1
    dee6:	f7fe fbc5 	bl	c674 <sub_mod_n>
    deea:	9500      	str	r5, [sp, #0]
    deec:	4623      	mov	r3, r4
    deee:	aa0e      	add	r2, sp, #56	; 0x38
    def0:	4611      	mov	r1, r2
    def2:	4610      	mov	r0, r2
    def4:	f7fe ff14 	bl	cd20 <add_mod_n>
    def8:	462b      	mov	r3, r5
    defa:	4622      	mov	r2, r4
    defc:	a91a      	add	r1, sp, #104	; 0x68
    defe:	4608      	mov	r0, r1
    df00:	f7fe ff96 	bl	ce30 <mul_by_3_mod_n>
    df04:	9501      	str	r5, [sp, #4]
    df06:	f8cd 8000 	str.w	r8, [sp]
    df0a:	4623      	mov	r3, r4
    df0c:	aa1a      	add	r2, sp, #104	; 0x68
    df0e:	4611      	mov	r1, r2
    df10:	4630      	mov	r0, r6
    df12:	f7fe fd5d 	bl	c9d0 <mul_mont_n>
    df16:	9500      	str	r5, [sp, #0]
    df18:	4623      	mov	r3, r4
    df1a:	aa0e      	add	r2, sp, #56	; 0x38
    df1c:	4631      	mov	r1, r6
    df1e:	4630      	mov	r0, r6
    df20:	f7fe fba8 	bl	c674 <sub_mod_n>
    df24:	9500      	str	r5, [sp, #0]
    df26:	4623      	mov	r3, r4
    df28:	aa0e      	add	r2, sp, #56	; 0x38
    df2a:	4631      	mov	r1, r6
    df2c:	4630      	mov	r0, r6
    df2e:	f7fe fba1 	bl	c674 <sub_mod_n>
    df32:	f106 0960 	add.w	r9, r6, #96	; 0x60
    df36:	f107 0160 	add.w	r1, r7, #96	; 0x60
    df3a:	9500      	str	r5, [sp, #0]
    df3c:	4623      	mov	r3, r4
    df3e:	460a      	mov	r2, r1
    df40:	4648      	mov	r0, r9
    df42:	f7fe feed 	bl	cd20 <add_mod_n>
    df46:	9501      	str	r5, [sp, #4]
    df48:	f8cd 8000 	str.w	r8, [sp]
    df4c:	4623      	mov	r3, r4
    df4e:	4652      	mov	r2, sl
    df50:	4649      	mov	r1, r9
    df52:	4648      	mov	r0, r9
    df54:	f7fe fd3c 	bl	c9d0 <mul_mont_n>
    df58:	9500      	str	r5, [sp, #0]
    df5a:	4623      	mov	r3, r4
    df5c:	2203      	movs	r2, #3
    df5e:	a902      	add	r1, sp, #8
    df60:	4608      	mov	r0, r1
    df62:	f7ff f805 	bl	cf70 <lshift_mod_n>
    df66:	f106 0730 	add.w	r7, r6, #48	; 0x30
    df6a:	9500      	str	r5, [sp, #0]
    df6c:	4623      	mov	r3, r4
    df6e:	4632      	mov	r2, r6
    df70:	a90e      	add	r1, sp, #56	; 0x38
    df72:	4638      	mov	r0, r7
    df74:	f7fe fb7e 	bl	c674 <sub_mod_n>
    df78:	9501      	str	r5, [sp, #4]
    df7a:	f8cd 8000 	str.w	r8, [sp]
    df7e:	4623      	mov	r3, r4
    df80:	aa1a      	add	r2, sp, #104	; 0x68
    df82:	4639      	mov	r1, r7
    df84:	4638      	mov	r0, r7
    df86:	f7fe fd23 	bl	c9d0 <mul_mont_n>
    df8a:	9500      	str	r5, [sp, #0]
    df8c:	4623      	mov	r3, r4
    df8e:	aa02      	add	r2, sp, #8
    df90:	4639      	mov	r1, r7
    df92:	4638      	mov	r0, r7
    df94:	f7fe fb6e 	bl	c674 <sub_mod_n>
    df98:	b026      	add	sp, #152	; 0x98
    df9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df9e:	bf00      	nop
    dfa0:	00024108 	.word	0x00024108
    dfa4:	fffcfffd 	.word	0xfffcfffd

0000dfa8 <sub_fp6>:
    dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfac:	b082      	sub	sp, #8
    dfae:	4604      	mov	r4, r0
    dfb0:	460d      	mov	r5, r1
    dfb2:	4616      	mov	r6, r2
    dfb4:	4f20      	ldr	r7, [pc, #128]	; (e038 <sub_fp6+0x90>)
    dfb6:	f04f 080c 	mov.w	r8, #12
    dfba:	f8cd 8000 	str.w	r8, [sp]
    dfbe:	463b      	mov	r3, r7
    dfc0:	f7fe fb58 	bl	c674 <sub_mod_n>
    dfc4:	f8cd 8000 	str.w	r8, [sp]
    dfc8:	463b      	mov	r3, r7
    dfca:	f106 0230 	add.w	r2, r6, #48	; 0x30
    dfce:	f105 0130 	add.w	r1, r5, #48	; 0x30
    dfd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    dfd6:	f7fe fb4d 	bl	c674 <sub_mod_n>
    dfda:	f8cd 8000 	str.w	r8, [sp]
    dfde:	463b      	mov	r3, r7
    dfe0:	f106 0260 	add.w	r2, r6, #96	; 0x60
    dfe4:	f105 0160 	add.w	r1, r5, #96	; 0x60
    dfe8:	f104 0060 	add.w	r0, r4, #96	; 0x60
    dfec:	f7fe fb42 	bl	c674 <sub_mod_n>
    dff0:	f8cd 8000 	str.w	r8, [sp]
    dff4:	463b      	mov	r3, r7
    dff6:	f106 0290 	add.w	r2, r6, #144	; 0x90
    dffa:	f105 0190 	add.w	r1, r5, #144	; 0x90
    dffe:	f104 0090 	add.w	r0, r4, #144	; 0x90
    e002:	f7fe fb37 	bl	c674 <sub_mod_n>
    e006:	f8cd 8000 	str.w	r8, [sp]
    e00a:	463b      	mov	r3, r7
    e00c:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    e010:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    e014:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e018:	f7fe fb2c 	bl	c674 <sub_mod_n>
    e01c:	f8cd 8000 	str.w	r8, [sp]
    e020:	463b      	mov	r3, r7
    e022:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    e026:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    e02a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    e02e:	f7fe fb21 	bl	c674 <sub_mod_n>
    e032:	b002      	add	sp, #8
    e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e038:	00024108 	.word	0x00024108

0000e03c <add_fp6>:
    e03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e040:	b082      	sub	sp, #8
    e042:	4604      	mov	r4, r0
    e044:	460d      	mov	r5, r1
    e046:	4616      	mov	r6, r2
    e048:	4f20      	ldr	r7, [pc, #128]	; (e0cc <add_fp6+0x90>)
    e04a:	f04f 080c 	mov.w	r8, #12
    e04e:	f8cd 8000 	str.w	r8, [sp]
    e052:	463b      	mov	r3, r7
    e054:	f7fe fe64 	bl	cd20 <add_mod_n>
    e058:	f8cd 8000 	str.w	r8, [sp]
    e05c:	463b      	mov	r3, r7
    e05e:	f106 0230 	add.w	r2, r6, #48	; 0x30
    e062:	f105 0130 	add.w	r1, r5, #48	; 0x30
    e066:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e06a:	f7fe fe59 	bl	cd20 <add_mod_n>
    e06e:	f8cd 8000 	str.w	r8, [sp]
    e072:	463b      	mov	r3, r7
    e074:	f106 0260 	add.w	r2, r6, #96	; 0x60
    e078:	f105 0160 	add.w	r1, r5, #96	; 0x60
    e07c:	f104 0060 	add.w	r0, r4, #96	; 0x60
    e080:	f7fe fe4e 	bl	cd20 <add_mod_n>
    e084:	f8cd 8000 	str.w	r8, [sp]
    e088:	463b      	mov	r3, r7
    e08a:	f106 0290 	add.w	r2, r6, #144	; 0x90
    e08e:	f105 0190 	add.w	r1, r5, #144	; 0x90
    e092:	f104 0090 	add.w	r0, r4, #144	; 0x90
    e096:	f7fe fe43 	bl	cd20 <add_mod_n>
    e09a:	f8cd 8000 	str.w	r8, [sp]
    e09e:	463b      	mov	r3, r7
    e0a0:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
    e0a4:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
    e0a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e0ac:	f7fe fe38 	bl	cd20 <add_mod_n>
    e0b0:	f8cd 8000 	str.w	r8, [sp]
    e0b4:	463b      	mov	r3, r7
    e0b6:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
    e0ba:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    e0be:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    e0c2:	f7fe fe2d 	bl	cd20 <add_mod_n>
    e0c6:	b002      	add	sp, #8
    e0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e0cc:	00024108 	.word	0x00024108

0000e0d0 <POINTonE1_add_affine>:
    e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0d4:	b0e5      	sub	sp, #404	; 0x194
    e0d6:	9003      	str	r0, [sp, #12]
    e0d8:	460d      	mov	r5, r1
    e0da:	4692      	mov	sl, r2
    e0dc:	f101 0b60 	add.w	fp, r1, #96	; 0x60
    e0e0:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    e0e4:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    e0e8:	2200      	movs	r2, #0
    e0ea:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e0ee:	430a      	orrs	r2, r1
    e0f0:	4283      	cmp	r3, r0
    e0f2:	d1fa      	bne.n	e0ea <POINTonE1_add_affine+0x1a>
    e0f4:	1e56      	subs	r6, r2, #1
    e0f6:	ea26 0602 	bic.w	r6, r6, r2
    e0fa:	0ff6      	lsrs	r6, r6, #31
    e0fc:	4c88      	ldr	r4, [pc, #544]	; (e320 <POINTonE1_add_affine+0x250>)
    e0fe:	f04f 080c 	mov.w	r8, #12
    e102:	f8cd 8004 	str.w	r8, [sp, #4]
    e106:	4f87      	ldr	r7, [pc, #540]	; (e324 <POINTonE1_add_affine+0x254>)
    e108:	9700      	str	r7, [sp, #0]
    e10a:	4623      	mov	r3, r4
    e10c:	465a      	mov	r2, fp
    e10e:	4659      	mov	r1, fp
    e110:	a834      	add	r0, sp, #208	; 0xd0
    e112:	f7fe fc5d 	bl	c9d0 <mul_mont_n>
    e116:	f8cd 8004 	str.w	r8, [sp, #4]
    e11a:	9700      	str	r7, [sp, #0]
    e11c:	4623      	mov	r3, r4
    e11e:	465a      	mov	r2, fp
    e120:	a934      	add	r1, sp, #208	; 0xd0
    e122:	a858      	add	r0, sp, #352	; 0x160
    e124:	f7fe fc54 	bl	c9d0 <mul_mont_n>
    e128:	f8cd 8004 	str.w	r8, [sp, #4]
    e12c:	9700      	str	r7, [sp, #0]
    e12e:	4623      	mov	r3, r4
    e130:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    e134:	a958      	add	r1, sp, #352	; 0x160
    e136:	4608      	mov	r0, r1
    e138:	f7fe fc4a 	bl	c9d0 <mul_mont_n>
    e13c:	f1aa 0804 	sub.w	r8, sl, #4
    e140:	f10a 005c 	add.w	r0, sl, #92	; 0x5c
    e144:	4643      	mov	r3, r8
    e146:	2200      	movs	r2, #0
    e148:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e14c:	430a      	orrs	r2, r1
    e14e:	4283      	cmp	r3, r0
    e150:	d1fa      	bne.n	e148 <POINTonE1_add_affine+0x78>
    e152:	1e53      	subs	r3, r2, #1
    e154:	ea23 0202 	bic.w	r2, r3, r2
    e158:	0fd3      	lsrs	r3, r2, #31
    e15a:	9302      	str	r3, [sp, #8]
    e15c:	4c70      	ldr	r4, [pc, #448]	; (e320 <POINTonE1_add_affine+0x250>)
    e15e:	270c      	movs	r7, #12
    e160:	9701      	str	r7, [sp, #4]
    e162:	f8df 91c0 	ldr.w	r9, [pc, #448]	; e324 <POINTonE1_add_affine+0x254>
    e166:	f8cd 9000 	str.w	r9, [sp]
    e16a:	4623      	mov	r3, r4
    e16c:	aa34      	add	r2, sp, #208	; 0xd0
    e16e:	4651      	mov	r1, sl
    e170:	a828      	add	r0, sp, #160	; 0xa0
    e172:	f7fe fc2d 	bl	c9d0 <mul_mont_n>
    e176:	9700      	str	r7, [sp, #0]
    e178:	4623      	mov	r3, r4
    e17a:	462a      	mov	r2, r5
    e17c:	a928      	add	r1, sp, #160	; 0xa0
    e17e:	4608      	mov	r0, r1
    e180:	f7fe fa78 	bl	c674 <sub_mod_n>
    e184:	9701      	str	r7, [sp, #4]
    e186:	f8cd 9000 	str.w	r9, [sp]
    e18a:	4623      	mov	r3, r4
    e18c:	aa28      	add	r2, sp, #160	; 0xa0
    e18e:	4611      	mov	r1, r2
    e190:	a81c      	add	r0, sp, #112	; 0x70
    e192:	f7fe fc1d 	bl	c9d0 <mul_mont_n>
    e196:	9700      	str	r7, [sp, #0]
    e198:	4623      	mov	r3, r4
    e19a:	aa1c      	add	r2, sp, #112	; 0x70
    e19c:	4611      	mov	r1, r2
    e19e:	a810      	add	r0, sp, #64	; 0x40
    e1a0:	f7fe fdbe 	bl	cd20 <add_mod_n>
    e1a4:	9700      	str	r7, [sp, #0]
    e1a6:	4623      	mov	r3, r4
    e1a8:	aa10      	add	r2, sp, #64	; 0x40
    e1aa:	4611      	mov	r1, r2
    e1ac:	4610      	mov	r0, r2
    e1ae:	f7fe fdb7 	bl	cd20 <add_mod_n>
    e1b2:	9701      	str	r7, [sp, #4]
    e1b4:	f8cd 9000 	str.w	r9, [sp]
    e1b8:	4623      	mov	r3, r4
    e1ba:	aa10      	add	r2, sp, #64	; 0x40
    e1bc:	4629      	mov	r1, r5
    e1be:	a84c      	add	r0, sp, #304	; 0x130
    e1c0:	f7fe fc06 	bl	c9d0 <mul_mont_n>
    e1c4:	9701      	str	r7, [sp, #4]
    e1c6:	f8cd 9000 	str.w	r9, [sp]
    e1ca:	4623      	mov	r3, r4
    e1cc:	aa10      	add	r2, sp, #64	; 0x40
    e1ce:	a928      	add	r1, sp, #160	; 0xa0
    e1d0:	a804      	add	r0, sp, #16
    e1d2:	f7fe fbfd 	bl	c9d0 <mul_mont_n>
    e1d6:	f105 0a30 	add.w	sl, r5, #48	; 0x30
    e1da:	9701      	str	r7, [sp, #4]
    e1dc:	f8cd 9000 	str.w	r9, [sp]
    e1e0:	4623      	mov	r3, r4
    e1e2:	4652      	mov	r2, sl
    e1e4:	a904      	add	r1, sp, #16
    e1e6:	a810      	add	r0, sp, #64	; 0x40
    e1e8:	f7fe fbf2 	bl	c9d0 <mul_mont_n>
    e1ec:	9700      	str	r7, [sp, #0]
    e1ee:	4623      	mov	r3, r4
    e1f0:	4652      	mov	r2, sl
    e1f2:	a958      	add	r1, sp, #352	; 0x160
    e1f4:	4608      	mov	r0, r1
    e1f6:	f7fe fa3d 	bl	c674 <sub_mod_n>
    e1fa:	9700      	str	r7, [sp, #0]
    e1fc:	4623      	mov	r3, r4
    e1fe:	aa58      	add	r2, sp, #352	; 0x160
    e200:	4611      	mov	r1, r2
    e202:	4610      	mov	r0, r2
    e204:	f7fe fd8c 	bl	cd20 <add_mod_n>
    e208:	9701      	str	r7, [sp, #4]
    e20a:	f8cd 9000 	str.w	r9, [sp]
    e20e:	4623      	mov	r3, r4
    e210:	aa58      	add	r2, sp, #352	; 0x160
    e212:	4611      	mov	r1, r2
    e214:	a840      	add	r0, sp, #256	; 0x100
    e216:	f7fe fbdb 	bl	c9d0 <mul_mont_n>
    e21a:	9700      	str	r7, [sp, #0]
    e21c:	4623      	mov	r3, r4
    e21e:	aa04      	add	r2, sp, #16
    e220:	a940      	add	r1, sp, #256	; 0x100
    e222:	4608      	mov	r0, r1
    e224:	f7fe fa26 	bl	c674 <sub_mod_n>
    e228:	9700      	str	r7, [sp, #0]
    e22a:	4623      	mov	r3, r4
    e22c:	aa4c      	add	r2, sp, #304	; 0x130
    e22e:	a940      	add	r1, sp, #256	; 0x100
    e230:	4608      	mov	r0, r1
    e232:	f7fe fa1f 	bl	c674 <sub_mod_n>
    e236:	9700      	str	r7, [sp, #0]
    e238:	4623      	mov	r3, r4
    e23a:	aa4c      	add	r2, sp, #304	; 0x130
    e23c:	a940      	add	r1, sp, #256	; 0x100
    e23e:	4608      	mov	r0, r1
    e240:	f7fe fa18 	bl	c674 <sub_mod_n>
    e244:	9700      	str	r7, [sp, #0]
    e246:	4623      	mov	r3, r4
    e248:	aa40      	add	r2, sp, #256	; 0x100
    e24a:	a94c      	add	r1, sp, #304	; 0x130
    e24c:	4608      	mov	r0, r1
    e24e:	f7fe fa11 	bl	c674 <sub_mod_n>
    e252:	9701      	str	r7, [sp, #4]
    e254:	f8cd 9000 	str.w	r9, [sp]
    e258:	4623      	mov	r3, r4
    e25a:	aa58      	add	r2, sp, #352	; 0x160
    e25c:	a94c      	add	r1, sp, #304	; 0x130
    e25e:	4608      	mov	r0, r1
    e260:	f7fe fbb6 	bl	c9d0 <mul_mont_n>
    e264:	9700      	str	r7, [sp, #0]
    e266:	4623      	mov	r3, r4
    e268:	aa10      	add	r2, sp, #64	; 0x40
    e26a:	a94c      	add	r1, sp, #304	; 0x130
    e26c:	4608      	mov	r0, r1
    e26e:	f7fe fa01 	bl	c674 <sub_mod_n>
    e272:	9700      	str	r7, [sp, #0]
    e274:	4623      	mov	r3, r4
    e276:	aa10      	add	r2, sp, #64	; 0x40
    e278:	a94c      	add	r1, sp, #304	; 0x130
    e27a:	4608      	mov	r0, r1
    e27c:	f7fe f9fa 	bl	c674 <sub_mod_n>
    e280:	9700      	str	r7, [sp, #0]
    e282:	4623      	mov	r3, r4
    e284:	aa28      	add	r2, sp, #160	; 0xa0
    e286:	4659      	mov	r1, fp
    e288:	a858      	add	r0, sp, #352	; 0x160
    e28a:	f7fe fd49 	bl	cd20 <add_mod_n>
    e28e:	9701      	str	r7, [sp, #4]
    e290:	f8cd 9000 	str.w	r9, [sp]
    e294:	4623      	mov	r3, r4
    e296:	aa58      	add	r2, sp, #352	; 0x160
    e298:	4611      	mov	r1, r2
    e29a:	4610      	mov	r0, r2
    e29c:	f7fe fb98 	bl	c9d0 <mul_mont_n>
    e2a0:	9700      	str	r7, [sp, #0]
    e2a2:	4623      	mov	r3, r4
    e2a4:	aa34      	add	r2, sp, #208	; 0xd0
    e2a6:	a958      	add	r1, sp, #352	; 0x160
    e2a8:	4608      	mov	r0, r1
    e2aa:	f7fe f9e3 	bl	c674 <sub_mod_n>
    e2ae:	9700      	str	r7, [sp, #0]
    e2b0:	4623      	mov	r3, r4
    e2b2:	aa1c      	add	r2, sp, #112	; 0x70
    e2b4:	a958      	add	r1, sp, #352	; 0x160
    e2b6:	4608      	mov	r0, r1
    e2b8:	f7fe f9dc 	bl	c674 <sub_mod_n>
    e2bc:	4276      	negs	r6, r6
    e2be:	f104 0190 	add.w	r1, r4, #144	; 0x90
    e2c2:	aa57      	add	r2, sp, #348	; 0x15c
    e2c4:	34c0      	adds	r4, #192	; 0xc0
    e2c6:	f851 3b04 	ldr.w	r3, [r1], #4
    e2ca:	f852 0f04 	ldr.w	r0, [r2, #4]!
    e2ce:	4043      	eors	r3, r0
    e2d0:	4033      	ands	r3, r6
    e2d2:	4043      	eors	r3, r0
    e2d4:	6013      	str	r3, [r2, #0]
    e2d6:	42a1      	cmp	r1, r4
    e2d8:	d1f5      	bne.n	e2c6 <POINTonE1_add_affine+0x1f6>
    e2da:	aa40      	add	r2, sp, #256	; 0x100
    e2dc:	ac58      	add	r4, sp, #352	; 0x160
    e2de:	4611      	mov	r1, r2
    e2e0:	6808      	ldr	r0, [r1, #0]
    e2e2:	f858 3f04 	ldr.w	r3, [r8, #4]!
    e2e6:	4043      	eors	r3, r0
    e2e8:	4033      	ands	r3, r6
    e2ea:	4043      	eors	r3, r0
    e2ec:	f841 3b04 	str.w	r3, [r1], #4
    e2f0:	42a1      	cmp	r1, r4
    e2f2:	d1f5      	bne.n	e2e0 <POINTonE1_add_affine+0x210>
    e2f4:	9b02      	ldr	r3, [sp, #8]
    e2f6:	425c      	negs	r4, r3
    e2f8:	3d04      	subs	r5, #4
    e2fa:	9b03      	ldr	r3, [sp, #12]
    e2fc:	1f18      	subs	r0, r3, #4
    e2fe:	f102 0690 	add.w	r6, r2, #144	; 0x90
    e302:	f852 1b04 	ldr.w	r1, [r2], #4
    e306:	f855 3f04 	ldr.w	r3, [r5, #4]!
    e30a:	404b      	eors	r3, r1
    e30c:	4023      	ands	r3, r4
    e30e:	404b      	eors	r3, r1
    e310:	f840 3f04 	str.w	r3, [r0, #4]!
    e314:	42b2      	cmp	r2, r6
    e316:	d1f4      	bne.n	e302 <POINTonE1_add_affine+0x232>
    e318:	b065      	add	sp, #404	; 0x194
    e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e31e:	bf00      	nop
    e320:	00024108 	.word	0x00024108
    e324:	fffcfffd 	.word	0xfffcfffd

0000e328 <POINTonE1_Deserialize_BE>:
    e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e32c:	b0a6      	sub	sp, #152	; 0x98
    e32e:	4604      	mov	r4, r0
    e330:	f101 0230 	add.w	r2, r1, #48	; 0x30
    e334:	4608      	mov	r0, r1
    e336:	2500      	movs	r5, #0
    e338:	f101 072f 	add.w	r7, r1, #47	; 0x2f
    e33c:	1a3b      	subs	r3, r7, r0
    e33e:	f810 6b01 	ldrb.w	r6, [r0], #1
    e342:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    e346:	f023 0303 	bic.w	r3, r3, #3
    e34a:	ae26      	add	r6, sp, #152	; 0x98
    e34c:	4433      	add	r3, r6
    e34e:	f843 5c60 	str.w	r5, [r3, #-96]
    e352:	4290      	cmp	r0, r2
    e354:	d1f2      	bne.n	e33c <POINTonE1_Deserialize_BE+0x14>
    e356:	f101 0660 	add.w	r6, r1, #96	; 0x60
    e35a:	2000      	movs	r0, #0
    e35c:	315f      	adds	r1, #95	; 0x5f
    e35e:	1a8b      	subs	r3, r1, r2
    e360:	f812 5b01 	ldrb.w	r5, [r2], #1
    e364:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
    e368:	f023 0303 	bic.w	r3, r3, #3
    e36c:	ad26      	add	r5, sp, #152	; 0x98
    e36e:	442b      	add	r3, r5
    e370:	f843 0c30 	str.w	r0, [r3, #-48]
    e374:	42b2      	cmp	r2, r6
    e376:	d1f2      	bne.n	e35e <POINTonE1_Deserialize_BE+0x36>
    e378:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e37a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    e37e:	9319      	str	r3, [sp, #100]	; 0x64
    e380:	4b38      	ldr	r3, [pc, #224]	; (e464 <POINTonE1_Deserialize_BE+0x13c>)
    e382:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    e386:	220c      	movs	r2, #12
    e388:	9200      	str	r2, [sp, #0]
    e38a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    e38e:	4641      	mov	r1, r8
    e390:	a802      	add	r0, sp, #8
    e392:	f7fe fcc5 	bl	cd20 <add_mod_n>
    e396:	ae02      	add	r6, sp, #8
    e398:	46c2      	mov	sl, r8
    e39a:	4645      	mov	r5, r8
    e39c:	4641      	mov	r1, r8
    e39e:	4632      	mov	r2, r6
    e3a0:	2000      	movs	r0, #0
    e3a2:	f852 3b04 	ldr.w	r3, [r2], #4
    e3a6:	f851 7b04 	ldr.w	r7, [r1], #4
    e3aa:	407b      	eors	r3, r7
    e3ac:	4318      	orrs	r0, r3
    e3ae:	42aa      	cmp	r2, r5
    e3b0:	d1f7      	bne.n	e3a2 <POINTonE1_Deserialize_BE+0x7a>
    e3b2:	1e43      	subs	r3, r0, #1
    e3b4:	4383      	bics	r3, r0
    e3b6:	d403      	bmi.n	e3c0 <POINTonE1_Deserialize_BE+0x98>
    e3b8:	2001      	movs	r0, #1
    e3ba:	b026      	add	sp, #152	; 0x98
    e3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3c0:	4b28      	ldr	r3, [pc, #160]	; (e464 <POINTonE1_Deserialize_BE+0x13c>)
    e3c2:	220c      	movs	r2, #12
    e3c4:	9200      	str	r2, [sp, #0]
    e3c6:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
    e3ca:	a91a      	add	r1, sp, #104	; 0x68
    e3cc:	a802      	add	r0, sp, #8
    e3ce:	f7fe fca7 	bl	cd20 <add_mod_n>
    e3d2:	a919      	add	r1, sp, #100	; 0x64
    e3d4:	2200      	movs	r2, #0
    e3d6:	f856 3b04 	ldr.w	r3, [r6], #4
    e3da:	f851 0f04 	ldr.w	r0, [r1, #4]!
    e3de:	4043      	eors	r3, r0
    e3e0:	431a      	orrs	r2, r3
    e3e2:	42ae      	cmp	r6, r5
    e3e4:	d1f7      	bne.n	e3d6 <POINTonE1_Deserialize_BE+0xae>
    e3e6:	1e53      	subs	r3, r2, #1
    e3e8:	4393      	bics	r3, r2
    e3ea:	d401      	bmi.n	e3f0 <POINTonE1_Deserialize_BE+0xc8>
    e3ec:	2001      	movs	r0, #1
    e3ee:	e7e4      	b.n	e3ba <POINTonE1_Deserialize_BE+0x92>
    e3f0:	4d1c      	ldr	r5, [pc, #112]	; (e464 <POINTonE1_Deserialize_BE+0x13c>)
    e3f2:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
    e3f6:	f04f 090c 	mov.w	r9, #12
    e3fa:	f8cd 9004 	str.w	r9, [sp, #4]
    e3fe:	f8df 8068 	ldr.w	r8, [pc, #104]	; e468 <POINTonE1_Deserialize_BE+0x140>
    e402:	f8cd 8000 	str.w	r8, [sp]
    e406:	462b      	mov	r3, r5
    e408:	4632      	mov	r2, r6
    e40a:	a90e      	add	r1, sp, #56	; 0x38
    e40c:	4608      	mov	r0, r1
    e40e:	f7fe fadf 	bl	c9d0 <mul_mont_n>
    e412:	f8cd 9004 	str.w	r9, [sp, #4]
    e416:	f8cd 8000 	str.w	r8, [sp]
    e41a:	462b      	mov	r3, r5
    e41c:	4632      	mov	r2, r6
    e41e:	a91a      	add	r1, sp, #104	; 0x68
    e420:	4608      	mov	r0, r1
    e422:	f7fe fad5 	bl	c9d0 <mul_mont_n>
    e426:	a80e      	add	r0, sp, #56	; 0x38
    e428:	f7ff fabe 	bl	d9a8 <POINTonE1_affine_on_curve>
    e42c:	b1b8      	cbz	r0, e45e <POINTonE1_Deserialize_BE+0x136>
    e42e:	aa0d      	add	r2, sp, #52	; 0x34
    e430:	1f23      	subs	r3, r4, #4
    e432:	f10a 075c 	add.w	r7, sl, #92	; 0x5c
    e436:	4619      	mov	r1, r3
    e438:	f852 0f04 	ldr.w	r0, [r2, #4]!
    e43c:	f841 0f04 	str.w	r0, [r1, #4]!
    e440:	42ba      	cmp	r2, r7
    e442:	d1f9      	bne.n	e438 <POINTonE1_Deserialize_BE+0x110>
    e444:	342c      	adds	r4, #44	; 0x2c
    e446:	2200      	movs	r2, #0
    e448:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e44c:	430a      	orrs	r2, r1
    e44e:	42a3      	cmp	r3, r4
    e450:	d1fa      	bne.n	e448 <POINTonE1_Deserialize_BE+0x120>
    e452:	1e53      	subs	r3, r2, #1
    e454:	4393      	bics	r3, r2
    e456:	bf4c      	ite	mi
    e458:	2003      	movmi	r0, #3
    e45a:	2000      	movpl	r0, #0
    e45c:	e7ad      	b.n	e3ba <POINTonE1_Deserialize_BE+0x92>
    e45e:	2002      	movs	r0, #2
    e460:	e7ab      	b.n	e3ba <POINTonE1_Deserialize_BE+0x92>
    e462:	bf00      	nop
    e464:	00024108 	.word	0x00024108
    e468:	fffcfffd 	.word	0xfffcfffd

0000e46c <POINTonE1_add>:
    e46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e470:	b0fd      	sub	sp, #500	; 0x1f4
    e472:	9003      	str	r0, [sp, #12]
    e474:	460f      	mov	r7, r1
    e476:	4616      	mov	r6, r2
    e478:	f101 0a60 	add.w	sl, r1, #96	; 0x60
    e47c:	f101 035c 	add.w	r3, r1, #92	; 0x5c
    e480:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    e484:	2200      	movs	r2, #0
    e486:	f853 1f04 	ldr.w	r1, [r3, #4]!
    e48a:	430a      	orrs	r2, r1
    e48c:	4283      	cmp	r3, r0
    e48e:	d1fa      	bne.n	e486 <POINTonE1_add+0x1a>
    e490:	1e53      	subs	r3, r2, #1
    e492:	ea23 0202 	bic.w	r2, r3, r2
    e496:	0fd3      	lsrs	r3, r2, #31
    e498:	9302      	str	r3, [sp, #8]
    e49a:	4c95      	ldr	r4, [pc, #596]	; (e6f0 <POINTonE1_add+0x284>)
    e49c:	f04f 080c 	mov.w	r8, #12
    e4a0:	f8cd 8004 	str.w	r8, [sp, #4]
    e4a4:	4d93      	ldr	r5, [pc, #588]	; (e6f4 <POINTonE1_add+0x288>)
    e4a6:	9500      	str	r5, [sp, #0]
    e4a8:	4623      	mov	r3, r4
    e4aa:	4652      	mov	r2, sl
    e4ac:	4651      	mov	r1, sl
    e4ae:	a84c      	add	r0, sp, #304	; 0x130
    e4b0:	f7fe fa8e 	bl	c9d0 <mul_mont_n>
    e4b4:	f8cd 8004 	str.w	r8, [sp, #4]
    e4b8:	9500      	str	r5, [sp, #0]
    e4ba:	4623      	mov	r3, r4
    e4bc:	4652      	mov	r2, sl
    e4be:	a94c      	add	r1, sp, #304	; 0x130
    e4c0:	a870      	add	r0, sp, #448	; 0x1c0
    e4c2:	f7fe fa85 	bl	c9d0 <mul_mont_n>
    e4c6:	f8cd 8004 	str.w	r8, [sp, #4]
    e4ca:	9500      	str	r5, [sp, #0]
    e4cc:	4623      	mov	r3, r4
    e4ce:	f106 0230 	add.w	r2, r6, #48	; 0x30
    e4d2:	a970      	add	r1, sp, #448	; 0x1c0
    e4d4:	4608      	mov	r0, r1
    e4d6:	f7fe fa7b 	bl	c9d0 <mul_mont_n>
    e4da:	f106 0b60 	add.w	fp, r6, #96	; 0x60
    e4de:	f106 035c 	add.w	r3, r6, #92	; 0x5c
    e4e2:	f106 018c 	add.w	r1, r6, #140	; 0x8c
    e4e6:	f04f 0800 	mov.w	r8, #0
    e4ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
    e4ee:	ea48 0802 	orr.w	r8, r8, r2
    e4f2:	428b      	cmp	r3, r1
    e4f4:	d1f9      	bne.n	e4ea <POINTonE1_add+0x7e>
    e4f6:	4c7e      	ldr	r4, [pc, #504]	; (e6f0 <POINTonE1_add+0x284>)
    e4f8:	250c      	movs	r5, #12
    e4fa:	9501      	str	r5, [sp, #4]
    e4fc:	f8df 91f4 	ldr.w	r9, [pc, #500]	; e6f4 <POINTonE1_add+0x288>
    e500:	f8cd 9000 	str.w	r9, [sp]
    e504:	4623      	mov	r3, r4
    e506:	465a      	mov	r2, fp
    e508:	4659      	mov	r1, fp
    e50a:	a840      	add	r0, sp, #256	; 0x100
    e50c:	f7fe fa60 	bl	c9d0 <mul_mont_n>
    e510:	9501      	str	r5, [sp, #4]
    e512:	f8cd 9000 	str.w	r9, [sp]
    e516:	4623      	mov	r3, r4
    e518:	465a      	mov	r2, fp
    e51a:	a940      	add	r1, sp, #256	; 0x100
    e51c:	a828      	add	r0, sp, #160	; 0xa0
    e51e:	f7fe fa57 	bl	c9d0 <mul_mont_n>
    e522:	9501      	str	r5, [sp, #4]
    e524:	f8cd 9000 	str.w	r9, [sp]
    e528:	4623      	mov	r3, r4
    e52a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    e52e:	a928      	add	r1, sp, #160	; 0xa0
    e530:	4608      	mov	r0, r1
    e532:	f7fe fa4d 	bl	c9d0 <mul_mont_n>
    e536:	9500      	str	r5, [sp, #0]
    e538:	4623      	mov	r3, r4
    e53a:	aa28      	add	r2, sp, #160	; 0xa0
    e53c:	a970      	add	r1, sp, #448	; 0x1c0
    e53e:	4608      	mov	r0, r1
    e540:	f7fe f898 	bl	c674 <sub_mod_n>
    e544:	9500      	str	r5, [sp, #0]
    e546:	4623      	mov	r3, r4
    e548:	aa70      	add	r2, sp, #448	; 0x1c0
    e54a:	4611      	mov	r1, r2
    e54c:	4610      	mov	r0, r2
    e54e:	f7fe fbe7 	bl	cd20 <add_mod_n>
    e552:	9501      	str	r5, [sp, #4]
    e554:	f8cd 9000 	str.w	r9, [sp]
    e558:	4623      	mov	r3, r4
    e55a:	aa40      	add	r2, sp, #256	; 0x100
    e55c:	4639      	mov	r1, r7
    e55e:	a834      	add	r0, sp, #208	; 0xd0
    e560:	f7fe fa36 	bl	c9d0 <mul_mont_n>
    e564:	9501      	str	r5, [sp, #4]
    e566:	f8cd 9000 	str.w	r9, [sp]
    e56a:	4623      	mov	r3, r4
    e56c:	aa4c      	add	r2, sp, #304	; 0x130
    e56e:	4631      	mov	r1, r6
    e570:	a81c      	add	r0, sp, #112	; 0x70
    e572:	f7fe fa2d 	bl	c9d0 <mul_mont_n>
    e576:	9500      	str	r5, [sp, #0]
    e578:	4623      	mov	r3, r4
    e57a:	aa34      	add	r2, sp, #208	; 0xd0
    e57c:	a91c      	add	r1, sp, #112	; 0x70
    e57e:	4608      	mov	r0, r1
    e580:	f7fe f878 	bl	c674 <sub_mod_n>
    e584:	9500      	str	r5, [sp, #0]
    e586:	4623      	mov	r3, r4
    e588:	aa1c      	add	r2, sp, #112	; 0x70
    e58a:	4611      	mov	r1, r2
    e58c:	a810      	add	r0, sp, #64	; 0x40
    e58e:	f7fe fbc7 	bl	cd20 <add_mod_n>
    e592:	9501      	str	r5, [sp, #4]
    e594:	f8cd 9000 	str.w	r9, [sp]
    e598:	4623      	mov	r3, r4
    e59a:	aa10      	add	r2, sp, #64	; 0x40
    e59c:	4611      	mov	r1, r2
    e59e:	4610      	mov	r0, r2
    e5a0:	f7fe fa16 	bl	c9d0 <mul_mont_n>
    e5a4:	9501      	str	r5, [sp, #4]
    e5a6:	f8cd 9000 	str.w	r9, [sp]
    e5aa:	4623      	mov	r3, r4
    e5ac:	aa10      	add	r2, sp, #64	; 0x40
    e5ae:	a91c      	add	r1, sp, #112	; 0x70
    e5b0:	a804      	add	r0, sp, #16
    e5b2:	f7fe fa0d 	bl	c9d0 <mul_mont_n>
    e5b6:	9501      	str	r5, [sp, #4]
    e5b8:	f8cd 9000 	str.w	r9, [sp]
    e5bc:	4623      	mov	r3, r4
    e5be:	aa04      	add	r2, sp, #16
    e5c0:	a928      	add	r1, sp, #160	; 0xa0
    e5c2:	4608      	mov	r0, r1
    e5c4:	f7fe fa04 	bl	c9d0 <mul_mont_n>
    e5c8:	9501      	str	r5, [sp, #4]
    e5ca:	f8cd 9000 	str.w	r9, [sp]
    e5ce:	4623      	mov	r3, r4
    e5d0:	aa10      	add	r2, sp, #64	; 0x40
    e5d2:	a934      	add	r1, sp, #208	; 0xd0
    e5d4:	a864      	add	r0, sp, #400	; 0x190
    e5d6:	f7fe f9fb 	bl	c9d0 <mul_mont_n>
    e5da:	9501      	str	r5, [sp, #4]
    e5dc:	f8cd 9000 	str.w	r9, [sp]
    e5e0:	4623      	mov	r3, r4
    e5e2:	aa70      	add	r2, sp, #448	; 0x1c0
    e5e4:	4611      	mov	r1, r2
    e5e6:	a858      	add	r0, sp, #352	; 0x160
    e5e8:	f7fe f9f2 	bl	c9d0 <mul_mont_n>
    e5ec:	9500      	str	r5, [sp, #0]
    e5ee:	4623      	mov	r3, r4
    e5f0:	aa04      	add	r2, sp, #16
    e5f2:	a958      	add	r1, sp, #352	; 0x160
    e5f4:	4608      	mov	r0, r1
    e5f6:	f7fe f83d 	bl	c674 <sub_mod_n>
    e5fa:	9500      	str	r5, [sp, #0]
    e5fc:	4623      	mov	r3, r4
    e5fe:	aa64      	add	r2, sp, #400	; 0x190
    e600:	a958      	add	r1, sp, #352	; 0x160
    e602:	4608      	mov	r0, r1
    e604:	f7fe f836 	bl	c674 <sub_mod_n>
    e608:	9500      	str	r5, [sp, #0]
    e60a:	4623      	mov	r3, r4
    e60c:	aa64      	add	r2, sp, #400	; 0x190
    e60e:	a958      	add	r1, sp, #352	; 0x160
    e610:	4608      	mov	r0, r1
    e612:	f7fe f82f 	bl	c674 <sub_mod_n>
    e616:	9500      	str	r5, [sp, #0]
    e618:	4623      	mov	r3, r4
    e61a:	aa58      	add	r2, sp, #352	; 0x160
    e61c:	a964      	add	r1, sp, #400	; 0x190
    e61e:	4608      	mov	r0, r1
    e620:	f7fe f828 	bl	c674 <sub_mod_n>
    e624:	9501      	str	r5, [sp, #4]
    e626:	f8cd 9000 	str.w	r9, [sp]
    e62a:	4623      	mov	r3, r4
    e62c:	aa70      	add	r2, sp, #448	; 0x1c0
    e62e:	a964      	add	r1, sp, #400	; 0x190
    e630:	4608      	mov	r0, r1
    e632:	f7fe f9cd 	bl	c9d0 <mul_mont_n>
    e636:	9500      	str	r5, [sp, #0]
    e638:	4623      	mov	r3, r4
    e63a:	aa28      	add	r2, sp, #160	; 0xa0
    e63c:	a964      	add	r1, sp, #400	; 0x190
    e63e:	4608      	mov	r0, r1
    e640:	f7fe f818 	bl	c674 <sub_mod_n>
    e644:	9500      	str	r5, [sp, #0]
    e646:	4623      	mov	r3, r4
    e648:	aa28      	add	r2, sp, #160	; 0xa0
    e64a:	a964      	add	r1, sp, #400	; 0x190
    e64c:	4608      	mov	r0, r1
    e64e:	f7fe f811 	bl	c674 <sub_mod_n>
    e652:	9500      	str	r5, [sp, #0]
    e654:	4623      	mov	r3, r4
    e656:	465a      	mov	r2, fp
    e658:	4651      	mov	r1, sl
    e65a:	a870      	add	r0, sp, #448	; 0x1c0
    e65c:	f7fe fb60 	bl	cd20 <add_mod_n>
    e660:	9501      	str	r5, [sp, #4]
    e662:	f8cd 9000 	str.w	r9, [sp]
    e666:	4623      	mov	r3, r4
    e668:	aa70      	add	r2, sp, #448	; 0x1c0
    e66a:	4611      	mov	r1, r2
    e66c:	4610      	mov	r0, r2
    e66e:	f7fe f9af 	bl	c9d0 <mul_mont_n>
    e672:	9500      	str	r5, [sp, #0]
    e674:	4623      	mov	r3, r4
    e676:	aa4c      	add	r2, sp, #304	; 0x130
    e678:	a970      	add	r1, sp, #448	; 0x1c0
    e67a:	4608      	mov	r0, r1
    e67c:	f7fd fffa 	bl	c674 <sub_mod_n>
    e680:	9500      	str	r5, [sp, #0]
    e682:	4623      	mov	r3, r4
    e684:	aa40      	add	r2, sp, #256	; 0x100
    e686:	a970      	add	r1, sp, #448	; 0x1c0
    e688:	4608      	mov	r0, r1
    e68a:	f7fd fff3 	bl	c674 <sub_mod_n>
    e68e:	9501      	str	r5, [sp, #4]
    e690:	f8cd 9000 	str.w	r9, [sp]
    e694:	4623      	mov	r3, r4
    e696:	aa1c      	add	r2, sp, #112	; 0x70
    e698:	a970      	add	r1, sp, #448	; 0x1c0
    e69a:	4608      	mov	r0, r1
    e69c:	f7fe f998 	bl	c9d0 <mul_mont_n>
    e6a0:	f108 33ff 	add.w	r3, r8, #4294967295
    e6a4:	ea23 0808 	bic.w	r8, r3, r8
    e6a8:	ea4f 78e8 	mov.w	r8, r8, asr #31
    e6ac:	3f04      	subs	r7, #4
    e6ae:	ac58      	add	r4, sp, #352	; 0x160
    e6b0:	ad7c      	add	r5, sp, #496	; 0x1f0
    e6b2:	4622      	mov	r2, r4
    e6b4:	6811      	ldr	r1, [r2, #0]
    e6b6:	f857 3f04 	ldr.w	r3, [r7, #4]!
    e6ba:	404b      	eors	r3, r1
    e6bc:	ea03 0308 	and.w	r3, r3, r8
    e6c0:	404b      	eors	r3, r1
    e6c2:	f842 3b04 	str.w	r3, [r2], #4
    e6c6:	42aa      	cmp	r2, r5
    e6c8:	d1f4      	bne.n	e6b4 <POINTonE1_add+0x248>
    e6ca:	9b02      	ldr	r3, [sp, #8]
    e6cc:	425a      	negs	r2, r3
    e6ce:	3e04      	subs	r6, #4
    e6d0:	9b03      	ldr	r3, [sp, #12]
    e6d2:	1f18      	subs	r0, r3, #4
    e6d4:	f854 1b04 	ldr.w	r1, [r4], #4
    e6d8:	f856 3f04 	ldr.w	r3, [r6, #4]!
    e6dc:	404b      	eors	r3, r1
    e6de:	4013      	ands	r3, r2
    e6e0:	404b      	eors	r3, r1
    e6e2:	f840 3f04 	str.w	r3, [r0, #4]!
    e6e6:	42ac      	cmp	r4, r5
    e6e8:	d1f4      	bne.n	e6d4 <POINTonE1_add+0x268>
    e6ea:	b07d      	add	sp, #500	; 0x1f4
    e6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6f0:	00024108 	.word	0x00024108
    e6f4:	fffcfffd 	.word	0xfffcfffd

0000e6f8 <POINTonE1_precompute_w4>:
    e6f8:	b570      	push	{r4, r5, r6, lr}
    e6fa:	4606      	mov	r6, r0
    e6fc:	1f0b      	subs	r3, r1, #4
    e6fe:	1f02      	subs	r2, r0, #4
    e700:	f101 008c 	add.w	r0, r1, #140	; 0x8c
    e704:	f853 4f04 	ldr.w	r4, [r3, #4]!
    e708:	f842 4f04 	str.w	r4, [r2, #4]!
    e70c:	4283      	cmp	r3, r0
    e70e:	d1f9      	bne.n	e704 <POINTonE1_precompute_w4+0xc>
    e710:	f106 0090 	add.w	r0, r6, #144	; 0x90
    e714:	f7ff fba6 	bl	de64 <POINTonE1_double>
    e718:	f506 7590 	add.w	r5, r6, #288	; 0x120
    e71c:	4634      	mov	r4, r6
    e71e:	f506 76d8 	add.w	r6, r6, #432	; 0x1b0
    e722:	4622      	mov	r2, r4
    e724:	3490      	adds	r4, #144	; 0x90
    e726:	4621      	mov	r1, r4
    e728:	4628      	mov	r0, r5
    e72a:	f7ff fe9f 	bl	e46c <POINTonE1_add>
    e72e:	4621      	mov	r1, r4
    e730:	f105 0090 	add.w	r0, r5, #144	; 0x90
    e734:	f7ff fb96 	bl	de64 <POINTonE1_double>
    e738:	f505 7590 	add.w	r5, r5, #288	; 0x120
    e73c:	42b4      	cmp	r4, r6
    e73e:	d1f0      	bne.n	e722 <POINTonE1_precompute_w4+0x2a>
    e740:	bd70      	pop	{r4, r5, r6, pc}

0000e742 <isogeny_map_to_E1>:
    e742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e746:	f2ad 6d6c 	subw	sp, sp, #1644	; 0x66c
    e74a:	4607      	mov	r7, r0
    e74c:	4688      	mov	r8, r1
    e74e:	f101 0960 	add.w	r9, r1, #96	; 0x60
    e752:	4cad      	ldr	r4, [pc, #692]	; (ea08 <isogeny_map_to_E1+0x2c6>)
    e754:	250c      	movs	r5, #12
    e756:	9501      	str	r5, [sp, #4]
    e758:	4eac      	ldr	r6, [pc, #688]	; (ea0c <isogeny_map_to_E1+0x2ca>)
    e75a:	9600      	str	r6, [sp, #0]
    e75c:	4623      	mov	r3, r4
    e75e:	464a      	mov	r2, r9
    e760:	4649      	mov	r1, r9
    e762:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
    e766:	f7fe f933 	bl	c9d0 <mul_mont_n>
    e76a:	9501      	str	r5, [sp, #4]
    e76c:	9600      	str	r6, [sp, #0]
    e76e:	4623      	mov	r3, r4
    e770:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    e774:	4611      	mov	r1, r2
    e776:	f50d 60c1 	add.w	r0, sp, #1544	; 0x608
    e77a:	f7fe f929 	bl	c9d0 <mul_mont_n>
    e77e:	9501      	str	r5, [sp, #4]
    e780:	9600      	str	r6, [sp, #0]
    e782:	4623      	mov	r3, r4
    e784:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    e788:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    e78c:	f50d 60bb 	add.w	r0, sp, #1496	; 0x5d8
    e790:	f7fe f91e 	bl	c9d0 <mul_mont_n>
    e794:	9501      	str	r5, [sp, #4]
    e796:	9600      	str	r6, [sp, #0]
    e798:	4623      	mov	r3, r4
    e79a:	f50d 62c1 	add.w	r2, sp, #1544	; 0x608
    e79e:	4611      	mov	r1, r2
    e7a0:	f50d 60b5 	add.w	r0, sp, #1448	; 0x5a8
    e7a4:	f7fe f914 	bl	c9d0 <mul_mont_n>
    e7a8:	9501      	str	r5, [sp, #4]
    e7aa:	9600      	str	r6, [sp, #0]
    e7ac:	4623      	mov	r3, r4
    e7ae:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    e7b2:	f50d 61c1 	add.w	r1, sp, #1544	; 0x608
    e7b6:	f50d 60af 	add.w	r0, sp, #1400	; 0x578
    e7ba:	f7fe f909 	bl	c9d0 <mul_mont_n>
    e7be:	9501      	str	r5, [sp, #4]
    e7c0:	9600      	str	r6, [sp, #0]
    e7c2:	4623      	mov	r3, r4
    e7c4:	f50d 62bb 	add.w	r2, sp, #1496	; 0x5d8
    e7c8:	4611      	mov	r1, r2
    e7ca:	f50d 60a9 	add.w	r0, sp, #1352	; 0x548
    e7ce:	f7fe f8ff 	bl	c9d0 <mul_mont_n>
    e7d2:	9501      	str	r5, [sp, #4]
    e7d4:	9600      	str	r6, [sp, #0]
    e7d6:	4623      	mov	r3, r4
    e7d8:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    e7dc:	f50d 61bb 	add.w	r1, sp, #1496	; 0x5d8
    e7e0:	f50d 60a3 	add.w	r0, sp, #1304	; 0x518
    e7e4:	f7fe f8f4 	bl	c9d0 <mul_mont_n>
    e7e8:	9501      	str	r5, [sp, #4]
    e7ea:	9600      	str	r6, [sp, #0]
    e7ec:	4623      	mov	r3, r4
    e7ee:	f50d 62b5 	add.w	r2, sp, #1448	; 0x5a8
    e7f2:	4611      	mov	r1, r2
    e7f4:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
    e7f8:	f7fe f8ea 	bl	c9d0 <mul_mont_n>
    e7fc:	9501      	str	r5, [sp, #4]
    e7fe:	9600      	str	r6, [sp, #0]
    e800:	4623      	mov	r3, r4
    e802:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    e806:	f50d 61b5 	add.w	r1, sp, #1448	; 0x5a8
    e80a:	f50d 6097 	add.w	r0, sp, #1208	; 0x4b8
    e80e:	f7fe f8df 	bl	c9d0 <mul_mont_n>
    e812:	9501      	str	r5, [sp, #4]
    e814:	9600      	str	r6, [sp, #0]
    e816:	4623      	mov	r3, r4
    e818:	f50d 62af 	add.w	r2, sp, #1400	; 0x578
    e81c:	4611      	mov	r1, r2
    e81e:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
    e822:	f7fe f8d5 	bl	c9d0 <mul_mont_n>
    e826:	9501      	str	r5, [sp, #4]
    e828:	9600      	str	r6, [sp, #0]
    e82a:	4623      	mov	r3, r4
    e82c:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    e830:	f50d 61af 	add.w	r1, sp, #1400	; 0x578
    e834:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
    e838:	f7fe f8ca 	bl	c9d0 <mul_mont_n>
    e83c:	9501      	str	r5, [sp, #4]
    e83e:	9600      	str	r6, [sp, #0]
    e840:	4623      	mov	r3, r4
    e842:	f50d 62a9 	add.w	r2, sp, #1352	; 0x548
    e846:	4611      	mov	r1, r2
    e848:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
    e84c:	f7fe f8c0 	bl	c9d0 <mul_mont_n>
    e850:	9501      	str	r5, [sp, #4]
    e852:	9600      	str	r6, [sp, #0]
    e854:	4623      	mov	r3, r4
    e856:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    e85a:	f50d 61a9 	add.w	r1, sp, #1352	; 0x548
    e85e:	a8fe      	add	r0, sp, #1016	; 0x3f8
    e860:	f7fe f8b6 	bl	c9d0 <mul_mont_n>
    e864:	9501      	str	r5, [sp, #4]
    e866:	9600      	str	r6, [sp, #0]
    e868:	4623      	mov	r3, r4
    e86a:	f50d 62a3 	add.w	r2, sp, #1304	; 0x518
    e86e:	4611      	mov	r1, r2
    e870:	a8f2      	add	r0, sp, #968	; 0x3c8
    e872:	f7fe f8ad 	bl	c9d0 <mul_mont_n>
    e876:	9501      	str	r5, [sp, #4]
    e878:	9600      	str	r6, [sp, #0]
    e87a:	4623      	mov	r3, r4
    e87c:	f50d 629d 	add.w	r2, sp, #1256	; 0x4e8
    e880:	f50d 61a3 	add.w	r1, sp, #1304	; 0x518
    e884:	a8e6      	add	r0, sp, #920	; 0x398
    e886:	f7fe f8a3 	bl	c9d0 <mul_mont_n>
    e88a:	230b      	movs	r3, #11
    e88c:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
    e890:	f504 7140 	add.w	r1, r4, #768	; 0x300
    e894:	a832      	add	r0, sp, #200	; 0xc8
    e896:	f7fe f991 	bl	cbbc <map_fp_times_Zz>
    e89a:	9501      	str	r5, [sp, #4]
    e89c:	9600      	str	r6, [sp, #0]
    e89e:	4623      	mov	r3, r4
    e8a0:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
    e8a4:	4641      	mov	r1, r8
    e8a6:	a826      	add	r0, sp, #152	; 0x98
    e8a8:	f7fe f892 	bl	c9d0 <mul_mont_n>
    e8ac:	9500      	str	r5, [sp, #0]
    e8ae:	4623      	mov	r3, r4
    e8b0:	aaaa      	add	r2, sp, #680	; 0x2a8
    e8b2:	a926      	add	r1, sp, #152	; 0x98
    e8b4:	4608      	mov	r0, r1
    e8b6:	f7fe fa33 	bl	cd20 <add_mod_n>
    e8ba:	230a      	movs	r3, #10
    e8bc:	aa32      	add	r2, sp, #200	; 0xc8
    e8be:	4641      	mov	r1, r8
    e8c0:	a826      	add	r0, sp, #152	; 0x98
    e8c2:	f7fe fa86 	bl	cdd2 <map_fp>
    e8c6:	230a      	movs	r3, #10
    e8c8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
    e8cc:	f504 61a8 	add.w	r1, r4, #1344	; 0x540
    e8d0:	a832      	add	r0, sp, #200	; 0xc8
    e8d2:	f7fe f973 	bl	cbbc <map_fp_times_Zz>
    e8d6:	9500      	str	r5, [sp, #0]
    e8d8:	4623      	mov	r3, r4
    e8da:	aa9e      	add	r2, sp, #632	; 0x278
    e8dc:	4641      	mov	r1, r8
    e8de:	a81a      	add	r0, sp, #104	; 0x68
    e8e0:	f7fe fa1e 	bl	cd20 <add_mod_n>
    e8e4:	2309      	movs	r3, #9
    e8e6:	aa32      	add	r2, sp, #200	; 0xc8
    e8e8:	4641      	mov	r1, r8
    e8ea:	a81a      	add	r0, sp, #104	; 0x68
    e8ec:	f7fe fa71 	bl	cdd2 <map_fp>
    e8f0:	9501      	str	r5, [sp, #4]
    e8f2:	9600      	str	r6, [sp, #0]
    e8f4:	4623      	mov	r3, r4
    e8f6:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    e8fa:	a91a      	add	r1, sp, #104	; 0x68
    e8fc:	4608      	mov	r0, r1
    e8fe:	f7fe f867 	bl	c9d0 <mul_mont_n>
    e902:	230f      	movs	r3, #15
    e904:	aae6      	add	r2, sp, #920	; 0x398
    e906:	f504 61e4 	add.w	r1, r4, #1824	; 0x720
    e90a:	a832      	add	r0, sp, #200	; 0xc8
    e90c:	f7fe f956 	bl	cbbc <map_fp_times_Zz>
    e910:	9501      	str	r5, [sp, #4]
    e912:	9600      	str	r6, [sp, #0]
    e914:	4623      	mov	r3, r4
    e916:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
    e91a:	4641      	mov	r1, r8
    e91c:	a80e      	add	r0, sp, #56	; 0x38
    e91e:	f7fe f857 	bl	c9d0 <mul_mont_n>
    e922:	9500      	str	r5, [sp, #0]
    e924:	4623      	mov	r3, r4
    e926:	aada      	add	r2, sp, #872	; 0x368
    e928:	a90e      	add	r1, sp, #56	; 0x38
    e92a:	4608      	mov	r0, r1
    e92c:	f7fe f9f8 	bl	cd20 <add_mod_n>
    e930:	230e      	movs	r3, #14
    e932:	aa32      	add	r2, sp, #200	; 0xc8
    e934:	4641      	mov	r1, r8
    e936:	a80e      	add	r0, sp, #56	; 0x38
    e938:	f7fe fa4b 	bl	cdd2 <map_fp>
    e93c:	9501      	str	r5, [sp, #4]
    e93e:	9600      	str	r6, [sp, #0]
    e940:	4623      	mov	r3, r4
    e942:	f108 0230 	add.w	r2, r8, #48	; 0x30
    e946:	a90e      	add	r1, sp, #56	; 0x38
    e948:	4608      	mov	r0, r1
    e94a:	f7fe f841 	bl	c9d0 <mul_mont_n>
    e94e:	230f      	movs	r3, #15
    e950:	aae6      	add	r2, sp, #920	; 0x398
    e952:	f504 6122 	add.w	r1, r4, #2592	; 0xa20
    e956:	a832      	add	r0, sp, #200	; 0xc8
    e958:	f7fe f930 	bl	cbbc <map_fp_times_Zz>
    e95c:	9500      	str	r5, [sp, #0]
    e95e:	4623      	mov	r3, r4
    e960:	aada      	add	r2, sp, #872	; 0x368
    e962:	4641      	mov	r1, r8
    e964:	a802      	add	r0, sp, #8
    e966:	f7fe f9db 	bl	cd20 <add_mod_n>
    e96a:	230e      	movs	r3, #14
    e96c:	aa32      	add	r2, sp, #200	; 0xc8
    e96e:	4641      	mov	r1, r8
    e970:	a802      	add	r0, sp, #8
    e972:	f7fe fa2e 	bl	cdd2 <map_fp>
    e976:	9501      	str	r5, [sp, #4]
    e978:	9600      	str	r6, [sp, #0]
    e97a:	4623      	mov	r3, r4
    e97c:	464a      	mov	r2, r9
    e97e:	f50d 61c7 	add.w	r1, sp, #1592	; 0x638
    e982:	4608      	mov	r0, r1
    e984:	f7fe f824 	bl	c9d0 <mul_mont_n>
    e988:	9501      	str	r5, [sp, #4]
    e98a:	9600      	str	r6, [sp, #0]
    e98c:	4623      	mov	r3, r4
    e98e:	f50d 62c7 	add.w	r2, sp, #1592	; 0x638
    e992:	a902      	add	r1, sp, #8
    e994:	4608      	mov	r0, r1
    e996:	f7fe f81b 	bl	c9d0 <mul_mont_n>
    e99a:	f107 0860 	add.w	r8, r7, #96	; 0x60
    e99e:	9501      	str	r5, [sp, #4]
    e9a0:	9600      	str	r6, [sp, #0]
    e9a2:	4623      	mov	r3, r4
    e9a4:	aa02      	add	r2, sp, #8
    e9a6:	a91a      	add	r1, sp, #104	; 0x68
    e9a8:	4640      	mov	r0, r8
    e9aa:	f7fe f811 	bl	c9d0 <mul_mont_n>
    e9ae:	9501      	str	r5, [sp, #4]
    e9b0:	9600      	str	r6, [sp, #0]
    e9b2:	4623      	mov	r3, r4
    e9b4:	aa02      	add	r2, sp, #8
    e9b6:	a926      	add	r1, sp, #152	; 0x98
    e9b8:	4638      	mov	r0, r7
    e9ba:	f7fe f809 	bl	c9d0 <mul_mont_n>
    e9be:	9501      	str	r5, [sp, #4]
    e9c0:	9600      	str	r6, [sp, #0]
    e9c2:	4623      	mov	r3, r4
    e9c4:	4642      	mov	r2, r8
    e9c6:	4639      	mov	r1, r7
    e9c8:	4638      	mov	r0, r7
    e9ca:	f7fe f801 	bl	c9d0 <mul_mont_n>
    e9ce:	3730      	adds	r7, #48	; 0x30
    e9d0:	9501      	str	r5, [sp, #4]
    e9d2:	9600      	str	r6, [sp, #0]
    e9d4:	4623      	mov	r3, r4
    e9d6:	4642      	mov	r2, r8
    e9d8:	4641      	mov	r1, r8
    e9da:	4638      	mov	r0, r7
    e9dc:	f7fd fff8 	bl	c9d0 <mul_mont_n>
    e9e0:	9501      	str	r5, [sp, #4]
    e9e2:	9600      	str	r6, [sp, #0]
    e9e4:	4623      	mov	r3, r4
    e9e6:	aa1a      	add	r2, sp, #104	; 0x68
    e9e8:	4639      	mov	r1, r7
    e9ea:	4638      	mov	r0, r7
    e9ec:	f7fd fff0 	bl	c9d0 <mul_mont_n>
    e9f0:	9501      	str	r5, [sp, #4]
    e9f2:	9600      	str	r6, [sp, #0]
    e9f4:	4623      	mov	r3, r4
    e9f6:	aa0e      	add	r2, sp, #56	; 0x38
    e9f8:	4639      	mov	r1, r7
    e9fa:	4638      	mov	r0, r7
    e9fc:	f7fd ffe8 	bl	c9d0 <mul_mont_n>
    ea00:	f20d 6d6c 	addw	sp, sp, #1644	; 0x66c
    ea04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ea08:	00024108 	.word	0x00024108
    ea0c:	fffcfffd 	.word	0xfffcfffd

0000ea10 <eucl_inverse_mod_n>:
    ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea14:	b089      	sub	sp, #36	; 0x24
    ea16:	af02      	add	r7, sp, #8
    ea18:	6038      	str	r0, [r7, #0]
    ea1a:	460c      	mov	r4, r1
    ea1c:	469c      	mov	ip, r3
    ea1e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
    ea20:	466b      	mov	r3, sp
    ea22:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
    ea26:	469d      	mov	sp, r3
    ea28:	ae02      	add	r6, sp, #8
    ea2a:	eba3 03c5 	sub.w	r3, r3, r5, lsl #3
    ea2e:	469d      	mov	sp, r3
    ea30:	ab02      	add	r3, sp, #8
    ea32:	613b      	str	r3, [r7, #16]
    ea34:	f035 4140 	bics.w	r1, r5, #3221225472	; 0xc0000000
    ea38:	d051      	beq.n	eade <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7e>
    ea3a:	4692      	mov	sl, r2
    ea3c:	1f22      	subs	r2, r4, #4
    ea3e:	008b      	lsls	r3, r1, #2
    ea40:	60bb      	str	r3, [r7, #8]
    ea42:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    ea46:	4613      	mov	r3, r2
    ea48:	2400      	movs	r4, #0
    ea4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
    ea4e:	4304      	orrs	r4, r0
    ea50:	428b      	cmp	r3, r1
    ea52:	d1fa      	bne.n	ea4a <eucl_inverse_mod_n+0x3a>
    ea54:	1e63      	subs	r3, r4, #1
    ea56:	ea23 0304 	bic.w	r3, r3, r4
    ea5a:	0fdb      	lsrs	r3, r3, #31
    ea5c:	60fb      	str	r3, [r7, #12]
    ea5e:	d135      	bne.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    ea60:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    ea64:	1f33      	subs	r3, r6, #4
    ea66:	f852 0f04 	ldr.w	r0, [r2, #4]!
    ea6a:	f843 0f04 	str.w	r0, [r3, #4]!
    ea6e:	428a      	cmp	r2, r1
    ea70:	d1f9      	bne.n	ea66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
    ea72:	f1bc 0f00 	cmp.w	ip, #0
    ea76:	d035      	beq.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
    ea78:	f1ac 0004 	sub.w	r0, ip, #4
    ea7c:	f1ab 0304 	sub.w	r3, fp, #4
    ea80:	4433      	add	r3, r6
    ea82:	68ba      	ldr	r2, [r7, #8]
    ea84:	1881      	adds	r1, r0, r2
    ea86:	f850 2f04 	ldr.w	r2, [r0, #4]!
    ea8a:	f843 2f04 	str.w	r2, [r3, #4]!
    ea8e:	4288      	cmp	r0, r1
    ea90:	d1f9      	bne.n	ea86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x26>
    ea92:	f1aa 0304 	sub.w	r3, sl, #4
    ea96:	693a      	ldr	r2, [r7, #16]
    ea98:	3a04      	subs	r2, #4
    ea9a:	68b9      	ldr	r1, [r7, #8]
    ea9c:	1858      	adds	r0, r3, r1
    ea9e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    eaa2:	f842 1f04 	str.w	r1, [r2, #4]!
    eaa6:	4283      	cmp	r3, r0
    eaa8:	d1f9      	bne.n	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    eaaa:	693b      	ldr	r3, [r7, #16]
    eaac:	eb03 000b 	add.w	r0, r3, fp
    eab0:	4603      	mov	r3, r0
    eab2:	68ba      	ldr	r2, [r7, #8]
    eab4:	1881      	adds	r1, r0, r2
    eab6:	2200      	movs	r2, #0
    eab8:	f843 2b04 	str.w	r2, [r3], #4
    eabc:	428b      	cmp	r3, r1
    eabe:	d1fb      	bne.n	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
    eac0:	f1ab 0304 	sub.w	r3, fp, #4
    eac4:	607b      	str	r3, [r7, #4]
    eac6:	f105 39ff 	add.w	r9, r5, #4294967295
    eaca:	e094      	b.n	ebf6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x196>
    eacc:	683a      	ldr	r2, [r7, #0]
    eace:	4613      	mov	r3, r2
    ead0:	68b9      	ldr	r1, [r7, #8]
    ead2:	4411      	add	r1, r2
    ead4:	2200      	movs	r2, #0
    ead6:	f843 2b04 	str.w	r2, [r3], #4
    eada:	428b      	cmp	r3, r1
    eadc:	d1fb      	bne.n	ead6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x76>
    eade:	683b      	ldr	r3, [r7, #0]
    eae0:	2400      	movs	r4, #0
    eae2:	e0a4      	b.n	ec2e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ce>
    eae4:	eb06 020b 	add.w	r2, r6, fp
    eae8:	4613      	mov	r3, r2
    eaea:	68b9      	ldr	r1, [r7, #8]
    eaec:	1850      	adds	r0, r2, r1
    eaee:	2100      	movs	r1, #0
    eaf0:	f843 1b04 	str.w	r1, [r3], #4
    eaf4:	4283      	cmp	r3, r0
    eaf6:	d1fb      	bne.n	eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>
    eaf8:	2301      	movs	r3, #1
    eafa:	6013      	str	r3, [r2, #0]
    eafc:	e7c9      	b.n	ea92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x32>
    eafe:	b175      	cbz	r5, eb1e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xbe>
    eb00:	6979      	ldr	r1, [r7, #20]
    eb02:	f1c2 0c20 	rsb	ip, r2, #32
    eb06:	4696      	mov	lr, r2
    eb08:	684a      	ldr	r2, [r1, #4]
    eb0a:	fa02 f00c 	lsl.w	r0, r2, ip
    eb0e:	4303      	orrs	r3, r0
    eb10:	f841 3b04 	str.w	r3, [r1], #4
    eb14:	fa22 f30e 	lsr.w	r3, r2, lr
    eb18:	42a1      	cmp	r1, r4
    eb1a:	d1f5      	bne.n	eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>
    eb1c:	4672      	mov	r2, lr
    eb1e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
    eb22:	f8cd 9000 	str.w	r9, [sp]
    eb26:	4653      	mov	r3, sl
    eb28:	4641      	mov	r1, r8
    eb2a:	4640      	mov	r0, r8
    eb2c:	f7fd fe0a 	bl	c744 <rshift_mod_n>
    eb30:	6831      	ldr	r1, [r6, #0]
    eb32:	f011 0f01 	tst.w	r1, #1
    eb36:	d10f      	bne.n	eb58 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xf8>
    eb38:	084b      	lsrs	r3, r1, #1
    eb3a:	f3c1 0240 	ubfx	r2, r1, #1, #1
    eb3e:	f011 0f02 	tst.w	r1, #2
    eb42:	d1dc      	bne.n	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    eb44:	088b      	lsrs	r3, r1, #2
    eb46:	2202      	movs	r2, #2
    eb48:	f013 0f01 	tst.w	r3, #1
    eb4c:	d1d7      	bne.n	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    eb4e:	3201      	adds	r2, #1
    eb50:	085b      	lsrs	r3, r3, #1
    eb52:	2a1f      	cmp	r2, #31
    eb54:	d1f8      	bne.n	eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>
    eb56:	e7d2      	b.n	eafe <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9e>
    eb58:	462b      	mov	r3, r5
    eb5a:	464d      	mov	r5, r9
    eb5c:	4699      	mov	r9, r3
    eb5e:	f1a6 0e04 	sub.w	lr, r6, #4
    eb62:	693b      	ldr	r3, [r7, #16]
    eb64:	f1a3 0c04 	sub.w	ip, r3, #4
    eb68:	68f8      	ldr	r0, [r7, #12]
    eb6a:	4602      	mov	r2, r0
    eb6c:	2400      	movs	r4, #0
    eb6e:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    eb72:	1a9b      	subs	r3, r3, r2
    eb74:	eb64 0204 	sbc.w	r2, r4, r4
    eb78:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    eb7c:	1a5b      	subs	r3, r3, r1
    eb7e:	f162 0200 	sbc.w	r2, r2, #0
    eb82:	f002 0201 	and.w	r2, r2, #1
    eb86:	3001      	adds	r0, #1
    eb88:	4285      	cmp	r5, r0
    eb8a:	d1f0      	bne.n	eb6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e>
    eb8c:	b112      	cbz	r2, eb94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x134>
    eb8e:	693b      	ldr	r3, [r7, #16]
    eb90:	613e      	str	r6, [r7, #16]
    eb92:	461e      	mov	r6, r3
    eb94:	1f31      	subs	r1, r6, #4
    eb96:	693b      	ldr	r3, [r7, #16]
    eb98:	f1a3 0e04 	sub.w	lr, r3, #4
    eb9c:	460c      	mov	r4, r1
    eb9e:	68f8      	ldr	r0, [r7, #12]
    eba0:	4680      	mov	r8, r0
    eba2:	f04f 0c00 	mov.w	ip, #0
    eba6:	f854 3f04 	ldr.w	r3, [r4, #4]!
    ebaa:	ebb3 0308 	subs.w	r3, r3, r8
    ebae:	eb6c 080c 	sbc.w	r8, ip, ip
    ebb2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    ebb6:	1a9b      	subs	r3, r3, r2
    ebb8:	f168 0800 	sbc.w	r8, r8, #0
    ebbc:	6023      	str	r3, [r4, #0]
    ebbe:	f008 0801 	and.w	r8, r8, #1
    ebc2:	3001      	adds	r0, #1
    ebc4:	4285      	cmp	r5, r0
    ebc6:	d8ee      	bhi.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    ebc8:	68bb      	ldr	r3, [r7, #8]
    ebca:	1f18      	subs	r0, r3, #4
    ebcc:	4430      	add	r0, r6
    ebce:	68fb      	ldr	r3, [r7, #12]
    ebd0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    ebd4:	4313      	orrs	r3, r2
    ebd6:	4281      	cmp	r1, r0
    ebd8:	d1fa      	bne.n	ebd0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x170>
    ebda:	1e5c      	subs	r4, r3, #1
    ebdc:	ea24 0303 	bic.w	r3, r4, r3
    ebe0:	0fdc      	lsrs	r4, r3, #31
    ebe2:	eb06 000b 	add.w	r0, r6, fp
    ebe6:	9500      	str	r5, [sp, #0]
    ebe8:	4653      	mov	r3, sl
    ebea:	693a      	ldr	r2, [r7, #16]
    ebec:	445a      	add	r2, fp
    ebee:	4601      	mov	r1, r0
    ebf0:	f7fd fd40 	bl	c674 <sub_mod_n>
    ebf4:	b964      	cbnz	r4, ec10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1b0>
    ebf6:	eb06 080b 	add.w	r8, r6, fp
    ebfa:	6831      	ldr	r1, [r6, #0]
    ebfc:	f011 0f01 	tst.w	r1, #1
    ec00:	d1ad      	bne.n	eb5e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfe>
    ec02:	617e      	str	r6, [r7, #20]
    ec04:	687b      	ldr	r3, [r7, #4]
    ec06:	199c      	adds	r4, r3, r6
    ec08:	464b      	mov	r3, r9
    ec0a:	46a9      	mov	r9, r5
    ec0c:	461d      	mov	r5, r3
    ec0e:	e793      	b.n	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
    ec10:	f1ab 0204 	sub.w	r2, fp, #4
    ec14:	693b      	ldr	r3, [r7, #16]
    ec16:	4413      	add	r3, r2
    ec18:	461a      	mov	r2, r3
    ec1a:	683b      	ldr	r3, [r7, #0]
    ec1c:	3b04      	subs	r3, #4
    ec1e:	68b8      	ldr	r0, [r7, #8]
    ec20:	4418      	add	r0, r3
    ec22:	f852 1f04 	ldr.w	r1, [r2, #4]!
    ec26:	f843 1f04 	str.w	r1, [r3, #4]!
    ec2a:	4298      	cmp	r0, r3
    ec2c:	d1f9      	bne.n	ec22 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c2>
    ec2e:	4620      	mov	r0, r4
    ec30:	371c      	adds	r7, #28
    ec32:	46bd      	mov	sp, r7
    ec34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ec38 <POINTonE1_dadd_affine>:
    ec38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec3c:	b0f3      	sub	sp, #460	; 0x1cc
    ec3e:	9005      	str	r0, [sp, #20]
    ec40:	460d      	mov	r5, r1
    ec42:	4614      	mov	r4, r2
    ec44:	1f17      	subs	r7, r2, #4
    ec46:	f102 005c 	add.w	r0, r2, #92	; 0x5c
    ec4a:	463b      	mov	r3, r7
    ec4c:	2200      	movs	r2, #0
    ec4e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ec52:	430a      	orrs	r2, r1
    ec54:	4283      	cmp	r3, r0
    ec56:	d1fa      	bne.n	ec4e <POINTonE1_dadd_affine+0x16>
    ec58:	1e53      	subs	r3, r2, #1
    ec5a:	ea23 0202 	bic.w	r2, r3, r2
    ec5e:	0fd3      	lsrs	r3, r2, #31
    ec60:	9304      	str	r3, [sp, #16]
    ec62:	4eac      	ldr	r6, [pc, #688]	; (ef14 <POINTonE1_dadd_affine+0x2dc>)
    ec64:	f04f 080c 	mov.w	r8, #12
    ec68:	f8cd 8000 	str.w	r8, [sp]
    ec6c:	4633      	mov	r3, r6
    ec6e:	4622      	mov	r2, r4
    ec70:	4621      	mov	r1, r4
    ec72:	a81e      	add	r0, sp, #120	; 0x78
    ec74:	f7fe f854 	bl	cd20 <add_mod_n>
    ec78:	f8cd 8004 	str.w	r8, [sp, #4]
    ec7c:	4ba6      	ldr	r3, [pc, #664]	; (ef18 <POINTonE1_dadd_affine+0x2e0>)
    ec7e:	9300      	str	r3, [sp, #0]
    ec80:	4633      	mov	r3, r6
    ec82:	4622      	mov	r2, r4
    ec84:	4621      	mov	r1, r4
    ec86:	a812      	add	r0, sp, #72	; 0x48
    ec88:	f7fd fea2 	bl	c9d0 <mul_mont_n>
    ec8c:	4643      	mov	r3, r8
    ec8e:	4632      	mov	r2, r6
    ec90:	a912      	add	r1, sp, #72	; 0x48
    ec92:	4608      	mov	r0, r1
    ec94:	f7fe f8cc 	bl	ce30 <mul_by_3_mod_n>
    ec98:	f104 0b30 	add.w	fp, r4, #48	; 0x30
    ec9c:	f8cd 8000 	str.w	r8, [sp]
    eca0:	4633      	mov	r3, r6
    eca2:	465a      	mov	r2, fp
    eca4:	4659      	mov	r1, fp
    eca6:	a806      	add	r0, sp, #24
    eca8:	f7fe f83a 	bl	cd20 <add_mod_n>
    ecac:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    ecb0:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    ecb4:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    ecb8:	2200      	movs	r2, #0
    ecba:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ecbe:	430a      	orrs	r2, r1
    ecc0:	4283      	cmp	r3, r0
    ecc2:	d1fa      	bne.n	ecba <POINTonE1_dadd_affine+0x82>
    ecc4:	1e53      	subs	r3, r2, #1
    ecc6:	ea23 0202 	bic.w	r2, r3, r2
    ecca:	0fd3      	lsrs	r3, r2, #31
    eccc:	9303      	str	r3, [sp, #12]
    ecce:	4e91      	ldr	r6, [pc, #580]	; (ef14 <POINTonE1_dadd_affine+0x2dc>)
    ecd0:	f04f 080c 	mov.w	r8, #12
    ecd4:	f8cd 8004 	str.w	r8, [sp, #4]
    ecd8:	f8df 923c 	ldr.w	r9, [pc, #572]	; ef18 <POINTonE1_dadd_affine+0x2e0>
    ecdc:	f8cd 9000 	str.w	r9, [sp]
    ece0:	4633      	mov	r3, r6
    ece2:	4652      	mov	r2, sl
    ece4:	4651      	mov	r1, sl
    ece6:	a82a      	add	r0, sp, #168	; 0xa8
    ece8:	f7fd fe72 	bl	c9d0 <mul_mont_n>
    ecec:	f8cd 8004 	str.w	r8, [sp, #4]
    ecf0:	f8cd 9000 	str.w	r9, [sp]
    ecf4:	4633      	mov	r3, r6
    ecf6:	4652      	mov	r2, sl
    ecf8:	a92a      	add	r1, sp, #168	; 0xa8
    ecfa:	a836      	add	r0, sp, #216	; 0xd8
    ecfc:	f7fd fe68 	bl	c9d0 <mul_mont_n>
    ed00:	f8cd 8004 	str.w	r8, [sp, #4]
    ed04:	f8cd 9000 	str.w	r9, [sp]
    ed08:	4633      	mov	r3, r6
    ed0a:	465a      	mov	r2, fp
    ed0c:	a936      	add	r1, sp, #216	; 0xd8
    ed0e:	4608      	mov	r0, r1
    ed10:	f7fd fe5e 	bl	c9d0 <mul_mont_n>
    ed14:	f8cd 8000 	str.w	r8, [sp]
    ed18:	4633      	mov	r3, r6
    ed1a:	f105 0230 	add.w	r2, r5, #48	; 0x30
    ed1e:	a936      	add	r1, sp, #216	; 0xd8
    ed20:	4608      	mov	r0, r1
    ed22:	f7fd fca7 	bl	c674 <sub_mod_n>
    ed26:	f8cd 8004 	str.w	r8, [sp, #4]
    ed2a:	f8cd 9000 	str.w	r9, [sp]
    ed2e:	4633      	mov	r3, r6
    ed30:	4622      	mov	r2, r4
    ed32:	a92a      	add	r1, sp, #168	; 0xa8
    ed34:	4608      	mov	r0, r1
    ed36:	f7fd fe4b 	bl	c9d0 <mul_mont_n>
    ed3a:	f8cd 8000 	str.w	r8, [sp]
    ed3e:	4633      	mov	r3, r6
    ed40:	462a      	mov	r2, r5
    ed42:	a92a      	add	r1, sp, #168	; 0xa8
    ed44:	a842      	add	r0, sp, #264	; 0x108
    ed46:	f7fd ffeb 	bl	cd20 <add_mod_n>
    ed4a:	f8cd 8000 	str.w	r8, [sp]
    ed4e:	4633      	mov	r3, r6
    ed50:	462a      	mov	r2, r5
    ed52:	a92a      	add	r1, sp, #168	; 0xa8
    ed54:	4608      	mov	r0, r1
    ed56:	f7fd fc8d 	bl	c674 <sub_mod_n>
    ed5a:	f8cd 8004 	str.w	r8, [sp, #4]
    ed5e:	f8cd 9000 	str.w	r9, [sp]
    ed62:	4633      	mov	r3, r6
    ed64:	4652      	mov	r2, sl
    ed66:	a92a      	add	r1, sp, #168	; 0xa8
    ed68:	a866      	add	r0, sp, #408	; 0x198
    ed6a:	f7fd fe31 	bl	c9d0 <mul_mont_n>
    ed6e:	a929      	add	r1, sp, #164	; 0xa4
    ed70:	ac41      	add	r4, sp, #260	; 0x104
    ed72:	460b      	mov	r3, r1
    ed74:	2200      	movs	r2, #0
    ed76:	f853 0f04 	ldr.w	r0, [r3, #4]!
    ed7a:	4302      	orrs	r2, r0
    ed7c:	42a3      	cmp	r3, r4
    ed7e:	d1fa      	bne.n	ed76 <POINTonE1_dadd_affine+0x13e>
    ed80:	1e53      	subs	r3, r2, #1
    ed82:	ea23 0202 	bic.w	r2, r3, r2
    ed86:	17d2      	asrs	r2, r2, #31
    ed88:	3d04      	subs	r5, #4
    ed8a:	ac4e      	add	r4, sp, #312	; 0x138
    ed8c:	f50d 78cc 	add.w	r8, sp, #408	; 0x198
    ed90:	4620      	mov	r0, r4
    ed92:	46ac      	mov	ip, r5
    ed94:	46be      	mov	lr, r7
    ed96:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    ed9a:	f85e 3f04 	ldr.w	r3, [lr, #4]!
    ed9e:	4073      	eors	r3, r6
    eda0:	4013      	ands	r3, r2
    eda2:	4073      	eors	r3, r6
    eda4:	f840 3b04 	str.w	r3, [r0], #4
    eda8:	4540      	cmp	r0, r8
    edaa:	d1f4      	bne.n	ed96 <POINTonE1_dadd_affine+0x15e>
    edac:	ae65      	add	r6, sp, #404	; 0x194
    edae:	f10d 0948 	add.w	r9, sp, #72	; 0x48
    edb2:	46b4      	mov	ip, r6
    edb4:	a806      	add	r0, sp, #24
    edb6:	f850 3b04 	ldr.w	r3, [r0], #4
    edba:	f85c ef04 	ldr.w	lr, [ip, #4]!
    edbe:	ea83 030e 	eor.w	r3, r3, lr
    edc2:	4013      	ands	r3, r2
    edc4:	ea83 030e 	eor.w	r3, r3, lr
    edc8:	f8cc 3000 	str.w	r3, [ip]
    edcc:	4548      	cmp	r0, r9
    edce:	d1f2      	bne.n	edb6 <POINTonE1_dadd_affine+0x17e>
    edd0:	a805      	add	r0, sp, #20
    edd2:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
    edd6:	4696      	mov	lr, r2
    edd8:	f851 2f04 	ldr.w	r2, [r1, #4]!
    eddc:	f850 3f04 	ldr.w	r3, [r0, #4]!
    ede0:	4053      	eors	r3, r2
    ede2:	ea03 030e 	and.w	r3, r3, lr
    ede6:	4053      	eors	r3, r2
    ede8:	600b      	str	r3, [r1, #0]
    edea:	4560      	cmp	r0, ip
    edec:	d1f4      	bne.n	edd8 <POINTonE1_dadd_affine+0x1a0>
    edee:	f8df 9124 	ldr.w	r9, [pc, #292]	; ef14 <POINTonE1_dadd_affine+0x2dc>
    edf2:	f04f 0a0c 	mov.w	sl, #12
    edf6:	f8cd a004 	str.w	sl, [sp, #4]
    edfa:	f8df b11c 	ldr.w	fp, [pc, #284]	; ef18 <POINTonE1_dadd_affine+0x2e0>
    edfe:	f8cd b000 	str.w	fp, [sp]
    ee02:	464b      	mov	r3, r9
    ee04:	aa2a      	add	r2, sp, #168	; 0xa8
    ee06:	4611      	mov	r1, r2
    ee08:	a806      	add	r0, sp, #24
    ee0a:	f7fd fde1 	bl	c9d0 <mul_mont_n>
    ee0e:	f8cd a004 	str.w	sl, [sp, #4]
    ee12:	f8cd b000 	str.w	fp, [sp]
    ee16:	464b      	mov	r3, r9
    ee18:	aa2a      	add	r2, sp, #168	; 0xa8
    ee1a:	a906      	add	r1, sp, #24
    ee1c:	a812      	add	r0, sp, #72	; 0x48
    ee1e:	f7fd fdd7 	bl	c9d0 <mul_mont_n>
    ee22:	f8cd a004 	str.w	sl, [sp, #4]
    ee26:	f8cd b000 	str.w	fp, [sp]
    ee2a:	464b      	mov	r3, r9
    ee2c:	aa5a      	add	r2, sp, #360	; 0x168
    ee2e:	a912      	add	r1, sp, #72	; 0x48
    ee30:	4608      	mov	r0, r1
    ee32:	f7fd fdcd 	bl	c9d0 <mul_mont_n>
    ee36:	f8cd a004 	str.w	sl, [sp, #4]
    ee3a:	f8cd b000 	str.w	fp, [sp]
    ee3e:	464b      	mov	r3, r9
    ee40:	aa4e      	add	r2, sp, #312	; 0x138
    ee42:	a906      	add	r1, sp, #24
    ee44:	a85a      	add	r0, sp, #360	; 0x168
    ee46:	f7fd fdc3 	bl	c9d0 <mul_mont_n>
    ee4a:	f8cd a004 	str.w	sl, [sp, #4]
    ee4e:	f8cd b000 	str.w	fp, [sp]
    ee52:	464b      	mov	r3, r9
    ee54:	aa42      	add	r2, sp, #264	; 0x108
    ee56:	a906      	add	r1, sp, #24
    ee58:	4608      	mov	r0, r1
    ee5a:	f7fd fdb9 	bl	c9d0 <mul_mont_n>
    ee5e:	f8cd a004 	str.w	sl, [sp, #4]
    ee62:	f8cd b000 	str.w	fp, [sp]
    ee66:	464b      	mov	r3, r9
    ee68:	aa36      	add	r2, sp, #216	; 0xd8
    ee6a:	4611      	mov	r1, r2
    ee6c:	a84e      	add	r0, sp, #312	; 0x138
    ee6e:	f7fd fdaf 	bl	c9d0 <mul_mont_n>
    ee72:	f8cd a000 	str.w	sl, [sp]
    ee76:	464b      	mov	r3, r9
    ee78:	aa06      	add	r2, sp, #24
    ee7a:	a94e      	add	r1, sp, #312	; 0x138
    ee7c:	4608      	mov	r0, r1
    ee7e:	f7fd fbf9 	bl	c674 <sub_mod_n>
    ee82:	f8cd a000 	str.w	sl, [sp]
    ee86:	464b      	mov	r3, r9
    ee88:	aa4e      	add	r2, sp, #312	; 0x138
    ee8a:	a95a      	add	r1, sp, #360	; 0x168
    ee8c:	4608      	mov	r0, r1
    ee8e:	f7fd fbf1 	bl	c674 <sub_mod_n>
    ee92:	f8cd a004 	str.w	sl, [sp, #4]
    ee96:	f8cd b000 	str.w	fp, [sp]
    ee9a:	464b      	mov	r3, r9
    ee9c:	aa36      	add	r2, sp, #216	; 0xd8
    ee9e:	a95a      	add	r1, sp, #360	; 0x168
    eea0:	4608      	mov	r0, r1
    eea2:	f7fd fd95 	bl	c9d0 <mul_mont_n>
    eea6:	f8cd a000 	str.w	sl, [sp]
    eeaa:	464b      	mov	r3, r9
    eeac:	aa12      	add	r2, sp, #72	; 0x48
    eeae:	a95a      	add	r1, sp, #360	; 0x168
    eeb0:	4608      	mov	r0, r1
    eeb2:	f7fd fbdf 	bl	c674 <sub_mod_n>
    eeb6:	9b03      	ldr	r3, [sp, #12]
    eeb8:	425a      	negs	r2, r3
    eeba:	4621      	mov	r1, r4
    eebc:	6808      	ldr	r0, [r1, #0]
    eebe:	f857 3f04 	ldr.w	r3, [r7, #4]!
    eec2:	4043      	eors	r3, r0
    eec4:	4013      	ands	r3, r2
    eec6:	4043      	eors	r3, r0
    eec8:	f841 3b04 	str.w	r3, [r1], #4
    eecc:	4541      	cmp	r1, r8
    eece:	d1f5      	bne.n	eebc <POINTonE1_dadd_affine+0x284>
    eed0:	4f10      	ldr	r7, [pc, #64]	; (ef14 <POINTonE1_dadd_affine+0x2dc>)
    eed2:	f107 0190 	add.w	r1, r7, #144	; 0x90
    eed6:	37c0      	adds	r7, #192	; 0xc0
    eed8:	f851 3b04 	ldr.w	r3, [r1], #4
    eedc:	f856 0f04 	ldr.w	r0, [r6, #4]!
    eee0:	4043      	eors	r3, r0
    eee2:	4013      	ands	r3, r2
    eee4:	4043      	eors	r3, r0
    eee6:	6033      	str	r3, [r6, #0]
    eee8:	42b9      	cmp	r1, r7
    eeea:	d1f5      	bne.n	eed8 <POINTonE1_dadd_affine+0x2a0>
    eeec:	9b04      	ldr	r3, [sp, #16]
    eeee:	4259      	negs	r1, r3
    eef0:	9b05      	ldr	r3, [sp, #20]
    eef2:	1f18      	subs	r0, r3, #4
    eef4:	f104 0690 	add.w	r6, r4, #144	; 0x90
    eef8:	f854 2b04 	ldr.w	r2, [r4], #4
    eefc:	f855 3f04 	ldr.w	r3, [r5, #4]!
    ef00:	4053      	eors	r3, r2
    ef02:	400b      	ands	r3, r1
    ef04:	4053      	eors	r3, r2
    ef06:	f840 3f04 	str.w	r3, [r0, #4]!
    ef0a:	42a6      	cmp	r6, r4
    ef0c:	d1f4      	bne.n	eef8 <POINTonE1_dadd_affine+0x2c0>
    ef0e:	b073      	add	sp, #460	; 0x1cc
    ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef14:	00024108 	.word	0x00024108
    ef18:	fffcfffd 	.word	0xfffcfffd

0000ef1c <POINTonE1_dadd>:
    ef1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef20:	b0f3      	sub	sp, #460	; 0x1cc
    ef22:	9005      	str	r0, [sp, #20]
    ef24:	460c      	mov	r4, r1
    ef26:	4615      	mov	r5, r2
    ef28:	9302      	str	r3, [sp, #8]
    ef2a:	4ec9      	ldr	r6, [pc, #804]	; (f250 <POINTonE1_dadd+0x334>)
    ef2c:	270c      	movs	r7, #12
    ef2e:	9700      	str	r7, [sp, #0]
    ef30:	4633      	mov	r3, r6
    ef32:	460a      	mov	r2, r1
    ef34:	a81e      	add	r0, sp, #120	; 0x78
    ef36:	f7fd fef3 	bl	cd20 <add_mod_n>
    ef3a:	9701      	str	r7, [sp, #4]
    ef3c:	4bc5      	ldr	r3, [pc, #788]	; (f254 <POINTonE1_dadd+0x338>)
    ef3e:	9300      	str	r3, [sp, #0]
    ef40:	4633      	mov	r3, r6
    ef42:	4622      	mov	r2, r4
    ef44:	4621      	mov	r1, r4
    ef46:	a812      	add	r0, sp, #72	; 0x48
    ef48:	f7fd fd42 	bl	c9d0 <mul_mont_n>
    ef4c:	463b      	mov	r3, r7
    ef4e:	4632      	mov	r2, r6
    ef50:	a912      	add	r1, sp, #72	; 0x48
    ef52:	4608      	mov	r0, r1
    ef54:	f7fd ff6c 	bl	ce30 <mul_by_3_mod_n>
    ef58:	f104 0830 	add.w	r8, r4, #48	; 0x30
    ef5c:	9700      	str	r7, [sp, #0]
    ef5e:	4633      	mov	r3, r6
    ef60:	4642      	mov	r2, r8
    ef62:	4641      	mov	r1, r8
    ef64:	a806      	add	r0, sp, #24
    ef66:	f7fd fedb 	bl	cd20 <add_mod_n>
    ef6a:	f105 0760 	add.w	r7, r5, #96	; 0x60
    ef6e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
    ef72:	f105 008c 	add.w	r0, r5, #140	; 0x8c
    ef76:	2200      	movs	r2, #0
    ef78:	f853 1f04 	ldr.w	r1, [r3, #4]!
    ef7c:	430a      	orrs	r2, r1
    ef7e:	4283      	cmp	r3, r0
    ef80:	d1fa      	bne.n	ef78 <POINTonE1_dadd+0x5c>
    ef82:	1e53      	subs	r3, r2, #1
    ef84:	ea23 0202 	bic.w	r2, r3, r2
    ef88:	0fd3      	lsrs	r3, r2, #31
    ef8a:	9304      	str	r3, [sp, #16]
    ef8c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; f250 <POINTonE1_dadd+0x334>
    ef90:	f04f 0b0c 	mov.w	fp, #12
    ef94:	f8cd b004 	str.w	fp, [sp, #4]
    ef98:	f8df a2b8 	ldr.w	sl, [pc, #696]	; f254 <POINTonE1_dadd+0x338>
    ef9c:	f8cd a000 	str.w	sl, [sp]
    efa0:	464b      	mov	r3, r9
    efa2:	463a      	mov	r2, r7
    efa4:	4639      	mov	r1, r7
    efa6:	a84e      	add	r0, sp, #312	; 0x138
    efa8:	f7fd fd12 	bl	c9d0 <mul_mont_n>
    efac:	f104 0660 	add.w	r6, r4, #96	; 0x60
    efb0:	f8cd b004 	str.w	fp, [sp, #4]
    efb4:	f8cd a000 	str.w	sl, [sp]
    efb8:	464b      	mov	r3, r9
    efba:	463a      	mov	r2, r7
    efbc:	4631      	mov	r1, r6
    efbe:	a866      	add	r0, sp, #408	; 0x198
    efc0:	f7fd fd06 	bl	c9d0 <mul_mont_n>
    efc4:	f104 035c 	add.w	r3, r4, #92	; 0x5c
    efc8:	f104 008c 	add.w	r0, r4, #140	; 0x8c
    efcc:	2200      	movs	r2, #0
    efce:	f853 1f04 	ldr.w	r1, [r3, #4]!
    efd2:	430a      	orrs	r2, r1
    efd4:	4283      	cmp	r3, r0
    efd6:	d1fa      	bne.n	efce <POINTonE1_dadd+0xb2>
    efd8:	1e53      	subs	r3, r2, #1
    efda:	ea23 0202 	bic.w	r2, r3, r2
    efde:	0fd3      	lsrs	r3, r2, #31
    efe0:	9303      	str	r3, [sp, #12]
    efe2:	230c      	movs	r3, #12
    efe4:	9301      	str	r3, [sp, #4]
    efe6:	4b9b      	ldr	r3, [pc, #620]	; (f254 <POINTonE1_dadd+0x338>)
    efe8:	9300      	str	r3, [sp, #0]
    efea:	4b99      	ldr	r3, [pc, #612]	; (f250 <POINTonE1_dadd+0x334>)
    efec:	4632      	mov	r2, r6
    efee:	4631      	mov	r1, r6
    eff0:	a82a      	add	r0, sp, #168	; 0xa8
    eff2:	f7fd fced 	bl	c9d0 <mul_mont_n>
    eff6:	9b02      	ldr	r3, [sp, #8]
    eff8:	b30b      	cbz	r3, f03e <POINTonE1_dadd+0x122>
    effa:	f8df 9254 	ldr.w	r9, [pc, #596]	; f250 <POINTonE1_dadd+0x334>
    effe:	f04f 0a0c 	mov.w	sl, #12
    f002:	f8cd a004 	str.w	sl, [sp, #4]
    f006:	f8df b24c 	ldr.w	fp, [pc, #588]	; f254 <POINTonE1_dadd+0x338>
    f00a:	f8cd b000 	str.w	fp, [sp]
    f00e:	464b      	mov	r3, r9
    f010:	aa2a      	add	r2, sp, #168	; 0xa8
    f012:	4611      	mov	r1, r2
    f014:	a85a      	add	r0, sp, #360	; 0x168
    f016:	f7fd fcdb 	bl	c9d0 <mul_mont_n>
    f01a:	f8cd a004 	str.w	sl, [sp, #4]
    f01e:	f8cd b000 	str.w	fp, [sp]
    f022:	464b      	mov	r3, r9
    f024:	9a02      	ldr	r2, [sp, #8]
    f026:	a95a      	add	r1, sp, #360	; 0x168
    f028:	4608      	mov	r0, r1
    f02a:	f7fd fcd1 	bl	c9d0 <mul_mont_n>
    f02e:	f8cd a000 	str.w	sl, [sp]
    f032:	464b      	mov	r3, r9
    f034:	aa5a      	add	r2, sp, #360	; 0x168
    f036:	a912      	add	r1, sp, #72	; 0x48
    f038:	4608      	mov	r0, r1
    f03a:	f7fd fe71 	bl	cd20 <add_mod_n>
    f03e:	f8df 9210 	ldr.w	r9, [pc, #528]	; f250 <POINTonE1_dadd+0x334>
    f042:	f04f 0a0c 	mov.w	sl, #12
    f046:	f8cd a004 	str.w	sl, [sp, #4]
    f04a:	f8df b208 	ldr.w	fp, [pc, #520]	; f254 <POINTonE1_dadd+0x338>
    f04e:	f8cd b000 	str.w	fp, [sp]
    f052:	464b      	mov	r3, r9
    f054:	463a      	mov	r2, r7
    f056:	4641      	mov	r1, r8
    f058:	a85a      	add	r0, sp, #360	; 0x168
    f05a:	f7fd fcb9 	bl	c9d0 <mul_mont_n>
    f05e:	f8cd a004 	str.w	sl, [sp, #4]
    f062:	f8cd b000 	str.w	fp, [sp]
    f066:	464b      	mov	r3, r9
    f068:	aa4e      	add	r2, sp, #312	; 0x138
    f06a:	a95a      	add	r1, sp, #360	; 0x168
    f06c:	4608      	mov	r0, r1
    f06e:	f7fd fcaf 	bl	c9d0 <mul_mont_n>
    f072:	f8cd a004 	str.w	sl, [sp, #4]
    f076:	f8cd b000 	str.w	fp, [sp]
    f07a:	464b      	mov	r3, r9
    f07c:	4632      	mov	r2, r6
    f07e:	f105 0130 	add.w	r1, r5, #48	; 0x30
    f082:	a836      	add	r0, sp, #216	; 0xd8
    f084:	f7fd fca4 	bl	c9d0 <mul_mont_n>
    f088:	f8cd a004 	str.w	sl, [sp, #4]
    f08c:	f8cd b000 	str.w	fp, [sp]
    f090:	464b      	mov	r3, r9
    f092:	aa2a      	add	r2, sp, #168	; 0xa8
    f094:	a936      	add	r1, sp, #216	; 0xd8
    f096:	4608      	mov	r0, r1
    f098:	f7fd fc9a 	bl	c9d0 <mul_mont_n>
    f09c:	f8cd a000 	str.w	sl, [sp]
    f0a0:	464b      	mov	r3, r9
    f0a2:	aa5a      	add	r2, sp, #360	; 0x168
    f0a4:	a936      	add	r1, sp, #216	; 0xd8
    f0a6:	4608      	mov	r0, r1
    f0a8:	f7fd fae4 	bl	c674 <sub_mod_n>
    f0ac:	f8cd a004 	str.w	sl, [sp, #4]
    f0b0:	f8cd b000 	str.w	fp, [sp]
    f0b4:	464b      	mov	r3, r9
    f0b6:	4622      	mov	r2, r4
    f0b8:	a94e      	add	r1, sp, #312	; 0x138
    f0ba:	4608      	mov	r0, r1
    f0bc:	f7fd fc88 	bl	c9d0 <mul_mont_n>
    f0c0:	f8cd a004 	str.w	sl, [sp, #4]
    f0c4:	f8cd b000 	str.w	fp, [sp]
    f0c8:	464b      	mov	r3, r9
    f0ca:	462a      	mov	r2, r5
    f0cc:	a92a      	add	r1, sp, #168	; 0xa8
    f0ce:	4608      	mov	r0, r1
    f0d0:	f7fd fc7e 	bl	c9d0 <mul_mont_n>
    f0d4:	f8cd a000 	str.w	sl, [sp]
    f0d8:	464b      	mov	r3, r9
    f0da:	aa4e      	add	r2, sp, #312	; 0x138
    f0dc:	a92a      	add	r1, sp, #168	; 0xa8
    f0de:	a842      	add	r0, sp, #264	; 0x108
    f0e0:	f7fd fe1e 	bl	cd20 <add_mod_n>
    f0e4:	f8cd a000 	str.w	sl, [sp]
    f0e8:	464b      	mov	r3, r9
    f0ea:	aa4e      	add	r2, sp, #312	; 0x138
    f0ec:	a92a      	add	r1, sp, #168	; 0xa8
    f0ee:	4608      	mov	r0, r1
    f0f0:	f7fd fac0 	bl	c674 <sub_mod_n>
    f0f4:	aa29      	add	r2, sp, #164	; 0xa4
    f0f6:	ae41      	add	r6, sp, #260	; 0x104
    f0f8:	4613      	mov	r3, r2
    f0fa:	2100      	movs	r1, #0
    f0fc:	f853 0f04 	ldr.w	r0, [r3, #4]!
    f100:	4301      	orrs	r1, r0
    f102:	42b3      	cmp	r3, r6
    f104:	d1fa      	bne.n	f0fc <POINTonE1_dadd+0x1e0>
    f106:	1e48      	subs	r0, r1, #1
    f108:	ea20 0001 	bic.w	r0, r0, r1
    f10c:	17c0      	asrs	r0, r0, #31
    f10e:	3c04      	subs	r4, #4
    f110:	ae4e      	add	r6, sp, #312	; 0x138
    f112:	af72      	add	r7, sp, #456	; 0x1c8
    f114:	4631      	mov	r1, r6
    f116:	46a4      	mov	ip, r4
    f118:	4696      	mov	lr, r2
    f11a:	680a      	ldr	r2, [r1, #0]
    f11c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    f120:	4053      	eors	r3, r2
    f122:	4003      	ands	r3, r0
    f124:	4053      	eors	r3, r2
    f126:	f841 3b04 	str.w	r3, [r1], #4
    f12a:	42b9      	cmp	r1, r7
    f12c:	d1f5      	bne.n	f11a <POINTonE1_dadd+0x1fe>
    f12e:	4672      	mov	r2, lr
    f130:	a905      	add	r1, sp, #20
    f132:	f10d 0ca4 	add.w	ip, sp, #164	; 0xa4
    f136:	4686      	mov	lr, r0
    f138:	f852 0f04 	ldr.w	r0, [r2, #4]!
    f13c:	f851 3f04 	ldr.w	r3, [r1, #4]!
    f140:	4043      	eors	r3, r0
    f142:	ea03 030e 	and.w	r3, r3, lr
    f146:	4043      	eors	r3, r0
    f148:	6013      	str	r3, [r2, #0]
    f14a:	4561      	cmp	r1, ip
    f14c:	d1f4      	bne.n	f138 <POINTonE1_dadd+0x21c>
    f14e:	f8df 8100 	ldr.w	r8, [pc, #256]	; f250 <POINTonE1_dadd+0x334>
    f152:	f04f 090c 	mov.w	r9, #12
    f156:	f8cd 9004 	str.w	r9, [sp, #4]
    f15a:	f8df a0f8 	ldr.w	sl, [pc, #248]	; f254 <POINTonE1_dadd+0x338>
    f15e:	f8cd a000 	str.w	sl, [sp]
    f162:	4643      	mov	r3, r8
    f164:	aa2a      	add	r2, sp, #168	; 0xa8
    f166:	a966      	add	r1, sp, #408	; 0x198
    f168:	4608      	mov	r0, r1
    f16a:	f7fd fc31 	bl	c9d0 <mul_mont_n>
    f16e:	f8cd 9004 	str.w	r9, [sp, #4]
    f172:	f8cd a000 	str.w	sl, [sp]
    f176:	4643      	mov	r3, r8
    f178:	aa2a      	add	r2, sp, #168	; 0xa8
    f17a:	4611      	mov	r1, r2
    f17c:	a806      	add	r0, sp, #24
    f17e:	f7fd fc27 	bl	c9d0 <mul_mont_n>
    f182:	f8cd 9004 	str.w	r9, [sp, #4]
    f186:	f8cd a000 	str.w	sl, [sp]
    f18a:	4643      	mov	r3, r8
    f18c:	aa2a      	add	r2, sp, #168	; 0xa8
    f18e:	a906      	add	r1, sp, #24
    f190:	a812      	add	r0, sp, #72	; 0x48
    f192:	f7fd fc1d 	bl	c9d0 <mul_mont_n>
    f196:	f8cd 9004 	str.w	r9, [sp, #4]
    f19a:	f8cd a000 	str.w	sl, [sp]
    f19e:	4643      	mov	r3, r8
    f1a0:	aa5a      	add	r2, sp, #360	; 0x168
    f1a2:	a912      	add	r1, sp, #72	; 0x48
    f1a4:	4608      	mov	r0, r1
    f1a6:	f7fd fc13 	bl	c9d0 <mul_mont_n>
    f1aa:	f8cd 9004 	str.w	r9, [sp, #4]
    f1ae:	f8cd a000 	str.w	sl, [sp]
    f1b2:	4643      	mov	r3, r8
    f1b4:	aa4e      	add	r2, sp, #312	; 0x138
    f1b6:	a906      	add	r1, sp, #24
    f1b8:	a85a      	add	r0, sp, #360	; 0x168
    f1ba:	f7fd fc09 	bl	c9d0 <mul_mont_n>
    f1be:	f8cd 9004 	str.w	r9, [sp, #4]
    f1c2:	f8cd a000 	str.w	sl, [sp]
    f1c6:	4643      	mov	r3, r8
    f1c8:	aa42      	add	r2, sp, #264	; 0x108
    f1ca:	a906      	add	r1, sp, #24
    f1cc:	4608      	mov	r0, r1
    f1ce:	f7fd fbff 	bl	c9d0 <mul_mont_n>
    f1d2:	f8cd 9004 	str.w	r9, [sp, #4]
    f1d6:	f8cd a000 	str.w	sl, [sp]
    f1da:	4643      	mov	r3, r8
    f1dc:	aa36      	add	r2, sp, #216	; 0xd8
    f1de:	4611      	mov	r1, r2
    f1e0:	a84e      	add	r0, sp, #312	; 0x138
    f1e2:	f7fd fbf5 	bl	c9d0 <mul_mont_n>
    f1e6:	f8cd 9000 	str.w	r9, [sp]
    f1ea:	4643      	mov	r3, r8
    f1ec:	aa06      	add	r2, sp, #24
    f1ee:	a94e      	add	r1, sp, #312	; 0x138
    f1f0:	4608      	mov	r0, r1
    f1f2:	f7fd fa3f 	bl	c674 <sub_mod_n>
    f1f6:	f8cd 9000 	str.w	r9, [sp]
    f1fa:	4643      	mov	r3, r8
    f1fc:	aa4e      	add	r2, sp, #312	; 0x138
    f1fe:	a95a      	add	r1, sp, #360	; 0x168
    f200:	4608      	mov	r0, r1
    f202:	f7fd fa37 	bl	c674 <sub_mod_n>
    f206:	f8cd 9004 	str.w	r9, [sp, #4]
    f20a:	f8cd a000 	str.w	sl, [sp]
    f20e:	4643      	mov	r3, r8
    f210:	aa36      	add	r2, sp, #216	; 0xd8
    f212:	a95a      	add	r1, sp, #360	; 0x168
    f214:	4608      	mov	r0, r1
    f216:	f7fd fbdb 	bl	c9d0 <mul_mont_n>
    f21a:	f8cd 9000 	str.w	r9, [sp]
    f21e:	4643      	mov	r3, r8
    f220:	aa12      	add	r2, sp, #72	; 0x48
    f222:	a95a      	add	r1, sp, #360	; 0x168
    f224:	4608      	mov	r0, r1
    f226:	f7fd fa25 	bl	c674 <sub_mod_n>
    f22a:	9b04      	ldr	r3, [sp, #16]
    f22c:	4258      	negs	r0, r3
    f22e:	4632      	mov	r2, r6
    f230:	6811      	ldr	r1, [r2, #0]
    f232:	f854 3f04 	ldr.w	r3, [r4, #4]!
    f236:	404b      	eors	r3, r1
    f238:	4003      	ands	r3, r0
    f23a:	404b      	eors	r3, r1
    f23c:	f842 3b04 	str.w	r3, [r2], #4
    f240:	42ba      	cmp	r2, r7
    f242:	d1f5      	bne.n	f230 <POINTonE1_dadd+0x314>
    f244:	9b03      	ldr	r3, [sp, #12]
    f246:	425a      	negs	r2, r3
    f248:	3d04      	subs	r5, #4
    f24a:	9b05      	ldr	r3, [sp, #20]
    f24c:	1f18      	subs	r0, r3, #4
    f24e:	e003      	b.n	f258 <POINTonE1_dadd+0x33c>
    f250:	00024108 	.word	0x00024108
    f254:	fffcfffd 	.word	0xfffcfffd
    f258:	f856 1b04 	ldr.w	r1, [r6], #4
    f25c:	f855 3f04 	ldr.w	r3, [r5, #4]!
    f260:	404b      	eors	r3, r1
    f262:	4013      	ands	r3, r2
    f264:	404b      	eors	r3, r1
    f266:	f840 3f04 	str.w	r3, [r0, #4]!
    f26a:	42be      	cmp	r6, r7
    f26c:	d1f4      	bne.n	f258 <POINTonE1_dadd+0x33c>
    f26e:	b073      	add	sp, #460	; 0x1cc
    f270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f274 <POINTonE1s_mult_w4>:
    f274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f278:	b0a7      	sub	sp, #156	; 0x9c
    f27a:	af00      	add	r7, sp, #0
    f27c:	4605      	mov	r5, r0
    f27e:	4616      	mov	r6, r2
    f280:	603b      	str	r3, [r7, #0]
    f282:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
    f286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    f28a:	b37b      	cbz	r3, f2ec <POINTonE1s_mult_w4+0x78>
    f28c:	b176      	cbz	r6, f2ac <POINTonE1s_mult_w4+0x38>
    f28e:	f1a1 0a04 	sub.w	sl, r1, #4
    f292:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
    f296:	2400      	movs	r4, #0
    f298:	f85a 1f04 	ldr.w	r1, [sl, #4]!
    f29c:	4648      	mov	r0, r9
    f29e:	f7ff fa2b 	bl	e6f8 <POINTonE1_precompute_w4>
    f2a2:	3401      	adds	r4, #1
    f2a4:	f509 6990 	add.w	r9, r9, #1152	; 0x480
    f2a8:	42a6      	cmp	r6, r4
    f2aa:	d1f5      	bne.n	f298 <POINTonE1s_mult_w4+0x24>
    f2ac:	f008 0103 	and.w	r1, r8, #3
    f2b0:	1c4a      	adds	r2, r1, #1
    f2b2:	2301      	movs	r3, #1
    f2b4:	4093      	lsls	r3, r2
    f2b6:	f103 3aff 	add.w	sl, r3, #4294967295
    f2ba:	4689      	mov	r9, r1
    f2bc:	ebb8 0801 	subs.w	r8, r8, r1
    f2c0:	d01d      	beq.n	f2fe <POINTonE1s_mult_w4+0x8a>
    f2c2:	f108 3bff 	add.w	fp, r8, #4294967295
    f2c6:	4659      	mov	r1, fp
    f2c8:	683b      	ldr	r3, [r7, #0]
    f2ca:	6818      	ldr	r0, [r3, #0]
    f2cc:	f7fd f9ba 	bl	c644 <get_wval>
    f2d0:	2104      	movs	r1, #4
    f2d2:	ea00 000a 	and.w	r0, r0, sl
    f2d6:	f7fd f9c1 	bl	c65c <booth_encode>
    f2da:	4602      	mov	r2, r0
    f2dc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
    f2e0:	4628      	mov	r0, r5
    f2e2:	f7fe fc1f 	bl	db24 <POINTonE1_gather_booth_w4>
    f2e6:	2401      	movs	r4, #1
    f2e8:	464b      	mov	r3, r9
    f2ea:	e021      	b.n	f330 <POINTonE1s_mult_w4+0xbc>
    f2ec:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    f2f0:	466a      	mov	r2, sp
    f2f2:	eba2 13c3 	sub.w	r3, r2, r3, lsl #7
    f2f6:	469d      	mov	sp, r3
    f2f8:	f8c7 d0c4 	str.w	sp, [r7, #196]	; 0xc4
    f2fc:	e7c6      	b.n	f28c <POINTonE1s_mult_w4+0x18>
    f2fe:	683b      	ldr	r3, [r7, #0]
    f300:	681b      	ldr	r3, [r3, #0]
    f302:	7818      	ldrb	r0, [r3, #0]
    f304:	2104      	movs	r1, #4
    f306:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    f30a:	f7fd f9a7 	bl	c65c <booth_encode>
    f30e:	4602      	mov	r2, r0
    f310:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
    f314:	4628      	mov	r0, r5
    f316:	f7fe fc05 	bl	db24 <POINTonE1_gather_booth_w4>
    f31a:	2401      	movs	r4, #1
    f31c:	e040      	b.n	f3a0 <POINTonE1s_mult_w4+0x12c>
    f31e:	f1ab 0204 	sub.w	r2, fp, #4
    f322:	f04f 0a1f 	mov.w	sl, #31
    f326:	2304      	movs	r3, #4
    f328:	f1bb 0f03 	cmp.w	fp, #3
    f32c:	d036      	beq.n	f39c <POINTonE1s_mult_w4+0x128>
    f32e:	4693      	mov	fp, r2
    f330:	42a6      	cmp	r6, r4
    f332:	d92b      	bls.n	f38c <POINTonE1s_mult_w4+0x118>
    f334:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    f338:	f109 39ff 	add.w	r9, r9, #4294967295
    f33c:	683a      	ldr	r2, [r7, #0]
    f33e:	eb02 0989 	add.w	r9, r2, r9, lsl #2
    f342:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    f346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
    f34a:	eb02 18c8 	add.w	r8, r2, r8, lsl #7
    f34e:	3301      	adds	r3, #1
    f350:	607b      	str	r3, [r7, #4]
    f352:	687a      	ldr	r2, [r7, #4]
    f354:	4659      	mov	r1, fp
    f356:	f859 0f04 	ldr.w	r0, [r9, #4]!
    f35a:	f7fd f973 	bl	c644 <get_wval>
    f35e:	2104      	movs	r1, #4
    f360:	ea00 000a 	and.w	r0, r0, sl
    f364:	f7fd f97a 	bl	c65c <booth_encode>
    f368:	4602      	mov	r2, r0
    f36a:	4641      	mov	r1, r8
    f36c:	f107 0008 	add.w	r0, r7, #8
    f370:	f7fe fbd8 	bl	db24 <POINTonE1_gather_booth_w4>
    f374:	2300      	movs	r3, #0
    f376:	f107 0208 	add.w	r2, r7, #8
    f37a:	4629      	mov	r1, r5
    f37c:	4628      	mov	r0, r5
    f37e:	f7ff fdcd 	bl	ef1c <POINTonE1_dadd>
    f382:	3401      	adds	r4, #1
    f384:	f508 6890 	add.w	r8, r8, #1152	; 0x480
    f388:	42a6      	cmp	r6, r4
    f38a:	d1e2      	bne.n	f352 <POINTonE1s_mult_w4+0xde>
    f38c:	2404      	movs	r4, #4
    f38e:	4629      	mov	r1, r5
    f390:	4628      	mov	r0, r5
    f392:	f7fe fd67 	bl	de64 <POINTonE1_double>
    f396:	3c01      	subs	r4, #1
    f398:	d1f9      	bne.n	f38e <POINTonE1s_mult_w4+0x11a>
    f39a:	e7c0      	b.n	f31e <POINTonE1s_mult_w4+0xaa>
    f39c:	f04f 0a1f 	mov.w	sl, #31
    f3a0:	42a6      	cmp	r6, r4
    f3a2:	d928      	bls.n	f3f6 <POINTonE1s_mult_w4+0x182>
    f3a4:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    f3a8:	f109 39ff 	add.w	r9, r9, #4294967295
    f3ac:	683b      	ldr	r3, [r7, #0]
    f3ae:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    f3b2:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
    f3b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    f3ba:	eb03 18c8 	add.w	r8, r3, r8, lsl #7
    f3be:	f04f 0b04 	mov.w	fp, #4
    f3c2:	f859 3f04 	ldr.w	r3, [r9, #4]!
    f3c6:	7818      	ldrb	r0, [r3, #0]
    f3c8:	4659      	mov	r1, fp
    f3ca:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
    f3ce:	f7fd f945 	bl	c65c <booth_encode>
    f3d2:	4602      	mov	r2, r0
    f3d4:	4641      	mov	r1, r8
    f3d6:	f107 0008 	add.w	r0, r7, #8
    f3da:	f7fe fba3 	bl	db24 <POINTonE1_gather_booth_w4>
    f3de:	2300      	movs	r3, #0
    f3e0:	f107 0208 	add.w	r2, r7, #8
    f3e4:	4629      	mov	r1, r5
    f3e6:	4628      	mov	r0, r5
    f3e8:	f7ff fd98 	bl	ef1c <POINTonE1_dadd>
    f3ec:	3401      	adds	r4, #1
    f3ee:	f508 6890 	add.w	r8, r8, #1152	; 0x480
    f3f2:	42a6      	cmp	r6, r4
    f3f4:	d1e5      	bne.n	f3c2 <POINTonE1s_mult_w4+0x14e>
    f3f6:	379c      	adds	r7, #156	; 0x9c
    f3f8:	46bd      	mov	sp, r7
    f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f3fe <POINTonE1_mult_w4>:
    f3fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f402:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
    f406:	4605      	mov	r5, r0
    f408:	4617      	mov	r7, r2
    f40a:	461e      	mov	r6, r3
    f40c:	4668      	mov	r0, sp
    f40e:	f7ff f973 	bl	e6f8 <POINTonE1_precompute_w4>
    f412:	f006 0303 	and.w	r3, r6, #3
    f416:	1c5c      	adds	r4, r3, #1
    f418:	1af6      	subs	r6, r6, r3
    f41a:	d036      	beq.n	f48a <POINTonE1_mult_w4+0x8c>
    f41c:	4622      	mov	r2, r4
    f41e:	1e71      	subs	r1, r6, #1
    f420:	4638      	mov	r0, r7
    f422:	f7fd f90f 	bl	c644 <get_wval>
    f426:	f04f 33ff 	mov.w	r3, #4294967295
    f42a:	40a3      	lsls	r3, r4
    f42c:	2104      	movs	r1, #4
    f42e:	ea20 0003 	bic.w	r0, r0, r3
    f432:	f7fd f913 	bl	c65c <booth_encode>
    f436:	4602      	mov	r2, r0
    f438:	4669      	mov	r1, sp
    f43a:	4628      	mov	r0, r5
    f43c:	f7fe fb72 	bl	db24 <POINTonE1_gather_booth_w4>
    f440:	f04f 0905 	mov.w	r9, #5
    f444:	f04f 0804 	mov.w	r8, #4
    f448:	2404      	movs	r4, #4
    f44a:	4629      	mov	r1, r5
    f44c:	4628      	mov	r0, r5
    f44e:	f7fe fd09 	bl	de64 <POINTonE1_double>
    f452:	3c01      	subs	r4, #1
    f454:	d1f9      	bne.n	f44a <POINTonE1_mult_w4+0x4c>
    f456:	1f34      	subs	r4, r6, #4
    f458:	d027      	beq.n	f4aa <POINTonE1_mult_w4+0xac>
    f45a:	464a      	mov	r2, r9
    f45c:	1f71      	subs	r1, r6, #5
    f45e:	4638      	mov	r0, r7
    f460:	f7fd f8f0 	bl	c644 <get_wval>
    f464:	4641      	mov	r1, r8
    f466:	f000 001f 	and.w	r0, r0, #31
    f46a:	f7fd f8f7 	bl	c65c <booth_encode>
    f46e:	4602      	mov	r2, r0
    f470:	4669      	mov	r1, sp
    f472:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    f476:	f7fe fb55 	bl	db24 <POINTonE1_gather_booth_w4>
    f47a:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    f47e:	4629      	mov	r1, r5
    f480:	4628      	mov	r0, r5
    f482:	f7fe fff3 	bl	e46c <POINTonE1_add>
    f486:	4626      	mov	r6, r4
    f488:	e7de      	b.n	f448 <POINTonE1_mult_w4+0x4a>
    f48a:	7838      	ldrb	r0, [r7, #0]
    f48c:	f04f 33ff 	mov.w	r3, #4294967295
    f490:	40a3      	lsls	r3, r4
    f492:	43db      	mvns	r3, r3
    f494:	2104      	movs	r1, #4
    f496:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    f49a:	f7fd f8df 	bl	c65c <booth_encode>
    f49e:	4602      	mov	r2, r0
    f4a0:	4669      	mov	r1, sp
    f4a2:	4628      	mov	r0, r5
    f4a4:	f7fe fb3e 	bl	db24 <POINTonE1_gather_booth_w4>
    f4a8:	e013      	b.n	f4d2 <POINTonE1_mult_w4+0xd4>
    f4aa:	7838      	ldrb	r0, [r7, #0]
    f4ac:	0040      	lsls	r0, r0, #1
    f4ae:	2104      	movs	r1, #4
    f4b0:	f000 001e 	and.w	r0, r0, #30
    f4b4:	f7fd f8d2 	bl	c65c <booth_encode>
    f4b8:	4602      	mov	r2, r0
    f4ba:	4669      	mov	r1, sp
    f4bc:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
    f4c0:	f7fe fb30 	bl	db24 <POINTonE1_gather_booth_w4>
    f4c4:	2300      	movs	r3, #0
    f4c6:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    f4ca:	4629      	mov	r1, r5
    f4cc:	4628      	mov	r0, r5
    f4ce:	f7ff fd25 	bl	ef1c <POINTonE1_dadd>
    f4d2:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
    f4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f4da <POINTonE1_mult_w5>:
    f4da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f4de:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
    f4e2:	4605      	mov	r5, r0
    f4e4:	4617      	mov	r7, r2
    f4e6:	4698      	mov	r8, r3
    f4e8:	f1a1 0e04 	sub.w	lr, r1, #4
    f4ec:	466c      	mov	r4, sp
    f4ee:	ab24      	add	r3, sp, #144	; 0x90
    f4f0:	46a4      	mov	ip, r4
    f4f2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
    f4f6:	f84c 2b04 	str.w	r2, [ip], #4
    f4fa:	459c      	cmp	ip, r3
    f4fc:	d1f9      	bne.n	f4f2 <POINTonE1_mult_w5+0x18>
    f4fe:	a824      	add	r0, sp, #144	; 0x90
    f500:	f7fe fcb0 	bl	de64 <POINTonE1_double>
    f504:	ae48      	add	r6, sp, #288	; 0x120
    f506:	f504 797c 	add.w	r9, r4, #1008	; 0x3f0
    f50a:	4622      	mov	r2, r4
    f50c:	3490      	adds	r4, #144	; 0x90
    f50e:	4621      	mov	r1, r4
    f510:	4630      	mov	r0, r6
    f512:	f7fe ffab 	bl	e46c <POINTonE1_add>
    f516:	4621      	mov	r1, r4
    f518:	f106 0090 	add.w	r0, r6, #144	; 0x90
    f51c:	f7fe fca2 	bl	de64 <POINTonE1_double>
    f520:	f506 7690 	add.w	r6, r6, #288	; 0x120
    f524:	45a1      	cmp	r9, r4
    f526:	d1f0      	bne.n	f50a <POINTonE1_mult_w5+0x30>
    f528:	4b35      	ldr	r3, [pc, #212]	; (f600 <POINTonE1_mult_w5+0x126>)
    f52a:	fba3 2308 	umull	r2, r3, r3, r8
    f52e:	f023 0603 	bic.w	r6, r3, #3
    f532:	eb06 0693 	add.w	r6, r6, r3, lsr #2
    f536:	eba8 0606 	sub.w	r6, r8, r6
    f53a:	1c74      	adds	r4, r6, #1
    f53c:	ebb8 0606 	subs.w	r6, r8, r6
    f540:	d036      	beq.n	f5b0 <POINTonE1_mult_w5+0xd6>
    f542:	4622      	mov	r2, r4
    f544:	1e71      	subs	r1, r6, #1
    f546:	4638      	mov	r0, r7
    f548:	f7fd f87c 	bl	c644 <get_wval>
    f54c:	f04f 33ff 	mov.w	r3, #4294967295
    f550:	40a3      	lsls	r3, r4
    f552:	2105      	movs	r1, #5
    f554:	ea20 0003 	bic.w	r0, r0, r3
    f558:	f7fd f880 	bl	c65c <booth_encode>
    f55c:	4602      	mov	r2, r0
    f55e:	4669      	mov	r1, sp
    f560:	4628      	mov	r0, r5
    f562:	f7fe fb0c 	bl	db7e <POINTonE1_gather_booth_w5>
    f566:	f04f 0906 	mov.w	r9, #6
    f56a:	f04f 0805 	mov.w	r8, #5
    f56e:	2405      	movs	r4, #5
    f570:	4629      	mov	r1, r5
    f572:	4628      	mov	r0, r5
    f574:	f7fe fc76 	bl	de64 <POINTonE1_double>
    f578:	3c01      	subs	r4, #1
    f57a:	d1f9      	bne.n	f570 <POINTonE1_mult_w5+0x96>
    f57c:	1f74      	subs	r4, r6, #5
    f57e:	d027      	beq.n	f5d0 <POINTonE1_mult_w5+0xf6>
    f580:	464a      	mov	r2, r9
    f582:	1fb1      	subs	r1, r6, #6
    f584:	4638      	mov	r0, r7
    f586:	f7fd f85d 	bl	c644 <get_wval>
    f58a:	4641      	mov	r1, r8
    f58c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f590:	f7fd f864 	bl	c65c <booth_encode>
    f594:	4602      	mov	r2, r0
    f596:	4669      	mov	r1, sp
    f598:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    f59c:	f7fe faef 	bl	db7e <POINTonE1_gather_booth_w5>
    f5a0:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    f5a4:	4629      	mov	r1, r5
    f5a6:	4628      	mov	r0, r5
    f5a8:	f7fe ff60 	bl	e46c <POINTonE1_add>
    f5ac:	4626      	mov	r6, r4
    f5ae:	e7de      	b.n	f56e <POINTonE1_mult_w5+0x94>
    f5b0:	7838      	ldrb	r0, [r7, #0]
    f5b2:	f04f 33ff 	mov.w	r3, #4294967295
    f5b6:	40a3      	lsls	r3, r4
    f5b8:	43db      	mvns	r3, r3
    f5ba:	2105      	movs	r1, #5
    f5bc:	ea03 0040 	and.w	r0, r3, r0, lsl #1
    f5c0:	f7fd f84c 	bl	c65c <booth_encode>
    f5c4:	4602      	mov	r2, r0
    f5c6:	4669      	mov	r1, sp
    f5c8:	4628      	mov	r0, r5
    f5ca:	f7fe fad8 	bl	db7e <POINTonE1_gather_booth_w5>
    f5ce:	e013      	b.n	f5f8 <POINTonE1_mult_w5+0x11e>
    f5d0:	7838      	ldrb	r0, [r7, #0]
    f5d2:	0040      	lsls	r0, r0, #1
    f5d4:	2105      	movs	r1, #5
    f5d6:	f000 003e 	and.w	r0, r0, #62	; 0x3e
    f5da:	f7fd f83f 	bl	c65c <booth_encode>
    f5de:	4602      	mov	r2, r0
    f5e0:	4669      	mov	r1, sp
    f5e2:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
    f5e6:	f7fe faca 	bl	db7e <POINTonE1_gather_booth_w5>
    f5ea:	2300      	movs	r3, #0
    f5ec:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
    f5f0:	4629      	mov	r1, r5
    f5f2:	4628      	mov	r0, r5
    f5f4:	f7ff fc92 	bl	ef1c <POINTonE1_dadd>
    f5f8:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
    f5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f600:	cccccccd 	.word	0xcccccccd

0000f604 <POINTonE1_dbl_n_add>:
    f604:	b570      	push	{r4, r5, r6, lr}
    f606:	4605      	mov	r5, r0
    f608:	4616      	mov	r6, r2
    f60a:	1e4c      	subs	r4, r1, #1
    f60c:	b139      	cbz	r1, f61e <POINTonE1_dbl_n_add+0x1a>
    f60e:	4629      	mov	r1, r5
    f610:	4628      	mov	r0, r5
    f612:	f7fe fc27 	bl	de64 <POINTonE1_double>
    f616:	3c01      	subs	r4, #1
    f618:	f1b4 3fff 	cmp.w	r4, #4294967295
    f61c:	d1f7      	bne.n	f60e <POINTonE1_dbl_n_add+0xa>
    f61e:	2300      	movs	r3, #0
    f620:	4632      	mov	r2, r6
    f622:	4629      	mov	r1, r5
    f624:	4628      	mov	r0, r5
    f626:	f7ff fc79 	bl	ef1c <POINTonE1_dadd>
    f62a:	bd70      	pop	{r4, r5, r6, pc}

0000f62c <POINTonE1_in_G1>:
    f62c:	b510      	push	{r4, lr}
    f62e:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
    f632:	4604      	mov	r4, r0
    f634:	4601      	mov	r1, r0
    f636:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f638:	f7fd faa3 	bl	cb82 <sigma>
    f63c:	a9fc      	add	r1, sp, #1008	; 0x3f0
    f63e:	a8d8      	add	r0, sp, #864	; 0x360
    f640:	f7fd fa9f 	bl	cb82 <sigma>
    f644:	a9fc      	add	r1, sp, #1008	; 0x3f0
    f646:	4608      	mov	r0, r1
    f648:	f7fe fc0c 	bl	de64 <POINTonE1_double>
    f64c:	2300      	movs	r3, #0
    f64e:	4622      	mov	r2, r4
    f650:	a9d8      	add	r1, sp, #864	; 0x360
    f652:	a8b4      	add	r0, sp, #720	; 0x2d0
    f654:	f7ff fc62 	bl	ef1c <POINTonE1_dadd>
    f658:	2101      	movs	r1, #1
    f65a:	a8b4      	add	r0, sp, #720	; 0x2d0
    f65c:	f7fe fa52 	bl	db04 <POINTonE1_cneg>
    f660:	2300      	movs	r3, #0
    f662:	aafc      	add	r2, sp, #1008	; 0x3f0
    f664:	a9b4      	add	r1, sp, #720	; 0x2d0
    f666:	4608      	mov	r0, r1
    f668:	f7ff fc58 	bl	ef1c <POINTonE1_dadd>
    f66c:	a9b4      	add	r1, sp, #720	; 0x2d0
    f66e:	a848      	add	r0, sp, #288	; 0x120
    f670:	f7fe fbf8 	bl	de64 <POINTonE1_double>
    f674:	2300      	movs	r3, #0
    f676:	aab4      	add	r2, sp, #720	; 0x2d0
    f678:	a948      	add	r1, sp, #288	; 0x120
    f67a:	4668      	mov	r0, sp
    f67c:	f7ff fc4e 	bl	ef1c <POINTonE1_dadd>
    f680:	2300      	movs	r3, #0
    f682:	aa48      	add	r2, sp, #288	; 0x120
    f684:	4669      	mov	r1, sp
    f686:	a824      	add	r0, sp, #144	; 0x90
    f688:	f7ff fc48 	bl	ef1c <POINTonE1_dadd>
    f68c:	2300      	movs	r3, #0
    f68e:	aa48      	add	r2, sp, #288	; 0x120
    f690:	a924      	add	r1, sp, #144	; 0x90
    f692:	4610      	mov	r0, r2
    f694:	f7ff fc42 	bl	ef1c <POINTonE1_dadd>
    f698:	a924      	add	r1, sp, #144	; 0x90
    f69a:	a890      	add	r0, sp, #576	; 0x240
    f69c:	f7fe fbe2 	bl	de64 <POINTonE1_double>
    f6a0:	2300      	movs	r3, #0
    f6a2:	aab4      	add	r2, sp, #720	; 0x2d0
    f6a4:	a990      	add	r1, sp, #576	; 0x240
    f6a6:	a86c      	add	r0, sp, #432	; 0x1b0
    f6a8:	f7ff fc38 	bl	ef1c <POINTonE1_dadd>
    f6ac:	aa24      	add	r2, sp, #144	; 0x90
    f6ae:	2103      	movs	r1, #3
    f6b0:	a890      	add	r0, sp, #576	; 0x240
    f6b2:	f7ff ffa7 	bl	f604 <POINTonE1_dbl_n_add>
    f6b6:	a948      	add	r1, sp, #288	; 0x120
    f6b8:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6ba:	f7fe fbd3 	bl	de64 <POINTonE1_double>
    f6be:	aa6c      	add	r2, sp, #432	; 0x1b0
    f6c0:	2105      	movs	r1, #5
    f6c2:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6c4:	f7ff ff9e 	bl	f604 <POINTonE1_dbl_n_add>
    f6c8:	466a      	mov	r2, sp
    f6ca:	2103      	movs	r1, #3
    f6cc:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6ce:	f7ff ff99 	bl	f604 <POINTonE1_dbl_n_add>
    f6d2:	aab4      	add	r2, sp, #720	; 0x2d0
    f6d4:	2103      	movs	r1, #3
    f6d6:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6d8:	f7ff ff94 	bl	f604 <POINTonE1_dbl_n_add>
    f6dc:	466a      	mov	r2, sp
    f6de:	2105      	movs	r1, #5
    f6e0:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6e2:	f7ff ff8f 	bl	f604 <POINTonE1_dbl_n_add>
    f6e6:	aa90      	add	r2, sp, #576	; 0x240
    f6e8:	2112      	movs	r1, #18
    f6ea:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6ec:	f7ff ff8a 	bl	f604 <POINTonE1_dbl_n_add>
    f6f0:	aa90      	add	r2, sp, #576	; 0x240
    f6f2:	2108      	movs	r1, #8
    f6f4:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f6f6:	f7ff ff85 	bl	f604 <POINTonE1_dbl_n_add>
    f6fa:	aa48      	add	r2, sp, #288	; 0x120
    f6fc:	2103      	movs	r1, #3
    f6fe:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f700:	f7ff ff80 	bl	f604 <POINTonE1_dbl_n_add>
    f704:	aa24      	add	r2, sp, #144	; 0x90
    f706:	2107      	movs	r1, #7
    f708:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f70a:	f7ff ff7b 	bl	f604 <POINTonE1_dbl_n_add>
    f70e:	aa6c      	add	r2, sp, #432	; 0x1b0
    f710:	2105      	movs	r1, #5
    f712:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f714:	f7ff ff76 	bl	f604 <POINTonE1_dbl_n_add>
    f718:	aa90      	add	r2, sp, #576	; 0x240
    f71a:	2129      	movs	r1, #41	; 0x29
    f71c:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f71e:	f7ff ff71 	bl	f604 <POINTonE1_dbl_n_add>
    f722:	aa90      	add	r2, sp, #576	; 0x240
    f724:	2108      	movs	r1, #8
    f726:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f728:	f7ff ff6c 	bl	f604 <POINTonE1_dbl_n_add>
    f72c:	aa90      	add	r2, sp, #576	; 0x240
    f72e:	2108      	movs	r1, #8
    f730:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f732:	f7ff ff67 	bl	f604 <POINTonE1_dbl_n_add>
    f736:	aa90      	add	r2, sp, #576	; 0x240
    f738:	2108      	movs	r1, #8
    f73a:	a8fc      	add	r0, sp, #1008	; 0x3f0
    f73c:	f7ff ff62 	bl	f604 <POINTonE1_dbl_n_add>
    f740:	2101      	movs	r1, #1
    f742:	a8d8      	add	r0, sp, #864	; 0x360
    f744:	f7fe f9de 	bl	db04 <POINTonE1_cneg>
    f748:	2300      	movs	r3, #0
    f74a:	aad8      	add	r2, sp, #864	; 0x360
    f74c:	a9fc      	add	r1, sp, #1008	; 0x3f0
    f74e:	4608      	mov	r0, r1
    f750:	f7ff fbe4 	bl	ef1c <POINTonE1_dadd>
    f754:	f20d 434c 	addw	r3, sp, #1100	; 0x44c
    f758:	f20d 417c 	addw	r1, sp, #1148	; 0x47c
    f75c:	2000      	movs	r0, #0
    f75e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    f762:	4310      	orrs	r0, r2
    f764:	428b      	cmp	r3, r1
    f766:	d1fa      	bne.n	f75e <POINTonE1_in_G1+0x132>
    f768:	1e43      	subs	r3, r0, #1
    f76a:	ea23 0000 	bic.w	r0, r3, r0
    f76e:	0fc0      	lsrs	r0, r0, #31
    f770:	f50d 6d90 	add.w	sp, sp, #1152	; 0x480
    f774:	bd10      	pop	{r4, pc}

0000f776 <smul_2n>:
    f776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f77a:	b083      	sub	sp, #12
    f77c:	af00      	add	r7, sp, #0
    f77e:	4683      	mov	fp, r0
    f780:	607b      	str	r3, [r7, #4]
    f782:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
    f786:	6b7e      	ldr	r6, [r7, #52]	; 0x34
    f788:	ea4f 0986 	mov.w	r9, r6, lsl #2
    f78c:	f109 0307 	add.w	r3, r9, #7
    f790:	f023 0307 	bic.w	r3, r3, #7
    f794:	ebad 0d03 	sub.w	sp, sp, r3
    f798:	466d      	mov	r5, sp
    f79a:	ebad 0d03 	sub.w	sp, sp, r3
    f79e:	466c      	mov	r4, sp
    f7a0:	ea82 7ae2 	eor.w	sl, r2, r2, asr #31
    f7a4:	ebaa 7ae2 	sub.w	sl, sl, r2, asr #31
    f7a8:	4633      	mov	r3, r6
    f7aa:	17d2      	asrs	r2, r2, #31
    f7ac:	4628      	mov	r0, r5
    f7ae:	f7fd f884 	bl	c8ba <cneg_n>
    f7b2:	4633      	mov	r3, r6
    f7b4:	4652      	mov	r2, sl
    f7b6:	4629      	mov	r1, r5
    f7b8:	4628      	mov	r0, r5
    f7ba:	f7fd f898 	bl	c8ee <umul_n>
    f7be:	ea88 7ae8 	eor.w	sl, r8, r8, asr #31
    f7c2:	ebaa 7ae8 	sub.w	sl, sl, r8, asr #31
    f7c6:	4633      	mov	r3, r6
    f7c8:	ea4f 72e8 	mov.w	r2, r8, asr #31
    f7cc:	6879      	ldr	r1, [r7, #4]
    f7ce:	4620      	mov	r0, r4
    f7d0:	f7fd f873 	bl	c8ba <cneg_n>
    f7d4:	4633      	mov	r3, r6
    f7d6:	4652      	mov	r2, sl
    f7d8:	4621      	mov	r1, r4
    f7da:	4620      	mov	r0, r4
    f7dc:	f7fd f887 	bl	c8ee <umul_n>
    f7e0:	b1b6      	cbz	r6, f810 <smul_2n+0x9a>
    f7e2:	1f29      	subs	r1, r5, #4
    f7e4:	3c04      	subs	r4, #4
    f7e6:	f1ab 0004 	sub.w	r0, fp, #4
    f7ea:	f1a9 0904 	sub.w	r9, r9, #4
    f7ee:	444d      	add	r5, r9
    f7f0:	2200      	movs	r2, #0
    f7f2:	4694      	mov	ip, r2
    f7f4:	f851 3f04 	ldr.w	r3, [r1, #4]!
    f7f8:	f854 6f04 	ldr.w	r6, [r4, #4]!
    f7fc:	199b      	adds	r3, r3, r6
    f7fe:	eb4c 060c 	adc.w	r6, ip, ip
    f802:	189b      	adds	r3, r3, r2
    f804:	f840 3f04 	str.w	r3, [r0, #4]!
    f808:	f146 0200 	adc.w	r2, r6, #0
    f80c:	42a9      	cmp	r1, r5
    f80e:	d1f1      	bne.n	f7f4 <smul_2n+0x7e>
    f810:	370c      	adds	r7, #12
    f812:	46bd      	mov	sp, r7
    f814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f818 <ct_inverse_mod_n>:
    f818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f81c:	b09f      	sub	sp, #124	; 0x7c
    f81e:	af02      	add	r7, sp, #8
    f820:	60b8      	str	r0, [r7, #8]
    f822:	607b      	str	r3, [r7, #4]
    f824:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f828:	009b      	lsls	r3, r3, #2
    f82a:	3307      	adds	r3, #7
    f82c:	f023 0307 	bic.w	r3, r3, #7
    f830:	ebad 0d03 	sub.w	sp, sp, r3
    f834:	f10d 0808 	add.w	r8, sp, #8
    f838:	ebad 0d03 	sub.w	sp, sp, r3
    f83c:	ab02      	add	r3, sp, #8
    f83e:	63fb      	str	r3, [r7, #60]	; 0x3c
    f840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f844:	005b      	lsls	r3, r3, #1
    f846:	633b      	str	r3, [r7, #48]	; 0x30
    f848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f84c:	00db      	lsls	r3, r3, #3
    f84e:	643b      	str	r3, [r7, #64]	; 0x40
    f850:	466b      	mov	r3, sp
    f852:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
    f856:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    f85a:	469d      	mov	sp, r3
    f85c:	ab02      	add	r3, sp, #8
    f85e:	63bb      	str	r3, [r7, #56]	; 0x38
    f860:	466b      	mov	r3, sp
    f862:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    f866:	469d      	mov	sp, r3
    f868:	ab02      	add	r3, sp, #8
    f86a:	637b      	str	r3, [r7, #52]	; 0x34
    f86c:	466b      	mov	r3, sp
    f86e:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
    f872:	469d      	mov	sp, r3
    f874:	ab02      	add	r3, sp, #8
    f876:	64fb      	str	r3, [r7, #76]	; 0x4c
    f878:	f030 4440 	bics.w	r4, r0, #3221225472	; 0xc0000000
    f87c:	62fc      	str	r4, [r7, #44]	; 0x2c
    f87e:	d015      	beq.n	f8ac <ct_inverse_mod_n+0x94>
    f880:	1f0b      	subs	r3, r1, #4
    f882:	f1a8 0104 	sub.w	r1, r8, #4
    f886:	00a0      	lsls	r0, r4, #2
    f888:	eb03 0584 	add.w	r5, r3, r4, lsl #2
    f88c:	f853 4f04 	ldr.w	r4, [r3, #4]!
    f890:	f841 4f04 	str.w	r4, [r1, #4]!
    f894:	42ab      	cmp	r3, r5
    f896:	d1f9      	bne.n	f88c <ct_inverse_mod_n+0x74>
    f898:	1f13      	subs	r3, r2, #4
    f89a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f89c:	3a04      	subs	r2, #4
    f89e:	4418      	add	r0, r3
    f8a0:	f853 1f04 	ldr.w	r1, [r3, #4]!
    f8a4:	f842 1f04 	str.w	r1, [r2, #4]!
    f8a8:	4283      	cmp	r3, r0
    f8aa:	d1f9      	bne.n	f8a0 <ct_inverse_mod_n+0x88>
    f8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f8ae:	089c      	lsrs	r4, r3, #2
    f8b0:	2b03      	cmp	r3, #3
    f8b2:	d907      	bls.n	f8c4 <ct_inverse_mod_n+0xac>
    f8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    f8b6:	2300      	movs	r3, #0
    f8b8:	4619      	mov	r1, r3
    f8ba:	f842 1b04 	str.w	r1, [r2], #4
    f8be:	3301      	adds	r3, #1
    f8c0:	429c      	cmp	r4, r3
    f8c2:	d8fa      	bhi.n	f8ba <ct_inverse_mod_n+0xa2>
    f8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    f8c6:	2301      	movs	r3, #1
    f8c8:	6013      	str	r3, [r2, #0]
    f8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f8cc:	2b03      	cmp	r3, #3
    f8ce:	d907      	bls.n	f8e0 <ct_inverse_mod_n+0xc8>
    f8d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    f8d2:	2300      	movs	r3, #0
    f8d4:	4619      	mov	r1, r3
    f8d6:	f842 1b04 	str.w	r1, [r2], #4
    f8da:	3301      	adds	r3, #1
    f8dc:	42a3      	cmp	r3, r4
    f8de:	d3fa      	bcc.n	f8d6 <ct_inverse_mod_n+0xbe>
    f8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f8e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f8e6:	019b      	lsls	r3, r3, #6
    f8e8:	3b02      	subs	r3, #2
    f8ea:	461a      	mov	r2, r3
    f8ec:	60fb      	str	r3, [r7, #12]
    f8ee:	4bbd      	ldr	r3, [pc, #756]	; (fbe4 <ct_inverse_mod_n+0x3cc>)
    f8f0:	fba3 2302 	umull	r2, r3, r3, r2
    f8f4:	091b      	lsrs	r3, r3, #4
    f8f6:	61bb      	str	r3, [r7, #24]
    f8f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f8fc:	1e5a      	subs	r2, r3, #1
    f8fe:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    f902:	62bb      	str	r3, [r7, #40]	; 0x28
    f904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f908:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    f90c:	3b02      	subs	r3, #2
    f90e:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    f912:	6279      	str	r1, [r7, #36]	; 0x24
    f914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    f916:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    f91a:	623a      	str	r2, [r7, #32]
    f91c:	460a      	mov	r2, r1
    f91e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f922:	61fb      	str	r3, [r7, #28]
    f924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f928:	3b02      	subs	r3, #2
    f92a:	eb08 0183 	add.w	r1, r8, r3, lsl #2
    f92e:	6179      	str	r1, [r7, #20]
    f930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    f934:	613b      	str	r3, [r7, #16]
    f936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    f93a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
    f93e:	3d04      	subs	r5, #4
    f940:	2300      	movs	r3, #0
    f942:	647b      	str	r3, [r7, #68]	; 0x44
    f944:	f108 0604 	add.w	r6, r8, #4
    f948:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f94a:	6819      	ldr	r1, [r3, #0]
    f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f94e:	f8d3 c000 	ldr.w	ip, [r3]
    f952:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
    f956:	6a3b      	ldr	r3, [r7, #32]
    f958:	681a      	ldr	r2, [r3, #0]
    f95a:	69fb      	ldr	r3, [r7, #28]
    f95c:	6818      	ldr	r0, [r3, #0]
    f95e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    f962:	2b03      	cmp	r3, #3
    f964:	d029      	beq.n	f9ba <ct_inverse_mod_n+0x1a2>
    f966:	f8d7 a010 	ldr.w	sl, [r7, #16]
    f96a:	f8d7 9014 	ldr.w	r9, [r7, #20]
    f96e:	4663      	mov	r3, ip
    f970:	ea41 0c02 	orr.w	ip, r1, r2
    f974:	f10c 3eff 	add.w	lr, ip, #4294967295
    f978:	ea2e 0c0c 	bic.w	ip, lr, ip
    f97c:	ea81 0e03 	eor.w	lr, r1, r3
    f980:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    f984:	ea81 010e 	eor.w	r1, r1, lr
    f988:	ea82 0e00 	eor.w	lr, r2, r0
    f98c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    f990:	ea82 020e 	eor.w	r2, r2, lr
    f994:	f859 ed04 	ldr.w	lr, [r9, #-4]!
    f998:	ea83 0e0e 	eor.w	lr, r3, lr
    f99c:	ea0e 7eec 	and.w	lr, lr, ip, asr #31
    f9a0:	ea83 030e 	eor.w	r3, r3, lr
    f9a4:	f85a ed04 	ldr.w	lr, [sl, #-4]!
    f9a8:	ea80 0e0e 	eor.w	lr, r0, lr
    f9ac:	ea0e 7cec 	and.w	ip, lr, ip, asr #31
    f9b0:	ea80 000c 	eor.w	r0, r0, ip
    f9b4:	45b1      	cmp	r9, r6
    f9b6:	d1db      	bne.n	f970 <ct_inverse_mod_n+0x158>
    f9b8:	64bb      	str	r3, [r7, #72]	; 0x48
    f9ba:	ea41 0a02 	orr.w	sl, r1, r2
    f9be:	f10a 3cff 	add.w	ip, sl, #4294967295
    f9c2:	ea2c 0c0a 	bic.w	ip, ip, sl
    f9c6:	ea4f 4e1a 	mov.w	lr, sl, lsr #16
    f9ca:	f1ce 0900 	rsb	r9, lr, #0
    f9ce:	ea4f 79e9 	mov.w	r9, r9, asr #31
    f9d2:	f009 0b10 	and.w	fp, r9, #16
    f9d6:	f1bc 0f00 	cmp.w	ip, #0
    f9da:	bfa8      	it	ge
    f9dc:	f10b 0b01 	addge.w	fp, fp, #1
    f9e0:	ea8a 0e0e 	eor.w	lr, sl, lr
    f9e4:	ea0e 0909 	and.w	r9, lr, r9
    f9e8:	ea89 0c0a 	eor.w	ip, r9, sl
    f9ec:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
    f9f0:	f1ce 0900 	rsb	r9, lr, #0
    f9f4:	ea4f 79e9 	mov.w	r9, r9, asr #31
    f9f8:	f009 0a08 	and.w	sl, r9, #8
    f9fc:	44da      	add	sl, fp
    f9fe:	ea8c 0e0e 	eor.w	lr, ip, lr
    fa02:	ea0e 0909 	and.w	r9, lr, r9
    fa06:	ea8c 0909 	eor.w	r9, ip, r9
    fa0a:	ea4f 1e19 	mov.w	lr, r9, lsr #4
    fa0e:	f1ce 0b00 	rsb	fp, lr, #0
    fa12:	ea4f 7beb 	mov.w	fp, fp, asr #31
    fa16:	f00b 0c04 	and.w	ip, fp, #4
    fa1a:	44e2      	add	sl, ip
    fa1c:	ea89 0e0e 	eor.w	lr, r9, lr
    fa20:	ea0e 0e0b 	and.w	lr, lr, fp
    fa24:	ea89 0c0e 	eor.w	ip, r9, lr
    fa28:	ea4f 0e9c 	mov.w	lr, ip, lsr #2
    fa2c:	f1ce 0900 	rsb	r9, lr, #0
    fa30:	ea4f 79e9 	mov.w	r9, r9, asr #31
    fa34:	f009 0b02 	and.w	fp, r9, #2
    fa38:	44da      	add	sl, fp
    fa3a:	ea8c 0e0e 	eor.w	lr, ip, lr
    fa3e:	ea0e 0e09 	and.w	lr, lr, r9
    fa42:	ea8c 0e0e 	eor.w	lr, ip, lr
    fa46:	eb0a 0a5e 	add.w	sl, sl, lr, lsr #1
    fa4a:	f1ca 0e20 	rsb	lr, sl, #32
    fa4e:	f8d8 3000 	ldr.w	r3, [r8]
    fa52:	66bb      	str	r3, [r7, #104]	; 0x68
    fa54:	f1ca 091f 	rsb	r9, sl, #31
    fa58:	ea29 090e 	bic.w	r9, r9, lr
    fa5c:	ea6f 0909 	mvn.w	r9, r9
    fa60:	ea4f 79d9 	mov.w	r9, r9, lsr #31
    fa64:	f1c9 0900 	rsb	r9, r9, #0
    fa68:	f00e 0e1f 	and.w	lr, lr, #31
    fa6c:	f00a 0a1f 	and.w	sl, sl, #31
    fa70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    fa72:	ea09 0303 	and.w	r3, r9, r3
    fa76:	fa23 f30a 	lsr.w	r3, r3, sl
    fa7a:	fa01 f10e 	lsl.w	r1, r1, lr
    fa7e:	4319      	orrs	r1, r3
    fa80:	66f9      	str	r1, [r7, #108]	; 0x6c
    fa82:	f8d7 b03c 	ldr.w	fp, [r7, #60]	; 0x3c
    fa86:	f8db 3000 	ldr.w	r3, [fp]
    fa8a:	663b      	str	r3, [r7, #96]	; 0x60
    fa8c:	ea09 0000 	and.w	r0, r9, r0
    fa90:	fa20 fa0a 	lsr.w	sl, r0, sl
    fa94:	fa02 f20e 	lsl.w	r2, r2, lr
    fa98:	ea4a 0202 	orr.w	r2, sl, r2
    fa9c:	667a      	str	r2, [r7, #100]	; 0x64
    fa9e:	231e      	movs	r3, #30
    faa0:	f107 0260 	add.w	r2, r7, #96	; 0x60
    faa4:	f107 0168 	add.w	r1, r7, #104	; 0x68
    faa8:	f107 0050 	add.w	r0, r7, #80	; 0x50
    faac:	f7fc fe9c 	bl	c7e8 <inner_loop_n>
    fab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    fab4:	9301      	str	r3, [sp, #4]
    fab6:	f107 0354 	add.w	r3, r7, #84	; 0x54
    faba:	9300      	str	r3, [sp, #0]
    fabc:	465b      	mov	r3, fp
    fabe:	f107 0250 	add.w	r2, r7, #80	; 0x50
    fac2:	4641      	mov	r1, r8
    fac4:	f8d7 904c 	ldr.w	r9, [r7, #76]	; 0x4c
    fac8:	4648      	mov	r0, r9
    faca:	f7fd fcc0 	bl	d44e <smul_n_shift_n>
    face:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    fad2:	9301      	str	r3, [sp, #4]
    fad4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
    fad8:	9300      	str	r3, [sp, #0]
    fada:	465b      	mov	r3, fp
    fadc:	f107 0258 	add.w	r2, r7, #88	; 0x58
    fae0:	4641      	mov	r1, r8
    fae2:	4658      	mov	r0, fp
    fae4:	f7fd fcb3 	bl	d44e <smul_n_shift_n>
    fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    faea:	b14b      	cbz	r3, fb00 <ct_inverse_mod_n+0x2e8>
    faec:	f1a9 0304 	sub.w	r3, r9, #4
    faf0:	f1a8 0204 	sub.w	r2, r8, #4
    faf4:	f853 1f04 	ldr.w	r1, [r3, #4]!
    faf8:	f842 1f04 	str.w	r1, [r2, #4]!
    fafc:	42ab      	cmp	r3, r5
    fafe:	d1f9      	bne.n	faf4 <ct_inverse_mod_n+0x2dc>
    fb00:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
    fb04:	f8cd b004 	str.w	fp, [sp, #4]
    fb08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fb0a:	9300      	str	r3, [sp, #0]
    fb0c:	f8d7 9034 	ldr.w	r9, [r7, #52]	; 0x34
    fb10:	464b      	mov	r3, r9
    fb12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    fb14:	f8d7 a038 	ldr.w	sl, [r7, #56]	; 0x38
    fb18:	4651      	mov	r1, sl
    fb1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    fb1c:	f7ff fe2b 	bl	f776 <smul_2n>
    fb20:	f8cd b004 	str.w	fp, [sp, #4]
    fb24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fb26:	9300      	str	r3, [sp, #0]
    fb28:	464b      	mov	r3, r9
    fb2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    fb2c:	4651      	mov	r1, sl
    fb2e:	4648      	mov	r0, r9
    fb30:	f7ff fe21 	bl	f776 <smul_2n>
    fb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fb36:	2b03      	cmp	r3, #3
    fb38:	d90b      	bls.n	fb52 <ct_inverse_mod_n+0x33a>
    fb3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    fb3c:	1f19      	subs	r1, r3, #4
    fb3e:	f1aa 0204 	sub.w	r2, sl, #4
    fb42:	2300      	movs	r3, #0
    fb44:	f851 0f04 	ldr.w	r0, [r1, #4]!
    fb48:	f842 0f04 	str.w	r0, [r2, #4]!
    fb4c:	3301      	adds	r3, #1
    fb4e:	429c      	cmp	r4, r3
    fb50:	d8f8      	bhi.n	fb44 <ct_inverse_mod_n+0x32c>
    fb52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    fb54:	3301      	adds	r3, #1
    fb56:	647b      	str	r3, [r7, #68]	; 0x44
    fb58:	69ba      	ldr	r2, [r7, #24]
    fb5a:	4293      	cmp	r3, r2
    fb5c:	f4ff aef4 	bcc.w	f948 <ct_inverse_mod_n+0x130>
    fb60:	4b20      	ldr	r3, [pc, #128]	; (fbe4 <ct_inverse_mod_n+0x3cc>)
    fb62:	68f9      	ldr	r1, [r7, #12]
    fb64:	fba3 2301 	umull	r2, r3, r3, r1
    fb68:	f023 020f 	bic.w	r2, r3, #15
    fb6c:	eba2 1313 	sub.w	r3, r2, r3, lsr #4
    fb70:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    fb74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fb76:	4641      	mov	r1, r8
    fb78:	f107 0050 	add.w	r0, r7, #80	; 0x50
    fb7c:	f7fc fe34 	bl	c7e8 <inner_loop_n>
    fb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fb82:	9301      	str	r3, [sp, #4]
    fb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    fb86:	9300      	str	r3, [sp, #0]
    fb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    fb8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fb8e:	68bc      	ldr	r4, [r7, #8]
    fb90:	4620      	mov	r0, r4
    fb92:	f7ff fdf0 	bl	f776 <smul_2n>
    fb96:	4622      	mov	r2, r4
    fb98:	6c38      	ldr	r0, [r7, #64]	; 0x40
    fb9a:	1823      	adds	r3, r4, r0
    fb9c:	f853 4c04 	ldr.w	r4, [r3, #-4]
    fba0:	17e4      	asrs	r4, r4, #31
    fba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    fba6:	b1cb      	cbz	r3, fbdc <ct_inverse_mod_n+0x3c4>
    fba8:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
    fbac:	3901      	subs	r1, #1
    fbae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    fbb2:	687b      	ldr	r3, [r7, #4]
    fbb4:	1f1e      	subs	r6, r3, #4
    fbb6:	f1a2 0c04 	sub.w	ip, r2, #4
    fbba:	4484      	add	ip, r0
    fbbc:	2200      	movs	r2, #0
    fbbe:	4615      	mov	r5, r2
    fbc0:	f856 3f04 	ldr.w	r3, [r6, #4]!
    fbc4:	4023      	ands	r3, r4
    fbc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
    fbca:	1880      	adds	r0, r0, r2
    fbcc:	eb45 0205 	adc.w	r2, r5, r5
    fbd0:	181b      	adds	r3, r3, r0
    fbd2:	600b      	str	r3, [r1, #0]
    fbd4:	f142 0200 	adc.w	r2, r2, #0
    fbd8:	4561      	cmp	r1, ip
    fbda:	d1f1      	bne.n	fbc0 <ct_inverse_mod_n+0x3a8>
    fbdc:	3774      	adds	r7, #116	; 0x74
    fbde:	46bd      	mov	sp, r7
    fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbe4:	88888889 	.word	0x88888889

0000fbe8 <blst_p1_cneg>:
    fbe8:	b508      	push	{r3, lr}
    fbea:	1e4b      	subs	r3, r1, #1
    fbec:	ea23 0101 	bic.w	r1, r3, r1
    fbf0:	43c9      	mvns	r1, r1
    fbf2:	0fc9      	lsrs	r1, r1, #31
    fbf4:	f7fd ff86 	bl	db04 <POINTonE1_cneg>
    fbf8:	bd08      	pop	{r3, pc}

0000fbfa <blst_p1_from_affine>:
    fbfa:	b430      	push	{r4, r5}
    fbfc:	1f0a      	subs	r2, r1, #4
    fbfe:	f1a0 0c04 	sub.w	ip, r0, #4
    fc02:	f101 045c 	add.w	r4, r1, #92	; 0x5c
    fc06:	4613      	mov	r3, r2
    fc08:	f853 5f04 	ldr.w	r5, [r3, #4]!
    fc0c:	f84c 5f04 	str.w	r5, [ip, #4]!
    fc10:	42a3      	cmp	r3, r4
    fc12:	d1f9      	bne.n	fc08 <blst_p1_from_affine+0xe>
    fc14:	4613      	mov	r3, r2
    fc16:	f04f 0c00 	mov.w	ip, #0
    fc1a:	f853 5f04 	ldr.w	r5, [r3, #4]!
    fc1e:	ea4c 0c05 	orr.w	ip, ip, r5
    fc22:	42a3      	cmp	r3, r4
    fc24:	d1f9      	bne.n	fc1a <blst_p1_from_affine+0x20>
    fc26:	f10c 33ff 	add.w	r3, ip, #4294967295
    fc2a:	ea23 0c0c 	bic.w	ip, r3, ip
    fc2e:	ea4f 7cec 	mov.w	ip, ip, asr #31
    fc32:	4c09      	ldr	r4, [pc, #36]	; (fc58 <blst_p1_from_affine+0x5e>)
    fc34:	305c      	adds	r0, #92	; 0x5c
    fc36:	f101 052c 	add.w	r5, r1, #44	; 0x2c
    fc3a:	f854 1b04 	ldr.w	r1, [r4], #4
    fc3e:	f852 3f04 	ldr.w	r3, [r2, #4]!
    fc42:	404b      	eors	r3, r1
    fc44:	ea03 030c 	and.w	r3, r3, ip
    fc48:	404b      	eors	r3, r1
    fc4a:	f840 3f04 	str.w	r3, [r0, #4]!
    fc4e:	42aa      	cmp	r2, r5
    fc50:	d1f3      	bne.n	fc3a <blst_p1_from_affine+0x40>
    fc52:	bc30      	pop	{r4, r5}
    fc54:	4770      	bx	lr
    fc56:	bf00      	nop
    fc58:	00024198 	.word	0x00024198

0000fc5c <blst_p1_affine_on_curve>:
    fc5c:	b508      	push	{r3, lr}
    fc5e:	f7fd fea3 	bl	d9a8 <POINTonE1_affine_on_curve>
    fc62:	bd08      	pop	{r3, pc}

0000fc64 <blst_p1_on_curve>:
    fc64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc68:	b0a7      	sub	sp, #156	; 0x9c
    fc6a:	4605      	mov	r5, r0
    fc6c:	f100 0760 	add.w	r7, r0, #96	; 0x60
    fc70:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    fc74:	f100 028c 	add.w	r2, r0, #140	; 0x8c
    fc78:	f04f 0c00 	mov.w	ip, #0
    fc7c:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fc80:	ea4c 0c04 	orr.w	ip, ip, r4
    fc84:	4293      	cmp	r3, r2
    fc86:	d1f9      	bne.n	fc7c <blst_p1_on_curve+0x18>
    fc88:	f10c 36ff 	add.w	r6, ip, #4294967295
    fc8c:	ea26 0c0c 	bic.w	ip, r6, ip
    fc90:	ea4f 76dc 	mov.w	r6, ip, lsr #31
    fc94:	4c32      	ldr	r4, [pc, #200]	; (fd60 <blst_p1_on_curve+0xfc>)
    fc96:	f04f 080c 	mov.w	r8, #12
    fc9a:	f8cd 8004 	str.w	r8, [sp, #4]
    fc9e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; fd64 <blst_p1_on_curve+0x100>
    fca2:	f8cd 9000 	str.w	r9, [sp]
    fca6:	4623      	mov	r3, r4
    fca8:	463a      	mov	r2, r7
    fcaa:	4639      	mov	r1, r7
    fcac:	a81a      	add	r0, sp, #104	; 0x68
    fcae:	f7fc fe8f 	bl	c9d0 <mul_mont_n>
    fcb2:	f8cd 8004 	str.w	r8, [sp, #4]
    fcb6:	f8cd 9000 	str.w	r9, [sp]
    fcba:	4623      	mov	r3, r4
    fcbc:	463a      	mov	r2, r7
    fcbe:	a91a      	add	r1, sp, #104	; 0x68
    fcc0:	4608      	mov	r0, r1
    fcc2:	f7fc fe85 	bl	c9d0 <mul_mont_n>
    fcc6:	f8cd 8004 	str.w	r8, [sp, #4]
    fcca:	f8cd 9000 	str.w	r9, [sp]
    fcce:	4623      	mov	r3, r4
    fcd0:	aa1a      	add	r2, sp, #104	; 0x68
    fcd2:	4611      	mov	r1, r2
    fcd4:	4610      	mov	r0, r2
    fcd6:	f7fc fe7b 	bl	c9d0 <mul_mont_n>
    fcda:	f8cd 8000 	str.w	r8, [sp]
    fcde:	4623      	mov	r3, r4
    fce0:	2202      	movs	r2, #2
    fce2:	a91a      	add	r1, sp, #104	; 0x68
    fce4:	4608      	mov	r0, r1
    fce6:	f7fd f943 	bl	cf70 <lshift_mod_n>
    fcea:	f8cd 8004 	str.w	r8, [sp, #4]
    fcee:	f8cd 9000 	str.w	r9, [sp]
    fcf2:	4623      	mov	r3, r4
    fcf4:	462a      	mov	r2, r5
    fcf6:	4629      	mov	r1, r5
    fcf8:	a802      	add	r0, sp, #8
    fcfa:	f7fc fe69 	bl	c9d0 <mul_mont_n>
    fcfe:	f8cd 8004 	str.w	r8, [sp, #4]
    fd02:	f8cd 9000 	str.w	r9, [sp]
    fd06:	4623      	mov	r3, r4
    fd08:	462a      	mov	r2, r5
    fd0a:	a902      	add	r1, sp, #8
    fd0c:	4608      	mov	r0, r1
    fd0e:	f7fc fe5f 	bl	c9d0 <mul_mont_n>
    fd12:	f8cd 8000 	str.w	r8, [sp]
    fd16:	4623      	mov	r3, r4
    fd18:	aa1a      	add	r2, sp, #104	; 0x68
    fd1a:	a902      	add	r1, sp, #8
    fd1c:	4608      	mov	r0, r1
    fd1e:	f7fc ffff 	bl	cd20 <add_mod_n>
    fd22:	f105 0130 	add.w	r1, r5, #48	; 0x30
    fd26:	f8cd 8004 	str.w	r8, [sp, #4]
    fd2a:	f8cd 9000 	str.w	r9, [sp]
    fd2e:	4623      	mov	r3, r4
    fd30:	460a      	mov	r2, r1
    fd32:	a80e      	add	r0, sp, #56	; 0x38
    fd34:	f7fc fe4c 	bl	c9d0 <mul_mont_n>
    fd38:	aa02      	add	r2, sp, #8
    fd3a:	a90e      	add	r1, sp, #56	; 0x38
    fd3c:	460d      	mov	r5, r1
    fd3e:	2000      	movs	r0, #0
    fd40:	f852 3b04 	ldr.w	r3, [r2], #4
    fd44:	f851 4b04 	ldr.w	r4, [r1], #4
    fd48:	4063      	eors	r3, r4
    fd4a:	4318      	orrs	r0, r3
    fd4c:	42aa      	cmp	r2, r5
    fd4e:	d1f7      	bne.n	fd40 <blst_p1_on_curve+0xdc>
    fd50:	1e43      	subs	r3, r0, #1
    fd52:	ea23 0000 	bic.w	r0, r3, r0
    fd56:	ea46 70d0 	orr.w	r0, r6, r0, lsr #31
    fd5a:	b027      	add	sp, #156	; 0x9c
    fd5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fd60:	00024108 	.word	0x00024108
    fd64:	fffcfffd 	.word	0xfffcfffd

0000fd68 <blst_p1_affine_serialize>:
    fd68:	b510      	push	{r4, lr}
    fd6a:	1f0b      	subs	r3, r1, #4
    fd6c:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    fd70:	2200      	movs	r2, #0
    fd72:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fd76:	4322      	orrs	r2, r4
    fd78:	4563      	cmp	r3, ip
    fd7a:	d1fa      	bne.n	fd72 <blst_p1_affine_serialize+0xa>
    fd7c:	1e53      	subs	r3, r2, #1
    fd7e:	4393      	bics	r3, r2
    fd80:	d50a      	bpl.n	fd98 <blst_p1_affine_serialize+0x30>
    fd82:	1e43      	subs	r3, r0, #1
    fd84:	f100 015f 	add.w	r1, r0, #95	; 0x5f
    fd88:	2200      	movs	r2, #0
    fd8a:	f803 2f01 	strb.w	r2, [r3, #1]!
    fd8e:	428b      	cmp	r3, r1
    fd90:	d1fb      	bne.n	fd8a <blst_p1_affine_serialize+0x22>
    fd92:	2340      	movs	r3, #64	; 0x40
    fd94:	7003      	strb	r3, [r0, #0]
    fd96:	bd10      	pop	{r4, pc}
    fd98:	f7fd fc86 	bl	d6a8 <POINTonE1_affine_Serialize_BE>
    fd9c:	e7fb      	b.n	fd96 <blst_p1_affine_serialize+0x2e>

0000fd9e <blst_p1_affine_compress>:
    fd9e:	b538      	push	{r3, r4, r5, lr}
    fda0:	4605      	mov	r5, r0
    fda2:	1f0b      	subs	r3, r1, #4
    fda4:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
    fda8:	2200      	movs	r2, #0
    fdaa:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fdae:	4322      	orrs	r2, r4
    fdb0:	4563      	cmp	r3, ip
    fdb2:	d1fa      	bne.n	fdaa <blst_p1_affine_compress+0xc>
    fdb4:	1e53      	subs	r3, r2, #1
    fdb6:	4393      	bics	r3, r2
    fdb8:	d50a      	bpl.n	fdd0 <blst_p1_affine_compress+0x32>
    fdba:	1e6b      	subs	r3, r5, #1
    fdbc:	f105 012f 	add.w	r1, r5, #47	; 0x2f
    fdc0:	2200      	movs	r2, #0
    fdc2:	f803 2f01 	strb.w	r2, [r3, #1]!
    fdc6:	428b      	cmp	r3, r1
    fdc8:	d1fb      	bne.n	fdc2 <blst_p1_affine_compress+0x24>
    fdca:	23c0      	movs	r3, #192	; 0xc0
    fdcc:	702b      	strb	r3, [r5, #0]
    fdce:	bd38      	pop	{r3, r4, r5, pc}
    fdd0:	4628      	mov	r0, r5
    fdd2:	f7fd fc34 	bl	d63e <POINTonE1_affine_Compress_BE>
    fdd6:	0103      	lsls	r3, r0, #4
    fdd8:	f003 0320 	and.w	r3, r3, #32
    fddc:	782a      	ldrb	r2, [r5, #0]
    fdde:	4313      	orrs	r3, r2
    fde0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fde4:	702b      	strb	r3, [r5, #0]
    fde6:	e7f2      	b.n	fdce <blst_p1_affine_compress+0x30>

0000fde8 <blst_p1_is_equal>:
    fde8:	b508      	push	{r3, lr}
    fdea:	f7fd ffb4 	bl	dd56 <POINTonE1_is_equal>
    fdee:	bd08      	pop	{r3, pc}

0000fdf0 <blst_p1_is_inf>:
    fdf0:	f100 035c 	add.w	r3, r0, #92	; 0x5c
    fdf4:	f100 018c 	add.w	r1, r0, #140	; 0x8c
    fdf8:	2000      	movs	r0, #0
    fdfa:	f853 2f04 	ldr.w	r2, [r3, #4]!
    fdfe:	4310      	orrs	r0, r2
    fe00:	428b      	cmp	r3, r1
    fe02:	d1fa      	bne.n	fdfa <blst_p1_is_inf+0xa>
    fe04:	1e43      	subs	r3, r0, #1
    fe06:	ea23 0000 	bic.w	r0, r3, r0
    fe0a:	0fc0      	lsrs	r0, r0, #31
    fe0c:	4770      	bx	lr

0000fe0e <blst_p1_generator>:
    fe0e:	4801      	ldr	r0, [pc, #4]	; (fe14 <blst_p1_generator+0x6>)
    fe10:	4770      	bx	lr
    fe12:	bf00      	nop
    fe14:	00024df8 	.word	0x00024df8

0000fe18 <blst_p1_affine_is_inf>:
    fe18:	1f03      	subs	r3, r0, #4
    fe1a:	f100 015c 	add.w	r1, r0, #92	; 0x5c
    fe1e:	2000      	movs	r0, #0
    fe20:	f853 2f04 	ldr.w	r2, [r3, #4]!
    fe24:	4310      	orrs	r0, r2
    fe26:	428b      	cmp	r3, r1
    fe28:	d1fa      	bne.n	fe20 <blst_p1_affine_is_inf+0x8>
    fe2a:	1e43      	subs	r3, r0, #1
    fe2c:	ea23 0000 	bic.w	r0, r3, r0
    fe30:	0fc0      	lsrs	r0, r0, #31
    fe32:	4770      	bx	lr

0000fe34 <blst_p1_affine_generator>:
    fe34:	4800      	ldr	r0, [pc, #0]	; (fe38 <blst_p1_affine_generator+0x4>)
    fe36:	4770      	bx	lr
    fe38:	00024df8 	.word	0x00024df8

0000fe3c <blst_p1_in_g1>:
    fe3c:	b508      	push	{r3, lr}
    fe3e:	f7ff fbf5 	bl	f62c <POINTonE1_in_G1>
    fe42:	bd08      	pop	{r3, pc}

0000fe44 <blst_p1_affine_in_g1>:
    fe44:	b510      	push	{r4, lr}
    fe46:	b0a4      	sub	sp, #144	; 0x90
    fe48:	1f02      	subs	r2, r0, #4
    fe4a:	466b      	mov	r3, sp
    fe4c:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
    fe50:	4611      	mov	r1, r2
    fe52:	f851 4f04 	ldr.w	r4, [r1, #4]!
    fe56:	f843 4b04 	str.w	r4, [r3], #4
    fe5a:	4563      	cmp	r3, ip
    fe5c:	d1f9      	bne.n	fe52 <blst_p1_affine_in_g1+0xe>
    fe5e:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
    fe62:	4613      	mov	r3, r2
    fe64:	2100      	movs	r1, #0
    fe66:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fe6a:	4321      	orrs	r1, r4
    fe6c:	4563      	cmp	r3, ip
    fe6e:	d1fa      	bne.n	fe66 <blst_p1_affine_in_g1+0x22>
    fe70:	f101 3eff 	add.w	lr, r1, #4294967295
    fe74:	ea2e 0101 	bic.w	r1, lr, r1
    fe78:	ea4f 7ee1 	mov.w	lr, r1, asr #31
    fe7c:	4c0a      	ldr	r4, [pc, #40]	; (fea8 <blst_p1_affine_in_g1+0x64>)
    fe7e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
    fe82:	302c      	adds	r0, #44	; 0x2c
    fe84:	f854 1b04 	ldr.w	r1, [r4], #4
    fe88:	f852 3f04 	ldr.w	r3, [r2, #4]!
    fe8c:	404b      	eors	r3, r1
    fe8e:	ea03 030e 	and.w	r3, r3, lr
    fe92:	404b      	eors	r3, r1
    fe94:	f84c 3f04 	str.w	r3, [ip, #4]!
    fe98:	4282      	cmp	r2, r0
    fe9a:	d1f3      	bne.n	fe84 <blst_p1_affine_in_g1+0x40>
    fe9c:	4668      	mov	r0, sp
    fe9e:	f7ff fbc5 	bl	f62c <POINTonE1_in_G1>
    fea2:	b024      	add	sp, #144	; 0x90
    fea4:	bd10      	pop	{r4, pc}
    fea6:	bf00      	nop
    fea8:	00024198 	.word	0x00024198

0000feac <blst_p2_cneg>:
    feac:	b508      	push	{r3, lr}
    feae:	1e4b      	subs	r3, r1, #1
    feb0:	ea23 0101 	bic.w	r1, r3, r1
    feb4:	43c9      	mvns	r1, r1
    feb6:	0fc9      	lsrs	r1, r1, #31
    feb8:	f7fd fe90 	bl	dbdc <POINTonE2_cneg>
    febc:	bd08      	pop	{r3, pc}

0000febe <blst_p2_from_affine>:
    febe:	b510      	push	{r4, lr}
    fec0:	f1a1 0c04 	sub.w	ip, r1, #4
    fec4:	1f02      	subs	r2, r0, #4
    fec6:	31bc      	adds	r1, #188	; 0xbc
    fec8:	4663      	mov	r3, ip
    feca:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fece:	f842 4f04 	str.w	r4, [r2, #4]!
    fed2:	428b      	cmp	r3, r1
    fed4:	d1f9      	bne.n	feca <blst_p2_from_affine+0xc>
    fed6:	4663      	mov	r3, ip
    fed8:	2200      	movs	r2, #0
    feda:	f853 4f04 	ldr.w	r4, [r3, #4]!
    fede:	4322      	orrs	r2, r4
    fee0:	428b      	cmp	r3, r1
    fee2:	d1fa      	bne.n	feda <blst_p2_from_affine+0x1c>
    fee4:	1e54      	subs	r4, r2, #1
    fee6:	ea24 0202 	bic.w	r2, r4, r2
    feea:	17d4      	asrs	r4, r2, #31
    feec:	4b08      	ldr	r3, [pc, #32]	; (ff10 <blst_p2_from_affine+0x52>)
    feee:	f103 0290 	add.w	r2, r3, #144	; 0x90
    fef2:	30bc      	adds	r0, #188	; 0xbc
    fef4:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
    fef8:	f852 1b04 	ldr.w	r1, [r2], #4
    fefc:	f85c 3f04 	ldr.w	r3, [ip, #4]!
    ff00:	404b      	eors	r3, r1
    ff02:	4023      	ands	r3, r4
    ff04:	404b      	eors	r3, r1
    ff06:	f840 3f04 	str.w	r3, [r0, #4]!
    ff0a:	4572      	cmp	r2, lr
    ff0c:	d1f4      	bne.n	fef8 <blst_p2_from_affine+0x3a>
    ff0e:	bd10      	pop	{r4, pc}
    ff10:	00024108 	.word	0x00024108

0000ff14 <blst_p2_affine_serialize>:
    ff14:	b510      	push	{r4, lr}
    ff16:	1f0b      	subs	r3, r1, #4
    ff18:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
    ff1c:	2200      	movs	r2, #0
    ff1e:	f853 4f04 	ldr.w	r4, [r3, #4]!
    ff22:	4322      	orrs	r2, r4
    ff24:	4563      	cmp	r3, ip
    ff26:	d1fa      	bne.n	ff1e <blst_p2_affine_serialize+0xa>
    ff28:	1e53      	subs	r3, r2, #1
    ff2a:	4393      	bics	r3, r2
    ff2c:	d50a      	bpl.n	ff44 <blst_p2_affine_serialize+0x30>
    ff2e:	1e43      	subs	r3, r0, #1
    ff30:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
    ff34:	2200      	movs	r2, #0
    ff36:	f803 2f01 	strb.w	r2, [r3, #1]!
    ff3a:	428b      	cmp	r3, r1
    ff3c:	d1fb      	bne.n	ff36 <blst_p2_affine_serialize+0x22>
    ff3e:	2340      	movs	r3, #64	; 0x40
    ff40:	7003      	strb	r3, [r0, #0]
    ff42:	bd10      	pop	{r4, pc}
    ff44:	f7fd fc80 	bl	d848 <POINTonE2_affine_Serialize_BE>
    ff48:	e7fb      	b.n	ff42 <blst_p2_affine_serialize+0x2e>

0000ff4a <blst_p2_affine_compress>:
    ff4a:	b538      	push	{r3, r4, r5, lr}
    ff4c:	4605      	mov	r5, r0
    ff4e:	1f0b      	subs	r3, r1, #4
    ff50:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
    ff54:	2200      	movs	r2, #0
    ff56:	f853 4f04 	ldr.w	r4, [r3, #4]!
    ff5a:	4322      	orrs	r2, r4
    ff5c:	4563      	cmp	r3, ip
    ff5e:	d1fa      	bne.n	ff56 <blst_p2_affine_compress+0xc>
    ff60:	1e53      	subs	r3, r2, #1
    ff62:	4393      	bics	r3, r2
    ff64:	d50a      	bpl.n	ff7c <blst_p2_affine_compress+0x32>
    ff66:	1e6b      	subs	r3, r5, #1
    ff68:	f105 015f 	add.w	r1, r5, #95	; 0x5f
    ff6c:	2200      	movs	r2, #0
    ff6e:	f803 2f01 	strb.w	r2, [r3, #1]!
    ff72:	428b      	cmp	r3, r1
    ff74:	d1fb      	bne.n	ff6e <blst_p2_affine_compress+0x24>
    ff76:	23c0      	movs	r3, #192	; 0xc0
    ff78:	702b      	strb	r3, [r5, #0]
    ff7a:	bd38      	pop	{r3, r4, r5, pc}
    ff7c:	4628      	mov	r0, r5
    ff7e:	f7fd fbdb 	bl	d738 <POINTonE2_affine_Compress_BE>
    ff82:	0103      	lsls	r3, r0, #4
    ff84:	f003 0320 	and.w	r3, r3, #32
    ff88:	782a      	ldrb	r2, [r5, #0]
    ff8a:	4313      	orrs	r3, r2
    ff8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ff90:	702b      	strb	r3, [r5, #0]
    ff92:	e7f2      	b.n	ff7a <blst_p2_affine_compress+0x30>

0000ff94 <blst_p2_is_inf>:
    ff94:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
    ff98:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    ff9c:	2000      	movs	r0, #0
    ff9e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ffa2:	4310      	orrs	r0, r2
    ffa4:	428b      	cmp	r3, r1
    ffa6:	d1fa      	bne.n	ff9e <blst_p2_is_inf+0xa>
    ffa8:	1e43      	subs	r3, r0, #1
    ffaa:	ea23 0000 	bic.w	r0, r3, r0
    ffae:	0fc0      	lsrs	r0, r0, #31
    ffb0:	4770      	bx	lr

0000ffb2 <blst_p2_generator>:
    ffb2:	4801      	ldr	r0, [pc, #4]	; (ffb8 <blst_p2_generator+0x6>)
    ffb4:	4770      	bx	lr
    ffb6:	bf00      	nop
    ffb8:	00024e88 	.word	0x00024e88

0000ffbc <blst_p2_affine_is_inf>:
    ffbc:	1f03      	subs	r3, r0, #4
    ffbe:	f100 01bc 	add.w	r1, r0, #188	; 0xbc
    ffc2:	2000      	movs	r0, #0
    ffc4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    ffc8:	4310      	orrs	r0, r2
    ffca:	428b      	cmp	r3, r1
    ffcc:	d1fa      	bne.n	ffc4 <blst_p2_affine_is_inf+0x8>
    ffce:	1e43      	subs	r3, r0, #1
    ffd0:	ea23 0000 	bic.w	r0, r3, r0
    ffd4:	0fc0      	lsrs	r0, r0, #31
    ffd6:	4770      	bx	lr

0000ffd8 <blst_p2_affine_generator>:
    ffd8:	4800      	ldr	r0, [pc, #0]	; (ffdc <blst_p2_affine_generator+0x4>)
    ffda:	4770      	bx	lr
    ffdc:	00024e88 	.word	0x00024e88

0000ffe0 <blst_fp12_conjugate>:
    ffe0:	b508      	push	{r3, lr}
    ffe2:	f7fd feb1 	bl	dd48 <conjugate_fp12>
    ffe6:	bd08      	pop	{r3, pc}

0000ffe8 <blst_fp12_is_equal>:
    ffe8:	b410      	push	{r4}
    ffea:	1f02      	subs	r2, r0, #4
    ffec:	3904      	subs	r1, #4
    ffee:	f500 7c0f 	add.w	ip, r0, #572	; 0x23c
    fff2:	2000      	movs	r0, #0
    fff4:	f852 3f04 	ldr.w	r3, [r2, #4]!
    fff8:	f851 4f04 	ldr.w	r4, [r1, #4]!
    fffc:	4063      	eors	r3, r4
    fffe:	4318      	orrs	r0, r3
   10000:	4562      	cmp	r2, ip
   10002:	d1f7      	bne.n	fff4 <blst_fp12_is_equal+0xc>
   10004:	1e43      	subs	r3, r0, #1
   10006:	ea23 0000 	bic.w	r0, r3, r0
   1000a:	0fc0      	lsrs	r0, r0, #31
   1000c:	bc10      	pop	{r4}
   1000e:	4770      	bx	lr

00010010 <blst_fp12_is_one>:
   10010:	b510      	push	{r4, lr}
   10012:	f1a0 0c04 	sub.w	ip, r0, #4
   10016:	4b12      	ldr	r3, [pc, #72]	; (10060 <blst_fp12_is_one+0x50>)
   10018:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1001c:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   10020:	2100      	movs	r1, #0
   10022:	f852 3b04 	ldr.w	r3, [r2], #4
   10026:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   1002a:	4063      	eors	r3, r4
   1002c:	4319      	orrs	r1, r3
   1002e:	4572      	cmp	r2, lr
   10030:	d1f7      	bne.n	10022 <blst_fp12_is_one+0x12>
   10032:	f101 3cff 	add.w	ip, r1, #4294967295
   10036:	ea2c 0101 	bic.w	r1, ip, r1
   1003a:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   1003e:	f100 035c 	add.w	r3, r0, #92	; 0x5c
   10042:	f500 740f 	add.w	r4, r0, #572	; 0x23c
   10046:	2200      	movs	r2, #0
   10048:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1004c:	430a      	orrs	r2, r1
   1004e:	42a3      	cmp	r3, r4
   10050:	d1fa      	bne.n	10048 <blst_fp12_is_one+0x38>
   10052:	1e50      	subs	r0, r2, #1
   10054:	ea20 0002 	bic.w	r0, r0, r2
   10058:	ea0c 70d0 	and.w	r0, ip, r0, lsr #31
   1005c:	bd10      	pop	{r4, pc}
   1005e:	bf00      	nop
   10060:	00024108 	.word	0x00024108

00010064 <blst_fp12_one>:
   10064:	4800      	ldr	r0, [pc, #0]	; (10068 <blst_fp12_one+0x4>)
   10066:	4770      	bx	lr
   10068:	00024198 	.word	0x00024198

0001006c <blst_pairing_sizeof>:
   1006c:	f44f 6047 	mov.w	r0, #3184	; 0xc70
   10070:	4770      	bx	lr

00010072 <blst_pairing_init>:
   10072:	2900      	cmp	r1, #0
   10074:	bf14      	ite	ne
   10076:	2140      	movne	r1, #64	; 0x40
   10078:	2100      	moveq	r1, #0
   1007a:	6001      	str	r1, [r0, #0]
   1007c:	2100      	movs	r1, #0
   1007e:	6041      	str	r1, [r0, #4]
   10080:	f500 6147 	add.w	r1, r0, #3184	; 0xc70
   10084:	4291      	cmp	r1, r2
   10086:	bf08      	it	eq
   10088:	222a      	moveq	r2, #42	; 0x2a
   1008a:	6082      	str	r2, [r0, #8]
   1008c:	60c3      	str	r3, [r0, #12]
   1008e:	4770      	bx	lr

00010090 <blst_pairing_get_dst>:
   10090:	4603      	mov	r3, r0
   10092:	6880      	ldr	r0, [r0, #8]
   10094:	282a      	cmp	r0, #42	; 0x2a
   10096:	bf08      	it	eq
   10098:	f503 6047 	addeq.w	r0, r3, #3184	; 0xc70
   1009c:	4770      	bx	lr

0001009e <mul_mont_sparse_256>:
   1009e:	b510      	push	{r4, lr}
   100a0:	b082      	sub	sp, #8
   100a2:	2408      	movs	r4, #8
   100a4:	9401      	str	r4, [sp, #4]
   100a6:	9c04      	ldr	r4, [sp, #16]
   100a8:	9400      	str	r4, [sp, #0]
   100aa:	f7fc fc91 	bl	c9d0 <mul_mont_n>
   100ae:	b002      	add	sp, #8
   100b0:	bd10      	pop	{r4, pc}

000100b2 <sqr_mont_sparse_256>:
   100b2:	b510      	push	{r4, lr}
   100b4:	b082      	sub	sp, #8
   100b6:	2408      	movs	r4, #8
   100b8:	9401      	str	r4, [sp, #4]
   100ba:	9300      	str	r3, [sp, #0]
   100bc:	4613      	mov	r3, r2
   100be:	460a      	mov	r2, r1
   100c0:	f7fc fc86 	bl	c9d0 <mul_mont_n>
   100c4:	b002      	add	sp, #8
   100c6:	bd10      	pop	{r4, pc}

000100c8 <mul_mont_384>:
   100c8:	b510      	push	{r4, lr}
   100ca:	b082      	sub	sp, #8
   100cc:	240c      	movs	r4, #12
   100ce:	9401      	str	r4, [sp, #4]
   100d0:	9c04      	ldr	r4, [sp, #16]
   100d2:	9400      	str	r4, [sp, #0]
   100d4:	f7fc fc7c 	bl	c9d0 <mul_mont_n>
   100d8:	b002      	add	sp, #8
   100da:	bd10      	pop	{r4, pc}

000100dc <sqr_mont_384>:
   100dc:	b510      	push	{r4, lr}
   100de:	b082      	sub	sp, #8
   100e0:	240c      	movs	r4, #12
   100e2:	9401      	str	r4, [sp, #4]
   100e4:	9300      	str	r3, [sp, #0]
   100e6:	4613      	mov	r3, r2
   100e8:	460a      	mov	r2, r1
   100ea:	f7fc fc71 	bl	c9d0 <mul_mont_n>
   100ee:	b002      	add	sp, #8
   100f0:	bd10      	pop	{r4, pc}

000100f2 <add_mod_256>:
   100f2:	b510      	push	{r4, lr}
   100f4:	b082      	sub	sp, #8
   100f6:	2408      	movs	r4, #8
   100f8:	9400      	str	r4, [sp, #0]
   100fa:	f7fc fe11 	bl	cd20 <add_mod_n>
   100fe:	b002      	add	sp, #8
   10100:	bd10      	pop	{r4, pc}

00010102 <add_mod_384>:
   10102:	b510      	push	{r4, lr}
   10104:	b082      	sub	sp, #8
   10106:	240c      	movs	r4, #12
   10108:	9400      	str	r4, [sp, #0]
   1010a:	f7fc fe09 	bl	cd20 <add_mod_n>
   1010e:	b002      	add	sp, #8
   10110:	bd10      	pop	{r4, pc}

00010112 <sub_mod_256>:
   10112:	b510      	push	{r4, lr}
   10114:	b082      	sub	sp, #8
   10116:	2408      	movs	r4, #8
   10118:	9400      	str	r4, [sp, #0]
   1011a:	f7fc faab 	bl	c674 <sub_mod_n>
   1011e:	b002      	add	sp, #8
   10120:	bd10      	pop	{r4, pc}

00010122 <sub_mod_384>:
   10122:	b510      	push	{r4, lr}
   10124:	b082      	sub	sp, #8
   10126:	240c      	movs	r4, #12
   10128:	9400      	str	r4, [sp, #0]
   1012a:	f7fc faa3 	bl	c674 <sub_mod_n>
   1012e:	b002      	add	sp, #8
   10130:	bd10      	pop	{r4, pc}

00010132 <mul_by_3_mod_256>:
   10132:	b508      	push	{r3, lr}
   10134:	2308      	movs	r3, #8
   10136:	f7fc fe7b 	bl	ce30 <mul_by_3_mod_n>
   1013a:	bd08      	pop	{r3, pc}

0001013c <mul_by_3_mod_384>:
   1013c:	b508      	push	{r3, lr}
   1013e:	230c      	movs	r3, #12
   10140:	f7fc fe76 	bl	ce30 <mul_by_3_mod_n>
   10144:	bd08      	pop	{r3, pc}

00010146 <lshift_mod_256>:
   10146:	b510      	push	{r4, lr}
   10148:	b082      	sub	sp, #8
   1014a:	2408      	movs	r4, #8
   1014c:	9400      	str	r4, [sp, #0]
   1014e:	f7fc ff0f 	bl	cf70 <lshift_mod_n>
   10152:	b002      	add	sp, #8
   10154:	bd10      	pop	{r4, pc}

00010156 <lshift_mod_384>:
   10156:	b510      	push	{r4, lr}
   10158:	b082      	sub	sp, #8
   1015a:	240c      	movs	r4, #12
   1015c:	9400      	str	r4, [sp, #0]
   1015e:	f7fc ff07 	bl	cf70 <lshift_mod_n>
   10162:	b002      	add	sp, #8
   10164:	bd10      	pop	{r4, pc}

00010166 <cneg_mod_256>:
   10166:	b510      	push	{r4, lr}
   10168:	b082      	sub	sp, #8
   1016a:	2408      	movs	r4, #8
   1016c:	9400      	str	r4, [sp, #0]
   1016e:	f7fd fc6b 	bl	da48 <cneg_mod_n>
   10172:	b002      	add	sp, #8
   10174:	bd10      	pop	{r4, pc}

00010176 <cneg_mod_384>:
   10176:	b510      	push	{r4, lr}
   10178:	b082      	sub	sp, #8
   1017a:	240c      	movs	r4, #12
   1017c:	9400      	str	r4, [sp, #0]
   1017e:	f7fd fc63 	bl	da48 <cneg_mod_n>
   10182:	b002      	add	sp, #8
   10184:	bd10      	pop	{r4, pc}

00010186 <check_mod_256>:
   10186:	b508      	push	{r3, lr}
   10188:	2208      	movs	r2, #8
   1018a:	f7fc faac 	bl	c6e6 <check_mod_n>
   1018e:	bd08      	pop	{r3, pc}

00010190 <from_mont_256>:
   10190:	b510      	push	{r4, lr}
   10192:	b082      	sub	sp, #8
   10194:	2408      	movs	r4, #8
   10196:	9400      	str	r4, [sp, #0]
   10198:	f7fc ff4c 	bl	d034 <from_mont_n>
   1019c:	b002      	add	sp, #8
   1019e:	bd10      	pop	{r4, pc}

000101a0 <from_mont_384>:
   101a0:	b510      	push	{r4, lr}
   101a2:	b082      	sub	sp, #8
   101a4:	240c      	movs	r4, #12
   101a6:	9400      	str	r4, [sp, #0]
   101a8:	f7fc ff44 	bl	d034 <from_mont_n>
   101ac:	b002      	add	sp, #8
   101ae:	bd10      	pop	{r4, pc}

000101b0 <redc_mont_256>:
   101b0:	b510      	push	{r4, lr}
   101b2:	b082      	sub	sp, #8
   101b4:	2408      	movs	r4, #8
   101b6:	9400      	str	r4, [sp, #0]
   101b8:	f7fc ffbb 	bl	d132 <redc_mont_n>
   101bc:	b002      	add	sp, #8
   101be:	bd10      	pop	{r4, pc}

000101c0 <redc_mont_384>:
   101c0:	b510      	push	{r4, lr}
   101c2:	b082      	sub	sp, #8
   101c4:	240c      	movs	r4, #12
   101c6:	9400      	str	r4, [sp, #0]
   101c8:	f7fc ffb3 	bl	d132 <redc_mont_n>
   101cc:	b002      	add	sp, #8
   101ce:	bd10      	pop	{r4, pc}

000101d0 <rshift_mod_256>:
   101d0:	b510      	push	{r4, lr}
   101d2:	b082      	sub	sp, #8
   101d4:	2408      	movs	r4, #8
   101d6:	9400      	str	r4, [sp, #0]
   101d8:	f7fc fab4 	bl	c744 <rshift_mod_n>
   101dc:	b002      	add	sp, #8
   101de:	bd10      	pop	{r4, pc}

000101e0 <rshift_mod_384>:
   101e0:	b510      	push	{r4, lr}
   101e2:	b082      	sub	sp, #8
   101e4:	240c      	movs	r4, #12
   101e6:	9400      	str	r4, [sp, #0]
   101e8:	f7fc faac 	bl	c744 <rshift_mod_n>
   101ec:	b002      	add	sp, #8
   101ee:	bd10      	pop	{r4, pc}

000101f0 <div_by_2_mod_384>:
   101f0:	b500      	push	{lr}
   101f2:	b083      	sub	sp, #12
   101f4:	4613      	mov	r3, r2
   101f6:	220c      	movs	r2, #12
   101f8:	9200      	str	r2, [sp, #0]
   101fa:	2201      	movs	r2, #1
   101fc:	f7fc faa2 	bl	c744 <rshift_mod_n>
   10200:	b003      	add	sp, #12
   10202:	f85d fb04 	ldr.w	pc, [sp], #4

00010206 <eucl_inverse_mod_256>:
   10206:	b510      	push	{r4, lr}
   10208:	b082      	sub	sp, #8
   1020a:	2408      	movs	r4, #8
   1020c:	9400      	str	r4, [sp, #0]
   1020e:	f7fe fbff 	bl	ea10 <eucl_inverse_mod_n>
   10212:	b002      	add	sp, #8
   10214:	bd10      	pop	{r4, pc}

00010216 <sgn0_pty_mod_384>:
   10216:	b508      	push	{r3, lr}
   10218:	220c      	movs	r2, #12
   1021a:	f7fd f820 	bl	d25e <sgn0_pty_mod_n>
   1021e:	bd08      	pop	{r3, pc}

00010220 <sgn0_pty_mont_384>:
   10220:	b530      	push	{r4, r5, lr}
   10222:	b08f      	sub	sp, #60	; 0x3c
   10224:	460c      	mov	r4, r1
   10226:	4613      	mov	r3, r2
   10228:	250c      	movs	r5, #12
   1022a:	9500      	str	r5, [sp, #0]
   1022c:	460a      	mov	r2, r1
   1022e:	4601      	mov	r1, r0
   10230:	a802      	add	r0, sp, #8
   10232:	f7fc feff 	bl	d034 <from_mont_n>
   10236:	462a      	mov	r2, r5
   10238:	4621      	mov	r1, r4
   1023a:	a802      	add	r0, sp, #8
   1023c:	f7fd f80f 	bl	d25e <sgn0_pty_mod_n>
   10240:	b00f      	add	sp, #60	; 0x3c
   10242:	bd30      	pop	{r4, r5, pc}

00010244 <sgn0_pty_mod_384x>:
   10244:	b570      	push	{r4, r5, r6, lr}
   10246:	4605      	mov	r5, r0
   10248:	460e      	mov	r6, r1
   1024a:	220c      	movs	r2, #12
   1024c:	f7fd f807 	bl	d25e <sgn0_pty_mod_n>
   10250:	4604      	mov	r4, r0
   10252:	220c      	movs	r2, #12
   10254:	4631      	mov	r1, r6
   10256:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1025a:	f7fd f800 	bl	d25e <sgn0_pty_mod_n>
   1025e:	f105 032c 	add.w	r3, r5, #44	; 0x2c
   10262:	f105 0c5c 	add.w	ip, r5, #92	; 0x5c
   10266:	2200      	movs	r2, #0
   10268:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1026c:	430a      	orrs	r2, r1
   1026e:	4563      	cmp	r3, ip
   10270:	d1fa      	bne.n	10268 <sgn0_pty_mod_384x+0x24>
   10272:	f102 3eff 	add.w	lr, r2, #4294967295
   10276:	ea2e 0202 	bic.w	r2, lr, r2
   1027a:	ea4f 7ed2 	mov.w	lr, r2, lsr #31
   1027e:	ea04 72e2 	and.w	r2, r4, r2, asr #31
   10282:	f10e 3eff 	add.w	lr, lr, #4294967295
   10286:	ea0e 0e00 	and.w	lr, lr, r0
   1028a:	ea4e 0e02 	orr.w	lr, lr, r2
   1028e:	1f2b      	subs	r3, r5, #4
   10290:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
   10294:	2200      	movs	r2, #0
   10296:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1029a:	430a      	orrs	r2, r1
   1029c:	4563      	cmp	r3, ip
   1029e:	d1fa      	bne.n	10296 <sgn0_pty_mod_384x+0x52>
   102a0:	1e53      	subs	r3, r2, #1
   102a2:	ea23 0202 	bic.w	r2, r3, r2
   102a6:	0fd3      	lsrs	r3, r2, #31
   102a8:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   102ac:	1e58      	subs	r0, r3, #1
   102ae:	4004      	ands	r4, r0
   102b0:	4314      	orrs	r4, r2
   102b2:	f004 0401 	and.w	r4, r4, #1
   102b6:	f00e 0002 	and.w	r0, lr, #2
   102ba:	4320      	orrs	r0, r4
   102bc:	bd70      	pop	{r4, r5, r6, pc}

000102be <sgn0_pty_mont_384x>:
   102be:	b5f0      	push	{r4, r5, r6, r7, lr}
   102c0:	b09b      	sub	sp, #108	; 0x6c
   102c2:	4605      	mov	r5, r0
   102c4:	460c      	mov	r4, r1
   102c6:	4617      	mov	r7, r2
   102c8:	260c      	movs	r6, #12
   102ca:	9600      	str	r6, [sp, #0]
   102cc:	4613      	mov	r3, r2
   102ce:	460a      	mov	r2, r1
   102d0:	4601      	mov	r1, r0
   102d2:	a802      	add	r0, sp, #8
   102d4:	f7fc feae 	bl	d034 <from_mont_n>
   102d8:	9600      	str	r6, [sp, #0]
   102da:	463b      	mov	r3, r7
   102dc:	4622      	mov	r2, r4
   102de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   102e2:	a80e      	add	r0, sp, #56	; 0x38
   102e4:	f7fc fea6 	bl	d034 <from_mont_n>
   102e8:	4632      	mov	r2, r6
   102ea:	4621      	mov	r1, r4
   102ec:	a802      	add	r0, sp, #8
   102ee:	f7fc ffb6 	bl	d25e <sgn0_pty_mod_n>
   102f2:	4605      	mov	r5, r0
   102f4:	4632      	mov	r2, r6
   102f6:	4621      	mov	r1, r4
   102f8:	a80e      	add	r0, sp, #56	; 0x38
   102fa:	f7fc ffb0 	bl	d25e <sgn0_pty_mod_n>
   102fe:	aa0d      	add	r2, sp, #52	; 0x34
   10300:	ab02      	add	r3, sp, #8
   10302:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   10306:	2100      	movs	r1, #0
   10308:	f852 4f04 	ldr.w	r4, [r2, #4]!
   1030c:	4321      	orrs	r1, r4
   1030e:	4562      	cmp	r2, ip
   10310:	d1fa      	bne.n	10308 <sgn0_pty_mont_384x+0x4a>
   10312:	1e4c      	subs	r4, r1, #1
   10314:	ea24 0101 	bic.w	r1, r4, r1
   10318:	0fcc      	lsrs	r4, r1, #31
   1031a:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   1031e:	3c01      	subs	r4, #1
   10320:	4004      	ands	r4, r0
   10322:	430c      	orrs	r4, r1
   10324:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   10328:	2200      	movs	r2, #0
   1032a:	f853 1b04 	ldr.w	r1, [r3], #4
   1032e:	430a      	orrs	r2, r1
   10330:	4563      	cmp	r3, ip
   10332:	d1fa      	bne.n	1032a <sgn0_pty_mont_384x+0x6c>
   10334:	1e53      	subs	r3, r2, #1
   10336:	ea23 0202 	bic.w	r2, r3, r2
   1033a:	0fd3      	lsrs	r3, r2, #31
   1033c:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   10340:	3b01      	subs	r3, #1
   10342:	402b      	ands	r3, r5
   10344:	4303      	orrs	r3, r0
   10346:	f003 0301 	and.w	r3, r3, #1
   1034a:	f004 0002 	and.w	r0, r4, #2
   1034e:	4318      	orrs	r0, r3
   10350:	b01b      	add	sp, #108	; 0x6c
   10352:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010354 <mul_mont_384x>:
   10354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10358:	b0a7      	sub	sp, #156	; 0x9c
   1035a:	4605      	mov	r5, r0
   1035c:	4688      	mov	r8, r1
   1035e:	4617      	mov	r7, r2
   10360:	461c      	mov	r4, r3
   10362:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
   10366:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   1036a:	260c      	movs	r6, #12
   1036c:	9600      	str	r6, [sp, #0]
   1036e:	4652      	mov	r2, sl
   10370:	a81a      	add	r0, sp, #104	; 0x68
   10372:	f7fc fcd5 	bl	cd20 <add_mod_n>
   10376:	f107 0b30 	add.w	fp, r7, #48	; 0x30
   1037a:	9600      	str	r6, [sp, #0]
   1037c:	4623      	mov	r3, r4
   1037e:	465a      	mov	r2, fp
   10380:	4639      	mov	r1, r7
   10382:	a80e      	add	r0, sp, #56	; 0x38
   10384:	f7fc fccc 	bl	cd20 <add_mod_n>
   10388:	9601      	str	r6, [sp, #4]
   1038a:	f8cd 9000 	str.w	r9, [sp]
   1038e:	4623      	mov	r3, r4
   10390:	aa1a      	add	r2, sp, #104	; 0x68
   10392:	a90e      	add	r1, sp, #56	; 0x38
   10394:	4608      	mov	r0, r1
   10396:	f7fc fb1b 	bl	c9d0 <mul_mont_n>
   1039a:	9601      	str	r6, [sp, #4]
   1039c:	f8cd 9000 	str.w	r9, [sp]
   103a0:	4623      	mov	r3, r4
   103a2:	463a      	mov	r2, r7
   103a4:	4641      	mov	r1, r8
   103a6:	a81a      	add	r0, sp, #104	; 0x68
   103a8:	f7fc fb12 	bl	c9d0 <mul_mont_n>
   103ac:	9601      	str	r6, [sp, #4]
   103ae:	f8cd 9000 	str.w	r9, [sp]
   103b2:	4623      	mov	r3, r4
   103b4:	465a      	mov	r2, fp
   103b6:	4651      	mov	r1, sl
   103b8:	a802      	add	r0, sp, #8
   103ba:	f7fc fb09 	bl	c9d0 <mul_mont_n>
   103be:	9600      	str	r6, [sp, #0]
   103c0:	4623      	mov	r3, r4
   103c2:	aa02      	add	r2, sp, #8
   103c4:	a91a      	add	r1, sp, #104	; 0x68
   103c6:	4628      	mov	r0, r5
   103c8:	f7fc f954 	bl	c674 <sub_mod_n>
   103cc:	3530      	adds	r5, #48	; 0x30
   103ce:	9600      	str	r6, [sp, #0]
   103d0:	4623      	mov	r3, r4
   103d2:	aa1a      	add	r2, sp, #104	; 0x68
   103d4:	a90e      	add	r1, sp, #56	; 0x38
   103d6:	4628      	mov	r0, r5
   103d8:	f7fc f94c 	bl	c674 <sub_mod_n>
   103dc:	9600      	str	r6, [sp, #0]
   103de:	4623      	mov	r3, r4
   103e0:	aa02      	add	r2, sp, #8
   103e2:	4629      	mov	r1, r5
   103e4:	4628      	mov	r0, r5
   103e6:	f7fc f945 	bl	c674 <sub_mod_n>
   103ea:	b027      	add	sp, #156	; 0x9c
   103ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000103f0 <psi>:
   103f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   103f2:	b083      	sub	sp, #12
   103f4:	4604      	mov	r4, r0
   103f6:	1f0b      	subs	r3, r1, #4
   103f8:	1f02      	subs	r2, r0, #4
   103fa:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   103fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   10402:	f842 1f04 	str.w	r1, [r2, #4]!
   10406:	4563      	cmp	r3, ip
   10408:	d1f9      	bne.n	103fe <psi+0xe>
   1040a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1040e:	4d16      	ldr	r5, [pc, #88]	; (10468 <psi+0x78>)
   10410:	260c      	movs	r6, #12
   10412:	9600      	str	r6, [sp, #0]
   10414:	462b      	mov	r3, r5
   10416:	2201      	movs	r2, #1
   10418:	4601      	mov	r1, r0
   1041a:	f7fd fb15 	bl	da48 <cneg_mod_n>
   1041e:	4f13      	ldr	r7, [pc, #76]	; (1046c <psi+0x7c>)
   10420:	9700      	str	r7, [sp, #0]
   10422:	462b      	mov	r3, r5
   10424:	f505 626a 	add.w	r2, r5, #3744	; 0xea0
   10428:	4621      	mov	r1, r4
   1042a:	4620      	mov	r0, r4
   1042c:	f7ff ff92 	bl	10354 <mul_mont_384x>
   10430:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10434:	9600      	str	r6, [sp, #0]
   10436:	462b      	mov	r3, r5
   10438:	2201      	movs	r2, #1
   1043a:	4601      	mov	r1, r0
   1043c:	f7fd fb04 	bl	da48 <cneg_mod_n>
   10440:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10444:	9700      	str	r7, [sp, #0]
   10446:	462b      	mov	r3, r5
   10448:	f505 6270 	add.w	r2, r5, #3840	; 0xf00
   1044c:	4601      	mov	r1, r0
   1044e:	f7ff ff81 	bl	10354 <mul_mont_384x>
   10452:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   10456:	9600      	str	r6, [sp, #0]
   10458:	462b      	mov	r3, r5
   1045a:	2201      	movs	r2, #1
   1045c:	4601      	mov	r1, r0
   1045e:	f7fd faf3 	bl	da48 <cneg_mod_n>
   10462:	b003      	add	sp, #12
   10464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10466:	bf00      	nop
   10468:	00024108 	.word	0x00024108
   1046c:	fffcfffd 	.word	0xfffcfffd

00010470 <map_fp2_times_Zz>:
   10470:	b303      	cbz	r3, 104b4 <map_fp2_times_Zz+0x44>
   10472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10476:	b083      	sub	sp, #12
   10478:	1e5f      	subs	r7, r3, #1
   1047a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1047e:	015c      	lsls	r4, r3, #5
   10480:	3c60      	subs	r4, #96	; 0x60
   10482:	1906      	adds	r6, r0, r4
   10484:	190d      	adds	r5, r1, r4
   10486:	4414      	add	r4, r2
   10488:	f8df 902c 	ldr.w	r9, [pc, #44]	; 104b8 <map_fp2_times_Zz+0x48>
   1048c:	f8df 802c 	ldr.w	r8, [pc, #44]	; 104bc <map_fp2_times_Zz+0x4c>
   10490:	f8cd 8000 	str.w	r8, [sp]
   10494:	464b      	mov	r3, r9
   10496:	4622      	mov	r2, r4
   10498:	4629      	mov	r1, r5
   1049a:	4630      	mov	r0, r6
   1049c:	f7ff ff5a 	bl	10354 <mul_mont_384x>
   104a0:	3f01      	subs	r7, #1
   104a2:	3e60      	subs	r6, #96	; 0x60
   104a4:	3d60      	subs	r5, #96	; 0x60
   104a6:	3c60      	subs	r4, #96	; 0x60
   104a8:	f1b7 3fff 	cmp.w	r7, #4294967295
   104ac:	d1f0      	bne.n	10490 <map_fp2_times_Zz+0x20>
   104ae:	b003      	add	sp, #12
   104b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   104b4:	4770      	bx	lr
   104b6:	bf00      	nop
   104b8:	00024108 	.word	0x00024108
   104bc:	fffcfffd 	.word	0xfffcfffd

000104c0 <frobenius_map_fp6>:
   104c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104c4:	b083      	sub	sp, #12
   104c6:	4604      	mov	r4, r0
   104c8:	460d      	mov	r5, r1
   104ca:	4616      	mov	r6, r2
   104cc:	1f0b      	subs	r3, r1, #4
   104ce:	1f02      	subs	r2, r0, #4
   104d0:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   104d4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   104d8:	f842 1f04 	str.w	r1, [r2, #4]!
   104dc:	4283      	cmp	r3, r0
   104de:	d1f9      	bne.n	104d4 <frobenius_map_fp6+0x14>
   104e0:	f006 0701 	and.w	r7, r6, #1
   104e4:	230c      	movs	r3, #12
   104e6:	9300      	str	r3, [sp, #0]
   104e8:	4b31      	ldr	r3, [pc, #196]	; (105b0 <frobenius_map_fp6+0xf0>)
   104ea:	463a      	mov	r2, r7
   104ec:	f105 0130 	add.w	r1, r5, #48	; 0x30
   104f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   104f4:	f7fd faa8 	bl	da48 <cneg_mod_n>
   104f8:	f104 0860 	add.w	r8, r4, #96	; 0x60
   104fc:	f105 035c 	add.w	r3, r5, #92	; 0x5c
   10500:	f104 025c 	add.w	r2, r4, #92	; 0x5c
   10504:	f105 008c 	add.w	r0, r5, #140	; 0x8c
   10508:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1050c:	f842 1f04 	str.w	r1, [r2, #4]!
   10510:	4283      	cmp	r3, r0
   10512:	d1f9      	bne.n	10508 <frobenius_map_fp6+0x48>
   10514:	230c      	movs	r3, #12
   10516:	9300      	str	r3, [sp, #0]
   10518:	4b25      	ldr	r3, [pc, #148]	; (105b0 <frobenius_map_fp6+0xf0>)
   1051a:	463a      	mov	r2, r7
   1051c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   10520:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10524:	f7fd fa90 	bl	da48 <cneg_mod_n>
   10528:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   1052c:	f104 0cbc 	add.w	ip, r4, #188	; 0xbc
   10530:	f105 01ec 	add.w	r1, r5, #236	; 0xec
   10534:	f853 2f04 	ldr.w	r2, [r3, #4]!
   10538:	f84c 2f04 	str.w	r2, [ip, #4]!
   1053c:	428b      	cmp	r3, r1
   1053e:	d1f9      	bne.n	10534 <frobenius_map_fp6+0x74>
   10540:	f104 0af0 	add.w	sl, r4, #240	; 0xf0
   10544:	f8df 9068 	ldr.w	r9, [pc, #104]	; 105b0 <frobenius_map_fp6+0xf0>
   10548:	f04f 0b0c 	mov.w	fp, #12
   1054c:	f8cd b000 	str.w	fp, [sp]
   10550:	464b      	mov	r3, r9
   10552:	463a      	mov	r2, r7
   10554:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   10558:	4650      	mov	r0, sl
   1055a:	f7fd fa75 	bl	da48 <cneg_mod_n>
   1055e:	3e01      	subs	r6, #1
   10560:	f509 6276 	add.w	r2, r9, #3936	; 0xf60
   10564:	0077      	lsls	r7, r6, #1
   10566:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   1056a:	4d12      	ldr	r5, [pc, #72]	; (105b4 <frobenius_map_fp6+0xf4>)
   1056c:	9500      	str	r5, [sp, #0]
   1056e:	464b      	mov	r3, r9
   10570:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   10574:	4641      	mov	r1, r8
   10576:	4640      	mov	r0, r8
   10578:	f7ff feec 	bl	10354 <mul_mont_384x>
   1057c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10580:	4437      	add	r7, r6
   10582:	4e0d      	ldr	r6, [pc, #52]	; (105b8 <frobenius_map_fp6+0xf8>)
   10584:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   10588:	f8cd b004 	str.w	fp, [sp, #4]
   1058c:	9500      	str	r5, [sp, #0]
   1058e:	464b      	mov	r3, r9
   10590:	4632      	mov	r2, r6
   10592:	4601      	mov	r1, r0
   10594:	f7fc fa1c 	bl	c9d0 <mul_mont_n>
   10598:	f8cd b004 	str.w	fp, [sp, #4]
   1059c:	9500      	str	r5, [sp, #0]
   1059e:	464b      	mov	r3, r9
   105a0:	4632      	mov	r2, r6
   105a2:	4651      	mov	r1, sl
   105a4:	4650      	mov	r0, sl
   105a6:	f7fc fa13 	bl	c9d0 <mul_mont_n>
   105aa:	b003      	add	sp, #12
   105ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105b0:	00024108 	.word	0x00024108
   105b4:	fffcfffd 	.word	0xfffcfffd
   105b8:	00025188 	.word	0x00025188

000105bc <frobenius_map_fp12>:
   105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c0:	b082      	sub	sp, #8
   105c2:	4605      	mov	r5, r0
   105c4:	460e      	mov	r6, r1
   105c6:	4614      	mov	r4, r2
   105c8:	f7ff ff7a 	bl	104c0 <frobenius_map_fp6>
   105cc:	f505 7790 	add.w	r7, r5, #288	; 0x120
   105d0:	4622      	mov	r2, r4
   105d2:	f506 7190 	add.w	r1, r6, #288	; 0x120
   105d6:	4638      	mov	r0, r7
   105d8:	f7ff ff72 	bl	104c0 <frobenius_map_fp6>
   105dc:	3c01      	subs	r4, #1
   105de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   105e2:	4b11      	ldr	r3, [pc, #68]	; (10628 <frobenius_map_fp12+0x6c>)
   105e4:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   105e8:	4e10      	ldr	r6, [pc, #64]	; (1062c <frobenius_map_fp12+0x70>)
   105ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 10630 <frobenius_map_fp12+0x74>
   105ee:	f8cd 8000 	str.w	r8, [sp]
   105f2:	4633      	mov	r3, r6
   105f4:	4622      	mov	r2, r4
   105f6:	4639      	mov	r1, r7
   105f8:	4638      	mov	r0, r7
   105fa:	f7ff feab 	bl	10354 <mul_mont_384x>
   105fe:	f505 70c0 	add.w	r0, r5, #384	; 0x180
   10602:	f8cd 8000 	str.w	r8, [sp]
   10606:	4633      	mov	r3, r6
   10608:	4622      	mov	r2, r4
   1060a:	4601      	mov	r1, r0
   1060c:	f7ff fea2 	bl	10354 <mul_mont_384x>
   10610:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
   10614:	f8cd 8000 	str.w	r8, [sp]
   10618:	4633      	mov	r3, r6
   1061a:	4622      	mov	r2, r4
   1061c:	4601      	mov	r1, r0
   1061e:	f7ff fe99 	bl	10354 <mul_mont_384x>
   10622:	b002      	add	sp, #8
   10624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10628:	00025218 	.word	0x00025218
   1062c:	00024108 	.word	0x00024108
   10630:	fffcfffd 	.word	0xfffcfffd

00010634 <blst_fp12_frobenius_map>:
   10634:	b508      	push	{r3, lr}
   10636:	f7ff ffc1 	bl	105bc <frobenius_map_fp12>
   1063a:	bd08      	pop	{r3, pc}

0001063c <map_fp2>:
   1063c:	b393      	cbz	r3, 106a4 <map_fp2+0x68>
   1063e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10642:	b082      	sub	sp, #8
   10644:	4604      	mov	r4, r0
   10646:	4689      	mov	r9, r1
   10648:	1e5e      	subs	r6, r3, #1
   1064a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1064e:	eb02 1243 	add.w	r2, r2, r3, lsl #5
   10652:	f1a2 0560 	sub.w	r5, r2, #96	; 0x60
   10656:	4f14      	ldr	r7, [pc, #80]	; (106a8 <map_fp2+0x6c>)
   10658:	f8df a050 	ldr.w	sl, [pc, #80]	; 106ac <map_fp2+0x70>
   1065c:	f04f 080c 	mov.w	r8, #12
   10660:	f8cd a000 	str.w	sl, [sp]
   10664:	463b      	mov	r3, r7
   10666:	464a      	mov	r2, r9
   10668:	4621      	mov	r1, r4
   1066a:	4620      	mov	r0, r4
   1066c:	f7ff fe72 	bl	10354 <mul_mont_384x>
   10670:	f8cd 8000 	str.w	r8, [sp]
   10674:	463b      	mov	r3, r7
   10676:	462a      	mov	r2, r5
   10678:	4621      	mov	r1, r4
   1067a:	4620      	mov	r0, r4
   1067c:	f7fc fb50 	bl	cd20 <add_mod_n>
   10680:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10684:	f8cd 8000 	str.w	r8, [sp]
   10688:	463b      	mov	r3, r7
   1068a:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1068e:	4601      	mov	r1, r0
   10690:	f7fc fb46 	bl	cd20 <add_mod_n>
   10694:	3e01      	subs	r6, #1
   10696:	3d60      	subs	r5, #96	; 0x60
   10698:	f1b6 3fff 	cmp.w	r6, #4294967295
   1069c:	d1e0      	bne.n	10660 <map_fp2+0x24>
   1069e:	b002      	add	sp, #8
   106a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106a4:	4770      	bx	lr
   106a6:	bf00      	nop
   106a8:	00024108 	.word	0x00024108
   106ac:	fffcfffd 	.word	0xfffcfffd

000106b0 <mul_fp6>:
   106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106b4:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   106b8:	4683      	mov	fp, r0
   106ba:	460f      	mov	r7, r1
   106bc:	4616      	mov	r6, r2
   106be:	4cad      	ldr	r4, [pc, #692]	; (10974 <mul_fp6+0x2c4>)
   106c0:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 10978 <mul_fp6+0x2c8>
   106c4:	f8cd a000 	str.w	sl, [sp]
   106c8:	4623      	mov	r3, r4
   106ca:	a88e      	add	r0, sp, #568	; 0x238
   106cc:	f7ff fe42 	bl	10354 <mul_mont_384x>
   106d0:	f107 0960 	add.w	r9, r7, #96	; 0x60
   106d4:	f106 0860 	add.w	r8, r6, #96	; 0x60
   106d8:	f8cd a000 	str.w	sl, [sp]
   106dc:	4623      	mov	r3, r4
   106de:	4642      	mov	r2, r8
   106e0:	4649      	mov	r1, r9
   106e2:	a876      	add	r0, sp, #472	; 0x1d8
   106e4:	f7ff fe36 	bl	10354 <mul_mont_384x>
   106e8:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   106ec:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
   106f0:	461a      	mov	r2, r3
   106f2:	f8cd a000 	str.w	sl, [sp]
   106f6:	4623      	mov	r3, r4
   106f8:	9204      	str	r2, [sp, #16]
   106fa:	9103      	str	r1, [sp, #12]
   106fc:	a85e      	add	r0, sp, #376	; 0x178
   106fe:	f7ff fe29 	bl	10354 <mul_mont_384x>
   10702:	250c      	movs	r5, #12
   10704:	9500      	str	r5, [sp, #0]
   10706:	4623      	mov	r3, r4
   10708:	9a03      	ldr	r2, [sp, #12]
   1070a:	4649      	mov	r1, r9
   1070c:	a82e      	add	r0, sp, #184	; 0xb8
   1070e:	f7fc fb07 	bl	cd20 <add_mod_n>
   10712:	f107 0190 	add.w	r1, r7, #144	; 0x90
   10716:	9108      	str	r1, [sp, #32]
   10718:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   1071c:	9009      	str	r0, [sp, #36]	; 0x24
   1071e:	9500      	str	r5, [sp, #0]
   10720:	4623      	mov	r3, r4
   10722:	4602      	mov	r2, r0
   10724:	a83a      	add	r0, sp, #232	; 0xe8
   10726:	f7fc fafb 	bl	cd20 <add_mod_n>
   1072a:	9500      	str	r5, [sp, #0]
   1072c:	4623      	mov	r3, r4
   1072e:	9a04      	ldr	r2, [sp, #16]
   10730:	4641      	mov	r1, r8
   10732:	a816      	add	r0, sp, #88	; 0x58
   10734:	f7fc faf4 	bl	cd20 <add_mod_n>
   10738:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1073c:	9106      	str	r1, [sp, #24]
   1073e:	f106 03f0 	add.w	r3, r6, #240	; 0xf0
   10742:	461a      	mov	r2, r3
   10744:	9307      	str	r3, [sp, #28]
   10746:	9500      	str	r5, [sp, #0]
   10748:	4623      	mov	r3, r4
   1074a:	a822      	add	r0, sp, #136	; 0x88
   1074c:	f7fc fae8 	bl	cd20 <add_mod_n>
   10750:	f8cd a000 	str.w	sl, [sp]
   10754:	4623      	mov	r3, r4
   10756:	aa16      	add	r2, sp, #88	; 0x58
   10758:	a92e      	add	r1, sp, #184	; 0xb8
   1075a:	a846      	add	r0, sp, #280	; 0x118
   1075c:	f7ff fdfa 	bl	10354 <mul_mont_384x>
   10760:	9500      	str	r5, [sp, #0]
   10762:	4623      	mov	r3, r4
   10764:	aa76      	add	r2, sp, #472	; 0x1d8
   10766:	a946      	add	r1, sp, #280	; 0x118
   10768:	4608      	mov	r0, r1
   1076a:	f7fb ff83 	bl	c674 <sub_mod_n>
   1076e:	9500      	str	r5, [sp, #0]
   10770:	4623      	mov	r3, r4
   10772:	aa82      	add	r2, sp, #520	; 0x208
   10774:	a952      	add	r1, sp, #328	; 0x148
   10776:	4608      	mov	r0, r1
   10778:	f7fb ff7c 	bl	c674 <sub_mod_n>
   1077c:	9500      	str	r5, [sp, #0]
   1077e:	4623      	mov	r3, r4
   10780:	aa5e      	add	r2, sp, #376	; 0x178
   10782:	a946      	add	r1, sp, #280	; 0x118
   10784:	4608      	mov	r0, r1
   10786:	f7fb ff75 	bl	c674 <sub_mod_n>
   1078a:	9500      	str	r5, [sp, #0]
   1078c:	4623      	mov	r3, r4
   1078e:	aa6a      	add	r2, sp, #424	; 0x1a8
   10790:	a952      	add	r1, sp, #328	; 0x148
   10792:	4608      	mov	r0, r1
   10794:	f7fb ff6e 	bl	c674 <sub_mod_n>
   10798:	9500      	str	r5, [sp, #0]
   1079a:	4623      	mov	r3, r4
   1079c:	aa52      	add	r2, sp, #328	; 0x148
   1079e:	a946      	add	r1, sp, #280	; 0x118
   107a0:	a80a      	add	r0, sp, #40	; 0x28
   107a2:	f7fc fabd 	bl	cd20 <add_mod_n>
   107a6:	9500      	str	r5, [sp, #0]
   107a8:	4623      	mov	r3, r4
   107aa:	aa52      	add	r2, sp, #328	; 0x148
   107ac:	a946      	add	r1, sp, #280	; 0x118
   107ae:	4608      	mov	r0, r1
   107b0:	f7fb ff60 	bl	c674 <sub_mod_n>
   107b4:	ab0a      	add	r3, sp, #40	; 0x28
   107b6:	aa51      	add	r2, sp, #324	; 0x144
   107b8:	a816      	add	r0, sp, #88	; 0x58
   107ba:	f853 1b04 	ldr.w	r1, [r3], #4
   107be:	f842 1f04 	str.w	r1, [r2, #4]!
   107c2:	4298      	cmp	r0, r3
   107c4:	d1f9      	bne.n	107ba <mul_fp6+0x10a>
   107c6:	4c6b      	ldr	r4, [pc, #428]	; (10974 <mul_fp6+0x2c4>)
   107c8:	250c      	movs	r5, #12
   107ca:	9500      	str	r5, [sp, #0]
   107cc:	4623      	mov	r3, r4
   107ce:	464a      	mov	r2, r9
   107d0:	4639      	mov	r1, r7
   107d2:	a82e      	add	r0, sp, #184	; 0xb8
   107d4:	f7fc faa4 	bl	cd20 <add_mod_n>
   107d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
   107dc:	4619      	mov	r1, r3
   107de:	9305      	str	r3, [sp, #20]
   107e0:	9500      	str	r5, [sp, #0]
   107e2:	4623      	mov	r3, r4
   107e4:	9a08      	ldr	r2, [sp, #32]
   107e6:	a83a      	add	r0, sp, #232	; 0xe8
   107e8:	f7fc fa9a 	bl	cd20 <add_mod_n>
   107ec:	9500      	str	r5, [sp, #0]
   107ee:	4623      	mov	r3, r4
   107f0:	4642      	mov	r2, r8
   107f2:	4631      	mov	r1, r6
   107f4:	a816      	add	r0, sp, #88	; 0x58
   107f6:	f7fc fa93 	bl	cd20 <add_mod_n>
   107fa:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   107fe:	9500      	str	r5, [sp, #0]
   10800:	4623      	mov	r3, r4
   10802:	9a06      	ldr	r2, [sp, #24]
   10804:	4651      	mov	r1, sl
   10806:	a822      	add	r0, sp, #136	; 0x88
   10808:	f7fc fa8a 	bl	cd20 <add_mod_n>
   1080c:	f10b 0860 	add.w	r8, fp, #96	; 0x60
   10810:	4b59      	ldr	r3, [pc, #356]	; (10978 <mul_fp6+0x2c8>)
   10812:	9300      	str	r3, [sp, #0]
   10814:	4623      	mov	r3, r4
   10816:	aa16      	add	r2, sp, #88	; 0x58
   10818:	a92e      	add	r1, sp, #184	; 0xb8
   1081a:	4640      	mov	r0, r8
   1081c:	f7ff fd9a 	bl	10354 <mul_mont_384x>
   10820:	9500      	str	r5, [sp, #0]
   10822:	4623      	mov	r3, r4
   10824:	aa8e      	add	r2, sp, #568	; 0x238
   10826:	4641      	mov	r1, r8
   10828:	4640      	mov	r0, r8
   1082a:	f7fb ff23 	bl	c674 <sub_mod_n>
   1082e:	f10b 0990 	add.w	r9, fp, #144	; 0x90
   10832:	9500      	str	r5, [sp, #0]
   10834:	4623      	mov	r3, r4
   10836:	aa9a      	add	r2, sp, #616	; 0x268
   10838:	4649      	mov	r1, r9
   1083a:	4648      	mov	r0, r9
   1083c:	f7fb ff1a 	bl	c674 <sub_mod_n>
   10840:	9500      	str	r5, [sp, #0]
   10842:	4623      	mov	r3, r4
   10844:	aa76      	add	r2, sp, #472	; 0x1d8
   10846:	4641      	mov	r1, r8
   10848:	4640      	mov	r0, r8
   1084a:	f7fb ff13 	bl	c674 <sub_mod_n>
   1084e:	9500      	str	r5, [sp, #0]
   10850:	4623      	mov	r3, r4
   10852:	aa82      	add	r2, sp, #520	; 0x208
   10854:	4649      	mov	r1, r9
   10856:	4648      	mov	r0, r9
   10858:	f7fb ff0c 	bl	c674 <sub_mod_n>
   1085c:	9500      	str	r5, [sp, #0]
   1085e:	4623      	mov	r3, r4
   10860:	aa6a      	add	r2, sp, #424	; 0x1a8
   10862:	a95e      	add	r1, sp, #376	; 0x178
   10864:	a80a      	add	r0, sp, #40	; 0x28
   10866:	f7fc fa5b 	bl	cd20 <add_mod_n>
   1086a:	9500      	str	r5, [sp, #0]
   1086c:	4623      	mov	r3, r4
   1086e:	aa6a      	add	r2, sp, #424	; 0x1a8
   10870:	a95e      	add	r1, sp, #376	; 0x178
   10872:	a82e      	add	r0, sp, #184	; 0xb8
   10874:	f7fb fefe 	bl	c674 <sub_mod_n>
   10878:	ab0a      	add	r3, sp, #40	; 0x28
   1087a:	aa39      	add	r2, sp, #228	; 0xe4
   1087c:	a816      	add	r0, sp, #88	; 0x58
   1087e:	f853 1b04 	ldr.w	r1, [r3], #4
   10882:	f842 1f04 	str.w	r1, [r2, #4]!
   10886:	4298      	cmp	r0, r3
   10888:	d1f9      	bne.n	1087e <mul_fp6+0x1ce>
   1088a:	4c3a      	ldr	r4, [pc, #232]	; (10974 <mul_fp6+0x2c4>)
   1088c:	250c      	movs	r5, #12
   1088e:	9500      	str	r5, [sp, #0]
   10890:	4623      	mov	r3, r4
   10892:	aa2e      	add	r2, sp, #184	; 0xb8
   10894:	4641      	mov	r1, r8
   10896:	4640      	mov	r0, r8
   10898:	f7fc fa42 	bl	cd20 <add_mod_n>
   1089c:	9500      	str	r5, [sp, #0]
   1089e:	4623      	mov	r3, r4
   108a0:	aa3a      	add	r2, sp, #232	; 0xe8
   108a2:	4649      	mov	r1, r9
   108a4:	4648      	mov	r0, r9
   108a6:	f7fc fa3b 	bl	cd20 <add_mod_n>
   108aa:	9500      	str	r5, [sp, #0]
   108ac:	4623      	mov	r3, r4
   108ae:	9a03      	ldr	r2, [sp, #12]
   108b0:	4639      	mov	r1, r7
   108b2:	a82e      	add	r0, sp, #184	; 0xb8
   108b4:	f7fc fa34 	bl	cd20 <add_mod_n>
   108b8:	9500      	str	r5, [sp, #0]
   108ba:	4623      	mov	r3, r4
   108bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   108be:	9905      	ldr	r1, [sp, #20]
   108c0:	a83a      	add	r0, sp, #232	; 0xe8
   108c2:	f7fc fa2d 	bl	cd20 <add_mod_n>
   108c6:	9500      	str	r5, [sp, #0]
   108c8:	4623      	mov	r3, r4
   108ca:	9a04      	ldr	r2, [sp, #16]
   108cc:	4631      	mov	r1, r6
   108ce:	a816      	add	r0, sp, #88	; 0x58
   108d0:	f7fc fa26 	bl	cd20 <add_mod_n>
   108d4:	9500      	str	r5, [sp, #0]
   108d6:	4623      	mov	r3, r4
   108d8:	9a07      	ldr	r2, [sp, #28]
   108da:	4651      	mov	r1, sl
   108dc:	a822      	add	r0, sp, #136	; 0x88
   108de:	f7fc fa1f 	bl	cd20 <add_mod_n>
   108e2:	f10b 06c0 	add.w	r6, fp, #192	; 0xc0
   108e6:	4b24      	ldr	r3, [pc, #144]	; (10978 <mul_fp6+0x2c8>)
   108e8:	9300      	str	r3, [sp, #0]
   108ea:	4623      	mov	r3, r4
   108ec:	aa16      	add	r2, sp, #88	; 0x58
   108ee:	a92e      	add	r1, sp, #184	; 0xb8
   108f0:	4630      	mov	r0, r6
   108f2:	f7ff fd2f 	bl	10354 <mul_mont_384x>
   108f6:	9500      	str	r5, [sp, #0]
   108f8:	4623      	mov	r3, r4
   108fa:	aa8e      	add	r2, sp, #568	; 0x238
   108fc:	4631      	mov	r1, r6
   108fe:	4630      	mov	r0, r6
   10900:	f7fb feb8 	bl	c674 <sub_mod_n>
   10904:	f10b 07f0 	add.w	r7, fp, #240	; 0xf0
   10908:	9500      	str	r5, [sp, #0]
   1090a:	4623      	mov	r3, r4
   1090c:	aa9a      	add	r2, sp, #616	; 0x268
   1090e:	4639      	mov	r1, r7
   10910:	4638      	mov	r0, r7
   10912:	f7fb feaf 	bl	c674 <sub_mod_n>
   10916:	9500      	str	r5, [sp, #0]
   10918:	4623      	mov	r3, r4
   1091a:	aa5e      	add	r2, sp, #376	; 0x178
   1091c:	4631      	mov	r1, r6
   1091e:	4630      	mov	r0, r6
   10920:	f7fb fea8 	bl	c674 <sub_mod_n>
   10924:	9500      	str	r5, [sp, #0]
   10926:	4623      	mov	r3, r4
   10928:	aa6a      	add	r2, sp, #424	; 0x1a8
   1092a:	4639      	mov	r1, r7
   1092c:	4638      	mov	r0, r7
   1092e:	f7fb fea1 	bl	c674 <sub_mod_n>
   10932:	9500      	str	r5, [sp, #0]
   10934:	4623      	mov	r3, r4
   10936:	aa76      	add	r2, sp, #472	; 0x1d8
   10938:	4631      	mov	r1, r6
   1093a:	4630      	mov	r0, r6
   1093c:	f7fc f9f0 	bl	cd20 <add_mod_n>
   10940:	9500      	str	r5, [sp, #0]
   10942:	4623      	mov	r3, r4
   10944:	aa82      	add	r2, sp, #520	; 0x208
   10946:	4639      	mov	r1, r7
   10948:	4638      	mov	r0, r7
   1094a:	f7fc f9e9 	bl	cd20 <add_mod_n>
   1094e:	9500      	str	r5, [sp, #0]
   10950:	4623      	mov	r3, r4
   10952:	aa8e      	add	r2, sp, #568	; 0x238
   10954:	a946      	add	r1, sp, #280	; 0x118
   10956:	4658      	mov	r0, fp
   10958:	f7fc f9e2 	bl	cd20 <add_mod_n>
   1095c:	9500      	str	r5, [sp, #0]
   1095e:	4623      	mov	r3, r4
   10960:	aa9a      	add	r2, sp, #616	; 0x268
   10962:	a952      	add	r1, sp, #328	; 0x148
   10964:	f10b 0030 	add.w	r0, fp, #48	; 0x30
   10968:	f7fc f9da 	bl	cd20 <add_mod_n>
   1096c:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   10970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10974:	00024108 	.word	0x00024108
   10978:	fffcfffd 	.word	0xfffcfffd

0001097c <mul_fp12>:
   1097c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10980:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
   10984:	4604      	mov	r4, r0
   10986:	460d      	mov	r5, r1
   10988:	4616      	mov	r6, r2
   1098a:	a89e      	add	r0, sp, #632	; 0x278
   1098c:	f7ff fe90 	bl	106b0 <mul_fp6>
   10990:	f505 7890 	add.w	r8, r5, #288	; 0x120
   10994:	f506 7790 	add.w	r7, r6, #288	; 0x120
   10998:	463a      	mov	r2, r7
   1099a:	4641      	mov	r1, r8
   1099c:	a856      	add	r0, sp, #344	; 0x158
   1099e:	f7ff fe87 	bl	106b0 <mul_fp6>
   109a2:	4642      	mov	r2, r8
   109a4:	4629      	mov	r1, r5
   109a6:	a80e      	add	r0, sp, #56	; 0x38
   109a8:	f7fd fb48 	bl	e03c <add_fp6>
   109ac:	f504 7590 	add.w	r5, r4, #288	; 0x120
   109b0:	463a      	mov	r2, r7
   109b2:	4631      	mov	r1, r6
   109b4:	4628      	mov	r0, r5
   109b6:	f7fd fb41 	bl	e03c <add_fp6>
   109ba:	aa0e      	add	r2, sp, #56	; 0x38
   109bc:	4629      	mov	r1, r5
   109be:	4628      	mov	r0, r5
   109c0:	f7ff fe76 	bl	106b0 <mul_fp6>
   109c4:	aa9e      	add	r2, sp, #632	; 0x278
   109c6:	4629      	mov	r1, r5
   109c8:	4628      	mov	r0, r5
   109ca:	f7fd faed 	bl	dfa8 <sub_fp6>
   109ce:	aa56      	add	r2, sp, #344	; 0x158
   109d0:	4629      	mov	r1, r5
   109d2:	4628      	mov	r0, r5
   109d4:	f7fd fae8 	bl	dfa8 <sub_fp6>
   109d8:	4d26      	ldr	r5, [pc, #152]	; (10a74 <mul_fp12+0xf8>)
   109da:	260c      	movs	r6, #12
   109dc:	9600      	str	r6, [sp, #0]
   109de:	462b      	mov	r3, r5
   109e0:	aa92      	add	r2, sp, #584	; 0x248
   109e2:	a986      	add	r1, sp, #536	; 0x218
   109e4:	a802      	add	r0, sp, #8
   109e6:	f7fc f99b 	bl	cd20 <add_mod_n>
   109ea:	9600      	str	r6, [sp, #0]
   109ec:	462b      	mov	r3, r5
   109ee:	aa92      	add	r2, sp, #584	; 0x248
   109f0:	a986      	add	r1, sp, #536	; 0x218
   109f2:	4608      	mov	r0, r1
   109f4:	f7fb fe3e 	bl	c674 <sub_mod_n>
   109f8:	ab02      	add	r3, sp, #8
   109fa:	aa91      	add	r2, sp, #580	; 0x244
   109fc:	a80e      	add	r0, sp, #56	; 0x38
   109fe:	f853 1b04 	ldr.w	r1, [r3], #4
   10a02:	f842 1f04 	str.w	r1, [r2, #4]!
   10a06:	4283      	cmp	r3, r0
   10a08:	d1f9      	bne.n	109fe <mul_fp12+0x82>
   10a0a:	4d1a      	ldr	r5, [pc, #104]	; (10a74 <mul_fp12+0xf8>)
   10a0c:	260c      	movs	r6, #12
   10a0e:	9600      	str	r6, [sp, #0]
   10a10:	462b      	mov	r3, r5
   10a12:	aa86      	add	r2, sp, #536	; 0x218
   10a14:	a99e      	add	r1, sp, #632	; 0x278
   10a16:	4620      	mov	r0, r4
   10a18:	f7fc f982 	bl	cd20 <add_mod_n>
   10a1c:	9600      	str	r6, [sp, #0]
   10a1e:	462b      	mov	r3, r5
   10a20:	aa92      	add	r2, sp, #584	; 0x248
   10a22:	a9aa      	add	r1, sp, #680	; 0x2a8
   10a24:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10a28:	f7fc f97a 	bl	cd20 <add_mod_n>
   10a2c:	9600      	str	r6, [sp, #0]
   10a2e:	462b      	mov	r3, r5
   10a30:	aa56      	add	r2, sp, #344	; 0x158
   10a32:	a9b6      	add	r1, sp, #728	; 0x2d8
   10a34:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10a38:	f7fc f972 	bl	cd20 <add_mod_n>
   10a3c:	9600      	str	r6, [sp, #0]
   10a3e:	462b      	mov	r3, r5
   10a40:	aa62      	add	r2, sp, #392	; 0x188
   10a42:	a9c2      	add	r1, sp, #776	; 0x308
   10a44:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10a48:	f7fc f96a 	bl	cd20 <add_mod_n>
   10a4c:	9600      	str	r6, [sp, #0]
   10a4e:	462b      	mov	r3, r5
   10a50:	aa6e      	add	r2, sp, #440	; 0x1b8
   10a52:	a9ce      	add	r1, sp, #824	; 0x338
   10a54:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10a58:	f7fc f962 	bl	cd20 <add_mod_n>
   10a5c:	9600      	str	r6, [sp, #0]
   10a5e:	462b      	mov	r3, r5
   10a60:	aa7a      	add	r2, sp, #488	; 0x1e8
   10a62:	a9da      	add	r1, sp, #872	; 0x368
   10a64:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   10a68:	f7fc f95a 	bl	cd20 <add_mod_n>
   10a6c:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
   10a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a74:	00024108 	.word	0x00024108

00010a78 <blst_fp12_mul>:
   10a78:	b508      	push	{r3, lr}
   10a7a:	f7ff ff7f 	bl	1097c <mul_fp12>
   10a7e:	bd08      	pop	{r3, pc}

00010a80 <sqr_fp12>:
   10a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a84:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
   10a88:	4606      	mov	r6, r0
   10a8a:	460d      	mov	r5, r1
   10a8c:	f501 7790 	add.w	r7, r1, #288	; 0x120
   10a90:	463a      	mov	r2, r7
   10a92:	a856      	add	r0, sp, #344	; 0x158
   10a94:	f7fd fad2 	bl	e03c <add_fp6>
   10a98:	f505 74f0 	add.w	r4, r5, #480	; 0x1e0
   10a9c:	f505 7804 	add.w	r8, r5, #528	; 0x210
   10aa0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 10c1c <sqr_fp12+0x19c>
   10aa4:	f04f 0a0c 	mov.w	sl, #12
   10aa8:	f8cd a000 	str.w	sl, [sp]
   10aac:	464b      	mov	r3, r9
   10aae:	4642      	mov	r2, r8
   10ab0:	4621      	mov	r1, r4
   10ab2:	a802      	add	r0, sp, #8
   10ab4:	f7fc f934 	bl	cd20 <add_mod_n>
   10ab8:	f8cd a000 	str.w	sl, [sp]
   10abc:	464b      	mov	r3, r9
   10abe:	4642      	mov	r2, r8
   10ac0:	4621      	mov	r1, r4
   10ac2:	a83e      	add	r0, sp, #248	; 0xf8
   10ac4:	f7fb fdd6 	bl	c674 <sub_mod_n>
   10ac8:	ab02      	add	r3, sp, #8
   10aca:	ac49      	add	r4, sp, #292	; 0x124
   10acc:	a80e      	add	r0, sp, #56	; 0x38
   10ace:	4622      	mov	r2, r4
   10ad0:	f853 1b04 	ldr.w	r1, [r3], #4
   10ad4:	f842 1f04 	str.w	r1, [r2, #4]!
   10ad8:	4283      	cmp	r3, r0
   10ada:	d1f9      	bne.n	10ad0 <sqr_fp12+0x50>
   10adc:	f8df 813c 	ldr.w	r8, [pc, #316]	; 10c1c <sqr_fp12+0x19c>
   10ae0:	f04f 090c 	mov.w	r9, #12
   10ae4:	f8cd 9000 	str.w	r9, [sp]
   10ae8:	4643      	mov	r3, r8
   10aea:	aa3e      	add	r2, sp, #248	; 0xf8
   10aec:	4629      	mov	r1, r5
   10aee:	a80e      	add	r0, sp, #56	; 0x38
   10af0:	f7fc f916 	bl	cd20 <add_mod_n>
   10af4:	f8cd 9000 	str.w	r9, [sp]
   10af8:	4643      	mov	r3, r8
   10afa:	aa4a      	add	r2, sp, #296	; 0x128
   10afc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   10b00:	a81a      	add	r0, sp, #104	; 0x68
   10b02:	f7fc f90d 	bl	cd20 <add_mod_n>
   10b06:	f8cd 9000 	str.w	r9, [sp]
   10b0a:	4643      	mov	r3, r8
   10b0c:	f505 7290 	add.w	r2, r5, #288	; 0x120
   10b10:	f105 0160 	add.w	r1, r5, #96	; 0x60
   10b14:	a826      	add	r0, sp, #152	; 0x98
   10b16:	f7fc f903 	bl	cd20 <add_mod_n>
   10b1a:	f8cd 9000 	str.w	r9, [sp]
   10b1e:	4643      	mov	r3, r8
   10b20:	f505 72a8 	add.w	r2, r5, #336	; 0x150
   10b24:	f105 0190 	add.w	r1, r5, #144	; 0x90
   10b28:	a832      	add	r0, sp, #200	; 0xc8
   10b2a:	f7fc f8f9 	bl	cd20 <add_mod_n>
   10b2e:	f8cd 9000 	str.w	r9, [sp]
   10b32:	4643      	mov	r3, r8
   10b34:	f505 72c0 	add.w	r2, r5, #384	; 0x180
   10b38:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   10b3c:	a83e      	add	r0, sp, #248	; 0xf8
   10b3e:	f7fc f8ef 	bl	cd20 <add_mod_n>
   10b42:	f8cd 9000 	str.w	r9, [sp]
   10b46:	4643      	mov	r3, r8
   10b48:	f505 72d8 	add.w	r2, r5, #432	; 0x1b0
   10b4c:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   10b50:	a84a      	add	r0, sp, #296	; 0x128
   10b52:	f7fc f8e5 	bl	cd20 <add_mod_n>
   10b56:	aa0e      	add	r2, sp, #56	; 0x38
   10b58:	a956      	add	r1, sp, #344	; 0x158
   10b5a:	4608      	mov	r0, r1
   10b5c:	f7ff fda8 	bl	106b0 <mul_fp6>
   10b60:	463a      	mov	r2, r7
   10b62:	4629      	mov	r1, r5
   10b64:	a80e      	add	r0, sp, #56	; 0x38
   10b66:	f7ff fda3 	bl	106b0 <mul_fp6>
   10b6a:	aa0e      	add	r2, sp, #56	; 0x38
   10b6c:	4611      	mov	r1, r2
   10b6e:	f506 7090 	add.w	r0, r6, #288	; 0x120
   10b72:	f7fd fa63 	bl	e03c <add_fp6>
   10b76:	aa0e      	add	r2, sp, #56	; 0x38
   10b78:	a956      	add	r1, sp, #344	; 0x158
   10b7a:	4630      	mov	r0, r6
   10b7c:	f7fd fa14 	bl	dfa8 <sub_fp6>
   10b80:	f8cd 9000 	str.w	r9, [sp]
   10b84:	4643      	mov	r3, r8
   10b86:	aa4a      	add	r2, sp, #296	; 0x128
   10b88:	a93e      	add	r1, sp, #248	; 0xf8
   10b8a:	a802      	add	r0, sp, #8
   10b8c:	f7fc f8c8 	bl	cd20 <add_mod_n>
   10b90:	f8cd 9000 	str.w	r9, [sp]
   10b94:	4643      	mov	r3, r8
   10b96:	aa4a      	add	r2, sp, #296	; 0x128
   10b98:	a93e      	add	r1, sp, #248	; 0xf8
   10b9a:	4608      	mov	r0, r1
   10b9c:	f7fb fd6a 	bl	c674 <sub_mod_n>
   10ba0:	ab02      	add	r3, sp, #8
   10ba2:	a90e      	add	r1, sp, #56	; 0x38
   10ba4:	f853 2b04 	ldr.w	r2, [r3], #4
   10ba8:	f844 2f04 	str.w	r2, [r4, #4]!
   10bac:	4299      	cmp	r1, r3
   10bae:	d1f9      	bne.n	10ba4 <sqr_fp12+0x124>
   10bb0:	4c1a      	ldr	r4, [pc, #104]	; (10c1c <sqr_fp12+0x19c>)
   10bb2:	250c      	movs	r5, #12
   10bb4:	9500      	str	r5, [sp, #0]
   10bb6:	4623      	mov	r3, r4
   10bb8:	aa3e      	add	r2, sp, #248	; 0xf8
   10bba:	4631      	mov	r1, r6
   10bbc:	4630      	mov	r0, r6
   10bbe:	f7fb fd59 	bl	c674 <sub_mod_n>
   10bc2:	f106 0030 	add.w	r0, r6, #48	; 0x30
   10bc6:	9500      	str	r5, [sp, #0]
   10bc8:	4623      	mov	r3, r4
   10bca:	aa4a      	add	r2, sp, #296	; 0x128
   10bcc:	4601      	mov	r1, r0
   10bce:	f7fb fd51 	bl	c674 <sub_mod_n>
   10bd2:	f106 0060 	add.w	r0, r6, #96	; 0x60
   10bd6:	9500      	str	r5, [sp, #0]
   10bd8:	4623      	mov	r3, r4
   10bda:	aa0e      	add	r2, sp, #56	; 0x38
   10bdc:	4601      	mov	r1, r0
   10bde:	f7fb fd49 	bl	c674 <sub_mod_n>
   10be2:	f106 0090 	add.w	r0, r6, #144	; 0x90
   10be6:	9500      	str	r5, [sp, #0]
   10be8:	4623      	mov	r3, r4
   10bea:	aa1a      	add	r2, sp, #104	; 0x68
   10bec:	4601      	mov	r1, r0
   10bee:	f7fb fd41 	bl	c674 <sub_mod_n>
   10bf2:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   10bf6:	9500      	str	r5, [sp, #0]
   10bf8:	4623      	mov	r3, r4
   10bfa:	aa26      	add	r2, sp, #152	; 0x98
   10bfc:	4601      	mov	r1, r0
   10bfe:	f7fb fd39 	bl	c674 <sub_mod_n>
   10c02:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   10c06:	9500      	str	r5, [sp, #0]
   10c08:	4623      	mov	r3, r4
   10c0a:	aa32      	add	r2, sp, #200	; 0xc8
   10c0c:	4601      	mov	r1, r0
   10c0e:	f7fb fd31 	bl	c674 <sub_mod_n>
   10c12:	f50d 7d1e 	add.w	sp, sp, #632	; 0x278
   10c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c1a:	bf00      	nop
   10c1c:	00024108 	.word	0x00024108

00010c20 <blst_fp12_sqr>:
   10c20:	b508      	push	{r3, lr}
   10c22:	f7ff ff2d 	bl	10a80 <sqr_fp12>
   10c26:	bd08      	pop	{r3, pc}

00010c28 <mul_by_xy0_fp6>:
   10c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c2c:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
   10c30:	4604      	mov	r4, r0
   10c32:	460e      	mov	r6, r1
   10c34:	4615      	mov	r5, r2
   10c36:	f8df a184 	ldr.w	sl, [pc, #388]	; 10dbc <mul_by_xy0_fp6+0x194>
   10c3a:	f8df b184 	ldr.w	fp, [pc, #388]	; 10dc0 <mul_by_xy0_fp6+0x198>
   10c3e:	f8cd b000 	str.w	fp, [sp]
   10c42:	4653      	mov	r3, sl
   10c44:	a86e      	add	r0, sp, #440	; 0x1b8
   10c46:	f7ff fb85 	bl	10354 <mul_mont_384x>
   10c4a:	f106 0960 	add.w	r9, r6, #96	; 0x60
   10c4e:	f105 0760 	add.w	r7, r5, #96	; 0x60
   10c52:	f8cd b000 	str.w	fp, [sp]
   10c56:	4653      	mov	r3, sl
   10c58:	463a      	mov	r2, r7
   10c5a:	4649      	mov	r1, r9
   10c5c:	a856      	add	r0, sp, #344	; 0x158
   10c5e:	f7ff fb79 	bl	10354 <mul_mont_384x>
   10c62:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
   10c66:	f8cd b000 	str.w	fp, [sp]
   10c6a:	4653      	mov	r3, sl
   10c6c:	463a      	mov	r2, r7
   10c6e:	4641      	mov	r1, r8
   10c70:	a83e      	add	r0, sp, #248	; 0xf8
   10c72:	f7ff fb6f 	bl	10354 <mul_mont_384x>
   10c76:	f04f 0b0c 	mov.w	fp, #12
   10c7a:	f8cd b000 	str.w	fp, [sp]
   10c7e:	4653      	mov	r3, sl
   10c80:	aa4a      	add	r2, sp, #296	; 0x128
   10c82:	a93e      	add	r1, sp, #248	; 0xf8
   10c84:	a802      	add	r0, sp, #8
   10c86:	f7fc f84b 	bl	cd20 <add_mod_n>
   10c8a:	f8cd b000 	str.w	fp, [sp]
   10c8e:	4653      	mov	r3, sl
   10c90:	aa4a      	add	r2, sp, #296	; 0x128
   10c92:	a93e      	add	r1, sp, #248	; 0xf8
   10c94:	4608      	mov	r0, r1
   10c96:	f7fb fced 	bl	c674 <sub_mod_n>
   10c9a:	ab02      	add	r3, sp, #8
   10c9c:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   10ca0:	a90e      	add	r1, sp, #56	; 0x38
   10ca2:	f853 2b04 	ldr.w	r2, [r3], #4
   10ca6:	f84c 2f04 	str.w	r2, [ip, #4]!
   10caa:	4299      	cmp	r1, r3
   10cac:	d1f9      	bne.n	10ca2 <mul_by_xy0_fp6+0x7a>
   10cae:	f8df a10c 	ldr.w	sl, [pc, #268]	; 10dbc <mul_by_xy0_fp6+0x194>
   10cb2:	f04f 0b0c 	mov.w	fp, #12
   10cb6:	f8cd b000 	str.w	fp, [sp]
   10cba:	4653      	mov	r3, sl
   10cbc:	464a      	mov	r2, r9
   10cbe:	4631      	mov	r1, r6
   10cc0:	a826      	add	r0, sp, #152	; 0x98
   10cc2:	f7fc f82d 	bl	cd20 <add_mod_n>
   10cc6:	f8cd b000 	str.w	fp, [sp]
   10cca:	4653      	mov	r3, sl
   10ccc:	f106 0290 	add.w	r2, r6, #144	; 0x90
   10cd0:	f106 0130 	add.w	r1, r6, #48	; 0x30
   10cd4:	a832      	add	r0, sp, #200	; 0xc8
   10cd6:	f7fc f823 	bl	cd20 <add_mod_n>
   10cda:	f8cd b000 	str.w	fp, [sp]
   10cde:	4653      	mov	r3, sl
   10ce0:	463a      	mov	r2, r7
   10ce2:	4629      	mov	r1, r5
   10ce4:	a80e      	add	r0, sp, #56	; 0x38
   10ce6:	f7fc f81b 	bl	cd20 <add_mod_n>
   10cea:	f8cd b000 	str.w	fp, [sp]
   10cee:	4653      	mov	r3, sl
   10cf0:	f105 0290 	add.w	r2, r5, #144	; 0x90
   10cf4:	f105 0130 	add.w	r1, r5, #48	; 0x30
   10cf8:	a81a      	add	r0, sp, #104	; 0x68
   10cfa:	f7fc f811 	bl	cd20 <add_mod_n>
   10cfe:	f104 0660 	add.w	r6, r4, #96	; 0x60
   10d02:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 10dc0 <mul_by_xy0_fp6+0x198>
   10d06:	f8cd 9000 	str.w	r9, [sp]
   10d0a:	4653      	mov	r3, sl
   10d0c:	aa0e      	add	r2, sp, #56	; 0x38
   10d0e:	a926      	add	r1, sp, #152	; 0x98
   10d10:	4630      	mov	r0, r6
   10d12:	f7ff fb1f 	bl	10354 <mul_mont_384x>
   10d16:	f8cd b000 	str.w	fp, [sp]
   10d1a:	4653      	mov	r3, sl
   10d1c:	aa6e      	add	r2, sp, #440	; 0x1b8
   10d1e:	4631      	mov	r1, r6
   10d20:	4630      	mov	r0, r6
   10d22:	f7fb fca7 	bl	c674 <sub_mod_n>
   10d26:	f104 0790 	add.w	r7, r4, #144	; 0x90
   10d2a:	f8cd b000 	str.w	fp, [sp]
   10d2e:	4653      	mov	r3, sl
   10d30:	aa7a      	add	r2, sp, #488	; 0x1e8
   10d32:	4639      	mov	r1, r7
   10d34:	4638      	mov	r0, r7
   10d36:	f7fb fc9d 	bl	c674 <sub_mod_n>
   10d3a:	f8cd b000 	str.w	fp, [sp]
   10d3e:	4653      	mov	r3, sl
   10d40:	aa56      	add	r2, sp, #344	; 0x158
   10d42:	4631      	mov	r1, r6
   10d44:	4630      	mov	r0, r6
   10d46:	f7fb fc95 	bl	c674 <sub_mod_n>
   10d4a:	f8cd b000 	str.w	fp, [sp]
   10d4e:	4653      	mov	r3, sl
   10d50:	aa62      	add	r2, sp, #392	; 0x188
   10d52:	4639      	mov	r1, r7
   10d54:	4638      	mov	r0, r7
   10d56:	f7fb fc8d 	bl	c674 <sub_mod_n>
   10d5a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   10d5e:	f8cd 9000 	str.w	r9, [sp]
   10d62:	4653      	mov	r3, sl
   10d64:	462a      	mov	r2, r5
   10d66:	4641      	mov	r1, r8
   10d68:	4630      	mov	r0, r6
   10d6a:	f7ff faf3 	bl	10354 <mul_mont_384x>
   10d6e:	f8cd b000 	str.w	fp, [sp]
   10d72:	4653      	mov	r3, sl
   10d74:	aa56      	add	r2, sp, #344	; 0x158
   10d76:	4631      	mov	r1, r6
   10d78:	4630      	mov	r0, r6
   10d7a:	f7fb ffd1 	bl	cd20 <add_mod_n>
   10d7e:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   10d82:	f8cd b000 	str.w	fp, [sp]
   10d86:	4653      	mov	r3, sl
   10d88:	aa62      	add	r2, sp, #392	; 0x188
   10d8a:	4601      	mov	r1, r0
   10d8c:	f7fb ffc8 	bl	cd20 <add_mod_n>
   10d90:	f8cd b000 	str.w	fp, [sp]
   10d94:	4653      	mov	r3, sl
   10d96:	aa6e      	add	r2, sp, #440	; 0x1b8
   10d98:	a93e      	add	r1, sp, #248	; 0xf8
   10d9a:	4620      	mov	r0, r4
   10d9c:	f7fb ffc0 	bl	cd20 <add_mod_n>
   10da0:	f8cd b000 	str.w	fp, [sp]
   10da4:	4653      	mov	r3, sl
   10da6:	aa7a      	add	r2, sp, #488	; 0x1e8
   10da8:	a94a      	add	r1, sp, #296	; 0x128
   10daa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10dae:	f7fb ffb7 	bl	cd20 <add_mod_n>
   10db2:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
   10db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dba:	bf00      	nop
   10dbc:	00024108 	.word	0x00024108
   10dc0:	fffcfffd 	.word	0xfffcfffd

00010dc4 <mul_by_xy00z0_fp12>:
   10dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10dc8:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
   10dcc:	4604      	mov	r4, r0
   10dce:	460e      	mov	r6, r1
   10dd0:	4615      	mov	r5, r2
   10dd2:	a8b6      	add	r0, sp, #728	; 0x2d8
   10dd4:	f7ff ff28 	bl	10c28 <mul_by_xy0_fp6>
   10dd8:	f506 7890 	add.w	r8, r6, #288	; 0x120
   10ddc:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
   10de0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 10f5c <mul_by_xy00z0_fp12+0x198>
   10de4:	f8df a178 	ldr.w	sl, [pc, #376]	; 10f60 <mul_by_xy00z0_fp12+0x19c>
   10de8:	f8cd a000 	str.w	sl, [sp]
   10dec:	464b      	mov	r3, r9
   10dee:	463a      	mov	r2, r7
   10df0:	f506 71f0 	add.w	r1, r6, #480	; 0x1e0
   10df4:	a80e      	add	r0, sp, #56	; 0x38
   10df6:	f7ff faad 	bl	10354 <mul_mont_384x>
   10dfa:	f8cd a000 	str.w	sl, [sp]
   10dfe:	464b      	mov	r3, r9
   10e00:	463a      	mov	r2, r7
   10e02:	f506 71c0 	add.w	r1, r6, #384	; 0x180
   10e06:	a89e      	add	r0, sp, #632	; 0x278
   10e08:	f7ff faa4 	bl	10354 <mul_mont_384x>
   10e0c:	f8cd a000 	str.w	sl, [sp]
   10e10:	464b      	mov	r3, r9
   10e12:	463a      	mov	r2, r7
   10e14:	4641      	mov	r1, r8
   10e16:	a886      	add	r0, sp, #536	; 0x218
   10e18:	f7ff fa9c 	bl	10354 <mul_mont_384x>
   10e1c:	f04f 0a0c 	mov.w	sl, #12
   10e20:	f8cd a000 	str.w	sl, [sp]
   10e24:	464b      	mov	r3, r9
   10e26:	aa1a      	add	r2, sp, #104	; 0x68
   10e28:	a90e      	add	r1, sp, #56	; 0x38
   10e2a:	a802      	add	r0, sp, #8
   10e2c:	f7fb ff78 	bl	cd20 <add_mod_n>
   10e30:	f8cd a000 	str.w	sl, [sp]
   10e34:	464b      	mov	r3, r9
   10e36:	aa1a      	add	r2, sp, #104	; 0x68
   10e38:	a90e      	add	r1, sp, #56	; 0x38
   10e3a:	a86e      	add	r0, sp, #440	; 0x1b8
   10e3c:	f7fb fc1a 	bl	c674 <sub_mod_n>
   10e40:	ab02      	add	r3, sp, #8
   10e42:	aa79      	add	r2, sp, #484	; 0x1e4
   10e44:	a80e      	add	r0, sp, #56	; 0x38
   10e46:	f853 1b04 	ldr.w	r1, [r3], #4
   10e4a:	f842 1f04 	str.w	r1, [r2, #4]!
   10e4e:	4283      	cmp	r3, r0
   10e50:	d1f9      	bne.n	10e46 <mul_by_xy00z0_fp12+0x82>
   10e52:	f1a5 0c04 	sub.w	ip, r5, #4
   10e56:	ab26      	add	r3, sp, #152	; 0x98
   10e58:	a93e      	add	r1, sp, #248	; 0xf8
   10e5a:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   10e5e:	f843 2b04 	str.w	r2, [r3], #4
   10e62:	428b      	cmp	r3, r1
   10e64:	d1f9      	bne.n	10e5a <mul_by_xy00z0_fp12+0x96>
   10e66:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 10f5c <mul_by_xy00z0_fp12+0x198>
   10e6a:	f04f 0a0c 	mov.w	sl, #12
   10e6e:	f8cd a000 	str.w	sl, [sp]
   10e72:	464b      	mov	r3, r9
   10e74:	463a      	mov	r2, r7
   10e76:	f105 0160 	add.w	r1, r5, #96	; 0x60
   10e7a:	a83e      	add	r0, sp, #248	; 0xf8
   10e7c:	f7fb ff50 	bl	cd20 <add_mod_n>
   10e80:	f8cd a000 	str.w	sl, [sp]
   10e84:	464b      	mov	r3, r9
   10e86:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   10e8a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   10e8e:	a84a      	add	r0, sp, #296	; 0x128
   10e90:	f7fb ff46 	bl	cd20 <add_mod_n>
   10e94:	f504 7590 	add.w	r5, r4, #288	; 0x120
   10e98:	4642      	mov	r2, r8
   10e9a:	4631      	mov	r1, r6
   10e9c:	4628      	mov	r0, r5
   10e9e:	f7fd f8cd 	bl	e03c <add_fp6>
   10ea2:	aa26      	add	r2, sp, #152	; 0x98
   10ea4:	4629      	mov	r1, r5
   10ea6:	4628      	mov	r0, r5
   10ea8:	f7ff febe 	bl	10c28 <mul_by_xy0_fp6>
   10eac:	aab6      	add	r2, sp, #728	; 0x2d8
   10eae:	4629      	mov	r1, r5
   10eb0:	4628      	mov	r0, r5
   10eb2:	f7fd f879 	bl	dfa8 <sub_fp6>
   10eb6:	aa6e      	add	r2, sp, #440	; 0x1b8
   10eb8:	4629      	mov	r1, r5
   10eba:	4628      	mov	r0, r5
   10ebc:	f7fd f874 	bl	dfa8 <sub_fp6>
   10ec0:	f8cd a000 	str.w	sl, [sp]
   10ec4:	464b      	mov	r3, r9
   10ec6:	aaaa      	add	r2, sp, #680	; 0x2a8
   10ec8:	a99e      	add	r1, sp, #632	; 0x278
   10eca:	a80e      	add	r0, sp, #56	; 0x38
   10ecc:	f7fb ff28 	bl	cd20 <add_mod_n>
   10ed0:	f8cd a000 	str.w	sl, [sp]
   10ed4:	464b      	mov	r3, r9
   10ed6:	aaaa      	add	r2, sp, #680	; 0x2a8
   10ed8:	a99e      	add	r1, sp, #632	; 0x278
   10eda:	4608      	mov	r0, r1
   10edc:	f7fb fbca 	bl	c674 <sub_mod_n>
   10ee0:	ab0e      	add	r3, sp, #56	; 0x38
   10ee2:	aaa9      	add	r2, sp, #676	; 0x2a4
   10ee4:	a81a      	add	r0, sp, #104	; 0x68
   10ee6:	f853 1b04 	ldr.w	r1, [r3], #4
   10eea:	f842 1f04 	str.w	r1, [r2, #4]!
   10eee:	4283      	cmp	r3, r0
   10ef0:	d1f9      	bne.n	10ee6 <mul_by_xy00z0_fp12+0x122>
   10ef2:	4d1a      	ldr	r5, [pc, #104]	; (10f5c <mul_by_xy00z0_fp12+0x198>)
   10ef4:	260c      	movs	r6, #12
   10ef6:	9600      	str	r6, [sp, #0]
   10ef8:	462b      	mov	r3, r5
   10efa:	aa9e      	add	r2, sp, #632	; 0x278
   10efc:	a9b6      	add	r1, sp, #728	; 0x2d8
   10efe:	4620      	mov	r0, r4
   10f00:	f7fb ff0e 	bl	cd20 <add_mod_n>
   10f04:	9600      	str	r6, [sp, #0]
   10f06:	462b      	mov	r3, r5
   10f08:	aaaa      	add	r2, sp, #680	; 0x2a8
   10f0a:	a9c2      	add	r1, sp, #776	; 0x308
   10f0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   10f10:	f7fb ff06 	bl	cd20 <add_mod_n>
   10f14:	9600      	str	r6, [sp, #0]
   10f16:	462b      	mov	r3, r5
   10f18:	aa6e      	add	r2, sp, #440	; 0x1b8
   10f1a:	a9ce      	add	r1, sp, #824	; 0x338
   10f1c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   10f20:	f7fb fefe 	bl	cd20 <add_mod_n>
   10f24:	9600      	str	r6, [sp, #0]
   10f26:	462b      	mov	r3, r5
   10f28:	aa7a      	add	r2, sp, #488	; 0x1e8
   10f2a:	a9da      	add	r1, sp, #872	; 0x368
   10f2c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   10f30:	f7fb fef6 	bl	cd20 <add_mod_n>
   10f34:	9600      	str	r6, [sp, #0]
   10f36:	462b      	mov	r3, r5
   10f38:	aa86      	add	r2, sp, #536	; 0x218
   10f3a:	a9e6      	add	r1, sp, #920	; 0x398
   10f3c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   10f40:	f7fb feee 	bl	cd20 <add_mod_n>
   10f44:	9600      	str	r6, [sp, #0]
   10f46:	462b      	mov	r3, r5
   10f48:	aa92      	add	r2, sp, #584	; 0x248
   10f4a:	a9f2      	add	r1, sp, #968	; 0x3c8
   10f4c:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   10f50:	f7fb fee6 	bl	cd20 <add_mod_n>
   10f54:	f50d 7d7e 	add.w	sp, sp, #1016	; 0x3f8
   10f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10f5c:	00024108 	.word	0x00024108
   10f60:	fffcfffd 	.word	0xfffcfffd

00010f64 <blst_fp12_mul_by_xy00z0>:
   10f64:	b508      	push	{r3, lr}
   10f66:	f7ff ff2d 	bl	10dc4 <mul_by_xy00z0_fp12>
   10f6a:	bd08      	pop	{r3, pc}

00010f6c <post_add_n_dbl>:
   10f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f70:	b0c8      	sub	sp, #288	; 0x120
   10f72:	4604      	mov	r4, r0
   10f74:	4617      	mov	r7, r2
   10f76:	4698      	mov	r8, r3
   10f78:	f501 7590 	add.w	r5, r1, #288	; 0x120
   10f7c:	4668      	mov	r0, sp
   10f7e:	f7fb fe81 	bl	cc84 <post_line_by_Px2>
   10f82:	466a      	mov	r2, sp
   10f84:	4621      	mov	r1, r4
   10f86:	4620      	mov	r0, r4
   10f88:	f7ff ff1c 	bl	10dc4 <mul_by_xy00z0_fp12>
   10f8c:	f108 36ff 	add.w	r6, r8, #4294967295
   10f90:	f1b8 0f00 	cmp.w	r8, #0
   10f94:	d013      	beq.n	10fbe <post_add_n_dbl+0x52>
   10f96:	4621      	mov	r1, r4
   10f98:	4620      	mov	r0, r4
   10f9a:	f7ff fd71 	bl	10a80 <sqr_fp12>
   10f9e:	4629      	mov	r1, r5
   10fa0:	463a      	mov	r2, r7
   10fa2:	f505 7590 	add.w	r5, r5, #288	; 0x120
   10fa6:	4668      	mov	r0, sp
   10fa8:	f7fb fe6c 	bl	cc84 <post_line_by_Px2>
   10fac:	466a      	mov	r2, sp
   10fae:	4621      	mov	r1, r4
   10fb0:	4620      	mov	r0, r4
   10fb2:	f7ff ff07 	bl	10dc4 <mul_by_xy00z0_fp12>
   10fb6:	3e01      	subs	r6, #1
   10fb8:	f1b6 3fff 	cmp.w	r6, #4294967295
   10fbc:	d1eb      	bne.n	10f96 <post_add_n_dbl+0x2a>
   10fbe:	b048      	add	sp, #288	; 0x120
   10fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010fc4 <miller_loop_lines>:
   10fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc8:	b0e2      	sub	sp, #392	; 0x188
   10fca:	4605      	mov	r5, r0
   10fcc:	460e      	mov	r6, r1
   10fce:	4614      	mov	r4, r2
   10fd0:	4f32      	ldr	r7, [pc, #200]	; (1109c <miller_loop_lines+0xd8>)
   10fd2:	f04f 080c 	mov.w	r8, #12
   10fd6:	f8cd 8000 	str.w	r8, [sp]
   10fda:	463b      	mov	r3, r7
   10fdc:	4611      	mov	r1, r2
   10fde:	a84a      	add	r0, sp, #296	; 0x128
   10fe0:	f7fb fe9e 	bl	cd20 <add_mod_n>
   10fe4:	f8cd 8000 	str.w	r8, [sp]
   10fe8:	463b      	mov	r3, r7
   10fea:	2201      	movs	r2, #1
   10fec:	a94a      	add	r1, sp, #296	; 0x128
   10fee:	4608      	mov	r0, r1
   10ff0:	f7fc fd2a 	bl	da48 <cneg_mod_n>
   10ff4:	f104 0130 	add.w	r1, r4, #48	; 0x30
   10ff8:	f8cd 8000 	str.w	r8, [sp]
   10ffc:	463b      	mov	r3, r7
   10ffe:	460a      	mov	r2, r1
   11000:	a856      	add	r0, sp, #344	; 0x158
   11002:	f7fb fe8d 	bl	cd20 <add_mod_n>
   11006:	aa4a      	add	r2, sp, #296	; 0x128
   11008:	4631      	mov	r1, r6
   1100a:	a802      	add	r0, sp, #8
   1100c:	f7fb fe3a 	bl	cc84 <post_line_by_Px2>
   11010:	462b      	mov	r3, r5
   11012:	f505 7110 	add.w	r1, r5, #576	; 0x240
   11016:	2200      	movs	r2, #0
   11018:	f843 2b04 	str.w	r2, [r3], #4
   1101c:	428b      	cmp	r3, r1
   1101e:	d1fb      	bne.n	11018 <miller_loop_lines+0x54>
   11020:	ab01      	add	r3, sp, #4
   11022:	1f2a      	subs	r2, r5, #4
   11024:	a831      	add	r0, sp, #196	; 0xc4
   11026:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1102a:	f842 1f04 	str.w	r1, [r2, #4]!
   1102e:	4283      	cmp	r3, r0
   11030:	d1f9      	bne.n	11026 <miller_loop_lines+0x62>
   11032:	ab31      	add	r3, sp, #196	; 0xc4
   11034:	f505 72be 	add.w	r2, r5, #380	; 0x17c
   11038:	a949      	add	r1, sp, #292	; 0x124
   1103a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1103e:	f842 4f04 	str.w	r4, [r2, #4]!
   11042:	428b      	cmp	r3, r1
   11044:	d1f9      	bne.n	1103a <miller_loop_lines+0x76>
   11046:	2302      	movs	r3, #2
   11048:	aa4a      	add	r2, sp, #296	; 0x128
   1104a:	f506 7190 	add.w	r1, r6, #288	; 0x120
   1104e:	4628      	mov	r0, r5
   11050:	f7ff ff8c 	bl	10f6c <post_add_n_dbl>
   11054:	2303      	movs	r3, #3
   11056:	aa4a      	add	r2, sp, #296	; 0x128
   11058:	f506 6190 	add.w	r1, r6, #1152	; 0x480
   1105c:	4628      	mov	r0, r5
   1105e:	f7ff ff85 	bl	10f6c <post_add_n_dbl>
   11062:	2309      	movs	r3, #9
   11064:	aa4a      	add	r2, sp, #296	; 0x128
   11066:	f506 6110 	add.w	r1, r6, #2304	; 0x900
   1106a:	4628      	mov	r0, r5
   1106c:	f7ff ff7e 	bl	10f6c <post_add_n_dbl>
   11070:	2320      	movs	r3, #32
   11072:	aa4a      	add	r2, sp, #296	; 0x128
   11074:	f506 51a2 	add.w	r1, r6, #5184	; 0x1440
   11078:	4628      	mov	r0, r5
   1107a:	f7ff ff77 	bl	10f6c <post_add_n_dbl>
   1107e:	2310      	movs	r3, #16
   11080:	aa4a      	add	r2, sp, #296	; 0x128
   11082:	f506 5165 	add.w	r1, r6, #14656	; 0x3940
   11086:	3120      	adds	r1, #32
   11088:	4628      	mov	r0, r5
   1108a:	f7ff ff6f 	bl	10f6c <post_add_n_dbl>
   1108e:	4628      	mov	r0, r5
   11090:	f7fc fe5a 	bl	dd48 <conjugate_fp12>
   11094:	b062      	add	sp, #392	; 0x188
   11096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1109a:	bf00      	nop
   1109c:	00024108 	.word	0x00024108

000110a0 <blst_miller_loop_lines>:
   110a0:	b508      	push	{r3, lr}
   110a2:	f7ff ff8f 	bl	10fc4 <miller_loop_lines>
   110a6:	bd08      	pop	{r3, pc}

000110a8 <sqr_n_mul_mont_383>:
   110a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110ac:	b082      	sub	sp, #8
   110ae:	4605      	mov	r5, r0
   110b0:	461e      	mov	r6, r3
   110b2:	9f08      	ldr	r7, [sp, #32]
   110b4:	b182      	cbz	r2, 110d8 <sqr_n_mul_mont_383+0x30>
   110b6:	1e54      	subs	r4, r2, #1
   110b8:	f04f 080c 	mov.w	r8, #12
   110bc:	e000      	b.n	110c0 <sqr_n_mul_mont_383+0x18>
   110be:	4629      	mov	r1, r5
   110c0:	f8cd 8004 	str.w	r8, [sp, #4]
   110c4:	9700      	str	r7, [sp, #0]
   110c6:	4633      	mov	r3, r6
   110c8:	460a      	mov	r2, r1
   110ca:	4628      	mov	r0, r5
   110cc:	f7fc f909 	bl	d2e2 <mul_mont_nonred_n>
   110d0:	3c01      	subs	r4, #1
   110d2:	f1b4 3fff 	cmp.w	r4, #4294967295
   110d6:	d1f2      	bne.n	110be <sqr_n_mul_mont_383+0x16>
   110d8:	230c      	movs	r3, #12
   110da:	9301      	str	r3, [sp, #4]
   110dc:	9700      	str	r7, [sp, #0]
   110de:	4633      	mov	r3, r6
   110e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   110e2:	4629      	mov	r1, r5
   110e4:	4628      	mov	r0, r5
   110e6:	f7fb fc73 	bl	c9d0 <mul_mont_n>
   110ea:	b002      	add	sp, #8
   110ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000110f0 <flt_reciprocal_fp>:
   110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110f4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   110f8:	9003      	str	r0, [sp, #12]
   110fa:	1f0b      	subs	r3, r1, #4
   110fc:	aa0f      	add	r2, sp, #60	; 0x3c
   110fe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   11102:	f853 1f04 	ldr.w	r1, [r3, #4]!
   11106:	f842 1f04 	str.w	r1, [r2, #4]!
   1110a:	4283      	cmp	r3, r0
   1110c:	d1f9      	bne.n	11102 <flt_reciprocal_fp+0x12>
   1110e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 113f4 <flt_reciprocal_fp+0x304>
   11112:	270c      	movs	r7, #12
   11114:	9701      	str	r7, [sp, #4]
   11116:	4eb8      	ldr	r6, [pc, #736]	; (113f8 <flt_reciprocal_fp+0x308>)
   11118:	9600      	str	r6, [sp, #0]
   1111a:	465b      	mov	r3, fp
   1111c:	aa10      	add	r2, sp, #64	; 0x40
   1111e:	4611      	mov	r1, r2
   11120:	a804      	add	r0, sp, #16
   11122:	f7fb fc55 	bl	c9d0 <mul_mont_n>
   11126:	ad70      	add	r5, sp, #448	; 0x1c0
   11128:	9701      	str	r7, [sp, #4]
   1112a:	9600      	str	r6, [sp, #0]
   1112c:	465b      	mov	r3, fp
   1112e:	aa10      	add	r2, sp, #64	; 0x40
   11130:	a904      	add	r1, sp, #16
   11132:	4628      	mov	r0, r5
   11134:	f7fb fc4c 	bl	c9d0 <mul_mont_n>
   11138:	ac40      	add	r4, sp, #256	; 0x100
   1113a:	9701      	str	r7, [sp, #4]
   1113c:	9600      	str	r6, [sp, #0]
   1113e:	465b      	mov	r3, fp
   11140:	aa04      	add	r2, sp, #16
   11142:	4611      	mov	r1, r2
   11144:	4620      	mov	r0, r4
   11146:	f7fb fc43 	bl	c9d0 <mul_mont_n>
   1114a:	9701      	str	r7, [sp, #4]
   1114c:	9600      	str	r6, [sp, #0]
   1114e:	465b      	mov	r3, fp
   11150:	aa04      	add	r2, sp, #16
   11152:	4629      	mov	r1, r5
   11154:	a81c      	add	r0, sp, #112	; 0x70
   11156:	f7fb fc3b 	bl	c9d0 <mul_mont_n>
   1115a:	9701      	str	r7, [sp, #4]
   1115c:	9600      	str	r6, [sp, #0]
   1115e:	465b      	mov	r3, fp
   11160:	462a      	mov	r2, r5
   11162:	4621      	mov	r1, r4
   11164:	a858      	add	r0, sp, #352	; 0x160
   11166:	f7fb fc33 	bl	c9d0 <mul_mont_n>
   1116a:	9701      	str	r7, [sp, #4]
   1116c:	9600      	str	r6, [sp, #0]
   1116e:	465b      	mov	r3, fp
   11170:	4622      	mov	r2, r4
   11172:	a91c      	add	r1, sp, #112	; 0x70
   11174:	a87c      	add	r0, sp, #496	; 0x1f0
   11176:	f7fb fc2b 	bl	c9d0 <mul_mont_n>
   1117a:	9701      	str	r7, [sp, #4]
   1117c:	9600      	str	r6, [sp, #0]
   1117e:	465b      	mov	r3, fp
   11180:	4622      	mov	r2, r4
   11182:	a958      	add	r1, sp, #352	; 0x160
   11184:	a8a0      	add	r0, sp, #640	; 0x280
   11186:	f7fb fc23 	bl	c9d0 <mul_mont_n>
   1118a:	f10d 08d0 	add.w	r8, sp, #208	; 0xd0
   1118e:	9701      	str	r7, [sp, #4]
   11190:	9600      	str	r6, [sp, #0]
   11192:	465b      	mov	r3, fp
   11194:	4622      	mov	r2, r4
   11196:	a97c      	add	r1, sp, #496	; 0x1f0
   11198:	4640      	mov	r0, r8
   1119a:	f7fb fc19 	bl	c9d0 <mul_mont_n>
   1119e:	f50d 79c8 	add.w	r9, sp, #400	; 0x190
   111a2:	9701      	str	r7, [sp, #4]
   111a4:	9600      	str	r6, [sp, #0]
   111a6:	465b      	mov	r3, fp
   111a8:	4622      	mov	r2, r4
   111aa:	a9a0      	add	r1, sp, #640	; 0x280
   111ac:	4648      	mov	r0, r9
   111ae:	f7fb fc0f 	bl	c9d0 <mul_mont_n>
   111b2:	9701      	str	r7, [sp, #4]
   111b4:	9600      	str	r6, [sp, #0]
   111b6:	465b      	mov	r3, fp
   111b8:	4622      	mov	r2, r4
   111ba:	4641      	mov	r1, r8
   111bc:	a8b8      	add	r0, sp, #736	; 0x2e0
   111be:	f7fb fc07 	bl	c9d0 <mul_mont_n>
   111c2:	9701      	str	r7, [sp, #4]
   111c4:	9600      	str	r6, [sp, #0]
   111c6:	465b      	mov	r3, fp
   111c8:	4622      	mov	r2, r4
   111ca:	4649      	mov	r1, r9
   111cc:	a888      	add	r0, sp, #544	; 0x220
   111ce:	f7fb fbff 	bl	c9d0 <mul_mont_n>
   111d2:	9701      	str	r7, [sp, #4]
   111d4:	9600      	str	r6, [sp, #0]
   111d6:	465b      	mov	r3, fp
   111d8:	4622      	mov	r2, r4
   111da:	a9b8      	add	r1, sp, #736	; 0x2e0
   111dc:	a828      	add	r0, sp, #160	; 0xa0
   111de:	f7fb fbf7 	bl	c9d0 <mul_mont_n>
   111e2:	9701      	str	r7, [sp, #4]
   111e4:	9600      	str	r6, [sp, #0]
   111e6:	465b      	mov	r3, fp
   111e8:	4622      	mov	r2, r4
   111ea:	a988      	add	r1, sp, #544	; 0x220
   111ec:	a894      	add	r0, sp, #592	; 0x250
   111ee:	f7fb fbef 	bl	c9d0 <mul_mont_n>
   111f2:	9701      	str	r7, [sp, #4]
   111f4:	9600      	str	r6, [sp, #0]
   111f6:	465b      	mov	r3, fp
   111f8:	4642      	mov	r2, r8
   111fa:	4641      	mov	r1, r8
   111fc:	a804      	add	r0, sp, #16
   111fe:	f7fb fbe7 	bl	c9d0 <mul_mont_n>
   11202:	9701      	str	r7, [sp, #4]
   11204:	9600      	str	r6, [sp, #0]
   11206:	465b      	mov	r3, fp
   11208:	4622      	mov	r2, r4
   1120a:	a994      	add	r1, sp, #592	; 0x250
   1120c:	a8ac      	add	r0, sp, #688	; 0x2b0
   1120e:	f7fb fbdf 	bl	c9d0 <mul_mont_n>
   11212:	f50d 7a98 	add.w	sl, sp, #304	; 0x130
   11216:	9701      	str	r7, [sp, #4]
   11218:	9600      	str	r6, [sp, #0]
   1121a:	465b      	mov	r3, fp
   1121c:	462a      	mov	r2, r5
   1121e:	a904      	add	r1, sp, #16
   11220:	4650      	mov	r0, sl
   11222:	f7fb fbd5 	bl	c9d0 <mul_mont_n>
   11226:	9701      	str	r7, [sp, #4]
   11228:	9600      	str	r6, [sp, #0]
   1122a:	465b      	mov	r3, fp
   1122c:	aa1c      	add	r2, sp, #112	; 0x70
   1122e:	a904      	add	r1, sp, #16
   11230:	4620      	mov	r0, r4
   11232:	f7fb fbcd 	bl	c9d0 <mul_mont_n>
   11236:	abb8      	add	r3, sp, #736	; 0x2e0
   11238:	9301      	str	r3, [sp, #4]
   1123a:	9600      	str	r6, [sp, #0]
   1123c:	465b      	mov	r3, fp
   1123e:	463a      	mov	r2, r7
   11240:	a904      	add	r1, sp, #16
   11242:	4608      	mov	r0, r1
   11244:	f7ff ff30 	bl	110a8 <sqr_n_mul_mont_383>
   11248:	f8cd 9004 	str.w	r9, [sp, #4]
   1124c:	9600      	str	r6, [sp, #0]
   1124e:	465b      	mov	r3, fp
   11250:	2207      	movs	r2, #7
   11252:	a904      	add	r1, sp, #16
   11254:	4608      	mov	r0, r1
   11256:	f7ff ff27 	bl	110a8 <sqr_n_mul_mont_383>
   1125a:	ab1c      	add	r3, sp, #112	; 0x70
   1125c:	9301      	str	r3, [sp, #4]
   1125e:	9600      	str	r6, [sp, #0]
   11260:	465b      	mov	r3, fp
   11262:	2204      	movs	r2, #4
   11264:	a904      	add	r1, sp, #16
   11266:	4608      	mov	r0, r1
   11268:	f7ff ff1e 	bl	110a8 <sqr_n_mul_mont_383>
   1126c:	ab58      	add	r3, sp, #352	; 0x160
   1126e:	9301      	str	r3, [sp, #4]
   11270:	9600      	str	r6, [sp, #0]
   11272:	465b      	mov	r3, fp
   11274:	2206      	movs	r2, #6
   11276:	a904      	add	r1, sp, #16
   11278:	4608      	mov	r0, r1
   1127a:	f7ff ff15 	bl	110a8 <sqr_n_mul_mont_383>
   1127e:	ab94      	add	r3, sp, #592	; 0x250
   11280:	9301      	str	r3, [sp, #4]
   11282:	9600      	str	r6, [sp, #0]
   11284:	465b      	mov	r3, fp
   11286:	2207      	movs	r2, #7
   11288:	a904      	add	r1, sp, #16
   1128a:	4608      	mov	r0, r1
   1128c:	f7ff ff0c 	bl	110a8 <sqr_n_mul_mont_383>
   11290:	9401      	str	r4, [sp, #4]
   11292:	9600      	str	r6, [sp, #0]
   11294:	465b      	mov	r3, fp
   11296:	2205      	movs	r2, #5
   11298:	a904      	add	r1, sp, #16
   1129a:	4608      	mov	r0, r1
   1129c:	f7ff ff04 	bl	110a8 <sqr_n_mul_mont_383>
   112a0:	9501      	str	r5, [sp, #4]
   112a2:	9600      	str	r6, [sp, #0]
   112a4:	465b      	mov	r3, fp
   112a6:	2202      	movs	r2, #2
   112a8:	a904      	add	r1, sp, #16
   112aa:	4608      	mov	r0, r1
   112ac:	f7ff fefc 	bl	110a8 <sqr_n_mul_mont_383>
   112b0:	f8cd 8004 	str.w	r8, [sp, #4]
   112b4:	9600      	str	r6, [sp, #0]
   112b6:	465b      	mov	r3, fp
   112b8:	2206      	movs	r2, #6
   112ba:	a904      	add	r1, sp, #16
   112bc:	4608      	mov	r0, r1
   112be:	f7ff fef3 	bl	110a8 <sqr_n_mul_mont_383>
   112c2:	f8cd 8004 	str.w	r8, [sp, #4]
   112c6:	9600      	str	r6, [sp, #0]
   112c8:	465b      	mov	r3, fp
   112ca:	2206      	movs	r2, #6
   112cc:	a904      	add	r1, sp, #16
   112ce:	4608      	mov	r0, r1
   112d0:	f7ff feea 	bl	110a8 <sqr_n_mul_mont_383>
   112d4:	ab7c      	add	r3, sp, #496	; 0x1f0
   112d6:	9301      	str	r3, [sp, #4]
   112d8:	9600      	str	r6, [sp, #0]
   112da:	465b      	mov	r3, fp
   112dc:	2206      	movs	r2, #6
   112de:	a904      	add	r1, sp, #16
   112e0:	4608      	mov	r0, r1
   112e2:	f7ff fee1 	bl	110a8 <sqr_n_mul_mont_383>
   112e6:	9501      	str	r5, [sp, #4]
   112e8:	9600      	str	r6, [sp, #0]
   112ea:	465b      	mov	r3, fp
   112ec:	2203      	movs	r2, #3
   112ee:	a904      	add	r1, sp, #16
   112f0:	4608      	mov	r0, r1
   112f2:	f7ff fed9 	bl	110a8 <sqr_n_mul_mont_383>
   112f6:	f8cd 8004 	str.w	r8, [sp, #4]
   112fa:	9600      	str	r6, [sp, #0]
   112fc:	465b      	mov	r3, fp
   112fe:	2207      	movs	r2, #7
   11300:	a904      	add	r1, sp, #16
   11302:	4608      	mov	r0, r1
   11304:	f7ff fed0 	bl	110a8 <sqr_n_mul_mont_383>
   11308:	f8cd 8004 	str.w	r8, [sp, #4]
   1130c:	9600      	str	r6, [sp, #0]
   1130e:	465b      	mov	r3, fp
   11310:	2204      	movs	r2, #4
   11312:	a904      	add	r1, sp, #16
   11314:	4608      	mov	r0, r1
   11316:	f7ff fec7 	bl	110a8 <sqr_n_mul_mont_383>
   1131a:	f8cd 9004 	str.w	r9, [sp, #4]
   1131e:	9600      	str	r6, [sp, #0]
   11320:	465b      	mov	r3, fp
   11322:	2206      	movs	r2, #6
   11324:	a904      	add	r1, sp, #16
   11326:	4608      	mov	r0, r1
   11328:	f7ff febe 	bl	110a8 <sqr_n_mul_mont_383>
   1132c:	abac      	add	r3, sp, #688	; 0x2b0
   1132e:	9301      	str	r3, [sp, #4]
   11330:	9600      	str	r6, [sp, #0]
   11332:	465b      	mov	r3, fp
   11334:	2206      	movs	r2, #6
   11336:	a904      	add	r1, sp, #16
   11338:	4608      	mov	r0, r1
   1133a:	f7ff feb5 	bl	110a8 <sqr_n_mul_mont_383>
   1133e:	ab10      	add	r3, sp, #64	; 0x40
   11340:	9301      	str	r3, [sp, #4]
   11342:	9600      	str	r6, [sp, #0]
   11344:	465b      	mov	r3, fp
   11346:	2203      	movs	r2, #3
   11348:	a904      	add	r1, sp, #16
   1134a:	4608      	mov	r0, r1
   1134c:	f7ff feac 	bl	110a8 <sqr_n_mul_mont_383>
   11350:	f8cd 8004 	str.w	r8, [sp, #4]
   11354:	9600      	str	r6, [sp, #0]
   11356:	465b      	mov	r3, fp
   11358:	2208      	movs	r2, #8
   1135a:	a904      	add	r1, sp, #16
   1135c:	4608      	mov	r0, r1
   1135e:	f7ff fea3 	bl	110a8 <sqr_n_mul_mont_383>
   11362:	ab94      	add	r3, sp, #592	; 0x250
   11364:	9301      	str	r3, [sp, #4]
   11366:	9600      	str	r6, [sp, #0]
   11368:	465b      	mov	r3, fp
   1136a:	2207      	movs	r2, #7
   1136c:	a904      	add	r1, sp, #16
   1136e:	4608      	mov	r0, r1
   11370:	f7ff fe9a 	bl	110a8 <sqr_n_mul_mont_383>
   11374:	aba0      	add	r3, sp, #640	; 0x280
   11376:	9301      	str	r3, [sp, #4]
   11378:	9600      	str	r6, [sp, #0]
   1137a:	465b      	mov	r3, fp
   1137c:	2205      	movs	r2, #5
   1137e:	a904      	add	r1, sp, #16
   11380:	4608      	mov	r0, r1
   11382:	f7ff fe91 	bl	110a8 <sqr_n_mul_mont_383>
   11386:	f8cd 8004 	str.w	r8, [sp, #4]
   1138a:	9600      	str	r6, [sp, #0]
   1138c:	465b      	mov	r3, fp
   1138e:	2206      	movs	r2, #6
   11390:	a904      	add	r1, sp, #16
   11392:	4608      	mov	r0, r1
   11394:	f7ff fe88 	bl	110a8 <sqr_n_mul_mont_383>
   11398:	f8cd a004 	str.w	sl, [sp, #4]
   1139c:	9600      	str	r6, [sp, #0]
   1139e:	465b      	mov	r3, fp
   113a0:	2206      	movs	r2, #6
   113a2:	a904      	add	r1, sp, #16
   113a4:	4608      	mov	r0, r1
   113a6:	f7ff fe7f 	bl	110a8 <sqr_n_mul_mont_383>
   113aa:	ab7c      	add	r3, sp, #496	; 0x1f0
   113ac:	9301      	str	r3, [sp, #4]
   113ae:	9600      	str	r6, [sp, #0]
   113b0:	465b      	mov	r3, fp
   113b2:	2204      	movs	r2, #4
   113b4:	a904      	add	r1, sp, #16
   113b6:	4608      	mov	r0, r1
   113b8:	f7ff fe76 	bl	110a8 <sqr_n_mul_mont_383>
   113bc:	f8cd a004 	str.w	sl, [sp, #4]
   113c0:	9600      	str	r6, [sp, #0]
   113c2:	465b      	mov	r3, fp
   113c4:	2208      	movs	r2, #8
   113c6:	a904      	add	r1, sp, #16
   113c8:	4608      	mov	r0, r1
   113ca:	f7ff fe6d 	bl	110a8 <sqr_n_mul_mont_383>
   113ce:	f8cd 8004 	str.w	r8, [sp, #4]
   113d2:	9600      	str	r6, [sp, #0]
   113d4:	465b      	mov	r3, fp
   113d6:	2204      	movs	r2, #4
   113d8:	a904      	add	r1, sp, #16
   113da:	4608      	mov	r0, r1
   113dc:	f7ff fe64 	bl	110a8 <sqr_n_mul_mont_383>
   113e0:	ab94      	add	r3, sp, #592	; 0x250
   113e2:	9301      	str	r3, [sp, #4]
   113e4:	9600      	str	r6, [sp, #0]
   113e6:	465b      	mov	r3, fp
   113e8:	2207      	movs	r2, #7
   113ea:	a904      	add	r1, sp, #16
   113ec:	4608      	mov	r0, r1
   113ee:	f7ff fe5b 	bl	110a8 <sqr_n_mul_mont_383>
   113f2:	e003      	b.n	113fc <flt_reciprocal_fp+0x30c>
   113f4:	00024108 	.word	0x00024108
   113f8:	fffcfffd 	.word	0xfffcfffd
   113fc:	ab88      	add	r3, sp, #544	; 0x220
   113fe:	9301      	str	r3, [sp, #4]
   11400:	9600      	str	r6, [sp, #0]
   11402:	465b      	mov	r3, fp
   11404:	2209      	movs	r2, #9
   11406:	a904      	add	r1, sp, #16
   11408:	4608      	mov	r0, r1
   1140a:	f7ff fe4d 	bl	110a8 <sqr_n_mul_mont_383>
   1140e:	9501      	str	r5, [sp, #4]
   11410:	9600      	str	r6, [sp, #0]
   11412:	465b      	mov	r3, fp
   11414:	2202      	movs	r2, #2
   11416:	a904      	add	r1, sp, #16
   11418:	4608      	mov	r0, r1
   1141a:	f7ff fe45 	bl	110a8 <sqr_n_mul_mont_383>
   1141e:	ab58      	add	r3, sp, #352	; 0x160
   11420:	9301      	str	r3, [sp, #4]
   11422:	9600      	str	r6, [sp, #0]
   11424:	465b      	mov	r3, fp
   11426:	2205      	movs	r2, #5
   11428:	a904      	add	r1, sp, #16
   1142a:	4608      	mov	r0, r1
   1142c:	f7ff fe3c 	bl	110a8 <sqr_n_mul_mont_383>
   11430:	ab1c      	add	r3, sp, #112	; 0x70
   11432:	9301      	str	r3, [sp, #4]
   11434:	9600      	str	r6, [sp, #0]
   11436:	465b      	mov	r3, fp
   11438:	2207      	movs	r2, #7
   1143a:	a904      	add	r1, sp, #16
   1143c:	4608      	mov	r0, r1
   1143e:	f7ff fe33 	bl	110a8 <sqr_n_mul_mont_383>
   11442:	ab7c      	add	r3, sp, #496	; 0x1f0
   11444:	9301      	str	r3, [sp, #4]
   11446:	9600      	str	r6, [sp, #0]
   11448:	465b      	mov	r3, fp
   1144a:	2207      	movs	r2, #7
   1144c:	a904      	add	r1, sp, #16
   1144e:	4608      	mov	r0, r1
   11450:	f7ff fe2a 	bl	110a8 <sqr_n_mul_mont_383>
   11454:	ab94      	add	r3, sp, #592	; 0x250
   11456:	9301      	str	r3, [sp, #4]
   11458:	9600      	str	r6, [sp, #0]
   1145a:	465b      	mov	r3, fp
   1145c:	2206      	movs	r2, #6
   1145e:	a904      	add	r1, sp, #16
   11460:	4608      	mov	r0, r1
   11462:	f7ff fe21 	bl	110a8 <sqr_n_mul_mont_383>
   11466:	f8cd a004 	str.w	sl, [sp, #4]
   1146a:	9600      	str	r6, [sp, #0]
   1146c:	465b      	mov	r3, fp
   1146e:	2205      	movs	r2, #5
   11470:	a904      	add	r1, sp, #16
   11472:	4608      	mov	r0, r1
   11474:	f7ff fe18 	bl	110a8 <sqr_n_mul_mont_383>
   11478:	ab88      	add	r3, sp, #544	; 0x220
   1147a:	9301      	str	r3, [sp, #4]
   1147c:	9600      	str	r6, [sp, #0]
   1147e:	465b      	mov	r3, fp
   11480:	2205      	movs	r2, #5
   11482:	a904      	add	r1, sp, #16
   11484:	4608      	mov	r0, r1
   11486:	f7ff fe0f 	bl	110a8 <sqr_n_mul_mont_383>
   1148a:	ab88      	add	r3, sp, #544	; 0x220
   1148c:	9301      	str	r3, [sp, #4]
   1148e:	9600      	str	r6, [sp, #0]
   11490:	465b      	mov	r3, fp
   11492:	2205      	movs	r2, #5
   11494:	a904      	add	r1, sp, #16
   11496:	4608      	mov	r0, r1
   11498:	f7ff fe06 	bl	110a8 <sqr_n_mul_mont_383>
   1149c:	f8cd 8004 	str.w	r8, [sp, #4]
   114a0:	9600      	str	r6, [sp, #0]
   114a2:	465b      	mov	r3, fp
   114a4:	2208      	movs	r2, #8
   114a6:	a904      	add	r1, sp, #16
   114a8:	4608      	mov	r0, r1
   114aa:	f7ff fdfd 	bl	110a8 <sqr_n_mul_mont_383>
   114ae:	ab28      	add	r3, sp, #160	; 0xa0
   114b0:	9301      	str	r3, [sp, #4]
   114b2:	9600      	str	r6, [sp, #0]
   114b4:	465b      	mov	r3, fp
   114b6:	2207      	movs	r2, #7
   114b8:	a904      	add	r1, sp, #16
   114ba:	4608      	mov	r0, r1
   114bc:	f7ff fdf4 	bl	110a8 <sqr_n_mul_mont_383>
   114c0:	f8cd 9004 	str.w	r9, [sp, #4]
   114c4:	9600      	str	r6, [sp, #0]
   114c6:	465b      	mov	r3, fp
   114c8:	2209      	movs	r2, #9
   114ca:	a904      	add	r1, sp, #16
   114cc:	4608      	mov	r0, r1
   114ce:	f7ff fdeb 	bl	110a8 <sqr_n_mul_mont_383>
   114d2:	f8cd 8004 	str.w	r8, [sp, #4]
   114d6:	9600      	str	r6, [sp, #0]
   114d8:	465b      	mov	r3, fp
   114da:	2205      	movs	r2, #5
   114dc:	a904      	add	r1, sp, #16
   114de:	4608      	mov	r0, r1
   114e0:	f7ff fde2 	bl	110a8 <sqr_n_mul_mont_383>
   114e4:	9501      	str	r5, [sp, #4]
   114e6:	9600      	str	r6, [sp, #0]
   114e8:	465b      	mov	r3, fp
   114ea:	2203      	movs	r2, #3
   114ec:	a904      	add	r1, sp, #16
   114ee:	4608      	mov	r0, r1
   114f0:	f7ff fdda 	bl	110a8 <sqr_n_mul_mont_383>
   114f4:	f8cd 9004 	str.w	r9, [sp, #4]
   114f8:	9600      	str	r6, [sp, #0]
   114fa:	465b      	mov	r3, fp
   114fc:	2208      	movs	r2, #8
   114fe:	a904      	add	r1, sp, #16
   11500:	4608      	mov	r0, r1
   11502:	f7ff fdd1 	bl	110a8 <sqr_n_mul_mont_383>
   11506:	9501      	str	r5, [sp, #4]
   11508:	9600      	str	r6, [sp, #0]
   1150a:	465b      	mov	r3, fp
   1150c:	2203      	movs	r2, #3
   1150e:	a904      	add	r1, sp, #16
   11510:	4608      	mov	r0, r1
   11512:	f7ff fdc9 	bl	110a8 <sqr_n_mul_mont_383>
   11516:	ab7c      	add	r3, sp, #496	; 0x1f0
   11518:	9301      	str	r3, [sp, #4]
   1151a:	9600      	str	r6, [sp, #0]
   1151c:	465b      	mov	r3, fp
   1151e:	2207      	movs	r2, #7
   11520:	a904      	add	r1, sp, #16
   11522:	4608      	mov	r0, r1
   11524:	f7ff fdc0 	bl	110a8 <sqr_n_mul_mont_383>
   11528:	f8cd 9004 	str.w	r9, [sp, #4]
   1152c:	9600      	str	r6, [sp, #0]
   1152e:	465b      	mov	r3, fp
   11530:	2209      	movs	r2, #9
   11532:	a904      	add	r1, sp, #16
   11534:	4608      	mov	r0, r1
   11536:	f7ff fdb7 	bl	110a8 <sqr_n_mul_mont_383>
   1153a:	ab28      	add	r3, sp, #160	; 0xa0
   1153c:	9301      	str	r3, [sp, #4]
   1153e:	9600      	str	r6, [sp, #0]
   11540:	465b      	mov	r3, fp
   11542:	2206      	movs	r2, #6
   11544:	a904      	add	r1, sp, #16
   11546:	4608      	mov	r0, r1
   11548:	f7ff fdae 	bl	110a8 <sqr_n_mul_mont_383>
   1154c:	9401      	str	r4, [sp, #4]
   1154e:	9600      	str	r6, [sp, #0]
   11550:	465b      	mov	r3, fp
   11552:	2206      	movs	r2, #6
   11554:	a904      	add	r1, sp, #16
   11556:	4608      	mov	r0, r1
   11558:	f7ff fda6 	bl	110a8 <sqr_n_mul_mont_383>
   1155c:	9401      	str	r4, [sp, #4]
   1155e:	9600      	str	r6, [sp, #0]
   11560:	465b      	mov	r3, fp
   11562:	2205      	movs	r2, #5
   11564:	a904      	add	r1, sp, #16
   11566:	4608      	mov	r0, r1
   11568:	f7ff fd9e 	bl	110a8 <sqr_n_mul_mont_383>
   1156c:	9401      	str	r4, [sp, #4]
   1156e:	9600      	str	r6, [sp, #0]
   11570:	465b      	mov	r3, fp
   11572:	2205      	movs	r2, #5
   11574:	a904      	add	r1, sp, #16
   11576:	4608      	mov	r0, r1
   11578:	f7ff fd96 	bl	110a8 <sqr_n_mul_mont_383>
   1157c:	f8cd 8004 	str.w	r8, [sp, #4]
   11580:	9600      	str	r6, [sp, #0]
   11582:	465b      	mov	r3, fp
   11584:	2204      	movs	r2, #4
   11586:	a904      	add	r1, sp, #16
   11588:	4608      	mov	r0, r1
   1158a:	f7ff fd8d 	bl	110a8 <sqr_n_mul_mont_383>
   1158e:	9501      	str	r5, [sp, #4]
   11590:	9600      	str	r6, [sp, #0]
   11592:	465b      	mov	r3, fp
   11594:	2203      	movs	r2, #3
   11596:	a904      	add	r1, sp, #16
   11598:	4608      	mov	r0, r1
   1159a:	f7ff fd85 	bl	110a8 <sqr_n_mul_mont_383>
   1159e:	ab28      	add	r3, sp, #160	; 0xa0
   115a0:	9301      	str	r3, [sp, #4]
   115a2:	9600      	str	r6, [sp, #0]
   115a4:	465b      	mov	r3, fp
   115a6:	2208      	movs	r2, #8
   115a8:	a904      	add	r1, sp, #16
   115aa:	4608      	mov	r0, r1
   115ac:	f7ff fd7c 	bl	110a8 <sqr_n_mul_mont_383>
   115b0:	9401      	str	r4, [sp, #4]
   115b2:	9600      	str	r6, [sp, #0]
   115b4:	465b      	mov	r3, fp
   115b6:	2207      	movs	r2, #7
   115b8:	a904      	add	r1, sp, #16
   115ba:	4608      	mov	r0, r1
   115bc:	f7ff fd74 	bl	110a8 <sqr_n_mul_mont_383>
   115c0:	9401      	str	r4, [sp, #4]
   115c2:	9600      	str	r6, [sp, #0]
   115c4:	465b      	mov	r3, fp
   115c6:	2205      	movs	r2, #5
   115c8:	a904      	add	r1, sp, #16
   115ca:	4608      	mov	r0, r1
   115cc:	f7ff fd6c 	bl	110a8 <sqr_n_mul_mont_383>
   115d0:	9401      	str	r4, [sp, #4]
   115d2:	9600      	str	r6, [sp, #0]
   115d4:	465b      	mov	r3, fp
   115d6:	2205      	movs	r2, #5
   115d8:	a904      	add	r1, sp, #16
   115da:	4608      	mov	r0, r1
   115dc:	f7ff fd64 	bl	110a8 <sqr_n_mul_mont_383>
   115e0:	f8cd 9004 	str.w	r9, [sp, #4]
   115e4:	9600      	str	r6, [sp, #0]
   115e6:	465b      	mov	r3, fp
   115e8:	2204      	movs	r2, #4
   115ea:	a904      	add	r1, sp, #16
   115ec:	4608      	mov	r0, r1
   115ee:	f7ff fd5b 	bl	110a8 <sqr_n_mul_mont_383>
   115f2:	ab58      	add	r3, sp, #352	; 0x160
   115f4:	9301      	str	r3, [sp, #4]
   115f6:	9600      	str	r6, [sp, #0]
   115f8:	465b      	mov	r3, fp
   115fa:	2204      	movs	r2, #4
   115fc:	a904      	add	r1, sp, #16
   115fe:	4608      	mov	r0, r1
   11600:	f7ff fd52 	bl	110a8 <sqr_n_mul_mont_383>
   11604:	9401      	str	r4, [sp, #4]
   11606:	9600      	str	r6, [sp, #0]
   11608:	465b      	mov	r3, fp
   1160a:	2207      	movs	r2, #7
   1160c:	a904      	add	r1, sp, #16
   1160e:	4608      	mov	r0, r1
   11610:	f7ff fd4a 	bl	110a8 <sqr_n_mul_mont_383>
   11614:	f8cd a004 	str.w	sl, [sp, #4]
   11618:	9600      	str	r6, [sp, #0]
   1161a:	465b      	mov	r3, fp
   1161c:	2205      	movs	r2, #5
   1161e:	a904      	add	r1, sp, #16
   11620:	4608      	mov	r0, r1
   11622:	f7ff fd41 	bl	110a8 <sqr_n_mul_mont_383>
   11626:	ae40      	add	r6, sp, #256	; 0x100
   11628:	9601      	str	r6, [sp, #4]
   1162a:	4d2c      	ldr	r5, [pc, #176]	; (116dc <flt_reciprocal_fp+0x5ec>)
   1162c:	9500      	str	r5, [sp, #0]
   1162e:	465b      	mov	r3, fp
   11630:	2205      	movs	r2, #5
   11632:	a904      	add	r1, sp, #16
   11634:	4608      	mov	r0, r1
   11636:	f7ff fd37 	bl	110a8 <sqr_n_mul_mont_383>
   1163a:	9601      	str	r6, [sp, #4]
   1163c:	9500      	str	r5, [sp, #0]
   1163e:	465b      	mov	r3, fp
   11640:	2205      	movs	r2, #5
   11642:	a904      	add	r1, sp, #16
   11644:	4608      	mov	r0, r1
   11646:	f7ff fd2f 	bl	110a8 <sqr_n_mul_mont_383>
   1164a:	9601      	str	r6, [sp, #4]
   1164c:	9500      	str	r5, [sp, #0]
   1164e:	465b      	mov	r3, fp
   11650:	2205      	movs	r2, #5
   11652:	a904      	add	r1, sp, #16
   11654:	4608      	mov	r0, r1
   11656:	f7ff fd27 	bl	110a8 <sqr_n_mul_mont_383>
   1165a:	9601      	str	r6, [sp, #4]
   1165c:	9500      	str	r5, [sp, #0]
   1165e:	465b      	mov	r3, fp
   11660:	2205      	movs	r2, #5
   11662:	a904      	add	r1, sp, #16
   11664:	4608      	mov	r0, r1
   11666:	f7ff fd1f 	bl	110a8 <sqr_n_mul_mont_383>
   1166a:	9601      	str	r6, [sp, #4]
   1166c:	9500      	str	r5, [sp, #0]
   1166e:	465b      	mov	r3, fp
   11670:	2205      	movs	r2, #5
   11672:	a904      	add	r1, sp, #16
   11674:	4608      	mov	r0, r1
   11676:	f7ff fd17 	bl	110a8 <sqr_n_mul_mont_383>
   1167a:	9601      	str	r6, [sp, #4]
   1167c:	9500      	str	r5, [sp, #0]
   1167e:	465b      	mov	r3, fp
   11680:	2205      	movs	r2, #5
   11682:	a904      	add	r1, sp, #16
   11684:	4608      	mov	r0, r1
   11686:	f7ff fd0f 	bl	110a8 <sqr_n_mul_mont_383>
   1168a:	f8cd 8004 	str.w	r8, [sp, #4]
   1168e:	9500      	str	r5, [sp, #0]
   11690:	465b      	mov	r3, fp
   11692:	2204      	movs	r2, #4
   11694:	a904      	add	r1, sp, #16
   11696:	4608      	mov	r0, r1
   11698:	f7ff fd06 	bl	110a8 <sqr_n_mul_mont_383>
   1169c:	ab28      	add	r3, sp, #160	; 0xa0
   1169e:	9301      	str	r3, [sp, #4]
   116a0:	9500      	str	r5, [sp, #0]
   116a2:	465b      	mov	r3, fp
   116a4:	2206      	movs	r2, #6
   116a6:	a904      	add	r1, sp, #16
   116a8:	4608      	mov	r0, r1
   116aa:	f7ff fcfd 	bl	110a8 <sqr_n_mul_mont_383>
   116ae:	ab1c      	add	r3, sp, #112	; 0x70
   116b0:	9301      	str	r3, [sp, #4]
   116b2:	9500      	str	r5, [sp, #0]
   116b4:	465b      	mov	r3, fp
   116b6:	2204      	movs	r2, #4
   116b8:	a904      	add	r1, sp, #16
   116ba:	4608      	mov	r0, r1
   116bc:	f7ff fcf4 	bl	110a8 <sqr_n_mul_mont_383>
   116c0:	ab10      	add	r3, sp, #64	; 0x40
   116c2:	9301      	str	r3, [sp, #4]
   116c4:	9500      	str	r5, [sp, #0]
   116c6:	465b      	mov	r3, fp
   116c8:	2203      	movs	r2, #3
   116ca:	a904      	add	r1, sp, #16
   116cc:	9803      	ldr	r0, [sp, #12]
   116ce:	f7ff fceb 	bl	110a8 <sqr_n_mul_mont_383>
   116d2:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   116d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116da:	bf00      	nop
   116dc:	fffcfffd 	.word	0xfffcfffd

000116e0 <reciprocal_fp>:
   116e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   116e4:	b09b      	sub	sp, #108	; 0x6c
   116e6:	4606      	mov	r6, r0
   116e8:	460f      	mov	r7, r1
   116ea:	f8df 9094 	ldr.w	r9, [pc, #148]	; 11780 <reciprocal_fp+0xa0>
   116ee:	4d25      	ldr	r5, [pc, #148]	; (11784 <reciprocal_fp+0xa4>)
   116f0:	240c      	movs	r4, #12
   116f2:	9400      	str	r4, [sp, #0]
   116f4:	f509 739c 	add.w	r3, r9, #312	; 0x138
   116f8:	462a      	mov	r2, r5
   116fa:	a802      	add	r0, sp, #8
   116fc:	f7fe f88c 	bl	f818 <ct_inverse_mod_n>
   11700:	f8df 8084 	ldr.w	r8, [pc, #132]	; 11788 <reciprocal_fp+0xa8>
   11704:	9400      	str	r4, [sp, #0]
   11706:	4643      	mov	r3, r8
   11708:	462a      	mov	r2, r5
   1170a:	a902      	add	r1, sp, #8
   1170c:	4608      	mov	r0, r1
   1170e:	f7fb fd10 	bl	d132 <redc_mont_n>
   11712:	9401      	str	r4, [sp, #4]
   11714:	f8cd 8000 	str.w	r8, [sp]
   11718:	462b      	mov	r3, r5
   1171a:	f509 72b4 	add.w	r2, r9, #360	; 0x168
   1171e:	a902      	add	r1, sp, #8
   11720:	4608      	mov	r0, r1
   11722:	f7fb f955 	bl	c9d0 <mul_mont_n>
   11726:	9401      	str	r4, [sp, #4]
   11728:	f8cd 8000 	str.w	r8, [sp]
   1172c:	462b      	mov	r3, r5
   1172e:	463a      	mov	r2, r7
   11730:	a902      	add	r1, sp, #8
   11732:	a80e      	add	r0, sp, #56	; 0x38
   11734:	f7fb f94c 	bl	c9d0 <mul_mont_n>
   11738:	ac0d      	add	r4, sp, #52	; 0x34
   1173a:	f105 0e90 	add.w	lr, r5, #144	; 0x90
   1173e:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   11742:	2200      	movs	r2, #0
   11744:	f85e 3b04 	ldr.w	r3, [lr], #4
   11748:	f854 5f04 	ldr.w	r5, [r4, #4]!
   1174c:	ea83 0c05 	eor.w	ip, r3, r5
   11750:	ea42 020c 	orr.w	r2, r2, ip
   11754:	458e      	cmp	lr, r1
   11756:	d1f5      	bne.n	11744 <reciprocal_fp+0x64>
   11758:	1e53      	subs	r3, r2, #1
   1175a:	4393      	bics	r3, r2
   1175c:	d50b      	bpl.n	11776 <reciprocal_fp+0x96>
   1175e:	aa02      	add	r2, sp, #8
   11760:	1f33      	subs	r3, r6, #4
   11762:	362c      	adds	r6, #44	; 0x2c
   11764:	f852 1b04 	ldr.w	r1, [r2], #4
   11768:	f843 1f04 	str.w	r1, [r3, #4]!
   1176c:	42b3      	cmp	r3, r6
   1176e:	d1f9      	bne.n	11764 <reciprocal_fp+0x84>
   11770:	b01b      	add	sp, #108	; 0x6c
   11772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11776:	4639      	mov	r1, r7
   11778:	4630      	mov	r0, r6
   1177a:	f7ff fcb9 	bl	110f0 <flt_reciprocal_fp>
   1177e:	e7f7      	b.n	11770 <reciprocal_fp+0x90>
   11780:	00025200 	.word	0x00025200
   11784:	00024108 	.word	0x00024108
   11788:	fffcfffd 	.word	0xfffcfffd

0001178c <POINTonE1_from_Jacobian>:
   1178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11790:	b09b      	sub	sp, #108	; 0x6c
   11792:	4607      	mov	r7, r0
   11794:	4689      	mov	r9, r1
   11796:	3160      	adds	r1, #96	; 0x60
   11798:	f109 045c 	add.w	r4, r9, #92	; 0x5c
   1179c:	f109 058c 	add.w	r5, r9, #140	; 0x8c
   117a0:	4623      	mov	r3, r4
   117a2:	f04f 0800 	mov.w	r8, #0
   117a6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   117aa:	ea48 0802 	orr.w	r8, r8, r2
   117ae:	42ab      	cmp	r3, r5
   117b0:	d1f9      	bne.n	117a6 <POINTonE1_from_Jacobian+0x1a>
   117b2:	a80e      	add	r0, sp, #56	; 0x38
   117b4:	f7ff ff94 	bl	116e0 <reciprocal_fp>
   117b8:	4e23      	ldr	r6, [pc, #140]	; (11848 <POINTonE1_from_Jacobian+0xbc>)
   117ba:	f04f 0b0c 	mov.w	fp, #12
   117be:	f8cd b004 	str.w	fp, [sp, #4]
   117c2:	f8df a088 	ldr.w	sl, [pc, #136]	; 1184c <POINTonE1_from_Jacobian+0xc0>
   117c6:	f8cd a000 	str.w	sl, [sp]
   117ca:	4633      	mov	r3, r6
   117cc:	aa0e      	add	r2, sp, #56	; 0x38
   117ce:	4611      	mov	r1, r2
   117d0:	a802      	add	r0, sp, #8
   117d2:	f7fb f8fd 	bl	c9d0 <mul_mont_n>
   117d6:	f8cd b004 	str.w	fp, [sp, #4]
   117da:	f8cd a000 	str.w	sl, [sp]
   117de:	4633      	mov	r3, r6
   117e0:	aa02      	add	r2, sp, #8
   117e2:	4649      	mov	r1, r9
   117e4:	4638      	mov	r0, r7
   117e6:	f7fb f8f3 	bl	c9d0 <mul_mont_n>
   117ea:	f8cd b004 	str.w	fp, [sp, #4]
   117ee:	f8cd a000 	str.w	sl, [sp]
   117f2:	4633      	mov	r3, r6
   117f4:	aa0e      	add	r2, sp, #56	; 0x38
   117f6:	a902      	add	r1, sp, #8
   117f8:	4608      	mov	r0, r1
   117fa:	f7fb f8e9 	bl	c9d0 <mul_mont_n>
   117fe:	f8cd b004 	str.w	fp, [sp, #4]
   11802:	f8cd a000 	str.w	sl, [sp]
   11806:	4633      	mov	r3, r6
   11808:	aa02      	add	r2, sp, #8
   1180a:	f109 0130 	add.w	r1, r9, #48	; 0x30
   1180e:	f107 0030 	add.w	r0, r7, #48	; 0x30
   11812:	f7fb f8dd 	bl	c9d0 <mul_mont_n>
   11816:	f108 33ff 	add.w	r3, r8, #4294967295
   1181a:	ea23 0808 	bic.w	r8, r3, r8
   1181e:	ea4f 78e8 	mov.w	r8, r8, asr #31
   11822:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   11826:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   1182a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1182e:	f854 2f04 	ldr.w	r2, [r4, #4]!
   11832:	404a      	eors	r2, r1
   11834:	ea02 0208 	and.w	r2, r2, r8
   11838:	404a      	eors	r2, r1
   1183a:	f840 2f04 	str.w	r2, [r0, #4]!
   1183e:	42ac      	cmp	r4, r5
   11840:	d1f3      	bne.n	1182a <POINTonE1_from_Jacobian+0x9e>
   11842:	b01b      	add	sp, #108	; 0x6c
   11844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11848:	00024108 	.word	0x00024108
   1184c:	fffcfffd 	.word	0xfffcfffd

00011850 <blst_p1_from_jacobian>:
   11850:	b508      	push	{r3, lr}
   11852:	f7ff ff9b 	bl	1178c <POINTonE1_from_Jacobian>
   11856:	bd08      	pop	{r3, pc}

00011858 <blst_p1_to_affine>:
   11858:	b570      	push	{r4, r5, r6, lr}
   1185a:	b0a4      	sub	sp, #144	; 0x90
   1185c:	4604      	mov	r4, r0
   1185e:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   11862:	4d0f      	ldr	r5, [pc, #60]	; (118a0 <blst_p1_to_affine+0x48>)
   11864:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   11868:	2000      	movs	r0, #0
   1186a:	f855 3b04 	ldr.w	r3, [r5], #4
   1186e:	f852 6f04 	ldr.w	r6, [r2, #4]!
   11872:	4073      	eors	r3, r6
   11874:	4318      	orrs	r0, r3
   11876:	4562      	cmp	r2, ip
   11878:	d1f7      	bne.n	1186a <blst_p1_to_affine+0x12>
   1187a:	1e43      	subs	r3, r0, #1
   1187c:	4383      	bics	r3, r0
   1187e:	d50a      	bpl.n	11896 <blst_p1_to_affine+0x3e>
   11880:	1f0b      	subs	r3, r1, #4
   11882:	1f20      	subs	r0, r4, #4
   11884:	315c      	adds	r1, #92	; 0x5c
   11886:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1188a:	f840 2f04 	str.w	r2, [r0, #4]!
   1188e:	428b      	cmp	r3, r1
   11890:	d1f9      	bne.n	11886 <blst_p1_to_affine+0x2e>
   11892:	b024      	add	sp, #144	; 0x90
   11894:	bd70      	pop	{r4, r5, r6, pc}
   11896:	4668      	mov	r0, sp
   11898:	f7ff ff78 	bl	1178c <POINTonE1_from_Jacobian>
   1189c:	4669      	mov	r1, sp
   1189e:	e7ef      	b.n	11880 <blst_p1_to_affine+0x28>
   118a0:	00024198 	.word	0x00024198

000118a4 <POINTonE1_Serialize_BE>:
   118a4:	b570      	push	{r4, r5, r6, lr}
   118a6:	b0a4      	sub	sp, #144	; 0x90
   118a8:	4606      	mov	r6, r0
   118aa:	f101 025c 	add.w	r2, r1, #92	; 0x5c
   118ae:	4c0e      	ldr	r4, [pc, #56]	; (118e8 <POINTonE1_Serialize_BE+0x44>)
   118b0:	f101 0e8c 	add.w	lr, r1, #140	; 0x8c
   118b4:	f04f 0c00 	mov.w	ip, #0
   118b8:	f854 3b04 	ldr.w	r3, [r4], #4
   118bc:	f852 5f04 	ldr.w	r5, [r2, #4]!
   118c0:	406b      	eors	r3, r5
   118c2:	ea4c 0c03 	orr.w	ip, ip, r3
   118c6:	4572      	cmp	r2, lr
   118c8:	d1f6      	bne.n	118b8 <POINTonE1_Serialize_BE+0x14>
   118ca:	f10c 33ff 	add.w	r3, ip, #4294967295
   118ce:	ea33 030c 	bics.w	r3, r3, ip
   118d2:	d504      	bpl.n	118de <POINTonE1_Serialize_BE+0x3a>
   118d4:	4630      	mov	r0, r6
   118d6:	f7fb fee7 	bl	d6a8 <POINTonE1_affine_Serialize_BE>
   118da:	b024      	add	sp, #144	; 0x90
   118dc:	bd70      	pop	{r4, r5, r6, pc}
   118de:	4668      	mov	r0, sp
   118e0:	f7ff ff54 	bl	1178c <POINTonE1_from_Jacobian>
   118e4:	4669      	mov	r1, sp
   118e6:	e7f5      	b.n	118d4 <POINTonE1_Serialize_BE+0x30>
   118e8:	00024198 	.word	0x00024198

000118ec <blst_p1_serialize>:
   118ec:	b510      	push	{r4, lr}
   118ee:	f101 035c 	add.w	r3, r1, #92	; 0x5c
   118f2:	f101 0c8c 	add.w	ip, r1, #140	; 0x8c
   118f6:	2200      	movs	r2, #0
   118f8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   118fc:	4322      	orrs	r2, r4
   118fe:	4563      	cmp	r3, ip
   11900:	d1fa      	bne.n	118f8 <blst_p1_serialize+0xc>
   11902:	1e53      	subs	r3, r2, #1
   11904:	4393      	bics	r3, r2
   11906:	d50a      	bpl.n	1191e <blst_p1_serialize+0x32>
   11908:	1e43      	subs	r3, r0, #1
   1190a:	f100 015f 	add.w	r1, r0, #95	; 0x5f
   1190e:	2200      	movs	r2, #0
   11910:	f803 2f01 	strb.w	r2, [r3, #1]!
   11914:	428b      	cmp	r3, r1
   11916:	d1fb      	bne.n	11910 <blst_p1_serialize+0x24>
   11918:	2340      	movs	r3, #64	; 0x40
   1191a:	7003      	strb	r3, [r0, #0]
   1191c:	bd10      	pop	{r4, pc}
   1191e:	f7ff ffc1 	bl	118a4 <POINTonE1_Serialize_BE>
   11922:	e7fb      	b.n	1191c <blst_p1_serialize+0x30>

00011924 <blst_p1_compress>:
   11924:	b570      	push	{r4, r5, r6, lr}
   11926:	b0a4      	sub	sp, #144	; 0x90
   11928:	4605      	mov	r5, r0
   1192a:	f101 0c5c 	add.w	ip, r1, #92	; 0x5c
   1192e:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   11932:	4663      	mov	r3, ip
   11934:	2200      	movs	r2, #0
   11936:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1193a:	4322      	orrs	r2, r4
   1193c:	4283      	cmp	r3, r0
   1193e:	d1fa      	bne.n	11936 <blst_p1_compress+0x12>
   11940:	1e53      	subs	r3, r2, #1
   11942:	ea23 0202 	bic.w	r2, r3, r2
   11946:	0fd2      	lsrs	r2, r2, #31
   11948:	d00b      	beq.n	11962 <blst_p1_compress+0x3e>
   1194a:	1e6b      	subs	r3, r5, #1
   1194c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   11950:	2200      	movs	r2, #0
   11952:	f803 2f01 	strb.w	r2, [r3, #1]!
   11956:	428b      	cmp	r3, r1
   11958:	d1fb      	bne.n	11952 <blst_p1_compress+0x2e>
   1195a:	23c0      	movs	r3, #192	; 0xc0
   1195c:	702b      	strb	r3, [r5, #0]
   1195e:	b024      	add	sp, #144	; 0x90
   11960:	bd70      	pop	{r4, r5, r6, pc}
   11962:	4c0e      	ldr	r4, [pc, #56]	; (1199c <blst_p1_compress+0x78>)
   11964:	f854 3b04 	ldr.w	r3, [r4], #4
   11968:	f85c 6f04 	ldr.w	r6, [ip, #4]!
   1196c:	4073      	eors	r3, r6
   1196e:	431a      	orrs	r2, r3
   11970:	4584      	cmp	ip, r0
   11972:	d1f7      	bne.n	11964 <blst_p1_compress+0x40>
   11974:	1e53      	subs	r3, r2, #1
   11976:	4393      	bics	r3, r2
   11978:	d50b      	bpl.n	11992 <blst_p1_compress+0x6e>
   1197a:	4628      	mov	r0, r5
   1197c:	f7fb fe5f 	bl	d63e <POINTonE1_affine_Compress_BE>
   11980:	0103      	lsls	r3, r0, #4
   11982:	f003 0320 	and.w	r3, r3, #32
   11986:	782a      	ldrb	r2, [r5, #0]
   11988:	4313      	orrs	r3, r2
   1198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1198e:	702b      	strb	r3, [r5, #0]
   11990:	e7e5      	b.n	1195e <blst_p1_compress+0x3a>
   11992:	4668      	mov	r0, sp
   11994:	f7ff fefa 	bl	1178c <POINTonE1_from_Jacobian>
   11998:	4669      	mov	r1, sp
   1199a:	e7ee      	b.n	1197a <blst_p1_compress+0x56>
   1199c:	00024198 	.word	0x00024198

000119a0 <reciprocal_fp2>:
   119a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   119a4:	b09b      	sub	sp, #108	; 0x6c
   119a6:	4604      	mov	r4, r0
   119a8:	460f      	mov	r7, r1
   119aa:	4d1f      	ldr	r5, [pc, #124]	; (11a28 <reciprocal_fp2+0x88>)
   119ac:	260c      	movs	r6, #12
   119ae:	9601      	str	r6, [sp, #4]
   119b0:	f8df 8078 	ldr.w	r8, [pc, #120]	; 11a2c <reciprocal_fp2+0x8c>
   119b4:	f8cd 8000 	str.w	r8, [sp]
   119b8:	462b      	mov	r3, r5
   119ba:	460a      	mov	r2, r1
   119bc:	a80e      	add	r0, sp, #56	; 0x38
   119be:	f7fb f807 	bl	c9d0 <mul_mont_n>
   119c2:	f107 0930 	add.w	r9, r7, #48	; 0x30
   119c6:	9601      	str	r6, [sp, #4]
   119c8:	f8cd 8000 	str.w	r8, [sp]
   119cc:	462b      	mov	r3, r5
   119ce:	464a      	mov	r2, r9
   119d0:	4649      	mov	r1, r9
   119d2:	a802      	add	r0, sp, #8
   119d4:	f7fa fffc 	bl	c9d0 <mul_mont_n>
   119d8:	9600      	str	r6, [sp, #0]
   119da:	462b      	mov	r3, r5
   119dc:	aa02      	add	r2, sp, #8
   119de:	a90e      	add	r1, sp, #56	; 0x38
   119e0:	4608      	mov	r0, r1
   119e2:	f7fb f99d 	bl	cd20 <add_mod_n>
   119e6:	a90e      	add	r1, sp, #56	; 0x38
   119e8:	a802      	add	r0, sp, #8
   119ea:	f7ff fe79 	bl	116e0 <reciprocal_fp>
   119ee:	9601      	str	r6, [sp, #4]
   119f0:	f8cd 8000 	str.w	r8, [sp]
   119f4:	462b      	mov	r3, r5
   119f6:	aa02      	add	r2, sp, #8
   119f8:	4639      	mov	r1, r7
   119fa:	4620      	mov	r0, r4
   119fc:	f7fa ffe8 	bl	c9d0 <mul_mont_n>
   11a00:	3430      	adds	r4, #48	; 0x30
   11a02:	9601      	str	r6, [sp, #4]
   11a04:	f8cd 8000 	str.w	r8, [sp]
   11a08:	462b      	mov	r3, r5
   11a0a:	aa02      	add	r2, sp, #8
   11a0c:	4649      	mov	r1, r9
   11a0e:	4620      	mov	r0, r4
   11a10:	f7fa ffde 	bl	c9d0 <mul_mont_n>
   11a14:	9600      	str	r6, [sp, #0]
   11a16:	462b      	mov	r3, r5
   11a18:	2201      	movs	r2, #1
   11a1a:	4621      	mov	r1, r4
   11a1c:	4620      	mov	r0, r4
   11a1e:	f7fc f813 	bl	da48 <cneg_mod_n>
   11a22:	b01b      	add	sp, #108	; 0x6c
   11a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11a28:	00024108 	.word	0x00024108
   11a2c:	fffcfffd 	.word	0xfffcfffd

00011a30 <blst_fp2_inverse>:
   11a30:	b508      	push	{r3, lr}
   11a32:	f7ff ffb5 	bl	119a0 <reciprocal_fp2>
   11a36:	bd08      	pop	{r3, pc}

00011a38 <blst_fp2_eucl_inverse>:
   11a38:	b508      	push	{r3, lr}
   11a3a:	f7ff ffb1 	bl	119a0 <reciprocal_fp2>
   11a3e:	bd08      	pop	{r3, pc}

00011a40 <blst_fp_inverse>:
   11a40:	b508      	push	{r3, lr}
   11a42:	f7ff fe4d 	bl	116e0 <reciprocal_fp>
   11a46:	bd08      	pop	{r3, pc}

00011a48 <blst_fp_eucl_inverse>:
   11a48:	b508      	push	{r3, lr}
   11a4a:	f7ff fe49 	bl	116e0 <reciprocal_fp>
   11a4e:	bd08      	pop	{r3, pc}

00011a50 <recip_sqrt_fp_3mod4>:
   11a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a54:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   11a58:	9003      	str	r0, [sp, #12]
   11a5a:	1f0b      	subs	r3, r1, #4
   11a5c:	aa9f      	add	r2, sp, #636	; 0x27c
   11a5e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   11a62:	f853 1f04 	ldr.w	r1, [r3, #4]!
   11a66:	f842 1f04 	str.w	r1, [r2, #4]!
   11a6a:	4283      	cmp	r3, r0
   11a6c:	d1f9      	bne.n	11a62 <recip_sqrt_fp_3mod4+0x12>
   11a6e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 11d54 <recip_sqrt_fp_3mod4+0x304>
   11a72:	270c      	movs	r7, #12
   11a74:	9701      	str	r7, [sp, #4]
   11a76:	4eb8      	ldr	r6, [pc, #736]	; (11d58 <recip_sqrt_fp_3mod4+0x308>)
   11a78:	9600      	str	r6, [sp, #0]
   11a7a:	465b      	mov	r3, fp
   11a7c:	aaa0      	add	r2, sp, #640	; 0x280
   11a7e:	4611      	mov	r1, r2
   11a80:	a804      	add	r0, sp, #16
   11a82:	f7fa ffa5 	bl	c9d0 <mul_mont_n>
   11a86:	ad64      	add	r5, sp, #400	; 0x190
   11a88:	9701      	str	r7, [sp, #4]
   11a8a:	9600      	str	r6, [sp, #0]
   11a8c:	465b      	mov	r3, fp
   11a8e:	aaa0      	add	r2, sp, #640	; 0x280
   11a90:	a904      	add	r1, sp, #16
   11a92:	4628      	mov	r0, r5
   11a94:	f7fa ff9c 	bl	c9d0 <mul_mont_n>
   11a98:	ac34      	add	r4, sp, #208	; 0xd0
   11a9a:	9701      	str	r7, [sp, #4]
   11a9c:	9600      	str	r6, [sp, #0]
   11a9e:	465b      	mov	r3, fp
   11aa0:	aa04      	add	r2, sp, #16
   11aa2:	4611      	mov	r1, r2
   11aa4:	4620      	mov	r0, r4
   11aa6:	f7fa ff93 	bl	c9d0 <mul_mont_n>
   11aaa:	9701      	str	r7, [sp, #4]
   11aac:	9600      	str	r6, [sp, #0]
   11aae:	465b      	mov	r3, fp
   11ab0:	aa04      	add	r2, sp, #16
   11ab2:	4629      	mov	r1, r5
   11ab4:	a810      	add	r0, sp, #64	; 0x40
   11ab6:	f7fa ff8b 	bl	c9d0 <mul_mont_n>
   11aba:	9701      	str	r7, [sp, #4]
   11abc:	9600      	str	r6, [sp, #0]
   11abe:	465b      	mov	r3, fp
   11ac0:	462a      	mov	r2, r5
   11ac2:	4621      	mov	r1, r4
   11ac4:	a84c      	add	r0, sp, #304	; 0x130
   11ac6:	f7fa ff83 	bl	c9d0 <mul_mont_n>
   11aca:	9701      	str	r7, [sp, #4]
   11acc:	9600      	str	r6, [sp, #0]
   11ace:	465b      	mov	r3, fp
   11ad0:	4622      	mov	r2, r4
   11ad2:	a910      	add	r1, sp, #64	; 0x40
   11ad4:	a870      	add	r0, sp, #448	; 0x1c0
   11ad6:	f7fa ff7b 	bl	c9d0 <mul_mont_n>
   11ada:	9701      	str	r7, [sp, #4]
   11adc:	9600      	str	r6, [sp, #0]
   11ade:	465b      	mov	r3, fp
   11ae0:	4622      	mov	r2, r4
   11ae2:	a94c      	add	r1, sp, #304	; 0x130
   11ae4:	a894      	add	r0, sp, #592	; 0x250
   11ae6:	f7fa ff73 	bl	c9d0 <mul_mont_n>
   11aea:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
   11aee:	9701      	str	r7, [sp, #4]
   11af0:	9600      	str	r6, [sp, #0]
   11af2:	465b      	mov	r3, fp
   11af4:	4622      	mov	r2, r4
   11af6:	a970      	add	r1, sp, #448	; 0x1c0
   11af8:	4640      	mov	r0, r8
   11afa:	f7fa ff69 	bl	c9d0 <mul_mont_n>
   11afe:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
   11b02:	9701      	str	r7, [sp, #4]
   11b04:	9600      	str	r6, [sp, #0]
   11b06:	465b      	mov	r3, fp
   11b08:	4622      	mov	r2, r4
   11b0a:	a994      	add	r1, sp, #592	; 0x250
   11b0c:	4648      	mov	r0, r9
   11b0e:	f7fa ff5f 	bl	c9d0 <mul_mont_n>
   11b12:	9701      	str	r7, [sp, #4]
   11b14:	9600      	str	r6, [sp, #0]
   11b16:	465b      	mov	r3, fp
   11b18:	4622      	mov	r2, r4
   11b1a:	4641      	mov	r1, r8
   11b1c:	a8b8      	add	r0, sp, #736	; 0x2e0
   11b1e:	f7fa ff57 	bl	c9d0 <mul_mont_n>
   11b22:	9701      	str	r7, [sp, #4]
   11b24:	9600      	str	r6, [sp, #0]
   11b26:	465b      	mov	r3, fp
   11b28:	4622      	mov	r2, r4
   11b2a:	4649      	mov	r1, r9
   11b2c:	a87c      	add	r0, sp, #496	; 0x1f0
   11b2e:	f7fa ff4f 	bl	c9d0 <mul_mont_n>
   11b32:	9701      	str	r7, [sp, #4]
   11b34:	9600      	str	r6, [sp, #0]
   11b36:	465b      	mov	r3, fp
   11b38:	4622      	mov	r2, r4
   11b3a:	a9b8      	add	r1, sp, #736	; 0x2e0
   11b3c:	a81c      	add	r0, sp, #112	; 0x70
   11b3e:	f7fa ff47 	bl	c9d0 <mul_mont_n>
   11b42:	9701      	str	r7, [sp, #4]
   11b44:	9600      	str	r6, [sp, #0]
   11b46:	465b      	mov	r3, fp
   11b48:	4622      	mov	r2, r4
   11b4a:	a97c      	add	r1, sp, #496	; 0x1f0
   11b4c:	a888      	add	r0, sp, #544	; 0x220
   11b4e:	f7fa ff3f 	bl	c9d0 <mul_mont_n>
   11b52:	9701      	str	r7, [sp, #4]
   11b54:	9600      	str	r6, [sp, #0]
   11b56:	465b      	mov	r3, fp
   11b58:	4642      	mov	r2, r8
   11b5a:	4641      	mov	r1, r8
   11b5c:	a804      	add	r0, sp, #16
   11b5e:	f7fa ff37 	bl	c9d0 <mul_mont_n>
   11b62:	9701      	str	r7, [sp, #4]
   11b64:	9600      	str	r6, [sp, #0]
   11b66:	465b      	mov	r3, fp
   11b68:	4622      	mov	r2, r4
   11b6a:	a988      	add	r1, sp, #544	; 0x220
   11b6c:	a8ac      	add	r0, sp, #688	; 0x2b0
   11b6e:	f7fa ff2f 	bl	c9d0 <mul_mont_n>
   11b72:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
   11b76:	9701      	str	r7, [sp, #4]
   11b78:	9600      	str	r6, [sp, #0]
   11b7a:	465b      	mov	r3, fp
   11b7c:	462a      	mov	r2, r5
   11b7e:	a904      	add	r1, sp, #16
   11b80:	4650      	mov	r0, sl
   11b82:	f7fa ff25 	bl	c9d0 <mul_mont_n>
   11b86:	9701      	str	r7, [sp, #4]
   11b88:	9600      	str	r6, [sp, #0]
   11b8a:	465b      	mov	r3, fp
   11b8c:	aa10      	add	r2, sp, #64	; 0x40
   11b8e:	a904      	add	r1, sp, #16
   11b90:	4620      	mov	r0, r4
   11b92:	f7fa ff1d 	bl	c9d0 <mul_mont_n>
   11b96:	abb8      	add	r3, sp, #736	; 0x2e0
   11b98:	9301      	str	r3, [sp, #4]
   11b9a:	9600      	str	r6, [sp, #0]
   11b9c:	465b      	mov	r3, fp
   11b9e:	463a      	mov	r2, r7
   11ba0:	a904      	add	r1, sp, #16
   11ba2:	4608      	mov	r0, r1
   11ba4:	f7ff fa80 	bl	110a8 <sqr_n_mul_mont_383>
   11ba8:	f8cd 9004 	str.w	r9, [sp, #4]
   11bac:	9600      	str	r6, [sp, #0]
   11bae:	465b      	mov	r3, fp
   11bb0:	2207      	movs	r2, #7
   11bb2:	a904      	add	r1, sp, #16
   11bb4:	4608      	mov	r0, r1
   11bb6:	f7ff fa77 	bl	110a8 <sqr_n_mul_mont_383>
   11bba:	ab10      	add	r3, sp, #64	; 0x40
   11bbc:	9301      	str	r3, [sp, #4]
   11bbe:	9600      	str	r6, [sp, #0]
   11bc0:	465b      	mov	r3, fp
   11bc2:	2204      	movs	r2, #4
   11bc4:	a904      	add	r1, sp, #16
   11bc6:	4608      	mov	r0, r1
   11bc8:	f7ff fa6e 	bl	110a8 <sqr_n_mul_mont_383>
   11bcc:	ab4c      	add	r3, sp, #304	; 0x130
   11bce:	9301      	str	r3, [sp, #4]
   11bd0:	9600      	str	r6, [sp, #0]
   11bd2:	465b      	mov	r3, fp
   11bd4:	2206      	movs	r2, #6
   11bd6:	a904      	add	r1, sp, #16
   11bd8:	4608      	mov	r0, r1
   11bda:	f7ff fa65 	bl	110a8 <sqr_n_mul_mont_383>
   11bde:	ab88      	add	r3, sp, #544	; 0x220
   11be0:	9301      	str	r3, [sp, #4]
   11be2:	9600      	str	r6, [sp, #0]
   11be4:	465b      	mov	r3, fp
   11be6:	2207      	movs	r2, #7
   11be8:	a904      	add	r1, sp, #16
   11bea:	4608      	mov	r0, r1
   11bec:	f7ff fa5c 	bl	110a8 <sqr_n_mul_mont_383>
   11bf0:	9401      	str	r4, [sp, #4]
   11bf2:	9600      	str	r6, [sp, #0]
   11bf4:	465b      	mov	r3, fp
   11bf6:	2205      	movs	r2, #5
   11bf8:	a904      	add	r1, sp, #16
   11bfa:	4608      	mov	r0, r1
   11bfc:	f7ff fa54 	bl	110a8 <sqr_n_mul_mont_383>
   11c00:	9501      	str	r5, [sp, #4]
   11c02:	9600      	str	r6, [sp, #0]
   11c04:	465b      	mov	r3, fp
   11c06:	2202      	movs	r2, #2
   11c08:	a904      	add	r1, sp, #16
   11c0a:	4608      	mov	r0, r1
   11c0c:	f7ff fa4c 	bl	110a8 <sqr_n_mul_mont_383>
   11c10:	f8cd 8004 	str.w	r8, [sp, #4]
   11c14:	9600      	str	r6, [sp, #0]
   11c16:	465b      	mov	r3, fp
   11c18:	2206      	movs	r2, #6
   11c1a:	a904      	add	r1, sp, #16
   11c1c:	4608      	mov	r0, r1
   11c1e:	f7ff fa43 	bl	110a8 <sqr_n_mul_mont_383>
   11c22:	f8cd 8004 	str.w	r8, [sp, #4]
   11c26:	9600      	str	r6, [sp, #0]
   11c28:	465b      	mov	r3, fp
   11c2a:	2206      	movs	r2, #6
   11c2c:	a904      	add	r1, sp, #16
   11c2e:	4608      	mov	r0, r1
   11c30:	f7ff fa3a 	bl	110a8 <sqr_n_mul_mont_383>
   11c34:	ab70      	add	r3, sp, #448	; 0x1c0
   11c36:	9301      	str	r3, [sp, #4]
   11c38:	9600      	str	r6, [sp, #0]
   11c3a:	465b      	mov	r3, fp
   11c3c:	2206      	movs	r2, #6
   11c3e:	a904      	add	r1, sp, #16
   11c40:	4608      	mov	r0, r1
   11c42:	f7ff fa31 	bl	110a8 <sqr_n_mul_mont_383>
   11c46:	9501      	str	r5, [sp, #4]
   11c48:	9600      	str	r6, [sp, #0]
   11c4a:	465b      	mov	r3, fp
   11c4c:	2203      	movs	r2, #3
   11c4e:	a904      	add	r1, sp, #16
   11c50:	4608      	mov	r0, r1
   11c52:	f7ff fa29 	bl	110a8 <sqr_n_mul_mont_383>
   11c56:	f8cd 8004 	str.w	r8, [sp, #4]
   11c5a:	9600      	str	r6, [sp, #0]
   11c5c:	465b      	mov	r3, fp
   11c5e:	2207      	movs	r2, #7
   11c60:	a904      	add	r1, sp, #16
   11c62:	4608      	mov	r0, r1
   11c64:	f7ff fa20 	bl	110a8 <sqr_n_mul_mont_383>
   11c68:	f8cd 8004 	str.w	r8, [sp, #4]
   11c6c:	9600      	str	r6, [sp, #0]
   11c6e:	465b      	mov	r3, fp
   11c70:	2204      	movs	r2, #4
   11c72:	a904      	add	r1, sp, #16
   11c74:	4608      	mov	r0, r1
   11c76:	f7ff fa17 	bl	110a8 <sqr_n_mul_mont_383>
   11c7a:	f8cd 9004 	str.w	r9, [sp, #4]
   11c7e:	9600      	str	r6, [sp, #0]
   11c80:	465b      	mov	r3, fp
   11c82:	2206      	movs	r2, #6
   11c84:	a904      	add	r1, sp, #16
   11c86:	4608      	mov	r0, r1
   11c88:	f7ff fa0e 	bl	110a8 <sqr_n_mul_mont_383>
   11c8c:	abac      	add	r3, sp, #688	; 0x2b0
   11c8e:	9301      	str	r3, [sp, #4]
   11c90:	9600      	str	r6, [sp, #0]
   11c92:	465b      	mov	r3, fp
   11c94:	2206      	movs	r2, #6
   11c96:	a904      	add	r1, sp, #16
   11c98:	4608      	mov	r0, r1
   11c9a:	f7ff fa05 	bl	110a8 <sqr_n_mul_mont_383>
   11c9e:	aba0      	add	r3, sp, #640	; 0x280
   11ca0:	9301      	str	r3, [sp, #4]
   11ca2:	9600      	str	r6, [sp, #0]
   11ca4:	465b      	mov	r3, fp
   11ca6:	2203      	movs	r2, #3
   11ca8:	a904      	add	r1, sp, #16
   11caa:	4608      	mov	r0, r1
   11cac:	f7ff f9fc 	bl	110a8 <sqr_n_mul_mont_383>
   11cb0:	f8cd 8004 	str.w	r8, [sp, #4]
   11cb4:	9600      	str	r6, [sp, #0]
   11cb6:	465b      	mov	r3, fp
   11cb8:	2208      	movs	r2, #8
   11cba:	a904      	add	r1, sp, #16
   11cbc:	4608      	mov	r0, r1
   11cbe:	f7ff f9f3 	bl	110a8 <sqr_n_mul_mont_383>
   11cc2:	ab88      	add	r3, sp, #544	; 0x220
   11cc4:	9301      	str	r3, [sp, #4]
   11cc6:	9600      	str	r6, [sp, #0]
   11cc8:	465b      	mov	r3, fp
   11cca:	2207      	movs	r2, #7
   11ccc:	a904      	add	r1, sp, #16
   11cce:	4608      	mov	r0, r1
   11cd0:	f7ff f9ea 	bl	110a8 <sqr_n_mul_mont_383>
   11cd4:	ab94      	add	r3, sp, #592	; 0x250
   11cd6:	9301      	str	r3, [sp, #4]
   11cd8:	9600      	str	r6, [sp, #0]
   11cda:	465b      	mov	r3, fp
   11cdc:	2205      	movs	r2, #5
   11cde:	a904      	add	r1, sp, #16
   11ce0:	4608      	mov	r0, r1
   11ce2:	f7ff f9e1 	bl	110a8 <sqr_n_mul_mont_383>
   11ce6:	f8cd 8004 	str.w	r8, [sp, #4]
   11cea:	9600      	str	r6, [sp, #0]
   11cec:	465b      	mov	r3, fp
   11cee:	2206      	movs	r2, #6
   11cf0:	a904      	add	r1, sp, #16
   11cf2:	4608      	mov	r0, r1
   11cf4:	f7ff f9d8 	bl	110a8 <sqr_n_mul_mont_383>
   11cf8:	f8cd a004 	str.w	sl, [sp, #4]
   11cfc:	9600      	str	r6, [sp, #0]
   11cfe:	465b      	mov	r3, fp
   11d00:	2206      	movs	r2, #6
   11d02:	a904      	add	r1, sp, #16
   11d04:	4608      	mov	r0, r1
   11d06:	f7ff f9cf 	bl	110a8 <sqr_n_mul_mont_383>
   11d0a:	ab70      	add	r3, sp, #448	; 0x1c0
   11d0c:	9301      	str	r3, [sp, #4]
   11d0e:	9600      	str	r6, [sp, #0]
   11d10:	465b      	mov	r3, fp
   11d12:	2204      	movs	r2, #4
   11d14:	a904      	add	r1, sp, #16
   11d16:	4608      	mov	r0, r1
   11d18:	f7ff f9c6 	bl	110a8 <sqr_n_mul_mont_383>
   11d1c:	f8cd a004 	str.w	sl, [sp, #4]
   11d20:	9600      	str	r6, [sp, #0]
   11d22:	465b      	mov	r3, fp
   11d24:	2208      	movs	r2, #8
   11d26:	a904      	add	r1, sp, #16
   11d28:	4608      	mov	r0, r1
   11d2a:	f7ff f9bd 	bl	110a8 <sqr_n_mul_mont_383>
   11d2e:	f8cd 8004 	str.w	r8, [sp, #4]
   11d32:	9600      	str	r6, [sp, #0]
   11d34:	465b      	mov	r3, fp
   11d36:	2204      	movs	r2, #4
   11d38:	a904      	add	r1, sp, #16
   11d3a:	4608      	mov	r0, r1
   11d3c:	f7ff f9b4 	bl	110a8 <sqr_n_mul_mont_383>
   11d40:	ab88      	add	r3, sp, #544	; 0x220
   11d42:	9301      	str	r3, [sp, #4]
   11d44:	9600      	str	r6, [sp, #0]
   11d46:	465b      	mov	r3, fp
   11d48:	2207      	movs	r2, #7
   11d4a:	a904      	add	r1, sp, #16
   11d4c:	4608      	mov	r0, r1
   11d4e:	f7ff f9ab 	bl	110a8 <sqr_n_mul_mont_383>
   11d52:	e003      	b.n	11d5c <recip_sqrt_fp_3mod4+0x30c>
   11d54:	00024108 	.word	0x00024108
   11d58:	fffcfffd 	.word	0xfffcfffd
   11d5c:	ab7c      	add	r3, sp, #496	; 0x1f0
   11d5e:	9301      	str	r3, [sp, #4]
   11d60:	9600      	str	r6, [sp, #0]
   11d62:	465b      	mov	r3, fp
   11d64:	2209      	movs	r2, #9
   11d66:	a904      	add	r1, sp, #16
   11d68:	4608      	mov	r0, r1
   11d6a:	f7ff f99d 	bl	110a8 <sqr_n_mul_mont_383>
   11d6e:	9501      	str	r5, [sp, #4]
   11d70:	9600      	str	r6, [sp, #0]
   11d72:	465b      	mov	r3, fp
   11d74:	2202      	movs	r2, #2
   11d76:	a904      	add	r1, sp, #16
   11d78:	4608      	mov	r0, r1
   11d7a:	f7ff f995 	bl	110a8 <sqr_n_mul_mont_383>
   11d7e:	ab4c      	add	r3, sp, #304	; 0x130
   11d80:	9301      	str	r3, [sp, #4]
   11d82:	9600      	str	r6, [sp, #0]
   11d84:	465b      	mov	r3, fp
   11d86:	2205      	movs	r2, #5
   11d88:	a904      	add	r1, sp, #16
   11d8a:	4608      	mov	r0, r1
   11d8c:	f7ff f98c 	bl	110a8 <sqr_n_mul_mont_383>
   11d90:	ab10      	add	r3, sp, #64	; 0x40
   11d92:	9301      	str	r3, [sp, #4]
   11d94:	9600      	str	r6, [sp, #0]
   11d96:	465b      	mov	r3, fp
   11d98:	2207      	movs	r2, #7
   11d9a:	a904      	add	r1, sp, #16
   11d9c:	4608      	mov	r0, r1
   11d9e:	f7ff f983 	bl	110a8 <sqr_n_mul_mont_383>
   11da2:	ab70      	add	r3, sp, #448	; 0x1c0
   11da4:	9301      	str	r3, [sp, #4]
   11da6:	9600      	str	r6, [sp, #0]
   11da8:	465b      	mov	r3, fp
   11daa:	2207      	movs	r2, #7
   11dac:	a904      	add	r1, sp, #16
   11dae:	4608      	mov	r0, r1
   11db0:	f7ff f97a 	bl	110a8 <sqr_n_mul_mont_383>
   11db4:	ab88      	add	r3, sp, #544	; 0x220
   11db6:	9301      	str	r3, [sp, #4]
   11db8:	9600      	str	r6, [sp, #0]
   11dba:	465b      	mov	r3, fp
   11dbc:	2206      	movs	r2, #6
   11dbe:	a904      	add	r1, sp, #16
   11dc0:	4608      	mov	r0, r1
   11dc2:	f7ff f971 	bl	110a8 <sqr_n_mul_mont_383>
   11dc6:	f8cd a004 	str.w	sl, [sp, #4]
   11dca:	9600      	str	r6, [sp, #0]
   11dcc:	465b      	mov	r3, fp
   11dce:	2205      	movs	r2, #5
   11dd0:	a904      	add	r1, sp, #16
   11dd2:	4608      	mov	r0, r1
   11dd4:	f7ff f968 	bl	110a8 <sqr_n_mul_mont_383>
   11dd8:	ab7c      	add	r3, sp, #496	; 0x1f0
   11dda:	9301      	str	r3, [sp, #4]
   11ddc:	9600      	str	r6, [sp, #0]
   11dde:	465b      	mov	r3, fp
   11de0:	2205      	movs	r2, #5
   11de2:	a904      	add	r1, sp, #16
   11de4:	4608      	mov	r0, r1
   11de6:	f7ff f95f 	bl	110a8 <sqr_n_mul_mont_383>
   11dea:	ab7c      	add	r3, sp, #496	; 0x1f0
   11dec:	9301      	str	r3, [sp, #4]
   11dee:	9600      	str	r6, [sp, #0]
   11df0:	465b      	mov	r3, fp
   11df2:	2205      	movs	r2, #5
   11df4:	a904      	add	r1, sp, #16
   11df6:	4608      	mov	r0, r1
   11df8:	f7ff f956 	bl	110a8 <sqr_n_mul_mont_383>
   11dfc:	f8cd 8004 	str.w	r8, [sp, #4]
   11e00:	9600      	str	r6, [sp, #0]
   11e02:	465b      	mov	r3, fp
   11e04:	2208      	movs	r2, #8
   11e06:	a904      	add	r1, sp, #16
   11e08:	4608      	mov	r0, r1
   11e0a:	f7ff f94d 	bl	110a8 <sqr_n_mul_mont_383>
   11e0e:	ab1c      	add	r3, sp, #112	; 0x70
   11e10:	9301      	str	r3, [sp, #4]
   11e12:	9600      	str	r6, [sp, #0]
   11e14:	465b      	mov	r3, fp
   11e16:	2207      	movs	r2, #7
   11e18:	a904      	add	r1, sp, #16
   11e1a:	4608      	mov	r0, r1
   11e1c:	f7ff f944 	bl	110a8 <sqr_n_mul_mont_383>
   11e20:	f8cd 9004 	str.w	r9, [sp, #4]
   11e24:	9600      	str	r6, [sp, #0]
   11e26:	465b      	mov	r3, fp
   11e28:	2209      	movs	r2, #9
   11e2a:	a904      	add	r1, sp, #16
   11e2c:	4608      	mov	r0, r1
   11e2e:	f7ff f93b 	bl	110a8 <sqr_n_mul_mont_383>
   11e32:	f8cd 8004 	str.w	r8, [sp, #4]
   11e36:	9600      	str	r6, [sp, #0]
   11e38:	465b      	mov	r3, fp
   11e3a:	2205      	movs	r2, #5
   11e3c:	a904      	add	r1, sp, #16
   11e3e:	4608      	mov	r0, r1
   11e40:	f7ff f932 	bl	110a8 <sqr_n_mul_mont_383>
   11e44:	9501      	str	r5, [sp, #4]
   11e46:	9600      	str	r6, [sp, #0]
   11e48:	465b      	mov	r3, fp
   11e4a:	2203      	movs	r2, #3
   11e4c:	a904      	add	r1, sp, #16
   11e4e:	4608      	mov	r0, r1
   11e50:	f7ff f92a 	bl	110a8 <sqr_n_mul_mont_383>
   11e54:	f8cd 9004 	str.w	r9, [sp, #4]
   11e58:	9600      	str	r6, [sp, #0]
   11e5a:	465b      	mov	r3, fp
   11e5c:	2208      	movs	r2, #8
   11e5e:	a904      	add	r1, sp, #16
   11e60:	4608      	mov	r0, r1
   11e62:	f7ff f921 	bl	110a8 <sqr_n_mul_mont_383>
   11e66:	9501      	str	r5, [sp, #4]
   11e68:	9600      	str	r6, [sp, #0]
   11e6a:	465b      	mov	r3, fp
   11e6c:	2203      	movs	r2, #3
   11e6e:	a904      	add	r1, sp, #16
   11e70:	4608      	mov	r0, r1
   11e72:	f7ff f919 	bl	110a8 <sqr_n_mul_mont_383>
   11e76:	ab70      	add	r3, sp, #448	; 0x1c0
   11e78:	9301      	str	r3, [sp, #4]
   11e7a:	9600      	str	r6, [sp, #0]
   11e7c:	465b      	mov	r3, fp
   11e7e:	2207      	movs	r2, #7
   11e80:	a904      	add	r1, sp, #16
   11e82:	4608      	mov	r0, r1
   11e84:	f7ff f910 	bl	110a8 <sqr_n_mul_mont_383>
   11e88:	f8cd 9004 	str.w	r9, [sp, #4]
   11e8c:	9600      	str	r6, [sp, #0]
   11e8e:	465b      	mov	r3, fp
   11e90:	2209      	movs	r2, #9
   11e92:	a904      	add	r1, sp, #16
   11e94:	4608      	mov	r0, r1
   11e96:	f7ff f907 	bl	110a8 <sqr_n_mul_mont_383>
   11e9a:	ab1c      	add	r3, sp, #112	; 0x70
   11e9c:	9301      	str	r3, [sp, #4]
   11e9e:	9600      	str	r6, [sp, #0]
   11ea0:	465b      	mov	r3, fp
   11ea2:	2206      	movs	r2, #6
   11ea4:	a904      	add	r1, sp, #16
   11ea6:	4608      	mov	r0, r1
   11ea8:	f7ff f8fe 	bl	110a8 <sqr_n_mul_mont_383>
   11eac:	9401      	str	r4, [sp, #4]
   11eae:	9600      	str	r6, [sp, #0]
   11eb0:	465b      	mov	r3, fp
   11eb2:	2206      	movs	r2, #6
   11eb4:	a904      	add	r1, sp, #16
   11eb6:	4608      	mov	r0, r1
   11eb8:	f7ff f8f6 	bl	110a8 <sqr_n_mul_mont_383>
   11ebc:	9401      	str	r4, [sp, #4]
   11ebe:	9600      	str	r6, [sp, #0]
   11ec0:	465b      	mov	r3, fp
   11ec2:	2205      	movs	r2, #5
   11ec4:	a904      	add	r1, sp, #16
   11ec6:	4608      	mov	r0, r1
   11ec8:	f7ff f8ee 	bl	110a8 <sqr_n_mul_mont_383>
   11ecc:	9401      	str	r4, [sp, #4]
   11ece:	9600      	str	r6, [sp, #0]
   11ed0:	465b      	mov	r3, fp
   11ed2:	2205      	movs	r2, #5
   11ed4:	a904      	add	r1, sp, #16
   11ed6:	4608      	mov	r0, r1
   11ed8:	f7ff f8e6 	bl	110a8 <sqr_n_mul_mont_383>
   11edc:	f8cd 8004 	str.w	r8, [sp, #4]
   11ee0:	9600      	str	r6, [sp, #0]
   11ee2:	465b      	mov	r3, fp
   11ee4:	2204      	movs	r2, #4
   11ee6:	a904      	add	r1, sp, #16
   11ee8:	4608      	mov	r0, r1
   11eea:	f7ff f8dd 	bl	110a8 <sqr_n_mul_mont_383>
   11eee:	9501      	str	r5, [sp, #4]
   11ef0:	9600      	str	r6, [sp, #0]
   11ef2:	465b      	mov	r3, fp
   11ef4:	2203      	movs	r2, #3
   11ef6:	a904      	add	r1, sp, #16
   11ef8:	4608      	mov	r0, r1
   11efa:	f7ff f8d5 	bl	110a8 <sqr_n_mul_mont_383>
   11efe:	ab1c      	add	r3, sp, #112	; 0x70
   11f00:	9301      	str	r3, [sp, #4]
   11f02:	9600      	str	r6, [sp, #0]
   11f04:	465b      	mov	r3, fp
   11f06:	2208      	movs	r2, #8
   11f08:	a904      	add	r1, sp, #16
   11f0a:	4608      	mov	r0, r1
   11f0c:	f7ff f8cc 	bl	110a8 <sqr_n_mul_mont_383>
   11f10:	9401      	str	r4, [sp, #4]
   11f12:	9600      	str	r6, [sp, #0]
   11f14:	465b      	mov	r3, fp
   11f16:	2207      	movs	r2, #7
   11f18:	a904      	add	r1, sp, #16
   11f1a:	4608      	mov	r0, r1
   11f1c:	f7ff f8c4 	bl	110a8 <sqr_n_mul_mont_383>
   11f20:	9401      	str	r4, [sp, #4]
   11f22:	9600      	str	r6, [sp, #0]
   11f24:	465b      	mov	r3, fp
   11f26:	2205      	movs	r2, #5
   11f28:	a904      	add	r1, sp, #16
   11f2a:	4608      	mov	r0, r1
   11f2c:	f7ff f8bc 	bl	110a8 <sqr_n_mul_mont_383>
   11f30:	9401      	str	r4, [sp, #4]
   11f32:	9600      	str	r6, [sp, #0]
   11f34:	465b      	mov	r3, fp
   11f36:	2205      	movs	r2, #5
   11f38:	a904      	add	r1, sp, #16
   11f3a:	4608      	mov	r0, r1
   11f3c:	f7ff f8b4 	bl	110a8 <sqr_n_mul_mont_383>
   11f40:	f8cd 9004 	str.w	r9, [sp, #4]
   11f44:	9600      	str	r6, [sp, #0]
   11f46:	465b      	mov	r3, fp
   11f48:	2204      	movs	r2, #4
   11f4a:	a904      	add	r1, sp, #16
   11f4c:	4608      	mov	r0, r1
   11f4e:	f7ff f8ab 	bl	110a8 <sqr_n_mul_mont_383>
   11f52:	ab4c      	add	r3, sp, #304	; 0x130
   11f54:	9301      	str	r3, [sp, #4]
   11f56:	9600      	str	r6, [sp, #0]
   11f58:	465b      	mov	r3, fp
   11f5a:	2204      	movs	r2, #4
   11f5c:	a904      	add	r1, sp, #16
   11f5e:	4608      	mov	r0, r1
   11f60:	f7ff f8a2 	bl	110a8 <sqr_n_mul_mont_383>
   11f64:	9401      	str	r4, [sp, #4]
   11f66:	9600      	str	r6, [sp, #0]
   11f68:	465b      	mov	r3, fp
   11f6a:	2207      	movs	r2, #7
   11f6c:	a904      	add	r1, sp, #16
   11f6e:	4608      	mov	r0, r1
   11f70:	f7ff f89a 	bl	110a8 <sqr_n_mul_mont_383>
   11f74:	f8cd a004 	str.w	sl, [sp, #4]
   11f78:	9600      	str	r6, [sp, #0]
   11f7a:	465b      	mov	r3, fp
   11f7c:	2205      	movs	r2, #5
   11f7e:	a904      	add	r1, sp, #16
   11f80:	4608      	mov	r0, r1
   11f82:	f7ff f891 	bl	110a8 <sqr_n_mul_mont_383>
   11f86:	ae34      	add	r6, sp, #208	; 0xd0
   11f88:	9601      	str	r6, [sp, #4]
   11f8a:	4d2b      	ldr	r5, [pc, #172]	; (12038 <recip_sqrt_fp_3mod4+0x5e8>)
   11f8c:	9500      	str	r5, [sp, #0]
   11f8e:	465b      	mov	r3, fp
   11f90:	2205      	movs	r2, #5
   11f92:	a904      	add	r1, sp, #16
   11f94:	4608      	mov	r0, r1
   11f96:	f7ff f887 	bl	110a8 <sqr_n_mul_mont_383>
   11f9a:	9601      	str	r6, [sp, #4]
   11f9c:	9500      	str	r5, [sp, #0]
   11f9e:	465b      	mov	r3, fp
   11fa0:	2205      	movs	r2, #5
   11fa2:	a904      	add	r1, sp, #16
   11fa4:	4608      	mov	r0, r1
   11fa6:	f7ff f87f 	bl	110a8 <sqr_n_mul_mont_383>
   11faa:	9601      	str	r6, [sp, #4]
   11fac:	9500      	str	r5, [sp, #0]
   11fae:	465b      	mov	r3, fp
   11fb0:	2205      	movs	r2, #5
   11fb2:	a904      	add	r1, sp, #16
   11fb4:	4608      	mov	r0, r1
   11fb6:	f7ff f877 	bl	110a8 <sqr_n_mul_mont_383>
   11fba:	9601      	str	r6, [sp, #4]
   11fbc:	9500      	str	r5, [sp, #0]
   11fbe:	465b      	mov	r3, fp
   11fc0:	2205      	movs	r2, #5
   11fc2:	a904      	add	r1, sp, #16
   11fc4:	4608      	mov	r0, r1
   11fc6:	f7ff f86f 	bl	110a8 <sqr_n_mul_mont_383>
   11fca:	9601      	str	r6, [sp, #4]
   11fcc:	9500      	str	r5, [sp, #0]
   11fce:	465b      	mov	r3, fp
   11fd0:	2205      	movs	r2, #5
   11fd2:	a904      	add	r1, sp, #16
   11fd4:	4608      	mov	r0, r1
   11fd6:	f7ff f867 	bl	110a8 <sqr_n_mul_mont_383>
   11fda:	9601      	str	r6, [sp, #4]
   11fdc:	9500      	str	r5, [sp, #0]
   11fde:	465b      	mov	r3, fp
   11fe0:	2205      	movs	r2, #5
   11fe2:	a904      	add	r1, sp, #16
   11fe4:	4608      	mov	r0, r1
   11fe6:	f7ff f85f 	bl	110a8 <sqr_n_mul_mont_383>
   11fea:	f8cd 8004 	str.w	r8, [sp, #4]
   11fee:	9500      	str	r5, [sp, #0]
   11ff0:	465b      	mov	r3, fp
   11ff2:	2204      	movs	r2, #4
   11ff4:	a904      	add	r1, sp, #16
   11ff6:	4608      	mov	r0, r1
   11ff8:	f7ff f856 	bl	110a8 <sqr_n_mul_mont_383>
   11ffc:	ab1c      	add	r3, sp, #112	; 0x70
   11ffe:	9301      	str	r3, [sp, #4]
   12000:	9500      	str	r5, [sp, #0]
   12002:	465b      	mov	r3, fp
   12004:	2206      	movs	r2, #6
   12006:	a904      	add	r1, sp, #16
   12008:	4608      	mov	r0, r1
   1200a:	f7ff f84d 	bl	110a8 <sqr_n_mul_mont_383>
   1200e:	ab10      	add	r3, sp, #64	; 0x40
   12010:	9301      	str	r3, [sp, #4]
   12012:	9500      	str	r5, [sp, #0]
   12014:	465b      	mov	r3, fp
   12016:	2204      	movs	r2, #4
   12018:	a904      	add	r1, sp, #16
   1201a:	4608      	mov	r0, r1
   1201c:	f7ff f844 	bl	110a8 <sqr_n_mul_mont_383>
   12020:	9701      	str	r7, [sp, #4]
   12022:	9500      	str	r5, [sp, #0]
   12024:	465b      	mov	r3, fp
   12026:	aa04      	add	r2, sp, #16
   12028:	4611      	mov	r1, r2
   1202a:	9803      	ldr	r0, [sp, #12]
   1202c:	f7fa fcd0 	bl	c9d0 <mul_mont_n>
   12030:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   12034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12038:	fffcfffd 	.word	0xfffcfffd

0001203c <sqrt_fp>:
   1203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12040:	b09a      	sub	sp, #104	; 0x68
   12042:	4604      	mov	r4, r0
   12044:	460d      	mov	r5, r1
   12046:	a80e      	add	r0, sp, #56	; 0x38
   12048:	f7ff fd02 	bl	11a50 <recip_sqrt_fp_3mod4>
   1204c:	4e1a      	ldr	r6, [pc, #104]	; (120b8 <sqrt_fp+0x7c>)
   1204e:	f04f 080c 	mov.w	r8, #12
   12052:	f8cd 8004 	str.w	r8, [sp, #4]
   12056:	4f19      	ldr	r7, [pc, #100]	; (120bc <sqrt_fp+0x80>)
   12058:	9700      	str	r7, [sp, #0]
   1205a:	4633      	mov	r3, r6
   1205c:	462a      	mov	r2, r5
   1205e:	a90e      	add	r1, sp, #56	; 0x38
   12060:	4608      	mov	r0, r1
   12062:	f7fa fcb5 	bl	c9d0 <mul_mont_n>
   12066:	f8cd 8004 	str.w	r8, [sp, #4]
   1206a:	9700      	str	r7, [sp, #0]
   1206c:	4633      	mov	r3, r6
   1206e:	aa0e      	add	r2, sp, #56	; 0x38
   12070:	4611      	mov	r1, r2
   12072:	a802      	add	r0, sp, #8
   12074:	f7fa fcac 	bl	c9d0 <mul_mont_n>
   12078:	f10d 0e08 	add.w	lr, sp, #8
   1207c:	f1a5 0c04 	sub.w	ip, r5, #4
   12080:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   12084:	2200      	movs	r2, #0
   12086:	f85e 3b04 	ldr.w	r3, [lr], #4
   1208a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   1208e:	4043      	eors	r3, r0
   12090:	431a      	orrs	r2, r3
   12092:	458c      	cmp	ip, r1
   12094:	d1f7      	bne.n	12086 <sqrt_fp+0x4a>
   12096:	1e50      	subs	r0, r2, #1
   12098:	ea20 0002 	bic.w	r0, r0, r2
   1209c:	0fc0      	lsrs	r0, r0, #31
   1209e:	a90e      	add	r1, sp, #56	; 0x38
   120a0:	1f23      	subs	r3, r4, #4
   120a2:	342c      	adds	r4, #44	; 0x2c
   120a4:	f851 2b04 	ldr.w	r2, [r1], #4
   120a8:	f843 2f04 	str.w	r2, [r3, #4]!
   120ac:	42a3      	cmp	r3, r4
   120ae:	d1f9      	bne.n	120a4 <sqrt_fp+0x68>
   120b0:	b01a      	add	sp, #104	; 0x68
   120b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   120b6:	bf00      	nop
   120b8:	00024108 	.word	0x00024108
   120bc:	fffcfffd 	.word	0xfffcfffd

000120c0 <POINTonE1_Uncompress>:
   120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120c4:	b0b3      	sub	sp, #204	; 0xcc
   120c6:	780d      	ldrb	r5, [r1, #0]
   120c8:	f991 3000 	ldrsb.w	r3, [r1]
   120cc:	2b00      	cmp	r3, #0
   120ce:	f280 80be 	bge.w	1224e <POINTonE1_Uncompress+0x18e>
   120d2:	4604      	mov	r4, r0
   120d4:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   120d8:	d01a      	beq.n	12110 <POINTonE1_Uncompress+0x50>
   120da:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   120de:	3d01      	subs	r5, #1
   120e0:	0fed      	lsrs	r5, r5, #31
   120e2:	460b      	mov	r3, r1
   120e4:	312f      	adds	r1, #47	; 0x2f
   120e6:	2200      	movs	r2, #0
   120e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   120ec:	4302      	orrs	r2, r0
   120ee:	4299      	cmp	r1, r3
   120f0:	d1fa      	bne.n	120e8 <POINTonE1_Uncompress+0x28>
   120f2:	3a01      	subs	r2, #1
   120f4:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   120f8:	f000 80ae 	beq.w	12258 <POINTonE1_Uncompress+0x198>
   120fc:	4623      	mov	r3, r4
   120fe:	f104 0160 	add.w	r1, r4, #96	; 0x60
   12102:	2200      	movs	r2, #0
   12104:	f843 2b04 	str.w	r2, [r3], #4
   12108:	4299      	cmp	r1, r3
   1210a:	d1fb      	bne.n	12104 <POINTonE1_Uncompress+0x44>
   1210c:	2600      	movs	r6, #0
   1210e:	e09f      	b.n	12250 <POINTonE1_Uncompress+0x190>
   12110:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   12114:	460a      	mov	r2, r1
   12116:	2000      	movs	r0, #0
   12118:	312f      	adds	r1, #47	; 0x2f
   1211a:	1a8b      	subs	r3, r1, r2
   1211c:	f812 7b01 	ldrb.w	r7, [r2], #1
   12120:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
   12124:	f023 0303 	bic.w	r3, r3, #3
   12128:	af32      	add	r7, sp, #200	; 0xc8
   1212a:	443b      	add	r3, r7
   1212c:	f843 0c60 	str.w	r0, [r3, #-96]
   12130:	4562      	cmp	r2, ip
   12132:	d1f2      	bne.n	1211a <POINTonE1_Uncompress+0x5a>
   12134:	9b25      	ldr	r3, [sp, #148]	; 0x94
   12136:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1213a:	9325      	str	r3, [sp, #148]	; 0x94
   1213c:	4b4b      	ldr	r3, [pc, #300]	; (1226c <POINTonE1_Uncompress+0x1ac>)
   1213e:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   12142:	220c      	movs	r2, #12
   12144:	9200      	str	r2, [sp, #0]
   12146:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   1214a:	4641      	mov	r1, r8
   1214c:	a802      	add	r0, sp, #8
   1214e:	f7fa fde7 	bl	cd20 <add_mod_n>
   12152:	aa02      	add	r2, sp, #8
   12154:	46c3      	mov	fp, r8
   12156:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   1215a:	4641      	mov	r1, r8
   1215c:	2000      	movs	r0, #0
   1215e:	f852 3b04 	ldr.w	r3, [r2], #4
   12162:	f851 7b04 	ldr.w	r7, [r1], #4
   12166:	407b      	eors	r3, r7
   12168:	4318      	orrs	r0, r3
   1216a:	4572      	cmp	r2, lr
   1216c:	d1f7      	bne.n	1215e <POINTonE1_Uncompress+0x9e>
   1216e:	1e43      	subs	r3, r0, #1
   12170:	4383      	bics	r3, r0
   12172:	d573      	bpl.n	1225c <POINTonE1_Uncompress+0x19c>
   12174:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1226c <POINTonE1_Uncompress+0x1ac>
   12178:	f04f 090c 	mov.w	r9, #12
   1217c:	f8cd 9004 	str.w	r9, [sp, #4]
   12180:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 12270 <POINTonE1_Uncompress+0x1b0>
   12184:	f8cd a000 	str.w	sl, [sp]
   12188:	4643      	mov	r3, r8
   1218a:	f508 7234 	add.w	r2, r8, #720	; 0x2d0
   1218e:	a91a      	add	r1, sp, #104	; 0x68
   12190:	4608      	mov	r0, r1
   12192:	f7fa fc1d 	bl	c9d0 <mul_mont_n>
   12196:	f8cd 9004 	str.w	r9, [sp, #4]
   1219a:	f8cd a000 	str.w	sl, [sp]
   1219e:	4643      	mov	r3, r8
   121a0:	aa1a      	add	r2, sp, #104	; 0x68
   121a2:	4611      	mov	r1, r2
   121a4:	a826      	add	r0, sp, #152	; 0x98
   121a6:	f7fa fc13 	bl	c9d0 <mul_mont_n>
   121aa:	f8cd 9004 	str.w	r9, [sp, #4]
   121ae:	f8cd a000 	str.w	sl, [sp]
   121b2:	4643      	mov	r3, r8
   121b4:	aa1a      	add	r2, sp, #104	; 0x68
   121b6:	a926      	add	r1, sp, #152	; 0x98
   121b8:	4608      	mov	r0, r1
   121ba:	f7fa fc09 	bl	c9d0 <mul_mont_n>
   121be:	f8cd 9000 	str.w	r9, [sp]
   121c2:	4643      	mov	r3, r8
   121c4:	f108 0260 	add.w	r2, r8, #96	; 0x60
   121c8:	a926      	add	r1, sp, #152	; 0x98
   121ca:	4608      	mov	r0, r1
   121cc:	f7fa fda8 	bl	cd20 <add_mod_n>
   121d0:	a926      	add	r1, sp, #152	; 0x98
   121d2:	4608      	mov	r0, r1
   121d4:	f7ff ff32 	bl	1203c <sqrt_fp>
   121d8:	2800      	cmp	r0, #0
   121da:	d044      	beq.n	12266 <POINTonE1_Uncompress+0x1a6>
   121dc:	ab19      	add	r3, sp, #100	; 0x64
   121de:	f1a4 0804 	sub.w	r8, r4, #4
   121e2:	f10b 075c 	add.w	r7, fp, #92	; 0x5c
   121e6:	4642      	mov	r2, r8
   121e8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   121ec:	f842 1f04 	str.w	r1, [r2, #4]!
   121f0:	42bb      	cmp	r3, r7
   121f2:	d1f9      	bne.n	121e8 <POINTonE1_Uncompress+0x128>
   121f4:	f104 0730 	add.w	r7, r4, #48	; 0x30
   121f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 1226c <POINTonE1_Uncompress+0x1ac>
   121fc:	f04f 0a0c 	mov.w	sl, #12
   12200:	f8cd a000 	str.w	sl, [sp]
   12204:	4b1a      	ldr	r3, [pc, #104]	; (12270 <POINTonE1_Uncompress+0x1b0>)
   12206:	464a      	mov	r2, r9
   12208:	4639      	mov	r1, r7
   1220a:	a80e      	add	r0, sp, #56	; 0x38
   1220c:	f7fa ff12 	bl	d034 <from_mont_n>
   12210:	4652      	mov	r2, sl
   12212:	4649      	mov	r1, r9
   12214:	a80e      	add	r0, sp, #56	; 0x38
   12216:	f7fb f822 	bl	d25e <sgn0_pty_mod_n>
   1221a:	2803      	cmp	r0, #3
   1221c:	d820      	bhi.n	12260 <POINTonE1_Uncompress+0x1a0>
   1221e:	f3c5 1540 	ubfx	r5, r5, #5, #1
   12222:	230c      	movs	r3, #12
   12224:	9300      	str	r3, [sp, #0]
   12226:	4b11      	ldr	r3, [pc, #68]	; (1226c <POINTonE1_Uncompress+0x1ac>)
   12228:	ea85 0250 	eor.w	r2, r5, r0, lsr #1
   1222c:	4639      	mov	r1, r7
   1222e:	4638      	mov	r0, r7
   12230:	f7fb fc0a 	bl	da48 <cneg_mod_n>
   12234:	342c      	adds	r4, #44	; 0x2c
   12236:	2300      	movs	r3, #0
   12238:	f858 2f04 	ldr.w	r2, [r8, #4]!
   1223c:	4313      	orrs	r3, r2
   1223e:	45a0      	cmp	r8, r4
   12240:	d1fa      	bne.n	12238 <POINTonE1_Uncompress+0x178>
   12242:	1e5a      	subs	r2, r3, #1
   12244:	ea32 0303 	bics.w	r3, r2, r3
   12248:	bf48      	it	mi
   1224a:	2603      	movmi	r6, #3
   1224c:	e000      	b.n	12250 <POINTonE1_Uncompress+0x190>
   1224e:	2601      	movs	r6, #1
   12250:	4630      	mov	r0, r6
   12252:	b033      	add	sp, #204	; 0xcc
   12254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12258:	2601      	movs	r6, #1
   1225a:	e7f9      	b.n	12250 <POINTonE1_Uncompress+0x190>
   1225c:	f04f 30ff 	mov.w	r0, #4294967295
   12260:	4240      	negs	r0, r0
   12262:	b2c6      	uxtb	r6, r0
   12264:	e7f4      	b.n	12250 <POINTonE1_Uncompress+0x190>
   12266:	f06f 0001 	mvn.w	r0, #1
   1226a:	e7f9      	b.n	12260 <POINTonE1_Uncompress+0x1a0>
   1226c:	00024108 	.word	0x00024108
   12270:	fffcfffd 	.word	0xfffcfffd

00012274 <blst_p1_uncompress>:
   12274:	b508      	push	{r3, lr}
   12276:	f7ff ff23 	bl	120c0 <POINTonE1_Uncompress>
   1227a:	bd08      	pop	{r3, pc}

0001227c <blst_p1_deserialize>:
   1227c:	b508      	push	{r3, lr}
   1227e:	780b      	ldrb	r3, [r1, #0]
   12280:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   12284:	d01a      	beq.n	122bc <blst_p1_deserialize+0x40>
   12286:	f013 0f80 	tst.w	r3, #128	; 0x80
   1228a:	d11a      	bne.n	122c2 <blst_p1_deserialize+0x46>
   1228c:	f013 0f40 	tst.w	r3, #64	; 0x40
   12290:	d024      	beq.n	122dc <blst_p1_deserialize+0x60>
   12292:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   12296:	f10c 3cff 	add.w	ip, ip, #4294967295
   1229a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   1229e:	460b      	mov	r3, r1
   122a0:	315f      	adds	r1, #95	; 0x5f
   122a2:	2200      	movs	r2, #0
   122a4:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   122a8:	ea42 020e 	orr.w	r2, r2, lr
   122ac:	428b      	cmp	r3, r1
   122ae:	d1f9      	bne.n	122a4 <blst_p1_deserialize+0x28>
   122b0:	3a01      	subs	r2, #1
   122b2:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   122b6:	d107      	bne.n	122c8 <blst_p1_deserialize+0x4c>
   122b8:	2001      	movs	r0, #1
   122ba:	e010      	b.n	122de <blst_p1_deserialize+0x62>
   122bc:	f7fc f834 	bl	e328 <POINTonE1_Deserialize_BE>
   122c0:	e00d      	b.n	122de <blst_p1_deserialize+0x62>
   122c2:	f7ff fefd 	bl	120c0 <POINTonE1_Uncompress>
   122c6:	e00a      	b.n	122de <blst_p1_deserialize+0x62>
   122c8:	4603      	mov	r3, r0
   122ca:	f100 0160 	add.w	r1, r0, #96	; 0x60
   122ce:	2200      	movs	r2, #0
   122d0:	f843 2b04 	str.w	r2, [r3], #4
   122d4:	428b      	cmp	r3, r1
   122d6:	d1fb      	bne.n	122d0 <blst_p1_deserialize+0x54>
   122d8:	2000      	movs	r0, #0
   122da:	e000      	b.n	122de <blst_p1_deserialize+0x62>
   122dc:	2001      	movs	r0, #1
   122de:	bd08      	pop	{r3, pc}

000122e0 <blst_aggregate_in_g1>:
   122e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   122e2:	b0a5      	sub	sp, #148	; 0x94
   122e4:	4605      	mov	r5, r0
   122e6:	460e      	mov	r6, r1
   122e8:	7813      	ldrb	r3, [r2, #0]
   122ea:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   122ee:	d120      	bne.n	12332 <blst_aggregate_in_g1+0x52>
   122f0:	4611      	mov	r1, r2
   122f2:	f013 0f80 	tst.w	r3, #128	; 0x80
   122f6:	d12b      	bne.n	12350 <blst_aggregate_in_g1+0x70>
   122f8:	4668      	mov	r0, sp
   122fa:	f7fc f815 	bl	e328 <POINTonE1_Deserialize_BE>
   122fe:	4668      	mov	r0, sp
   12300:	f7fb fb52 	bl	d9a8 <POINTonE1_affine_on_curve>
   12304:	b3b0      	cbz	r0, 12374 <blst_aggregate_in_g1+0x94>
   12306:	481d      	ldr	r0, [pc, #116]	; (1237c <blst_aggregate_in_g1+0x9c>)
   12308:	f100 0390 	add.w	r3, r0, #144	; 0x90
   1230c:	aa17      	add	r2, sp, #92	; 0x5c
   1230e:	30c0      	adds	r0, #192	; 0xc0
   12310:	f853 4b04 	ldr.w	r4, [r3], #4
   12314:	f842 4f04 	str.w	r4, [r2, #4]!
   12318:	4283      	cmp	r3, r0
   1231a:	d1f9      	bne.n	12310 <blst_aggregate_in_g1+0x30>
   1231c:	4668      	mov	r0, sp
   1231e:	f7fd f985 	bl	f62c <POINTonE1_in_G1>
   12322:	b348      	cbz	r0, 12378 <blst_aggregate_in_g1+0x98>
   12324:	b1de      	cbz	r6, 1235e <blst_aggregate_in_g1+0x7e>
   12326:	466a      	mov	r2, sp
   12328:	4631      	mov	r1, r6
   1232a:	4628      	mov	r0, r5
   1232c:	f7fc fc84 	bl	ec38 <POINTonE1_dadd_affine>
   12330:	e001      	b.n	12336 <blst_aggregate_in_g1+0x56>
   12332:	b119      	cbz	r1, 1233c <blst_aggregate_in_g1+0x5c>
   12334:	2700      	movs	r7, #0
   12336:	4638      	mov	r0, r7
   12338:	b025      	add	sp, #148	; 0x94
   1233a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1233c:	4603      	mov	r3, r0
   1233e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   12342:	2200      	movs	r2, #0
   12344:	f843 2b04 	str.w	r2, [r3], #4
   12348:	4299      	cmp	r1, r3
   1234a:	d1fb      	bne.n	12344 <blst_aggregate_in_g1+0x64>
   1234c:	2700      	movs	r7, #0
   1234e:	e7f2      	b.n	12336 <blst_aggregate_in_g1+0x56>
   12350:	4668      	mov	r0, sp
   12352:	f7ff feb5 	bl	120c0 <POINTonE1_Uncompress>
   12356:	2800      	cmp	r0, #0
   12358:	d0d5      	beq.n	12306 <blst_aggregate_in_g1+0x26>
   1235a:	4607      	mov	r7, r0
   1235c:	e7eb      	b.n	12336 <blst_aggregate_in_g1+0x56>
   1235e:	f1ad 0304 	sub.w	r3, sp, #4
   12362:	3d04      	subs	r5, #4
   12364:	a923      	add	r1, sp, #140	; 0x8c
   12366:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1236a:	f845 2f04 	str.w	r2, [r5, #4]!
   1236e:	428b      	cmp	r3, r1
   12370:	d1f9      	bne.n	12366 <blst_aggregate_in_g1+0x86>
   12372:	e7e0      	b.n	12336 <blst_aggregate_in_g1+0x56>
   12374:	2702      	movs	r7, #2
   12376:	e7de      	b.n	12336 <blst_aggregate_in_g1+0x56>
   12378:	2703      	movs	r7, #3
   1237a:	e7dc      	b.n	12336 <blst_aggregate_in_g1+0x56>
   1237c:	00024108 	.word	0x00024108

00012380 <blst_fp_sqrt>:
   12380:	b508      	push	{r3, lr}
   12382:	f7ff fe5b 	bl	1203c <sqrt_fp>
   12386:	bd08      	pop	{r3, pc}

00012388 <recip_sqrt_fp>:
   12388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1238c:	b09a      	sub	sp, #104	; 0x68
   1238e:	4604      	mov	r4, r0
   12390:	460d      	mov	r5, r1
   12392:	a80e      	add	r0, sp, #56	; 0x38
   12394:	f7ff fb5c 	bl	11a50 <recip_sqrt_fp_3mod4>
   12398:	4e1a      	ldr	r6, [pc, #104]	; (12404 <recip_sqrt_fp+0x7c>)
   1239a:	f04f 080c 	mov.w	r8, #12
   1239e:	f8cd 8004 	str.w	r8, [sp, #4]
   123a2:	4f19      	ldr	r7, [pc, #100]	; (12408 <recip_sqrt_fp+0x80>)
   123a4:	9700      	str	r7, [sp, #0]
   123a6:	4633      	mov	r3, r6
   123a8:	462a      	mov	r2, r5
   123aa:	a90e      	add	r1, sp, #56	; 0x38
   123ac:	a802      	add	r0, sp, #8
   123ae:	f7fa fb0f 	bl	c9d0 <mul_mont_n>
   123b2:	f8cd 8004 	str.w	r8, [sp, #4]
   123b6:	9700      	str	r7, [sp, #0]
   123b8:	4633      	mov	r3, r6
   123ba:	aa02      	add	r2, sp, #8
   123bc:	4611      	mov	r1, r2
   123be:	4610      	mov	r0, r2
   123c0:	f7fa fb06 	bl	c9d0 <mul_mont_n>
   123c4:	f10d 0e08 	add.w	lr, sp, #8
   123c8:	f1a5 0c04 	sub.w	ip, r5, #4
   123cc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   123d0:	2200      	movs	r2, #0
   123d2:	f85e 3b04 	ldr.w	r3, [lr], #4
   123d6:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   123da:	4043      	eors	r3, r0
   123dc:	431a      	orrs	r2, r3
   123de:	458c      	cmp	ip, r1
   123e0:	d1f7      	bne.n	123d2 <recip_sqrt_fp+0x4a>
   123e2:	1e50      	subs	r0, r2, #1
   123e4:	ea20 0002 	bic.w	r0, r0, r2
   123e8:	0fc0      	lsrs	r0, r0, #31
   123ea:	a90e      	add	r1, sp, #56	; 0x38
   123ec:	1f23      	subs	r3, r4, #4
   123ee:	342c      	adds	r4, #44	; 0x2c
   123f0:	f851 2b04 	ldr.w	r2, [r1], #4
   123f4:	f843 2f04 	str.w	r2, [r3, #4]!
   123f8:	42a3      	cmp	r3, r4
   123fa:	d1f9      	bne.n	123f0 <recip_sqrt_fp+0x68>
   123fc:	b01a      	add	sp, #104	; 0x68
   123fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12402:	bf00      	nop
   12404:	00024108 	.word	0x00024108
   12408:	fffcfffd 	.word	0xfffcfffd

0001240c <map_to_isogenous_E1>:
   1240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12410:	b0d9      	sub	sp, #356	; 0x164
   12412:	4605      	mov	r5, r0
   12414:	460a      	mov	r2, r1
   12416:	9103      	str	r1, [sp, #12]
   12418:	4c9e      	ldr	r4, [pc, #632]	; (12694 <map_to_isogenous_E1+0x288>)
   1241a:	260c      	movs	r6, #12
   1241c:	9601      	str	r6, [sp, #4]
   1241e:	4f9e      	ldr	r7, [pc, #632]	; (12698 <map_to_isogenous_E1+0x28c>)
   12420:	9700      	str	r7, [sp, #0]
   12422:	4623      	mov	r3, r4
   12424:	a84c      	add	r0, sp, #304	; 0x130
   12426:	f7fa fad3 	bl	c9d0 <mul_mont_n>
   1242a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 1269c <map_to_isogenous_E1+0x290>
   1242e:	9601      	str	r6, [sp, #4]
   12430:	9700      	str	r7, [sp, #0]
   12432:	4623      	mov	r3, r4
   12434:	aa4c      	add	r2, sp, #304	; 0x130
   12436:	f508 71cc 	add.w	r1, r8, #408	; 0x198
   1243a:	a834      	add	r0, sp, #208	; 0xd0
   1243c:	f7fa fac8 	bl	c9d0 <mul_mont_n>
   12440:	9601      	str	r6, [sp, #4]
   12442:	9700      	str	r7, [sp, #0]
   12444:	4623      	mov	r3, r4
   12446:	aa34      	add	r2, sp, #208	; 0xd0
   12448:	4611      	mov	r1, r2
   1244a:	a840      	add	r0, sp, #256	; 0x100
   1244c:	f7fa fac0 	bl	c9d0 <mul_mont_n>
   12450:	9600      	str	r6, [sp, #0]
   12452:	4623      	mov	r3, r4
   12454:	aa34      	add	r2, sp, #208	; 0xd0
   12456:	a940      	add	r1, sp, #256	; 0x100
   12458:	4608      	mov	r0, r1
   1245a:	f7fa fc61 	bl	cd20 <add_mod_n>
   1245e:	9600      	str	r6, [sp, #0]
   12460:	4623      	mov	r3, r4
   12462:	f104 0290 	add.w	r2, r4, #144	; 0x90
   12466:	a940      	add	r1, sp, #256	; 0x100
   12468:	4628      	mov	r0, r5
   1246a:	f7fa fc59 	bl	cd20 <add_mod_n>
   1246e:	9601      	str	r6, [sp, #4]
   12470:	9700      	str	r7, [sp, #0]
   12472:	4623      	mov	r3, r4
   12474:	f508 72e4 	add.w	r2, r8, #456	; 0x1c8
   12478:	4629      	mov	r1, r5
   1247a:	4628      	mov	r0, r5
   1247c:	f7fa faa8 	bl	c9d0 <mul_mont_n>
   12480:	9601      	str	r6, [sp, #4]
   12482:	9700      	str	r7, [sp, #0]
   12484:	4623      	mov	r3, r4
   12486:	462a      	mov	r2, r5
   12488:	a934      	add	r1, sp, #208	; 0xd0
   1248a:	4608      	mov	r0, r1
   1248c:	f7fa faa0 	bl	c9d0 <mul_mont_n>
   12490:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   12494:	9601      	str	r6, [sp, #4]
   12496:	9700      	str	r7, [sp, #0]
   12498:	4623      	mov	r3, r4
   1249a:	aa40      	add	r2, sp, #256	; 0x100
   1249c:	f508 71fc 	add.w	r1, r8, #504	; 0x1f8
   124a0:	4650      	mov	r0, sl
   124a2:	f7fa fa95 	bl	c9d0 <mul_mont_n>
   124a6:	f105 025c 	add.w	r2, r5, #92	; 0x5c
   124aa:	f105 048c 	add.w	r4, r5, #140	; 0x8c
   124ae:	4613      	mov	r3, r2
   124b0:	2100      	movs	r1, #0
   124b2:	f853 0f04 	ldr.w	r0, [r3, #4]!
   124b6:	4301      	orrs	r1, r0
   124b8:	42a3      	cmp	r3, r4
   124ba:	d1fa      	bne.n	124b2 <map_to_isogenous_E1+0xa6>
   124bc:	1e4e      	subs	r6, r1, #1
   124be:	ea26 0101 	bic.w	r1, r6, r1
   124c2:	17ce      	asrs	r6, r1, #31
   124c4:	4876      	ldr	r0, [pc, #472]	; (126a0 <map_to_isogenous_E1+0x294>)
   124c6:	f850 3b04 	ldr.w	r3, [r0], #4
   124ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
   124ce:	404b      	eors	r3, r1
   124d0:	4033      	ands	r3, r6
   124d2:	404b      	eors	r3, r1
   124d4:	6013      	str	r3, [r2, #0]
   124d6:	42a2      	cmp	r2, r4
   124d8:	d1f5      	bne.n	124c6 <map_to_isogenous_E1+0xba>
   124da:	4e6e      	ldr	r6, [pc, #440]	; (12694 <map_to_isogenous_E1+0x288>)
   124dc:	270c      	movs	r7, #12
   124de:	9701      	str	r7, [sp, #4]
   124e0:	4c6d      	ldr	r4, [pc, #436]	; (12698 <map_to_isogenous_E1+0x28c>)
   124e2:	9400      	str	r4, [sp, #0]
   124e4:	4633      	mov	r3, r6
   124e6:	4652      	mov	r2, sl
   124e8:	4651      	mov	r1, sl
   124ea:	a840      	add	r0, sp, #256	; 0x100
   124ec:	f7fa fa70 	bl	c9d0 <mul_mont_n>
   124f0:	9701      	str	r7, [sp, #4]
   124f2:	9400      	str	r4, [sp, #0]
   124f4:	4633      	mov	r3, r6
   124f6:	aa40      	add	r2, sp, #256	; 0x100
   124f8:	4651      	mov	r1, sl
   124fa:	a81c      	add	r0, sp, #112	; 0x70
   124fc:	f7fa fa68 	bl	c9d0 <mul_mont_n>
   12500:	f8df b198 	ldr.w	fp, [pc, #408]	; 1269c <map_to_isogenous_E1+0x290>
   12504:	9701      	str	r7, [sp, #4]
   12506:	9400      	str	r4, [sp, #0]
   12508:	4633      	mov	r3, r6
   1250a:	aa40      	add	r2, sp, #256	; 0x100
   1250c:	f50b 7116 	add.w	r1, fp, #600	; 0x258
   12510:	4610      	mov	r0, r2
   12512:	f7fa fa5d 	bl	c9d0 <mul_mont_n>
   12516:	9701      	str	r7, [sp, #4]
   12518:	9400      	str	r4, [sp, #0]
   1251a:	4633      	mov	r3, r6
   1251c:	462a      	mov	r2, r5
   1251e:	4629      	mov	r1, r5
   12520:	a828      	add	r0, sp, #160	; 0xa0
   12522:	f7fa fa55 	bl	c9d0 <mul_mont_n>
   12526:	9700      	str	r7, [sp, #0]
   12528:	4633      	mov	r3, r6
   1252a:	aa40      	add	r2, sp, #256	; 0x100
   1252c:	a928      	add	r1, sp, #160	; 0xa0
   1252e:	4608      	mov	r0, r1
   12530:	f7fa fbf6 	bl	cd20 <add_mod_n>
   12534:	9701      	str	r7, [sp, #4]
   12536:	9400      	str	r4, [sp, #0]
   12538:	4633      	mov	r3, r6
   1253a:	462a      	mov	r2, r5
   1253c:	a928      	add	r1, sp, #160	; 0xa0
   1253e:	4608      	mov	r0, r1
   12540:	f7fa fa46 	bl	c9d0 <mul_mont_n>
   12544:	9701      	str	r7, [sp, #4]
   12546:	9400      	str	r4, [sp, #0]
   12548:	4633      	mov	r3, r6
   1254a:	aa1c      	add	r2, sp, #112	; 0x70
   1254c:	f50b 71e4 	add.w	r1, fp, #456	; 0x1c8
   12550:	a840      	add	r0, sp, #256	; 0x100
   12552:	f7fa fa3d 	bl	c9d0 <mul_mont_n>
   12556:	9700      	str	r7, [sp, #0]
   12558:	4633      	mov	r3, r6
   1255a:	aa40      	add	r2, sp, #256	; 0x100
   1255c:	a928      	add	r1, sp, #160	; 0xa0
   1255e:	4608      	mov	r0, r1
   12560:	f7fa fbde 	bl	cd20 <add_mod_n>
   12564:	f105 0830 	add.w	r8, r5, #48	; 0x30
   12568:	9701      	str	r7, [sp, #4]
   1256a:	9400      	str	r4, [sp, #0]
   1256c:	4633      	mov	r3, r6
   1256e:	aa1c      	add	r2, sp, #112	; 0x70
   12570:	4611      	mov	r1, r2
   12572:	4640      	mov	r0, r8
   12574:	f7fa fa2c 	bl	c9d0 <mul_mont_n>
   12578:	9701      	str	r7, [sp, #4]
   1257a:	9400      	str	r4, [sp, #0]
   1257c:	4633      	mov	r3, r6
   1257e:	aa1c      	add	r2, sp, #112	; 0x70
   12580:	a928      	add	r1, sp, #160	; 0xa0
   12582:	a840      	add	r0, sp, #256	; 0x100
   12584:	f7fa fa24 	bl	c9d0 <mul_mont_n>
   12588:	9701      	str	r7, [sp, #4]
   1258a:	9400      	str	r4, [sp, #0]
   1258c:	4633      	mov	r3, r6
   1258e:	aa40      	add	r2, sp, #256	; 0x100
   12590:	4641      	mov	r1, r8
   12592:	4640      	mov	r0, r8
   12594:	f7fa fa1c 	bl	c9d0 <mul_mont_n>
   12598:	4641      	mov	r1, r8
   1259a:	4640      	mov	r0, r8
   1259c:	f7ff fef4 	bl	12388 <recip_sqrt_fp>
   125a0:	4681      	mov	r9, r0
   125a2:	9701      	str	r7, [sp, #4]
   125a4:	9400      	str	r4, [sp, #0]
   125a6:	4633      	mov	r3, r6
   125a8:	aa40      	add	r2, sp, #256	; 0x100
   125aa:	4641      	mov	r1, r8
   125ac:	4640      	mov	r0, r8
   125ae:	f7fa fa0f 	bl	c9d0 <mul_mont_n>
   125b2:	9701      	str	r7, [sp, #4]
   125b4:	9400      	str	r4, [sp, #0]
   125b6:	4633      	mov	r3, r6
   125b8:	f50b 7222 	add.w	r2, fp, #648	; 0x288
   125bc:	4641      	mov	r1, r8
   125be:	a810      	add	r0, sp, #64	; 0x40
   125c0:	f7fa fa06 	bl	c9d0 <mul_mont_n>
   125c4:	9701      	str	r7, [sp, #4]
   125c6:	9400      	str	r4, [sp, #0]
   125c8:	4633      	mov	r3, r6
   125ca:	aa4c      	add	r2, sp, #304	; 0x130
   125cc:	a910      	add	r1, sp, #64	; 0x40
   125ce:	4608      	mov	r0, r1
   125d0:	f7fa f9fe 	bl	c9d0 <mul_mont_n>
   125d4:	9701      	str	r7, [sp, #4]
   125d6:	9400      	str	r4, [sp, #0]
   125d8:	4633      	mov	r3, r6
   125da:	9a03      	ldr	r2, [sp, #12]
   125dc:	a910      	add	r1, sp, #64	; 0x40
   125de:	4608      	mov	r0, r1
   125e0:	f7fa f9f6 	bl	c9d0 <mul_mont_n>
   125e4:	f1c9 0400 	rsb	r4, r9, #0
   125e8:	1f2a      	subs	r2, r5, #4
   125ea:	a834      	add	r0, sp, #208	; 0xd0
   125ec:	f105 062c 	add.w	r6, r5, #44	; 0x2c
   125f0:	f850 1b04 	ldr.w	r1, [r0], #4
   125f4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   125f8:	404b      	eors	r3, r1
   125fa:	4023      	ands	r3, r4
   125fc:	404b      	eors	r3, r1
   125fe:	6013      	str	r3, [r2, #0]
   12600:	42b2      	cmp	r2, r6
   12602:	d1f5      	bne.n	125f0 <map_to_isogenous_E1+0x1e4>
   12604:	f105 022c 	add.w	r2, r5, #44	; 0x2c
   12608:	a810      	add	r0, sp, #64	; 0x40
   1260a:	f105 065c 	add.w	r6, r5, #92	; 0x5c
   1260e:	f850 1b04 	ldr.w	r1, [r0], #4
   12612:	f852 3f04 	ldr.w	r3, [r2, #4]!
   12616:	404b      	eors	r3, r1
   12618:	4023      	ands	r3, r4
   1261a:	404b      	eors	r3, r1
   1261c:	6013      	str	r3, [r2, #0]
   1261e:	4296      	cmp	r6, r2
   12620:	d1f5      	bne.n	1260e <map_to_isogenous_E1+0x202>
   12622:	4f1d      	ldr	r7, [pc, #116]	; (12698 <map_to_isogenous_E1+0x28c>)
   12624:	4c1b      	ldr	r4, [pc, #108]	; (12694 <map_to_isogenous_E1+0x288>)
   12626:	260c      	movs	r6, #12
   12628:	9600      	str	r6, [sp, #0]
   1262a:	463b      	mov	r3, r7
   1262c:	4622      	mov	r2, r4
   1262e:	9903      	ldr	r1, [sp, #12]
   12630:	a804      	add	r0, sp, #16
   12632:	f7fa fcff 	bl	d034 <from_mont_n>
   12636:	4632      	mov	r2, r6
   12638:	4621      	mov	r1, r4
   1263a:	a804      	add	r0, sp, #16
   1263c:	f7fa fe0f 	bl	d25e <sgn0_pty_mod_n>
   12640:	4681      	mov	r9, r0
   12642:	9600      	str	r6, [sp, #0]
   12644:	463b      	mov	r3, r7
   12646:	4622      	mov	r2, r4
   12648:	4641      	mov	r1, r8
   1264a:	a804      	add	r0, sp, #16
   1264c:	f7fa fcf2 	bl	d034 <from_mont_n>
   12650:	4632      	mov	r2, r6
   12652:	4621      	mov	r1, r4
   12654:	a804      	add	r0, sp, #16
   12656:	f7fa fe02 	bl	d25e <sgn0_pty_mod_n>
   1265a:	ea80 0209 	eor.w	r2, r0, r9
   1265e:	9600      	str	r6, [sp, #0]
   12660:	4623      	mov	r3, r4
   12662:	f002 0201 	and.w	r2, r2, #1
   12666:	4641      	mov	r1, r8
   12668:	4640      	mov	r0, r8
   1266a:	f7fb f9ed 	bl	da48 <cneg_mod_n>
   1266e:	9601      	str	r6, [sp, #4]
   12670:	9700      	str	r7, [sp, #0]
   12672:	4623      	mov	r3, r4
   12674:	4652      	mov	r2, sl
   12676:	4629      	mov	r1, r5
   12678:	4628      	mov	r0, r5
   1267a:	f7fa f9a9 	bl	c9d0 <mul_mont_n>
   1267e:	9601      	str	r6, [sp, #4]
   12680:	9700      	str	r7, [sp, #0]
   12682:	4623      	mov	r3, r4
   12684:	aa1c      	add	r2, sp, #112	; 0x70
   12686:	4641      	mov	r1, r8
   12688:	4640      	mov	r0, r8
   1268a:	f7fa f9a1 	bl	c9d0 <mul_mont_n>
   1268e:	b059      	add	sp, #356	; 0x164
   12690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12694:	00024108 	.word	0x00024108
   12698:	fffcfffd 	.word	0xfffcfffd
   1269c:	00025200 	.word	0x00025200
   126a0:	00025428 	.word	0x00025428

000126a4 <map_to_g1>:
   126a4:	b530      	push	{r4, r5, lr}
   126a6:	b0a5      	sub	sp, #148	; 0x94
   126a8:	4604      	mov	r4, r0
   126aa:	4615      	mov	r5, r2
   126ac:	4668      	mov	r0, sp
   126ae:	f7ff fead 	bl	1240c <map_to_isogenous_E1>
   126b2:	b14d      	cbz	r5, 126c8 <map_to_g1+0x24>
   126b4:	4629      	mov	r1, r5
   126b6:	4620      	mov	r0, r4
   126b8:	f7ff fea8 	bl	1240c <map_to_isogenous_E1>
   126bc:	4b16      	ldr	r3, [pc, #88]	; (12718 <map_to_g1+0x74>)
   126be:	4622      	mov	r2, r4
   126c0:	4669      	mov	r1, sp
   126c2:	4668      	mov	r0, sp
   126c4:	f7fc fc2a 	bl	ef1c <POINTonE1_dadd>
   126c8:	4669      	mov	r1, sp
   126ca:	4668      	mov	r0, sp
   126cc:	f7fc f839 	bl	e742 <isogeny_map_to_E1>
   126d0:	4669      	mov	r1, sp
   126d2:	4620      	mov	r0, r4
   126d4:	f7fb fbc6 	bl	de64 <POINTonE1_double>
   126d8:	466a      	mov	r2, sp
   126da:	4621      	mov	r1, r4
   126dc:	4620      	mov	r0, r4
   126de:	f7fb fec5 	bl	e46c <POINTonE1_add>
   126e2:	466a      	mov	r2, sp
   126e4:	2102      	movs	r1, #2
   126e6:	4620      	mov	r0, r4
   126e8:	f7fc ff8c 	bl	f604 <POINTonE1_dbl_n_add>
   126ec:	466a      	mov	r2, sp
   126ee:	2103      	movs	r1, #3
   126f0:	4620      	mov	r0, r4
   126f2:	f7fc ff87 	bl	f604 <POINTonE1_dbl_n_add>
   126f6:	466a      	mov	r2, sp
   126f8:	2109      	movs	r1, #9
   126fa:	4620      	mov	r0, r4
   126fc:	f7fc ff82 	bl	f604 <POINTonE1_dbl_n_add>
   12700:	466a      	mov	r2, sp
   12702:	2120      	movs	r1, #32
   12704:	4620      	mov	r0, r4
   12706:	f7fc ff7d 	bl	f604 <POINTonE1_dbl_n_add>
   1270a:	466a      	mov	r2, sp
   1270c:	2110      	movs	r1, #16
   1270e:	4620      	mov	r0, r4
   12710:	f7fc ff78 	bl	f604 <POINTonE1_dbl_n_add>
   12714:	b025      	add	sp, #148	; 0x94
   12716:	bd30      	pop	{r4, r5, pc}
   12718:	00025458 	.word	0x00025458

0001271c <blst_map_to_g1>:
   1271c:	b508      	push	{r3, lr}
   1271e:	f7ff ffc1 	bl	126a4 <map_to_g1>
   12722:	bd08      	pop	{r3, pc}

00012724 <sqr_mont_382x>:
   12724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12728:	b09b      	sub	sp, #108	; 0x6c
   1272a:	4607      	mov	r7, r0
   1272c:	4615      	mov	r5, r2
   1272e:	4698      	mov	r8, r3
   12730:	1f0b      	subs	r3, r1, #4
   12732:	ae0e      	add	r6, sp, #56	; 0x38
   12734:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   12738:	46b2      	mov	sl, r6
   1273a:	469e      	mov	lr, r3
   1273c:	f04f 0b00 	mov.w	fp, #0
   12740:	46d9      	mov	r9, fp
   12742:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   12746:	f8de 2030 	ldr.w	r2, [lr, #48]	; 0x30
   1274a:	eb14 0c02 	adds.w	ip, r4, r2
   1274e:	eb49 0209 	adc.w	r2, r9, r9
   12752:	eb1c 040b 	adds.w	r4, ip, fp
   12756:	f84a 4b04 	str.w	r4, [sl], #4
   1275a:	f142 0b00 	adc.w	fp, r2, #0
   1275e:	4586      	cmp	lr, r0
   12760:	d1ef      	bne.n	12742 <sqr_mont_382x+0x1e>
   12762:	f10d 0e08 	add.w	lr, sp, #8
   12766:	2200      	movs	r2, #0
   12768:	4694      	mov	ip, r2
   1276a:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1276e:	1aa4      	subs	r4, r4, r2
   12770:	eb6c 090c 	sbc.w	r9, ip, ip
   12774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   12776:	1aa2      	subs	r2, r4, r2
   12778:	f169 0400 	sbc.w	r4, r9, #0
   1277c:	f84e 2b04 	str.w	r2, [lr], #4
   12780:	f004 0201 	and.w	r2, r4, #1
   12784:	4283      	cmp	r3, r0
   12786:	d1f0      	bne.n	1276a <sqr_mont_382x+0x46>
   12788:	4254      	negs	r4, r2
   1278a:	230c      	movs	r3, #12
   1278c:	9301      	str	r3, [sp, #4]
   1278e:	f8cd 8000 	str.w	r8, [sp]
   12792:	462b      	mov	r3, r5
   12794:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12798:	f107 0030 	add.w	r0, r7, #48	; 0x30
   1279c:	f7fa fda1 	bl	d2e2 <mul_mont_nonred_n>
   127a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
   127a4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
   127a8:	2300      	movs	r3, #0
   127aa:	f852 1f04 	ldr.w	r1, [r2, #4]!
   127ae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   127b2:	6013      	str	r3, [r2, #0]
   127b4:	0fcb      	lsrs	r3, r1, #31
   127b6:	4282      	cmp	r2, r0
   127b8:	d1f7      	bne.n	127aa <sqr_mont_382x+0x86>
   127ba:	230c      	movs	r3, #12
   127bc:	9301      	str	r3, [sp, #4]
   127be:	f8cd 8000 	str.w	r8, [sp]
   127c2:	462b      	mov	r3, r5
   127c4:	aa02      	add	r2, sp, #8
   127c6:	a90e      	add	r1, sp, #56	; 0x38
   127c8:	4638      	mov	r0, r7
   127ca:	f7fa fd8a 	bl	d2e2 <mul_mont_nonred_n>
   127ce:	f1a7 0c04 	sub.w	ip, r7, #4
   127d2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   127d6:	4667      	mov	r7, ip
   127d8:	2100      	movs	r1, #0
   127da:	468e      	mov	lr, r1
   127dc:	f856 2b04 	ldr.w	r2, [r6], #4
   127e0:	f857 3f04 	ldr.w	r3, [r7, #4]!
   127e4:	1a5b      	subs	r3, r3, r1
   127e6:	eb6e 010e 	sbc.w	r1, lr, lr
   127ea:	4022      	ands	r2, r4
   127ec:	1a9b      	subs	r3, r3, r2
   127ee:	f161 0100 	sbc.w	r1, r1, #0
   127f2:	603b      	str	r3, [r7, #0]
   127f4:	f001 0101 	and.w	r1, r1, #1
   127f8:	42b8      	cmp	r0, r7
   127fa:	d1ef      	bne.n	127dc <sqr_mont_382x+0xb8>
   127fc:	4249      	negs	r1, r1
   127fe:	3d04      	subs	r5, #4
   12800:	2600      	movs	r6, #0
   12802:	4632      	mov	r2, r6
   12804:	f855 3f04 	ldr.w	r3, [r5, #4]!
   12808:	400b      	ands	r3, r1
   1280a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   1280e:	19a4      	adds	r4, r4, r6
   12810:	eb42 0602 	adc.w	r6, r2, r2
   12814:	191b      	adds	r3, r3, r4
   12816:	f8cc 3000 	str.w	r3, [ip]
   1281a:	f146 0600 	adc.w	r6, r6, #0
   1281e:	4584      	cmp	ip, r0
   12820:	d1f0      	bne.n	12804 <sqr_mont_382x+0xe0>
   12822:	b01b      	add	sp, #108	; 0x6c
   12824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012828 <ct_inverse_mod_383>:
   12828:	b510      	push	{r4, lr}
   1282a:	b082      	sub	sp, #8
   1282c:	240c      	movs	r4, #12
   1282e:	9400      	str	r4, [sp, #0]
   12830:	f7fc fff2 	bl	f818 <ct_inverse_mod_n>
   12834:	b002      	add	sp, #8
   12836:	bd10      	pop	{r4, pc}

00012838 <div_3_limbs>:
   12838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1283c:	4696      	mov	lr, r2
   1283e:	6802      	ldr	r2, [r0, #0]
   12840:	6840      	ldr	r0, [r0, #4]
   12842:	2620      	movs	r6, #32
   12844:	2400      	movs	r4, #0
   12846:	4625      	mov	r5, r4
   12848:	1a57      	subs	r7, r2, r1
   1284a:	1a53      	subs	r3, r2, r1
   1284c:	eb65 0c05 	sbc.w	ip, r5, r5
   12850:	f00c 0c01 	and.w	ip, ip, #1
   12854:	ebb0 080e 	subs.w	r8, r0, lr
   12858:	eb65 0305 	sbc.w	r3, r5, r5
   1285c:	ebb8 0c0c 	subs.w	ip, r8, ip
   12860:	f163 0300 	sbc.w	r3, r3, #0
   12864:	407a      	eors	r2, r7
   12866:	401a      	ands	r2, r3
   12868:	407a      	eors	r2, r7
   1286a:	ea8c 0000 	eor.w	r0, ip, r0
   1286e:	4018      	ands	r0, r3
   12870:	ea80 000c 	eor.w	r0, r0, ip
   12874:	f083 0301 	eor.w	r3, r3, #1
   12878:	f003 0301 	and.w	r3, r3, #1
   1287c:	ea43 0444 	orr.w	r4, r3, r4, lsl #1
   12880:	ea4f 73ce 	mov.w	r3, lr, lsl #31
   12884:	ea43 0151 	orr.w	r1, r3, r1, lsr #1
   12888:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
   1288c:	3e01      	subs	r6, #1
   1288e:	d1db      	bne.n	12848 <div_3_limbs+0x10>
   12890:	2300      	movs	r3, #0
   12892:	1a51      	subs	r1, r2, r1
   12894:	eb63 0203 	sbc.w	r2, r3, r3
   12898:	f002 0201 	and.w	r2, r2, #1
   1289c:	ebb0 000e 	subs.w	r0, r0, lr
   128a0:	eb63 0303 	sbc.w	r3, r3, r3
   128a4:	1a80      	subs	r0, r0, r2
   128a6:	f163 0300 	sbc.w	r3, r3, #0
   128aa:	43db      	mvns	r3, r3
   128ac:	f003 0301 	and.w	r3, r3, #1
   128b0:	0060      	lsls	r0, r4, #1
   128b2:	ea40 70e4 	orr.w	r0, r0, r4, asr #31
   128b6:	4318      	orrs	r0, r3
   128b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000128bc <div_by_zz>:
   128bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   128c0:	f100 0418 	add.w	r4, r0, #24
   128c4:	f100 0508 	add.w	r5, r0, #8
   128c8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 128f4 <div_by_zz+0x38>
   128cc:	4f0a      	ldr	r7, [pc, #40]	; (128f8 <div_by_zz+0x3c>)
   128ce:	4e0b      	ldr	r6, [pc, #44]	; (128fc <div_by_zz+0x40>)
   128d0:	4642      	mov	r2, r8
   128d2:	4639      	mov	r1, r7
   128d4:	4620      	mov	r0, r4
   128d6:	f7ff ffaf 	bl	12838 <div_3_limbs>
   128da:	4602      	mov	r2, r0
   128dc:	2304      	movs	r3, #4
   128de:	4631      	mov	r1, r6
   128e0:	f1a4 000c 	sub.w	r0, r4, #12
   128e4:	f7fa fe41 	bl	d56a <quot_rem_n>
   128e8:	3c04      	subs	r4, #4
   128ea:	42ac      	cmp	r4, r5
   128ec:	d1f0      	bne.n	128d0 <div_by_zz+0x14>
   128ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128f2:	bf00      	nop
   128f4:	ac45a401 	.word	0xac45a401
   128f8:	0001a402 	.word	0x0001a402
   128fc:	000254b8 	.word	0x000254b8

00012900 <POINTonE1_mult_glv>:
   12900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12904:	b0b3      	sub	sp, #204	; 0xcc
   12906:	4605      	mov	r5, r0
   12908:	460e      	mov	r6, r1
   1290a:	f102 0c20 	add.w	ip, r2, #32
   1290e:	2400      	movs	r4, #0
   12910:	43d0      	mvns	r0, r2
   12912:	eb00 030c 	add.w	r3, r0, ip
   12916:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   1291a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   1291e:	f023 0303 	bic.w	r3, r3, #3
   12922:	a932      	add	r1, sp, #200	; 0xc8
   12924:	440b      	add	r3, r1
   12926:	f843 4c20 	str.w	r4, [r3, #-32]
   1292a:	4562      	cmp	r2, ip
   1292c:	d1f1      	bne.n	12912 <POINTonE1_mult_glv+0x12>
   1292e:	ac2a      	add	r4, sp, #168	; 0xa8
   12930:	4620      	mov	r0, r4
   12932:	f7ff ffc3 	bl	128bc <div_by_zz>
   12936:	af06      	add	r7, sp, #24
   12938:	4631      	mov	r1, r6
   1293a:	4638      	mov	r0, r7
   1293c:	f7fa f921 	bl	cb82 <sigma>
   12940:	2101      	movs	r1, #1
   12942:	4638      	mov	r0, r7
   12944:	f7fb f8de 	bl	db04 <POINTonE1_cneg>
   12948:	9602      	str	r6, [sp, #8]
   1294a:	ab2e      	add	r3, sp, #184	; 0xb8
   1294c:	9304      	str	r3, [sp, #16]
   1294e:	9703      	str	r7, [sp, #12]
   12950:	9405      	str	r4, [sp, #20]
   12952:	2300      	movs	r3, #0
   12954:	9301      	str	r3, [sp, #4]
   12956:	2380      	movs	r3, #128	; 0x80
   12958:	9300      	str	r3, [sp, #0]
   1295a:	ab04      	add	r3, sp, #16
   1295c:	2202      	movs	r2, #2
   1295e:	a902      	add	r1, sp, #8
   12960:	4628      	mov	r0, r5
   12962:	f7fc fc87 	bl	f274 <POINTonE1s_mult_w4>
   12966:	2101      	movs	r1, #1
   12968:	4628      	mov	r0, r5
   1296a:	f7fb f8cb 	bl	db04 <POINTonE1_cneg>
   1296e:	3560      	adds	r5, #96	; 0x60
   12970:	4e12      	ldr	r6, [pc, #72]	; (129bc <POINTonE1_mult_glv+0xbc>)
   12972:	f106 0730 	add.w	r7, r6, #48	; 0x30
   12976:	f04f 090c 	mov.w	r9, #12
   1297a:	f8cd 9004 	str.w	r9, [sp, #4]
   1297e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 129c0 <POINTonE1_mult_glv+0xc0>
   12982:	f8cd 8000 	str.w	r8, [sp]
   12986:	4633      	mov	r3, r6
   12988:	463a      	mov	r2, r7
   1298a:	4629      	mov	r1, r5
   1298c:	4628      	mov	r0, r5
   1298e:	f7fa f81f 	bl	c9d0 <mul_mont_n>
   12992:	f8cd 9004 	str.w	r9, [sp, #4]
   12996:	f8cd 8000 	str.w	r8, [sp]
   1299a:	4633      	mov	r3, r6
   1299c:	463a      	mov	r2, r7
   1299e:	4629      	mov	r1, r5
   129a0:	4628      	mov	r0, r5
   129a2:	f7fa f815 	bl	c9d0 <mul_mont_n>
   129a6:	4620      	mov	r0, r4
   129a8:	aa32      	add	r2, sp, #200	; 0xc8
   129aa:	2300      	movs	r3, #0
   129ac:	f840 3b04 	str.w	r3, [r0], #4
   129b0:	4290      	cmp	r0, r2
   129b2:	d1fb      	bne.n	129ac <POINTonE1_mult_glv+0xac>
   129b4:	ab2a      	add	r3, sp, #168	; 0xa8
   129b6:	b033      	add	sp, #204	; 0xcc
   129b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129bc:	00024108 	.word	0x00024108
   129c0:	fffcfffd 	.word	0xfffcfffd

000129c4 <POINTonE1_sign>:
   129c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129c8:	b09a      	sub	sp, #104	; 0x68
   129ca:	4680      	mov	r8, r0
   129cc:	f7ff ff98 	bl	12900 <POINTonE1_mult_glv>
   129d0:	f108 0160 	add.w	r1, r8, #96	; 0x60
   129d4:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   129d8:	f108 058c 	add.w	r5, r8, #140	; 0x8c
   129dc:	4623      	mov	r3, r4
   129de:	2700      	movs	r7, #0
   129e0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   129e4:	4317      	orrs	r7, r2
   129e6:	42ab      	cmp	r3, r5
   129e8:	d1fa      	bne.n	129e0 <POINTonE1_sign+0x1c>
   129ea:	a80e      	add	r0, sp, #56	; 0x38
   129ec:	f7fe fb80 	bl	110f0 <flt_reciprocal_fp>
   129f0:	4e20      	ldr	r6, [pc, #128]	; (12a74 <POINTonE1_sign+0xb0>)
   129f2:	f04f 0a0c 	mov.w	sl, #12
   129f6:	f8cd a004 	str.w	sl, [sp, #4]
   129fa:	f8df 907c 	ldr.w	r9, [pc, #124]	; 12a78 <POINTonE1_sign+0xb4>
   129fe:	f8cd 9000 	str.w	r9, [sp]
   12a02:	4633      	mov	r3, r6
   12a04:	aa0e      	add	r2, sp, #56	; 0x38
   12a06:	4611      	mov	r1, r2
   12a08:	a802      	add	r0, sp, #8
   12a0a:	f7f9 ffe1 	bl	c9d0 <mul_mont_n>
   12a0e:	f8cd a004 	str.w	sl, [sp, #4]
   12a12:	f8cd 9000 	str.w	r9, [sp]
   12a16:	4633      	mov	r3, r6
   12a18:	aa02      	add	r2, sp, #8
   12a1a:	4641      	mov	r1, r8
   12a1c:	4640      	mov	r0, r8
   12a1e:	f7f9 ffd7 	bl	c9d0 <mul_mont_n>
   12a22:	f8cd a004 	str.w	sl, [sp, #4]
   12a26:	f8cd 9000 	str.w	r9, [sp]
   12a2a:	4633      	mov	r3, r6
   12a2c:	aa0e      	add	r2, sp, #56	; 0x38
   12a2e:	a902      	add	r1, sp, #8
   12a30:	4608      	mov	r0, r1
   12a32:	f7f9 ffcd 	bl	c9d0 <mul_mont_n>
   12a36:	f108 0030 	add.w	r0, r8, #48	; 0x30
   12a3a:	f8cd a004 	str.w	sl, [sp, #4]
   12a3e:	f8cd 9000 	str.w	r9, [sp]
   12a42:	4633      	mov	r3, r6
   12a44:	aa02      	add	r2, sp, #8
   12a46:	4601      	mov	r1, r0
   12a48:	f7f9 ffc2 	bl	c9d0 <mul_mont_n>
   12a4c:	1e7b      	subs	r3, r7, #1
   12a4e:	ea23 0707 	bic.w	r7, r3, r7
   12a52:	17ff      	asrs	r7, r7, #31
   12a54:	f606 534c 	addw	r3, r6, #3404	; 0xd4c
   12a58:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12a5c:	f854 2f04 	ldr.w	r2, [r4, #4]!
   12a60:	404a      	eors	r2, r1
   12a62:	403a      	ands	r2, r7
   12a64:	404a      	eors	r2, r1
   12a66:	6022      	str	r2, [r4, #0]
   12a68:	42ac      	cmp	r4, r5
   12a6a:	d1f5      	bne.n	12a58 <POINTonE1_sign+0x94>
   12a6c:	b01a      	add	sp, #104	; 0x68
   12a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12a72:	bf00      	nop
   12a74:	00024108 	.word	0x00024108
   12a78:	fffcfffd 	.word	0xfffcfffd

00012a7c <blst_sk_to_pk_in_g1>:
   12a7c:	b508      	push	{r3, lr}
   12a7e:	460a      	mov	r2, r1
   12a80:	4901      	ldr	r1, [pc, #4]	; (12a88 <blst_sk_to_pk_in_g1+0xc>)
   12a82:	f7ff ff9f 	bl	129c4 <POINTonE1_sign>
   12a86:	bd08      	pop	{r3, pc}
   12a88:	00024df8 	.word	0x00024df8

00012a8c <blst_sign_pk_in_g2>:
   12a8c:	b508      	push	{r3, lr}
   12a8e:	f7ff ff99 	bl	129c4 <POINTonE1_sign>
   12a92:	bd08      	pop	{r3, pc}

00012a94 <blst_sk_to_pk2_in_g1>:
   12a94:	b530      	push	{r4, r5, lr}
   12a96:	b0a5      	sub	sp, #148	; 0x94
   12a98:	4605      	mov	r5, r0
   12a9a:	460c      	mov	r4, r1
   12a9c:	4914      	ldr	r1, [pc, #80]	; (12af0 <blst_sk_to_pk2_in_g1+0x5c>)
   12a9e:	4668      	mov	r0, sp
   12aa0:	f7ff ff90 	bl	129c4 <POINTonE1_sign>
   12aa4:	b14c      	cbz	r4, 12aba <blst_sk_to_pk2_in_g1+0x26>
   12aa6:	f1ad 0304 	sub.w	r3, sp, #4
   12aaa:	1f21      	subs	r1, r4, #4
   12aac:	a817      	add	r0, sp, #92	; 0x5c
   12aae:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12ab2:	f841 2f04 	str.w	r2, [r1, #4]!
   12ab6:	4283      	cmp	r3, r0
   12ab8:	d1f9      	bne.n	12aae <blst_sk_to_pk2_in_g1+0x1a>
   12aba:	b1bd      	cbz	r5, 12aec <blst_sk_to_pk2_in_g1+0x58>
   12abc:	4669      	mov	r1, sp
   12abe:	4628      	mov	r0, r5
   12ac0:	f7fe fef0 	bl	118a4 <POINTonE1_Serialize_BE>
   12ac4:	0100      	lsls	r0, r0, #4
   12ac6:	f000 0220 	and.w	r2, r0, #32
   12aca:	7828      	ldrb	r0, [r5, #0]
   12acc:	4310      	orrs	r0, r2
   12ace:	ab17      	add	r3, sp, #92	; 0x5c
   12ad0:	ac23      	add	r4, sp, #140	; 0x8c
   12ad2:	2200      	movs	r2, #0
   12ad4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12ad8:	430a      	orrs	r2, r1
   12ada:	42a3      	cmp	r3, r4
   12adc:	d1fa      	bne.n	12ad4 <blst_sk_to_pk2_in_g1+0x40>
   12ade:	1e53      	subs	r3, r2, #1
   12ae0:	ea23 0202 	bic.w	r2, r3, r2
   12ae4:	0fd2      	lsrs	r2, r2, #31
   12ae6:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   12aea:	702a      	strb	r2, [r5, #0]
   12aec:	b025      	add	sp, #148	; 0x94
   12aee:	bd30      	pop	{r4, r5, pc}
   12af0:	00024df8 	.word	0x00024df8

00012af4 <blst_sign_pk2_in_g2>:
   12af4:	b530      	push	{r4, r5, lr}
   12af6:	b0a5      	sub	sp, #148	; 0x94
   12af8:	4605      	mov	r5, r0
   12afa:	460c      	mov	r4, r1
   12afc:	4611      	mov	r1, r2
   12afe:	461a      	mov	r2, r3
   12b00:	4668      	mov	r0, sp
   12b02:	f7ff ff5f 	bl	129c4 <POINTonE1_sign>
   12b06:	b14c      	cbz	r4, 12b1c <blst_sign_pk2_in_g2+0x28>
   12b08:	f1ad 0304 	sub.w	r3, sp, #4
   12b0c:	1f21      	subs	r1, r4, #4
   12b0e:	a817      	add	r0, sp, #92	; 0x5c
   12b10:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12b14:	f841 2f04 	str.w	r2, [r1, #4]!
   12b18:	4283      	cmp	r3, r0
   12b1a:	d1f9      	bne.n	12b10 <blst_sign_pk2_in_g2+0x1c>
   12b1c:	b1bd      	cbz	r5, 12b4e <blst_sign_pk2_in_g2+0x5a>
   12b1e:	4669      	mov	r1, sp
   12b20:	4628      	mov	r0, r5
   12b22:	f7fe febf 	bl	118a4 <POINTonE1_Serialize_BE>
   12b26:	0100      	lsls	r0, r0, #4
   12b28:	f000 0220 	and.w	r2, r0, #32
   12b2c:	7828      	ldrb	r0, [r5, #0]
   12b2e:	4310      	orrs	r0, r2
   12b30:	ab17      	add	r3, sp, #92	; 0x5c
   12b32:	ac23      	add	r4, sp, #140	; 0x8c
   12b34:	2200      	movs	r2, #0
   12b36:	f853 1f04 	ldr.w	r1, [r3, #4]!
   12b3a:	430a      	orrs	r2, r1
   12b3c:	42a3      	cmp	r3, r4
   12b3e:	d1fa      	bne.n	12b36 <blst_sign_pk2_in_g2+0x42>
   12b40:	1e53      	subs	r3, r2, #1
   12b42:	ea23 0202 	bic.w	r2, r3, r2
   12b46:	0fd2      	lsrs	r2, r2, #31
   12b48:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   12b4c:	702a      	strb	r2, [r5, #0]
   12b4e:	b025      	add	sp, #148	; 0x94
   12b50:	bd30      	pop	{r4, r5, pc}

00012b52 <blst_p1_mult>:
   12b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b56:	b089      	sub	sp, #36	; 0x24
   12b58:	4607      	mov	r7, r0
   12b5a:	4688      	mov	r8, r1
   12b5c:	4615      	mov	r5, r2
   12b5e:	461e      	mov	r6, r3
   12b60:	2bbf      	cmp	r3, #191	; 0xbf
   12b62:	d934      	bls.n	12bce <blst_p1_mult+0x7c>
   12b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   12b68:	d83b      	bhi.n	12be2 <blst_p1_mult+0x90>
   12b6a:	1dd8      	adds	r0, r3, #7
   12b6c:	08c0      	lsrs	r0, r0, #3
   12b6e:	f10d 33ff 	add.w	r3, sp, #4294967295
   12b72:	466c      	mov	r4, sp
   12b74:	f10d 0e1f 	add.w	lr, sp, #31
   12b78:	f04f 39ff 	mov.w	r9, #4294967295
   12b7c:	2100      	movs	r1, #0
   12b7e:	469c      	mov	ip, r3
   12b80:	5c6a      	ldrb	r2, [r5, r1]
   12b82:	ea02 0209 	and.w	r2, r2, r9
   12b86:	f803 2f01 	strb.w	r2, [r3, #1]!
   12b8a:	f10c 0c02 	add.w	ip, ip, #2
   12b8e:	ebac 0c04 	sub.w	ip, ip, r4
   12b92:	ebac 0c00 	sub.w	ip, ip, r0
   12b96:	ea4f 79ec 	mov.w	r9, ip, asr #31
   12b9a:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   12b9e:	4573      	cmp	r3, lr
   12ba0:	d1ed      	bne.n	12b7e <blst_p1_mult+0x2c>
   12ba2:	2208      	movs	r2, #8
   12ba4:	4910      	ldr	r1, [pc, #64]	; (12be8 <blst_p1_mult+0x96>)
   12ba6:	4668      	mov	r0, sp
   12ba8:	f7f9 fd9d 	bl	c6e6 <check_mod_n>
   12bac:	b190      	cbz	r0, 12bd4 <blst_p1_mult+0x82>
   12bae:	466a      	mov	r2, sp
   12bb0:	4641      	mov	r1, r8
   12bb2:	4638      	mov	r0, r7
   12bb4:	f7ff fea4 	bl	12900 <POINTonE1_mult_glv>
   12bb8:	f104 0220 	add.w	r2, r4, #32
   12bbc:	2300      	movs	r3, #0
   12bbe:	f844 3b04 	str.w	r3, [r4], #4
   12bc2:	42a2      	cmp	r2, r4
   12bc4:	d1fb      	bne.n	12bbe <blst_p1_mult+0x6c>
   12bc6:	466b      	mov	r3, sp
   12bc8:	b009      	add	sp, #36	; 0x24
   12bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12bce:	f7fc fc16 	bl	f3fe <POINTonE1_mult_w4>
   12bd2:	e7f9      	b.n	12bc8 <blst_p1_mult+0x76>
   12bd4:	4633      	mov	r3, r6
   12bd6:	462a      	mov	r2, r5
   12bd8:	4641      	mov	r1, r8
   12bda:	4638      	mov	r0, r7
   12bdc:	f7fc fc7d 	bl	f4da <POINTonE1_mult_w5>
   12be0:	e7ea      	b.n	12bb8 <blst_p1_mult+0x66>
   12be2:	f7fc fc7a 	bl	f4da <POINTonE1_mult_w5>
   12be6:	e7ef      	b.n	12bc8 <blst_p1_mult+0x76>
   12be8:	000254c8 	.word	0x000254c8

00012bec <div_by_z>:
   12bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bee:	4604      	mov	r4, r0
   12bf0:	4f0d      	ldr	r7, [pc, #52]	; (12c28 <div_by_z+0x3c>)
   12bf2:	463a      	mov	r2, r7
   12bf4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   12bf8:	3008      	adds	r0, #8
   12bfa:	f7ff fe1d 	bl	12838 <div_3_limbs>
   12bfe:	4602      	mov	r2, r0
   12c00:	1d26      	adds	r6, r4, #4
   12c02:	4d0a      	ldr	r5, [pc, #40]	; (12c2c <div_by_z+0x40>)
   12c04:	2302      	movs	r3, #2
   12c06:	4629      	mov	r1, r5
   12c08:	4630      	mov	r0, r6
   12c0a:	f7fa fcae 	bl	d56a <quot_rem_n>
   12c0e:	463a      	mov	r2, r7
   12c10:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   12c14:	4630      	mov	r0, r6
   12c16:	f7ff fe0f 	bl	12838 <div_3_limbs>
   12c1a:	4602      	mov	r2, r0
   12c1c:	2302      	movs	r3, #2
   12c1e:	4629      	mov	r1, r5
   12c20:	4620      	mov	r0, r4
   12c22:	f7fa fca2 	bl	d56a <quot_rem_n>
   12c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c28:	d2010000 	.word	0xd2010000
   12c2c:	000254e8 	.word	0x000254e8

00012c30 <quot_rem_128>:
   12c30:	b508      	push	{r3, lr}
   12c32:	2304      	movs	r3, #4
   12c34:	f7fa fc99 	bl	d56a <quot_rem_n>
   12c38:	bd08      	pop	{r3, pc}

00012c3a <quot_rem_64>:
   12c3a:	b508      	push	{r3, lr}
   12c3c:	2302      	movs	r3, #2
   12c3e:	f7fa fc94 	bl	d56a <quot_rem_n>
   12c42:	bd08      	pop	{r3, pc}

00012c44 <blst_sha256_block_data_order>:
   12c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c48:	b099      	sub	sp, #100	; 0x64
   12c4a:	4603      	mov	r3, r0
   12c4c:	9007      	str	r0, [sp, #28]
   12c4e:	9105      	str	r1, [sp, #20]
   12c50:	6800      	ldr	r0, [r0, #0]
   12c52:	685f      	ldr	r7, [r3, #4]
   12c54:	f8d3 b008 	ldr.w	fp, [r3, #8]
   12c58:	68dd      	ldr	r5, [r3, #12]
   12c5a:	691c      	ldr	r4, [r3, #16]
   12c5c:	695e      	ldr	r6, [r3, #20]
   12c5e:	6999      	ldr	r1, [r3, #24]
   12c60:	9101      	str	r1, [sp, #4]
   12c62:	69d9      	ldr	r1, [r3, #28]
   12c64:	1e53      	subs	r3, r2, #1
   12c66:	9306      	str	r3, [sp, #24]
   12c68:	2a00      	cmp	r2, #0
   12c6a:	f000 80f0 	beq.w	12e4e <blst_sha256_block_data_order+0x20a>
   12c6e:	46b0      	mov	r8, r6
   12c70:	462e      	mov	r6, r5
   12c72:	465d      	mov	r5, fp
   12c74:	e0e2      	b.n	12e3c <blst_sha256_block_data_order+0x1f8>
   12c76:	f8cd 8004 	str.w	r8, [sp, #4]
   12c7a:	46a0      	mov	r8, r4
   12c7c:	4674      	mov	r4, lr
   12c7e:	463d      	mov	r5, r7
   12c80:	4607      	mov	r7, r0
   12c82:	4610      	mov	r0, r2
   12c84:	f81c 3c03 	ldrb.w	r3, [ip, #-3]
   12c88:	f81c 2c04 	ldrb.w	r2, [ip, #-4]
   12c8c:	0612      	lsls	r2, r2, #24
   12c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   12c92:	f81c 3c01 	ldrb.w	r3, [ip, #-1]
   12c96:	431a      	orrs	r2, r3
   12c98:	f81c 3c02 	ldrb.w	r3, [ip, #-2]
   12c9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12ca0:	f849 2b04 	str.w	r2, [r9], #4
   12ca4:	ea4f 23f4 	mov.w	r3, r4, ror #11
   12ca8:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
   12cac:	ea83 6374 	eor.w	r3, r3, r4, ror #25
   12cb0:	f8dd e004 	ldr.w	lr, [sp, #4]
   12cb4:	ea2e 0e04 	bic.w	lr, lr, r4
   12cb8:	ea04 0b08 	and.w	fp, r4, r8
   12cbc:	ea8e 0e0b 	eor.w	lr, lr, fp
   12cc0:	4473      	add	r3, lr
   12cc2:	f85a ef04 	ldr.w	lr, [sl, #4]!
   12cc6:	4473      	add	r3, lr
   12cc8:	441a      	add	r2, r3
   12cca:	4411      	add	r1, r2
   12ccc:	ea4f 3370 	mov.w	r3, r0, ror #13
   12cd0:	ea83 03b0 	eor.w	r3, r3, r0, ror #2
   12cd4:	ea83 53b0 	eor.w	r3, r3, r0, ror #22
   12cd8:	ea87 0205 	eor.w	r2, r7, r5
   12cdc:	4002      	ands	r2, r0
   12cde:	ea07 0e05 	and.w	lr, r7, r5
   12ce2:	ea82 020e 	eor.w	r2, r2, lr
   12ce6:	441a      	add	r2, r3
   12ce8:	eb01 0e06 	add.w	lr, r1, r6
   12cec:	440a      	add	r2, r1
   12cee:	f10c 0c04 	add.w	ip, ip, #4
   12cf2:	462e      	mov	r6, r5
   12cf4:	9901      	ldr	r1, [sp, #4]
   12cf6:	ab18      	add	r3, sp, #96	; 0x60
   12cf8:	454b      	cmp	r3, r9
   12cfa:	d1bc      	bne.n	12c76 <blst_sha256_block_data_order+0x32>
   12cfc:	4673      	mov	r3, lr
   12cfe:	9905      	ldr	r1, [sp, #20]
   12d00:	3140      	adds	r1, #64	; 0x40
   12d02:	9105      	str	r1, [sp, #20]
   12d04:	4953      	ldr	r1, [pc, #332]	; (12e54 <blst_sha256_block_data_order+0x210>)
   12d06:	f501 7b4b 	add.w	fp, r1, #812	; 0x32c
   12d0a:	f8cd 800c 	str.w	r8, [sp, #12]
   12d0e:	9402      	str	r4, [sp, #8]
   12d10:	4680      	mov	r8, r0
   12d12:	f04f 0c10 	mov.w	ip, #16
   12d16:	f8cd b010 	str.w	fp, [sp, #16]
   12d1a:	46a9      	mov	r9, r5
   12d1c:	f8dd a004 	ldr.w	sl, [sp, #4]
   12d20:	46be      	mov	lr, r7
   12d22:	e006      	b.n	12d32 <blst_sha256_block_data_order+0xee>
   12d24:	9802      	ldr	r0, [sp, #8]
   12d26:	9003      	str	r0, [sp, #12]
   12d28:	9302      	str	r3, [sp, #8]
   12d2a:	4623      	mov	r3, r4
   12d2c:	46c6      	mov	lr, r8
   12d2e:	4690      	mov	r8, r2
   12d30:	460a      	mov	r2, r1
   12d32:	4665      	mov	r5, ip
   12d34:	f10c 0c01 	add.w	ip, ip, #1
   12d38:	f00c 010f 	and.w	r1, ip, #15
   12d3c:	a818      	add	r0, sp, #96	; 0x60
   12d3e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   12d42:	f851 6c40 	ldr.w	r6, [r1, #-64]
   12d46:	ea4f 41b6 	mov.w	r1, r6, ror #18
   12d4a:	ea81 11f6 	eor.w	r1, r1, r6, ror #7
   12d4e:	f105 000e 	add.w	r0, r5, #14
   12d52:	f000 000f 	and.w	r0, r0, #15
   12d56:	ac18      	add	r4, sp, #96	; 0x60
   12d58:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   12d5c:	f850 7c40 	ldr.w	r7, [r0, #-64]
   12d60:	ea4f 40f7 	mov.w	r0, r7, ror #19
   12d64:	ea80 4077 	eor.w	r0, r0, r7, ror #17
   12d68:	f005 040f 	and.w	r4, r5, #15
   12d6c:	3509      	adds	r5, #9
   12d6e:	f005 050f 	and.w	r5, r5, #15
   12d72:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   12d76:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
   12d7a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
   12d7e:	f855 5c40 	ldr.w	r5, [r5, #-64]
   12d82:	f854 bc40 	ldr.w	fp, [r4, #-64]
   12d86:	445d      	add	r5, fp
   12d88:	ea81 01d6 	eor.w	r1, r1, r6, lsr #3
   12d8c:	440d      	add	r5, r1
   12d8e:	ea80 2197 	eor.w	r1, r0, r7, lsr #10
   12d92:	4429      	add	r1, r5
   12d94:	f844 1c40 	str.w	r1, [r4, #-64]
   12d98:	ea4f 25f3 	mov.w	r5, r3, ror #11
   12d9c:	ea85 15b3 	eor.w	r5, r5, r3, ror #6
   12da0:	ea85 6073 	eor.w	r0, r5, r3, ror #25
   12da4:	9e03      	ldr	r6, [sp, #12]
   12da6:	ea26 0503 	bic.w	r5, r6, r3
   12daa:	9c02      	ldr	r4, [sp, #8]
   12dac:	401c      	ands	r4, r3
   12dae:	4065      	eors	r5, r4
   12db0:	4405      	add	r5, r0
   12db2:	9c04      	ldr	r4, [sp, #16]
   12db4:	f854 0f04 	ldr.w	r0, [r4, #4]!
   12db8:	9404      	str	r4, [sp, #16]
   12dba:	4405      	add	r5, r0
   12dbc:	440d      	add	r5, r1
   12dbe:	44aa      	add	sl, r5
   12dc0:	ea4f 3172 	mov.w	r1, r2, ror #13
   12dc4:	ea81 01b2 	eor.w	r1, r1, r2, ror #2
   12dc8:	ea81 50b2 	eor.w	r0, r1, r2, ror #22
   12dcc:	ea88 010e 	eor.w	r1, r8, lr
   12dd0:	4011      	ands	r1, r2
   12dd2:	ea08 040e 	and.w	r4, r8, lr
   12dd6:	4061      	eors	r1, r4
   12dd8:	4401      	add	r1, r0
   12dda:	eb0a 0409 	add.w	r4, sl, r9
   12dde:	4451      	add	r1, sl
   12de0:	46f1      	mov	r9, lr
   12de2:	46b2      	mov	sl, r6
   12de4:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   12de8:	d19c      	bne.n	12d24 <blst_sha256_block_data_order+0xe0>
   12dea:	4676      	mov	r6, lr
   12dec:	9d07      	ldr	r5, [sp, #28]
   12dee:	6828      	ldr	r0, [r5, #0]
   12df0:	4408      	add	r0, r1
   12df2:	4629      	mov	r1, r5
   12df4:	6028      	str	r0, [r5, #0]
   12df6:	686f      	ldr	r7, [r5, #4]
   12df8:	4417      	add	r7, r2
   12dfa:	606f      	str	r7, [r5, #4]
   12dfc:	68ad      	ldr	r5, [r5, #8]
   12dfe:	4445      	add	r5, r8
   12e00:	608d      	str	r5, [r1, #8]
   12e02:	68ca      	ldr	r2, [r1, #12]
   12e04:	4416      	add	r6, r2
   12e06:	60ce      	str	r6, [r1, #12]
   12e08:	690a      	ldr	r2, [r1, #16]
   12e0a:	4414      	add	r4, r2
   12e0c:	610c      	str	r4, [r1, #16]
   12e0e:	694a      	ldr	r2, [r1, #20]
   12e10:	eb03 0802 	add.w	r8, r3, r2
   12e14:	460a      	mov	r2, r1
   12e16:	f8c1 8014 	str.w	r8, [r1, #20]
   12e1a:	698b      	ldr	r3, [r1, #24]
   12e1c:	9902      	ldr	r1, [sp, #8]
   12e1e:	4419      	add	r1, r3
   12e20:	9101      	str	r1, [sp, #4]
   12e22:	4613      	mov	r3, r2
   12e24:	6191      	str	r1, [r2, #24]
   12e26:	69d1      	ldr	r1, [r2, #28]
   12e28:	4652      	mov	r2, sl
   12e2a:	440a      	add	r2, r1
   12e2c:	4611      	mov	r1, r2
   12e2e:	61da      	str	r2, [r3, #28]
   12e30:	9b06      	ldr	r3, [sp, #24]
   12e32:	3b01      	subs	r3, #1
   12e34:	9306      	str	r3, [sp, #24]
   12e36:	f1b3 3fff 	cmp.w	r3, #4294967295
   12e3a:	d008      	beq.n	12e4e <blst_sha256_block_data_order+0x20a>
   12e3c:	9b05      	ldr	r3, [sp, #20]
   12e3e:	f103 0c04 	add.w	ip, r3, #4
   12e42:	f10d 0920 	add.w	r9, sp, #32
   12e46:	4b03      	ldr	r3, [pc, #12]	; (12e54 <blst_sha256_block_data_order+0x210>)
   12e48:	f503 7a3b 	add.w	sl, r3, #748	; 0x2ec
   12e4c:	e71a      	b.n	12c84 <blst_sha256_block_data_order+0x40>
   12e4e:	b019      	add	sp, #100	; 0x64
   12e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e54:	00025200 	.word	0x00025200

00012e58 <blst_sha256_hcopy>:
   12e58:	1f0b      	subs	r3, r1, #4
   12e5a:	3804      	subs	r0, #4
   12e5c:	311c      	adds	r1, #28
   12e5e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   12e62:	f840 2f04 	str.w	r2, [r0, #4]!
   12e66:	428b      	cmp	r3, r1
   12e68:	d1f9      	bne.n	12e5e <blst_sha256_hcopy+0x6>
   12e6a:	4770      	bx	lr

00012e6c <blst_sha256_emit>:
   12e6c:	1d03      	adds	r3, r0, #4
   12e6e:	3904      	subs	r1, #4
   12e70:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   12e74:	f851 2f04 	ldr.w	r2, [r1, #4]!
   12e78:	0e10      	lsrs	r0, r2, #24
   12e7a:	f803 0c04 	strb.w	r0, [r3, #-4]
   12e7e:	0c10      	lsrs	r0, r2, #16
   12e80:	f803 0c03 	strb.w	r0, [r3, #-3]
   12e84:	0a10      	lsrs	r0, r2, #8
   12e86:	f803 0c02 	strb.w	r0, [r3, #-2]
   12e8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   12e8e:	3304      	adds	r3, #4
   12e90:	4563      	cmp	r3, ip
   12e92:	d1ef      	bne.n	12e74 <blst_sha256_emit+0x8>
   12e94:	4770      	bx	lr

00012e96 <sha256_final>:
   12e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e9a:	4607      	mov	r7, r0
   12e9c:	460c      	mov	r4, r1
   12e9e:	6a0e      	ldr	r6, [r1, #32]
   12ea0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   12ea2:	00ed      	lsls	r5, r5, #3
   12ea4:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
   12ea8:	00f6      	lsls	r6, r6, #3
   12eaa:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   12eac:	18ca      	adds	r2, r1, r3
   12eae:	2180      	movs	r1, #128	; 0x80
   12eb0:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
   12eb4:	3301      	adds	r3, #1
   12eb6:	2b38      	cmp	r3, #56	; 0x38
   12eb8:	d821      	bhi.n	12efe <sha256_final+0x68>
   12eba:	0e2b      	lsrs	r3, r5, #24
   12ebc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   12ec0:	0c2b      	lsrs	r3, r5, #16
   12ec2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   12ec6:	0a2b      	lsrs	r3, r5, #8
   12ec8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   12ecc:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
   12ed0:	0e33      	lsrs	r3, r6, #24
   12ed2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
   12ed6:	0c33      	lsrs	r3, r6, #16
   12ed8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
   12edc:	0a33      	lsrs	r3, r6, #8
   12ede:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
   12ee2:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
   12ee6:	2201      	movs	r2, #1
   12ee8:	f104 0128 	add.w	r1, r4, #40	; 0x28
   12eec:	4620      	mov	r0, r4
   12eee:	f7ff fea9 	bl	12c44 <blst_sha256_block_data_order>
   12ef2:	4621      	mov	r1, r4
   12ef4:	4638      	mov	r0, r7
   12ef6:	f7ff ffb9 	bl	12e6c <blst_sha256_emit>
   12efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12efe:	f104 0828 	add.w	r8, r4, #40	; 0x28
   12f02:	2201      	movs	r2, #1
   12f04:	4641      	mov	r1, r8
   12f06:	4620      	mov	r0, r4
   12f08:	f7ff fe9c 	bl	12c44 <blst_sha256_block_data_order>
   12f0c:	4643      	mov	r3, r8
   12f0e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   12f12:	2200      	movs	r2, #0
   12f14:	f843 2b04 	str.w	r2, [r3], #4
   12f18:	428b      	cmp	r3, r1
   12f1a:	d1fb      	bne.n	12f14 <sha256_final+0x7e>
   12f1c:	e7cd      	b.n	12eba <sha256_final+0x24>

00012f1e <HMAC_final>:
   12f1e:	b570      	push	{r4, r5, r6, lr}
   12f20:	4605      	mov	r5, r0
   12f22:	460c      	mov	r4, r1
   12f24:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
   12f28:	4630      	mov	r0, r6
   12f2a:	f7ff ffb4 	bl	12e96 <sha256_final>
   12f2e:	f104 0190 	add.w	r1, r4, #144	; 0x90
   12f32:	4620      	mov	r0, r4
   12f34:	f7ff ff90 	bl	12e58 <blst_sha256_hcopy>
   12f38:	2201      	movs	r2, #1
   12f3a:	4631      	mov	r1, r6
   12f3c:	4620      	mov	r0, r4
   12f3e:	f7ff fe81 	bl	12c44 <blst_sha256_block_data_order>
   12f42:	4621      	mov	r1, r4
   12f44:	4628      	mov	r0, r5
   12f46:	f7ff ff91 	bl	12e6c <blst_sha256_emit>
   12f4a:	bd70      	pop	{r4, r5, r6, pc}

00012f4c <blst_sha256_bcopy>:
   12f4c:	b152      	cbz	r2, 12f64 <blst_sha256_bcopy+0x18>
   12f4e:	1e4b      	subs	r3, r1, #1
   12f50:	3801      	subs	r0, #1
   12f52:	f102 3cff 	add.w	ip, r2, #4294967295
   12f56:	4461      	add	r1, ip
   12f58:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12f5c:	f800 2f01 	strb.w	r2, [r0, #1]!
   12f60:	428b      	cmp	r3, r1
   12f62:	d1f9      	bne.n	12f58 <blst_sha256_bcopy+0xc>
   12f64:	4770      	bx	lr

00012f66 <sha256_update>:
   12f66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f6a:	4605      	mov	r5, r0
   12f6c:	460e      	mov	r6, r1
   12f6e:	4614      	mov	r4, r2
   12f70:	6a03      	ldr	r3, [r0, #32]
   12f72:	6a42      	ldr	r2, [r0, #36]	; 0x24
   12f74:	191b      	adds	r3, r3, r4
   12f76:	f142 0200 	adc.w	r2, r2, #0
   12f7a:	6203      	str	r3, [r0, #32]
   12f7c:	6242      	str	r2, [r0, #36]	; 0x24
   12f7e:	6e87      	ldr	r7, [r0, #104]	; 0x68
   12f80:	b1ec      	cbz	r4, 12fbe <sha256_update+0x58>
   12f82:	b1e7      	cbz	r7, 12fbe <sha256_update+0x58>
   12f84:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
   12f88:	454c      	cmp	r4, r9
   12f8a:	d31d      	bcc.n	12fc8 <sha256_update+0x62>
   12f8c:	f100 0828 	add.w	r8, r0, #40	; 0x28
   12f90:	464a      	mov	r2, r9
   12f92:	eb08 0007 	add.w	r0, r8, r7
   12f96:	f7ff ffd9 	bl	12f4c <blst_sha256_bcopy>
   12f9a:	444e      	add	r6, r9
   12f9c:	3c40      	subs	r4, #64	; 0x40
   12f9e:	443c      	add	r4, r7
   12fa0:	2201      	movs	r2, #1
   12fa2:	4641      	mov	r1, r8
   12fa4:	4628      	mov	r0, r5
   12fa6:	f7ff fe4d 	bl	12c44 <blst_sha256_block_data_order>
   12faa:	4643      	mov	r3, r8
   12fac:	f105 0168 	add.w	r1, r5, #104	; 0x68
   12fb0:	2200      	movs	r2, #0
   12fb2:	f843 2b04 	str.w	r2, [r3], #4
   12fb6:	428b      	cmp	r3, r1
   12fb8:	d1fb      	bne.n	12fb2 <sha256_update+0x4c>
   12fba:	2300      	movs	r3, #0
   12fbc:	66ab      	str	r3, [r5, #104]	; 0x68
   12fbe:	2c3f      	cmp	r4, #63	; 0x3f
   12fc0:	d80b      	bhi.n	12fda <sha256_update+0x74>
   12fc2:	b9a4      	cbnz	r4, 12fee <sha256_update+0x88>
   12fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12fc8:	3028      	adds	r0, #40	; 0x28
   12fca:	4622      	mov	r2, r4
   12fcc:	4438      	add	r0, r7
   12fce:	f7ff ffbd 	bl	12f4c <blst_sha256_bcopy>
   12fd2:	6eab      	ldr	r3, [r5, #104]	; 0x68
   12fd4:	4423      	add	r3, r4
   12fd6:	66ab      	str	r3, [r5, #104]	; 0x68
   12fd8:	e7f4      	b.n	12fc4 <sha256_update+0x5e>
   12fda:	09a2      	lsrs	r2, r4, #6
   12fdc:	4631      	mov	r1, r6
   12fde:	4628      	mov	r0, r5
   12fe0:	f7ff fe30 	bl	12c44 <blst_sha256_block_data_order>
   12fe4:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
   12fe8:	441e      	add	r6, r3
   12fea:	1ae4      	subs	r4, r4, r3
   12fec:	e7e9      	b.n	12fc2 <sha256_update+0x5c>
   12fee:	66ac      	str	r4, [r5, #104]	; 0x68
   12ff0:	4622      	mov	r2, r4
   12ff2:	4631      	mov	r1, r6
   12ff4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   12ff8:	f7ff ffa8 	bl	12f4c <blst_sha256_bcopy>
   12ffc:	e7e2      	b.n	12fc4 <sha256_update+0x5e>

00012ffe <hash_to_field>:
   12ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13002:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   13006:	af02      	add	r7, sp, #8
   13008:	4605      	mov	r5, r0
   1300a:	6079      	str	r1, [r7, #4]
   1300c:	f8d7 6268 	ldr.w	r6, [r7, #616]	; 0x268
   13010:	f8d7 826c 	ldr.w	r8, [r7, #620]	; 0x26c
   13014:	018c      	lsls	r4, r1, #6
   13016:	4668      	mov	r0, sp
   13018:	eba0 1181 	sub.w	r1, r0, r1, lsl #6
   1301c:	468d      	mov	sp, r1
   1301e:	f10d 0b08 	add.w	fp, sp, #8
   13022:	f1b2 0900 	subs.w	r9, r2, #0
   13026:	bf08      	it	eq
   13028:	2300      	moveq	r3, #0
   1302a:	603b      	str	r3, [r7, #0]
   1302c:	2e00      	cmp	r6, #0
   1302e:	f000 817a 	beq.w	13326 <hash_to_field+0x328>
   13032:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   13036:	f200 815b 	bhi.w	132f0 <hash_to_field+0x2f2>
   1303a:	f108 0a6a 	add.w	sl, r8, #106	; 0x6a
   1303e:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
   13042:	f507 730e 	add.w	r3, r7, #568	; 0x238
   13046:	eb03 0c00 	add.w	ip, r3, r0
   1304a:	f5ac 7cf0 	sub.w	ip, ip, #480	; 0x1e0
   1304e:	4663      	mov	r3, ip
   13050:	f10c 0140 	add.w	r1, ip, #64	; 0x40
   13054:	2200      	movs	r2, #0
   13056:	f843 2b04 	str.w	r2, [r3], #4
   1305a:	428b      	cmp	r3, r1
   1305c:	d1fb      	bne.n	13056 <hash_to_field+0x58>
   1305e:	f1b8 0f00 	cmp.w	r8, #0
   13062:	f000 8163 	beq.w	1332c <hash_to_field+0x32e>
   13066:	1e73      	subs	r3, r6, #1
   13068:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
   1306c:	f108 31ff 	add.w	r1, r8, #4294967295
   13070:	440e      	add	r6, r1
   13072:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   13076:	f802 1f01 	strb.w	r1, [r2, #1]!
   1307a:	42b3      	cmp	r3, r6
   1307c:	d1f9      	bne.n	13072 <hash_to_field+0x74>
   1307e:	4643      	mov	r3, r8
   13080:	f107 02b9 	add.w	r2, r7, #185	; 0xb9
   13084:	f802 8003 	strb.w	r8, [r2, r3]
   13088:	f107 02ba 	add.w	r2, r7, #186	; 0xba
   1308c:	2180      	movs	r1, #128	; 0x80
   1308e:	54d1      	strb	r1, [r2, r3]
   13090:	2200      	movs	r2, #0
   13092:	f107 01bb 	add.w	r1, r7, #187	; 0xbb
   13096:	54ca      	strb	r2, [r1, r3]
   13098:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
   1309c:	54ca      	strb	r2, [r1, r3]
   1309e:	f107 01bd 	add.w	r1, r7, #189	; 0xbd
   130a2:	54ca      	strb	r2, [r1, r3]
   130a4:	f107 01be 	add.w	r1, r7, #190	; 0xbe
   130a8:	54ca      	strb	r2, [r1, r3]
   130aa:	f107 01bf 	add.w	r1, r7, #191	; 0xbf
   130ae:	54ca      	strb	r2, [r1, r3]
   130b0:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   130b4:	54ca      	strb	r2, [r1, r3]
   130b6:	f107 01c1 	add.w	r1, r7, #193	; 0xc1
   130ba:	54ca      	strb	r2, [r1, r3]
   130bc:	f108 0322 	add.w	r3, r8, #34	; 0x22
   130c0:	00da      	lsls	r2, r3, #3
   130c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   130c6:	4408      	add	r0, r1
   130c8:	f3c3 1357 	ubfx	r3, r3, #5, #24
   130cc:	f800 3c02 	strb.w	r3, [r0, #-2]
   130d0:	f800 2c01 	strb.w	r2, [r0, #-1]
   130d4:	4b96      	ldr	r3, [pc, #600]	; (13330 <hash_to_field+0x332>)
   130d6:	62bb      	str	r3, [r7, #40]	; 0x28
   130d8:	4b96      	ldr	r3, [pc, #600]	; (13334 <hash_to_field+0x336>)
   130da:	62fb      	str	r3, [r7, #44]	; 0x2c
   130dc:	4b96      	ldr	r3, [pc, #600]	; (13338 <hash_to_field+0x33a>)
   130de:	633b      	str	r3, [r7, #48]	; 0x30
   130e0:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
   130e4:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
   130e8:	f203 7331 	addw	r3, r3, #1841	; 0x731
   130ec:	637b      	str	r3, [r7, #52]	; 0x34
   130ee:	4b93      	ldr	r3, [pc, #588]	; (1333c <hash_to_field+0x33e>)
   130f0:	63bb      	str	r3, [r7, #56]	; 0x38
   130f2:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
   130f6:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
   130fa:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
   130fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   13100:	4b8f      	ldr	r3, [pc, #572]	; (13340 <hash_to_field+0x342>)
   13102:	643b      	str	r3, [r7, #64]	; 0x40
   13104:	4b8f      	ldr	r3, [pc, #572]	; (13344 <hash_to_field+0x346>)
   13106:	647b      	str	r3, [r7, #68]	; 0x44
   13108:	2240      	movs	r2, #64	; 0x40
   1310a:	2300      	movs	r3, #0
   1310c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   13110:	f107 0350 	add.w	r3, r7, #80	; 0x50
   13114:	f107 0190 	add.w	r1, r7, #144	; 0x90
   13118:	2200      	movs	r2, #0
   1311a:	f843 2b04 	str.w	r2, [r3], #4
   1311e:	428b      	cmp	r3, r1
   13120:	d1fb      	bne.n	1311a <hash_to_field+0x11c>
   13122:	f107 0350 	add.w	r3, r7, #80	; 0x50
   13126:	2600      	movs	r6, #0
   13128:	f8c7 6090 	str.w	r6, [r7, #144]	; 0x90
   1312c:	683a      	ldr	r2, [r7, #0]
   1312e:	4649      	mov	r1, r9
   13130:	f107 0028 	add.w	r0, r7, #40	; 0x28
   13134:	f7ff ff17 	bl	12f66 <sha256_update>
   13138:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
   1313c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
   13140:	f107 0028 	add.w	r0, r7, #40	; 0x28
   13144:	f7ff ff0f 	bl	12f66 <sha256_update>
   13148:	0a23      	lsrs	r3, r4, #8
   1314a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
   1314e:	f887 40b7 	strb.w	r4, [r7, #183]	; 0xb7
   13152:	f887 60b8 	strb.w	r6, [r7, #184]	; 0xb8
   13156:	f108 0204 	add.w	r2, r8, #4
   1315a:	f107 01b6 	add.w	r1, r7, #182	; 0xb6
   1315e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   13162:	f7ff ff00 	bl	12f66 <sha256_update>
   13166:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1316a:	f107 0008 	add.w	r0, r7, #8
   1316e:	f7ff fe92 	bl	12e96 <sha256_final>
   13172:	4b75      	ldr	r3, [pc, #468]	; (13348 <hash_to_field+0x34a>)
   13174:	62bb      	str	r3, [r7, #40]	; 0x28
   13176:	4b75      	ldr	r3, [pc, #468]	; (1334c <hash_to_field+0x34e>)
   13178:	62fb      	str	r3, [r7, #44]	; 0x2c
   1317a:	4b75      	ldr	r3, [pc, #468]	; (13350 <hash_to_field+0x352>)
   1317c:	633b      	str	r3, [r7, #48]	; 0x30
   1317e:	4b75      	ldr	r3, [pc, #468]	; (13354 <hash_to_field+0x356>)
   13180:	637b      	str	r3, [r7, #52]	; 0x34
   13182:	4b75      	ldr	r3, [pc, #468]	; (13358 <hash_to_field+0x35a>)
   13184:	63bb      	str	r3, [r7, #56]	; 0x38
   13186:	4b75      	ldr	r3, [pc, #468]	; (1335c <hash_to_field+0x35e>)
   13188:	63fb      	str	r3, [r7, #60]	; 0x3c
   1318a:	4b75      	ldr	r3, [pc, #468]	; (13360 <hash_to_field+0x362>)
   1318c:	643b      	str	r3, [r7, #64]	; 0x40
   1318e:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   13192:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   13196:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1319a:	647b      	str	r3, [r7, #68]	; 0x44
   1319c:	f107 0024 	add.w	r0, r7, #36	; 0x24
   131a0:	f107 0294 	add.w	r2, r7, #148	; 0x94
   131a4:	1d3b      	adds	r3, r7, #4
   131a6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   131aa:	f842 1f04 	str.w	r1, [r2, #4]!
   131ae:	4283      	cmp	r3, r0
   131b0:	d1f9      	bne.n	131a6 <hash_to_field+0x1a8>
   131b2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   131b6:	3301      	adds	r3, #1
   131b8:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   131bc:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
   131c0:	4652      	mov	r2, sl
   131c2:	f107 0198 	add.w	r1, r7, #152	; 0x98
   131c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
   131ca:	f7ff fd3b 	bl	12c44 <blst_sha256_block_data_order>
   131ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
   131d2:	4658      	mov	r0, fp
   131d4:	f7ff fe4a 	bl	12e6c <blst_sha256_emit>
   131d8:	0964      	lsrs	r4, r4, #5
   131da:	f1b4 0801 	subs.w	r8, r4, #1
   131de:	d03e      	beq.n	1325e <hash_to_field+0x260>
   131e0:	f10b 041c 	add.w	r4, fp, #28
   131e4:	465e      	mov	r6, fp
   131e6:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1334c <hash_to_field+0x34e>
   131ea:	603d      	str	r5, [r7, #0]
   131ec:	4b56      	ldr	r3, [pc, #344]	; (13348 <hash_to_field+0x34a>)
   131ee:	62bb      	str	r3, [r7, #40]	; 0x28
   131f0:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
   131f4:	4b56      	ldr	r3, [pc, #344]	; (13350 <hash_to_field+0x352>)
   131f6:	633b      	str	r3, [r7, #48]	; 0x30
   131f8:	4b56      	ldr	r3, [pc, #344]	; (13354 <hash_to_field+0x356>)
   131fa:	637b      	str	r3, [r7, #52]	; 0x34
   131fc:	4b56      	ldr	r3, [pc, #344]	; (13358 <hash_to_field+0x35a>)
   131fe:	63bb      	str	r3, [r7, #56]	; 0x38
   13200:	4b56      	ldr	r3, [pc, #344]	; (1335c <hash_to_field+0x35e>)
   13202:	63fb      	str	r3, [r7, #60]	; 0x3c
   13204:	4b56      	ldr	r3, [pc, #344]	; (13360 <hash_to_field+0x362>)
   13206:	643b      	str	r3, [r7, #64]	; 0x40
   13208:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1320c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   13210:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   13214:	647b      	str	r3, [r7, #68]	; 0x44
   13216:	1f32      	subs	r2, r6, #4
   13218:	f107 0094 	add.w	r0, r7, #148	; 0x94
   1321c:	1d39      	adds	r1, r7, #4
   1321e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   13222:	f852 5f04 	ldr.w	r5, [r2, #4]!
   13226:	406b      	eors	r3, r5
   13228:	f840 3f04 	str.w	r3, [r0, #4]!
   1322c:	42a2      	cmp	r2, r4
   1322e:	d1f6      	bne.n	1321e <hash_to_field+0x220>
   13230:	3620      	adds	r6, #32
   13232:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
   13236:	3301      	adds	r3, #1
   13238:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
   1323c:	4652      	mov	r2, sl
   1323e:	f107 0198 	add.w	r1, r7, #152	; 0x98
   13242:	f107 0028 	add.w	r0, r7, #40	; 0x28
   13246:	f7ff fcfd 	bl	12c44 <blst_sha256_block_data_order>
   1324a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1324e:	4630      	mov	r0, r6
   13250:	f7ff fe0c 	bl	12e6c <blst_sha256_emit>
   13254:	3420      	adds	r4, #32
   13256:	f1b8 0801 	subs.w	r8, r8, #1
   1325a:	d1c7      	bne.n	131ec <hash_to_field+0x1ee>
   1325c:	683d      	ldr	r5, [r7, #0]
   1325e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   13262:	f507 710e 	add.w	r1, r7, #568	; 0x238
   13266:	2200      	movs	r2, #0
   13268:	f843 2b04 	str.w	r2, [r3], #4
   1326c:	428b      	cmp	r3, r1
   1326e:	d1fb      	bne.n	13268 <hash_to_field+0x26a>
   13270:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
   13274:	687b      	ldr	r3, [r7, #4]
   13276:	1e5e      	subs	r6, r3, #1
   13278:	b3ab      	cbz	r3, 132e6 <hash_to_field+0x2e8>
   1327a:	f10b 0440 	add.w	r4, fp, #64	; 0x40
   1327e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 13364 <hash_to_field+0x366>
   13282:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 13368 <hash_to_field+0x36a>
   13286:	465a      	mov	r2, fp
   13288:	2100      	movs	r1, #0
   1328a:	f10b 0c3f 	add.w	ip, fp, #63	; 0x3f
   1328e:	ebac 0302 	sub.w	r3, ip, r2
   13292:	f812 0b01 	ldrb.w	r0, [r2], #1
   13296:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   1329a:	f023 0303 	bic.w	r3, r3, #3
   1329e:	f507 700e 	add.w	r0, r7, #568	; 0x238
   132a2:	4403      	add	r3, r0
   132a4:	f843 1c60 	str.w	r1, [r3, #-96]
   132a8:	42a2      	cmp	r2, r4
   132aa:	d1f0      	bne.n	1328e <hash_to_field+0x290>
   132ac:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   132b0:	f04f 080c 	mov.w	r8, #12
   132b4:	f8cd 8000 	str.w	r8, [sp]
   132b8:	4653      	mov	r3, sl
   132ba:	464a      	mov	r2, r9
   132bc:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
   132c0:	4628      	mov	r0, r5
   132c2:	f7f9 ff36 	bl	d132 <redc_mont_n>
   132c6:	f8cd 8004 	str.w	r8, [sp, #4]
   132ca:	f8cd a000 	str.w	sl, [sp]
   132ce:	464b      	mov	r3, r9
   132d0:	4a26      	ldr	r2, [pc, #152]	; (1336c <hash_to_field+0x36e>)
   132d2:	4629      	mov	r1, r5
   132d4:	4628      	mov	r0, r5
   132d6:	f7f9 fb7b 	bl	c9d0 <mul_mont_n>
   132da:	3530      	adds	r5, #48	; 0x30
   132dc:	3e01      	subs	r6, #1
   132de:	3440      	adds	r4, #64	; 0x40
   132e0:	f1b6 3fff 	cmp.w	r6, #4294967295
   132e4:	d1cf      	bne.n	13286 <hash_to_field+0x288>
   132e6:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   132ea:	46bd      	mov	sp, r7
   132ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f0:	f107 0028 	add.w	r0, r7, #40	; 0x28
   132f4:	f7f9 f972 	bl	c5dc <sha256_init>
   132f8:	2211      	movs	r2, #17
   132fa:	491d      	ldr	r1, [pc, #116]	; (13370 <hash_to_field+0x372>)
   132fc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   13300:	f7ff fe31 	bl	12f66 <sha256_update>
   13304:	4642      	mov	r2, r8
   13306:	4631      	mov	r1, r6
   13308:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1330c:	f7ff fe2b 	bl	12f66 <sha256_update>
   13310:	f107 0128 	add.w	r1, r7, #40	; 0x28
   13314:	f107 0008 	add.w	r0, r7, #8
   13318:	f7ff fdbd 	bl	12e96 <sha256_final>
   1331c:	f04f 0820 	mov.w	r8, #32
   13320:	f107 0608 	add.w	r6, r7, #8
   13324:	e689      	b.n	1303a <hash_to_field+0x3c>
   13326:	f04f 0800 	mov.w	r8, #0
   1332a:	e686      	b.n	1303a <hash_to_field+0x3c>
   1332c:	4643      	mov	r3, r8
   1332e:	e6a7      	b.n	13080 <hash_to_field+0x82>
   13330:	da5698be 	.word	0xda5698be
   13334:	17b9b469 	.word	0x17b9b469
   13338:	62335799 	.word	0x62335799
   1333c:	8ce5d491 	.word	0x8ce5d491
   13340:	bafef9ea 	.word	0xbafef9ea
   13344:	1837a9d8 	.word	0x1837a9d8
   13348:	6a09e667 	.word	0x6a09e667
   1334c:	bb67ae85 	.word	0xbb67ae85
   13350:	3c6ef372 	.word	0x3c6ef372
   13354:	a54ff53a 	.word	0xa54ff53a
   13358:	510e527f 	.word	0x510e527f
   1335c:	9b05688c 	.word	0x9b05688c
   13360:	1f83d9ab 	.word	0x1f83d9ab
   13364:	fffcfffd 	.word	0xfffcfffd
   13368:	00024108 	.word	0x00024108
   1336c:	000255f0 	.word	0x000255f0
   13370:	00026994 	.word	0x00026994

00013374 <blst_encode_to_g1>:
   13374:	b510      	push	{r4, lr}
   13376:	b090      	sub	sp, #64	; 0x40
   13378:	4604      	mov	r4, r0
   1337a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1337c:	9003      	str	r0, [sp, #12]
   1337e:	9302      	str	r3, [sp, #8]
   13380:	9201      	str	r2, [sp, #4]
   13382:	9100      	str	r1, [sp, #0]
   13384:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13386:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13388:	2101      	movs	r1, #1
   1338a:	a804      	add	r0, sp, #16
   1338c:	f7ff fe37 	bl	12ffe <hash_to_field>
   13390:	2200      	movs	r2, #0
   13392:	a904      	add	r1, sp, #16
   13394:	4620      	mov	r0, r4
   13396:	f7ff f985 	bl	126a4 <map_to_g1>
   1339a:	b010      	add	sp, #64	; 0x40
   1339c:	bd10      	pop	{r4, pc}

0001339e <blst_hash_to_g1>:
   1339e:	b510      	push	{r4, lr}
   133a0:	b09c      	sub	sp, #112	; 0x70
   133a2:	4604      	mov	r4, r0
   133a4:	981e      	ldr	r0, [sp, #120]	; 0x78
   133a6:	9003      	str	r0, [sp, #12]
   133a8:	9302      	str	r3, [sp, #8]
   133aa:	9201      	str	r2, [sp, #4]
   133ac:	9100      	str	r1, [sp, #0]
   133ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
   133b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   133b2:	2102      	movs	r1, #2
   133b4:	a804      	add	r0, sp, #16
   133b6:	f7ff fe22 	bl	12ffe <hash_to_field>
   133ba:	aa10      	add	r2, sp, #64	; 0x40
   133bc:	a904      	add	r1, sp, #16
   133be:	4620      	mov	r0, r4
   133c0:	f7ff f970 	bl	126a4 <map_to_g1>
   133c4:	b01c      	add	sp, #112	; 0x70
   133c6:	bd10      	pop	{r4, pc}

000133c8 <HMAC_init>:
   133c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   133cc:	4607      	mov	r7, r0
   133ce:	2900      	cmp	r1, #0
   133d0:	d06d      	beq.n	134ae <HMAC_init+0xe6>
   133d2:	4614      	mov	r4, r2
   133d4:	460d      	mov	r5, r1
   133d6:	f100 09b0 	add.w	r9, r0, #176	; 0xb0
   133da:	464e      	mov	r6, r9
   133dc:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   133e0:	464b      	mov	r3, r9
   133e2:	2100      	movs	r1, #0
   133e4:	f843 1b04 	str.w	r1, [r3], #4
   133e8:	4543      	cmp	r3, r8
   133ea:	d1fb      	bne.n	133e4 <HMAC_init+0x1c>
   133ec:	2c40      	cmp	r4, #64	; 0x40
   133ee:	d973      	bls.n	134d8 <HMAC_init+0x110>
   133f0:	4638      	mov	r0, r7
   133f2:	f7f9 f8f3 	bl	c5dc <sha256_init>
   133f6:	4622      	mov	r2, r4
   133f8:	4629      	mov	r1, r5
   133fa:	4638      	mov	r0, r7
   133fc:	f7ff fdb3 	bl	12f66 <sha256_update>
   13400:	4639      	mov	r1, r7
   13402:	4648      	mov	r0, r9
   13404:	f7ff fd47 	bl	12e96 <sha256_final>
   13408:	f107 04ac 	add.w	r4, r7, #172	; 0xac
   1340c:	f107 05ec 	add.w	r5, r7, #236	; 0xec
   13410:	4623      	mov	r3, r4
   13412:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13416:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
   1341a:	601a      	str	r2, [r3, #0]
   1341c:	42ab      	cmp	r3, r5
   1341e:	d1f8      	bne.n	13412 <HMAC_init+0x4a>
   13420:	4638      	mov	r0, r7
   13422:	f7f9 f8db 	bl	c5dc <sha256_init>
   13426:	2240      	movs	r2, #64	; 0x40
   13428:	4649      	mov	r1, r9
   1342a:	4638      	mov	r0, r7
   1342c:	f7ff fd9b 	bl	12f66 <sha256_update>
   13430:	4639      	mov	r1, r7
   13432:	f107 0070 	add.w	r0, r7, #112	; 0x70
   13436:	f7ff fd0f 	bl	12e58 <blst_sha256_hcopy>
   1343a:	f854 3f04 	ldr.w	r3, [r4, #4]!
   1343e:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
   13442:	6023      	str	r3, [r4, #0]
   13444:	42ac      	cmp	r4, r5
   13446:	d1f8      	bne.n	1343a <HMAC_init+0x72>
   13448:	4b26      	ldr	r3, [pc, #152]	; (134e4 <HMAC_init+0x11c>)
   1344a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   1344e:	4b26      	ldr	r3, [pc, #152]	; (134e8 <HMAC_init+0x120>)
   13450:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   13454:	4b25      	ldr	r3, [pc, #148]	; (134ec <HMAC_init+0x124>)
   13456:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1345a:	4b25      	ldr	r3, [pc, #148]	; (134f0 <HMAC_init+0x128>)
   1345c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   13460:	4b24      	ldr	r3, [pc, #144]	; (134f4 <HMAC_init+0x12c>)
   13462:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   13466:	4b24      	ldr	r3, [pc, #144]	; (134f8 <HMAC_init+0x130>)
   13468:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   1346c:	4b23      	ldr	r3, [pc, #140]	; (134fc <HMAC_init+0x134>)
   1346e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   13472:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   13476:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1347a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   1347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   13482:	2201      	movs	r2, #1
   13484:	4649      	mov	r1, r9
   13486:	f107 0090 	add.w	r0, r7, #144	; 0x90
   1348a:	f7ff fbdb 	bl	12c44 <blst_sha256_block_data_order>
   1348e:	2300      	movs	r3, #0
   13490:	f846 3b04 	str.w	r3, [r6], #4
   13494:	4546      	cmp	r6, r8
   13496:	d1fb      	bne.n	13490 <HMAC_init+0xc8>
   13498:	2380      	movs	r3, #128	; 0x80
   1349a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
   1349e:	2303      	movs	r3, #3
   134a0:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
   134a4:	2300      	movs	r3, #0
   134a6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
   134aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   134ae:	f100 0170 	add.w	r1, r0, #112	; 0x70
   134b2:	f7ff fcd1 	bl	12e58 <blst_sha256_hcopy>
   134b6:	2240      	movs	r2, #64	; 0x40
   134b8:	2300      	movs	r3, #0
   134ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
   134be:	f107 0028 	add.w	r0, r7, #40	; 0x28
   134c2:	4603      	mov	r3, r0
   134c4:	f107 0168 	add.w	r1, r7, #104	; 0x68
   134c8:	2200      	movs	r2, #0
   134ca:	f843 2b04 	str.w	r2, [r3], #4
   134ce:	4299      	cmp	r1, r3
   134d0:	d1fb      	bne.n	134ca <HMAC_init+0x102>
   134d2:	2300      	movs	r3, #0
   134d4:	66bb      	str	r3, [r7, #104]	; 0x68
   134d6:	e7e8      	b.n	134aa <HMAC_init+0xe2>
   134d8:	4622      	mov	r2, r4
   134da:	4629      	mov	r1, r5
   134dc:	4648      	mov	r0, r9
   134de:	f7ff fd35 	bl	12f4c <blst_sha256_bcopy>
   134e2:	e791      	b.n	13408 <HMAC_init+0x40>
   134e4:	6a09e667 	.word	0x6a09e667
   134e8:	bb67ae85 	.word	0xbb67ae85
   134ec:	3c6ef372 	.word	0x3c6ef372
   134f0:	a54ff53a 	.word	0xa54ff53a
   134f4:	510e527f 	.word	0x510e527f
   134f8:	9b05688c 	.word	0x9b05688c
   134fc:	1f83d9ab 	.word	0x1f83d9ab

00013500 <blst_keygen>:
   13500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13504:	b0f3      	sub	sp, #460	; 0x1cc
   13506:	af02      	add	r7, sp, #8
   13508:	6038      	str	r0, [r7, #0]
   1350a:	6139      	str	r1, [r7, #16]
   1350c:	4616      	mov	r6, r2
   1350e:	60fa      	str	r2, [r7, #12]
   13510:	607b      	str	r3, [r7, #4]
   13512:	f8d7 b1e8 	ldr.w	fp, [r7, #488]	; 0x1e8
   13516:	f107 0420 	add.w	r4, r7, #32
   1351a:	4d8c      	ldr	r5, [pc, #560]	; (1374c <blst_keygen+0x24c>)
   1351c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1351e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13520:	e895 0003 	ldmia.w	r5, {r0, r1}
   13524:	f844 0b04 	str.w	r0, [r4], #4
   13528:	7021      	strb	r1, [r4, #0]
   1352a:	2300      	movs	r3, #0
   1352c:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
   13530:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39
   13534:	63fb      	str	r3, [r7, #60]	; 0x3c
   13536:	2e1f      	cmp	r6, #31
   13538:	d90f      	bls.n	1355a <blst_keygen+0x5a>
   1353a:	687b      	ldr	r3, [r7, #4]
   1353c:	2b00      	cmp	r3, #0
   1353e:	bf08      	it	eq
   13540:	f04f 0b00 	moveq.w	fp, #0
   13544:	f04f 0914 	mov.w	r9, #20
   13548:	2500      	movs	r5, #0
   1354a:	f10b 030a 	add.w	r3, fp, #10
   1354e:	f023 0307 	bic.w	r3, r3, #7
   13552:	60bb      	str	r3, [r7, #8]
   13554:	f507 74c0 	add.w	r4, r7, #384	; 0x180
   13558:	e090      	b.n	1367c <blst_keygen+0x17c>
   1355a:	683a      	ldr	r2, [r7, #0]
   1355c:	4613      	mov	r3, r2
   1355e:	f102 0120 	add.w	r1, r2, #32
   13562:	2200      	movs	r2, #0
   13564:	f843 2b04 	str.w	r2, [r3], #4
   13568:	4299      	cmp	r1, r3
   1356a:	d1fb      	bne.n	13564 <blst_keygen+0x64>
   1356c:	683b      	ldr	r3, [r7, #0]
   1356e:	e0db      	b.n	13728 <blst_keygen+0x228>
   13570:	f806 500b 	strb.w	r5, [r6, fp]
   13574:	eb06 030b 	add.w	r3, r6, fp
   13578:	2230      	movs	r2, #48	; 0x30
   1357a:	705a      	strb	r2, [r3, #1]
   1357c:	2301      	movs	r3, #1
   1357e:	f806 3008 	strb.w	r3, [r6, r8]
   13582:	464a      	mov	r2, r9
   13584:	4631      	mov	r1, r6
   13586:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1358a:	f7ff fcec 	bl	12f66 <sha256_update>
   1358e:	f107 0140 	add.w	r1, r7, #64	; 0x40
   13592:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   13596:	f7ff fcc2 	bl	12f1e <HMAC_final>
   1359a:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   1359e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
   135a2:	f7ff fc59 	bl	12e58 <blst_sha256_hcopy>
   135a6:	f816 3008 	ldrb.w	r3, [r6, r8]
   135aa:	3301      	adds	r3, #1
   135ac:	f806 3008 	strb.w	r3, [r6, r8]
   135b0:	462a      	mov	r2, r5
   135b2:	4629      	mov	r1, r5
   135b4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   135b8:	f7ff ff06 	bl	133c8 <HMAC_init>
   135bc:	2220      	movs	r2, #32
   135be:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   135c2:	f107 0040 	add.w	r0, r7, #64	; 0x40
   135c6:	f7ff fcce 	bl	12f66 <sha256_update>
   135ca:	464a      	mov	r2, r9
   135cc:	4631      	mov	r1, r6
   135ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   135d2:	f7ff fcc8 	bl	12f66 <sha256_update>
   135d6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   135da:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
   135de:	f7ff fc9e 	bl	12f1e <HMAC_final>
   135e2:	2210      	movs	r2, #16
   135e4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   135e8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
   135ec:	f7ff fcae 	bl	12f4c <blst_sha256_bcopy>
   135f0:	46d5      	mov	sp, sl
   135f2:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   135f6:	617b      	str	r3, [r7, #20]
   135f8:	f107 0a40 	add.w	sl, r7, #64	; 0x40
   135fc:	f507 76e0 	add.w	r6, r7, #448	; 0x1c0
   13600:	f843 5b04 	str.w	r5, [r3], #4
   13604:	42b3      	cmp	r3, r6
   13606:	d1fb      	bne.n	13600 <blst_keygen+0x100>
   13608:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   1360c:	4629      	mov	r1, r5
   1360e:	f20a 103f 	addw	r0, sl, #319	; 0x13f
   13612:	1a83      	subs	r3, r0, r2
   13614:	f812 cb01 	ldrb.w	ip, [r2], #1
   13618:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   1361c:	f023 0303 	bic.w	r3, r3, #3
   13620:	f507 7ce0 	add.w	ip, r7, #448	; 0x1c0
   13624:	4463      	add	r3, ip
   13626:	f843 1c40 	str.w	r1, [r3, #-64]
   1362a:	42a2      	cmp	r2, r4
   1362c:	d1f1      	bne.n	13612 <blst_keygen+0x112>
   1362e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 13750 <blst_keygen+0x250>
   13632:	f508 7932 	add.w	r9, r8, #712	; 0x2c8
   13636:	2308      	movs	r3, #8
   13638:	9300      	str	r3, [sp, #0]
   1363a:	f04f 33ff 	mov.w	r3, #4294967295
   1363e:	464a      	mov	r2, r9
   13640:	4621      	mov	r1, r4
   13642:	4620      	mov	r0, r4
   13644:	f7f9 fd75 	bl	d132 <redc_mont_n>
   13648:	2308      	movs	r3, #8
   1364a:	9301      	str	r3, [sp, #4]
   1364c:	f04f 33ff 	mov.w	r3, #4294967295
   13650:	9300      	str	r3, [sp, #0]
   13652:	464b      	mov	r3, r9
   13654:	f508 6288 	add.w	r2, r8, #1088	; 0x440
   13658:	4621      	mov	r1, r4
   1365a:	4620      	mov	r0, r4
   1365c:	f7f9 f9b8 	bl	c9d0 <mul_mont_n>
   13660:	f50a 70b0 	add.w	r0, sl, #352	; 0x160
   13664:	697b      	ldr	r3, [r7, #20]
   13666:	2200      	movs	r2, #0
   13668:	f853 1b04 	ldr.w	r1, [r3], #4
   1366c:	430a      	orrs	r2, r1
   1366e:	4298      	cmp	r0, r3
   13670:	d1fa      	bne.n	13668 <blst_keygen+0x168>
   13672:	f04f 0920 	mov.w	r9, #32
   13676:	1e53      	subs	r3, r2, #1
   13678:	4393      	bics	r3, r2
   1367a:	d544      	bpl.n	13706 <blst_keygen+0x206>
   1367c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   13680:	f7f8 ffac 	bl	c5dc <sha256_init>
   13684:	464a      	mov	r2, r9
   13686:	f107 0120 	add.w	r1, r7, #32
   1368a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   1368e:	f7ff fc6a 	bl	12f66 <sha256_update>
   13692:	f107 0140 	add.w	r1, r7, #64	; 0x40
   13696:	f107 0020 	add.w	r0, r7, #32
   1369a:	f7ff fbfc 	bl	12e96 <sha256_final>
   1369e:	773d      	strb	r5, [r7, #28]
   136a0:	2220      	movs	r2, #32
   136a2:	18b9      	adds	r1, r7, r2
   136a4:	f107 0040 	add.w	r0, r7, #64	; 0x40
   136a8:	f7ff fe8e 	bl	133c8 <HMAC_init>
   136ac:	68fa      	ldr	r2, [r7, #12]
   136ae:	6939      	ldr	r1, [r7, #16]
   136b0:	f107 0040 	add.w	r0, r7, #64	; 0x40
   136b4:	f7ff fc57 	bl	12f66 <sha256_update>
   136b8:	2201      	movs	r2, #1
   136ba:	f107 011c 	add.w	r1, r7, #28
   136be:	f107 0040 	add.w	r0, r7, #64	; 0x40
   136c2:	f7ff fc50 	bl	12f66 <sha256_update>
   136c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
   136ca:	f507 7098 	add.w	r0, r7, #304	; 0x130
   136ce:	f7ff fc26 	bl	12f1e <HMAC_final>
   136d2:	46ea      	mov	sl, sp
   136d4:	f10b 0903 	add.w	r9, fp, #3
   136d8:	f10b 0802 	add.w	r8, fp, #2
   136dc:	68bb      	ldr	r3, [r7, #8]
   136de:	ebad 0d03 	sub.w	sp, sp, r3
   136e2:	ae02      	add	r6, sp, #8
   136e4:	2220      	movs	r2, #32
   136e6:	f507 7198 	add.w	r1, r7, #304	; 0x130
   136ea:	f107 0040 	add.w	r0, r7, #64	; 0x40
   136ee:	f7ff fe6b 	bl	133c8 <HMAC_init>
   136f2:	f1bb 0f00 	cmp.w	fp, #0
   136f6:	f43f af3b 	beq.w	13570 <blst_keygen+0x70>
   136fa:	465a      	mov	r2, fp
   136fc:	6879      	ldr	r1, [r7, #4]
   136fe:	4630      	mov	r0, r6
   13700:	f7ff fc24 	bl	12f4c <blst_sha256_bcopy>
   13704:	e734      	b.n	13570 <blst_keygen+0x70>
   13706:	46d0      	mov	r8, sl
   13708:	f507 73c0 	add.w	r3, r7, #384	; 0x180
   1370c:	683a      	ldr	r2, [r7, #0]
   1370e:	429a      	cmp	r2, r3
   13710:	d003      	beq.n	1371a <blst_keygen+0x21a>
   13712:	6839      	ldr	r1, [r7, #0]
   13714:	3104      	adds	r1, #4
   13716:	697c      	ldr	r4, [r7, #20]
   13718:	e00e      	b.n	13738 <blst_keygen+0x238>
   1371a:	2300      	movs	r3, #0
   1371c:	f848 3b04 	str.w	r3, [r8], #4
   13720:	45b0      	cmp	r8, r6
   13722:	d1fb      	bne.n	1371c <blst_keygen+0x21c>
   13724:	f107 0340 	add.w	r3, r7, #64	; 0x40
   13728:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
   1372c:	46bd      	mov	sp, r7
   1372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13732:	3104      	adds	r1, #4
   13734:	42a0      	cmp	r0, r4
   13736:	d0f0      	beq.n	1371a <blst_keygen+0x21a>
   13738:	1f0a      	subs	r2, r1, #4
   1373a:	f854 3b04 	ldr.w	r3, [r4], #4
   1373e:	f802 3b01 	strb.w	r3, [r2], #1
   13742:	0a1b      	lsrs	r3, r3, #8
   13744:	428a      	cmp	r2, r1
   13746:	d1fa      	bne.n	1373e <blst_keygen+0x23e>
   13748:	e7f3      	b.n	13732 <blst_keygen+0x232>
   1374a:	bf00      	nop
   1374c:	00025620 	.word	0x00025620
   13750:	00025200 	.word	0x00025200

00013754 <mul_by_8_mod_384>:
   13754:	b500      	push	{lr}
   13756:	b083      	sub	sp, #12
   13758:	4613      	mov	r3, r2
   1375a:	220c      	movs	r2, #12
   1375c:	9200      	str	r2, [sp, #0]
   1375e:	2203      	movs	r2, #3
   13760:	f7f9 fc06 	bl	cf70 <lshift_mod_n>
   13764:	b003      	add	sp, #12
   13766:	f85d fb04 	ldr.w	pc, [sp], #4

0001376a <mul_by_3_mod_384x>:
   1376a:	b570      	push	{r4, r5, r6, lr}
   1376c:	4604      	mov	r4, r0
   1376e:	460d      	mov	r5, r1
   13770:	4616      	mov	r6, r2
   13772:	230c      	movs	r3, #12
   13774:	f7f9 fb5c 	bl	ce30 <mul_by_3_mod_n>
   13778:	230c      	movs	r3, #12
   1377a:	4632      	mov	r2, r6
   1377c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   13780:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13784:	f7f9 fb54 	bl	ce30 <mul_by_3_mod_n>
   13788:	bd70      	pop	{r4, r5, r6, pc}

0001378a <mul_by_8_mod_384x>:
   1378a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1378c:	b083      	sub	sp, #12
   1378e:	4605      	mov	r5, r0
   13790:	460e      	mov	r6, r1
   13792:	4614      	mov	r4, r2
   13794:	270c      	movs	r7, #12
   13796:	9700      	str	r7, [sp, #0]
   13798:	4613      	mov	r3, r2
   1379a:	2203      	movs	r2, #3
   1379c:	f7f9 fbe8 	bl	cf70 <lshift_mod_n>
   137a0:	9700      	str	r7, [sp, #0]
   137a2:	4623      	mov	r3, r4
   137a4:	2203      	movs	r2, #3
   137a6:	f106 0130 	add.w	r1, r6, #48	; 0x30
   137aa:	f105 0030 	add.w	r0, r5, #48	; 0x30
   137ae:	f7f9 fbdf 	bl	cf70 <lshift_mod_n>
   137b2:	b003      	add	sp, #12
   137b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000137b6 <mul_by_1_plus_i_mod_384x>:
   137b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137ba:	b08e      	sub	sp, #56	; 0x38
   137bc:	4604      	mov	r4, r0
   137be:	460d      	mov	r5, r1
   137c0:	4616      	mov	r6, r2
   137c2:	f101 0730 	add.w	r7, r1, #48	; 0x30
   137c6:	f04f 080c 	mov.w	r8, #12
   137ca:	f8cd 8000 	str.w	r8, [sp]
   137ce:	4613      	mov	r3, r2
   137d0:	463a      	mov	r2, r7
   137d2:	a802      	add	r0, sp, #8
   137d4:	f7f9 faa4 	bl	cd20 <add_mod_n>
   137d8:	f8cd 8000 	str.w	r8, [sp]
   137dc:	4633      	mov	r3, r6
   137de:	463a      	mov	r2, r7
   137e0:	4629      	mov	r1, r5
   137e2:	4620      	mov	r0, r4
   137e4:	f7f8 ff46 	bl	c674 <sub_mod_n>
   137e8:	aa02      	add	r2, sp, #8
   137ea:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   137ee:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   137f2:	f852 1b04 	ldr.w	r1, [r2], #4
   137f6:	f843 1f04 	str.w	r1, [r3, #4]!
   137fa:	4283      	cmp	r3, r0
   137fc:	d1f9      	bne.n	137f2 <mul_by_1_plus_i_mod_384x+0x3c>
   137fe:	b00e      	add	sp, #56	; 0x38
   13800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013804 <add_mod_384x>:
   13804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13808:	b082      	sub	sp, #8
   1380a:	4604      	mov	r4, r0
   1380c:	460d      	mov	r5, r1
   1380e:	4616      	mov	r6, r2
   13810:	461f      	mov	r7, r3
   13812:	f04f 080c 	mov.w	r8, #12
   13816:	f8cd 8000 	str.w	r8, [sp]
   1381a:	f7f9 fa81 	bl	cd20 <add_mod_n>
   1381e:	f8cd 8000 	str.w	r8, [sp]
   13822:	463b      	mov	r3, r7
   13824:	f106 0230 	add.w	r2, r6, #48	; 0x30
   13828:	f105 0130 	add.w	r1, r5, #48	; 0x30
   1382c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13830:	f7f9 fa76 	bl	cd20 <add_mod_n>
   13834:	b002      	add	sp, #8
   13836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001383a <sub_mod_384x>:
   1383a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1383e:	b082      	sub	sp, #8
   13840:	4604      	mov	r4, r0
   13842:	460d      	mov	r5, r1
   13844:	4616      	mov	r6, r2
   13846:	461f      	mov	r7, r3
   13848:	f04f 080c 	mov.w	r8, #12
   1384c:	f8cd 8000 	str.w	r8, [sp]
   13850:	f7f8 ff10 	bl	c674 <sub_mod_n>
   13854:	f8cd 8000 	str.w	r8, [sp]
   13858:	463b      	mov	r3, r7
   1385a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1385e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   13862:	f104 0030 	add.w	r0, r4, #48	; 0x30
   13866:	f7f8 ff05 	bl	c674 <sub_mod_n>
   1386a:	b002      	add	sp, #8
   1386c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013870 <sqr_mont_384x>:
   13870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13874:	b09a      	sub	sp, #104	; 0x68
   13876:	4607      	mov	r7, r0
   13878:	460e      	mov	r6, r1
   1387a:	4614      	mov	r4, r2
   1387c:	4698      	mov	r8, r3
   1387e:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   13882:	250c      	movs	r5, #12
   13884:	9500      	str	r5, [sp, #0]
   13886:	4613      	mov	r3, r2
   13888:	4652      	mov	r2, sl
   1388a:	a80e      	add	r0, sp, #56	; 0x38
   1388c:	f7f9 fa48 	bl	cd20 <add_mod_n>
   13890:	9500      	str	r5, [sp, #0]
   13892:	4623      	mov	r3, r4
   13894:	4652      	mov	r2, sl
   13896:	4631      	mov	r1, r6
   13898:	a802      	add	r0, sp, #8
   1389a:	f7f8 feeb 	bl	c674 <sub_mod_n>
   1389e:	f107 0930 	add.w	r9, r7, #48	; 0x30
   138a2:	9501      	str	r5, [sp, #4]
   138a4:	f8cd 8000 	str.w	r8, [sp]
   138a8:	4623      	mov	r3, r4
   138aa:	4652      	mov	r2, sl
   138ac:	4631      	mov	r1, r6
   138ae:	4648      	mov	r0, r9
   138b0:	f7f9 f88e 	bl	c9d0 <mul_mont_n>
   138b4:	9500      	str	r5, [sp, #0]
   138b6:	4623      	mov	r3, r4
   138b8:	464a      	mov	r2, r9
   138ba:	4649      	mov	r1, r9
   138bc:	4648      	mov	r0, r9
   138be:	f7f9 fa2f 	bl	cd20 <add_mod_n>
   138c2:	9501      	str	r5, [sp, #4]
   138c4:	f8cd 8000 	str.w	r8, [sp]
   138c8:	4623      	mov	r3, r4
   138ca:	aa02      	add	r2, sp, #8
   138cc:	a90e      	add	r1, sp, #56	; 0x38
   138ce:	4638      	mov	r0, r7
   138d0:	f7f9 f87e 	bl	c9d0 <mul_mont_n>
   138d4:	b01a      	add	sp, #104	; 0x68
   138d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000138da <POINTonE2_from_Jacobian>:
   138da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138de:	b0b3      	sub	sp, #204	; 0xcc
   138e0:	4605      	mov	r5, r0
   138e2:	4688      	mov	r8, r1
   138e4:	31c0      	adds	r1, #192	; 0xc0
   138e6:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   138ea:	f508 708e 	add.w	r0, r8, #284	; 0x11c
   138ee:	4623      	mov	r3, r4
   138f0:	2600      	movs	r6, #0
   138f2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   138f6:	4316      	orrs	r6, r2
   138f8:	4283      	cmp	r3, r0
   138fa:	d1fa      	bne.n	138f2 <POINTonE2_from_Jacobian+0x18>
   138fc:	a81a      	add	r0, sp, #104	; 0x68
   138fe:	f7fe f84f 	bl	119a0 <reciprocal_fp2>
   13902:	f8df 9074 	ldr.w	r9, [pc, #116]	; 13978 <POINTonE2_from_Jacobian+0x9e>
   13906:	4f1d      	ldr	r7, [pc, #116]	; (1397c <POINTonE2_from_Jacobian+0xa2>)
   13908:	464b      	mov	r3, r9
   1390a:	463a      	mov	r2, r7
   1390c:	a91a      	add	r1, sp, #104	; 0x68
   1390e:	a802      	add	r0, sp, #8
   13910:	f7ff ffae 	bl	13870 <sqr_mont_384x>
   13914:	f8cd 9000 	str.w	r9, [sp]
   13918:	463b      	mov	r3, r7
   1391a:	aa02      	add	r2, sp, #8
   1391c:	4641      	mov	r1, r8
   1391e:	4628      	mov	r0, r5
   13920:	f7fc fd18 	bl	10354 <mul_mont_384x>
   13924:	f8cd 9000 	str.w	r9, [sp]
   13928:	463b      	mov	r3, r7
   1392a:	aa1a      	add	r2, sp, #104	; 0x68
   1392c:	a902      	add	r1, sp, #8
   1392e:	4608      	mov	r0, r1
   13930:	f7fc fd10 	bl	10354 <mul_mont_384x>
   13934:	f8cd 9000 	str.w	r9, [sp]
   13938:	463b      	mov	r3, r7
   1393a:	aa02      	add	r2, sp, #8
   1393c:	f108 0160 	add.w	r1, r8, #96	; 0x60
   13940:	f105 0060 	add.w	r0, r5, #96	; 0x60
   13944:	f7fc fd06 	bl	10354 <mul_mont_384x>
   13948:	1e73      	subs	r3, r6, #1
   1394a:	ea23 0606 	bic.w	r6, r3, r6
   1394e:	17f6      	asrs	r6, r6, #31
   13950:	f507 6164 	add.w	r1, r7, #3648	; 0xe40
   13954:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   13958:	f507 656a 	add.w	r5, r7, #3744	; 0xea0
   1395c:	f851 3b04 	ldr.w	r3, [r1], #4
   13960:	f854 2f04 	ldr.w	r2, [r4, #4]!
   13964:	405a      	eors	r2, r3
   13966:	4032      	ands	r2, r6
   13968:	405a      	eors	r2, r3
   1396a:	f840 2f04 	str.w	r2, [r0, #4]!
   1396e:	42a9      	cmp	r1, r5
   13970:	d1f4      	bne.n	1395c <POINTonE2_from_Jacobian+0x82>
   13972:	b033      	add	sp, #204	; 0xcc
   13974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13978:	fffcfffd 	.word	0xfffcfffd
   1397c:	00024108 	.word	0x00024108

00013980 <blst_p2_from_jacobian>:
   13980:	b508      	push	{r3, lr}
   13982:	f7ff ffaa 	bl	138da <POINTonE2_from_Jacobian>
   13986:	bd08      	pop	{r3, pc}

00013988 <POINTonE2_to_affine>:
   13988:	b530      	push	{r4, r5, lr}
   1398a:	b0c9      	sub	sp, #292	; 0x124
   1398c:	4604      	mov	r4, r0
   1398e:	f101 0cbc 	add.w	ip, r1, #188	; 0xbc
   13992:	4b10      	ldr	r3, [pc, #64]	; (139d4 <POINTonE2_to_affine+0x4c>)
   13994:	f103 0290 	add.w	r2, r3, #144	; 0x90
   13998:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   1399c:	2000      	movs	r0, #0
   1399e:	f852 3b04 	ldr.w	r3, [r2], #4
   139a2:	f85c 5f04 	ldr.w	r5, [ip, #4]!
   139a6:	406b      	eors	r3, r5
   139a8:	4318      	orrs	r0, r3
   139aa:	4572      	cmp	r2, lr
   139ac:	d1f7      	bne.n	1399e <POINTonE2_to_affine+0x16>
   139ae:	1e43      	subs	r3, r0, #1
   139b0:	4383      	bics	r3, r0
   139b2:	d50a      	bpl.n	139ca <POINTonE2_to_affine+0x42>
   139b4:	1f0b      	subs	r3, r1, #4
   139b6:	1f20      	subs	r0, r4, #4
   139b8:	31bc      	adds	r1, #188	; 0xbc
   139ba:	f853 2f04 	ldr.w	r2, [r3, #4]!
   139be:	f840 2f04 	str.w	r2, [r0, #4]!
   139c2:	428b      	cmp	r3, r1
   139c4:	d1f9      	bne.n	139ba <POINTonE2_to_affine+0x32>
   139c6:	b049      	add	sp, #292	; 0x124
   139c8:	bd30      	pop	{r4, r5, pc}
   139ca:	4668      	mov	r0, sp
   139cc:	f7ff ff85 	bl	138da <POINTonE2_from_Jacobian>
   139d0:	4669      	mov	r1, sp
   139d2:	e7ef      	b.n	139b4 <POINTonE2_to_affine+0x2c>
   139d4:	00024108 	.word	0x00024108

000139d8 <blst_p2_to_affine>:
   139d8:	b508      	push	{r3, lr}
   139da:	f7ff ffd5 	bl	13988 <POINTonE2_to_affine>
   139de:	bd08      	pop	{r3, pc}

000139e0 <POINTonE2_Serialize_BE>:
   139e0:	b570      	push	{r4, r5, r6, lr}
   139e2:	b0c8      	sub	sp, #288	; 0x120
   139e4:	4606      	mov	r6, r0
   139e6:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   139ea:	4d0f      	ldr	r5, [pc, #60]	; (13a28 <POINTonE2_Serialize_BE+0x48>)
   139ec:	f105 0290 	add.w	r2, r5, #144	; 0x90
   139f0:	35f0      	adds	r5, #240	; 0xf0
   139f2:	f04f 0c00 	mov.w	ip, #0
   139f6:	f852 3b04 	ldr.w	r3, [r2], #4
   139fa:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   139fe:	4063      	eors	r3, r4
   13a00:	ea4c 0c03 	orr.w	ip, ip, r3
   13a04:	42aa      	cmp	r2, r5
   13a06:	d1f6      	bne.n	139f6 <POINTonE2_Serialize_BE+0x16>
   13a08:	f10c 33ff 	add.w	r3, ip, #4294967295
   13a0c:	ea33 030c 	bics.w	r3, r3, ip
   13a10:	d504      	bpl.n	13a1c <POINTonE2_Serialize_BE+0x3c>
   13a12:	4630      	mov	r0, r6
   13a14:	f7f9 ff18 	bl	d848 <POINTonE2_affine_Serialize_BE>
   13a18:	b048      	add	sp, #288	; 0x120
   13a1a:	bd70      	pop	{r4, r5, r6, pc}
   13a1c:	4668      	mov	r0, sp
   13a1e:	f7ff ff5c 	bl	138da <POINTonE2_from_Jacobian>
   13a22:	4669      	mov	r1, sp
   13a24:	e7f5      	b.n	13a12 <POINTonE2_Serialize_BE+0x32>
   13a26:	bf00      	nop
   13a28:	00024108 	.word	0x00024108

00013a2c <blst_p2_serialize>:
   13a2c:	b510      	push	{r4, lr}
   13a2e:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   13a32:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   13a36:	2200      	movs	r2, #0
   13a38:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13a3c:	4322      	orrs	r2, r4
   13a3e:	4563      	cmp	r3, ip
   13a40:	d1fa      	bne.n	13a38 <blst_p2_serialize+0xc>
   13a42:	1e53      	subs	r3, r2, #1
   13a44:	4393      	bics	r3, r2
   13a46:	d50a      	bpl.n	13a5e <blst_p2_serialize+0x32>
   13a48:	1e43      	subs	r3, r0, #1
   13a4a:	f100 01bf 	add.w	r1, r0, #191	; 0xbf
   13a4e:	2200      	movs	r2, #0
   13a50:	f803 2f01 	strb.w	r2, [r3, #1]!
   13a54:	428b      	cmp	r3, r1
   13a56:	d1fb      	bne.n	13a50 <blst_p2_serialize+0x24>
   13a58:	2340      	movs	r3, #64	; 0x40
   13a5a:	7003      	strb	r3, [r0, #0]
   13a5c:	bd10      	pop	{r4, pc}
   13a5e:	f7ff ffbf 	bl	139e0 <POINTonE2_Serialize_BE>
   13a62:	e7fb      	b.n	13a5c <blst_p2_serialize+0x30>

00013a64 <POINTonE2_Compress_BE>:
   13a64:	b570      	push	{r4, r5, r6, lr}
   13a66:	b0c8      	sub	sp, #288	; 0x120
   13a68:	4606      	mov	r6, r0
   13a6a:	f101 0ebc 	add.w	lr, r1, #188	; 0xbc
   13a6e:	4d0f      	ldr	r5, [pc, #60]	; (13aac <POINTonE2_Compress_BE+0x48>)
   13a70:	f105 0290 	add.w	r2, r5, #144	; 0x90
   13a74:	35f0      	adds	r5, #240	; 0xf0
   13a76:	f04f 0c00 	mov.w	ip, #0
   13a7a:	f852 3b04 	ldr.w	r3, [r2], #4
   13a7e:	f85e 4f04 	ldr.w	r4, [lr, #4]!
   13a82:	4063      	eors	r3, r4
   13a84:	ea4c 0c03 	orr.w	ip, ip, r3
   13a88:	42aa      	cmp	r2, r5
   13a8a:	d1f6      	bne.n	13a7a <POINTonE2_Compress_BE+0x16>
   13a8c:	f10c 33ff 	add.w	r3, ip, #4294967295
   13a90:	ea33 030c 	bics.w	r3, r3, ip
   13a94:	d504      	bpl.n	13aa0 <POINTonE2_Compress_BE+0x3c>
   13a96:	4630      	mov	r0, r6
   13a98:	f7f9 fe4e 	bl	d738 <POINTonE2_affine_Compress_BE>
   13a9c:	b048      	add	sp, #288	; 0x120
   13a9e:	bd70      	pop	{r4, r5, r6, pc}
   13aa0:	4668      	mov	r0, sp
   13aa2:	f7ff ff1a 	bl	138da <POINTonE2_from_Jacobian>
   13aa6:	4669      	mov	r1, sp
   13aa8:	e7f5      	b.n	13a96 <POINTonE2_Compress_BE+0x32>
   13aaa:	bf00      	nop
   13aac:	00024108 	.word	0x00024108

00013ab0 <blst_p2_compress>:
   13ab0:	b538      	push	{r3, r4, r5, lr}
   13ab2:	4605      	mov	r5, r0
   13ab4:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   13ab8:	f501 7c8e 	add.w	ip, r1, #284	; 0x11c
   13abc:	2200      	movs	r2, #0
   13abe:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13ac2:	4322      	orrs	r2, r4
   13ac4:	4563      	cmp	r3, ip
   13ac6:	d1fa      	bne.n	13abe <blst_p2_compress+0xe>
   13ac8:	1e53      	subs	r3, r2, #1
   13aca:	4393      	bics	r3, r2
   13acc:	d50a      	bpl.n	13ae4 <blst_p2_compress+0x34>
   13ace:	1e6b      	subs	r3, r5, #1
   13ad0:	f105 015f 	add.w	r1, r5, #95	; 0x5f
   13ad4:	2200      	movs	r2, #0
   13ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
   13ada:	428b      	cmp	r3, r1
   13adc:	d1fb      	bne.n	13ad6 <blst_p2_compress+0x26>
   13ade:	23c0      	movs	r3, #192	; 0xc0
   13ae0:	702b      	strb	r3, [r5, #0]
   13ae2:	bd38      	pop	{r3, r4, r5, pc}
   13ae4:	4628      	mov	r0, r5
   13ae6:	f7ff ffbd 	bl	13a64 <POINTonE2_Compress_BE>
   13aea:	0103      	lsls	r3, r0, #4
   13aec:	f003 0320 	and.w	r3, r3, #32
   13af0:	782a      	ldrb	r2, [r5, #0]
   13af2:	4313      	orrs	r3, r2
   13af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13af8:	702b      	strb	r3, [r5, #0]
   13afa:	e7f2      	b.n	13ae2 <blst_p2_compress+0x32>

00013afc <POINTonE2_affine_on_curve>:
   13afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b00:	b0b2      	sub	sp, #200	; 0xc8
   13b02:	4604      	mov	r4, r0
   13b04:	4e29      	ldr	r6, [pc, #164]	; (13bac <POINTonE2_affine_on_curve+0xb0>)
   13b06:	4d2a      	ldr	r5, [pc, #168]	; (13bb0 <POINTonE2_affine_on_curve+0xb4>)
   13b08:	4633      	mov	r3, r6
   13b0a:	462a      	mov	r2, r5
   13b0c:	4601      	mov	r1, r0
   13b0e:	a81a      	add	r0, sp, #104	; 0x68
   13b10:	f7ff feae 	bl	13870 <sqr_mont_384x>
   13b14:	9600      	str	r6, [sp, #0]
   13b16:	462b      	mov	r3, r5
   13b18:	4622      	mov	r2, r4
   13b1a:	a91a      	add	r1, sp, #104	; 0x68
   13b1c:	4608      	mov	r0, r1
   13b1e:	f7fc fc19 	bl	10354 <mul_mont_384x>
   13b22:	4f24      	ldr	r7, [pc, #144]	; (13bb4 <POINTonE2_affine_on_curve+0xb8>)
   13b24:	f04f 080c 	mov.w	r8, #12
   13b28:	f8cd 8000 	str.w	r8, [sp]
   13b2c:	462b      	mov	r3, r5
   13b2e:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   13b32:	a91a      	add	r1, sp, #104	; 0x68
   13b34:	4608      	mov	r0, r1
   13b36:	f7f9 f8f3 	bl	cd20 <add_mod_n>
   13b3a:	f8cd 8000 	str.w	r8, [sp]
   13b3e:	462b      	mov	r3, r5
   13b40:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   13b44:	a926      	add	r1, sp, #152	; 0x98
   13b46:	4608      	mov	r0, r1
   13b48:	f7f9 f8ea 	bl	cd20 <add_mod_n>
   13b4c:	4633      	mov	r3, r6
   13b4e:	462a      	mov	r2, r5
   13b50:	f104 0160 	add.w	r1, r4, #96	; 0x60
   13b54:	a802      	add	r0, sp, #8
   13b56:	f7ff fe8b 	bl	13870 <sqr_mont_384x>
   13b5a:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
   13b5e:	aa01      	add	r2, sp, #4
   13b60:	a831      	add	r0, sp, #196	; 0xc4
   13b62:	f04f 0e00 	mov.w	lr, #0
   13b66:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   13b6a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   13b6e:	404b      	eors	r3, r1
   13b70:	ea4e 0e03 	orr.w	lr, lr, r3
   13b74:	4584      	cmp	ip, r0
   13b76:	d1f6      	bne.n	13b66 <POINTonE2_affine_on_curve+0x6a>
   13b78:	f10e 30ff 	add.w	r0, lr, #4294967295
   13b7c:	ea20 0e0e 	bic.w	lr, r0, lr
   13b80:	ea4f 7ede 	mov.w	lr, lr, lsr #31
   13b84:	1f23      	subs	r3, r4, #4
   13b86:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
   13b8a:	f04f 0c00 	mov.w	ip, #0
   13b8e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13b92:	ea4c 0c02 	orr.w	ip, ip, r2
   13b96:	428b      	cmp	r3, r1
   13b98:	d1f9      	bne.n	13b8e <POINTonE2_affine_on_curve+0x92>
   13b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
   13b9e:	ea20 000c 	bic.w	r0, r0, ip
   13ba2:	ea4e 70d0 	orr.w	r0, lr, r0, lsr #31
   13ba6:	b032      	add	sp, #200	; 0xc8
   13ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13bac:	fffcfffd 	.word	0xfffcfffd
   13bb0:	00024108 	.word	0x00024108
   13bb4:	00025200 	.word	0x00025200

00013bb8 <blst_p2_affine_on_curve>:
   13bb8:	b508      	push	{r3, lr}
   13bba:	f7ff ff9f 	bl	13afc <POINTonE2_affine_on_curve>
   13bbe:	bd08      	pop	{r3, pc}

00013bc0 <POINTonE2_Deserialize_BE>:
   13bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bc4:	b0be      	sub	sp, #248	; 0xf8
   13bc6:	4604      	mov	r4, r0
   13bc8:	f101 0230 	add.w	r2, r1, #48	; 0x30
   13bcc:	4608      	mov	r0, r1
   13bce:	2500      	movs	r5, #0
   13bd0:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   13bd4:	1a3b      	subs	r3, r7, r0
   13bd6:	f810 6b01 	ldrb.w	r6, [r0], #1
   13bda:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   13bde:	f023 0303 	bic.w	r3, r3, #3
   13be2:	ae3e      	add	r6, sp, #248	; 0xf8
   13be4:	4433      	add	r3, r6
   13be6:	f843 5c90 	str.w	r5, [r3, #-144]
   13bea:	4290      	cmp	r0, r2
   13bec:	d1f2      	bne.n	13bd4 <POINTonE2_Deserialize_BE+0x14>
   13bee:	f101 0060 	add.w	r0, r1, #96	; 0x60
   13bf2:	2500      	movs	r5, #0
   13bf4:	f101 075f 	add.w	r7, r1, #95	; 0x5f
   13bf8:	1abb      	subs	r3, r7, r2
   13bfa:	f812 6b01 	ldrb.w	r6, [r2], #1
   13bfe:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   13c02:	f023 0303 	bic.w	r3, r3, #3
   13c06:	ae3e      	add	r6, sp, #248	; 0xf8
   13c08:	4433      	add	r3, r6
   13c0a:	f843 5cc0 	str.w	r5, [r3, #-192]
   13c0e:	4282      	cmp	r2, r0
   13c10:	d1f2      	bne.n	13bf8 <POINTonE2_Deserialize_BE+0x38>
   13c12:	f101 0290 	add.w	r2, r1, #144	; 0x90
   13c16:	2500      	movs	r5, #0
   13c18:	f101 078f 	add.w	r7, r1, #143	; 0x8f
   13c1c:	1a3b      	subs	r3, r7, r0
   13c1e:	f810 6b01 	ldrb.w	r6, [r0], #1
   13c22:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   13c26:	f023 0303 	bic.w	r3, r3, #3
   13c2a:	ae3e      	add	r6, sp, #248	; 0xf8
   13c2c:	4433      	add	r3, r6
   13c2e:	f843 5c30 	str.w	r5, [r3, #-48]
   13c32:	4290      	cmp	r0, r2
   13c34:	d1f2      	bne.n	13c1c <POINTonE2_Deserialize_BE+0x5c>
   13c36:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
   13c3a:	2000      	movs	r0, #0
   13c3c:	31bf      	adds	r1, #191	; 0xbf
   13c3e:	1a8b      	subs	r3, r1, r2
   13c40:	f812 5b01 	ldrb.w	r5, [r2], #1
   13c44:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   13c48:	f023 0303 	bic.w	r3, r3, #3
   13c4c:	ad3e      	add	r5, sp, #248	; 0xf8
   13c4e:	442b      	add	r3, r5
   13c50:	f843 0c60 	str.w	r0, [r3, #-96]
   13c54:	42b2      	cmp	r2, r6
   13c56:	d1f2      	bne.n	13c3e <POINTonE2_Deserialize_BE+0x7e>
   13c58:	9b25      	ldr	r3, [sp, #148]	; 0x94
   13c5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   13c5e:	9325      	str	r3, [sp, #148]	; 0x94
   13c60:	4b55      	ldr	r3, [pc, #340]	; (13db8 <POINTonE2_Deserialize_BE+0x1f8>)
   13c62:	220c      	movs	r2, #12
   13c64:	9200      	str	r2, [sp, #0]
   13c66:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   13c6a:	a91a      	add	r1, sp, #104	; 0x68
   13c6c:	a802      	add	r0, sp, #8
   13c6e:	f7f9 f857 	bl	cd20 <add_mod_n>
   13c72:	ae02      	add	r6, sp, #8
   13c74:	a819      	add	r0, sp, #100	; 0x64
   13c76:	ad0e      	add	r5, sp, #56	; 0x38
   13c78:	4632      	mov	r2, r6
   13c7a:	2100      	movs	r1, #0
   13c7c:	f852 3b04 	ldr.w	r3, [r2], #4
   13c80:	f850 7f04 	ldr.w	r7, [r0, #4]!
   13c84:	407b      	eors	r3, r7
   13c86:	4319      	orrs	r1, r3
   13c88:	42aa      	cmp	r2, r5
   13c8a:	d1f7      	bne.n	13c7c <POINTonE2_Deserialize_BE+0xbc>
   13c8c:	1e4b      	subs	r3, r1, #1
   13c8e:	438b      	bics	r3, r1
   13c90:	d403      	bmi.n	13c9a <POINTonE2_Deserialize_BE+0xda>
   13c92:	2001      	movs	r0, #1
   13c94:	b03e      	add	sp, #248	; 0xf8
   13c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c9a:	4b47      	ldr	r3, [pc, #284]	; (13db8 <POINTonE2_Deserialize_BE+0x1f8>)
   13c9c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   13ca0:	220c      	movs	r2, #12
   13ca2:	9200      	str	r2, [sp, #0]
   13ca4:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   13ca8:	4641      	mov	r1, r8
   13caa:	a802      	add	r0, sp, #8
   13cac:	f7f9 f838 	bl	cd20 <add_mod_n>
   13cb0:	46c2      	mov	sl, r8
   13cb2:	4641      	mov	r1, r8
   13cb4:	4632      	mov	r2, r6
   13cb6:	2000      	movs	r0, #0
   13cb8:	f852 3b04 	ldr.w	r3, [r2], #4
   13cbc:	f851 7b04 	ldr.w	r7, [r1], #4
   13cc0:	407b      	eors	r3, r7
   13cc2:	4318      	orrs	r0, r3
   13cc4:	42aa      	cmp	r2, r5
   13cc6:	d1f7      	bne.n	13cb8 <POINTonE2_Deserialize_BE+0xf8>
   13cc8:	1e43      	subs	r3, r0, #1
   13cca:	4383      	bics	r3, r0
   13ccc:	d401      	bmi.n	13cd2 <POINTonE2_Deserialize_BE+0x112>
   13cce:	2001      	movs	r0, #1
   13cd0:	e7e0      	b.n	13c94 <POINTonE2_Deserialize_BE+0xd4>
   13cd2:	4b39      	ldr	r3, [pc, #228]	; (13db8 <POINTonE2_Deserialize_BE+0x1f8>)
   13cd4:	220c      	movs	r2, #12
   13cd6:	9200      	str	r2, [sp, #0]
   13cd8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   13cdc:	a932      	add	r1, sp, #200	; 0xc8
   13cde:	a802      	add	r0, sp, #8
   13ce0:	f7f9 f81e 	bl	cd20 <add_mod_n>
   13ce4:	a831      	add	r0, sp, #196	; 0xc4
   13ce6:	4632      	mov	r2, r6
   13ce8:	2100      	movs	r1, #0
   13cea:	f852 3b04 	ldr.w	r3, [r2], #4
   13cee:	f850 7f04 	ldr.w	r7, [r0, #4]!
   13cf2:	407b      	eors	r3, r7
   13cf4:	4319      	orrs	r1, r3
   13cf6:	42aa      	cmp	r2, r5
   13cf8:	d1f7      	bne.n	13cea <POINTonE2_Deserialize_BE+0x12a>
   13cfa:	1e4b      	subs	r3, r1, #1
   13cfc:	438b      	bics	r3, r1
   13cfe:	d401      	bmi.n	13d04 <POINTonE2_Deserialize_BE+0x144>
   13d00:	2001      	movs	r0, #1
   13d02:	e7c7      	b.n	13c94 <POINTonE2_Deserialize_BE+0xd4>
   13d04:	4b2c      	ldr	r3, [pc, #176]	; (13db8 <POINTonE2_Deserialize_BE+0x1f8>)
   13d06:	220c      	movs	r2, #12
   13d08:	9200      	str	r2, [sp, #0]
   13d0a:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   13d0e:	a926      	add	r1, sp, #152	; 0x98
   13d10:	a802      	add	r0, sp, #8
   13d12:	f7f9 f805 	bl	cd20 <add_mod_n>
   13d16:	a925      	add	r1, sp, #148	; 0x94
   13d18:	2200      	movs	r2, #0
   13d1a:	f856 3b04 	ldr.w	r3, [r6], #4
   13d1e:	f851 0f04 	ldr.w	r0, [r1, #4]!
   13d22:	4043      	eors	r3, r0
   13d24:	431a      	orrs	r2, r3
   13d26:	42ae      	cmp	r6, r5
   13d28:	d1f7      	bne.n	13d1a <POINTonE2_Deserialize_BE+0x15a>
   13d2a:	1e53      	subs	r3, r2, #1
   13d2c:	4393      	bics	r3, r2
   13d2e:	d401      	bmi.n	13d34 <POINTonE2_Deserialize_BE+0x174>
   13d30:	2001      	movs	r0, #1
   13d32:	e7af      	b.n	13c94 <POINTonE2_Deserialize_BE+0xd4>
   13d34:	4d20      	ldr	r5, [pc, #128]	; (13db8 <POINTonE2_Deserialize_BE+0x1f8>)
   13d36:	f505 7634 	add.w	r6, r5, #720	; 0x2d0
   13d3a:	f04f 090c 	mov.w	r9, #12
   13d3e:	f8cd 9004 	str.w	r9, [sp, #4]
   13d42:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13dbc <POINTonE2_Deserialize_BE+0x1fc>
   13d46:	f8cd 8000 	str.w	r8, [sp]
   13d4a:	462b      	mov	r3, r5
   13d4c:	4632      	mov	r2, r6
   13d4e:	a90e      	add	r1, sp, #56	; 0x38
   13d50:	4608      	mov	r0, r1
   13d52:	f7f8 fe3d 	bl	c9d0 <mul_mont_n>
   13d56:	f8cd 9004 	str.w	r9, [sp, #4]
   13d5a:	f8cd 8000 	str.w	r8, [sp]
   13d5e:	462b      	mov	r3, r5
   13d60:	4632      	mov	r2, r6
   13d62:	a91a      	add	r1, sp, #104	; 0x68
   13d64:	4608      	mov	r0, r1
   13d66:	f7f8 fe33 	bl	c9d0 <mul_mont_n>
   13d6a:	f8cd 9004 	str.w	r9, [sp, #4]
   13d6e:	f8cd 8000 	str.w	r8, [sp]
   13d72:	462b      	mov	r3, r5
   13d74:	4632      	mov	r2, r6
   13d76:	a926      	add	r1, sp, #152	; 0x98
   13d78:	4608      	mov	r0, r1
   13d7a:	f7f8 fe29 	bl	c9d0 <mul_mont_n>
   13d7e:	f8cd 9004 	str.w	r9, [sp, #4]
   13d82:	f8cd 8000 	str.w	r8, [sp]
   13d86:	462b      	mov	r3, r5
   13d88:	4632      	mov	r2, r6
   13d8a:	a932      	add	r1, sp, #200	; 0xc8
   13d8c:	4608      	mov	r0, r1
   13d8e:	f7f8 fe1f 	bl	c9d0 <mul_mont_n>
   13d92:	a80e      	add	r0, sp, #56	; 0x38
   13d94:	f7ff feb2 	bl	13afc <POINTonE2_affine_on_curve>
   13d98:	b158      	cbz	r0, 13db2 <POINTonE2_Deserialize_BE+0x1f2>
   13d9a:	ab0d      	add	r3, sp, #52	; 0x34
   13d9c:	3c04      	subs	r4, #4
   13d9e:	f10a 07bc 	add.w	r7, sl, #188	; 0xbc
   13da2:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13da6:	f844 2f04 	str.w	r2, [r4, #4]!
   13daa:	429f      	cmp	r7, r3
   13dac:	d1f9      	bne.n	13da2 <POINTonE2_Deserialize_BE+0x1e2>
   13dae:	2000      	movs	r0, #0
   13db0:	e770      	b.n	13c94 <POINTonE2_Deserialize_BE+0xd4>
   13db2:	2002      	movs	r0, #2
   13db4:	e76e      	b.n	13c94 <POINTonE2_Deserialize_BE+0xd4>
   13db6:	bf00      	nop
   13db8:	00024108 	.word	0x00024108
   13dbc:	fffcfffd 	.word	0xfffcfffd

00013dc0 <POINTonE2_on_curve>:
   13dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13dc4:	b0ca      	sub	sp, #296	; 0x128
   13dc6:	4606      	mov	r6, r0
   13dc8:	f100 07c0 	add.w	r7, r0, #192	; 0xc0
   13dcc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   13dd0:	f500 758e 	add.w	r5, r0, #284	; 0x11c
   13dd4:	f04f 0c00 	mov.w	ip, #0
   13dd8:	f853 4f04 	ldr.w	r4, [r3, #4]!
   13ddc:	ea4c 0c04 	orr.w	ip, ip, r4
   13de0:	42ab      	cmp	r3, r5
   13de2:	d1f9      	bne.n	13dd8 <POINTonE2_on_curve+0x18>
   13de4:	f10c 35ff 	add.w	r5, ip, #4294967295
   13de8:	ea25 0c0c 	bic.w	ip, r5, ip
   13dec:	ea4f 75dc 	mov.w	r5, ip, lsr #31
   13df0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 13ec8 <POINTonE2_on_curve+0x108>
   13df4:	4c35      	ldr	r4, [pc, #212]	; (13ecc <POINTonE2_on_curve+0x10c>)
   13df6:	4643      	mov	r3, r8
   13df8:	4622      	mov	r2, r4
   13dfa:	4639      	mov	r1, r7
   13dfc:	a802      	add	r0, sp, #8
   13dfe:	f7ff fd37 	bl	13870 <sqr_mont_384x>
   13e02:	f8cd 8000 	str.w	r8, [sp]
   13e06:	4623      	mov	r3, r4
   13e08:	463a      	mov	r2, r7
   13e0a:	a902      	add	r1, sp, #8
   13e0c:	4608      	mov	r0, r1
   13e0e:	f7fc faa1 	bl	10354 <mul_mont_384x>
   13e12:	4643      	mov	r3, r8
   13e14:	4622      	mov	r2, r4
   13e16:	a902      	add	r1, sp, #8
   13e18:	a832      	add	r0, sp, #200	; 0xc8
   13e1a:	f7ff fd29 	bl	13870 <sqr_mont_384x>
   13e1e:	270c      	movs	r7, #12
   13e20:	9700      	str	r7, [sp, #0]
   13e22:	4623      	mov	r3, r4
   13e24:	aa3e      	add	r2, sp, #248	; 0xf8
   13e26:	a932      	add	r1, sp, #200	; 0xc8
   13e28:	a802      	add	r0, sp, #8
   13e2a:	f7f8 fc23 	bl	c674 <sub_mod_n>
   13e2e:	9700      	str	r7, [sp, #0]
   13e30:	4623      	mov	r3, r4
   13e32:	aa3e      	add	r2, sp, #248	; 0xf8
   13e34:	a932      	add	r1, sp, #200	; 0xc8
   13e36:	a80e      	add	r0, sp, #56	; 0x38
   13e38:	f7f8 ff72 	bl	cd20 <add_mod_n>
   13e3c:	9700      	str	r7, [sp, #0]
   13e3e:	4623      	mov	r3, r4
   13e40:	2202      	movs	r2, #2
   13e42:	a902      	add	r1, sp, #8
   13e44:	4608      	mov	r0, r1
   13e46:	f7f9 f893 	bl	cf70 <lshift_mod_n>
   13e4a:	9700      	str	r7, [sp, #0]
   13e4c:	4623      	mov	r3, r4
   13e4e:	2202      	movs	r2, #2
   13e50:	a90e      	add	r1, sp, #56	; 0x38
   13e52:	4608      	mov	r0, r1
   13e54:	f7f9 f88c 	bl	cf70 <lshift_mod_n>
   13e58:	4643      	mov	r3, r8
   13e5a:	4622      	mov	r2, r4
   13e5c:	4631      	mov	r1, r6
   13e5e:	a832      	add	r0, sp, #200	; 0xc8
   13e60:	f7ff fd06 	bl	13870 <sqr_mont_384x>
   13e64:	f8cd 8000 	str.w	r8, [sp]
   13e68:	4623      	mov	r3, r4
   13e6a:	4632      	mov	r2, r6
   13e6c:	a932      	add	r1, sp, #200	; 0xc8
   13e6e:	4608      	mov	r0, r1
   13e70:	f7fc fa70 	bl	10354 <mul_mont_384x>
   13e74:	9700      	str	r7, [sp, #0]
   13e76:	4623      	mov	r3, r4
   13e78:	aa02      	add	r2, sp, #8
   13e7a:	a932      	add	r1, sp, #200	; 0xc8
   13e7c:	4608      	mov	r0, r1
   13e7e:	f7f8 ff4f 	bl	cd20 <add_mod_n>
   13e82:	9700      	str	r7, [sp, #0]
   13e84:	4623      	mov	r3, r4
   13e86:	aa0e      	add	r2, sp, #56	; 0x38
   13e88:	a93e      	add	r1, sp, #248	; 0xf8
   13e8a:	4608      	mov	r0, r1
   13e8c:	f7f8 ff48 	bl	cd20 <add_mod_n>
   13e90:	4643      	mov	r3, r8
   13e92:	4622      	mov	r2, r4
   13e94:	f106 0160 	add.w	r1, r6, #96	; 0x60
   13e98:	a81a      	add	r0, sp, #104	; 0x68
   13e9a:	f7ff fce9 	bl	13870 <sqr_mont_384x>
   13e9e:	aa31      	add	r2, sp, #196	; 0xc4
   13ea0:	a919      	add	r1, sp, #100	; 0x64
   13ea2:	f50d 7c92 	add.w	ip, sp, #292	; 0x124
   13ea6:	2000      	movs	r0, #0
   13ea8:	f852 3f04 	ldr.w	r3, [r2, #4]!
   13eac:	f851 4f04 	ldr.w	r4, [r1, #4]!
   13eb0:	4063      	eors	r3, r4
   13eb2:	4318      	orrs	r0, r3
   13eb4:	4562      	cmp	r2, ip
   13eb6:	d1f7      	bne.n	13ea8 <POINTonE2_on_curve+0xe8>
   13eb8:	1e43      	subs	r3, r0, #1
   13eba:	ea23 0000 	bic.w	r0, r3, r0
   13ebe:	ea45 70d0 	orr.w	r0, r5, r0, lsr #31
   13ec2:	b04a      	add	sp, #296	; 0x128
   13ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ec8:	fffcfffd 	.word	0xfffcfffd
   13ecc:	00024108 	.word	0x00024108

00013ed0 <blst_p2_on_curve>:
   13ed0:	b508      	push	{r3, lr}
   13ed2:	f7ff ff75 	bl	13dc0 <POINTonE2_on_curve>
   13ed6:	bd08      	pop	{r3, pc}

00013ed8 <sqrt_align_fp2>:
   13ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13edc:	b0cd      	sub	sp, #308	; 0x134
   13ede:	9002      	str	r0, [sp, #8]
   13ee0:	9103      	str	r1, [sp, #12]
   13ee2:	4611      	mov	r1, r2
   13ee4:	461f      	mov	r7, r3
   13ee6:	4c6d      	ldr	r4, [pc, #436]	; (1409c <sqrt_align_fp2+0x1c4>)
   13ee8:	4b6d      	ldr	r3, [pc, #436]	; (140a0 <sqrt_align_fp2+0x1c8>)
   13eea:	4622      	mov	r2, r4
   13eec:	a81c      	add	r0, sp, #112	; 0x70
   13eee:	f7ff fcbf 	bl	13870 <sqr_mont_384x>
   13ef2:	250c      	movs	r5, #12
   13ef4:	9500      	str	r5, [sp, #0]
   13ef6:	4623      	mov	r3, r4
   13ef8:	463a      	mov	r2, r7
   13efa:	a91c      	add	r1, sp, #112	; 0x70
   13efc:	a804      	add	r0, sp, #16
   13efe:	f7f8 fbb9 	bl	c674 <sub_mod_n>
   13f02:	f107 0930 	add.w	r9, r7, #48	; 0x30
   13f06:	9500      	str	r5, [sp, #0]
   13f08:	4623      	mov	r3, r4
   13f0a:	464a      	mov	r2, r9
   13f0c:	a928      	add	r1, sp, #160	; 0xa0
   13f0e:	a810      	add	r0, sp, #64	; 0x40
   13f10:	f7f8 fbb0 	bl	c674 <sub_mod_n>
   13f14:	eb0d 0605 	add.w	r6, sp, r5
   13f18:	ac1b      	add	r4, sp, #108	; 0x6c
   13f1a:	4633      	mov	r3, r6
   13f1c:	2200      	movs	r2, #0
   13f1e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   13f22:	430a      	orrs	r2, r1
   13f24:	42a3      	cmp	r3, r4
   13f26:	d1fa      	bne.n	13f1e <sqrt_align_fp2+0x46>
   13f28:	f102 38ff 	add.w	r8, r2, #4294967295
   13f2c:	ea28 0802 	bic.w	r8, r8, r2
   13f30:	ea4f 78d8 	mov.w	r8, r8, lsr #31
   13f34:	4859      	ldr	r0, [pc, #356]	; (1409c <sqrt_align_fp2+0x1c4>)
   13f36:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   13f3a:	ad33      	add	r5, sp, #204	; 0xcc
   13f3c:	30ec      	adds	r0, #236	; 0xec
   13f3e:	462a      	mov	r2, r5
   13f40:	f853 1f04 	ldr.w	r1, [r3, #4]!
   13f44:	f842 1f04 	str.w	r1, [r2, #4]!
   13f48:	4283      	cmp	r3, r0
   13f4a:	d1f9      	bne.n	13f40 <sqrt_align_fp2+0x68>
   13f4c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 1409c <sqrt_align_fp2+0x1c4>
   13f50:	f04f 0b0c 	mov.w	fp, #12
   13f54:	f8cd b000 	str.w	fp, [sp]
   13f58:	4653      	mov	r3, sl
   13f5a:	463a      	mov	r2, r7
   13f5c:	a91c      	add	r1, sp, #112	; 0x70
   13f5e:	a804      	add	r0, sp, #16
   13f60:	f7f8 fede 	bl	cd20 <add_mod_n>
   13f64:	f8cd b000 	str.w	fp, [sp]
   13f68:	4653      	mov	r3, sl
   13f6a:	464a      	mov	r2, r9
   13f6c:	a928      	add	r1, sp, #160	; 0xa0
   13f6e:	a810      	add	r0, sp, #64	; 0x40
   13f70:	f7f8 fed6 	bl	cd20 <add_mod_n>
   13f74:	4633      	mov	r3, r6
   13f76:	2200      	movs	r2, #0
   13f78:	f853 1f04 	ldr.w	r1, [r3, #4]!
   13f7c:	430a      	orrs	r2, r1
   13f7e:	42a3      	cmp	r3, r4
   13f80:	d1fa      	bne.n	13f78 <sqrt_align_fp2+0xa0>
   13f82:	f102 3cff 	add.w	ip, r2, #4294967295
   13f86:	ea2c 0c02 	bic.w	ip, ip, r2
   13f8a:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   13f8e:	ea4f 7cec 	mov.w	ip, ip, asr #31
   13f92:	4b44      	ldr	r3, [pc, #272]	; (140a4 <sqrt_align_fp2+0x1cc>)
   13f94:	f203 41bc 	addw	r1, r3, #1212	; 0x4bc
   13f98:	f203 5e1c 	addw	lr, r3, #1308	; 0x51c
   13f9c:	462a      	mov	r2, r5
   13f9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   13fa2:	f851 3f04 	ldr.w	r3, [r1, #4]!
   13fa6:	4043      	eors	r3, r0
   13fa8:	ea03 030c 	and.w	r3, r3, ip
   13fac:	4043      	eors	r3, r0
   13fae:	6013      	str	r3, [r2, #0]
   13fb0:	4571      	cmp	r1, lr
   13fb2:	d1f4      	bne.n	13f9e <sqrt_align_fp2+0xc6>
   13fb4:	ea48 080a 	orr.w	r8, r8, sl
   13fb8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1409c <sqrt_align_fp2+0x1c4>
   13fbc:	f04f 0b0c 	mov.w	fp, #12
   13fc0:	f8cd b000 	str.w	fp, [sp]
   13fc4:	4653      	mov	r3, sl
   13fc6:	464a      	mov	r2, r9
   13fc8:	a91c      	add	r1, sp, #112	; 0x70
   13fca:	a804      	add	r0, sp, #16
   13fcc:	f7f8 fb52 	bl	c674 <sub_mod_n>
   13fd0:	f8cd b000 	str.w	fp, [sp]
   13fd4:	4653      	mov	r3, sl
   13fd6:	463a      	mov	r2, r7
   13fd8:	a928      	add	r1, sp, #160	; 0xa0
   13fda:	a810      	add	r0, sp, #64	; 0x40
   13fdc:	f7f8 fea0 	bl	cd20 <add_mod_n>
   13fe0:	4633      	mov	r3, r6
   13fe2:	2200      	movs	r2, #0
   13fe4:	f853 1f04 	ldr.w	r1, [r3, #4]!
   13fe8:	430a      	orrs	r2, r1
   13fea:	42a3      	cmp	r3, r4
   13fec:	d1fa      	bne.n	13fe4 <sqrt_align_fp2+0x10c>
   13fee:	f102 3cff 	add.w	ip, r2, #4294967295
   13ff2:	ea2c 0c02 	bic.w	ip, ip, r2
   13ff6:	ea4f 7adc 	mov.w	sl, ip, lsr #31
   13ffa:	ea4f 7cec 	mov.w	ip, ip, asr #31
   13ffe:	4b29      	ldr	r3, [pc, #164]	; (140a4 <sqrt_align_fp2+0x1cc>)
   14000:	f203 511c 	addw	r1, r3, #1308	; 0x51c
   14004:	f203 5e7c 	addw	lr, r3, #1404	; 0x57c
   14008:	462a      	mov	r2, r5
   1400a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1400e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   14012:	4043      	eors	r3, r0
   14014:	ea03 030c 	and.w	r3, r3, ip
   14018:	4043      	eors	r3, r0
   1401a:	6013      	str	r3, [r2, #0]
   1401c:	4571      	cmp	r1, lr
   1401e:	d1f4      	bne.n	1400a <sqrt_align_fp2+0x132>
   14020:	ea48 080a 	orr.w	r8, r8, sl
   14024:	f8df a074 	ldr.w	sl, [pc, #116]	; 1409c <sqrt_align_fp2+0x1c4>
   14028:	f04f 0b0c 	mov.w	fp, #12
   1402c:	f8cd b000 	str.w	fp, [sp]
   14030:	4653      	mov	r3, sl
   14032:	464a      	mov	r2, r9
   14034:	a91c      	add	r1, sp, #112	; 0x70
   14036:	a804      	add	r0, sp, #16
   14038:	f7f8 fe72 	bl	cd20 <add_mod_n>
   1403c:	f8cd b000 	str.w	fp, [sp]
   14040:	4653      	mov	r3, sl
   14042:	463a      	mov	r2, r7
   14044:	a928      	add	r1, sp, #160	; 0xa0
   14046:	a810      	add	r0, sp, #64	; 0x40
   14048:	f7f8 fb14 	bl	c674 <sub_mod_n>
   1404c:	2300      	movs	r3, #0
   1404e:	f856 2f04 	ldr.w	r2, [r6, #4]!
   14052:	4313      	orrs	r3, r2
   14054:	42a6      	cmp	r6, r4
   14056:	d1fa      	bne.n	1404e <sqrt_align_fp2+0x176>
   14058:	1e5c      	subs	r4, r3, #1
   1405a:	ea24 0303 	bic.w	r3, r4, r3
   1405e:	0fd8      	lsrs	r0, r3, #31
   14060:	17dc      	asrs	r4, r3, #31
   14062:	4e10      	ldr	r6, [pc, #64]	; (140a4 <sqrt_align_fp2+0x1cc>)
   14064:	f206 527c 	addw	r2, r6, #1404	; 0x57c
   14068:	f206 56dc 	addw	r6, r6, #1500	; 0x5dc
   1406c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   14070:	f852 3f04 	ldr.w	r3, [r2, #4]!
   14074:	404b      	eors	r3, r1
   14076:	4023      	ands	r3, r4
   14078:	404b      	eors	r3, r1
   1407a:	602b      	str	r3, [r5, #0]
   1407c:	42b2      	cmp	r2, r6
   1407e:	d1f5      	bne.n	1406c <sqrt_align_fp2+0x194>
   14080:	ea48 0800 	orr.w	r8, r8, r0
   14084:	4b06      	ldr	r3, [pc, #24]	; (140a0 <sqrt_align_fp2+0x1c8>)
   14086:	9300      	str	r3, [sp, #0]
   14088:	4b04      	ldr	r3, [pc, #16]	; (1409c <sqrt_align_fp2+0x1c4>)
   1408a:	aa34      	add	r2, sp, #208	; 0xd0
   1408c:	9903      	ldr	r1, [sp, #12]
   1408e:	9802      	ldr	r0, [sp, #8]
   14090:	f7fc f960 	bl	10354 <mul_mont_384x>
   14094:	4640      	mov	r0, r8
   14096:	b04d      	add	sp, #308	; 0x134
   14098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1409c:	00024108 	.word	0x00024108
   140a0:	fffcfffd 	.word	0xfffcfffd
   140a4:	00025200 	.word	0x00025200

000140a8 <sqrt_fp2>:
   140a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   140ac:	b0b2      	sub	sp, #200	; 0xc8
   140ae:	4682      	mov	sl, r0
   140b0:	460c      	mov	r4, r1
   140b2:	4f40      	ldr	r7, [pc, #256]	; (141b4 <sqrt_fp2+0x10c>)
   140b4:	250c      	movs	r5, #12
   140b6:	9501      	str	r5, [sp, #4]
   140b8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 141b8 <sqrt_fp2+0x110>
   140bc:	f8cd 9000 	str.w	r9, [sp]
   140c0:	463b      	mov	r3, r7
   140c2:	460a      	mov	r2, r1
   140c4:	a80e      	add	r0, sp, #56	; 0x38
   140c6:	f7f8 fc83 	bl	c9d0 <mul_mont_n>
   140ca:	f104 0630 	add.w	r6, r4, #48	; 0x30
   140ce:	9501      	str	r5, [sp, #4]
   140d0:	f8cd 9000 	str.w	r9, [sp]
   140d4:	463b      	mov	r3, r7
   140d6:	4632      	mov	r2, r6
   140d8:	4631      	mov	r1, r6
   140da:	a802      	add	r0, sp, #8
   140dc:	f7f8 fc78 	bl	c9d0 <mul_mont_n>
   140e0:	9500      	str	r5, [sp, #0]
   140e2:	463b      	mov	r3, r7
   140e4:	aa02      	add	r2, sp, #8
   140e6:	a90e      	add	r1, sp, #56	; 0x38
   140e8:	4608      	mov	r0, r1
   140ea:	f7f8 fe19 	bl	cd20 <add_mod_n>
   140ee:	a90e      	add	r1, sp, #56	; 0x38
   140f0:	4608      	mov	r0, r1
   140f2:	f7fd ffa3 	bl	1203c <sqrt_fp>
   140f6:	9500      	str	r5, [sp, #0]
   140f8:	463b      	mov	r3, r7
   140fa:	aa0e      	add	r2, sp, #56	; 0x38
   140fc:	4621      	mov	r1, r4
   140fe:	a802      	add	r0, sp, #8
   14100:	f7f8 fab8 	bl	c674 <sub_mod_n>
   14104:	9500      	str	r5, [sp, #0]
   14106:	463b      	mov	r3, r7
   14108:	aa0e      	add	r2, sp, #56	; 0x38
   1410a:	4621      	mov	r1, r4
   1410c:	4610      	mov	r0, r2
   1410e:	f7f8 fe07 	bl	cd20 <add_mod_n>
   14112:	a90e      	add	r1, sp, #56	; 0x38
   14114:	a81a      	add	r0, sp, #104	; 0x68
   14116:	468c      	mov	ip, r1
   14118:	2300      	movs	r3, #0
   1411a:	f85c 2b04 	ldr.w	r2, [ip], #4
   1411e:	4313      	orrs	r3, r2
   14120:	4584      	cmp	ip, r0
   14122:	d1fa      	bne.n	1411a <sqrt_fp2+0x72>
   14124:	f103 3cff 	add.w	ip, r3, #4294967295
   14128:	ea2c 0303 	bic.w	r3, ip, r3
   1412c:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   14130:	ab02      	add	r3, sp, #8
   14132:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   14136:	f853 2b04 	ldr.w	r2, [r3], #4
   1413a:	6808      	ldr	r0, [r1, #0]
   1413c:	4042      	eors	r2, r0
   1413e:	ea02 020c 	and.w	r2, r2, ip
   14142:	4042      	eors	r2, r0
   14144:	f841 2b04 	str.w	r2, [r1], #4
   14148:	4573      	cmp	r3, lr
   1414a:	d1f4      	bne.n	14136 <sqrt_fp2+0x8e>
   1414c:	4f19      	ldr	r7, [pc, #100]	; (141b4 <sqrt_fp2+0x10c>)
   1414e:	f04f 080c 	mov.w	r8, #12
   14152:	f8cd 8000 	str.w	r8, [sp]
   14156:	463b      	mov	r3, r7
   14158:	2201      	movs	r2, #1
   1415a:	a90e      	add	r1, sp, #56	; 0x38
   1415c:	4608      	mov	r0, r1
   1415e:	f7f8 faf1 	bl	c744 <rshift_mod_n>
   14162:	a90e      	add	r1, sp, #56	; 0x38
   14164:	a81a      	add	r0, sp, #104	; 0x68
   14166:	f7fe f90f 	bl	12388 <recip_sqrt_fp>
   1416a:	f8cd 8000 	str.w	r8, [sp]
   1416e:	463b      	mov	r3, r7
   14170:	2201      	movs	r2, #1
   14172:	4631      	mov	r1, r6
   14174:	a826      	add	r0, sp, #152	; 0x98
   14176:	f7f8 fae5 	bl	c744 <rshift_mod_n>
   1417a:	f8cd 8004 	str.w	r8, [sp, #4]
   1417e:	4e0e      	ldr	r6, [pc, #56]	; (141b8 <sqrt_fp2+0x110>)
   14180:	9600      	str	r6, [sp, #0]
   14182:	463b      	mov	r3, r7
   14184:	aa1a      	add	r2, sp, #104	; 0x68
   14186:	a926      	add	r1, sp, #152	; 0x98
   14188:	4608      	mov	r0, r1
   1418a:	f7f8 fc21 	bl	c9d0 <mul_mont_n>
   1418e:	f8cd 8004 	str.w	r8, [sp, #4]
   14192:	9600      	str	r6, [sp, #0]
   14194:	463b      	mov	r3, r7
   14196:	aa0e      	add	r2, sp, #56	; 0x38
   14198:	a91a      	add	r1, sp, #104	; 0x68
   1419a:	4608      	mov	r0, r1
   1419c:	f7f8 fc18 	bl	c9d0 <mul_mont_n>
   141a0:	4623      	mov	r3, r4
   141a2:	aa1a      	add	r2, sp, #104	; 0x68
   141a4:	4611      	mov	r1, r2
   141a6:	4650      	mov	r0, sl
   141a8:	f7ff fe96 	bl	13ed8 <sqrt_align_fp2>
   141ac:	b032      	add	sp, #200	; 0xc8
   141ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   141b2:	bf00      	nop
   141b4:	00024108 	.word	0x00024108
   141b8:	fffcfffd 	.word	0xfffcfffd

000141bc <blst_fp2_sqrt>:
   141bc:	b508      	push	{r3, lr}
   141be:	f7ff ff73 	bl	140a8 <sqrt_fp2>
   141c2:	bd08      	pop	{r3, pc}

000141c4 <POINTonE2_Uncompress_BE>:
   141c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   141c8:	b0d7      	sub	sp, #348	; 0x15c
   141ca:	4604      	mov	r4, r0
   141cc:	f101 0230 	add.w	r2, r1, #48	; 0x30
   141d0:	4608      	mov	r0, r1
   141d2:	2500      	movs	r5, #0
   141d4:	f101 072f 	add.w	r7, r1, #47	; 0x2f
   141d8:	1a3b      	subs	r3, r7, r0
   141da:	f810 6b01 	ldrb.w	r6, [r0], #1
   141de:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
   141e2:	f023 0303 	bic.w	r3, r3, #3
   141e6:	ae56      	add	r6, sp, #344	; 0x158
   141e8:	4433      	add	r3, r6
   141ea:	f843 5c90 	str.w	r5, [r3, #-144]
   141ee:	4290      	cmp	r0, r2
   141f0:	d1f2      	bne.n	141d8 <POINTonE2_Uncompress_BE+0x14>
   141f2:	f101 0660 	add.w	r6, r1, #96	; 0x60
   141f6:	2000      	movs	r0, #0
   141f8:	315f      	adds	r1, #95	; 0x5f
   141fa:	1a8b      	subs	r3, r1, r2
   141fc:	f812 5b01 	ldrb.w	r5, [r2], #1
   14200:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   14204:	f023 0303 	bic.w	r3, r3, #3
   14208:	ad56      	add	r5, sp, #344	; 0x158
   1420a:	442b      	add	r3, r5
   1420c:	f843 0cc0 	str.w	r0, [r3, #-192]
   14210:	42b2      	cmp	r2, r6
   14212:	d1f2      	bne.n	141fa <POINTonE2_Uncompress_BE+0x36>
   14214:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   14216:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   1421a:	933d      	str	r3, [sp, #244]	; 0xf4
   1421c:	4b64      	ldr	r3, [pc, #400]	; (143b0 <POINTonE2_Uncompress_BE+0x1ec>)
   1421e:	220c      	movs	r2, #12
   14220:	9200      	str	r2, [sp, #0]
   14222:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   14226:	a932      	add	r1, sp, #200	; 0xc8
   14228:	a81a      	add	r0, sp, #104	; 0x68
   1422a:	f7f8 fd79 	bl	cd20 <add_mod_n>
   1422e:	ad1a      	add	r5, sp, #104	; 0x68
   14230:	a831      	add	r0, sp, #196	; 0xc4
   14232:	ae26      	add	r6, sp, #152	; 0x98
   14234:	462a      	mov	r2, r5
   14236:	2100      	movs	r1, #0
   14238:	f852 3b04 	ldr.w	r3, [r2], #4
   1423c:	f850 7f04 	ldr.w	r7, [r0, #4]!
   14240:	407b      	eors	r3, r7
   14242:	4319      	orrs	r1, r3
   14244:	42b2      	cmp	r2, r6
   14246:	d1f7      	bne.n	14238 <POINTonE2_Uncompress_BE+0x74>
   14248:	1e4b      	subs	r3, r1, #1
   1424a:	438b      	bics	r3, r1
   1424c:	f140 80a4 	bpl.w	14398 <POINTonE2_Uncompress_BE+0x1d4>
   14250:	4b57      	ldr	r3, [pc, #348]	; (143b0 <POINTonE2_Uncompress_BE+0x1ec>)
   14252:	af26      	add	r7, sp, #152	; 0x98
   14254:	220c      	movs	r2, #12
   14256:	9200      	str	r2, [sp, #0]
   14258:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   1425c:	4639      	mov	r1, r7
   1425e:	a81a      	add	r0, sp, #104	; 0x68
   14260:	f7f8 fd5e 	bl	cd20 <add_mod_n>
   14264:	46b8      	mov	r8, r7
   14266:	4639      	mov	r1, r7
   14268:	2200      	movs	r2, #0
   1426a:	f855 3b04 	ldr.w	r3, [r5], #4
   1426e:	f851 0b04 	ldr.w	r0, [r1], #4
   14272:	4043      	eors	r3, r0
   14274:	431a      	orrs	r2, r3
   14276:	42b5      	cmp	r5, r6
   14278:	d1f7      	bne.n	1426a <POINTonE2_Uncompress_BE+0xa6>
   1427a:	1e53      	subs	r3, r2, #1
   1427c:	4393      	bics	r3, r2
   1427e:	f140 8090 	bpl.w	143a2 <POINTonE2_Uncompress_BE+0x1de>
   14282:	4d4b      	ldr	r5, [pc, #300]	; (143b0 <POINTonE2_Uncompress_BE+0x1ec>)
   14284:	f505 7934 	add.w	r9, r5, #720	; 0x2d0
   14288:	260c      	movs	r6, #12
   1428a:	9601      	str	r6, [sp, #4]
   1428c:	4f49      	ldr	r7, [pc, #292]	; (143b4 <POINTonE2_Uncompress_BE+0x1f0>)
   1428e:	9700      	str	r7, [sp, #0]
   14290:	462b      	mov	r3, r5
   14292:	464a      	mov	r2, r9
   14294:	a926      	add	r1, sp, #152	; 0x98
   14296:	4608      	mov	r0, r1
   14298:	f7f8 fb9a 	bl	c9d0 <mul_mont_n>
   1429c:	9601      	str	r6, [sp, #4]
   1429e:	9700      	str	r7, [sp, #0]
   142a0:	462b      	mov	r3, r5
   142a2:	464a      	mov	r2, r9
   142a4:	a932      	add	r1, sp, #200	; 0xc8
   142a6:	4608      	mov	r0, r1
   142a8:	f7f8 fb92 	bl	c9d0 <mul_mont_n>
   142ac:	463b      	mov	r3, r7
   142ae:	462a      	mov	r2, r5
   142b0:	a926      	add	r1, sp, #152	; 0x98
   142b2:	a83e      	add	r0, sp, #248	; 0xf8
   142b4:	f7ff fadc 	bl	13870 <sqr_mont_384x>
   142b8:	9700      	str	r7, [sp, #0]
   142ba:	462b      	mov	r3, r5
   142bc:	aa26      	add	r2, sp, #152	; 0x98
   142be:	a93e      	add	r1, sp, #248	; 0xf8
   142c0:	4608      	mov	r0, r1
   142c2:	f7fc f847 	bl	10354 <mul_mont_384x>
   142c6:	4f3c      	ldr	r7, [pc, #240]	; (143b8 <POINTonE2_Uncompress_BE+0x1f4>)
   142c8:	9600      	str	r6, [sp, #0]
   142ca:	462b      	mov	r3, r5
   142cc:	f507 628c 	add.w	r2, r7, #1120	; 0x460
   142d0:	a93e      	add	r1, sp, #248	; 0xf8
   142d2:	4608      	mov	r0, r1
   142d4:	f7f8 fd24 	bl	cd20 <add_mod_n>
   142d8:	9600      	str	r6, [sp, #0]
   142da:	462b      	mov	r3, r5
   142dc:	f507 6292 	add.w	r2, r7, #1168	; 0x490
   142e0:	a94a      	add	r1, sp, #296	; 0x128
   142e2:	4608      	mov	r0, r1
   142e4:	f7f8 fd1c 	bl	cd20 <add_mod_n>
   142e8:	a93e      	add	r1, sp, #248	; 0xf8
   142ea:	4608      	mov	r0, r1
   142ec:	f7ff fedc 	bl	140a8 <sqrt_fp2>
   142f0:	2800      	cmp	r0, #0
   142f2:	d059      	beq.n	143a8 <POINTonE2_Uncompress_BE+0x1e4>
   142f4:	ab25      	add	r3, sp, #148	; 0x94
   142f6:	1f22      	subs	r2, r4, #4
   142f8:	f108 08bc 	add.w	r8, r8, #188	; 0xbc
   142fc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   14300:	f842 1f04 	str.w	r1, [r2, #4]!
   14304:	4543      	cmp	r3, r8
   14306:	d1f9      	bne.n	142fc <POINTonE2_Uncompress_BE+0x138>
   14308:	4d2a      	ldr	r5, [pc, #168]	; (143b4 <POINTonE2_Uncompress_BE+0x1f0>)
   1430a:	4e29      	ldr	r6, [pc, #164]	; (143b0 <POINTonE2_Uncompress_BE+0x1ec>)
   1430c:	270c      	movs	r7, #12
   1430e:	9700      	str	r7, [sp, #0]
   14310:	462b      	mov	r3, r5
   14312:	4632      	mov	r2, r6
   14314:	f104 0160 	add.w	r1, r4, #96	; 0x60
   14318:	a802      	add	r0, sp, #8
   1431a:	f7f8 fe8b 	bl	d034 <from_mont_n>
   1431e:	9700      	str	r7, [sp, #0]
   14320:	462b      	mov	r3, r5
   14322:	4632      	mov	r2, r6
   14324:	f104 0190 	add.w	r1, r4, #144	; 0x90
   14328:	a80e      	add	r0, sp, #56	; 0x38
   1432a:	f7f8 fe83 	bl	d034 <from_mont_n>
   1432e:	463a      	mov	r2, r7
   14330:	4631      	mov	r1, r6
   14332:	a802      	add	r0, sp, #8
   14334:	f7f8 ff93 	bl	d25e <sgn0_pty_mod_n>
   14338:	4605      	mov	r5, r0
   1433a:	463a      	mov	r2, r7
   1433c:	4631      	mov	r1, r6
   1433e:	a80e      	add	r0, sp, #56	; 0x38
   14340:	f7f8 ff8d 	bl	d25e <sgn0_pty_mod_n>
   14344:	aa0d      	add	r2, sp, #52	; 0x34
   14346:	ab02      	add	r3, sp, #8
   14348:	ae19      	add	r6, sp, #100	; 0x64
   1434a:	2100      	movs	r1, #0
   1434c:	f852 4f04 	ldr.w	r4, [r2, #4]!
   14350:	4321      	orrs	r1, r4
   14352:	42b2      	cmp	r2, r6
   14354:	d1fa      	bne.n	1434c <POINTonE2_Uncompress_BE+0x188>
   14356:	1e4c      	subs	r4, r1, #1
   14358:	ea24 0101 	bic.w	r1, r4, r1
   1435c:	0fcc      	lsrs	r4, r1, #31
   1435e:	ea05 71e1 	and.w	r1, r5, r1, asr #31
   14362:	3c01      	subs	r4, #1
   14364:	4004      	ands	r4, r0
   14366:	430c      	orrs	r4, r1
   14368:	f103 0630 	add.w	r6, r3, #48	; 0x30
   1436c:	2200      	movs	r2, #0
   1436e:	f853 1b04 	ldr.w	r1, [r3], #4
   14372:	430a      	orrs	r2, r1
   14374:	42b3      	cmp	r3, r6
   14376:	d1fa      	bne.n	1436e <POINTonE2_Uncompress_BE+0x1aa>
   14378:	1e53      	subs	r3, r2, #1
   1437a:	ea23 0202 	bic.w	r2, r3, r2
   1437e:	0fd3      	lsrs	r3, r2, #31
   14380:	ea00 72e2 	and.w	r2, r0, r2, asr #31
   14384:	3b01      	subs	r3, #1
   14386:	ea03 0005 	and.w	r0, r3, r5
   1438a:	4310      	orrs	r0, r2
   1438c:	f000 0001 	and.w	r0, r0, #1
   14390:	f004 0402 	and.w	r4, r4, #2
   14394:	4320      	orrs	r0, r4
   14396:	e001      	b.n	1439c <POINTonE2_Uncompress_BE+0x1d8>
   14398:	f04f 30ff 	mov.w	r0, #4294967295
   1439c:	b057      	add	sp, #348	; 0x15c
   1439e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   143a2:	f04f 30ff 	mov.w	r0, #4294967295
   143a6:	e7f9      	b.n	1439c <POINTonE2_Uncompress_BE+0x1d8>
   143a8:	f06f 0001 	mvn.w	r0, #1
   143ac:	e7f6      	b.n	1439c <POINTonE2_Uncompress_BE+0x1d8>
   143ae:	bf00      	nop
   143b0:	00024108 	.word	0x00024108
   143b4:	fffcfffd 	.word	0xfffcfffd
   143b8:	00025200 	.word	0x00025200

000143bc <POINTonE2_Uncompress>:
   143bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143c0:	b082      	sub	sp, #8
   143c2:	780d      	ldrb	r5, [r1, #0]
   143c4:	f991 3000 	ldrsb.w	r3, [r1]
   143c8:	2b00      	cmp	r3, #0
   143ca:	da3f      	bge.n	1444c <POINTonE2_Uncompress+0x90>
   143cc:	4604      	mov	r4, r0
   143ce:	f015 0640 	ands.w	r6, r5, #64	; 0x40
   143d2:	d01a      	beq.n	1440a <POINTonE2_Uncompress+0x4e>
   143d4:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   143d8:	3d01      	subs	r5, #1
   143da:	0fed      	lsrs	r5, r5, #31
   143dc:	460b      	mov	r3, r1
   143de:	315f      	adds	r1, #95	; 0x5f
   143e0:	2200      	movs	r2, #0
   143e2:	f813 cf01 	ldrb.w	ip, [r3, #1]!
   143e6:	ea42 020c 	orr.w	r2, r2, ip
   143ea:	428b      	cmp	r3, r1
   143ec:	d1f9      	bne.n	143e2 <POINTonE2_Uncompress+0x26>
   143ee:	3a01      	subs	r2, #1
   143f0:	ea15 73d2 	ands.w	r3, r5, r2, lsr #31
   143f4:	d02f      	beq.n	14456 <POINTonE2_Uncompress+0x9a>
   143f6:	4623      	mov	r3, r4
   143f8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   143fc:	2200      	movs	r2, #0
   143fe:	f843 2b04 	str.w	r2, [r3], #4
   14402:	428b      	cmp	r3, r1
   14404:	d1fb      	bne.n	143fe <POINTonE2_Uncompress+0x42>
   14406:	2600      	movs	r6, #0
   14408:	e021      	b.n	1444e <POINTonE2_Uncompress+0x92>
   1440a:	f7ff fedb 	bl	141c4 <POINTonE2_Uncompress_BE>
   1440e:	2803      	cmp	r0, #3
   14410:	d902      	bls.n	14418 <POINTonE2_Uncompress+0x5c>
   14412:	4240      	negs	r0, r0
   14414:	b2c6      	uxtb	r6, r0
   14416:	e01a      	b.n	1444e <POINTonE2_Uncompress+0x92>
   14418:	f3c5 1540 	ubfx	r5, r5, #5, #1
   1441c:	ea85 0550 	eor.w	r5, r5, r0, lsr #1
   14420:	f104 0060 	add.w	r0, r4, #96	; 0x60
   14424:	4f0d      	ldr	r7, [pc, #52]	; (1445c <POINTonE2_Uncompress+0xa0>)
   14426:	f04f 080c 	mov.w	r8, #12
   1442a:	f8cd 8000 	str.w	r8, [sp]
   1442e:	463b      	mov	r3, r7
   14430:	462a      	mov	r2, r5
   14432:	4601      	mov	r1, r0
   14434:	f7f9 fb08 	bl	da48 <cneg_mod_n>
   14438:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1443c:	f8cd 8000 	str.w	r8, [sp]
   14440:	463b      	mov	r3, r7
   14442:	462a      	mov	r2, r5
   14444:	4601      	mov	r1, r0
   14446:	f7f9 faff 	bl	da48 <cneg_mod_n>
   1444a:	e000      	b.n	1444e <POINTonE2_Uncompress+0x92>
   1444c:	2601      	movs	r6, #1
   1444e:	4630      	mov	r0, r6
   14450:	b002      	add	sp, #8
   14452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14456:	2601      	movs	r6, #1
   14458:	e7f9      	b.n	1444e <POINTonE2_Uncompress+0x92>
   1445a:	bf00      	nop
   1445c:	00024108 	.word	0x00024108

00014460 <blst_p2_uncompress>:
   14460:	b508      	push	{r3, lr}
   14462:	f7ff ffab 	bl	143bc <POINTonE2_Uncompress>
   14466:	bd08      	pop	{r3, pc}

00014468 <blst_p2_deserialize>:
   14468:	b508      	push	{r3, lr}
   1446a:	780b      	ldrb	r3, [r1, #0]
   1446c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14470:	d01a      	beq.n	144a8 <blst_p2_deserialize+0x40>
   14472:	f013 0f80 	tst.w	r3, #128	; 0x80
   14476:	d11a      	bne.n	144ae <blst_p2_deserialize+0x46>
   14478:	f013 0f40 	tst.w	r3, #64	; 0x40
   1447c:	d024      	beq.n	144c8 <blst_p2_deserialize+0x60>
   1447e:	f003 0c3f 	and.w	ip, r3, #63	; 0x3f
   14482:	f10c 3cff 	add.w	ip, ip, #4294967295
   14486:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
   1448a:	460b      	mov	r3, r1
   1448c:	31bf      	adds	r1, #191	; 0xbf
   1448e:	2200      	movs	r2, #0
   14490:	f813 ef01 	ldrb.w	lr, [r3, #1]!
   14494:	ea42 020e 	orr.w	r2, r2, lr
   14498:	428b      	cmp	r3, r1
   1449a:	d1f9      	bne.n	14490 <blst_p2_deserialize+0x28>
   1449c:	3a01      	subs	r2, #1
   1449e:	ea1c 73d2 	ands.w	r3, ip, r2, lsr #31
   144a2:	d107      	bne.n	144b4 <blst_p2_deserialize+0x4c>
   144a4:	2001      	movs	r0, #1
   144a6:	e010      	b.n	144ca <blst_p2_deserialize+0x62>
   144a8:	f7ff fb8a 	bl	13bc0 <POINTonE2_Deserialize_BE>
   144ac:	e00d      	b.n	144ca <blst_p2_deserialize+0x62>
   144ae:	f7ff ff85 	bl	143bc <POINTonE2_Uncompress>
   144b2:	e00a      	b.n	144ca <blst_p2_deserialize+0x62>
   144b4:	4603      	mov	r3, r0
   144b6:	f100 01c0 	add.w	r1, r0, #192	; 0xc0
   144ba:	2200      	movs	r2, #0
   144bc:	f843 2b04 	str.w	r2, [r3], #4
   144c0:	428b      	cmp	r3, r1
   144c2:	d1fb      	bne.n	144bc <blst_p2_deserialize+0x54>
   144c4:	2000      	movs	r0, #0
   144c6:	e000      	b.n	144ca <blst_p2_deserialize+0x62>
   144c8:	2001      	movs	r0, #1
   144ca:	bd08      	pop	{r3, pc}

000144cc <POINTonE2_is_equal>:
   144cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
   144d4:	4607      	mov	r7, r0
   144d6:	460e      	mov	r6, r1
   144d8:	f100 08c0 	add.w	r8, r0, #192	; 0xc0
   144dc:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   144e0:	f500 708e 	add.w	r0, r0, #284	; 0x11c
   144e4:	2200      	movs	r2, #0
   144e6:	f853 1f04 	ldr.w	r1, [r3, #4]!
   144ea:	430a      	orrs	r2, r1
   144ec:	4283      	cmp	r3, r0
   144ee:	d1fa      	bne.n	144e6 <POINTonE2_is_equal+0x1a>
   144f0:	1e55      	subs	r5, r2, #1
   144f2:	ea25 0502 	bic.w	r5, r5, r2
   144f6:	0fed      	lsrs	r5, r5, #31
   144f8:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   144fc:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   14500:	f506 708e 	add.w	r0, r6, #284	; 0x11c
   14504:	2200      	movs	r2, #0
   14506:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1450a:	430a      	orrs	r2, r1
   1450c:	4283      	cmp	r3, r0
   1450e:	d1fa      	bne.n	14506 <POINTonE2_is_equal+0x3a>
   14510:	1e54      	subs	r4, r2, #1
   14512:	ea24 0202 	bic.w	r2, r4, r2
   14516:	0fd4      	lsrs	r4, r2, #31
   14518:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 145cc <POINTonE2_is_equal+0x100>
   1451c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 145d0 <POINTonE2_is_equal+0x104>
   14520:	465b      	mov	r3, fp
   14522:	4652      	mov	r2, sl
   14524:	4641      	mov	r1, r8
   14526:	a87a      	add	r0, sp, #488	; 0x1e8
   14528:	f7ff f9a2 	bl	13870 <sqr_mont_384x>
   1452c:	465b      	mov	r3, fp
   1452e:	4652      	mov	r2, sl
   14530:	4649      	mov	r1, r9
   14532:	a862      	add	r0, sp, #392	; 0x188
   14534:	f7ff f99c 	bl	13870 <sqr_mont_384x>
   14538:	f8cd b000 	str.w	fp, [sp]
   1453c:	4653      	mov	r3, sl
   1453e:	aa62      	add	r2, sp, #392	; 0x188
   14540:	4639      	mov	r1, r7
   14542:	a832      	add	r0, sp, #200	; 0xc8
   14544:	f7fb ff06 	bl	10354 <mul_mont_384x>
   14548:	f8cd b000 	str.w	fp, [sp]
   1454c:	4653      	mov	r3, sl
   1454e:	aa7a      	add	r2, sp, #488	; 0x1e8
   14550:	4631      	mov	r1, r6
   14552:	a802      	add	r0, sp, #8
   14554:	f7fb fefe 	bl	10354 <mul_mont_384x>
   14558:	f8cd b000 	str.w	fp, [sp]
   1455c:	4653      	mov	r3, sl
   1455e:	464a      	mov	r2, r9
   14560:	f107 0160 	add.w	r1, r7, #96	; 0x60
   14564:	a84a      	add	r0, sp, #296	; 0x128
   14566:	f7fb fef5 	bl	10354 <mul_mont_384x>
   1456a:	f8cd b000 	str.w	fp, [sp]
   1456e:	4653      	mov	r3, sl
   14570:	4642      	mov	r2, r8
   14572:	f106 0160 	add.w	r1, r6, #96	; 0x60
   14576:	a81a      	add	r0, sp, #104	; 0x68
   14578:	f7fb feec 	bl	10354 <mul_mont_384x>
   1457c:	f8cd b000 	str.w	fp, [sp]
   14580:	4653      	mov	r3, sl
   14582:	aa62      	add	r2, sp, #392	; 0x188
   14584:	a94a      	add	r1, sp, #296	; 0x128
   14586:	4608      	mov	r0, r1
   14588:	f7fb fee4 	bl	10354 <mul_mont_384x>
   1458c:	f8cd b000 	str.w	fp, [sp]
   14590:	4653      	mov	r3, sl
   14592:	aa7a      	add	r2, sp, #488	; 0x1e8
   14594:	a91a      	add	r1, sp, #104	; 0x68
   14596:	4608      	mov	r0, r1
   14598:	f7fb fedc 	bl	10354 <mul_mont_384x>
   1459c:	aa31      	add	r2, sp, #196	; 0xc4
   1459e:	a901      	add	r1, sp, #4
   145a0:	af61      	add	r7, sp, #388	; 0x184
   145a2:	2000      	movs	r0, #0
   145a4:	f852 3f04 	ldr.w	r3, [r2, #4]!
   145a8:	f851 6f04 	ldr.w	r6, [r1, #4]!
   145ac:	4073      	eors	r3, r6
   145ae:	4318      	orrs	r0, r3
   145b0:	42ba      	cmp	r2, r7
   145b2:	d1f7      	bne.n	145a4 <POINTonE2_is_equal+0xd8>
   145b4:	1e43      	subs	r3, r0, #1
   145b6:	ea23 0000 	bic.w	r0, r3, r0
   145ba:	406c      	eors	r4, r5
   145bc:	f084 0401 	eor.w	r4, r4, #1
   145c0:	ea04 70d0 	and.w	r0, r4, r0, lsr #31
   145c4:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
   145c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145cc:	fffcfffd 	.word	0xfffcfffd
   145d0:	00024108 	.word	0x00024108

000145d4 <blst_p2_is_equal>:
   145d4:	b508      	push	{r3, lr}
   145d6:	f7ff ff79 	bl	144cc <POINTonE2_is_equal>
   145da:	bd08      	pop	{r3, pc}

000145dc <POINTonE2_add>:
   145dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e0:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
   145e4:	9003      	str	r0, [sp, #12]
   145e6:	460e      	mov	r6, r1
   145e8:	4615      	mov	r5, r2
   145ea:	f101 0ac0 	add.w	sl, r1, #192	; 0xc0
   145ee:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   145f2:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   145f6:	2200      	movs	r2, #0
   145f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   145fc:	430a      	orrs	r2, r1
   145fe:	4283      	cmp	r3, r0
   14600:	d1fa      	bne.n	145f8 <POINTonE2_add+0x1c>
   14602:	1e53      	subs	r3, r2, #1
   14604:	ea23 0202 	bic.w	r2, r3, r2
   14608:	0fd3      	lsrs	r3, r2, #31
   1460a:	9302      	str	r3, [sp, #8]
   1460c:	4fb5      	ldr	r7, [pc, #724]	; (148e4 <POINTonE2_add+0x308>)
   1460e:	4cb6      	ldr	r4, [pc, #728]	; (148e8 <POINTonE2_add+0x30c>)
   14610:	463b      	mov	r3, r7
   14612:	4622      	mov	r2, r4
   14614:	4651      	mov	r1, sl
   14616:	a894      	add	r0, sp, #592	; 0x250
   14618:	f7ff f92a 	bl	13870 <sqr_mont_384x>
   1461c:	9700      	str	r7, [sp, #0]
   1461e:	4623      	mov	r3, r4
   14620:	4652      	mov	r2, sl
   14622:	a994      	add	r1, sp, #592	; 0x250
   14624:	a8dc      	add	r0, sp, #880	; 0x370
   14626:	f7fb fe95 	bl	10354 <mul_mont_384x>
   1462a:	9700      	str	r7, [sp, #0]
   1462c:	4623      	mov	r3, r4
   1462e:	f105 0260 	add.w	r2, r5, #96	; 0x60
   14632:	a9dc      	add	r1, sp, #880	; 0x370
   14634:	4608      	mov	r0, r1
   14636:	f7fb fe8d 	bl	10354 <mul_mont_384x>
   1463a:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
   1463e:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   14642:	f505 718e 	add.w	r1, r5, #284	; 0x11c
   14646:	f04f 0800 	mov.w	r8, #0
   1464a:	f853 2f04 	ldr.w	r2, [r3, #4]!
   1464e:	ea48 0802 	orr.w	r8, r8, r2
   14652:	4299      	cmp	r1, r3
   14654:	d1f9      	bne.n	1464a <POINTonE2_add+0x6e>
   14656:	f8df 928c 	ldr.w	r9, [pc, #652]	; 148e4 <POINTonE2_add+0x308>
   1465a:	4ca3      	ldr	r4, [pc, #652]	; (148e8 <POINTonE2_add+0x30c>)
   1465c:	464b      	mov	r3, r9
   1465e:	4622      	mov	r2, r4
   14660:	4659      	mov	r1, fp
   14662:	a87c      	add	r0, sp, #496	; 0x1f0
   14664:	f7ff f904 	bl	13870 <sqr_mont_384x>
   14668:	f8cd 9000 	str.w	r9, [sp]
   1466c:	4623      	mov	r3, r4
   1466e:	465a      	mov	r2, fp
   14670:	a97c      	add	r1, sp, #496	; 0x1f0
   14672:	a84c      	add	r0, sp, #304	; 0x130
   14674:	f7fb fe6e 	bl	10354 <mul_mont_384x>
   14678:	f8cd 9000 	str.w	r9, [sp]
   1467c:	4623      	mov	r3, r4
   1467e:	f106 0260 	add.w	r2, r6, #96	; 0x60
   14682:	a94c      	add	r1, sp, #304	; 0x130
   14684:	4608      	mov	r0, r1
   14686:	f7fb fe65 	bl	10354 <mul_mont_384x>
   1468a:	270c      	movs	r7, #12
   1468c:	9700      	str	r7, [sp, #0]
   1468e:	4623      	mov	r3, r4
   14690:	aa4c      	add	r2, sp, #304	; 0x130
   14692:	a9dc      	add	r1, sp, #880	; 0x370
   14694:	4608      	mov	r0, r1
   14696:	f7f7 ffed 	bl	c674 <sub_mod_n>
   1469a:	9700      	str	r7, [sp, #0]
   1469c:	4623      	mov	r3, r4
   1469e:	aa58      	add	r2, sp, #352	; 0x160
   146a0:	a9e8      	add	r1, sp, #928	; 0x3a0
   146a2:	4608      	mov	r0, r1
   146a4:	f7f7 ffe6 	bl	c674 <sub_mod_n>
   146a8:	9700      	str	r7, [sp, #0]
   146aa:	4623      	mov	r3, r4
   146ac:	aadc      	add	r2, sp, #880	; 0x370
   146ae:	4611      	mov	r1, r2
   146b0:	4610      	mov	r0, r2
   146b2:	f7f8 fb35 	bl	cd20 <add_mod_n>
   146b6:	9700      	str	r7, [sp, #0]
   146b8:	4623      	mov	r3, r4
   146ba:	aae8      	add	r2, sp, #928	; 0x3a0
   146bc:	4611      	mov	r1, r2
   146be:	4610      	mov	r0, r2
   146c0:	f7f8 fb2e 	bl	cd20 <add_mod_n>
   146c4:	f8cd 9000 	str.w	r9, [sp]
   146c8:	4623      	mov	r3, r4
   146ca:	aa7c      	add	r2, sp, #496	; 0x1f0
   146cc:	4631      	mov	r1, r6
   146ce:	a864      	add	r0, sp, #400	; 0x190
   146d0:	f7fb fe40 	bl	10354 <mul_mont_384x>
   146d4:	f8cd 9000 	str.w	r9, [sp]
   146d8:	4623      	mov	r3, r4
   146da:	aa94      	add	r2, sp, #592	; 0x250
   146dc:	4629      	mov	r1, r5
   146de:	a834      	add	r0, sp, #208	; 0xd0
   146e0:	f7fb fe38 	bl	10354 <mul_mont_384x>
   146e4:	9700      	str	r7, [sp, #0]
   146e6:	4623      	mov	r3, r4
   146e8:	aa64      	add	r2, sp, #400	; 0x190
   146ea:	a934      	add	r1, sp, #208	; 0xd0
   146ec:	4608      	mov	r0, r1
   146ee:	f7f7 ffc1 	bl	c674 <sub_mod_n>
   146f2:	9700      	str	r7, [sp, #0]
   146f4:	4623      	mov	r3, r4
   146f6:	aa70      	add	r2, sp, #448	; 0x1c0
   146f8:	a940      	add	r1, sp, #256	; 0x100
   146fa:	4608      	mov	r0, r1
   146fc:	f7f7 ffba 	bl	c674 <sub_mod_n>
   14700:	9700      	str	r7, [sp, #0]
   14702:	4623      	mov	r3, r4
   14704:	aa34      	add	r2, sp, #208	; 0xd0
   14706:	4611      	mov	r1, r2
   14708:	a81c      	add	r0, sp, #112	; 0x70
   1470a:	f7f8 fb09 	bl	cd20 <add_mod_n>
   1470e:	9700      	str	r7, [sp, #0]
   14710:	4623      	mov	r3, r4
   14712:	aa40      	add	r2, sp, #256	; 0x100
   14714:	4611      	mov	r1, r2
   14716:	a828      	add	r0, sp, #160	; 0xa0
   14718:	f7f8 fb02 	bl	cd20 <add_mod_n>
   1471c:	464b      	mov	r3, r9
   1471e:	4622      	mov	r2, r4
   14720:	a91c      	add	r1, sp, #112	; 0x70
   14722:	4608      	mov	r0, r1
   14724:	f7ff f8a4 	bl	13870 <sqr_mont_384x>
   14728:	f8cd 9000 	str.w	r9, [sp]
   1472c:	4623      	mov	r3, r4
   1472e:	aa1c      	add	r2, sp, #112	; 0x70
   14730:	a934      	add	r1, sp, #208	; 0xd0
   14732:	a804      	add	r0, sp, #16
   14734:	f7fb fe0e 	bl	10354 <mul_mont_384x>
   14738:	f8cd 9000 	str.w	r9, [sp]
   1473c:	4623      	mov	r3, r4
   1473e:	aa04      	add	r2, sp, #16
   14740:	a94c      	add	r1, sp, #304	; 0x130
   14742:	4608      	mov	r0, r1
   14744:	f7fb fe06 	bl	10354 <mul_mont_384x>
   14748:	f8cd 9000 	str.w	r9, [sp]
   1474c:	4623      	mov	r3, r4
   1474e:	aa1c      	add	r2, sp, #112	; 0x70
   14750:	a964      	add	r1, sp, #400	; 0x190
   14752:	a8c4      	add	r0, sp, #784	; 0x310
   14754:	f7fb fdfe 	bl	10354 <mul_mont_384x>
   14758:	464b      	mov	r3, r9
   1475a:	4622      	mov	r2, r4
   1475c:	a9dc      	add	r1, sp, #880	; 0x370
   1475e:	a8ac      	add	r0, sp, #688	; 0x2b0
   14760:	f7ff f886 	bl	13870 <sqr_mont_384x>
   14764:	9700      	str	r7, [sp, #0]
   14766:	4623      	mov	r3, r4
   14768:	aa04      	add	r2, sp, #16
   1476a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1476c:	4608      	mov	r0, r1
   1476e:	f7f7 ff81 	bl	c674 <sub_mod_n>
   14772:	9700      	str	r7, [sp, #0]
   14774:	4623      	mov	r3, r4
   14776:	aa10      	add	r2, sp, #64	; 0x40
   14778:	a9b8      	add	r1, sp, #736	; 0x2e0
   1477a:	4608      	mov	r0, r1
   1477c:	f7f7 ff7a 	bl	c674 <sub_mod_n>
   14780:	9700      	str	r7, [sp, #0]
   14782:	4623      	mov	r3, r4
   14784:	aac4      	add	r2, sp, #784	; 0x310
   14786:	a9ac      	add	r1, sp, #688	; 0x2b0
   14788:	4608      	mov	r0, r1
   1478a:	f7f7 ff73 	bl	c674 <sub_mod_n>
   1478e:	9700      	str	r7, [sp, #0]
   14790:	4623      	mov	r3, r4
   14792:	aad0      	add	r2, sp, #832	; 0x340
   14794:	a9b8      	add	r1, sp, #736	; 0x2e0
   14796:	4608      	mov	r0, r1
   14798:	f7f7 ff6c 	bl	c674 <sub_mod_n>
   1479c:	9700      	str	r7, [sp, #0]
   1479e:	4623      	mov	r3, r4
   147a0:	aac4      	add	r2, sp, #784	; 0x310
   147a2:	a9ac      	add	r1, sp, #688	; 0x2b0
   147a4:	4608      	mov	r0, r1
   147a6:	f7f7 ff65 	bl	c674 <sub_mod_n>
   147aa:	9700      	str	r7, [sp, #0]
   147ac:	4623      	mov	r3, r4
   147ae:	aad0      	add	r2, sp, #832	; 0x340
   147b0:	a9b8      	add	r1, sp, #736	; 0x2e0
   147b2:	4608      	mov	r0, r1
   147b4:	f7f7 ff5e 	bl	c674 <sub_mod_n>
   147b8:	9700      	str	r7, [sp, #0]
   147ba:	4623      	mov	r3, r4
   147bc:	aaac      	add	r2, sp, #688	; 0x2b0
   147be:	a9c4      	add	r1, sp, #784	; 0x310
   147c0:	4608      	mov	r0, r1
   147c2:	f7f7 ff57 	bl	c674 <sub_mod_n>
   147c6:	9700      	str	r7, [sp, #0]
   147c8:	4623      	mov	r3, r4
   147ca:	aab8      	add	r2, sp, #736	; 0x2e0
   147cc:	a9d0      	add	r1, sp, #832	; 0x340
   147ce:	4608      	mov	r0, r1
   147d0:	f7f7 ff50 	bl	c674 <sub_mod_n>
   147d4:	f8cd 9000 	str.w	r9, [sp]
   147d8:	4623      	mov	r3, r4
   147da:	aadc      	add	r2, sp, #880	; 0x370
   147dc:	a9c4      	add	r1, sp, #784	; 0x310
   147de:	4608      	mov	r0, r1
   147e0:	f7fb fdb8 	bl	10354 <mul_mont_384x>
   147e4:	9700      	str	r7, [sp, #0]
   147e6:	4623      	mov	r3, r4
   147e8:	aa4c      	add	r2, sp, #304	; 0x130
   147ea:	a9c4      	add	r1, sp, #784	; 0x310
   147ec:	4608      	mov	r0, r1
   147ee:	f7f7 ff41 	bl	c674 <sub_mod_n>
   147f2:	9700      	str	r7, [sp, #0]
   147f4:	4623      	mov	r3, r4
   147f6:	aa58      	add	r2, sp, #352	; 0x160
   147f8:	a9d0      	add	r1, sp, #832	; 0x340
   147fa:	4608      	mov	r0, r1
   147fc:	f7f7 ff3a 	bl	c674 <sub_mod_n>
   14800:	9700      	str	r7, [sp, #0]
   14802:	4623      	mov	r3, r4
   14804:	aa4c      	add	r2, sp, #304	; 0x130
   14806:	a9c4      	add	r1, sp, #784	; 0x310
   14808:	4608      	mov	r0, r1
   1480a:	f7f7 ff33 	bl	c674 <sub_mod_n>
   1480e:	9700      	str	r7, [sp, #0]
   14810:	4623      	mov	r3, r4
   14812:	aa58      	add	r2, sp, #352	; 0x160
   14814:	a9d0      	add	r1, sp, #832	; 0x340
   14816:	4608      	mov	r0, r1
   14818:	f7f7 ff2c 	bl	c674 <sub_mod_n>
   1481c:	9700      	str	r7, [sp, #0]
   1481e:	4623      	mov	r3, r4
   14820:	465a      	mov	r2, fp
   14822:	4651      	mov	r1, sl
   14824:	a8dc      	add	r0, sp, #880	; 0x370
   14826:	f7f8 fa7b 	bl	cd20 <add_mod_n>
   1482a:	9700      	str	r7, [sp, #0]
   1482c:	4623      	mov	r3, r4
   1482e:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   14832:	f106 01f0 	add.w	r1, r6, #240	; 0xf0
   14836:	a8e8      	add	r0, sp, #928	; 0x3a0
   14838:	f7f8 fa72 	bl	cd20 <add_mod_n>
   1483c:	464b      	mov	r3, r9
   1483e:	4622      	mov	r2, r4
   14840:	a9dc      	add	r1, sp, #880	; 0x370
   14842:	4608      	mov	r0, r1
   14844:	f7ff f814 	bl	13870 <sqr_mont_384x>
   14848:	9700      	str	r7, [sp, #0]
   1484a:	4623      	mov	r3, r4
   1484c:	aa94      	add	r2, sp, #592	; 0x250
   1484e:	a9dc      	add	r1, sp, #880	; 0x370
   14850:	4608      	mov	r0, r1
   14852:	f7f7 ff0f 	bl	c674 <sub_mod_n>
   14856:	9700      	str	r7, [sp, #0]
   14858:	4623      	mov	r3, r4
   1485a:	aaa0      	add	r2, sp, #640	; 0x280
   1485c:	a9e8      	add	r1, sp, #928	; 0x3a0
   1485e:	4608      	mov	r0, r1
   14860:	f7f7 ff08 	bl	c674 <sub_mod_n>
   14864:	9700      	str	r7, [sp, #0]
   14866:	4623      	mov	r3, r4
   14868:	aa7c      	add	r2, sp, #496	; 0x1f0
   1486a:	a9dc      	add	r1, sp, #880	; 0x370
   1486c:	4608      	mov	r0, r1
   1486e:	f7f7 ff01 	bl	c674 <sub_mod_n>
   14872:	9700      	str	r7, [sp, #0]
   14874:	4623      	mov	r3, r4
   14876:	aa88      	add	r2, sp, #544	; 0x220
   14878:	a9e8      	add	r1, sp, #928	; 0x3a0
   1487a:	4608      	mov	r0, r1
   1487c:	f7f7 fefa 	bl	c674 <sub_mod_n>
   14880:	f8cd 9000 	str.w	r9, [sp]
   14884:	4623      	mov	r3, r4
   14886:	aa34      	add	r2, sp, #208	; 0xd0
   14888:	a9dc      	add	r1, sp, #880	; 0x370
   1488a:	4608      	mov	r0, r1
   1488c:	f7fb fd62 	bl	10354 <mul_mont_384x>
   14890:	f108 33ff 	add.w	r3, r8, #4294967295
   14894:	ea23 0808 	bic.w	r8, r3, r8
   14898:	ea4f 78e8 	mov.w	r8, r8, asr #31
   1489c:	3e04      	subs	r6, #4
   1489e:	acac      	add	r4, sp, #688	; 0x2b0
   148a0:	aff4      	add	r7, sp, #976	; 0x3d0
   148a2:	4622      	mov	r2, r4
   148a4:	6811      	ldr	r1, [r2, #0]
   148a6:	f856 3f04 	ldr.w	r3, [r6, #4]!
   148aa:	404b      	eors	r3, r1
   148ac:	ea03 0308 	and.w	r3, r3, r8
   148b0:	404b      	eors	r3, r1
   148b2:	f842 3b04 	str.w	r3, [r2], #4
   148b6:	4297      	cmp	r7, r2
   148b8:	d1f4      	bne.n	148a4 <POINTonE2_add+0x2c8>
   148ba:	9b02      	ldr	r3, [sp, #8]
   148bc:	4259      	negs	r1, r3
   148be:	3d04      	subs	r5, #4
   148c0:	9b03      	ldr	r3, [sp, #12]
   148c2:	1f18      	subs	r0, r3, #4
   148c4:	f854 2b04 	ldr.w	r2, [r4], #4
   148c8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   148cc:	4053      	eors	r3, r2
   148ce:	400b      	ands	r3, r1
   148d0:	4053      	eors	r3, r2
   148d2:	f840 3f04 	str.w	r3, [r0, #4]!
   148d6:	42a7      	cmp	r7, r4
   148d8:	d1f4      	bne.n	148c4 <POINTonE2_add+0x2e8>
   148da:	f50d 7d75 	add.w	sp, sp, #980	; 0x3d4
   148de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148e2:	bf00      	nop
   148e4:	fffcfffd 	.word	0xfffcfffd
   148e8:	00024108 	.word	0x00024108

000148ec <POINTonE2_double>:
   148ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148f0:	b0cb      	sub	sp, #300	; 0x12c
   148f2:	4606      	mov	r6, r0
   148f4:	460f      	mov	r7, r1
   148f6:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 14aa8 <POINTonE2_double+0x1bc>
   148fa:	4c6c      	ldr	r4, [pc, #432]	; (14aac <POINTonE2_double+0x1c0>)
   148fc:	4643      	mov	r3, r8
   148fe:	4622      	mov	r2, r4
   14900:	a832      	add	r0, sp, #200	; 0xc8
   14902:	f7fe ffb5 	bl	13870 <sqr_mont_384x>
   14906:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   1490a:	4643      	mov	r3, r8
   1490c:	4622      	mov	r2, r4
   1490e:	4659      	mov	r1, fp
   14910:	a81a      	add	r0, sp, #104	; 0x68
   14912:	f7fe ffad 	bl	13870 <sqr_mont_384x>
   14916:	4643      	mov	r3, r8
   14918:	4622      	mov	r2, r4
   1491a:	a91a      	add	r1, sp, #104	; 0x68
   1491c:	a802      	add	r0, sp, #8
   1491e:	f7fe ffa7 	bl	13870 <sqr_mont_384x>
   14922:	250c      	movs	r5, #12
   14924:	9500      	str	r5, [sp, #0]
   14926:	4623      	mov	r3, r4
   14928:	463a      	mov	r2, r7
   1492a:	a91a      	add	r1, sp, #104	; 0x68
   1492c:	4608      	mov	r0, r1
   1492e:	f7f8 f9f7 	bl	cd20 <add_mod_n>
   14932:	9500      	str	r5, [sp, #0]
   14934:	4623      	mov	r3, r4
   14936:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1493a:	a926      	add	r1, sp, #152	; 0x98
   1493c:	4608      	mov	r0, r1
   1493e:	f7f8 f9ef 	bl	cd20 <add_mod_n>
   14942:	4643      	mov	r3, r8
   14944:	4622      	mov	r2, r4
   14946:	a91a      	add	r1, sp, #104	; 0x68
   14948:	4608      	mov	r0, r1
   1494a:	f7fe ff91 	bl	13870 <sqr_mont_384x>
   1494e:	9500      	str	r5, [sp, #0]
   14950:	4623      	mov	r3, r4
   14952:	aa32      	add	r2, sp, #200	; 0xc8
   14954:	a91a      	add	r1, sp, #104	; 0x68
   14956:	4608      	mov	r0, r1
   14958:	f7f7 fe8c 	bl	c674 <sub_mod_n>
   1495c:	9500      	str	r5, [sp, #0]
   1495e:	4623      	mov	r3, r4
   14960:	aa3e      	add	r2, sp, #248	; 0xf8
   14962:	a926      	add	r1, sp, #152	; 0x98
   14964:	4608      	mov	r0, r1
   14966:	f7f7 fe85 	bl	c674 <sub_mod_n>
   1496a:	9500      	str	r5, [sp, #0]
   1496c:	4623      	mov	r3, r4
   1496e:	aa02      	add	r2, sp, #8
   14970:	a91a      	add	r1, sp, #104	; 0x68
   14972:	4608      	mov	r0, r1
   14974:	f7f7 fe7e 	bl	c674 <sub_mod_n>
   14978:	9500      	str	r5, [sp, #0]
   1497a:	4623      	mov	r3, r4
   1497c:	aa0e      	add	r2, sp, #56	; 0x38
   1497e:	a926      	add	r1, sp, #152	; 0x98
   14980:	4608      	mov	r0, r1
   14982:	f7f7 fe77 	bl	c674 <sub_mod_n>
   14986:	9500      	str	r5, [sp, #0]
   14988:	4623      	mov	r3, r4
   1498a:	aa1a      	add	r2, sp, #104	; 0x68
   1498c:	4611      	mov	r1, r2
   1498e:	4610      	mov	r0, r2
   14990:	f7f8 f9c6 	bl	cd20 <add_mod_n>
   14994:	9500      	str	r5, [sp, #0]
   14996:	4623      	mov	r3, r4
   14998:	aa26      	add	r2, sp, #152	; 0x98
   1499a:	4611      	mov	r1, r2
   1499c:	4610      	mov	r0, r2
   1499e:	f7f8 f9bf 	bl	cd20 <add_mod_n>
   149a2:	462b      	mov	r3, r5
   149a4:	4622      	mov	r2, r4
   149a6:	a932      	add	r1, sp, #200	; 0xc8
   149a8:	4608      	mov	r0, r1
   149aa:	f7f8 fa41 	bl	ce30 <mul_by_3_mod_n>
   149ae:	462b      	mov	r3, r5
   149b0:	4622      	mov	r2, r4
   149b2:	a93e      	add	r1, sp, #248	; 0xf8
   149b4:	4608      	mov	r0, r1
   149b6:	f7f8 fa3b 	bl	ce30 <mul_by_3_mod_n>
   149ba:	4643      	mov	r3, r8
   149bc:	4622      	mov	r2, r4
   149be:	a932      	add	r1, sp, #200	; 0xc8
   149c0:	4630      	mov	r0, r6
   149c2:	f7fe ff55 	bl	13870 <sqr_mont_384x>
   149c6:	9500      	str	r5, [sp, #0]
   149c8:	4623      	mov	r3, r4
   149ca:	aa1a      	add	r2, sp, #104	; 0x68
   149cc:	4631      	mov	r1, r6
   149ce:	4630      	mov	r0, r6
   149d0:	f7f7 fe50 	bl	c674 <sub_mod_n>
   149d4:	f106 0930 	add.w	r9, r6, #48	; 0x30
   149d8:	9500      	str	r5, [sp, #0]
   149da:	4623      	mov	r3, r4
   149dc:	aa26      	add	r2, sp, #152	; 0x98
   149de:	4649      	mov	r1, r9
   149e0:	4648      	mov	r0, r9
   149e2:	f7f7 fe47 	bl	c674 <sub_mod_n>
   149e6:	9500      	str	r5, [sp, #0]
   149e8:	4623      	mov	r3, r4
   149ea:	aa1a      	add	r2, sp, #104	; 0x68
   149ec:	4631      	mov	r1, r6
   149ee:	4630      	mov	r0, r6
   149f0:	f7f7 fe40 	bl	c674 <sub_mod_n>
   149f4:	9500      	str	r5, [sp, #0]
   149f6:	4623      	mov	r3, r4
   149f8:	aa26      	add	r2, sp, #152	; 0x98
   149fa:	4649      	mov	r1, r9
   149fc:	4648      	mov	r0, r9
   149fe:	f7f7 fe39 	bl	c674 <sub_mod_n>
   14a02:	f106 0ac0 	add.w	sl, r6, #192	; 0xc0
   14a06:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
   14a0a:	9500      	str	r5, [sp, #0]
   14a0c:	4623      	mov	r3, r4
   14a0e:	460a      	mov	r2, r1
   14a10:	4650      	mov	r0, sl
   14a12:	f7f8 f985 	bl	cd20 <add_mod_n>
   14a16:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
   14a1a:	9500      	str	r5, [sp, #0]
   14a1c:	4623      	mov	r3, r4
   14a1e:	460a      	mov	r2, r1
   14a20:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
   14a24:	f7f8 f97c 	bl	cd20 <add_mod_n>
   14a28:	f8cd 8000 	str.w	r8, [sp]
   14a2c:	4623      	mov	r3, r4
   14a2e:	465a      	mov	r2, fp
   14a30:	4651      	mov	r1, sl
   14a32:	4650      	mov	r0, sl
   14a34:	f7fb fc8e 	bl	10354 <mul_mont_384x>
   14a38:	9500      	str	r5, [sp, #0]
   14a3a:	4623      	mov	r3, r4
   14a3c:	2203      	movs	r2, #3
   14a3e:	a902      	add	r1, sp, #8
   14a40:	4608      	mov	r0, r1
   14a42:	f7f8 fa95 	bl	cf70 <lshift_mod_n>
   14a46:	9500      	str	r5, [sp, #0]
   14a48:	4623      	mov	r3, r4
   14a4a:	2203      	movs	r2, #3
   14a4c:	a90e      	add	r1, sp, #56	; 0x38
   14a4e:	4608      	mov	r0, r1
   14a50:	f7f8 fa8e 	bl	cf70 <lshift_mod_n>
   14a54:	f106 0760 	add.w	r7, r6, #96	; 0x60
   14a58:	9500      	str	r5, [sp, #0]
   14a5a:	4623      	mov	r3, r4
   14a5c:	4632      	mov	r2, r6
   14a5e:	a91a      	add	r1, sp, #104	; 0x68
   14a60:	4638      	mov	r0, r7
   14a62:	f7f7 fe07 	bl	c674 <sub_mod_n>
   14a66:	3690      	adds	r6, #144	; 0x90
   14a68:	9500      	str	r5, [sp, #0]
   14a6a:	4623      	mov	r3, r4
   14a6c:	464a      	mov	r2, r9
   14a6e:	a926      	add	r1, sp, #152	; 0x98
   14a70:	4630      	mov	r0, r6
   14a72:	f7f7 fdff 	bl	c674 <sub_mod_n>
   14a76:	f8cd 8000 	str.w	r8, [sp]
   14a7a:	4623      	mov	r3, r4
   14a7c:	aa32      	add	r2, sp, #200	; 0xc8
   14a7e:	4639      	mov	r1, r7
   14a80:	4638      	mov	r0, r7
   14a82:	f7fb fc67 	bl	10354 <mul_mont_384x>
   14a86:	9500      	str	r5, [sp, #0]
   14a88:	4623      	mov	r3, r4
   14a8a:	aa02      	add	r2, sp, #8
   14a8c:	4639      	mov	r1, r7
   14a8e:	4638      	mov	r0, r7
   14a90:	f7f7 fdf0 	bl	c674 <sub_mod_n>
   14a94:	9500      	str	r5, [sp, #0]
   14a96:	4623      	mov	r3, r4
   14a98:	aa0e      	add	r2, sp, #56	; 0x38
   14a9a:	4631      	mov	r1, r6
   14a9c:	4630      	mov	r0, r6
   14a9e:	f7f7 fde9 	bl	c674 <sub_mod_n>
   14aa2:	b04b      	add	sp, #300	; 0x12c
   14aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa8:	fffcfffd 	.word	0xfffcfffd
   14aac:	00024108 	.word	0x00024108

00014ab0 <POINTonE2_precompute_w4>:
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	4606      	mov	r6, r0
   14ab4:	1f0b      	subs	r3, r1, #4
   14ab6:	1f02      	subs	r2, r0, #4
   14ab8:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   14abc:	f853 4f04 	ldr.w	r4, [r3, #4]!
   14ac0:	f842 4f04 	str.w	r4, [r2, #4]!
   14ac4:	4283      	cmp	r3, r0
   14ac6:	d1f9      	bne.n	14abc <POINTonE2_precompute_w4+0xc>
   14ac8:	f506 7090 	add.w	r0, r6, #288	; 0x120
   14acc:	f7ff ff0e 	bl	148ec <POINTonE2_double>
   14ad0:	f506 7510 	add.w	r5, r6, #576	; 0x240
   14ad4:	4634      	mov	r4, r6
   14ad6:	f506 7658 	add.w	r6, r6, #864	; 0x360
   14ada:	4622      	mov	r2, r4
   14adc:	f504 7490 	add.w	r4, r4, #288	; 0x120
   14ae0:	4621      	mov	r1, r4
   14ae2:	4628      	mov	r0, r5
   14ae4:	f7ff fd7a 	bl	145dc <POINTonE2_add>
   14ae8:	4621      	mov	r1, r4
   14aea:	f505 7090 	add.w	r0, r5, #288	; 0x120
   14aee:	f7ff fefd 	bl	148ec <POINTonE2_double>
   14af2:	f505 7510 	add.w	r5, r5, #576	; 0x240
   14af6:	42b4      	cmp	r4, r6
   14af8:	d1ef      	bne.n	14ada <POINTonE2_precompute_w4+0x2a>
   14afa:	bd70      	pop	{r4, r5, r6, pc}

00014afc <POINTonE2_dadd>:
   14afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b00:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   14b04:	9003      	str	r0, [sp, #12]
   14b06:	460c      	mov	r4, r1
   14b08:	4615      	mov	r5, r2
   14b0a:	461e      	mov	r6, r3
   14b0c:	4fc8      	ldr	r7, [pc, #800]	; (14e30 <POINTonE2_dadd+0x334>)
   14b0e:	f04f 090c 	mov.w	r9, #12
   14b12:	f8cd 9000 	str.w	r9, [sp]
   14b16:	463b      	mov	r3, r7
   14b18:	460a      	mov	r2, r1
   14b1a:	a834      	add	r0, sp, #208	; 0xd0
   14b1c:	f7f8 f900 	bl	cd20 <add_mod_n>
   14b20:	f104 0130 	add.w	r1, r4, #48	; 0x30
   14b24:	f8cd 9000 	str.w	r9, [sp]
   14b28:	463b      	mov	r3, r7
   14b2a:	460a      	mov	r2, r1
   14b2c:	a840      	add	r0, sp, #256	; 0x100
   14b2e:	f7f8 f8f7 	bl	cd20 <add_mod_n>
   14b32:	4bc0      	ldr	r3, [pc, #768]	; (14e34 <POINTonE2_dadd+0x338>)
   14b34:	463a      	mov	r2, r7
   14b36:	4621      	mov	r1, r4
   14b38:	a81c      	add	r0, sp, #112	; 0x70
   14b3a:	f7fe fe99 	bl	13870 <sqr_mont_384x>
   14b3e:	464b      	mov	r3, r9
   14b40:	463a      	mov	r2, r7
   14b42:	a91c      	add	r1, sp, #112	; 0x70
   14b44:	4608      	mov	r0, r1
   14b46:	f7f8 f973 	bl	ce30 <mul_by_3_mod_n>
   14b4a:	464b      	mov	r3, r9
   14b4c:	463a      	mov	r2, r7
   14b4e:	a928      	add	r1, sp, #160	; 0xa0
   14b50:	4608      	mov	r0, r1
   14b52:	f7f8 f96d 	bl	ce30 <mul_by_3_mod_n>
   14b56:	f104 0860 	add.w	r8, r4, #96	; 0x60
   14b5a:	f8cd 9000 	str.w	r9, [sp]
   14b5e:	463b      	mov	r3, r7
   14b60:	4642      	mov	r2, r8
   14b62:	4641      	mov	r1, r8
   14b64:	a804      	add	r0, sp, #16
   14b66:	f7f8 f8db 	bl	cd20 <add_mod_n>
   14b6a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   14b6e:	f8cd 9000 	str.w	r9, [sp]
   14b72:	463b      	mov	r3, r7
   14b74:	460a      	mov	r2, r1
   14b76:	a810      	add	r0, sp, #64	; 0x40
   14b78:	f7f8 f8d2 	bl	cd20 <add_mod_n>
   14b7c:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
   14b80:	f105 03bc 	add.w	r3, r5, #188	; 0xbc
   14b84:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   14b88:	2200      	movs	r2, #0
   14b8a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   14b8e:	430a      	orrs	r2, r1
   14b90:	4283      	cmp	r3, r0
   14b92:	d1fa      	bne.n	14b8a <POINTonE2_dadd+0x8e>
   14b94:	1e53      	subs	r3, r2, #1
   14b96:	ea23 0202 	bic.w	r2, r3, r2
   14b9a:	0fd3      	lsrs	r3, r2, #31
   14b9c:	9302      	str	r3, [sp, #8]
   14b9e:	f8df b294 	ldr.w	fp, [pc, #660]	; 14e34 <POINTonE2_dadd+0x338>
   14ba2:	f8df a28c 	ldr.w	sl, [pc, #652]	; 14e30 <POINTonE2_dadd+0x334>
   14ba6:	465b      	mov	r3, fp
   14ba8:	4652      	mov	r2, sl
   14baa:	4649      	mov	r1, r9
   14bac:	a894      	add	r0, sp, #592	; 0x250
   14bae:	f7fe fe5f 	bl	13870 <sqr_mont_384x>
   14bb2:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   14bb6:	f8cd b000 	str.w	fp, [sp]
   14bba:	4653      	mov	r3, sl
   14bbc:	464a      	mov	r2, r9
   14bbe:	4639      	mov	r1, r7
   14bc0:	a8c4      	add	r0, sp, #784	; 0x310
   14bc2:	f7fb fbc7 	bl	10354 <mul_mont_384x>
   14bc6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   14bca:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   14bce:	2200      	movs	r2, #0
   14bd0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   14bd4:	430a      	orrs	r2, r1
   14bd6:	4283      	cmp	r3, r0
   14bd8:	d1fa      	bne.n	14bd0 <POINTonE2_dadd+0xd4>
   14bda:	1e53      	subs	r3, r2, #1
   14bdc:	ea23 0202 	bic.w	r2, r3, r2
   14be0:	ea4f 7bd2 	mov.w	fp, r2, lsr #31
   14be4:	4b93      	ldr	r3, [pc, #588]	; (14e34 <POINTonE2_dadd+0x338>)
   14be6:	4a92      	ldr	r2, [pc, #584]	; (14e30 <POINTonE2_dadd+0x334>)
   14be8:	4639      	mov	r1, r7
   14bea:	a84c      	add	r0, sp, #304	; 0x130
   14bec:	f7fe fe40 	bl	13870 <sqr_mont_384x>
   14bf0:	b1f6      	cbz	r6, 14c30 <POINTonE2_dadd+0x134>
   14bf2:	f8df a23c 	ldr.w	sl, [pc, #572]	; 14e30 <POINTonE2_dadd+0x334>
   14bf6:	4b8f      	ldr	r3, [pc, #572]	; (14e34 <POINTonE2_dadd+0x338>)
   14bf8:	4652      	mov	r2, sl
   14bfa:	a94c      	add	r1, sp, #304	; 0x130
   14bfc:	a8ac      	add	r0, sp, #688	; 0x2b0
   14bfe:	f7fe fe37 	bl	13870 <sqr_mont_384x>
   14c02:	4b8c      	ldr	r3, [pc, #560]	; (14e34 <POINTonE2_dadd+0x338>)
   14c04:	9300      	str	r3, [sp, #0]
   14c06:	4653      	mov	r3, sl
   14c08:	4632      	mov	r2, r6
   14c0a:	a9ac      	add	r1, sp, #688	; 0x2b0
   14c0c:	4608      	mov	r0, r1
   14c0e:	f7fb fba1 	bl	10354 <mul_mont_384x>
   14c12:	260c      	movs	r6, #12
   14c14:	9600      	str	r6, [sp, #0]
   14c16:	4653      	mov	r3, sl
   14c18:	aaac      	add	r2, sp, #688	; 0x2b0
   14c1a:	a91c      	add	r1, sp, #112	; 0x70
   14c1c:	4608      	mov	r0, r1
   14c1e:	f7f8 f87f 	bl	cd20 <add_mod_n>
   14c22:	9600      	str	r6, [sp, #0]
   14c24:	4653      	mov	r3, sl
   14c26:	aab8      	add	r2, sp, #736	; 0x2e0
   14c28:	a928      	add	r1, sp, #160	; 0xa0
   14c2a:	4608      	mov	r0, r1
   14c2c:	f7f8 f878 	bl	cd20 <add_mod_n>
   14c30:	4e7f      	ldr	r6, [pc, #508]	; (14e30 <POINTonE2_dadd+0x334>)
   14c32:	f8df a200 	ldr.w	sl, [pc, #512]	; 14e34 <POINTonE2_dadd+0x338>
   14c36:	f8cd a000 	str.w	sl, [sp]
   14c3a:	4633      	mov	r3, r6
   14c3c:	464a      	mov	r2, r9
   14c3e:	4641      	mov	r1, r8
   14c40:	a8ac      	add	r0, sp, #688	; 0x2b0
   14c42:	f7fb fb87 	bl	10354 <mul_mont_384x>
   14c46:	f8cd a000 	str.w	sl, [sp]
   14c4a:	4633      	mov	r3, r6
   14c4c:	aa94      	add	r2, sp, #592	; 0x250
   14c4e:	a9ac      	add	r1, sp, #688	; 0x2b0
   14c50:	4608      	mov	r0, r1
   14c52:	f7fb fb7f 	bl	10354 <mul_mont_384x>
   14c56:	f8cd a000 	str.w	sl, [sp]
   14c5a:	4633      	mov	r3, r6
   14c5c:	463a      	mov	r2, r7
   14c5e:	f105 0160 	add.w	r1, r5, #96	; 0x60
   14c62:	a864      	add	r0, sp, #400	; 0x190
   14c64:	f7fb fb76 	bl	10354 <mul_mont_384x>
   14c68:	f8cd a000 	str.w	sl, [sp]
   14c6c:	4633      	mov	r3, r6
   14c6e:	aa4c      	add	r2, sp, #304	; 0x130
   14c70:	a964      	add	r1, sp, #400	; 0x190
   14c72:	4608      	mov	r0, r1
   14c74:	f7fb fb6e 	bl	10354 <mul_mont_384x>
   14c78:	270c      	movs	r7, #12
   14c7a:	9700      	str	r7, [sp, #0]
   14c7c:	4633      	mov	r3, r6
   14c7e:	aaac      	add	r2, sp, #688	; 0x2b0
   14c80:	a964      	add	r1, sp, #400	; 0x190
   14c82:	4608      	mov	r0, r1
   14c84:	f7f7 fcf6 	bl	c674 <sub_mod_n>
   14c88:	9700      	str	r7, [sp, #0]
   14c8a:	4633      	mov	r3, r6
   14c8c:	aab8      	add	r2, sp, #736	; 0x2e0
   14c8e:	a970      	add	r1, sp, #448	; 0x1c0
   14c90:	4608      	mov	r0, r1
   14c92:	f7f7 fcef 	bl	c674 <sub_mod_n>
   14c96:	f8cd a000 	str.w	sl, [sp]
   14c9a:	4633      	mov	r3, r6
   14c9c:	4622      	mov	r2, r4
   14c9e:	a994      	add	r1, sp, #592	; 0x250
   14ca0:	4608      	mov	r0, r1
   14ca2:	f7fb fb57 	bl	10354 <mul_mont_384x>
   14ca6:	f8cd a000 	str.w	sl, [sp]
   14caa:	4633      	mov	r3, r6
   14cac:	462a      	mov	r2, r5
   14cae:	a94c      	add	r1, sp, #304	; 0x130
   14cb0:	4608      	mov	r0, r1
   14cb2:	f7fb fb4f 	bl	10354 <mul_mont_384x>
   14cb6:	9700      	str	r7, [sp, #0]
   14cb8:	4633      	mov	r3, r6
   14cba:	aa94      	add	r2, sp, #592	; 0x250
   14cbc:	a94c      	add	r1, sp, #304	; 0x130
   14cbe:	a87c      	add	r0, sp, #496	; 0x1f0
   14cc0:	f7f8 f82e 	bl	cd20 <add_mod_n>
   14cc4:	9700      	str	r7, [sp, #0]
   14cc6:	4633      	mov	r3, r6
   14cc8:	aaa0      	add	r2, sp, #640	; 0x280
   14cca:	a958      	add	r1, sp, #352	; 0x160
   14ccc:	a888      	add	r0, sp, #544	; 0x220
   14cce:	f7f8 f827 	bl	cd20 <add_mod_n>
   14cd2:	9700      	str	r7, [sp, #0]
   14cd4:	4633      	mov	r3, r6
   14cd6:	aa94      	add	r2, sp, #592	; 0x250
   14cd8:	a94c      	add	r1, sp, #304	; 0x130
   14cda:	4608      	mov	r0, r1
   14cdc:	f7f7 fcca 	bl	c674 <sub_mod_n>
   14ce0:	9700      	str	r7, [sp, #0]
   14ce2:	4633      	mov	r3, r6
   14ce4:	aaa0      	add	r2, sp, #640	; 0x280
   14ce6:	a958      	add	r1, sp, #352	; 0x160
   14ce8:	4608      	mov	r0, r1
   14cea:	f7f7 fcc3 	bl	c674 <sub_mod_n>
   14cee:	aa4b      	add	r2, sp, #300	; 0x12c
   14cf0:	ae7b      	add	r6, sp, #492	; 0x1ec
   14cf2:	4613      	mov	r3, r2
   14cf4:	2100      	movs	r1, #0
   14cf6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   14cfa:	4301      	orrs	r1, r0
   14cfc:	42b3      	cmp	r3, r6
   14cfe:	d1fa      	bne.n	14cf6 <POINTonE2_dadd+0x1fa>
   14d00:	1e48      	subs	r0, r1, #1
   14d02:	ea20 0001 	bic.w	r0, r0, r1
   14d06:	17c0      	asrs	r0, r0, #31
   14d08:	3c04      	subs	r4, #4
   14d0a:	ae94      	add	r6, sp, #592	; 0x250
   14d0c:	afdc      	add	r7, sp, #880	; 0x370
   14d0e:	4631      	mov	r1, r6
   14d10:	46a4      	mov	ip, r4
   14d12:	4696      	mov	lr, r2
   14d14:	680a      	ldr	r2, [r1, #0]
   14d16:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   14d1a:	4053      	eors	r3, r2
   14d1c:	4003      	ands	r3, r0
   14d1e:	4053      	eors	r3, r2
   14d20:	f841 3b04 	str.w	r3, [r1], #4
   14d24:	42b9      	cmp	r1, r7
   14d26:	d1f5      	bne.n	14d14 <POINTonE2_dadd+0x218>
   14d28:	4672      	mov	r2, lr
   14d2a:	a903      	add	r1, sp, #12
   14d2c:	f50d 7c96 	add.w	ip, sp, #300	; 0x12c
   14d30:	4686      	mov	lr, r0
   14d32:	f852 0f04 	ldr.w	r0, [r2, #4]!
   14d36:	f851 3f04 	ldr.w	r3, [r1, #4]!
   14d3a:	4043      	eors	r3, r0
   14d3c:	ea03 030e 	and.w	r3, r3, lr
   14d40:	4043      	eors	r3, r0
   14d42:	6013      	str	r3, [r2, #0]
   14d44:	458c      	cmp	ip, r1
   14d46:	d1f4      	bne.n	14d32 <POINTonE2_dadd+0x236>
   14d48:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 14e30 <POINTonE2_dadd+0x334>
   14d4c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 14e34 <POINTonE2_dadd+0x338>
   14d50:	f8cd 9000 	str.w	r9, [sp]
   14d54:	4643      	mov	r3, r8
   14d56:	aa4c      	add	r2, sp, #304	; 0x130
   14d58:	a9c4      	add	r1, sp, #784	; 0x310
   14d5a:	4608      	mov	r0, r1
   14d5c:	f7fb fafa 	bl	10354 <mul_mont_384x>
   14d60:	464b      	mov	r3, r9
   14d62:	4642      	mov	r2, r8
   14d64:	a94c      	add	r1, sp, #304	; 0x130
   14d66:	a804      	add	r0, sp, #16
   14d68:	f7fe fd82 	bl	13870 <sqr_mont_384x>
   14d6c:	f8cd 9000 	str.w	r9, [sp]
   14d70:	4643      	mov	r3, r8
   14d72:	aa4c      	add	r2, sp, #304	; 0x130
   14d74:	a904      	add	r1, sp, #16
   14d76:	a81c      	add	r0, sp, #112	; 0x70
   14d78:	f7fb faec 	bl	10354 <mul_mont_384x>
   14d7c:	f8cd 9000 	str.w	r9, [sp]
   14d80:	4643      	mov	r3, r8
   14d82:	aaac      	add	r2, sp, #688	; 0x2b0
   14d84:	a91c      	add	r1, sp, #112	; 0x70
   14d86:	4608      	mov	r0, r1
   14d88:	f7fb fae4 	bl	10354 <mul_mont_384x>
   14d8c:	f8cd 9000 	str.w	r9, [sp]
   14d90:	4643      	mov	r3, r8
   14d92:	aa94      	add	r2, sp, #592	; 0x250
   14d94:	a904      	add	r1, sp, #16
   14d96:	a8ac      	add	r0, sp, #688	; 0x2b0
   14d98:	f7fb fadc 	bl	10354 <mul_mont_384x>
   14d9c:	f8cd 9000 	str.w	r9, [sp]
   14da0:	4643      	mov	r3, r8
   14da2:	aa7c      	add	r2, sp, #496	; 0x1f0
   14da4:	a904      	add	r1, sp, #16
   14da6:	4608      	mov	r0, r1
   14da8:	f7fb fad4 	bl	10354 <mul_mont_384x>
   14dac:	464b      	mov	r3, r9
   14dae:	4642      	mov	r2, r8
   14db0:	a964      	add	r1, sp, #400	; 0x190
   14db2:	a894      	add	r0, sp, #592	; 0x250
   14db4:	f7fe fd5c 	bl	13870 <sqr_mont_384x>
   14db8:	f04f 0a0c 	mov.w	sl, #12
   14dbc:	f8cd a000 	str.w	sl, [sp]
   14dc0:	4643      	mov	r3, r8
   14dc2:	aa04      	add	r2, sp, #16
   14dc4:	a994      	add	r1, sp, #592	; 0x250
   14dc6:	4608      	mov	r0, r1
   14dc8:	f7f7 fc54 	bl	c674 <sub_mod_n>
   14dcc:	f8cd a000 	str.w	sl, [sp]
   14dd0:	4643      	mov	r3, r8
   14dd2:	aa10      	add	r2, sp, #64	; 0x40
   14dd4:	a9a0      	add	r1, sp, #640	; 0x280
   14dd6:	4608      	mov	r0, r1
   14dd8:	f7f7 fc4c 	bl	c674 <sub_mod_n>
   14ddc:	f8cd a000 	str.w	sl, [sp]
   14de0:	4643      	mov	r3, r8
   14de2:	aa94      	add	r2, sp, #592	; 0x250
   14de4:	a9ac      	add	r1, sp, #688	; 0x2b0
   14de6:	4608      	mov	r0, r1
   14de8:	f7f7 fc44 	bl	c674 <sub_mod_n>
   14dec:	f8cd a000 	str.w	sl, [sp]
   14df0:	4643      	mov	r3, r8
   14df2:	aaa0      	add	r2, sp, #640	; 0x280
   14df4:	a9b8      	add	r1, sp, #736	; 0x2e0
   14df6:	4608      	mov	r0, r1
   14df8:	f7f7 fc3c 	bl	c674 <sub_mod_n>
   14dfc:	f8cd 9000 	str.w	r9, [sp]
   14e00:	4643      	mov	r3, r8
   14e02:	aa64      	add	r2, sp, #400	; 0x190
   14e04:	a9ac      	add	r1, sp, #688	; 0x2b0
   14e06:	4608      	mov	r0, r1
   14e08:	f7fb faa4 	bl	10354 <mul_mont_384x>
   14e0c:	f8cd a000 	str.w	sl, [sp]
   14e10:	4643      	mov	r3, r8
   14e12:	aa1c      	add	r2, sp, #112	; 0x70
   14e14:	a9ac      	add	r1, sp, #688	; 0x2b0
   14e16:	4608      	mov	r0, r1
   14e18:	f7f7 fc2c 	bl	c674 <sub_mod_n>
   14e1c:	f8cd a000 	str.w	sl, [sp]
   14e20:	4643      	mov	r3, r8
   14e22:	aa28      	add	r2, sp, #160	; 0xa0
   14e24:	a9b8      	add	r1, sp, #736	; 0x2e0
   14e26:	4608      	mov	r0, r1
   14e28:	f7f7 fc24 	bl	c674 <sub_mod_n>
   14e2c:	9b02      	ldr	r3, [sp, #8]
   14e2e:	e003      	b.n	14e38 <POINTonE2_dadd+0x33c>
   14e30:	00024108 	.word	0x00024108
   14e34:	fffcfffd 	.word	0xfffcfffd
   14e38:	4258      	negs	r0, r3
   14e3a:	4632      	mov	r2, r6
   14e3c:	6811      	ldr	r1, [r2, #0]
   14e3e:	f854 3f04 	ldr.w	r3, [r4, #4]!
   14e42:	404b      	eors	r3, r1
   14e44:	4003      	ands	r3, r0
   14e46:	404b      	eors	r3, r1
   14e48:	f842 3b04 	str.w	r3, [r2], #4
   14e4c:	42ba      	cmp	r2, r7
   14e4e:	d1f5      	bne.n	14e3c <POINTonE2_dadd+0x340>
   14e50:	f1cb 0200 	rsb	r2, fp, #0
   14e54:	3d04      	subs	r5, #4
   14e56:	9b03      	ldr	r3, [sp, #12]
   14e58:	1f18      	subs	r0, r3, #4
   14e5a:	f856 1b04 	ldr.w	r1, [r6], #4
   14e5e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   14e62:	404b      	eors	r3, r1
   14e64:	4013      	ands	r3, r2
   14e66:	404b      	eors	r3, r1
   14e68:	f840 3f04 	str.w	r3, [r0, #4]!
   14e6c:	42be      	cmp	r6, r7
   14e6e:	d1f4      	bne.n	14e5a <POINTonE2_dadd+0x35e>
   14e70:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
   14e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014e78 <POINTonE2s_mult_w4>:
   14e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e7c:	b0cb      	sub	sp, #300	; 0x12c
   14e7e:	af00      	add	r7, sp, #0
   14e80:	4605      	mov	r5, r0
   14e82:	4616      	mov	r6, r2
   14e84:	603b      	str	r3, [r7, #0]
   14e86:	f8d7 8150 	ldr.w	r8, [r7, #336]	; 0x150
   14e8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   14e8e:	b37b      	cbz	r3, 14ef0 <POINTonE2s_mult_w4+0x78>
   14e90:	b176      	cbz	r6, 14eb0 <POINTonE2s_mult_w4+0x38>
   14e92:	f1a1 0a04 	sub.w	sl, r1, #4
   14e96:	f8d7 9154 	ldr.w	r9, [r7, #340]	; 0x154
   14e9a:	2400      	movs	r4, #0
   14e9c:	f85a 1f04 	ldr.w	r1, [sl, #4]!
   14ea0:	4648      	mov	r0, r9
   14ea2:	f7ff fe05 	bl	14ab0 <POINTonE2_precompute_w4>
   14ea6:	3401      	adds	r4, #1
   14ea8:	f509 6910 	add.w	r9, r9, #2304	; 0x900
   14eac:	42a6      	cmp	r6, r4
   14eae:	d1f5      	bne.n	14e9c <POINTonE2s_mult_w4+0x24>
   14eb0:	f008 0103 	and.w	r1, r8, #3
   14eb4:	1c4a      	adds	r2, r1, #1
   14eb6:	2301      	movs	r3, #1
   14eb8:	4093      	lsls	r3, r2
   14eba:	f103 3aff 	add.w	sl, r3, #4294967295
   14ebe:	4689      	mov	r9, r1
   14ec0:	ebb8 0801 	subs.w	r8, r8, r1
   14ec4:	d01d      	beq.n	14f02 <POINTonE2s_mult_w4+0x8a>
   14ec6:	f108 3bff 	add.w	fp, r8, #4294967295
   14eca:	4659      	mov	r1, fp
   14ecc:	683b      	ldr	r3, [r7, #0]
   14ece:	6818      	ldr	r0, [r3, #0]
   14ed0:	f7f7 fbb8 	bl	c644 <get_wval>
   14ed4:	2104      	movs	r1, #4
   14ed6:	ea00 000a 	and.w	r0, r0, sl
   14eda:	f7f7 fbbf 	bl	c65c <booth_encode>
   14ede:	4602      	mov	r2, r0
   14ee0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   14ee4:	4628      	mov	r0, r5
   14ee6:	f7f8 fe93 	bl	dc10 <POINTonE2_gather_booth_w4>
   14eea:	2401      	movs	r4, #1
   14eec:	464b      	mov	r3, r9
   14eee:	e021      	b.n	14f34 <POINTonE2s_mult_w4+0xbc>
   14ef0:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
   14ef4:	466a      	mov	r2, sp
   14ef6:	eba2 2303 	sub.w	r3, r2, r3, lsl #8
   14efa:	469d      	mov	sp, r3
   14efc:	f8c7 d154 	str.w	sp, [r7, #340]	; 0x154
   14f00:	e7c6      	b.n	14e90 <POINTonE2s_mult_w4+0x18>
   14f02:	683b      	ldr	r3, [r7, #0]
   14f04:	681b      	ldr	r3, [r3, #0]
   14f06:	7818      	ldrb	r0, [r3, #0]
   14f08:	2104      	movs	r1, #4
   14f0a:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   14f0e:	f7f7 fba5 	bl	c65c <booth_encode>
   14f12:	4602      	mov	r2, r0
   14f14:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
   14f18:	4628      	mov	r0, r5
   14f1a:	f7f8 fe79 	bl	dc10 <POINTonE2_gather_booth_w4>
   14f1e:	2401      	movs	r4, #1
   14f20:	e040      	b.n	14fa4 <POINTonE2s_mult_w4+0x12c>
   14f22:	f1ab 0204 	sub.w	r2, fp, #4
   14f26:	f04f 0a1f 	mov.w	sl, #31
   14f2a:	2304      	movs	r3, #4
   14f2c:	f1bb 0f03 	cmp.w	fp, #3
   14f30:	d036      	beq.n	14fa0 <POINTonE2s_mult_w4+0x128>
   14f32:	4693      	mov	fp, r2
   14f34:	42a6      	cmp	r6, r4
   14f36:	d92b      	bls.n	14f90 <POINTonE2s_mult_w4+0x118>
   14f38:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   14f3c:	f109 39ff 	add.w	r9, r9, #4294967295
   14f40:	683a      	ldr	r2, [r7, #0]
   14f42:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   14f46:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   14f4a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
   14f4e:	eb02 2808 	add.w	r8, r2, r8, lsl #8
   14f52:	3301      	adds	r3, #1
   14f54:	607b      	str	r3, [r7, #4]
   14f56:	687a      	ldr	r2, [r7, #4]
   14f58:	4659      	mov	r1, fp
   14f5a:	f859 0f04 	ldr.w	r0, [r9, #4]!
   14f5e:	f7f7 fb71 	bl	c644 <get_wval>
   14f62:	2104      	movs	r1, #4
   14f64:	ea00 000a 	and.w	r0, r0, sl
   14f68:	f7f7 fb78 	bl	c65c <booth_encode>
   14f6c:	4602      	mov	r2, r0
   14f6e:	4641      	mov	r1, r8
   14f70:	f107 0008 	add.w	r0, r7, #8
   14f74:	f7f8 fe4c 	bl	dc10 <POINTonE2_gather_booth_w4>
   14f78:	2300      	movs	r3, #0
   14f7a:	f107 0208 	add.w	r2, r7, #8
   14f7e:	4629      	mov	r1, r5
   14f80:	4628      	mov	r0, r5
   14f82:	f7ff fdbb 	bl	14afc <POINTonE2_dadd>
   14f86:	3401      	adds	r4, #1
   14f88:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   14f8c:	42a6      	cmp	r6, r4
   14f8e:	d1e2      	bne.n	14f56 <POINTonE2s_mult_w4+0xde>
   14f90:	2404      	movs	r4, #4
   14f92:	4629      	mov	r1, r5
   14f94:	4628      	mov	r0, r5
   14f96:	f7ff fca9 	bl	148ec <POINTonE2_double>
   14f9a:	3c01      	subs	r4, #1
   14f9c:	d1f9      	bne.n	14f92 <POINTonE2s_mult_w4+0x11a>
   14f9e:	e7c0      	b.n	14f22 <POINTonE2s_mult_w4+0xaa>
   14fa0:	f04f 0a1f 	mov.w	sl, #31
   14fa4:	42a6      	cmp	r6, r4
   14fa6:	d928      	bls.n	14ffa <POINTonE2s_mult_w4+0x182>
   14fa8:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
   14fac:	f109 39ff 	add.w	r9, r9, #4294967295
   14fb0:	683b      	ldr	r3, [r7, #0]
   14fb2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   14fb6:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
   14fba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   14fbe:	eb03 2808 	add.w	r8, r3, r8, lsl #8
   14fc2:	f04f 0b04 	mov.w	fp, #4
   14fc6:	f859 3f04 	ldr.w	r3, [r9, #4]!
   14fca:	7818      	ldrb	r0, [r3, #0]
   14fcc:	4659      	mov	r1, fp
   14fce:	ea0a 0040 	and.w	r0, sl, r0, lsl #1
   14fd2:	f7f7 fb43 	bl	c65c <booth_encode>
   14fd6:	4602      	mov	r2, r0
   14fd8:	4641      	mov	r1, r8
   14fda:	f107 0008 	add.w	r0, r7, #8
   14fde:	f7f8 fe17 	bl	dc10 <POINTonE2_gather_booth_w4>
   14fe2:	2300      	movs	r3, #0
   14fe4:	f107 0208 	add.w	r2, r7, #8
   14fe8:	4629      	mov	r1, r5
   14fea:	4628      	mov	r0, r5
   14fec:	f7ff fd86 	bl	14afc <POINTonE2_dadd>
   14ff0:	3401      	adds	r4, #1
   14ff2:	f508 6810 	add.w	r8, r8, #2304	; 0x900
   14ff6:	42a6      	cmp	r6, r4
   14ff8:	d1e5      	bne.n	14fc6 <POINTonE2s_mult_w4+0x14e>
   14ffa:	f507 7796 	add.w	r7, r7, #300	; 0x12c
   14ffe:	46bd      	mov	sp, r7
   15000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015004 <POINTonE2_mult_gls>:
   15004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15008:	f5ad 7d6a 	sub.w	sp, sp, #936	; 0x3a8
   1500c:	4606      	mov	r6, r0
   1500e:	460d      	mov	r5, r1
   15010:	f102 0c20 	add.w	ip, r2, #32
   15014:	2400      	movs	r4, #0
   15016:	43d0      	mvns	r0, r2
   15018:	eb00 030c 	add.w	r3, r0, ip
   1501c:	f81c 1d01 	ldrb.w	r1, [ip, #-1]!
   15020:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   15024:	f023 0303 	bic.w	r3, r3, #3
   15028:	a9ea      	add	r1, sp, #936	; 0x3a8
   1502a:	440b      	add	r3, r1
   1502c:	f843 4c20 	str.w	r4, [r3, #-32]
   15030:	4562      	cmp	r2, ip
   15032:	d1f1      	bne.n	15018 <POINTonE2_mult_gls+0x14>
   15034:	ace2      	add	r4, sp, #904	; 0x388
   15036:	4620      	mov	r0, r4
   15038:	f7fd fc40 	bl	128bc <div_by_zz>
   1503c:	4620      	mov	r0, r4
   1503e:	f7fd fdd5 	bl	12bec <div_by_z>
   15042:	f50d 7a66 	add.w	sl, sp, #920	; 0x398
   15046:	4650      	mov	r0, sl
   15048:	f7fd fdd0 	bl	12bec <div_by_z>
   1504c:	af0a      	add	r7, sp, #40	; 0x28
   1504e:	4629      	mov	r1, r5
   15050:	4638      	mov	r0, r7
   15052:	f7fb f9cd 	bl	103f0 <psi>
   15056:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
   1505a:	4639      	mov	r1, r7
   1505c:	4648      	mov	r0, r9
   1505e:	f7fb f9c7 	bl	103f0 <psi>
   15062:	f50d 781a 	add.w	r8, sp, #616	; 0x268
   15066:	4649      	mov	r1, r9
   15068:	4640      	mov	r0, r8
   1506a:	f7fb f9c1 	bl	103f0 <psi>
   1506e:	2101      	movs	r1, #1
   15070:	4638      	mov	r0, r7
   15072:	f7f8 fdb3 	bl	dbdc <POINTonE2_cneg>
   15076:	2101      	movs	r1, #1
   15078:	4640      	mov	r0, r8
   1507a:	f7f8 fdaf 	bl	dbdc <POINTonE2_cneg>
   1507e:	9502      	str	r5, [sp, #8]
   15080:	9406      	str	r4, [sp, #24]
   15082:	9703      	str	r7, [sp, #12]
   15084:	abe4      	add	r3, sp, #912	; 0x390
   15086:	9307      	str	r3, [sp, #28]
   15088:	f8cd 9010 	str.w	r9, [sp, #16]
   1508c:	f8cd a020 	str.w	sl, [sp, #32]
   15090:	f8cd 8014 	str.w	r8, [sp, #20]
   15094:	abe8      	add	r3, sp, #928	; 0x3a0
   15096:	9309      	str	r3, [sp, #36]	; 0x24
   15098:	2300      	movs	r3, #0
   1509a:	9301      	str	r3, [sp, #4]
   1509c:	2340      	movs	r3, #64	; 0x40
   1509e:	9300      	str	r3, [sp, #0]
   150a0:	ab06      	add	r3, sp, #24
   150a2:	2204      	movs	r2, #4
   150a4:	a902      	add	r1, sp, #8
   150a6:	4630      	mov	r0, r6
   150a8:	f7ff fee6 	bl	14e78 <POINTonE2s_mult_w4>
   150ac:	4620      	mov	r0, r4
   150ae:	aaea      	add	r2, sp, #936	; 0x3a8
   150b0:	2300      	movs	r3, #0
   150b2:	f840 3b04 	str.w	r3, [r0], #4
   150b6:	4290      	cmp	r0, r2
   150b8:	d1fb      	bne.n	150b2 <POINTonE2_mult_gls+0xae>
   150ba:	abe2      	add	r3, sp, #904	; 0x388
   150bc:	f50d 7d6a 	add.w	sp, sp, #936	; 0x3a8
   150c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000150c4 <POINTonE2_mult_w4>:
   150c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   150c8:	f6ad 2d24 	subw	sp, sp, #2596	; 0xa24
   150cc:	4605      	mov	r5, r0
   150ce:	4617      	mov	r7, r2
   150d0:	461e      	mov	r6, r3
   150d2:	4668      	mov	r0, sp
   150d4:	f7ff fcec 	bl	14ab0 <POINTonE2_precompute_w4>
   150d8:	f006 0303 	and.w	r3, r6, #3
   150dc:	1c5c      	adds	r4, r3, #1
   150de:	1af6      	subs	r6, r6, r3
   150e0:	d036      	beq.n	15150 <POINTonE2_mult_w4+0x8c>
   150e2:	4622      	mov	r2, r4
   150e4:	1e71      	subs	r1, r6, #1
   150e6:	4638      	mov	r0, r7
   150e8:	f7f7 faac 	bl	c644 <get_wval>
   150ec:	f04f 33ff 	mov.w	r3, #4294967295
   150f0:	40a3      	lsls	r3, r4
   150f2:	2104      	movs	r1, #4
   150f4:	ea20 0003 	bic.w	r0, r0, r3
   150f8:	f7f7 fab0 	bl	c65c <booth_encode>
   150fc:	4602      	mov	r2, r0
   150fe:	4669      	mov	r1, sp
   15100:	4628      	mov	r0, r5
   15102:	f7f8 fd85 	bl	dc10 <POINTonE2_gather_booth_w4>
   15106:	f04f 0905 	mov.w	r9, #5
   1510a:	f04f 0804 	mov.w	r8, #4
   1510e:	2404      	movs	r4, #4
   15110:	4629      	mov	r1, r5
   15112:	4628      	mov	r0, r5
   15114:	f7ff fbea 	bl	148ec <POINTonE2_double>
   15118:	3c01      	subs	r4, #1
   1511a:	d1f9      	bne.n	15110 <POINTonE2_mult_w4+0x4c>
   1511c:	1f34      	subs	r4, r6, #4
   1511e:	d027      	beq.n	15170 <POINTonE2_mult_w4+0xac>
   15120:	464a      	mov	r2, r9
   15122:	1f71      	subs	r1, r6, #5
   15124:	4638      	mov	r0, r7
   15126:	f7f7 fa8d 	bl	c644 <get_wval>
   1512a:	4641      	mov	r1, r8
   1512c:	f000 001f 	and.w	r0, r0, #31
   15130:	f7f7 fa94 	bl	c65c <booth_encode>
   15134:	4602      	mov	r2, r0
   15136:	4669      	mov	r1, sp
   15138:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   1513c:	f7f8 fd68 	bl	dc10 <POINTonE2_gather_booth_w4>
   15140:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   15144:	4629      	mov	r1, r5
   15146:	4628      	mov	r0, r5
   15148:	f7ff fa48 	bl	145dc <POINTonE2_add>
   1514c:	4626      	mov	r6, r4
   1514e:	e7de      	b.n	1510e <POINTonE2_mult_w4+0x4a>
   15150:	7838      	ldrb	r0, [r7, #0]
   15152:	f04f 33ff 	mov.w	r3, #4294967295
   15156:	40a3      	lsls	r3, r4
   15158:	43db      	mvns	r3, r3
   1515a:	2104      	movs	r1, #4
   1515c:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   15160:	f7f7 fa7c 	bl	c65c <booth_encode>
   15164:	4602      	mov	r2, r0
   15166:	4669      	mov	r1, sp
   15168:	4628      	mov	r0, r5
   1516a:	f7f8 fd51 	bl	dc10 <POINTonE2_gather_booth_w4>
   1516e:	e013      	b.n	15198 <POINTonE2_mult_w4+0xd4>
   15170:	7838      	ldrb	r0, [r7, #0]
   15172:	0040      	lsls	r0, r0, #1
   15174:	2104      	movs	r1, #4
   15176:	f000 001e 	and.w	r0, r0, #30
   1517a:	f7f7 fa6f 	bl	c65c <booth_encode>
   1517e:	4602      	mov	r2, r0
   15180:	4669      	mov	r1, sp
   15182:	f50d 6010 	add.w	r0, sp, #2304	; 0x900
   15186:	f7f8 fd43 	bl	dc10 <POINTonE2_gather_booth_w4>
   1518a:	2300      	movs	r3, #0
   1518c:	f50d 6210 	add.w	r2, sp, #2304	; 0x900
   15190:	4629      	mov	r1, r5
   15192:	4628      	mov	r0, r5
   15194:	f7ff fcb2 	bl	14afc <POINTonE2_dadd>
   15198:	f60d 2d24 	addw	sp, sp, #2596	; 0xa24
   1519c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000151a0 <POINTonE2_mult_w5>:
   151a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   151a4:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
   151a8:	b081      	sub	sp, #4
   151aa:	4605      	mov	r5, r0
   151ac:	4617      	mov	r7, r2
   151ae:	4698      	mov	r8, r3
   151b0:	f1a1 0e04 	sub.w	lr, r1, #4
   151b4:	466c      	mov	r4, sp
   151b6:	ab48      	add	r3, sp, #288	; 0x120
   151b8:	46a4      	mov	ip, r4
   151ba:	f85e 2f04 	ldr.w	r2, [lr, #4]!
   151be:	f84c 2b04 	str.w	r2, [ip], #4
   151c2:	459c      	cmp	ip, r3
   151c4:	d1f9      	bne.n	151ba <POINTonE2_mult_w5+0x1a>
   151c6:	a848      	add	r0, sp, #288	; 0x120
   151c8:	f7ff fb90 	bl	148ec <POINTonE2_double>
   151cc:	ae90      	add	r6, sp, #576	; 0x240
   151ce:	f504 69fc 	add.w	r9, r4, #2016	; 0x7e0
   151d2:	4622      	mov	r2, r4
   151d4:	f504 7490 	add.w	r4, r4, #288	; 0x120
   151d8:	4621      	mov	r1, r4
   151da:	4630      	mov	r0, r6
   151dc:	f7ff f9fe 	bl	145dc <POINTonE2_add>
   151e0:	4621      	mov	r1, r4
   151e2:	f506 7090 	add.w	r0, r6, #288	; 0x120
   151e6:	f7ff fb81 	bl	148ec <POINTonE2_double>
   151ea:	f506 7610 	add.w	r6, r6, #576	; 0x240
   151ee:	45a1      	cmp	r9, r4
   151f0:	d1ef      	bne.n	151d2 <POINTonE2_mult_w5+0x32>
   151f2:	4b36      	ldr	r3, [pc, #216]	; (152cc <POINTonE2_mult_w5+0x12c>)
   151f4:	fba3 2308 	umull	r2, r3, r3, r8
   151f8:	f023 0603 	bic.w	r6, r3, #3
   151fc:	eb06 0693 	add.w	r6, r6, r3, lsr #2
   15200:	eba8 0606 	sub.w	r6, r8, r6
   15204:	1c74      	adds	r4, r6, #1
   15206:	ebb8 0606 	subs.w	r6, r8, r6
   1520a:	d036      	beq.n	1527a <POINTonE2_mult_w5+0xda>
   1520c:	4622      	mov	r2, r4
   1520e:	1e71      	subs	r1, r6, #1
   15210:	4638      	mov	r0, r7
   15212:	f7f7 fa17 	bl	c644 <get_wval>
   15216:	f04f 33ff 	mov.w	r3, #4294967295
   1521a:	40a3      	lsls	r3, r4
   1521c:	2105      	movs	r1, #5
   1521e:	ea20 0003 	bic.w	r0, r0, r3
   15222:	f7f7 fa1b 	bl	c65c <booth_encode>
   15226:	4602      	mov	r2, r0
   15228:	4669      	mov	r1, sp
   1522a:	4628      	mov	r0, r5
   1522c:	f7f8 fd1f 	bl	dc6e <POINTonE2_gather_booth_w5>
   15230:	f04f 0906 	mov.w	r9, #6
   15234:	f04f 0805 	mov.w	r8, #5
   15238:	2405      	movs	r4, #5
   1523a:	4629      	mov	r1, r5
   1523c:	4628      	mov	r0, r5
   1523e:	f7ff fb55 	bl	148ec <POINTonE2_double>
   15242:	3c01      	subs	r4, #1
   15244:	d1f9      	bne.n	1523a <POINTonE2_mult_w5+0x9a>
   15246:	1f74      	subs	r4, r6, #5
   15248:	d027      	beq.n	1529a <POINTonE2_mult_w5+0xfa>
   1524a:	464a      	mov	r2, r9
   1524c:	1fb1      	subs	r1, r6, #6
   1524e:	4638      	mov	r0, r7
   15250:	f7f7 f9f8 	bl	c644 <get_wval>
   15254:	4641      	mov	r1, r8
   15256:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1525a:	f7f7 f9ff 	bl	c65c <booth_encode>
   1525e:	4602      	mov	r2, r0
   15260:	4669      	mov	r1, sp
   15262:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   15266:	f7f8 fd02 	bl	dc6e <POINTonE2_gather_booth_w5>
   1526a:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   1526e:	4629      	mov	r1, r5
   15270:	4628      	mov	r0, r5
   15272:	f7ff f9b3 	bl	145dc <POINTonE2_add>
   15276:	4626      	mov	r6, r4
   15278:	e7de      	b.n	15238 <POINTonE2_mult_w5+0x98>
   1527a:	7838      	ldrb	r0, [r7, #0]
   1527c:	f04f 33ff 	mov.w	r3, #4294967295
   15280:	40a3      	lsls	r3, r4
   15282:	43db      	mvns	r3, r3
   15284:	2105      	movs	r1, #5
   15286:	ea03 0040 	and.w	r0, r3, r0, lsl #1
   1528a:	f7f7 f9e7 	bl	c65c <booth_encode>
   1528e:	4602      	mov	r2, r0
   15290:	4669      	mov	r1, sp
   15292:	4628      	mov	r0, r5
   15294:	f7f8 fceb 	bl	dc6e <POINTonE2_gather_booth_w5>
   15298:	e013      	b.n	152c2 <POINTonE2_mult_w5+0x122>
   1529a:	7838      	ldrb	r0, [r7, #0]
   1529c:	0040      	lsls	r0, r0, #1
   1529e:	2105      	movs	r1, #5
   152a0:	f000 003e 	and.w	r0, r0, #62	; 0x3e
   152a4:	f7f7 f9da 	bl	c65c <booth_encode>
   152a8:	4602      	mov	r2, r0
   152aa:	4669      	mov	r1, sp
   152ac:	f50d 5090 	add.w	r0, sp, #4608	; 0x1200
   152b0:	f7f8 fcdd 	bl	dc6e <POINTonE2_gather_booth_w5>
   152b4:	2300      	movs	r3, #0
   152b6:	f50d 5290 	add.w	r2, sp, #4608	; 0x1200
   152ba:	4629      	mov	r1, r5
   152bc:	4628      	mov	r0, r5
   152be:	f7ff fc1d 	bl	14afc <POINTonE2_dadd>
   152c2:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
   152c6:	b001      	add	sp, #4
   152c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   152cc:	cccccccd 	.word	0xcccccccd

000152d0 <blst_p2_mult>:
   152d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152d4:	b089      	sub	sp, #36	; 0x24
   152d6:	4607      	mov	r7, r0
   152d8:	4688      	mov	r8, r1
   152da:	4615      	mov	r5, r2
   152dc:	461e      	mov	r6, r3
   152de:	2b9f      	cmp	r3, #159	; 0x9f
   152e0:	d934      	bls.n	1534c <blst_p2_mult+0x7c>
   152e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   152e6:	d83b      	bhi.n	15360 <blst_p2_mult+0x90>
   152e8:	1dd8      	adds	r0, r3, #7
   152ea:	08c0      	lsrs	r0, r0, #3
   152ec:	f10d 33ff 	add.w	r3, sp, #4294967295
   152f0:	466c      	mov	r4, sp
   152f2:	f10d 0e1f 	add.w	lr, sp, #31
   152f6:	f04f 39ff 	mov.w	r9, #4294967295
   152fa:	2100      	movs	r1, #0
   152fc:	469c      	mov	ip, r3
   152fe:	5c6a      	ldrb	r2, [r5, r1]
   15300:	ea02 0209 	and.w	r2, r2, r9
   15304:	f803 2f01 	strb.w	r2, [r3, #1]!
   15308:	f10c 0c02 	add.w	ip, ip, #2
   1530c:	ebac 0c04 	sub.w	ip, ip, r4
   15310:	ebac 0c00 	sub.w	ip, ip, r0
   15314:	ea4f 79ec 	mov.w	r9, ip, asr #31
   15318:	eb01 71dc 	add.w	r1, r1, ip, lsr #31
   1531c:	4573      	cmp	r3, lr
   1531e:	d1ed      	bne.n	152fc <blst_p2_mult+0x2c>
   15320:	2208      	movs	r2, #8
   15322:	4911      	ldr	r1, [pc, #68]	; (15368 <blst_p2_mult+0x98>)
   15324:	4668      	mov	r0, sp
   15326:	f7f7 f9de 	bl	c6e6 <check_mod_n>
   1532a:	b190      	cbz	r0, 15352 <blst_p2_mult+0x82>
   1532c:	466a      	mov	r2, sp
   1532e:	4641      	mov	r1, r8
   15330:	4638      	mov	r0, r7
   15332:	f7ff fe67 	bl	15004 <POINTonE2_mult_gls>
   15336:	f104 0220 	add.w	r2, r4, #32
   1533a:	2300      	movs	r3, #0
   1533c:	f844 3b04 	str.w	r3, [r4], #4
   15340:	42a2      	cmp	r2, r4
   15342:	d1fb      	bne.n	1533c <blst_p2_mult+0x6c>
   15344:	466b      	mov	r3, sp
   15346:	b009      	add	sp, #36	; 0x24
   15348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1534c:	f7ff feba 	bl	150c4 <POINTonE2_mult_w4>
   15350:	e7f9      	b.n	15346 <blst_p2_mult+0x76>
   15352:	4633      	mov	r3, r6
   15354:	462a      	mov	r2, r5
   15356:	4641      	mov	r1, r8
   15358:	4638      	mov	r0, r7
   1535a:	f7ff ff21 	bl	151a0 <POINTonE2_mult_w5>
   1535e:	e7ea      	b.n	15336 <blst_p2_mult+0x66>
   15360:	f7ff ff1e 	bl	151a0 <POINTonE2_mult_w5>
   15364:	e7ef      	b.n	15346 <blst_p2_mult+0x76>
   15366:	bf00      	nop
   15368:	000254c8 	.word	0x000254c8

0001536c <POINTonE2_add_n_dbl>:
   1536c:	b570      	push	{r4, r5, r6, lr}
   1536e:	4605      	mov	r5, r0
   15370:	4616      	mov	r6, r2
   15372:	2300      	movs	r3, #0
   15374:	460a      	mov	r2, r1
   15376:	4601      	mov	r1, r0
   15378:	f7ff fbc0 	bl	14afc <POINTonE2_dadd>
   1537c:	1e74      	subs	r4, r6, #1
   1537e:	b13e      	cbz	r6, 15390 <POINTonE2_add_n_dbl+0x24>
   15380:	4629      	mov	r1, r5
   15382:	4628      	mov	r0, r5
   15384:	f7ff fab2 	bl	148ec <POINTonE2_double>
   15388:	3c01      	subs	r4, #1
   1538a:	f1b4 3fff 	cmp.w	r4, #4294967295
   1538e:	d1f7      	bne.n	15380 <POINTonE2_add_n_dbl+0x14>
   15390:	bd70      	pop	{r4, r5, r6, pc}

00015392 <POINTonE2_times_minus_z>:
   15392:	b538      	push	{r3, r4, r5, lr}
   15394:	4604      	mov	r4, r0
   15396:	460d      	mov	r5, r1
   15398:	f7ff faa8 	bl	148ec <POINTonE2_double>
   1539c:	2202      	movs	r2, #2
   1539e:	4629      	mov	r1, r5
   153a0:	4620      	mov	r0, r4
   153a2:	f7ff ffe3 	bl	1536c <POINTonE2_add_n_dbl>
   153a6:	2203      	movs	r2, #3
   153a8:	4629      	mov	r1, r5
   153aa:	4620      	mov	r0, r4
   153ac:	f7ff ffde 	bl	1536c <POINTonE2_add_n_dbl>
   153b0:	2209      	movs	r2, #9
   153b2:	4629      	mov	r1, r5
   153b4:	4620      	mov	r0, r4
   153b6:	f7ff ffd9 	bl	1536c <POINTonE2_add_n_dbl>
   153ba:	2220      	movs	r2, #32
   153bc:	4629      	mov	r1, r5
   153be:	4620      	mov	r0, r4
   153c0:	f7ff ffd4 	bl	1536c <POINTonE2_add_n_dbl>
   153c4:	2210      	movs	r2, #16
   153c6:	4629      	mov	r1, r5
   153c8:	4620      	mov	r0, r4
   153ca:	f7ff ffcf 	bl	1536c <POINTonE2_add_n_dbl>
   153ce:	bd38      	pop	{r3, r4, r5, pc}

000153d0 <POINTonE2_in_G2>:
   153d0:	b510      	push	{r4, lr}
   153d2:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
   153d6:	4604      	mov	r4, r0
   153d8:	4601      	mov	r1, r0
   153da:	a890      	add	r0, sp, #576	; 0x240
   153dc:	f7fb f808 	bl	103f0 <psi>
   153e0:	a990      	add	r1, sp, #576	; 0x240
   153e2:	4608      	mov	r0, r1
   153e4:	f7fb f804 	bl	103f0 <psi>
   153e8:	a990      	add	r1, sp, #576	; 0x240
   153ea:	a848      	add	r0, sp, #288	; 0x120
   153ec:	f7fb f800 	bl	103f0 <psi>
   153f0:	a948      	add	r1, sp, #288	; 0x120
   153f2:	4668      	mov	r0, sp
   153f4:	f7ff ffcd 	bl	15392 <POINTonE2_times_minus_z>
   153f8:	2300      	movs	r3, #0
   153fa:	466a      	mov	r2, sp
   153fc:	a990      	add	r1, sp, #576	; 0x240
   153fe:	4608      	mov	r0, r1
   15400:	f7ff fb7c 	bl	14afc <POINTonE2_dadd>
   15404:	2101      	movs	r1, #1
   15406:	a890      	add	r0, sp, #576	; 0x240
   15408:	f7f8 fbe8 	bl	dbdc <POINTonE2_cneg>
   1540c:	2300      	movs	r3, #0
   1540e:	4622      	mov	r2, r4
   15410:	a990      	add	r1, sp, #576	; 0x240
   15412:	4608      	mov	r0, r1
   15414:	f7ff fb72 	bl	14afc <POINTonE2_dadd>
   15418:	abbf      	add	r3, sp, #764	; 0x2fc
   1541a:	a9d7      	add	r1, sp, #860	; 0x35c
   1541c:	2000      	movs	r0, #0
   1541e:	f853 2f04 	ldr.w	r2, [r3, #4]!
   15422:	4310      	orrs	r0, r2
   15424:	428b      	cmp	r3, r1
   15426:	d1fa      	bne.n	1541e <POINTonE2_in_G2+0x4e>
   15428:	1e43      	subs	r3, r0, #1
   1542a:	ea23 0000 	bic.w	r0, r3, r0
   1542e:	0fc0      	lsrs	r0, r0, #31
   15430:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   15434:	bd10      	pop	{r4, pc}

00015436 <blst_p2_in_g2>:
   15436:	b508      	push	{r3, lr}
   15438:	f7ff ffca 	bl	153d0 <POINTonE2_in_G2>
   1543c:	bd08      	pop	{r3, pc}

0001543e <blst_p2_affine_in_g2>:
   1543e:	b510      	push	{r4, lr}
   15440:	b0c8      	sub	sp, #288	; 0x120
   15442:	f1a0 0c04 	sub.w	ip, r0, #4
   15446:	466b      	mov	r3, sp
   15448:	ac30      	add	r4, sp, #192	; 0xc0
   1544a:	4662      	mov	r2, ip
   1544c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   15450:	f843 1b04 	str.w	r1, [r3], #4
   15454:	42a3      	cmp	r3, r4
   15456:	d1f9      	bne.n	1544c <blst_p2_affine_in_g2+0xe>
   15458:	30bc      	adds	r0, #188	; 0xbc
   1545a:	4663      	mov	r3, ip
   1545c:	2200      	movs	r2, #0
   1545e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   15462:	430a      	orrs	r2, r1
   15464:	4283      	cmp	r3, r0
   15466:	d1fa      	bne.n	1545e <blst_p2_affine_in_g2+0x20>
   15468:	f102 3eff 	add.w	lr, r2, #4294967295
   1546c:	ea2e 0202 	bic.w	r2, lr, r2
   15470:	ea4f 7ee2 	mov.w	lr, r2, asr #31
   15474:	4c0a      	ldr	r4, [pc, #40]	; (154a0 <blst_p2_affine_in_g2+0x62>)
   15476:	f104 0290 	add.w	r2, r4, #144	; 0x90
   1547a:	a82f      	add	r0, sp, #188	; 0xbc
   1547c:	34f0      	adds	r4, #240	; 0xf0
   1547e:	f852 1b04 	ldr.w	r1, [r2], #4
   15482:	f85c 3f04 	ldr.w	r3, [ip, #4]!
   15486:	404b      	eors	r3, r1
   15488:	ea03 030e 	and.w	r3, r3, lr
   1548c:	404b      	eors	r3, r1
   1548e:	f840 3f04 	str.w	r3, [r0, #4]!
   15492:	42a2      	cmp	r2, r4
   15494:	d1f3      	bne.n	1547e <blst_p2_affine_in_g2+0x40>
   15496:	4668      	mov	r0, sp
   15498:	f7ff ff9a 	bl	153d0 <POINTonE2_in_G2>
   1549c:	b048      	add	sp, #288	; 0x120
   1549e:	bd10      	pop	{r4, pc}
   154a0:	00024108 	.word	0x00024108

000154a4 <blst_pairing_merge>:
   154a4:	b538      	push	{r3, r4, r5, lr}
   154a6:	4604      	mov	r4, r0
   154a8:	460d      	mov	r5, r1
   154aa:	6803      	ldr	r3, [r0, #0]
   154ac:	f013 0203 	ands.w	r2, r3, #3
   154b0:	d007      	beq.n	154c2 <blst_pairing_merge+0x1e>
   154b2:	6809      	ldr	r1, [r1, #0]
   154b4:	f011 0f03 	tst.w	r1, #3
   154b8:	d003      	beq.n	154c2 <blst_pairing_merge+0x1e>
   154ba:	4019      	ands	r1, r3
   154bc:	f011 0f03 	tst.w	r1, #3
   154c0:	d07f      	beq.n	155c2 <blst_pairing_merge+0x11e>
   154c2:	6861      	ldr	r1, [r4, #4]
   154c4:	2900      	cmp	r1, #0
   154c6:	d17e      	bne.n	155c6 <blst_pairing_merge+0x122>
   154c8:	6869      	ldr	r1, [r5, #4]
   154ca:	2900      	cmp	r1, #0
   154cc:	d17d      	bne.n	155ca <blst_pairing_merge+0x126>
   154ce:	2a01      	cmp	r2, #1
   154d0:	d005      	beq.n	154de <blst_pairing_merge+0x3a>
   154d2:	2a02      	cmp	r2, #2
   154d4:	d03e      	beq.n	15554 <blst_pairing_merge+0xb0>
   154d6:	2a00      	cmp	r2, #0
   154d8:	d05e      	beq.n	15598 <blst_pairing_merge+0xf4>
   154da:	2004      	movs	r0, #4
   154dc:	bd38      	pop	{r3, r4, r5, pc}
   154de:	682a      	ldr	r2, [r5, #0]
   154e0:	ea03 0102 	and.w	r1, r3, r2
   154e4:	f011 0f10 	tst.w	r1, #16
   154e8:	d112      	bne.n	15510 <blst_pairing_merge+0x6c>
   154ea:	f012 0f10 	tst.w	r2, #16
   154ee:	d017      	beq.n	15520 <blst_pairing_merge+0x7c>
   154f0:	f043 0310 	orr.w	r3, r3, #16
   154f4:	6023      	str	r3, [r4, #0]
   154f6:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   154fa:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   154fe:	f505 7037 	add.w	r0, r5, #732	; 0x2dc
   15502:	f853 1f04 	ldr.w	r1, [r3, #4]!
   15506:	f842 1f04 	str.w	r1, [r2, #4]!
   1550a:	4283      	cmp	r3, r0
   1550c:	d1f9      	bne.n	15502 <blst_pairing_merge+0x5e>
   1550e:	e007      	b.n	15520 <blst_pairing_merge+0x7c>
   15510:	f504 7014 	add.w	r0, r4, #592	; 0x250
   15514:	2300      	movs	r3, #0
   15516:	f505 7214 	add.w	r2, r5, #592	; 0x250
   1551a:	4601      	mov	r1, r0
   1551c:	f7f9 fcfe 	bl	ef1c <POINTonE1_dadd>
   15520:	6823      	ldr	r3, [r4, #0]
   15522:	682a      	ldr	r2, [r5, #0]
   15524:	ea03 0102 	and.w	r1, r3, r2
   15528:	f011 0f20 	tst.w	r1, #32
   1552c:	d140      	bne.n	155b0 <blst_pairing_merge+0x10c>
   1552e:	f012 0f20 	tst.w	r2, #32
   15532:	d04c      	beq.n	155ce <blst_pairing_merge+0x12a>
   15534:	f043 0320 	orr.w	r3, r3, #32
   15538:	f844 3b0c 	str.w	r3, [r4], #12
   1553c:	f105 030c 	add.w	r3, r5, #12
   15540:	f505 7513 	add.w	r5, r5, #588	; 0x24c
   15544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   15548:	f844 2f04 	str.w	r2, [r4, #4]!
   1554c:	42ab      	cmp	r3, r5
   1554e:	d1f9      	bne.n	15544 <blst_pairing_merge+0xa0>
   15550:	2000      	movs	r0, #0
   15552:	e7c3      	b.n	154dc <blst_pairing_merge+0x38>
   15554:	682a      	ldr	r2, [r5, #0]
   15556:	ea03 0102 	and.w	r1, r3, r2
   1555a:	f011 0f10 	tst.w	r1, #16
   1555e:	d112      	bne.n	15586 <blst_pairing_merge+0xe2>
   15560:	f012 0f10 	tst.w	r2, #16
   15564:	d0dc      	beq.n	15520 <blst_pairing_merge+0x7c>
   15566:	f043 0310 	orr.w	r3, r3, #16
   1556a:	6023      	str	r3, [r4, #0]
   1556c:	f505 7313 	add.w	r3, r5, #588	; 0x24c
   15570:	f504 7213 	add.w	r2, r4, #588	; 0x24c
   15574:	f505 705b 	add.w	r0, r5, #876	; 0x36c
   15578:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1557c:	f842 1f04 	str.w	r1, [r2, #4]!
   15580:	4283      	cmp	r3, r0
   15582:	d1f9      	bne.n	15578 <blst_pairing_merge+0xd4>
   15584:	e7cc      	b.n	15520 <blst_pairing_merge+0x7c>
   15586:	f504 7014 	add.w	r0, r4, #592	; 0x250
   1558a:	2300      	movs	r3, #0
   1558c:	f505 7214 	add.w	r2, r5, #592	; 0x250
   15590:	4601      	mov	r1, r0
   15592:	f7ff fab3 	bl	14afc <POINTonE2_dadd>
   15596:	e7c3      	b.n	15520 <blst_pairing_merge+0x7c>
   15598:	1f2b      	subs	r3, r5, #4
   1559a:	3c04      	subs	r4, #4
   1559c:	f605 456c 	addw	r5, r5, #3180	; 0xc6c
   155a0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   155a4:	f844 2f04 	str.w	r2, [r4, #4]!
   155a8:	42ab      	cmp	r3, r5
   155aa:	d1f9      	bne.n	155a0 <blst_pairing_merge+0xfc>
   155ac:	2000      	movs	r0, #0
   155ae:	e795      	b.n	154dc <blst_pairing_merge+0x38>
   155b0:	f104 0010 	add.w	r0, r4, #16
   155b4:	f105 0210 	add.w	r2, r5, #16
   155b8:	4601      	mov	r1, r0
   155ba:	f7fb f9df 	bl	1097c <mul_fp12>
   155be:	2000      	movs	r0, #0
   155c0:	e78c      	b.n	154dc <blst_pairing_merge+0x38>
   155c2:	2004      	movs	r0, #4
   155c4:	e78a      	b.n	154dc <blst_pairing_merge+0x38>
   155c6:	2004      	movs	r0, #4
   155c8:	e788      	b.n	154dc <blst_pairing_merge+0x38>
   155ca:	2004      	movs	r0, #4
   155cc:	e786      	b.n	154dc <blst_pairing_merge+0x38>
   155ce:	2000      	movs	r0, #0
   155d0:	e784      	b.n	154dc <blst_pairing_merge+0x38>

000155d2 <POINTonE2_sign>:
   155d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d6:	b0cb      	sub	sp, #300	; 0x12c
   155d8:	4607      	mov	r7, r0
   155da:	f7ff fd13 	bl	15004 <POINTonE2_mult_gls>
   155de:	f107 08c0 	add.w	r8, r7, #192	; 0xc0
   155e2:	f107 04bc 	add.w	r4, r7, #188	; 0xbc
   155e6:	f507 718e 	add.w	r1, r7, #284	; 0x11c
   155ea:	4623      	mov	r3, r4
   155ec:	2600      	movs	r6, #0
   155ee:	f853 2f04 	ldr.w	r2, [r3, #4]!
   155f2:	4316      	orrs	r6, r2
   155f4:	428b      	cmp	r3, r1
   155f6:	d1fa      	bne.n	155ee <POINTonE2_sign+0x1c>
   155f8:	4d3b      	ldr	r5, [pc, #236]	; (156e8 <POINTonE2_sign+0x116>)
   155fa:	f04f 0a0c 	mov.w	sl, #12
   155fe:	f8cd a004 	str.w	sl, [sp, #4]
   15602:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 156ec <POINTonE2_sign+0x11a>
   15606:	f8cd 9000 	str.w	r9, [sp]
   1560a:	462b      	mov	r3, r5
   1560c:	4642      	mov	r2, r8
   1560e:	4641      	mov	r1, r8
   15610:	a802      	add	r0, sp, #8
   15612:	f7f7 f9dd 	bl	c9d0 <mul_mont_n>
   15616:	f107 0bf0 	add.w	fp, r7, #240	; 0xf0
   1561a:	f8cd a004 	str.w	sl, [sp, #4]
   1561e:	f8cd 9000 	str.w	r9, [sp]
   15622:	462b      	mov	r3, r5
   15624:	465a      	mov	r2, fp
   15626:	4659      	mov	r1, fp
   15628:	a80e      	add	r0, sp, #56	; 0x38
   1562a:	f7f7 f9d1 	bl	c9d0 <mul_mont_n>
   1562e:	f8cd a000 	str.w	sl, [sp]
   15632:	462b      	mov	r3, r5
   15634:	aa0e      	add	r2, sp, #56	; 0x38
   15636:	a902      	add	r1, sp, #8
   15638:	4608      	mov	r0, r1
   1563a:	f7f7 fb71 	bl	cd20 <add_mod_n>
   1563e:	a902      	add	r1, sp, #8
   15640:	a80e      	add	r0, sp, #56	; 0x38
   15642:	f7fb fd55 	bl	110f0 <flt_reciprocal_fp>
   15646:	f8cd a004 	str.w	sl, [sp, #4]
   1564a:	f8cd 9000 	str.w	r9, [sp]
   1564e:	462b      	mov	r3, r5
   15650:	aa0e      	add	r2, sp, #56	; 0x38
   15652:	4641      	mov	r1, r8
   15654:	a832      	add	r0, sp, #200	; 0xc8
   15656:	f7f7 f9bb 	bl	c9d0 <mul_mont_n>
   1565a:	f8cd a004 	str.w	sl, [sp, #4]
   1565e:	f8cd 9000 	str.w	r9, [sp]
   15662:	462b      	mov	r3, r5
   15664:	aa0e      	add	r2, sp, #56	; 0x38
   15666:	4659      	mov	r1, fp
   15668:	a83e      	add	r0, sp, #248	; 0xf8
   1566a:	f7f7 f9b1 	bl	c9d0 <mul_mont_n>
   1566e:	f8cd a000 	str.w	sl, [sp]
   15672:	462b      	mov	r3, r5
   15674:	2201      	movs	r2, #1
   15676:	a93e      	add	r1, sp, #248	; 0xf8
   15678:	4608      	mov	r0, r1
   1567a:	f7f8 f9e5 	bl	da48 <cneg_mod_n>
   1567e:	464b      	mov	r3, r9
   15680:	462a      	mov	r2, r5
   15682:	a932      	add	r1, sp, #200	; 0xc8
   15684:	a81a      	add	r0, sp, #104	; 0x68
   15686:	f7fe f8f3 	bl	13870 <sqr_mont_384x>
   1568a:	f8cd 9000 	str.w	r9, [sp]
   1568e:	462b      	mov	r3, r5
   15690:	aa1a      	add	r2, sp, #104	; 0x68
   15692:	4639      	mov	r1, r7
   15694:	4638      	mov	r0, r7
   15696:	f7fa fe5d 	bl	10354 <mul_mont_384x>
   1569a:	f8cd 9000 	str.w	r9, [sp]
   1569e:	462b      	mov	r3, r5
   156a0:	aa32      	add	r2, sp, #200	; 0xc8
   156a2:	a91a      	add	r1, sp, #104	; 0x68
   156a4:	4608      	mov	r0, r1
   156a6:	f7fa fe55 	bl	10354 <mul_mont_384x>
   156aa:	f107 0060 	add.w	r0, r7, #96	; 0x60
   156ae:	f8cd 9000 	str.w	r9, [sp]
   156b2:	462b      	mov	r3, r5
   156b4:	aa1a      	add	r2, sp, #104	; 0x68
   156b6:	4601      	mov	r1, r0
   156b8:	f7fa fe4c 	bl	10354 <mul_mont_384x>
   156bc:	1e73      	subs	r3, r6, #1
   156be:	ea23 0606 	bic.w	r6, r3, r6
   156c2:	17f6      	asrs	r6, r6, #31
   156c4:	f505 6164 	add.w	r1, r5, #3648	; 0xe40
   156c8:	f505 656a 	add.w	r5, r5, #3744	; 0xea0
   156cc:	f851 0b04 	ldr.w	r0, [r1], #4
   156d0:	f854 2f04 	ldr.w	r2, [r4, #4]!
   156d4:	4042      	eors	r2, r0
   156d6:	4032      	ands	r2, r6
   156d8:	4042      	eors	r2, r0
   156da:	6022      	str	r2, [r4, #0]
   156dc:	42a9      	cmp	r1, r5
   156de:	d1f5      	bne.n	156cc <POINTonE2_sign+0xfa>
   156e0:	b04b      	add	sp, #300	; 0x12c
   156e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e6:	bf00      	nop
   156e8:	00024108 	.word	0x00024108
   156ec:	fffcfffd 	.word	0xfffcfffd

000156f0 <blst_sk_to_pk_in_g2>:
   156f0:	b508      	push	{r3, lr}
   156f2:	460a      	mov	r2, r1
   156f4:	4901      	ldr	r1, [pc, #4]	; (156fc <blst_sk_to_pk_in_g2+0xc>)
   156f6:	f7ff ff6c 	bl	155d2 <POINTonE2_sign>
   156fa:	bd08      	pop	{r3, pc}
   156fc:	00024e88 	.word	0x00024e88

00015700 <blst_sign_pk_in_g1>:
   15700:	b508      	push	{r3, lr}
   15702:	f7ff ff66 	bl	155d2 <POINTonE2_sign>
   15706:	bd08      	pop	{r3, pc}

00015708 <blst_sk_to_pk2_in_g2>:
   15708:	b530      	push	{r4, r5, lr}
   1570a:	b0c9      	sub	sp, #292	; 0x124
   1570c:	4605      	mov	r5, r0
   1570e:	460c      	mov	r4, r1
   15710:	4914      	ldr	r1, [pc, #80]	; (15764 <blst_sk_to_pk2_in_g2+0x5c>)
   15712:	4668      	mov	r0, sp
   15714:	f7ff ff5d 	bl	155d2 <POINTonE2_sign>
   15718:	b14c      	cbz	r4, 1572e <blst_sk_to_pk2_in_g2+0x26>
   1571a:	f1ad 0304 	sub.w	r3, sp, #4
   1571e:	1f21      	subs	r1, r4, #4
   15720:	a82f      	add	r0, sp, #188	; 0xbc
   15722:	f853 2f04 	ldr.w	r2, [r3, #4]!
   15726:	f841 2f04 	str.w	r2, [r1, #4]!
   1572a:	4283      	cmp	r3, r0
   1572c:	d1f9      	bne.n	15722 <blst_sk_to_pk2_in_g2+0x1a>
   1572e:	b1bd      	cbz	r5, 15760 <blst_sk_to_pk2_in_g2+0x58>
   15730:	4669      	mov	r1, sp
   15732:	4628      	mov	r0, r5
   15734:	f7fe f954 	bl	139e0 <POINTonE2_Serialize_BE>
   15738:	0100      	lsls	r0, r0, #4
   1573a:	f000 0220 	and.w	r2, r0, #32
   1573e:	7828      	ldrb	r0, [r5, #0]
   15740:	4310      	orrs	r0, r2
   15742:	ab2f      	add	r3, sp, #188	; 0xbc
   15744:	ac47      	add	r4, sp, #284	; 0x11c
   15746:	2200      	movs	r2, #0
   15748:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1574c:	430a      	orrs	r2, r1
   1574e:	42a3      	cmp	r3, r4
   15750:	d1fa      	bne.n	15748 <blst_sk_to_pk2_in_g2+0x40>
   15752:	1e53      	subs	r3, r2, #1
   15754:	ea23 0202 	bic.w	r2, r3, r2
   15758:	0fd2      	lsrs	r2, r2, #31
   1575a:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   1575e:	702a      	strb	r2, [r5, #0]
   15760:	b049      	add	sp, #292	; 0x124
   15762:	bd30      	pop	{r4, r5, pc}
   15764:	00024e88 	.word	0x00024e88

00015768 <blst_sign_pk2_in_g1>:
   15768:	b530      	push	{r4, r5, lr}
   1576a:	b0c9      	sub	sp, #292	; 0x124
   1576c:	4605      	mov	r5, r0
   1576e:	460c      	mov	r4, r1
   15770:	4611      	mov	r1, r2
   15772:	461a      	mov	r2, r3
   15774:	4668      	mov	r0, sp
   15776:	f7ff ff2c 	bl	155d2 <POINTonE2_sign>
   1577a:	b14c      	cbz	r4, 15790 <blst_sign_pk2_in_g1+0x28>
   1577c:	f1ad 0304 	sub.w	r3, sp, #4
   15780:	1f21      	subs	r1, r4, #4
   15782:	a82f      	add	r0, sp, #188	; 0xbc
   15784:	f853 2f04 	ldr.w	r2, [r3, #4]!
   15788:	f841 2f04 	str.w	r2, [r1, #4]!
   1578c:	4283      	cmp	r3, r0
   1578e:	d1f9      	bne.n	15784 <blst_sign_pk2_in_g1+0x1c>
   15790:	b1bd      	cbz	r5, 157c2 <blst_sign_pk2_in_g1+0x5a>
   15792:	4669      	mov	r1, sp
   15794:	4628      	mov	r0, r5
   15796:	f7fe f923 	bl	139e0 <POINTonE2_Serialize_BE>
   1579a:	0100      	lsls	r0, r0, #4
   1579c:	f000 0220 	and.w	r2, r0, #32
   157a0:	7828      	ldrb	r0, [r5, #0]
   157a2:	4310      	orrs	r0, r2
   157a4:	ab2f      	add	r3, sp, #188	; 0xbc
   157a6:	ac47      	add	r4, sp, #284	; 0x11c
   157a8:	2200      	movs	r2, #0
   157aa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   157ae:	430a      	orrs	r2, r1
   157b0:	42a3      	cmp	r3, r4
   157b2:	d1fa      	bne.n	157aa <blst_sign_pk2_in_g1+0x42>
   157b4:	1e53      	subs	r3, r2, #1
   157b6:	ea23 0202 	bic.w	r2, r3, r2
   157ba:	0fd2      	lsrs	r2, r2, #31
   157bc:	ea40 1282 	orr.w	r2, r0, r2, lsl #6
   157c0:	702a      	strb	r2, [r5, #0]
   157c2:	b049      	add	sp, #292	; 0x124
   157c4:	bd30      	pop	{r4, r5, pc}

000157c6 <map_to_isogenous_E2>:
   157c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ca:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   157ce:	4606      	mov	r6, r0
   157d0:	9103      	str	r1, [sp, #12]
   157d2:	4dc5      	ldr	r5, [pc, #788]	; (15ae8 <map_to_isogenous_E2+0x322>)
   157d4:	4cc5      	ldr	r4, [pc, #788]	; (15aec <map_to_isogenous_E2+0x326>)
   157d6:	462b      	mov	r3, r5
   157d8:	4622      	mov	r2, r4
   157da:	a8e8      	add	r0, sp, #928	; 0x3a0
   157dc:	f7fe f848 	bl	13870 <sqr_mont_384x>
   157e0:	f8df 830c 	ldr.w	r8, [pc, #780]	; 15af0 <map_to_isogenous_E2+0x32a>
   157e4:	9500      	str	r5, [sp, #0]
   157e6:	4623      	mov	r3, r4
   157e8:	aae8      	add	r2, sp, #928	; 0x3a0
   157ea:	f508 61bc 	add.w	r1, r8, #1504	; 0x5e0
   157ee:	a8a0      	add	r0, sp, #640	; 0x280
   157f0:	f7fa fdb0 	bl	10354 <mul_mont_384x>
   157f4:	462b      	mov	r3, r5
   157f6:	4622      	mov	r2, r4
   157f8:	a9a0      	add	r1, sp, #640	; 0x280
   157fa:	a8d0      	add	r0, sp, #832	; 0x340
   157fc:	f7fe f838 	bl	13870 <sqr_mont_384x>
   15800:	270c      	movs	r7, #12
   15802:	9700      	str	r7, [sp, #0]
   15804:	4623      	mov	r3, r4
   15806:	aaa0      	add	r2, sp, #640	; 0x280
   15808:	a9d0      	add	r1, sp, #832	; 0x340
   1580a:	4608      	mov	r0, r1
   1580c:	f7f7 fa88 	bl	cd20 <add_mod_n>
   15810:	9700      	str	r7, [sp, #0]
   15812:	4623      	mov	r3, r4
   15814:	aaac      	add	r2, sp, #688	; 0x2b0
   15816:	a9dc      	add	r1, sp, #880	; 0x370
   15818:	4608      	mov	r0, r1
   1581a:	f7f7 fa81 	bl	cd20 <add_mod_n>
   1581e:	9700      	str	r7, [sp, #0]
   15820:	4623      	mov	r3, r4
   15822:	f104 0290 	add.w	r2, r4, #144	; 0x90
   15826:	a9d0      	add	r1, sp, #832	; 0x340
   15828:	4630      	mov	r0, r6
   1582a:	f7f7 fa79 	bl	cd20 <add_mod_n>
   1582e:	9700      	str	r7, [sp, #0]
   15830:	4623      	mov	r3, r4
   15832:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   15836:	a9dc      	add	r1, sp, #880	; 0x370
   15838:	f106 0030 	add.w	r0, r6, #48	; 0x30
   1583c:	f7f7 fa70 	bl	cd20 <add_mod_n>
   15840:	9500      	str	r5, [sp, #0]
   15842:	4623      	mov	r3, r4
   15844:	f508 62c8 	add.w	r2, r8, #1600	; 0x640
   15848:	4631      	mov	r1, r6
   1584a:	4630      	mov	r0, r6
   1584c:	f7fa fd82 	bl	10354 <mul_mont_384x>
   15850:	9500      	str	r5, [sp, #0]
   15852:	4623      	mov	r3, r4
   15854:	4632      	mov	r2, r6
   15856:	a9a0      	add	r1, sp, #640	; 0x280
   15858:	4608      	mov	r0, r1
   1585a:	f7fa fd7b 	bl	10354 <mul_mont_384x>
   1585e:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   15862:	9500      	str	r5, [sp, #0]
   15864:	4623      	mov	r3, r4
   15866:	aad0      	add	r2, sp, #832	; 0x340
   15868:	f508 61d4 	add.w	r1, r8, #1696	; 0x6a0
   1586c:	4648      	mov	r0, r9
   1586e:	f7fa fd71 	bl	10354 <mul_mont_384x>
   15872:	f106 02bc 	add.w	r2, r6, #188	; 0xbc
   15876:	f506 748e 	add.w	r4, r6, #284	; 0x11c
   1587a:	4613      	mov	r3, r2
   1587c:	2100      	movs	r1, #0
   1587e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   15882:	4301      	orrs	r1, r0
   15884:	42a3      	cmp	r3, r4
   15886:	d1fa      	bne.n	1587e <map_to_isogenous_E2+0xb8>
   15888:	1e4c      	subs	r4, r1, #1
   1588a:	ea24 0101 	bic.w	r1, r4, r1
   1588e:	17cc      	asrs	r4, r1, #31
   15890:	4d97      	ldr	r5, [pc, #604]	; (15af0 <map_to_isogenous_E2+0x32a>)
   15892:	f205 61fc 	addw	r1, r5, #1788	; 0x6fc
   15896:	f205 755c 	addw	r5, r5, #1884	; 0x75c
   1589a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1589e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   158a2:	4043      	eors	r3, r0
   158a4:	4023      	ands	r3, r4
   158a6:	4043      	eors	r3, r0
   158a8:	6013      	str	r3, [r2, #0]
   158aa:	42a9      	cmp	r1, r5
   158ac:	d1f5      	bne.n	1589a <map_to_isogenous_E2+0xd4>
   158ae:	4c8e      	ldr	r4, [pc, #568]	; (15ae8 <map_to_isogenous_E2+0x322>)
   158b0:	4d8e      	ldr	r5, [pc, #568]	; (15aec <map_to_isogenous_E2+0x326>)
   158b2:	4623      	mov	r3, r4
   158b4:	462a      	mov	r2, r5
   158b6:	4649      	mov	r1, r9
   158b8:	a8d0      	add	r0, sp, #832	; 0x340
   158ba:	f7fd ffd9 	bl	13870 <sqr_mont_384x>
   158be:	9400      	str	r4, [sp, #0]
   158c0:	462b      	mov	r3, r5
   158c2:	aad0      	add	r2, sp, #832	; 0x340
   158c4:	4649      	mov	r1, r9
   158c6:	a870      	add	r0, sp, #448	; 0x1c0
   158c8:	f7fa fd44 	bl	10354 <mul_mont_384x>
   158cc:	f8df a220 	ldr.w	sl, [pc, #544]	; 15af0 <map_to_isogenous_E2+0x32a>
   158d0:	9400      	str	r4, [sp, #0]
   158d2:	462b      	mov	r3, r5
   158d4:	aad0      	add	r2, sp, #832	; 0x340
   158d6:	f50a 61ec 	add.w	r1, sl, #1888	; 0x760
   158da:	4610      	mov	r0, r2
   158dc:	f7fa fd3a 	bl	10354 <mul_mont_384x>
   158e0:	4623      	mov	r3, r4
   158e2:	462a      	mov	r2, r5
   158e4:	4631      	mov	r1, r6
   158e6:	a888      	add	r0, sp, #544	; 0x220
   158e8:	f7fd ffc2 	bl	13870 <sqr_mont_384x>
   158ec:	f04f 080c 	mov.w	r8, #12
   158f0:	f8cd 8000 	str.w	r8, [sp]
   158f4:	462b      	mov	r3, r5
   158f6:	aad0      	add	r2, sp, #832	; 0x340
   158f8:	a988      	add	r1, sp, #544	; 0x220
   158fa:	4608      	mov	r0, r1
   158fc:	f7f7 fa10 	bl	cd20 <add_mod_n>
   15900:	f8cd 8000 	str.w	r8, [sp]
   15904:	462b      	mov	r3, r5
   15906:	aadc      	add	r2, sp, #880	; 0x370
   15908:	a994      	add	r1, sp, #592	; 0x250
   1590a:	4608      	mov	r0, r1
   1590c:	f7f7 fa08 	bl	cd20 <add_mod_n>
   15910:	9400      	str	r4, [sp, #0]
   15912:	462b      	mov	r3, r5
   15914:	4632      	mov	r2, r6
   15916:	a988      	add	r1, sp, #544	; 0x220
   15918:	4608      	mov	r0, r1
   1591a:	f7fa fd1b 	bl	10354 <mul_mont_384x>
   1591e:	9400      	str	r4, [sp, #0]
   15920:	462b      	mov	r3, r5
   15922:	aa70      	add	r2, sp, #448	; 0x1c0
   15924:	f50a 61c8 	add.w	r1, sl, #1600	; 0x640
   15928:	a8d0      	add	r0, sp, #832	; 0x340
   1592a:	f7fa fd13 	bl	10354 <mul_mont_384x>
   1592e:	f8cd 8000 	str.w	r8, [sp]
   15932:	462b      	mov	r3, r5
   15934:	aad0      	add	r2, sp, #832	; 0x340
   15936:	a988      	add	r1, sp, #544	; 0x220
   15938:	4608      	mov	r0, r1
   1593a:	f7f7 f9f1 	bl	cd20 <add_mod_n>
   1593e:	f8cd 8000 	str.w	r8, [sp]
   15942:	462b      	mov	r3, r5
   15944:	aadc      	add	r2, sp, #880	; 0x370
   15946:	a994      	add	r1, sp, #592	; 0x250
   15948:	4608      	mov	r0, r1
   1594a:	f7f7 f9e9 	bl	cd20 <add_mod_n>
   1594e:	4623      	mov	r3, r4
   15950:	462a      	mov	r2, r5
   15952:	a970      	add	r1, sp, #448	; 0x1c0
   15954:	a8b8      	add	r0, sp, #736	; 0x2e0
   15956:	f7fd ff8b 	bl	13870 <sqr_mont_384x>
   1595a:	9400      	str	r4, [sp, #0]
   1595c:	462b      	mov	r3, r5
   1595e:	aa70      	add	r2, sp, #448	; 0x1c0
   15960:	a988      	add	r1, sp, #544	; 0x220
   15962:	a8d0      	add	r0, sp, #832	; 0x340
   15964:	f7fa fcf6 	bl	10354 <mul_mont_384x>
   15968:	9400      	str	r4, [sp, #0]
   1596a:	462b      	mov	r3, r5
   1596c:	aad0      	add	r2, sp, #832	; 0x340
   1596e:	a9b8      	add	r1, sp, #736	; 0x2e0
   15970:	4608      	mov	r0, r1
   15972:	f7fa fcef 	bl	10354 <mul_mont_384x>
   15976:	f106 0760 	add.w	r7, r6, #96	; 0x60
   1597a:	f8cd 8004 	str.w	r8, [sp, #4]
   1597e:	9400      	str	r4, [sp, #0]
   15980:	462b      	mov	r3, r5
   15982:	aab8      	add	r2, sp, #736	; 0x2e0
   15984:	4611      	mov	r1, r2
   15986:	a804      	add	r0, sp, #16
   15988:	f7f7 f822 	bl	c9d0 <mul_mont_n>
   1598c:	f8cd 8004 	str.w	r8, [sp, #4]
   15990:	9400      	str	r4, [sp, #0]
   15992:	462b      	mov	r3, r5
   15994:	aac4      	add	r2, sp, #784	; 0x310
   15996:	4611      	mov	r1, r2
   15998:	a810      	add	r0, sp, #64	; 0x40
   1599a:	f7f7 f819 	bl	c9d0 <mul_mont_n>
   1599e:	f8cd 8000 	str.w	r8, [sp]
   159a2:	462b      	mov	r3, r5
   159a4:	aa10      	add	r2, sp, #64	; 0x40
   159a6:	a904      	add	r1, sp, #16
   159a8:	4608      	mov	r0, r1
   159aa:	f7f7 f9b9 	bl	cd20 <add_mod_n>
   159ae:	a904      	add	r1, sp, #16
   159b0:	a81c      	add	r0, sp, #112	; 0x70
   159b2:	f7fc fce9 	bl	12388 <recip_sqrt_fp>
   159b6:	4683      	mov	fp, r0
   159b8:	9400      	str	r4, [sp, #0]
   159ba:	462b      	mov	r3, r5
   159bc:	f50a 62f8 	add.w	r2, sl, #1984	; 0x7c0
   159c0:	a9b8      	add	r1, sp, #736	; 0x2e0
   159c2:	a840      	add	r0, sp, #256	; 0x100
   159c4:	f7fa fcc6 	bl	10354 <mul_mont_384x>
   159c8:	f8cd 8004 	str.w	r8, [sp, #4]
   159cc:	9400      	str	r4, [sp, #0]
   159ce:	462b      	mov	r3, r5
   159d0:	f50a 6202 	add.w	r2, sl, #2080	; 0x820
   159d4:	a904      	add	r1, sp, #16
   159d6:	a828      	add	r0, sp, #160	; 0xa0
   159d8:	f7f6 fffa 	bl	c9d0 <mul_mont_n>
   159dc:	f8cd 8004 	str.w	r8, [sp, #4]
   159e0:	9400      	str	r4, [sp, #0]
   159e2:	462b      	mov	r3, r5
   159e4:	f50a 6205 	add.w	r2, sl, #2128	; 0x850
   159e8:	a91c      	add	r1, sp, #112	; 0x70
   159ea:	a834      	add	r0, sp, #208	; 0xd0
   159ec:	f7f6 fff0 	bl	c9d0 <mul_mont_n>
   159f0:	f1cb 0400 	rsb	r4, fp, #0
   159f4:	ad04      	add	r5, sp, #16
   159f6:	a828      	add	r0, sp, #160	; 0xa0
   159f8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   159fc:	462a      	mov	r2, r5
   159fe:	6813      	ldr	r3, [r2, #0]
   15a00:	f850 1b04 	ldr.w	r1, [r0], #4
   15a04:	404b      	eors	r3, r1
   15a06:	4023      	ands	r3, r4
   15a08:	404b      	eors	r3, r1
   15a0a:	f842 3b04 	str.w	r3, [r2], #4
   15a0e:	4542      	cmp	r2, r8
   15a10:	d1f5      	bne.n	159fe <map_to_isogenous_E2+0x238>
   15a12:	aa1c      	add	r2, sp, #112	; 0x70
   15a14:	a934      	add	r1, sp, #208	; 0xd0
   15a16:	a828      	add	r0, sp, #160	; 0xa0
   15a18:	468c      	mov	ip, r1
   15a1a:	6813      	ldr	r3, [r2, #0]
   15a1c:	f85c 1b04 	ldr.w	r1, [ip], #4
   15a20:	404b      	eors	r3, r1
   15a22:	4023      	ands	r3, r4
   15a24:	404b      	eors	r3, r1
   15a26:	f842 3b04 	str.w	r3, [r2], #4
   15a2a:	4282      	cmp	r2, r0
   15a2c:	d1f5      	bne.n	15a1a <map_to_isogenous_E2+0x254>
   15a2e:	a9b7      	add	r1, sp, #732	; 0x2dc
   15a30:	aa3f      	add	r2, sp, #252	; 0xfc
   15a32:	a8cf      	add	r0, sp, #828	; 0x33c
   15a34:	46a4      	mov	ip, r4
   15a36:	f852 4f04 	ldr.w	r4, [r2, #4]!
   15a3a:	f851 3f04 	ldr.w	r3, [r1, #4]!
   15a3e:	4063      	eors	r3, r4
   15a40:	ea03 030c 	and.w	r3, r3, ip
   15a44:	4063      	eors	r3, r4
   15a46:	6013      	str	r3, [r2, #0]
   15a48:	4281      	cmp	r1, r0
   15a4a:	d1f4      	bne.n	15a36 <map_to_isogenous_E2+0x270>
   15a4c:	4664      	mov	r4, ip
   15a4e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 15aec <map_to_isogenous_E2+0x326>
   15a52:	f04f 0b0c 	mov.w	fp, #12
   15a56:	f8cd b004 	str.w	fp, [sp, #4]
   15a5a:	4b23      	ldr	r3, [pc, #140]	; (15ae8 <map_to_isogenous_E2+0x322>)
   15a5c:	9300      	str	r3, [sp, #0]
   15a5e:	4653      	mov	r3, sl
   15a60:	aa1c      	add	r2, sp, #112	; 0x70
   15a62:	a904      	add	r1, sp, #16
   15a64:	4608      	mov	r0, r1
   15a66:	f7f6 ffb3 	bl	c9d0 <mul_mont_n>
   15a6a:	f8cd b000 	str.w	fp, [sp]
   15a6e:	4653      	mov	r3, sl
   15a70:	aa04      	add	r2, sp, #16
   15a72:	a940      	add	r1, sp, #256	; 0x100
   15a74:	a810      	add	r0, sp, #64	; 0x40
   15a76:	f7f6 fdfd 	bl	c674 <sub_mod_n>
   15a7a:	f8cd b000 	str.w	fp, [sp]
   15a7e:	4653      	mov	r3, sl
   15a80:	aa04      	add	r2, sp, #16
   15a82:	a940      	add	r1, sp, #256	; 0x100
   15a84:	4610      	mov	r0, r2
   15a86:	f7f7 f94b 	bl	cd20 <add_mod_n>
   15a8a:	462b      	mov	r3, r5
   15a8c:	2200      	movs	r2, #0
   15a8e:	f853 1b04 	ldr.w	r1, [r3], #4
   15a92:	430a      	orrs	r2, r1
   15a94:	4543      	cmp	r3, r8
   15a96:	d1fa      	bne.n	15a8e <map_to_isogenous_E2+0x2c8>
   15a98:	1e50      	subs	r0, r2, #1
   15a9a:	ea20 0202 	bic.w	r2, r0, r2
   15a9e:	17d0      	asrs	r0, r2, #31
   15aa0:	aa10      	add	r2, sp, #64	; 0x40
   15aa2:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   15aa6:	f852 3b04 	ldr.w	r3, [r2], #4
   15aaa:	6829      	ldr	r1, [r5, #0]
   15aac:	404b      	eors	r3, r1
   15aae:	4003      	ands	r3, r0
   15ab0:	404b      	eors	r3, r1
   15ab2:	f845 3b04 	str.w	r3, [r5], #4
   15ab6:	4562      	cmp	r2, ip
   15ab8:	d1f5      	bne.n	15aa6 <map_to_isogenous_E2+0x2e0>
   15aba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 15aec <map_to_isogenous_E2+0x326>
   15abe:	f04f 0b0c 	mov.w	fp, #12
   15ac2:	f8cd b000 	str.w	fp, [sp]
   15ac6:	4643      	mov	r3, r8
   15ac8:	2201      	movs	r2, #1
   15aca:	a904      	add	r1, sp, #16
   15acc:	4608      	mov	r0, r1
   15ace:	f7f6 fe39 	bl	c744 <rshift_mod_n>
   15ad2:	a904      	add	r1, sp, #16
   15ad4:	4638      	mov	r0, r7
   15ad6:	f7fc fc57 	bl	12388 <recip_sqrt_fp>
   15ada:	f106 0590 	add.w	r5, r6, #144	; 0x90
   15ade:	f8cd b000 	str.w	fp, [sp]
   15ae2:	4643      	mov	r3, r8
   15ae4:	2201      	movs	r2, #1
   15ae6:	e005      	b.n	15af4 <map_to_isogenous_E2+0x32e>
   15ae8:	fffcfffd 	.word	0xfffcfffd
   15aec:	00024108 	.word	0x00024108
   15af0:	00025200 	.word	0x00025200
   15af4:	a94c      	add	r1, sp, #304	; 0x130
   15af6:	4628      	mov	r0, r5
   15af8:	f7f6 fe24 	bl	c744 <rshift_mod_n>
   15afc:	f8cd b004 	str.w	fp, [sp, #4]
   15b00:	f8df a248 	ldr.w	sl, [pc, #584]	; 15d4c <map_to_isogenous_E2+0x586>
   15b04:	f8cd a000 	str.w	sl, [sp]
   15b08:	4643      	mov	r3, r8
   15b0a:	463a      	mov	r2, r7
   15b0c:	4629      	mov	r1, r5
   15b0e:	4628      	mov	r0, r5
   15b10:	f7f6 ff5e 	bl	c9d0 <mul_mont_n>
   15b14:	f8cd b004 	str.w	fp, [sp, #4]
   15b18:	f8cd a000 	str.w	sl, [sp]
   15b1c:	4643      	mov	r3, r8
   15b1e:	aa04      	add	r2, sp, #16
   15b20:	4639      	mov	r1, r7
   15b22:	4638      	mov	r0, r7
   15b24:	f7f6 ff54 	bl	c9d0 <mul_mont_n>
   15b28:	ab40      	add	r3, sp, #256	; 0x100
   15b2a:	463a      	mov	r2, r7
   15b2c:	4639      	mov	r1, r7
   15b2e:	4638      	mov	r0, r7
   15b30:	f7fe f9d2 	bl	13ed8 <sqrt_align_fp2>
   15b34:	f8cd b004 	str.w	fp, [sp, #4]
   15b38:	f8cd a000 	str.w	sl, [sp]
   15b3c:	4643      	mov	r3, r8
   15b3e:	aa1c      	add	r2, sp, #112	; 0x70
   15b40:	4639      	mov	r1, r7
   15b42:	4638      	mov	r0, r7
   15b44:	f7f6 ff44 	bl	c9d0 <mul_mont_n>
   15b48:	f8cd b004 	str.w	fp, [sp, #4]
   15b4c:	f8cd a000 	str.w	sl, [sp]
   15b50:	4643      	mov	r3, r8
   15b52:	aa1c      	add	r2, sp, #112	; 0x70
   15b54:	4629      	mov	r1, r5
   15b56:	4628      	mov	r0, r5
   15b58:	f7f6 ff3a 	bl	c9d0 <mul_mont_n>
   15b5c:	f8cd b000 	str.w	fp, [sp]
   15b60:	4643      	mov	r3, r8
   15b62:	2201      	movs	r2, #1
   15b64:	4629      	mov	r1, r5
   15b66:	4628      	mov	r0, r5
   15b68:	f7f7 ff6e 	bl	da48 <cneg_mod_n>
   15b6c:	f8cd a000 	str.w	sl, [sp]
   15b70:	4643      	mov	r3, r8
   15b72:	aad0      	add	r2, sp, #832	; 0x340
   15b74:	4639      	mov	r1, r7
   15b76:	4638      	mov	r0, r7
   15b78:	f7fa fbec 	bl	10354 <mul_mont_384x>
   15b7c:	f8cd a000 	str.w	sl, [sp]
   15b80:	4643      	mov	r3, r8
   15b82:	aae8      	add	r2, sp, #928	; 0x3a0
   15b84:	4639      	mov	r1, r7
   15b86:	a858      	add	r0, sp, #352	; 0x160
   15b88:	f7fa fbe4 	bl	10354 <mul_mont_384x>
   15b8c:	f8cd a000 	str.w	sl, [sp]
   15b90:	4643      	mov	r3, r8
   15b92:	9a03      	ldr	r2, [sp, #12]
   15b94:	a958      	add	r1, sp, #352	; 0x160
   15b96:	4608      	mov	r0, r1
   15b98:	f7fa fbdc 	bl	10354 <mul_mont_384x>
   15b9c:	1f31      	subs	r1, r6, #4
   15b9e:	aaa0      	add	r2, sp, #640	; 0x280
   15ba0:	f50d 7c38 	add.w	ip, sp, #736	; 0x2e0
   15ba4:	f852 0b04 	ldr.w	r0, [r2], #4
   15ba8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   15bac:	4043      	eors	r3, r0
   15bae:	4023      	ands	r3, r4
   15bb0:	4043      	eors	r3, r0
   15bb2:	600b      	str	r3, [r1, #0]
   15bb4:	4562      	cmp	r2, ip
   15bb6:	d1f5      	bne.n	15ba4 <map_to_isogenous_E2+0x3de>
   15bb8:	f106 015c 	add.w	r1, r6, #92	; 0x5c
   15bbc:	aa58      	add	r2, sp, #352	; 0x160
   15bbe:	f50d 7ce0 	add.w	ip, sp, #448	; 0x1c0
   15bc2:	f852 0b04 	ldr.w	r0, [r2], #4
   15bc6:	f851 3f04 	ldr.w	r3, [r1, #4]!
   15bca:	4043      	eors	r3, r0
   15bcc:	4023      	ands	r3, r4
   15bce:	4043      	eors	r3, r0
   15bd0:	600b      	str	r3, [r1, #0]
   15bd2:	4562      	cmp	r2, ip
   15bd4:	d1f5      	bne.n	15bc2 <map_to_isogenous_E2+0x3fc>
   15bd6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 15d4c <map_to_isogenous_E2+0x586>
   15bda:	4c5d      	ldr	r4, [pc, #372]	; (15d50 <map_to_isogenous_E2+0x58a>)
   15bdc:	f04f 0a0c 	mov.w	sl, #12
   15be0:	f8cd a000 	str.w	sl, [sp]
   15be4:	4643      	mov	r3, r8
   15be6:	4622      	mov	r2, r4
   15be8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   15bec:	4659      	mov	r1, fp
   15bee:	a840      	add	r0, sp, #256	; 0x100
   15bf0:	f7f7 fa20 	bl	d034 <from_mont_n>
   15bf4:	f8cd a000 	str.w	sl, [sp]
   15bf8:	4643      	mov	r3, r8
   15bfa:	4622      	mov	r2, r4
   15bfc:	4659      	mov	r1, fp
   15bfe:	3130      	adds	r1, #48	; 0x30
   15c00:	a84c      	add	r0, sp, #304	; 0x130
   15c02:	f7f7 fa17 	bl	d034 <from_mont_n>
   15c06:	4652      	mov	r2, sl
   15c08:	4621      	mov	r1, r4
   15c0a:	a840      	add	r0, sp, #256	; 0x100
   15c0c:	f7f7 fb27 	bl	d25e <sgn0_pty_mod_n>
   15c10:	4680      	mov	r8, r0
   15c12:	4652      	mov	r2, sl
   15c14:	4621      	mov	r1, r4
   15c16:	a84c      	add	r0, sp, #304	; 0x130
   15c18:	f7f7 fb21 	bl	d25e <sgn0_pty_mod_n>
   15c1c:	aa4b      	add	r2, sp, #300	; 0x12c
   15c1e:	ab40      	add	r3, sp, #256	; 0x100
   15c20:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   15c24:	2100      	movs	r1, #0
   15c26:	f852 4f04 	ldr.w	r4, [r2, #4]!
   15c2a:	4321      	orrs	r1, r4
   15c2c:	4562      	cmp	r2, ip
   15c2e:	d1fa      	bne.n	15c26 <map_to_isogenous_E2+0x460>
   15c30:	f101 3cff 	add.w	ip, r1, #4294967295
   15c34:	ea2c 0101 	bic.w	r1, ip, r1
   15c38:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
   15c3c:	ea08 71e1 	and.w	r1, r8, r1, asr #31
   15c40:	f10c 3cff 	add.w	ip, ip, #4294967295
   15c44:	ea0c 0c00 	and.w	ip, ip, r0
   15c48:	ea4c 0c01 	orr.w	ip, ip, r1
   15c4c:	f103 0430 	add.w	r4, r3, #48	; 0x30
   15c50:	2200      	movs	r2, #0
   15c52:	f853 1b04 	ldr.w	r1, [r3], #4
   15c56:	430a      	orrs	r2, r1
   15c58:	42a3      	cmp	r3, r4
   15c5a:	d1fa      	bne.n	15c52 <map_to_isogenous_E2+0x48c>
   15c5c:	1e54      	subs	r4, r2, #1
   15c5e:	ea24 0202 	bic.w	r2, r4, r2
   15c62:	0fd4      	lsrs	r4, r2, #31
   15c64:	ea00 70e2 	and.w	r0, r0, r2, asr #31
   15c68:	3c01      	subs	r4, #1
   15c6a:	ea04 0408 	and.w	r4, r4, r8
   15c6e:	4304      	orrs	r4, r0
   15c70:	f004 0401 	and.w	r4, r4, #1
   15c74:	f00c 0c02 	and.w	ip, ip, #2
   15c78:	ea44 040c 	orr.w	r4, r4, ip
   15c7c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 15d4c <map_to_isogenous_E2+0x586>
   15c80:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 15d50 <map_to_isogenous_E2+0x58a>
   15c84:	f04f 0b0c 	mov.w	fp, #12
   15c88:	f8cd b000 	str.w	fp, [sp]
   15c8c:	4643      	mov	r3, r8
   15c8e:	4652      	mov	r2, sl
   15c90:	4639      	mov	r1, r7
   15c92:	a840      	add	r0, sp, #256	; 0x100
   15c94:	f7f7 f9ce 	bl	d034 <from_mont_n>
   15c98:	f8cd b000 	str.w	fp, [sp]
   15c9c:	4643      	mov	r3, r8
   15c9e:	4652      	mov	r2, sl
   15ca0:	4629      	mov	r1, r5
   15ca2:	a84c      	add	r0, sp, #304	; 0x130
   15ca4:	f7f7 f9c6 	bl	d034 <from_mont_n>
   15ca8:	465a      	mov	r2, fp
   15caa:	4651      	mov	r1, sl
   15cac:	a840      	add	r0, sp, #256	; 0x100
   15cae:	f7f7 fad6 	bl	d25e <sgn0_pty_mod_n>
   15cb2:	4680      	mov	r8, r0
   15cb4:	465a      	mov	r2, fp
   15cb6:	4651      	mov	r1, sl
   15cb8:	a84c      	add	r0, sp, #304	; 0x130
   15cba:	f7f7 fad0 	bl	d25e <sgn0_pty_mod_n>
   15cbe:	4686      	mov	lr, r0
   15cc0:	a94b      	add	r1, sp, #300	; 0x12c
   15cc2:	ab40      	add	r3, sp, #256	; 0x100
   15cc4:	aa57      	add	r2, sp, #348	; 0x15c
   15cc6:	f851 0f04 	ldr.w	r0, [r1, #4]!
   15cca:	428a      	cmp	r2, r1
   15ccc:	d1fb      	bne.n	15cc6 <map_to_isogenous_E2+0x500>
   15cce:	f103 0c30 	add.w	ip, r3, #48	; 0x30
   15cd2:	2200      	movs	r2, #0
   15cd4:	f853 1b04 	ldr.w	r1, [r3], #4
   15cd8:	430a      	orrs	r2, r1
   15cda:	459c      	cmp	ip, r3
   15cdc:	d1fa      	bne.n	15cd4 <map_to_isogenous_E2+0x50e>
   15cde:	1e53      	subs	r3, r2, #1
   15ce0:	ea23 0202 	bic.w	r2, r3, r2
   15ce4:	0fd0      	lsrs	r0, r2, #31
   15ce6:	ea0e 72e2 	and.w	r2, lr, r2, asr #31
   15cea:	3801      	subs	r0, #1
   15cec:	ea00 0808 	and.w	r8, r0, r8
   15cf0:	ea48 0802 	orr.w	r8, r8, r2
   15cf4:	ea84 0408 	eor.w	r4, r4, r8
   15cf8:	f004 0401 	and.w	r4, r4, #1
   15cfc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 15d50 <map_to_isogenous_E2+0x58a>
   15d00:	f04f 0a0c 	mov.w	sl, #12
   15d04:	f8cd a000 	str.w	sl, [sp]
   15d08:	4643      	mov	r3, r8
   15d0a:	4622      	mov	r2, r4
   15d0c:	4639      	mov	r1, r7
   15d0e:	4638      	mov	r0, r7
   15d10:	f7f7 fe9a 	bl	da48 <cneg_mod_n>
   15d14:	f8cd a000 	str.w	sl, [sp]
   15d18:	4643      	mov	r3, r8
   15d1a:	4622      	mov	r2, r4
   15d1c:	4629      	mov	r1, r5
   15d1e:	4628      	mov	r0, r5
   15d20:	f7f7 fe92 	bl	da48 <cneg_mod_n>
   15d24:	4c09      	ldr	r4, [pc, #36]	; (15d4c <map_to_isogenous_E2+0x586>)
   15d26:	9400      	str	r4, [sp, #0]
   15d28:	4643      	mov	r3, r8
   15d2a:	464a      	mov	r2, r9
   15d2c:	4631      	mov	r1, r6
   15d2e:	4630      	mov	r0, r6
   15d30:	f7fa fb10 	bl	10354 <mul_mont_384x>
   15d34:	9400      	str	r4, [sp, #0]
   15d36:	4643      	mov	r3, r8
   15d38:	aa70      	add	r2, sp, #448	; 0x1c0
   15d3a:	4639      	mov	r1, r7
   15d3c:	4638      	mov	r0, r7
   15d3e:	f7fa fb09 	bl	10354 <mul_mont_384x>
   15d42:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   15d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d4a:	bf00      	nop
   15d4c:	fffcfffd 	.word	0xfffcfffd
   15d50:	00024108 	.word	0x00024108

00015d54 <map_to_g2>:
   15d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d58:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
   15d5c:	4606      	mov	r6, r0
   15d5e:	4614      	mov	r4, r2
   15d60:	a8f2      	add	r0, sp, #968	; 0x3c8
   15d62:	f7ff fd30 	bl	157c6 <map_to_isogenous_E2>
   15d66:	b14c      	cbz	r4, 15d7c <map_to_g2+0x28>
   15d68:	4621      	mov	r1, r4
   15d6a:	4630      	mov	r0, r6
   15d6c:	f7ff fd2b 	bl	157c6 <map_to_isogenous_E2>
   15d70:	4b97      	ldr	r3, [pc, #604]	; (15fd0 <map_to_g2+0x27c>)
   15d72:	4632      	mov	r2, r6
   15d74:	a9f2      	add	r1, sp, #968	; 0x3c8
   15d76:	4608      	mov	r0, r1
   15d78:	f7fe fec0 	bl	14afc <POINTonE2_dadd>
   15d7c:	4d95      	ldr	r5, [pc, #596]	; (15fd4 <map_to_g2+0x280>)
   15d7e:	4c96      	ldr	r4, [pc, #600]	; (15fd8 <map_to_g2+0x284>)
   15d80:	462b      	mov	r3, r5
   15d82:	4622      	mov	r2, r4
   15d84:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   15d88:	a892      	add	r0, sp, #584	; 0x248
   15d8a:	f7fd fd71 	bl	13870 <sqr_mont_384x>
   15d8e:	462b      	mov	r3, r5
   15d90:	4622      	mov	r2, r4
   15d92:	a992      	add	r1, sp, #584	; 0x248
   15d94:	a87a      	add	r0, sp, #488	; 0x1e8
   15d96:	f7fd fd6b 	bl	13870 <sqr_mont_384x>
   15d9a:	9500      	str	r5, [sp, #0]
   15d9c:	4623      	mov	r3, r4
   15d9e:	aa7a      	add	r2, sp, #488	; 0x1e8
   15da0:	a992      	add	r1, sp, #584	; 0x248
   15da2:	a862      	add	r0, sp, #392	; 0x188
   15da4:	f7fa fad6 	bl	10354 <mul_mont_384x>
   15da8:	f8df 8230 	ldr.w	r8, [pc, #560]	; 15fdc <map_to_g2+0x288>
   15dac:	2303      	movs	r3, #3
   15dae:	aa62      	add	r2, sp, #392	; 0x188
   15db0:	f508 6108 	add.w	r1, r8, #2176	; 0x880
   15db4:	a8aa      	add	r0, sp, #680	; 0x2a8
   15db6:	f7fa fb5b 	bl	10470 <map_fp2_times_Zz>
   15dba:	9500      	str	r5, [sp, #0]
   15dbc:	4623      	mov	r3, r4
   15dbe:	f508 621a 	add.w	r2, r8, #2464	; 0x9a0
   15dc2:	a9f2      	add	r1, sp, #968	; 0x3c8
   15dc4:	a802      	add	r0, sp, #8
   15dc6:	f7fa fac5 	bl	10354 <mul_mont_384x>
   15dca:	270c      	movs	r7, #12
   15dcc:	9700      	str	r7, [sp, #0]
   15dce:	4623      	mov	r3, r4
   15dd0:	aada      	add	r2, sp, #872	; 0x368
   15dd2:	a902      	add	r1, sp, #8
   15dd4:	4608      	mov	r0, r1
   15dd6:	f7f6 ffa3 	bl	cd20 <add_mod_n>
   15dda:	9700      	str	r7, [sp, #0]
   15ddc:	4623      	mov	r3, r4
   15dde:	aae6      	add	r2, sp, #920	; 0x398
   15de0:	a90e      	add	r1, sp, #56	; 0x38
   15de2:	4608      	mov	r0, r1
   15de4:	f7f6 ff9c 	bl	cd20 <add_mod_n>
   15de8:	2302      	movs	r3, #2
   15dea:	aaaa      	add	r2, sp, #680	; 0x2a8
   15dec:	a9f2      	add	r1, sp, #968	; 0x3c8
   15dee:	a802      	add	r0, sp, #8
   15df0:	f7fa fc24 	bl	1063c <map_fp2>
   15df4:	2302      	movs	r3, #2
   15df6:	aa7a      	add	r2, sp, #488	; 0x1e8
   15df8:	f508 6120 	add.w	r1, r8, #2560	; 0xa00
   15dfc:	a8aa      	add	r0, sp, #680	; 0x2a8
   15dfe:	f7fa fb37 	bl	10470 <map_fp2_times_Zz>
   15e02:	9700      	str	r7, [sp, #0]
   15e04:	4623      	mov	r3, r4
   15e06:	aac2      	add	r2, sp, #776	; 0x308
   15e08:	a9f2      	add	r1, sp, #968	; 0x3c8
   15e0a:	a81a      	add	r0, sp, #104	; 0x68
   15e0c:	f7f6 ff88 	bl	cd20 <add_mod_n>
   15e10:	9700      	str	r7, [sp, #0]
   15e12:	4623      	mov	r3, r4
   15e14:	aace      	add	r2, sp, #824	; 0x338
   15e16:	a9fe      	add	r1, sp, #1016	; 0x3f8
   15e18:	a826      	add	r0, sp, #152	; 0x98
   15e1a:	f7f6 ff81 	bl	cd20 <add_mod_n>
   15e1e:	2301      	movs	r3, #1
   15e20:	aaaa      	add	r2, sp, #680	; 0x2a8
   15e22:	a9f2      	add	r1, sp, #968	; 0x3c8
   15e24:	a81a      	add	r0, sp, #104	; 0x68
   15e26:	f7fa fc09 	bl	1063c <map_fp2>
   15e2a:	9500      	str	r5, [sp, #0]
   15e2c:	4623      	mov	r3, r4
   15e2e:	aa92      	add	r2, sp, #584	; 0x248
   15e30:	a91a      	add	r1, sp, #104	; 0x68
   15e32:	4608      	mov	r0, r1
   15e34:	f7fa fa8e 	bl	10354 <mul_mont_384x>
   15e38:	2303      	movs	r3, #3
   15e3a:	aa62      	add	r2, sp, #392	; 0x188
   15e3c:	f508 612c 	add.w	r1, r8, #2752	; 0xac0
   15e40:	a8aa      	add	r0, sp, #680	; 0x2a8
   15e42:	f7fa fb15 	bl	10470 <map_fp2_times_Zz>
   15e46:	9500      	str	r5, [sp, #0]
   15e48:	4623      	mov	r3, r4
   15e4a:	f508 623e 	add.w	r2, r8, #3040	; 0xbe0
   15e4e:	a9f2      	add	r1, sp, #968	; 0x3c8
   15e50:	a832      	add	r0, sp, #200	; 0xc8
   15e52:	f7fa fa7f 	bl	10354 <mul_mont_384x>
   15e56:	9700      	str	r7, [sp, #0]
   15e58:	4623      	mov	r3, r4
   15e5a:	aada      	add	r2, sp, #872	; 0x368
   15e5c:	a932      	add	r1, sp, #200	; 0xc8
   15e5e:	4608      	mov	r0, r1
   15e60:	f7f6 ff5e 	bl	cd20 <add_mod_n>
   15e64:	9700      	str	r7, [sp, #0]
   15e66:	4623      	mov	r3, r4
   15e68:	aae6      	add	r2, sp, #920	; 0x398
   15e6a:	a93e      	add	r1, sp, #248	; 0xf8
   15e6c:	4608      	mov	r0, r1
   15e6e:	f7f6 ff57 	bl	cd20 <add_mod_n>
   15e72:	2302      	movs	r3, #2
   15e74:	aaaa      	add	r2, sp, #680	; 0x2a8
   15e76:	a9f2      	add	r1, sp, #968	; 0x3c8
   15e78:	a832      	add	r0, sp, #200	; 0xc8
   15e7a:	f7fa fbdf 	bl	1063c <map_fp2>
   15e7e:	9500      	str	r5, [sp, #0]
   15e80:	4623      	mov	r3, r4
   15e82:	f50d 6285 	add.w	r2, sp, #1064	; 0x428
   15e86:	a932      	add	r1, sp, #200	; 0xc8
   15e88:	4608      	mov	r0, r1
   15e8a:	f7fa fa63 	bl	10354 <mul_mont_384x>
   15e8e:	2303      	movs	r3, #3
   15e90:	aa62      	add	r2, sp, #392	; 0x188
   15e92:	f508 6144 	add.w	r1, r8, #3136	; 0xc40
   15e96:	a8aa      	add	r0, sp, #680	; 0x2a8
   15e98:	f7fa faea 	bl	10470 <map_fp2_times_Zz>
   15e9c:	9700      	str	r7, [sp, #0]
   15e9e:	4623      	mov	r3, r4
   15ea0:	aada      	add	r2, sp, #872	; 0x368
   15ea2:	a9f2      	add	r1, sp, #968	; 0x3c8
   15ea4:	a84a      	add	r0, sp, #296	; 0x128
   15ea6:	f7f6 ff3b 	bl	cd20 <add_mod_n>
   15eaa:	9700      	str	r7, [sp, #0]
   15eac:	4623      	mov	r3, r4
   15eae:	aae6      	add	r2, sp, #920	; 0x398
   15eb0:	a9fe      	add	r1, sp, #1016	; 0x3f8
   15eb2:	a856      	add	r0, sp, #344	; 0x158
   15eb4:	f7f6 ff34 	bl	cd20 <add_mod_n>
   15eb8:	2302      	movs	r3, #2
   15eba:	aaaa      	add	r2, sp, #680	; 0x2a8
   15ebc:	a9f2      	add	r1, sp, #968	; 0x3c8
   15ebe:	a84a      	add	r0, sp, #296	; 0x128
   15ec0:	f7fa fbbc 	bl	1063c <map_fp2>
   15ec4:	9500      	str	r5, [sp, #0]
   15ec6:	4623      	mov	r3, r4
   15ec8:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   15ecc:	a992      	add	r1, sp, #584	; 0x248
   15ece:	4608      	mov	r0, r1
   15ed0:	f7fa fa40 	bl	10354 <mul_mont_384x>
   15ed4:	9500      	str	r5, [sp, #0]
   15ed6:	4623      	mov	r3, r4
   15ed8:	aa92      	add	r2, sp, #584	; 0x248
   15eda:	a94a      	add	r1, sp, #296	; 0x128
   15edc:	4608      	mov	r0, r1
   15ede:	f7fa fa39 	bl	10354 <mul_mont_384x>
   15ee2:	9500      	str	r5, [sp, #0]
   15ee4:	4623      	mov	r3, r4
   15ee6:	aa4a      	add	r2, sp, #296	; 0x128
   15ee8:	a91a      	add	r1, sp, #104	; 0x68
   15eea:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
   15eee:	f7fa fa31 	bl	10354 <mul_mont_384x>
   15ef2:	9500      	str	r5, [sp, #0]
   15ef4:	4623      	mov	r3, r4
   15ef6:	aa4a      	add	r2, sp, #296	; 0x128
   15ef8:	a902      	add	r1, sp, #8
   15efa:	a8f2      	add	r0, sp, #968	; 0x3c8
   15efc:	f7fa fa2a 	bl	10354 <mul_mont_384x>
   15f00:	9500      	str	r5, [sp, #0]
   15f02:	4623      	mov	r3, r4
   15f04:	f50d 6291 	add.w	r2, sp, #1160	; 0x488
   15f08:	a9f2      	add	r1, sp, #968	; 0x3c8
   15f0a:	4608      	mov	r0, r1
   15f0c:	f7fa fa22 	bl	10354 <mul_mont_384x>
   15f10:	462b      	mov	r3, r5
   15f12:	4622      	mov	r2, r4
   15f14:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   15f18:	f50d 6085 	add.w	r0, sp, #1064	; 0x428
   15f1c:	f7fd fca8 	bl	13870 <sqr_mont_384x>
   15f20:	9500      	str	r5, [sp, #0]
   15f22:	4623      	mov	r3, r4
   15f24:	aa1a      	add	r2, sp, #104	; 0x68
   15f26:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   15f2a:	4608      	mov	r0, r1
   15f2c:	f7fa fa12 	bl	10354 <mul_mont_384x>
   15f30:	9500      	str	r5, [sp, #0]
   15f32:	4623      	mov	r3, r4
   15f34:	aa32      	add	r2, sp, #200	; 0xc8
   15f36:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   15f3a:	4608      	mov	r0, r1
   15f3c:	f7fa fa0a 	bl	10354 <mul_mont_384x>
   15f40:	a9f2      	add	r1, sp, #968	; 0x3c8
   15f42:	4630      	mov	r0, r6
   15f44:	f7fe fcd2 	bl	148ec <POINTonE2_double>
   15f48:	4631      	mov	r1, r6
   15f4a:	4630      	mov	r0, r6
   15f4c:	f7fa fa50 	bl	103f0 <psi>
   15f50:	4631      	mov	r1, r6
   15f52:	4630      	mov	r0, r6
   15f54:	f7fa fa4c 	bl	103f0 <psi>
   15f58:	abf1      	add	r3, sp, #964	; 0x3c4
   15f5a:	aa61      	add	r2, sp, #388	; 0x184
   15f5c:	f20d 41e4 	addw	r1, sp, #1252	; 0x4e4
   15f60:	f853 4f04 	ldr.w	r4, [r3, #4]!
   15f64:	f842 4f04 	str.w	r4, [r2, #4]!
   15f68:	428b      	cmp	r3, r1
   15f6a:	d1f9      	bne.n	15f60 <map_to_g2+0x20c>
   15f6c:	2101      	movs	r1, #1
   15f6e:	a862      	add	r0, sp, #392	; 0x188
   15f70:	f7f7 fe34 	bl	dbdc <POINTonE2_cneg>
   15f74:	a962      	add	r1, sp, #392	; 0x188
   15f76:	a8aa      	add	r0, sp, #680	; 0x2a8
   15f78:	f7fa fa3a 	bl	103f0 <psi>
   15f7c:	2300      	movs	r3, #0
   15f7e:	aa62      	add	r2, sp, #392	; 0x188
   15f80:	4631      	mov	r1, r6
   15f82:	4630      	mov	r0, r6
   15f84:	f7fe fdba 	bl	14afc <POINTonE2_dadd>
   15f88:	2300      	movs	r3, #0
   15f8a:	aaaa      	add	r2, sp, #680	; 0x2a8
   15f8c:	4631      	mov	r1, r6
   15f8e:	4630      	mov	r0, r6
   15f90:	f7fe fdb4 	bl	14afc <POINTonE2_dadd>
   15f94:	a9f2      	add	r1, sp, #968	; 0x3c8
   15f96:	a862      	add	r0, sp, #392	; 0x188
   15f98:	f7ff f9fb 	bl	15392 <POINTonE2_times_minus_z>
   15f9c:	2300      	movs	r3, #0
   15f9e:	aaf2      	add	r2, sp, #968	; 0x3c8
   15fa0:	a962      	add	r1, sp, #392	; 0x188
   15fa2:	4608      	mov	r0, r1
   15fa4:	f7fe fdaa 	bl	14afc <POINTonE2_dadd>
   15fa8:	2300      	movs	r3, #0
   15faa:	aaaa      	add	r2, sp, #680	; 0x2a8
   15fac:	a962      	add	r1, sp, #392	; 0x188
   15fae:	4608      	mov	r0, r1
   15fb0:	f7fe fda4 	bl	14afc <POINTonE2_dadd>
   15fb4:	a962      	add	r1, sp, #392	; 0x188
   15fb6:	a8aa      	add	r0, sp, #680	; 0x2a8
   15fb8:	f7ff f9eb 	bl	15392 <POINTonE2_times_minus_z>
   15fbc:	2300      	movs	r3, #0
   15fbe:	aaaa      	add	r2, sp, #680	; 0x2a8
   15fc0:	4631      	mov	r1, r6
   15fc2:	4630      	mov	r0, r6
   15fc4:	f7fe fd9a 	bl	14afc <POINTonE2_dadd>
   15fc8:	f50d 6d9d 	add.w	sp, sp, #1256	; 0x4e8
   15fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fd0:	00025960 	.word	0x00025960
   15fd4:	fffcfffd 	.word	0xfffcfffd
   15fd8:	00024108 	.word	0x00024108
   15fdc:	00025200 	.word	0x00025200

00015fe0 <blst_map_to_g2>:
   15fe0:	b508      	push	{r3, lr}
   15fe2:	f7ff feb7 	bl	15d54 <map_to_g2>
   15fe6:	bd08      	pop	{r3, pc}

00015fe8 <blst_encode_to_g2>:
   15fe8:	b510      	push	{r4, lr}
   15fea:	b09c      	sub	sp, #112	; 0x70
   15fec:	4604      	mov	r4, r0
   15fee:	981e      	ldr	r0, [sp, #120]	; 0x78
   15ff0:	9003      	str	r0, [sp, #12]
   15ff2:	9302      	str	r3, [sp, #8]
   15ff4:	9201      	str	r2, [sp, #4]
   15ff6:	9100      	str	r1, [sp, #0]
   15ff8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   15ffa:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   15ffc:	2102      	movs	r1, #2
   15ffe:	a804      	add	r0, sp, #16
   16000:	f7fc fffd 	bl	12ffe <hash_to_field>
   16004:	2200      	movs	r2, #0
   16006:	a904      	add	r1, sp, #16
   16008:	4620      	mov	r0, r4
   1600a:	f7ff fea3 	bl	15d54 <map_to_g2>
   1600e:	b01c      	add	sp, #112	; 0x70
   16010:	bd10      	pop	{r4, pc}

00016012 <blst_hash_to_g2>:
   16012:	b510      	push	{r4, lr}
   16014:	b0b4      	sub	sp, #208	; 0xd0
   16016:	4604      	mov	r4, r0
   16018:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1601a:	9003      	str	r0, [sp, #12]
   1601c:	9302      	str	r3, [sp, #8]
   1601e:	9201      	str	r2, [sp, #4]
   16020:	9100      	str	r1, [sp, #0]
   16022:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   16024:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   16026:	2104      	movs	r1, #4
   16028:	a804      	add	r0, sp, #16
   1602a:	f7fc ffe8 	bl	12ffe <hash_to_field>
   1602e:	aa1c      	add	r2, sp, #112	; 0x70
   16030:	a904      	add	r1, sp, #16
   16032:	4620      	mov	r0, r4
   16034:	f7ff fe8e 	bl	15d54 <map_to_g2>
   16038:	b034      	add	sp, #208	; 0xd0
   1603a:	bd10      	pop	{r4, pc}

0001603c <sqr_fp4>:
   1603c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16040:	b0be      	sub	sp, #248	; 0xf8
   16042:	4604      	mov	r4, r0
   16044:	468a      	mov	sl, r1
   16046:	4690      	mov	r8, r2
   16048:	4d3e      	ldr	r5, [pc, #248]	; (16144 <sqr_fp4+0x108>)
   1604a:	4f3f      	ldr	r7, [pc, #252]	; (16148 <sqr_fp4+0x10c>)
   1604c:	462b      	mov	r3, r5
   1604e:	463a      	mov	r2, r7
   16050:	a826      	add	r0, sp, #152	; 0x98
   16052:	f7fd fc0d 	bl	13870 <sqr_mont_384x>
   16056:	462b      	mov	r3, r5
   16058:	463a      	mov	r2, r7
   1605a:	4641      	mov	r1, r8
   1605c:	a80e      	add	r0, sp, #56	; 0x38
   1605e:	f7fd fc07 	bl	13870 <sqr_mont_384x>
   16062:	f104 0560 	add.w	r5, r4, #96	; 0x60
   16066:	f04f 090c 	mov.w	r9, #12
   1606a:	f8cd 9000 	str.w	r9, [sp]
   1606e:	463b      	mov	r3, r7
   16070:	4642      	mov	r2, r8
   16072:	4651      	mov	r1, sl
   16074:	4628      	mov	r0, r5
   16076:	f7f6 fe53 	bl	cd20 <add_mod_n>
   1607a:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1607e:	f8cd 9000 	str.w	r9, [sp]
   16082:	463b      	mov	r3, r7
   16084:	f108 0230 	add.w	r2, r8, #48	; 0x30
   16088:	f10a 0130 	add.w	r1, sl, #48	; 0x30
   1608c:	4630      	mov	r0, r6
   1608e:	f7f6 fe47 	bl	cd20 <add_mod_n>
   16092:	f8cd 9000 	str.w	r9, [sp]
   16096:	463b      	mov	r3, r7
   16098:	aa1a      	add	r2, sp, #104	; 0x68
   1609a:	a90e      	add	r1, sp, #56	; 0x38
   1609c:	a802      	add	r0, sp, #8
   1609e:	f7f6 fe3f 	bl	cd20 <add_mod_n>
   160a2:	f8cd 9000 	str.w	r9, [sp]
   160a6:	463b      	mov	r3, r7
   160a8:	aa1a      	add	r2, sp, #104	; 0x68
   160aa:	a90e      	add	r1, sp, #56	; 0x38
   160ac:	4620      	mov	r0, r4
   160ae:	f7f6 fae1 	bl	c674 <sub_mod_n>
   160b2:	aa02      	add	r2, sp, #8
   160b4:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   160b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   160bc:	f852 1b04 	ldr.w	r1, [r2], #4
   160c0:	f843 1f04 	str.w	r1, [r3, #4]!
   160c4:	4298      	cmp	r0, r3
   160c6:	d1f9      	bne.n	160bc <sqr_fp4+0x80>
   160c8:	4f1f      	ldr	r7, [pc, #124]	; (16148 <sqr_fp4+0x10c>)
   160ca:	f04f 080c 	mov.w	r8, #12
   160ce:	f8cd 8000 	str.w	r8, [sp]
   160d2:	463b      	mov	r3, r7
   160d4:	aa26      	add	r2, sp, #152	; 0x98
   160d6:	4621      	mov	r1, r4
   160d8:	4620      	mov	r0, r4
   160da:	f7f6 fe21 	bl	cd20 <add_mod_n>
   160de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   160e2:	f8cd 8000 	str.w	r8, [sp]
   160e6:	463b      	mov	r3, r7
   160e8:	aa32      	add	r2, sp, #200	; 0xc8
   160ea:	4601      	mov	r1, r0
   160ec:	f7f6 fe18 	bl	cd20 <add_mod_n>
   160f0:	4b14      	ldr	r3, [pc, #80]	; (16144 <sqr_fp4+0x108>)
   160f2:	463a      	mov	r2, r7
   160f4:	4629      	mov	r1, r5
   160f6:	4628      	mov	r0, r5
   160f8:	f7fd fbba 	bl	13870 <sqr_mont_384x>
   160fc:	f8cd 8000 	str.w	r8, [sp]
   16100:	463b      	mov	r3, r7
   16102:	aa26      	add	r2, sp, #152	; 0x98
   16104:	4629      	mov	r1, r5
   16106:	4628      	mov	r0, r5
   16108:	f7f6 fab4 	bl	c674 <sub_mod_n>
   1610c:	f8cd 8000 	str.w	r8, [sp]
   16110:	463b      	mov	r3, r7
   16112:	aa32      	add	r2, sp, #200	; 0xc8
   16114:	4631      	mov	r1, r6
   16116:	4630      	mov	r0, r6
   16118:	f7f6 faac 	bl	c674 <sub_mod_n>
   1611c:	f8cd 8000 	str.w	r8, [sp]
   16120:	463b      	mov	r3, r7
   16122:	aa0e      	add	r2, sp, #56	; 0x38
   16124:	4629      	mov	r1, r5
   16126:	4628      	mov	r0, r5
   16128:	f7f6 faa4 	bl	c674 <sub_mod_n>
   1612c:	f8cd 8000 	str.w	r8, [sp]
   16130:	463b      	mov	r3, r7
   16132:	aa1a      	add	r2, sp, #104	; 0x68
   16134:	4631      	mov	r1, r6
   16136:	4630      	mov	r0, r6
   16138:	f7f6 fa9c 	bl	c674 <sub_mod_n>
   1613c:	b03e      	add	sp, #248	; 0xf8
   1613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16142:	bf00      	nop
   16144:	fffcfffd 	.word	0xfffcfffd
   16148:	00024108 	.word	0x00024108

0001614c <cyclotomic_sqr_fp12>:
   1614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16150:	f5ad 7d21 	sub.w	sp, sp, #644	; 0x284
   16154:	4604      	mov	r4, r0
   16156:	460f      	mov	r7, r1
   16158:	f501 7590 	add.w	r5, r1, #288	; 0x120
   1615c:	9503      	str	r5, [sp, #12]
   1615e:	f501 7ac0 	add.w	sl, r1, #384	; 0x180
   16162:	4652      	mov	r2, sl
   16164:	a870      	add	r0, sp, #448	; 0x1c0
   16166:	f7ff ff69 	bl	1603c <sqr_fp4>
   1616a:	f107 0bc0 	add.w	fp, r7, #192	; 0xc0
   1616e:	465a      	mov	r2, fp
   16170:	4629      	mov	r1, r5
   16172:	a840      	add	r0, sp, #256	; 0x100
   16174:	f7ff ff62 	bl	1603c <sqr_fp4>
   16178:	f107 0860 	add.w	r8, r7, #96	; 0x60
   1617c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
   16180:	9302      	str	r3, [sp, #8]
   16182:	461a      	mov	r2, r3
   16184:	4641      	mov	r1, r8
   16186:	a810      	add	r0, sp, #64	; 0x40
   16188:	f7ff ff58 	bl	1603c <sqr_fp4>
   1618c:	4d9b      	ldr	r5, [pc, #620]	; (163fc <cyclotomic_sqr_fp12+0x2b0>)
   1618e:	260c      	movs	r6, #12
   16190:	9600      	str	r6, [sp, #0]
   16192:	462b      	mov	r3, r5
   16194:	463a      	mov	r2, r7
   16196:	a970      	add	r1, sp, #448	; 0x1c0
   16198:	4620      	mov	r0, r4
   1619a:	f7f6 fa6b 	bl	c674 <sub_mod_n>
   1619e:	f104 0930 	add.w	r9, r4, #48	; 0x30
   161a2:	9600      	str	r6, [sp, #0]
   161a4:	462b      	mov	r3, r5
   161a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   161aa:	a97c      	add	r1, sp, #496	; 0x1f0
   161ac:	4648      	mov	r0, r9
   161ae:	f7f6 fa61 	bl	c674 <sub_mod_n>
   161b2:	9600      	str	r6, [sp, #0]
   161b4:	462b      	mov	r3, r5
   161b6:	4622      	mov	r2, r4
   161b8:	4621      	mov	r1, r4
   161ba:	4620      	mov	r0, r4
   161bc:	f7f6 fdb0 	bl	cd20 <add_mod_n>
   161c0:	9600      	str	r6, [sp, #0]
   161c2:	462b      	mov	r3, r5
   161c4:	464a      	mov	r2, r9
   161c6:	4649      	mov	r1, r9
   161c8:	4648      	mov	r0, r9
   161ca:	f7f6 fda9 	bl	cd20 <add_mod_n>
   161ce:	9600      	str	r6, [sp, #0]
   161d0:	462b      	mov	r3, r5
   161d2:	aa70      	add	r2, sp, #448	; 0x1c0
   161d4:	4621      	mov	r1, r4
   161d6:	4620      	mov	r0, r4
   161d8:	f7f6 fda2 	bl	cd20 <add_mod_n>
   161dc:	9600      	str	r6, [sp, #0]
   161de:	462b      	mov	r3, r5
   161e0:	aa7c      	add	r2, sp, #496	; 0x1f0
   161e2:	4649      	mov	r1, r9
   161e4:	4648      	mov	r0, r9
   161e6:	f7f6 fd9b 	bl	cd20 <add_mod_n>
   161ea:	f104 0960 	add.w	r9, r4, #96	; 0x60
   161ee:	9600      	str	r6, [sp, #0]
   161f0:	462b      	mov	r3, r5
   161f2:	4642      	mov	r2, r8
   161f4:	a940      	add	r1, sp, #256	; 0x100
   161f6:	4648      	mov	r0, r9
   161f8:	f7f6 fa3c 	bl	c674 <sub_mod_n>
   161fc:	f104 0890 	add.w	r8, r4, #144	; 0x90
   16200:	9600      	str	r6, [sp, #0]
   16202:	462b      	mov	r3, r5
   16204:	f107 0290 	add.w	r2, r7, #144	; 0x90
   16208:	a94c      	add	r1, sp, #304	; 0x130
   1620a:	4640      	mov	r0, r8
   1620c:	f7f6 fa32 	bl	c674 <sub_mod_n>
   16210:	9600      	str	r6, [sp, #0]
   16212:	462b      	mov	r3, r5
   16214:	464a      	mov	r2, r9
   16216:	4649      	mov	r1, r9
   16218:	4648      	mov	r0, r9
   1621a:	f7f6 fd81 	bl	cd20 <add_mod_n>
   1621e:	9600      	str	r6, [sp, #0]
   16220:	462b      	mov	r3, r5
   16222:	4642      	mov	r2, r8
   16224:	4641      	mov	r1, r8
   16226:	4640      	mov	r0, r8
   16228:	f7f6 fd7a 	bl	cd20 <add_mod_n>
   1622c:	9600      	str	r6, [sp, #0]
   1622e:	462b      	mov	r3, r5
   16230:	aa40      	add	r2, sp, #256	; 0x100
   16232:	4649      	mov	r1, r9
   16234:	4648      	mov	r0, r9
   16236:	f7f6 fd73 	bl	cd20 <add_mod_n>
   1623a:	9600      	str	r6, [sp, #0]
   1623c:	462b      	mov	r3, r5
   1623e:	aa4c      	add	r2, sp, #304	; 0x130
   16240:	4641      	mov	r1, r8
   16242:	4640      	mov	r0, r8
   16244:	f7f6 fd6c 	bl	cd20 <add_mod_n>
   16248:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
   1624c:	9600      	str	r6, [sp, #0]
   1624e:	462b      	mov	r3, r5
   16250:	465a      	mov	r2, fp
   16252:	a910      	add	r1, sp, #64	; 0x40
   16254:	4640      	mov	r0, r8
   16256:	f7f6 fa0d 	bl	c674 <sub_mod_n>
   1625a:	f104 09f0 	add.w	r9, r4, #240	; 0xf0
   1625e:	9600      	str	r6, [sp, #0]
   16260:	462b      	mov	r3, r5
   16262:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   16266:	a91c      	add	r1, sp, #112	; 0x70
   16268:	4648      	mov	r0, r9
   1626a:	f7f6 fa03 	bl	c674 <sub_mod_n>
   1626e:	9600      	str	r6, [sp, #0]
   16270:	462b      	mov	r3, r5
   16272:	4642      	mov	r2, r8
   16274:	4641      	mov	r1, r8
   16276:	4640      	mov	r0, r8
   16278:	f7f6 fd52 	bl	cd20 <add_mod_n>
   1627c:	9600      	str	r6, [sp, #0]
   1627e:	462b      	mov	r3, r5
   16280:	464a      	mov	r2, r9
   16282:	4649      	mov	r1, r9
   16284:	4648      	mov	r0, r9
   16286:	f7f6 fd4b 	bl	cd20 <add_mod_n>
   1628a:	9600      	str	r6, [sp, #0]
   1628c:	462b      	mov	r3, r5
   1628e:	aa10      	add	r2, sp, #64	; 0x40
   16290:	4641      	mov	r1, r8
   16292:	4640      	mov	r0, r8
   16294:	f7f6 fd44 	bl	cd20 <add_mod_n>
   16298:	9600      	str	r6, [sp, #0]
   1629a:	462b      	mov	r3, r5
   1629c:	aa1c      	add	r2, sp, #112	; 0x70
   1629e:	4649      	mov	r1, r9
   162a0:	4648      	mov	r0, r9
   162a2:	f7f6 fd3d 	bl	cd20 <add_mod_n>
   162a6:	9600      	str	r6, [sp, #0]
   162a8:	462b      	mov	r3, r5
   162aa:	aa34      	add	r2, sp, #208	; 0xd0
   162ac:	a928      	add	r1, sp, #160	; 0xa0
   162ae:	a804      	add	r0, sp, #16
   162b0:	f7f6 fd36 	bl	cd20 <add_mod_n>
   162b4:	9600      	str	r6, [sp, #0]
   162b6:	462b      	mov	r3, r5
   162b8:	aa34      	add	r2, sp, #208	; 0xd0
   162ba:	a928      	add	r1, sp, #160	; 0xa0
   162bc:	4608      	mov	r0, r1
   162be:	f7f6 f9d9 	bl	c674 <sub_mod_n>
   162c2:	ab04      	add	r3, sp, #16
   162c4:	aa33      	add	r2, sp, #204	; 0xcc
   162c6:	a810      	add	r0, sp, #64	; 0x40
   162c8:	f853 1b04 	ldr.w	r1, [r3], #4
   162cc:	f842 1f04 	str.w	r1, [r2, #4]!
   162d0:	4298      	cmp	r0, r3
   162d2:	d1f9      	bne.n	162c8 <cyclotomic_sqr_fp12+0x17c>
   162d4:	f504 7890 	add.w	r8, r4, #288	; 0x120
   162d8:	4d48      	ldr	r5, [pc, #288]	; (163fc <cyclotomic_sqr_fp12+0x2b0>)
   162da:	260c      	movs	r6, #12
   162dc:	9600      	str	r6, [sp, #0]
   162de:	462b      	mov	r3, r5
   162e0:	9a03      	ldr	r2, [sp, #12]
   162e2:	a928      	add	r1, sp, #160	; 0xa0
   162e4:	4640      	mov	r0, r8
   162e6:	f7f6 fd1b 	bl	cd20 <add_mod_n>
   162ea:	f504 79a8 	add.w	r9, r4, #336	; 0x150
   162ee:	9600      	str	r6, [sp, #0]
   162f0:	462b      	mov	r3, r5
   162f2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
   162f6:	a934      	add	r1, sp, #208	; 0xd0
   162f8:	4648      	mov	r0, r9
   162fa:	f7f6 fd11 	bl	cd20 <add_mod_n>
   162fe:	9600      	str	r6, [sp, #0]
   16300:	462b      	mov	r3, r5
   16302:	4642      	mov	r2, r8
   16304:	4641      	mov	r1, r8
   16306:	4640      	mov	r0, r8
   16308:	f7f6 fd0a 	bl	cd20 <add_mod_n>
   1630c:	9600      	str	r6, [sp, #0]
   1630e:	462b      	mov	r3, r5
   16310:	464a      	mov	r2, r9
   16312:	4649      	mov	r1, r9
   16314:	4648      	mov	r0, r9
   16316:	f7f6 fd03 	bl	cd20 <add_mod_n>
   1631a:	9600      	str	r6, [sp, #0]
   1631c:	462b      	mov	r3, r5
   1631e:	aa28      	add	r2, sp, #160	; 0xa0
   16320:	4641      	mov	r1, r8
   16322:	4640      	mov	r0, r8
   16324:	f7f6 fcfc 	bl	cd20 <add_mod_n>
   16328:	9600      	str	r6, [sp, #0]
   1632a:	462b      	mov	r3, r5
   1632c:	aa34      	add	r2, sp, #208	; 0xd0
   1632e:	4649      	mov	r1, r9
   16330:	4648      	mov	r0, r9
   16332:	f7f6 fcf5 	bl	cd20 <add_mod_n>
   16336:	f504 79c0 	add.w	r9, r4, #384	; 0x180
   1633a:	9600      	str	r6, [sp, #0]
   1633c:	462b      	mov	r3, r5
   1633e:	4652      	mov	r2, sl
   16340:	a988      	add	r1, sp, #544	; 0x220
   16342:	4648      	mov	r0, r9
   16344:	f7f6 fcec 	bl	cd20 <add_mod_n>
   16348:	f504 78d8 	add.w	r8, r4, #432	; 0x1b0
   1634c:	9600      	str	r6, [sp, #0]
   1634e:	462b      	mov	r3, r5
   16350:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
   16354:	a994      	add	r1, sp, #592	; 0x250
   16356:	4640      	mov	r0, r8
   16358:	f7f6 fce2 	bl	cd20 <add_mod_n>
   1635c:	9600      	str	r6, [sp, #0]
   1635e:	462b      	mov	r3, r5
   16360:	464a      	mov	r2, r9
   16362:	4649      	mov	r1, r9
   16364:	4648      	mov	r0, r9
   16366:	f7f6 fcdb 	bl	cd20 <add_mod_n>
   1636a:	9600      	str	r6, [sp, #0]
   1636c:	462b      	mov	r3, r5
   1636e:	4642      	mov	r2, r8
   16370:	4641      	mov	r1, r8
   16372:	4640      	mov	r0, r8
   16374:	f7f6 fcd4 	bl	cd20 <add_mod_n>
   16378:	9600      	str	r6, [sp, #0]
   1637a:	462b      	mov	r3, r5
   1637c:	aa88      	add	r2, sp, #544	; 0x220
   1637e:	4649      	mov	r1, r9
   16380:	4648      	mov	r0, r9
   16382:	f7f6 fccd 	bl	cd20 <add_mod_n>
   16386:	9600      	str	r6, [sp, #0]
   16388:	462b      	mov	r3, r5
   1638a:	aa94      	add	r2, sp, #592	; 0x250
   1638c:	4641      	mov	r1, r8
   1638e:	4640      	mov	r0, r8
   16390:	f7f6 fcc6 	bl	cd20 <add_mod_n>
   16394:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
   16398:	9600      	str	r6, [sp, #0]
   1639a:	462b      	mov	r3, r5
   1639c:	9a02      	ldr	r2, [sp, #8]
   1639e:	a958      	add	r1, sp, #352	; 0x160
   163a0:	4640      	mov	r0, r8
   163a2:	f7f6 fcbd 	bl	cd20 <add_mod_n>
   163a6:	f504 7404 	add.w	r4, r4, #528	; 0x210
   163aa:	9600      	str	r6, [sp, #0]
   163ac:	462b      	mov	r3, r5
   163ae:	f507 7204 	add.w	r2, r7, #528	; 0x210
   163b2:	a964      	add	r1, sp, #400	; 0x190
   163b4:	4620      	mov	r0, r4
   163b6:	f7f6 fcb3 	bl	cd20 <add_mod_n>
   163ba:	9600      	str	r6, [sp, #0]
   163bc:	462b      	mov	r3, r5
   163be:	4642      	mov	r2, r8
   163c0:	4641      	mov	r1, r8
   163c2:	4640      	mov	r0, r8
   163c4:	f7f6 fcac 	bl	cd20 <add_mod_n>
   163c8:	9600      	str	r6, [sp, #0]
   163ca:	462b      	mov	r3, r5
   163cc:	4622      	mov	r2, r4
   163ce:	4621      	mov	r1, r4
   163d0:	4620      	mov	r0, r4
   163d2:	f7f6 fca5 	bl	cd20 <add_mod_n>
   163d6:	9600      	str	r6, [sp, #0]
   163d8:	462b      	mov	r3, r5
   163da:	aa58      	add	r2, sp, #352	; 0x160
   163dc:	4641      	mov	r1, r8
   163de:	4640      	mov	r0, r8
   163e0:	f7f6 fc9e 	bl	cd20 <add_mod_n>
   163e4:	9600      	str	r6, [sp, #0]
   163e6:	462b      	mov	r3, r5
   163e8:	aa64      	add	r2, sp, #400	; 0x190
   163ea:	4621      	mov	r1, r4
   163ec:	4620      	mov	r0, r4
   163ee:	f7f6 fc97 	bl	cd20 <add_mod_n>
   163f2:	f50d 7d21 	add.w	sp, sp, #644	; 0x284
   163f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163fa:	bf00      	nop
   163fc:	00024108 	.word	0x00024108

00016400 <blst_fp12_cyclotomic_sqr>:
   16400:	b508      	push	{r3, lr}
   16402:	f7ff fea3 	bl	1614c <cyclotomic_sqr_fp12>
   16406:	bd08      	pop	{r3, pc}

00016408 <mul_n_sqr>:
   16408:	b570      	push	{r4, r5, r6, lr}
   1640a:	4605      	mov	r5, r0
   1640c:	4616      	mov	r6, r2
   1640e:	460a      	mov	r2, r1
   16410:	4601      	mov	r1, r0
   16412:	f7fa fab3 	bl	1097c <mul_fp12>
   16416:	1e74      	subs	r4, r6, #1
   16418:	b13e      	cbz	r6, 1642a <mul_n_sqr+0x22>
   1641a:	4629      	mov	r1, r5
   1641c:	4628      	mov	r0, r5
   1641e:	f7ff fe95 	bl	1614c <cyclotomic_sqr_fp12>
   16422:	3c01      	subs	r4, #1
   16424:	f1b4 3fff 	cmp.w	r4, #4294967295
   16428:	d1f7      	bne.n	1641a <mul_n_sqr+0x12>
   1642a:	bd70      	pop	{r4, r5, r6, pc}

0001642c <raise_to_z_div_by_2>:
   1642c:	b538      	push	{r3, r4, r5, lr}
   1642e:	4604      	mov	r4, r0
   16430:	460d      	mov	r5, r1
   16432:	f7ff fe8b 	bl	1614c <cyclotomic_sqr_fp12>
   16436:	2202      	movs	r2, #2
   16438:	4629      	mov	r1, r5
   1643a:	4620      	mov	r0, r4
   1643c:	f7ff ffe4 	bl	16408 <mul_n_sqr>
   16440:	2203      	movs	r2, #3
   16442:	4629      	mov	r1, r5
   16444:	4620      	mov	r0, r4
   16446:	f7ff ffdf 	bl	16408 <mul_n_sqr>
   1644a:	2209      	movs	r2, #9
   1644c:	4629      	mov	r1, r5
   1644e:	4620      	mov	r0, r4
   16450:	f7ff ffda 	bl	16408 <mul_n_sqr>
   16454:	2220      	movs	r2, #32
   16456:	4629      	mov	r1, r5
   16458:	4620      	mov	r0, r4
   1645a:	f7ff ffd5 	bl	16408 <mul_n_sqr>
   1645e:	220f      	movs	r2, #15
   16460:	4629      	mov	r1, r5
   16462:	4620      	mov	r0, r4
   16464:	f7ff ffd0 	bl	16408 <mul_n_sqr>
   16468:	4620      	mov	r0, r4
   1646a:	f7f7 fc6d 	bl	dd48 <conjugate_fp12>
   1646e:	bd38      	pop	{r3, r4, r5, pc}

00016470 <sqr_fp6>:
   16470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16474:	b0ef      	sub	sp, #444	; 0x1bc
   16476:	4606      	mov	r6, r0
   16478:	4689      	mov	r9, r1
   1647a:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 1666c <sqr_fp6+0x1fc>
   1647e:	4c7c      	ldr	r4, [pc, #496]	; (16670 <sqr_fp6+0x200>)
   16480:	4653      	mov	r3, sl
   16482:	4622      	mov	r2, r4
   16484:	a856      	add	r0, sp, #344	; 0x158
   16486:	f7fd f9f3 	bl	13870 <sqr_mont_384x>
   1648a:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   1648e:	f8cd a000 	str.w	sl, [sp]
   16492:	4623      	mov	r3, r4
   16494:	465a      	mov	r2, fp
   16496:	4649      	mov	r1, r9
   16498:	a83e      	add	r0, sp, #248	; 0xf8
   1649a:	f7f9 ff5b 	bl	10354 <mul_mont_384x>
   1649e:	250c      	movs	r5, #12
   164a0:	9500      	str	r5, [sp, #0]
   164a2:	4623      	mov	r3, r4
   164a4:	aa3e      	add	r2, sp, #248	; 0xf8
   164a6:	4611      	mov	r1, r2
   164a8:	4610      	mov	r0, r2
   164aa:	f7f6 fc39 	bl	cd20 <add_mod_n>
   164ae:	9500      	str	r5, [sp, #0]
   164b0:	4623      	mov	r3, r4
   164b2:	aa4a      	add	r2, sp, #296	; 0x128
   164b4:	4611      	mov	r1, r2
   164b6:	4610      	mov	r0, r2
   164b8:	f7f6 fc32 	bl	cd20 <add_mod_n>
   164bc:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   164c0:	f8cd a000 	str.w	sl, [sp]
   164c4:	4623      	mov	r3, r4
   164c6:	4642      	mov	r2, r8
   164c8:	4659      	mov	r1, fp
   164ca:	a826      	add	r0, sp, #152	; 0x98
   164cc:	f7f9 ff42 	bl	10354 <mul_mont_384x>
   164d0:	9500      	str	r5, [sp, #0]
   164d2:	4623      	mov	r3, r4
   164d4:	aa26      	add	r2, sp, #152	; 0x98
   164d6:	4611      	mov	r1, r2
   164d8:	4610      	mov	r0, r2
   164da:	f7f6 fc21 	bl	cd20 <add_mod_n>
   164de:	9500      	str	r5, [sp, #0]
   164e0:	4623      	mov	r3, r4
   164e2:	aa32      	add	r2, sp, #200	; 0xc8
   164e4:	4611      	mov	r1, r2
   164e6:	4610      	mov	r0, r2
   164e8:	f7f6 fc1a 	bl	cd20 <add_mod_n>
   164ec:	4653      	mov	r3, sl
   164ee:	4622      	mov	r2, r4
   164f0:	4641      	mov	r1, r8
   164f2:	a80e      	add	r0, sp, #56	; 0x38
   164f4:	f7fd f9bc 	bl	13870 <sqr_mont_384x>
   164f8:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
   164fc:	9500      	str	r5, [sp, #0]
   164fe:	4623      	mov	r3, r4
   16500:	465a      	mov	r2, fp
   16502:	4641      	mov	r1, r8
   16504:	4638      	mov	r0, r7
   16506:	f7f6 fc0b 	bl	cd20 <add_mod_n>
   1650a:	f106 08f0 	add.w	r8, r6, #240	; 0xf0
   1650e:	9500      	str	r5, [sp, #0]
   16510:	4623      	mov	r3, r4
   16512:	f109 0290 	add.w	r2, r9, #144	; 0x90
   16516:	f109 01f0 	add.w	r1, r9, #240	; 0xf0
   1651a:	4640      	mov	r0, r8
   1651c:	f7f6 fc00 	bl	cd20 <add_mod_n>
   16520:	9500      	str	r5, [sp, #0]
   16522:	4623      	mov	r3, r4
   16524:	464a      	mov	r2, r9
   16526:	4639      	mov	r1, r7
   16528:	4638      	mov	r0, r7
   1652a:	f7f6 fbf9 	bl	cd20 <add_mod_n>
   1652e:	9500      	str	r5, [sp, #0]
   16530:	4623      	mov	r3, r4
   16532:	f109 0230 	add.w	r2, r9, #48	; 0x30
   16536:	4641      	mov	r1, r8
   16538:	4640      	mov	r0, r8
   1653a:	f7f6 fbf1 	bl	cd20 <add_mod_n>
   1653e:	4653      	mov	r3, sl
   16540:	4622      	mov	r2, r4
   16542:	4639      	mov	r1, r7
   16544:	4638      	mov	r0, r7
   16546:	f7fd f993 	bl	13870 <sqr_mont_384x>
   1654a:	9500      	str	r5, [sp, #0]
   1654c:	4623      	mov	r3, r4
   1654e:	aa56      	add	r2, sp, #344	; 0x158
   16550:	4639      	mov	r1, r7
   16552:	4638      	mov	r0, r7
   16554:	f7f6 f88e 	bl	c674 <sub_mod_n>
   16558:	9500      	str	r5, [sp, #0]
   1655a:	4623      	mov	r3, r4
   1655c:	aa62      	add	r2, sp, #392	; 0x188
   1655e:	4641      	mov	r1, r8
   16560:	4640      	mov	r0, r8
   16562:	f7f6 f887 	bl	c674 <sub_mod_n>
   16566:	9500      	str	r5, [sp, #0]
   16568:	4623      	mov	r3, r4
   1656a:	aa0e      	add	r2, sp, #56	; 0x38
   1656c:	4639      	mov	r1, r7
   1656e:	4638      	mov	r0, r7
   16570:	f7f6 f880 	bl	c674 <sub_mod_n>
   16574:	9500      	str	r5, [sp, #0]
   16576:	4623      	mov	r3, r4
   16578:	aa1a      	add	r2, sp, #104	; 0x68
   1657a:	4641      	mov	r1, r8
   1657c:	4640      	mov	r0, r8
   1657e:	f7f6 f879 	bl	c674 <sub_mod_n>
   16582:	9500      	str	r5, [sp, #0]
   16584:	4623      	mov	r3, r4
   16586:	aa3e      	add	r2, sp, #248	; 0xf8
   16588:	4639      	mov	r1, r7
   1658a:	4638      	mov	r0, r7
   1658c:	f7f6 f872 	bl	c674 <sub_mod_n>
   16590:	9500      	str	r5, [sp, #0]
   16592:	4623      	mov	r3, r4
   16594:	aa4a      	add	r2, sp, #296	; 0x128
   16596:	4641      	mov	r1, r8
   16598:	4640      	mov	r0, r8
   1659a:	f7f6 f86b 	bl	c674 <sub_mod_n>
   1659e:	9500      	str	r5, [sp, #0]
   165a0:	4623      	mov	r3, r4
   165a2:	aa26      	add	r2, sp, #152	; 0x98
   165a4:	4639      	mov	r1, r7
   165a6:	4638      	mov	r0, r7
   165a8:	f7f6 f864 	bl	c674 <sub_mod_n>
   165ac:	9500      	str	r5, [sp, #0]
   165ae:	4623      	mov	r3, r4
   165b0:	aa32      	add	r2, sp, #200	; 0xc8
   165b2:	4641      	mov	r1, r8
   165b4:	4640      	mov	r0, r8
   165b6:	f7f6 f85d 	bl	c674 <sub_mod_n>
   165ba:	9500      	str	r5, [sp, #0]
   165bc:	4623      	mov	r3, r4
   165be:	aa32      	add	r2, sp, #200	; 0xc8
   165c0:	a926      	add	r1, sp, #152	; 0x98
   165c2:	a802      	add	r0, sp, #8
   165c4:	f7f6 fbac 	bl	cd20 <add_mod_n>
   165c8:	9500      	str	r5, [sp, #0]
   165ca:	4623      	mov	r3, r4
   165cc:	aa32      	add	r2, sp, #200	; 0xc8
   165ce:	a926      	add	r1, sp, #152	; 0x98
   165d0:	4630      	mov	r0, r6
   165d2:	f7f6 f84f 	bl	c674 <sub_mod_n>
   165d6:	aa02      	add	r2, sp, #8
   165d8:	f106 032c 	add.w	r3, r6, #44	; 0x2c
   165dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   165e0:	f852 1b04 	ldr.w	r1, [r2], #4
   165e4:	f843 1f04 	str.w	r1, [r3, #4]!
   165e8:	4298      	cmp	r0, r3
   165ea:	d1f9      	bne.n	165e0 <sqr_fp6+0x170>
   165ec:	4c20      	ldr	r4, [pc, #128]	; (16670 <sqr_fp6+0x200>)
   165ee:	250c      	movs	r5, #12
   165f0:	9500      	str	r5, [sp, #0]
   165f2:	4623      	mov	r3, r4
   165f4:	aa56      	add	r2, sp, #344	; 0x158
   165f6:	4631      	mov	r1, r6
   165f8:	4630      	mov	r0, r6
   165fa:	f7f6 fb91 	bl	cd20 <add_mod_n>
   165fe:	f106 0030 	add.w	r0, r6, #48	; 0x30
   16602:	9500      	str	r5, [sp, #0]
   16604:	4623      	mov	r3, r4
   16606:	aa62      	add	r2, sp, #392	; 0x188
   16608:	4601      	mov	r1, r0
   1660a:	f7f6 fb89 	bl	cd20 <add_mod_n>
   1660e:	f106 0760 	add.w	r7, r6, #96	; 0x60
   16612:	9500      	str	r5, [sp, #0]
   16614:	4623      	mov	r3, r4
   16616:	aa1a      	add	r2, sp, #104	; 0x68
   16618:	a90e      	add	r1, sp, #56	; 0x38
   1661a:	a802      	add	r0, sp, #8
   1661c:	f7f6 fb80 	bl	cd20 <add_mod_n>
   16620:	9500      	str	r5, [sp, #0]
   16622:	4623      	mov	r3, r4
   16624:	aa1a      	add	r2, sp, #104	; 0x68
   16626:	a90e      	add	r1, sp, #56	; 0x38
   16628:	4638      	mov	r0, r7
   1662a:	f7f6 f823 	bl	c674 <sub_mod_n>
   1662e:	aa02      	add	r2, sp, #8
   16630:	f106 038c 	add.w	r3, r6, #140	; 0x8c
   16634:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   16638:	f852 1b04 	ldr.w	r1, [r2], #4
   1663c:	f843 1f04 	str.w	r1, [r3, #4]!
   16640:	4283      	cmp	r3, r0
   16642:	d1f9      	bne.n	16638 <sqr_fp6+0x1c8>
   16644:	4c0a      	ldr	r4, [pc, #40]	; (16670 <sqr_fp6+0x200>)
   16646:	250c      	movs	r5, #12
   16648:	9500      	str	r5, [sp, #0]
   1664a:	4623      	mov	r3, r4
   1664c:	aa3e      	add	r2, sp, #248	; 0xf8
   1664e:	4639      	mov	r1, r7
   16650:	4638      	mov	r0, r7
   16652:	f7f6 fb65 	bl	cd20 <add_mod_n>
   16656:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1665a:	9500      	str	r5, [sp, #0]
   1665c:	4623      	mov	r3, r4
   1665e:	aa4a      	add	r2, sp, #296	; 0x128
   16660:	4601      	mov	r1, r0
   16662:	f7f6 fb5d 	bl	cd20 <add_mod_n>
   16666:	b06f      	add	sp, #444	; 0x1bc
   16668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1666c:	fffcfffd 	.word	0xfffcfffd
   16670:	00024108 	.word	0x00024108

00016674 <inverse_fp12>:
   16674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16678:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
   1667c:	4605      	mov	r5, r0
   1667e:	460e      	mov	r6, r1
   16680:	a8ce      	add	r0, sp, #824	; 0x338
   16682:	f7ff fef5 	bl	16470 <sqr_fp6>
   16686:	f506 7790 	add.w	r7, r6, #288	; 0x120
   1668a:	4639      	mov	r1, r7
   1668c:	a886      	add	r0, sp, #536	; 0x218
   1668e:	f7ff feef 	bl	16470 <sqr_fp6>
   16692:	4cb7      	ldr	r4, [pc, #732]	; (16970 <inverse_fp12+0x2fc>)
   16694:	f04f 080c 	mov.w	r8, #12
   16698:	f8cd 8000 	str.w	r8, [sp]
   1669c:	4623      	mov	r3, r4
   1669e:	aac2      	add	r2, sp, #776	; 0x308
   166a0:	a9b6      	add	r1, sp, #728	; 0x2d8
   166a2:	a86e      	add	r0, sp, #440	; 0x1b8
   166a4:	f7f6 fb3c 	bl	cd20 <add_mod_n>
   166a8:	f8cd 8000 	str.w	r8, [sp]
   166ac:	4623      	mov	r3, r4
   166ae:	aac2      	add	r2, sp, #776	; 0x308
   166b0:	a9b6      	add	r1, sp, #728	; 0x2d8
   166b2:	4608      	mov	r0, r1
   166b4:	f7f5 ffde 	bl	c674 <sub_mod_n>
   166b8:	ab6e      	add	r3, sp, #440	; 0x1b8
   166ba:	aac1      	add	r2, sp, #772	; 0x304
   166bc:	a87a      	add	r0, sp, #488	; 0x1e8
   166be:	f853 1b04 	ldr.w	r1, [r3], #4
   166c2:	f842 1f04 	str.w	r1, [r2, #4]!
   166c6:	4283      	cmp	r3, r0
   166c8:	d1f9      	bne.n	166be <inverse_fp12+0x4a>
   166ca:	4ca9      	ldr	r4, [pc, #676]	; (16970 <inverse_fp12+0x2fc>)
   166cc:	f04f 080c 	mov.w	r8, #12
   166d0:	f8cd 8000 	str.w	r8, [sp]
   166d4:	4623      	mov	r3, r4
   166d6:	aab6      	add	r2, sp, #728	; 0x2d8
   166d8:	a9ce      	add	r1, sp, #824	; 0x338
   166da:	4608      	mov	r0, r1
   166dc:	f7f5 ffca 	bl	c674 <sub_mod_n>
   166e0:	f8cd 8000 	str.w	r8, [sp]
   166e4:	4623      	mov	r3, r4
   166e6:	aac2      	add	r2, sp, #776	; 0x308
   166e8:	a9da      	add	r1, sp, #872	; 0x368
   166ea:	4608      	mov	r0, r1
   166ec:	f7f5 ffc2 	bl	c674 <sub_mod_n>
   166f0:	f8cd 8000 	str.w	r8, [sp]
   166f4:	4623      	mov	r3, r4
   166f6:	aa86      	add	r2, sp, #536	; 0x218
   166f8:	a9e6      	add	r1, sp, #920	; 0x398
   166fa:	4608      	mov	r0, r1
   166fc:	f7f5 ffba 	bl	c674 <sub_mod_n>
   16700:	f8cd 8000 	str.w	r8, [sp]
   16704:	4623      	mov	r3, r4
   16706:	aa92      	add	r2, sp, #584	; 0x248
   16708:	a9f2      	add	r1, sp, #968	; 0x3c8
   1670a:	4608      	mov	r0, r1
   1670c:	f7f5 ffb2 	bl	c674 <sub_mod_n>
   16710:	f8cd 8000 	str.w	r8, [sp]
   16714:	4623      	mov	r3, r4
   16716:	aa9e      	add	r2, sp, #632	; 0x278
   16718:	a9fe      	add	r1, sp, #1016	; 0x3f8
   1671a:	4608      	mov	r0, r1
   1671c:	f7f5 ffaa 	bl	c674 <sub_mod_n>
   16720:	f8cd 8000 	str.w	r8, [sp]
   16724:	4623      	mov	r3, r4
   16726:	aaaa      	add	r2, sp, #680	; 0x2a8
   16728:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
   1672c:	4608      	mov	r0, r1
   1672e:	f7f5 ffa1 	bl	c674 <sub_mod_n>
   16732:	f8df 9240 	ldr.w	r9, [pc, #576]	; 16974 <inverse_fp12+0x300>
   16736:	464b      	mov	r3, r9
   16738:	4622      	mov	r2, r4
   1673a:	a9ce      	add	r1, sp, #824	; 0x338
   1673c:	a80e      	add	r0, sp, #56	; 0x38
   1673e:	f7fd f897 	bl	13870 <sqr_mont_384x>
   16742:	f8cd 9000 	str.w	r9, [sp]
   16746:	4623      	mov	r3, r4
   16748:	aafe      	add	r2, sp, #1016	; 0x3f8
   1674a:	a9e6      	add	r1, sp, #920	; 0x398
   1674c:	a856      	add	r0, sp, #344	; 0x158
   1674e:	f7f9 fe01 	bl	10354 <mul_mont_384x>
   16752:	f8cd 8000 	str.w	r8, [sp]
   16756:	4623      	mov	r3, r4
   16758:	aa62      	add	r2, sp, #392	; 0x188
   1675a:	a956      	add	r1, sp, #344	; 0x158
   1675c:	a86e      	add	r0, sp, #440	; 0x1b8
   1675e:	f7f6 fadf 	bl	cd20 <add_mod_n>
   16762:	f8cd 8000 	str.w	r8, [sp]
   16766:	4623      	mov	r3, r4
   16768:	aa62      	add	r2, sp, #392	; 0x188
   1676a:	a956      	add	r1, sp, #344	; 0x158
   1676c:	4608      	mov	r0, r1
   1676e:	f7f5 ff81 	bl	c674 <sub_mod_n>
   16772:	ab6e      	add	r3, sp, #440	; 0x1b8
   16774:	ac61      	add	r4, sp, #388	; 0x184
   16776:	a87a      	add	r0, sp, #488	; 0x1e8
   16778:	4622      	mov	r2, r4
   1677a:	f853 1b04 	ldr.w	r1, [r3], #4
   1677e:	f842 1f04 	str.w	r1, [r2, #4]!
   16782:	4283      	cmp	r3, r0
   16784:	d1f9      	bne.n	1677a <inverse_fp12+0x106>
   16786:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 16970 <inverse_fp12+0x2fc>
   1678a:	f04f 090c 	mov.w	r9, #12
   1678e:	f8cd 9000 	str.w	r9, [sp]
   16792:	4643      	mov	r3, r8
   16794:	aa56      	add	r2, sp, #344	; 0x158
   16796:	a90e      	add	r1, sp, #56	; 0x38
   16798:	4608      	mov	r0, r1
   1679a:	f7f5 ff6b 	bl	c674 <sub_mod_n>
   1679e:	f8cd 9000 	str.w	r9, [sp]
   167a2:	4643      	mov	r3, r8
   167a4:	aa62      	add	r2, sp, #392	; 0x188
   167a6:	a91a      	add	r1, sp, #104	; 0x68
   167a8:	4608      	mov	r0, r1
   167aa:	f7f5 ff63 	bl	c674 <sub_mod_n>
   167ae:	4b71      	ldr	r3, [pc, #452]	; (16974 <inverse_fp12+0x300>)
   167b0:	4642      	mov	r2, r8
   167b2:	a9fe      	add	r1, sp, #1016	; 0x3f8
   167b4:	a826      	add	r0, sp, #152	; 0x98
   167b6:	f7fd f85b 	bl	13870 <sqr_mont_384x>
   167ba:	f8cd 9000 	str.w	r9, [sp]
   167be:	4643      	mov	r3, r8
   167c0:	aa32      	add	r2, sp, #200	; 0xc8
   167c2:	a926      	add	r1, sp, #152	; 0x98
   167c4:	a86e      	add	r0, sp, #440	; 0x1b8
   167c6:	f7f6 faab 	bl	cd20 <add_mod_n>
   167ca:	f8cd 9000 	str.w	r9, [sp]
   167ce:	4643      	mov	r3, r8
   167d0:	aa32      	add	r2, sp, #200	; 0xc8
   167d2:	a926      	add	r1, sp, #152	; 0x98
   167d4:	4608      	mov	r0, r1
   167d6:	f7f5 ff4d 	bl	c674 <sub_mod_n>
   167da:	ab6e      	add	r3, sp, #440	; 0x1b8
   167dc:	aa31      	add	r2, sp, #196	; 0xc4
   167de:	a87a      	add	r0, sp, #488	; 0x1e8
   167e0:	f853 1b04 	ldr.w	r1, [r3], #4
   167e4:	f842 1f04 	str.w	r1, [r2, #4]!
   167e8:	4298      	cmp	r0, r3
   167ea:	d1f9      	bne.n	167e0 <inverse_fp12+0x16c>
   167ec:	f8df 8180 	ldr.w	r8, [pc, #384]	; 16970 <inverse_fp12+0x2fc>
   167f0:	f8df a180 	ldr.w	sl, [pc, #384]	; 16974 <inverse_fp12+0x300>
   167f4:	f8cd a000 	str.w	sl, [sp]
   167f8:	4643      	mov	r3, r8
   167fa:	aae6      	add	r2, sp, #920	; 0x398
   167fc:	a9ce      	add	r1, sp, #824	; 0x338
   167fe:	a856      	add	r0, sp, #344	; 0x158
   16800:	f7f9 fda8 	bl	10354 <mul_mont_384x>
   16804:	f04f 090c 	mov.w	r9, #12
   16808:	f8cd 9000 	str.w	r9, [sp]
   1680c:	4643      	mov	r3, r8
   1680e:	aa56      	add	r2, sp, #344	; 0x158
   16810:	a926      	add	r1, sp, #152	; 0x98
   16812:	4608      	mov	r0, r1
   16814:	f7f5 ff2e 	bl	c674 <sub_mod_n>
   16818:	f8cd 9000 	str.w	r9, [sp]
   1681c:	4643      	mov	r3, r8
   1681e:	aa62      	add	r2, sp, #392	; 0x188
   16820:	a932      	add	r1, sp, #200	; 0xc8
   16822:	4608      	mov	r0, r1
   16824:	f7f5 ff26 	bl	c674 <sub_mod_n>
   16828:	4653      	mov	r3, sl
   1682a:	4642      	mov	r2, r8
   1682c:	a9e6      	add	r1, sp, #920	; 0x398
   1682e:	a83e      	add	r0, sp, #248	; 0xf8
   16830:	f7fd f81e 	bl	13870 <sqr_mont_384x>
   16834:	f8cd a000 	str.w	sl, [sp]
   16838:	4643      	mov	r3, r8
   1683a:	aafe      	add	r2, sp, #1016	; 0x3f8
   1683c:	a9ce      	add	r1, sp, #824	; 0x338
   1683e:	a856      	add	r0, sp, #344	; 0x158
   16840:	f7f9 fd88 	bl	10354 <mul_mont_384x>
   16844:	f8cd 9000 	str.w	r9, [sp]
   16848:	4643      	mov	r3, r8
   1684a:	aa56      	add	r2, sp, #344	; 0x158
   1684c:	a93e      	add	r1, sp, #248	; 0xf8
   1684e:	4608      	mov	r0, r1
   16850:	f7f5 ff10 	bl	c674 <sub_mod_n>
   16854:	f8cd 9000 	str.w	r9, [sp]
   16858:	4643      	mov	r3, r8
   1685a:	aa62      	add	r2, sp, #392	; 0x188
   1685c:	a94a      	add	r1, sp, #296	; 0x128
   1685e:	4608      	mov	r0, r1
   16860:	f7f5 ff08 	bl	c674 <sub_mod_n>
   16864:	f8cd a000 	str.w	sl, [sp]
   16868:	4643      	mov	r3, r8
   1686a:	aafe      	add	r2, sp, #1016	; 0x3f8
   1686c:	a926      	add	r1, sp, #152	; 0x98
   1686e:	a856      	add	r0, sp, #344	; 0x158
   16870:	f7f9 fd70 	bl	10354 <mul_mont_384x>
   16874:	f8cd a000 	str.w	sl, [sp]
   16878:	4643      	mov	r3, r8
   1687a:	aae6      	add	r2, sp, #920	; 0x398
   1687c:	a93e      	add	r1, sp, #248	; 0xf8
   1687e:	a86e      	add	r0, sp, #440	; 0x1b8
   16880:	f7f9 fd68 	bl	10354 <mul_mont_384x>
   16884:	f8cd 9000 	str.w	r9, [sp]
   16888:	4643      	mov	r3, r8
   1688a:	aa6e      	add	r2, sp, #440	; 0x1b8
   1688c:	a956      	add	r1, sp, #344	; 0x158
   1688e:	4608      	mov	r0, r1
   16890:	f7f6 fa46 	bl	cd20 <add_mod_n>
   16894:	f8cd 9000 	str.w	r9, [sp]
   16898:	4643      	mov	r3, r8
   1689a:	aa7a      	add	r2, sp, #488	; 0x1e8
   1689c:	a962      	add	r1, sp, #392	; 0x188
   1689e:	4608      	mov	r0, r1
   168a0:	f7f6 fa3e 	bl	cd20 <add_mod_n>
   168a4:	f8cd 9000 	str.w	r9, [sp]
   168a8:	4643      	mov	r3, r8
   168aa:	aa62      	add	r2, sp, #392	; 0x188
   168ac:	a956      	add	r1, sp, #344	; 0x158
   168ae:	a802      	add	r0, sp, #8
   168b0:	f7f6 fa36 	bl	cd20 <add_mod_n>
   168b4:	f8cd 9000 	str.w	r9, [sp]
   168b8:	4643      	mov	r3, r8
   168ba:	aa62      	add	r2, sp, #392	; 0x188
   168bc:	a956      	add	r1, sp, #344	; 0x158
   168be:	4608      	mov	r0, r1
   168c0:	f7f5 fed8 	bl	c674 <sub_mod_n>
   168c4:	ab02      	add	r3, sp, #8
   168c6:	a90e      	add	r1, sp, #56	; 0x38
   168c8:	f853 2b04 	ldr.w	r2, [r3], #4
   168cc:	f844 2f04 	str.w	r2, [r4, #4]!
   168d0:	4299      	cmp	r1, r3
   168d2:	d1f9      	bne.n	168c8 <inverse_fp12+0x254>
   168d4:	4c26      	ldr	r4, [pc, #152]	; (16970 <inverse_fp12+0x2fc>)
   168d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 16974 <inverse_fp12+0x300>
   168da:	f8cd 8000 	str.w	r8, [sp]
   168de:	4623      	mov	r3, r4
   168e0:	aace      	add	r2, sp, #824	; 0x338
   168e2:	a90e      	add	r1, sp, #56	; 0x38
   168e4:	a86e      	add	r0, sp, #440	; 0x1b8
   168e6:	f7f9 fd35 	bl	10354 <mul_mont_384x>
   168ea:	f04f 090c 	mov.w	r9, #12
   168ee:	f8cd 9000 	str.w	r9, [sp]
   168f2:	4623      	mov	r3, r4
   168f4:	aa6e      	add	r2, sp, #440	; 0x1b8
   168f6:	a956      	add	r1, sp, #344	; 0x158
   168f8:	4608      	mov	r0, r1
   168fa:	f7f6 fa11 	bl	cd20 <add_mod_n>
   168fe:	f8cd 9000 	str.w	r9, [sp]
   16902:	4623      	mov	r3, r4
   16904:	aa7a      	add	r2, sp, #488	; 0x1e8
   16906:	a962      	add	r1, sp, #392	; 0x188
   16908:	4608      	mov	r0, r1
   1690a:	f7f6 fa09 	bl	cd20 <add_mod_n>
   1690e:	a956      	add	r1, sp, #344	; 0x158
   16910:	a86e      	add	r0, sp, #440	; 0x1b8
   16912:	f7fb f845 	bl	119a0 <reciprocal_fp2>
   16916:	f8cd 8000 	str.w	r8, [sp]
   1691a:	4623      	mov	r3, r4
   1691c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1691e:	a90e      	add	r1, sp, #56	; 0x38
   16920:	a886      	add	r0, sp, #536	; 0x218
   16922:	f7f9 fd17 	bl	10354 <mul_mont_384x>
   16926:	f8cd 8000 	str.w	r8, [sp]
   1692a:	4623      	mov	r3, r4
   1692c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1692e:	a926      	add	r1, sp, #152	; 0x98
   16930:	a89e      	add	r0, sp, #632	; 0x278
   16932:	f7f9 fd0f 	bl	10354 <mul_mont_384x>
   16936:	f8cd 8000 	str.w	r8, [sp]
   1693a:	4623      	mov	r3, r4
   1693c:	aa6e      	add	r2, sp, #440	; 0x1b8
   1693e:	a93e      	add	r1, sp, #248	; 0xf8
   16940:	a8b6      	add	r0, sp, #728	; 0x2d8
   16942:	f7f9 fd07 	bl	10354 <mul_mont_384x>
   16946:	aa86      	add	r2, sp, #536	; 0x218
   16948:	4631      	mov	r1, r6
   1694a:	4628      	mov	r0, r5
   1694c:	f7f9 feb0 	bl	106b0 <mul_fp6>
   16950:	f505 7590 	add.w	r5, r5, #288	; 0x120
   16954:	aa86      	add	r2, sp, #536	; 0x218
   16956:	4639      	mov	r1, r7
   16958:	4628      	mov	r0, r5
   1695a:	f7f9 fea9 	bl	106b0 <mul_fp6>
   1695e:	4629      	mov	r1, r5
   16960:	4628      	mov	r0, r5
   16962:	f7f7 f9b5 	bl	dcd0 <neg_fp6>
   16966:	f50d 6d8b 	add.w	sp, sp, #1112	; 0x458
   1696a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1696e:	bf00      	nop
   16970:	00024108 	.word	0x00024108
   16974:	fffcfffd 	.word	0xfffcfffd

00016978 <blst_fp12_inverse>:
   16978:	b508      	push	{r3, lr}
   1697a:	f7ff fe7b 	bl	16674 <inverse_fp12>
   1697e:	bd08      	pop	{r3, pc}

00016980 <final_exp>:
   16980:	b530      	push	{r4, r5, lr}
   16982:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
   16986:	4604      	mov	r4, r0
   16988:	460d      	mov	r5, r1
   1698a:	f1a1 0c04 	sub.w	ip, r1, #4
   1698e:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
   16992:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   16996:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   1699a:	f843 2b04 	str.w	r2, [r3], #4
   1699e:	4283      	cmp	r3, r0
   169a0:	d1f9      	bne.n	16996 <final_exp+0x16>
   169a2:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   169a6:	f7f7 f9cf 	bl	dd48 <conjugate_fp12>
   169aa:	4629      	mov	r1, r5
   169ac:	a890      	add	r0, sp, #576	; 0x240
   169ae:	f7ff fe61 	bl	16674 <inverse_fp12>
   169b2:	aa90      	add	r2, sp, #576	; 0x240
   169b4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   169b8:	4620      	mov	r0, r4
   169ba:	f7f9 ffdf 	bl	1097c <mul_fp12>
   169be:	2202      	movs	r2, #2
   169c0:	4621      	mov	r1, r4
   169c2:	a890      	add	r0, sp, #576	; 0x240
   169c4:	f7f9 fdfa 	bl	105bc <frobenius_map_fp12>
   169c8:	aa90      	add	r2, sp, #576	; 0x240
   169ca:	4621      	mov	r1, r4
   169cc:	4620      	mov	r0, r4
   169ce:	f7f9 ffd5 	bl	1097c <mul_fp12>
   169d2:	4621      	mov	r1, r4
   169d4:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   169d8:	f7ff fbb8 	bl	1614c <cyclotomic_sqr_fp12>
   169dc:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   169e0:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   169e4:	f7ff fd22 	bl	1642c <raise_to_z_div_by_2>
   169e8:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   169ec:	4608      	mov	r0, r1
   169ee:	f7ff fbad 	bl	1614c <cyclotomic_sqr_fp12>
   169f2:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   169f6:	a890      	add	r0, sp, #576	; 0x240
   169f8:	f7ff fd18 	bl	1642c <raise_to_z_div_by_2>
   169fc:	f1a4 0c04 	sub.w	ip, r4, #4
   16a00:	466b      	mov	r3, sp
   16a02:	a990      	add	r1, sp, #576	; 0x240
   16a04:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   16a08:	f843 2b04 	str.w	r2, [r3], #4
   16a0c:	428b      	cmp	r3, r1
   16a0e:	d1f9      	bne.n	16a04 <final_exp+0x84>
   16a10:	4668      	mov	r0, sp
   16a12:	f7f7 f999 	bl	dd48 <conjugate_fp12>
   16a16:	466a      	mov	r2, sp
   16a18:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16a1c:	4608      	mov	r0, r1
   16a1e:	f7f9 ffad 	bl	1097c <mul_fp12>
   16a22:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   16a26:	f7f7 f98f 	bl	dd48 <conjugate_fp12>
   16a2a:	aa90      	add	r2, sp, #576	; 0x240
   16a2c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16a30:	4608      	mov	r0, r1
   16a32:	f7f9 ffa3 	bl	1097c <mul_fp12>
   16a36:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16a3a:	a890      	add	r0, sp, #576	; 0x240
   16a3c:	f7ff fcf6 	bl	1642c <raise_to_z_div_by_2>
   16a40:	a990      	add	r1, sp, #576	; 0x240
   16a42:	4608      	mov	r0, r1
   16a44:	f7ff fb82 	bl	1614c <cyclotomic_sqr_fp12>
   16a48:	a990      	add	r1, sp, #576	; 0x240
   16a4a:	4668      	mov	r0, sp
   16a4c:	f7ff fcee 	bl	1642c <raise_to_z_div_by_2>
   16a50:	4669      	mov	r1, sp
   16a52:	4668      	mov	r0, sp
   16a54:	f7ff fb7a 	bl	1614c <cyclotomic_sqr_fp12>
   16a58:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   16a5c:	f7f7 f974 	bl	dd48 <conjugate_fp12>
   16a60:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   16a64:	4669      	mov	r1, sp
   16a66:	4668      	mov	r0, sp
   16a68:	f7f9 ff88 	bl	1097c <mul_fp12>
   16a6c:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   16a70:	f7f7 f96a 	bl	dd48 <conjugate_fp12>
   16a74:	2203      	movs	r2, #3
   16a76:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16a7a:	4608      	mov	r0, r1
   16a7c:	f7f9 fd9e 	bl	105bc <frobenius_map_fp12>
   16a80:	2202      	movs	r2, #2
   16a82:	a990      	add	r1, sp, #576	; 0x240
   16a84:	4608      	mov	r0, r1
   16a86:	f7f9 fd99 	bl	105bc <frobenius_map_fp12>
   16a8a:	aa90      	add	r2, sp, #576	; 0x240
   16a8c:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16a90:	4608      	mov	r0, r1
   16a92:	f7f9 ff73 	bl	1097c <mul_fp12>
   16a96:	4669      	mov	r1, sp
   16a98:	a890      	add	r0, sp, #576	; 0x240
   16a9a:	f7ff fcc7 	bl	1642c <raise_to_z_div_by_2>
   16a9e:	a990      	add	r1, sp, #576	; 0x240
   16aa0:	4608      	mov	r0, r1
   16aa2:	f7ff fb53 	bl	1614c <cyclotomic_sqr_fp12>
   16aa6:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
   16aaa:	a990      	add	r1, sp, #576	; 0x240
   16aac:	4608      	mov	r0, r1
   16aae:	f7f9 ff65 	bl	1097c <mul_fp12>
   16ab2:	4622      	mov	r2, r4
   16ab4:	a990      	add	r1, sp, #576	; 0x240
   16ab6:	4608      	mov	r0, r1
   16ab8:	f7f9 ff60 	bl	1097c <mul_fp12>
   16abc:	aa90      	add	r2, sp, #576	; 0x240
   16abe:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16ac2:	4608      	mov	r0, r1
   16ac4:	f7f9 ff5a 	bl	1097c <mul_fp12>
   16ac8:	2201      	movs	r2, #1
   16aca:	4669      	mov	r1, sp
   16acc:	a890      	add	r0, sp, #576	; 0x240
   16ace:	f7f9 fd75 	bl	105bc <frobenius_map_fp12>
   16ad2:	aa90      	add	r2, sp, #576	; 0x240
   16ad4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   16ad8:	4620      	mov	r0, r4
   16ada:	f7f9 ff4f 	bl	1097c <mul_fp12>
   16ade:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
   16ae2:	bd30      	pop	{r4, r5, pc}

00016ae4 <blst_final_exp>:
   16ae4:	b508      	push	{r3, lr}
   16ae6:	f7ff ff4b 	bl	16980 <final_exp>
   16aea:	bd08      	pop	{r3, pc}

00016aec <line_dbl>:
   16aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
   16af4:	4606      	mov	r6, r0
   16af6:	4689      	mov	r9, r1
   16af8:	4617      	mov	r7, r2
   16afa:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 16dd8 <line_dbl+0x2ec>
   16afe:	4cb7      	ldr	r4, [pc, #732]	; (16ddc <line_dbl+0x2f0>)
   16b00:	4653      	mov	r3, sl
   16b02:	4622      	mov	r2, r4
   16b04:	4639      	mov	r1, r7
   16b06:	a87e      	add	r0, sp, #504	; 0x1f8
   16b08:	f7fc feb2 	bl	13870 <sqr_mont_384x>
   16b0c:	f107 0b60 	add.w	fp, r7, #96	; 0x60
   16b10:	4653      	mov	r3, sl
   16b12:	4622      	mov	r2, r4
   16b14:	4659      	mov	r1, fp
   16b16:	a866      	add	r0, sp, #408	; 0x198
   16b18:	f7fc feaa 	bl	13870 <sqr_mont_384x>
   16b1c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
   16b20:	4619      	mov	r1, r3
   16b22:	4653      	mov	r3, sl
   16b24:	4622      	mov	r2, r4
   16b26:	9103      	str	r1, [sp, #12]
   16b28:	a896      	add	r0, sp, #600	; 0x258
   16b2a:	f7fc fea1 	bl	13870 <sqr_mont_384x>
   16b2e:	4653      	mov	r3, sl
   16b30:	4622      	mov	r2, r4
   16b32:	a866      	add	r0, sp, #408	; 0x198
   16b34:	4601      	mov	r1, r0
   16b36:	a84e      	add	r0, sp, #312	; 0x138
   16b38:	f7fc fe9a 	bl	13870 <sqr_mont_384x>
   16b3c:	250c      	movs	r5, #12
   16b3e:	9500      	str	r5, [sp, #0]
   16b40:	4623      	mov	r3, r4
   16b42:	aa66      	add	r2, sp, #408	; 0x198
   16b44:	4639      	mov	r1, r7
   16b46:	a836      	add	r0, sp, #216	; 0xd8
   16b48:	f7f6 f8ea 	bl	cd20 <add_mod_n>
   16b4c:	f107 0830 	add.w	r8, r7, #48	; 0x30
   16b50:	9500      	str	r5, [sp, #0]
   16b52:	4623      	mov	r3, r4
   16b54:	aa72      	add	r2, sp, #456	; 0x1c8
   16b56:	4641      	mov	r1, r8
   16b58:	a842      	add	r0, sp, #264	; 0x108
   16b5a:	f7f6 f8e1 	bl	cd20 <add_mod_n>
   16b5e:	4653      	mov	r3, sl
   16b60:	4622      	mov	r2, r4
   16b62:	a836      	add	r0, sp, #216	; 0xd8
   16b64:	4601      	mov	r1, r0
   16b66:	f7fc fe83 	bl	13870 <sqr_mont_384x>
   16b6a:	9500      	str	r5, [sp, #0]
   16b6c:	4623      	mov	r3, r4
   16b6e:	aa7e      	add	r2, sp, #504	; 0x1f8
   16b70:	a836      	add	r0, sp, #216	; 0xd8
   16b72:	4601      	mov	r1, r0
   16b74:	f7f5 fd7e 	bl	c674 <sub_mod_n>
   16b78:	9500      	str	r5, [sp, #0]
   16b7a:	4623      	mov	r3, r4
   16b7c:	aa8a      	add	r2, sp, #552	; 0x228
   16b7e:	a842      	add	r0, sp, #264	; 0x108
   16b80:	4601      	mov	r1, r0
   16b82:	f7f5 fd77 	bl	c674 <sub_mod_n>
   16b86:	9500      	str	r5, [sp, #0]
   16b88:	4623      	mov	r3, r4
   16b8a:	aa4e      	add	r2, sp, #312	; 0x138
   16b8c:	a836      	add	r0, sp, #216	; 0xd8
   16b8e:	4601      	mov	r1, r0
   16b90:	f7f5 fd70 	bl	c674 <sub_mod_n>
   16b94:	9500      	str	r5, [sp, #0]
   16b96:	4623      	mov	r3, r4
   16b98:	aa5a      	add	r2, sp, #360	; 0x168
   16b9a:	a842      	add	r0, sp, #264	; 0x108
   16b9c:	4601      	mov	r1, r0
   16b9e:	f7f5 fd69 	bl	c674 <sub_mod_n>
   16ba2:	9500      	str	r5, [sp, #0]
   16ba4:	4623      	mov	r3, r4
   16ba6:	aa36      	add	r2, sp, #216	; 0xd8
   16ba8:	4610      	mov	r0, r2
   16baa:	4611      	mov	r1, r2
   16bac:	f7f6 f8b8 	bl	cd20 <add_mod_n>
   16bb0:	9500      	str	r5, [sp, #0]
   16bb2:	4623      	mov	r3, r4
   16bb4:	aa42      	add	r2, sp, #264	; 0x108
   16bb6:	4610      	mov	r0, r2
   16bb8:	4611      	mov	r1, r2
   16bba:	f7f6 f8b1 	bl	cd20 <add_mod_n>
   16bbe:	462b      	mov	r3, r5
   16bc0:	4622      	mov	r2, r4
   16bc2:	a87e      	add	r0, sp, #504	; 0x1f8
   16bc4:	4601      	mov	r1, r0
   16bc6:	a81e      	add	r0, sp, #120	; 0x78
   16bc8:	f7f6 f932 	bl	ce30 <mul_by_3_mod_n>
   16bcc:	462b      	mov	r3, r5
   16bce:	4622      	mov	r2, r4
   16bd0:	a88a      	add	r0, sp, #552	; 0x228
   16bd2:	4601      	mov	r1, r0
   16bd4:	a82a      	add	r0, sp, #168	; 0xa8
   16bd6:	f7f6 f92b 	bl	ce30 <mul_by_3_mod_n>
   16bda:	4653      	mov	r3, sl
   16bdc:	4622      	mov	r2, r4
   16bde:	a81e      	add	r0, sp, #120	; 0x78
   16be0:	4601      	mov	r1, r0
   16be2:	a806      	add	r0, sp, #24
   16be4:	f7fc fe44 	bl	13870 <sqr_mont_384x>
   16be8:	9500      	str	r5, [sp, #0]
   16bea:	4623      	mov	r3, r4
   16bec:	463a      	mov	r2, r7
   16bee:	a81e      	add	r0, sp, #120	; 0x78
   16bf0:	4601      	mov	r1, r0
   16bf2:	4630      	mov	r0, r6
   16bf4:	f7f6 f894 	bl	cd20 <add_mod_n>
   16bf8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   16bfc:	9500      	str	r5, [sp, #0]
   16bfe:	4623      	mov	r3, r4
   16c00:	4642      	mov	r2, r8
   16c02:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   16c06:	4661      	mov	r1, ip
   16c08:	9005      	str	r0, [sp, #20]
   16c0a:	f7f6 f889 	bl	cd20 <add_mod_n>
   16c0e:	9500      	str	r5, [sp, #0]
   16c10:	4623      	mov	r3, r4
   16c12:	aa36      	add	r2, sp, #216	; 0xd8
   16c14:	f10d 0c18 	add.w	ip, sp, #24
   16c18:	4661      	mov	r1, ip
   16c1a:	4648      	mov	r0, r9
   16c1c:	f7f5 fd2a 	bl	c674 <sub_mod_n>
   16c20:	f109 0830 	add.w	r8, r9, #48	; 0x30
   16c24:	9500      	str	r5, [sp, #0]
   16c26:	4623      	mov	r3, r4
   16c28:	aa42      	add	r2, sp, #264	; 0x108
   16c2a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   16c2e:	4661      	mov	r1, ip
   16c30:	4640      	mov	r0, r8
   16c32:	f7f5 fd1f 	bl	c674 <sub_mod_n>
   16c36:	9500      	str	r5, [sp, #0]
   16c38:	4623      	mov	r3, r4
   16c3a:	aa36      	add	r2, sp, #216	; 0xd8
   16c3c:	4649      	mov	r1, r9
   16c3e:	4648      	mov	r0, r9
   16c40:	f7f5 fd18 	bl	c674 <sub_mod_n>
   16c44:	9500      	str	r5, [sp, #0]
   16c46:	4623      	mov	r3, r4
   16c48:	aa42      	add	r2, sp, #264	; 0x108
   16c4a:	4641      	mov	r1, r8
   16c4c:	f8cd 8010 	str.w	r8, [sp, #16]
   16c50:	4640      	mov	r0, r8
   16c52:	f7f5 fd0f 	bl	c674 <sub_mod_n>
   16c56:	f109 08c0 	add.w	r8, r9, #192	; 0xc0
   16c5a:	9500      	str	r5, [sp, #0]
   16c5c:	4623      	mov	r3, r4
   16c5e:	9a03      	ldr	r2, [sp, #12]
   16c60:	4659      	mov	r1, fp
   16c62:	4640      	mov	r0, r8
   16c64:	f7f6 f85c 	bl	cd20 <add_mod_n>
   16c68:	f109 0bf0 	add.w	fp, r9, #240	; 0xf0
   16c6c:	9500      	str	r5, [sp, #0]
   16c6e:	4623      	mov	r3, r4
   16c70:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   16c74:	f107 0190 	add.w	r1, r7, #144	; 0x90
   16c78:	4658      	mov	r0, fp
   16c7a:	f7f6 f851 	bl	cd20 <add_mod_n>
   16c7e:	4653      	mov	r3, sl
   16c80:	4622      	mov	r2, r4
   16c82:	4641      	mov	r1, r8
   16c84:	4640      	mov	r0, r8
   16c86:	f7fc fdf3 	bl	13870 <sqr_mont_384x>
   16c8a:	9500      	str	r5, [sp, #0]
   16c8c:	4623      	mov	r3, r4
   16c8e:	aa66      	add	r2, sp, #408	; 0x198
   16c90:	4641      	mov	r1, r8
   16c92:	4640      	mov	r0, r8
   16c94:	f7f5 fcee 	bl	c674 <sub_mod_n>
   16c98:	9500      	str	r5, [sp, #0]
   16c9a:	4623      	mov	r3, r4
   16c9c:	aa72      	add	r2, sp, #456	; 0x1c8
   16c9e:	4659      	mov	r1, fp
   16ca0:	4658      	mov	r0, fp
   16ca2:	f7f5 fce7 	bl	c674 <sub_mod_n>
   16ca6:	9500      	str	r5, [sp, #0]
   16ca8:	4623      	mov	r3, r4
   16caa:	aa96      	add	r2, sp, #600	; 0x258
   16cac:	4641      	mov	r1, r8
   16cae:	4640      	mov	r0, r8
   16cb0:	f7f5 fce0 	bl	c674 <sub_mod_n>
   16cb4:	9500      	str	r5, [sp, #0]
   16cb6:	4623      	mov	r3, r4
   16cb8:	aaa2      	add	r2, sp, #648	; 0x288
   16cba:	4659      	mov	r1, fp
   16cbc:	4658      	mov	r0, fp
   16cbe:	f7f5 fcd9 	bl	c674 <sub_mod_n>
   16cc2:	9500      	str	r5, [sp, #0]
   16cc4:	4623      	mov	r3, r4
   16cc6:	2203      	movs	r2, #3
   16cc8:	a94e      	add	r1, sp, #312	; 0x138
   16cca:	4608      	mov	r0, r1
   16ccc:	f7f6 f950 	bl	cf70 <lshift_mod_n>
   16cd0:	9500      	str	r5, [sp, #0]
   16cd2:	4623      	mov	r3, r4
   16cd4:	2203      	movs	r2, #3
   16cd6:	a95a      	add	r1, sp, #360	; 0x168
   16cd8:	4608      	mov	r0, r1
   16cda:	f7f6 f949 	bl	cf70 <lshift_mod_n>
   16cde:	f109 0b60 	add.w	fp, r9, #96	; 0x60
   16ce2:	9500      	str	r5, [sp, #0]
   16ce4:	4623      	mov	r3, r4
   16ce6:	464a      	mov	r2, r9
   16ce8:	a936      	add	r1, sp, #216	; 0xd8
   16cea:	4658      	mov	r0, fp
   16cec:	f7f5 fcc2 	bl	c674 <sub_mod_n>
   16cf0:	f109 0790 	add.w	r7, r9, #144	; 0x90
   16cf4:	9500      	str	r5, [sp, #0]
   16cf6:	4623      	mov	r3, r4
   16cf8:	9a04      	ldr	r2, [sp, #16]
   16cfa:	a942      	add	r1, sp, #264	; 0x108
   16cfc:	4638      	mov	r0, r7
   16cfe:	f7f5 fcb9 	bl	c674 <sub_mod_n>
   16d02:	f8cd a000 	str.w	sl, [sp]
   16d06:	4623      	mov	r3, r4
   16d08:	aa1e      	add	r2, sp, #120	; 0x78
   16d0a:	4659      	mov	r1, fp
   16d0c:	4658      	mov	r0, fp
   16d0e:	f7f9 fb21 	bl	10354 <mul_mont_384x>
   16d12:	9500      	str	r5, [sp, #0]
   16d14:	4623      	mov	r3, r4
   16d16:	aa4e      	add	r2, sp, #312	; 0x138
   16d18:	4659      	mov	r1, fp
   16d1a:	4658      	mov	r0, fp
   16d1c:	f7f5 fcaa 	bl	c674 <sub_mod_n>
   16d20:	9500      	str	r5, [sp, #0]
   16d22:	4623      	mov	r3, r4
   16d24:	aa5a      	add	r2, sp, #360	; 0x168
   16d26:	4639      	mov	r1, r7
   16d28:	4638      	mov	r0, r7
   16d2a:	f7f5 fca3 	bl	c674 <sub_mod_n>
   16d2e:	4653      	mov	r3, sl
   16d30:	4622      	mov	r2, r4
   16d32:	4631      	mov	r1, r6
   16d34:	4630      	mov	r0, r6
   16d36:	f7fc fd9b 	bl	13870 <sqr_mont_384x>
   16d3a:	9500      	str	r5, [sp, #0]
   16d3c:	4623      	mov	r3, r4
   16d3e:	aa7e      	add	r2, sp, #504	; 0x1f8
   16d40:	4631      	mov	r1, r6
   16d42:	4630      	mov	r0, r6
   16d44:	f7f5 fc96 	bl	c674 <sub_mod_n>
   16d48:	9500      	str	r5, [sp, #0]
   16d4a:	4623      	mov	r3, r4
   16d4c:	aa8a      	add	r2, sp, #552	; 0x228
   16d4e:	9f05      	ldr	r7, [sp, #20]
   16d50:	4639      	mov	r1, r7
   16d52:	4638      	mov	r0, r7
   16d54:	f7f5 fc8e 	bl	c674 <sub_mod_n>
   16d58:	9500      	str	r5, [sp, #0]
   16d5a:	4623      	mov	r3, r4
   16d5c:	aa06      	add	r2, sp, #24
   16d5e:	4631      	mov	r1, r6
   16d60:	4630      	mov	r0, r6
   16d62:	f7f5 fc87 	bl	c674 <sub_mod_n>
   16d66:	9500      	str	r5, [sp, #0]
   16d68:	4623      	mov	r3, r4
   16d6a:	aa12      	add	r2, sp, #72	; 0x48
   16d6c:	4639      	mov	r1, r7
   16d6e:	4638      	mov	r0, r7
   16d70:	f7f5 fc80 	bl	c674 <sub_mod_n>
   16d74:	9500      	str	r5, [sp, #0]
   16d76:	4623      	mov	r3, r4
   16d78:	2202      	movs	r2, #2
   16d7a:	a966      	add	r1, sp, #408	; 0x198
   16d7c:	4608      	mov	r0, r1
   16d7e:	f7f6 f8f7 	bl	cf70 <lshift_mod_n>
   16d82:	9500      	str	r5, [sp, #0]
   16d84:	4623      	mov	r3, r4
   16d86:	2202      	movs	r2, #2
   16d88:	a972      	add	r1, sp, #456	; 0x1c8
   16d8a:	4608      	mov	r0, r1
   16d8c:	f7f6 f8f0 	bl	cf70 <lshift_mod_n>
   16d90:	9500      	str	r5, [sp, #0]
   16d92:	4623      	mov	r3, r4
   16d94:	aa66      	add	r2, sp, #408	; 0x198
   16d96:	4631      	mov	r1, r6
   16d98:	4630      	mov	r0, r6
   16d9a:	f7f5 fc6b 	bl	c674 <sub_mod_n>
   16d9e:	9500      	str	r5, [sp, #0]
   16da0:	4623      	mov	r3, r4
   16da2:	aa72      	add	r2, sp, #456	; 0x1c8
   16da4:	4639      	mov	r1, r7
   16da6:	4638      	mov	r0, r7
   16da8:	f7f5 fc64 	bl	c674 <sub_mod_n>
   16dac:	f8cd a000 	str.w	sl, [sp]
   16db0:	4623      	mov	r3, r4
   16db2:	aa96      	add	r2, sp, #600	; 0x258
   16db4:	a91e      	add	r1, sp, #120	; 0x78
   16db6:	f106 0060 	add.w	r0, r6, #96	; 0x60
   16dba:	f7f9 facb 	bl	10354 <mul_mont_384x>
   16dbe:	f8cd a000 	str.w	sl, [sp]
   16dc2:	4623      	mov	r3, r4
   16dc4:	aa96      	add	r2, sp, #600	; 0x258
   16dc6:	4641      	mov	r1, r8
   16dc8:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   16dcc:	f7f9 fac2 	bl	10354 <mul_mont_384x>
   16dd0:	f50d 7d2f 	add.w	sp, sp, #700	; 0x2bc
   16dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd8:	fffcfffd 	.word	0xfffcfffd
   16ddc:	00024108 	.word	0x00024108

00016de0 <start_dbl_n>:
   16de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16de4:	b0c8      	sub	sp, #288	; 0x120
   16de6:	4606      	mov	r6, r0
   16de8:	460c      	mov	r4, r1
   16dea:	4615      	mov	r5, r2
   16dec:	461f      	mov	r7, r3
   16dee:	460a      	mov	r2, r1
   16df0:	4668      	mov	r0, sp
   16df2:	f7ff fe7b 	bl	16aec <line_dbl>
   16df6:	4629      	mov	r1, r5
   16df8:	4668      	mov	r0, sp
   16dfa:	f7f5 ff0b 	bl	cc14 <line_by_Px2>
   16dfe:	4633      	mov	r3, r6
   16e00:	f506 7110 	add.w	r1, r6, #576	; 0x240
   16e04:	2200      	movs	r2, #0
   16e06:	f843 2b04 	str.w	r2, [r3], #4
   16e0a:	428b      	cmp	r3, r1
   16e0c:	d1fb      	bne.n	16e06 <start_dbl_n+0x26>
   16e0e:	f1ad 0204 	sub.w	r2, sp, #4
   16e12:	1f33      	subs	r3, r6, #4
   16e14:	a82f      	add	r0, sp, #188	; 0xbc
   16e16:	f852 1f04 	ldr.w	r1, [r2, #4]!
   16e1a:	f843 1f04 	str.w	r1, [r3, #4]!
   16e1e:	4282      	cmp	r2, r0
   16e20:	d1f9      	bne.n	16e16 <start_dbl_n+0x36>
   16e22:	aa2f      	add	r2, sp, #188	; 0xbc
   16e24:	f506 73be 	add.w	r3, r6, #380	; 0x17c
   16e28:	a847      	add	r0, sp, #284	; 0x11c
   16e2a:	f852 1f04 	ldr.w	r1, [r2, #4]!
   16e2e:	f843 1f04 	str.w	r1, [r3, #4]!
   16e32:	4282      	cmp	r2, r0
   16e34:	d1f9      	bne.n	16e2a <start_dbl_n+0x4a>
   16e36:	2f01      	cmp	r7, #1
   16e38:	d919      	bls.n	16e6e <start_dbl_n+0x8e>
   16e3a:	f504 7490 	add.w	r4, r4, #288	; 0x120
   16e3e:	3560      	adds	r5, #96	; 0x60
   16e40:	f04f 0801 	mov.w	r8, #1
   16e44:	4622      	mov	r2, r4
   16e46:	4621      	mov	r1, r4
   16e48:	4668      	mov	r0, sp
   16e4a:	f7ff fe4f 	bl	16aec <line_dbl>
   16e4e:	4629      	mov	r1, r5
   16e50:	4668      	mov	r0, sp
   16e52:	f7f5 fedf 	bl	cc14 <line_by_Px2>
   16e56:	466a      	mov	r2, sp
   16e58:	4631      	mov	r1, r6
   16e5a:	4630      	mov	r0, r6
   16e5c:	f7f9 ffb2 	bl	10dc4 <mul_by_xy00z0_fp12>
   16e60:	f108 0801 	add.w	r8, r8, #1
   16e64:	f504 7490 	add.w	r4, r4, #288	; 0x120
   16e68:	3560      	adds	r5, #96	; 0x60
   16e6a:	4547      	cmp	r7, r8
   16e6c:	d1ea      	bne.n	16e44 <start_dbl_n+0x64>
   16e6e:	b048      	add	sp, #288	; 0x120
   16e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016e74 <line_add>:
   16e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e78:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
   16e7c:	4682      	mov	sl, r0
   16e7e:	460e      	mov	r6, r1
   16e80:	4693      	mov	fp, r2
   16e82:	4699      	mov	r9, r3
   16e84:	f102 05c0 	add.w	r5, r2, #192	; 0xc0
   16e88:	4fcc      	ldr	r7, [pc, #816]	; (171bc <line_add+0x348>)
   16e8a:	4ccd      	ldr	r4, [pc, #820]	; (171c0 <line_add+0x34c>)
   16e8c:	463b      	mov	r3, r7
   16e8e:	4622      	mov	r2, r4
   16e90:	4629      	mov	r1, r5
   16e92:	a8ae      	add	r0, sp, #696	; 0x2b8
   16e94:	f7fc fcec 	bl	13870 <sqr_mont_384x>
   16e98:	9700      	str	r7, [sp, #0]
   16e9a:	4623      	mov	r3, r4
   16e9c:	aaae      	add	r2, sp, #696	; 0x2b8
   16e9e:	4649      	mov	r1, r9
   16ea0:	a896      	add	r0, sp, #600	; 0x258
   16ea2:	f7f9 fa57 	bl	10354 <mul_mont_384x>
   16ea6:	f8cd 9014 	str.w	r9, [sp, #20]
   16eaa:	f109 0060 	add.w	r0, r9, #96	; 0x60
   16eae:	9700      	str	r7, [sp, #0]
   16eb0:	4623      	mov	r3, r4
   16eb2:	9502      	str	r5, [sp, #8]
   16eb4:	462a      	mov	r2, r5
   16eb6:	9003      	str	r0, [sp, #12]
   16eb8:	4601      	mov	r1, r0
   16eba:	a87e      	add	r0, sp, #504	; 0x1f8
   16ebc:	f7f9 fa4a 	bl	10354 <mul_mont_384x>
   16ec0:	9700      	str	r7, [sp, #0]
   16ec2:	4623      	mov	r3, r4
   16ec4:	adae      	add	r5, sp, #696	; 0x2b8
   16ec6:	462a      	mov	r2, r5
   16ec8:	ad7e      	add	r5, sp, #504	; 0x1f8
   16eca:	4629      	mov	r1, r5
   16ecc:	4628      	mov	r0, r5
   16ece:	f7f9 fa41 	bl	10354 <mul_mont_384x>
   16ed2:	250c      	movs	r5, #12
   16ed4:	9500      	str	r5, [sp, #0]
   16ed6:	4623      	mov	r3, r4
   16ed8:	465a      	mov	r2, fp
   16eda:	f50d 7c16 	add.w	ip, sp, #600	; 0x258
   16ede:	4661      	mov	r1, ip
   16ee0:	a866      	add	r0, sp, #408	; 0x198
   16ee2:	f7f5 fbc7 	bl	c674 <sub_mod_n>
   16ee6:	9500      	str	r5, [sp, #0]
   16ee8:	4623      	mov	r3, r4
   16eea:	f10b 0230 	add.w	r2, fp, #48	; 0x30
   16eee:	a9a2      	add	r1, sp, #648	; 0x288
   16ef0:	a872      	add	r0, sp, #456	; 0x1c8
   16ef2:	f7f5 fbbf 	bl	c674 <sub_mod_n>
   16ef6:	463b      	mov	r3, r7
   16ef8:	4622      	mov	r2, r4
   16efa:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   16efe:	4661      	mov	r1, ip
   16f00:	a84e      	add	r0, sp, #312	; 0x138
   16f02:	f7fc fcb5 	bl	13870 <sqr_mont_384x>
   16f06:	9500      	str	r5, [sp, #0]
   16f08:	4623      	mov	r3, r4
   16f0a:	f50d 7c9c 	add.w	ip, sp, #312	; 0x138
   16f0e:	4662      	mov	r2, ip
   16f10:	4661      	mov	r1, ip
   16f12:	a836      	add	r0, sp, #216	; 0xd8
   16f14:	f7f5 ff04 	bl	cd20 <add_mod_n>
   16f18:	9500      	str	r5, [sp, #0]
   16f1a:	4623      	mov	r3, r4
   16f1c:	f50d 7cb4 	add.w	ip, sp, #360	; 0x168
   16f20:	4662      	mov	r2, ip
   16f22:	4661      	mov	r1, ip
   16f24:	a842      	add	r0, sp, #264	; 0x108
   16f26:	f7f5 fefb 	bl	cd20 <add_mod_n>
   16f2a:	9500      	str	r5, [sp, #0]
   16f2c:	4623      	mov	r3, r4
   16f2e:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   16f32:	4662      	mov	r2, ip
   16f34:	4661      	mov	r1, ip
   16f36:	4660      	mov	r0, ip
   16f38:	f7f5 fef2 	bl	cd20 <add_mod_n>
   16f3c:	9500      	str	r5, [sp, #0]
   16f3e:	4623      	mov	r3, r4
   16f40:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
   16f44:	4662      	mov	r2, ip
   16f46:	4661      	mov	r1, ip
   16f48:	4660      	mov	r0, ip
   16f4a:	f7f5 fee9 	bl	cd20 <add_mod_n>
   16f4e:	9700      	str	r7, [sp, #0]
   16f50:	4623      	mov	r3, r4
   16f52:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   16f56:	4662      	mov	r2, ip
   16f58:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   16f5c:	4661      	mov	r1, ip
   16f5e:	a81e      	add	r0, sp, #120	; 0x78
   16f60:	f7f9 f9f8 	bl	10354 <mul_mont_384x>
   16f64:	f10a 0860 	add.w	r8, sl, #96	; 0x60
   16f68:	f10b 0960 	add.w	r9, fp, #96	; 0x60
   16f6c:	9500      	str	r5, [sp, #0]
   16f6e:	4623      	mov	r3, r4
   16f70:	464a      	mov	r2, r9
   16f72:	f50d 7cfc 	add.w	ip, sp, #504	; 0x1f8
   16f76:	4661      	mov	r1, ip
   16f78:	4640      	mov	r0, r8
   16f7a:	f7f5 fb7b 	bl	c674 <sub_mod_n>
   16f7e:	f8cd a010 	str.w	sl, [sp, #16]
   16f82:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
   16f86:	9500      	str	r5, [sp, #0]
   16f88:	4623      	mov	r3, r4
   16f8a:	f10b 0290 	add.w	r2, fp, #144	; 0x90
   16f8e:	a98a      	add	r1, sp, #552	; 0x228
   16f90:	4650      	mov	r0, sl
   16f92:	f7f5 fb6f 	bl	c674 <sub_mod_n>
   16f96:	9500      	str	r5, [sp, #0]
   16f98:	4623      	mov	r3, r4
   16f9a:	4642      	mov	r2, r8
   16f9c:	4641      	mov	r1, r8
   16f9e:	4640      	mov	r0, r8
   16fa0:	f7f5 febe 	bl	cd20 <add_mod_n>
   16fa4:	9500      	str	r5, [sp, #0]
   16fa6:	4623      	mov	r3, r4
   16fa8:	4652      	mov	r2, sl
   16faa:	4651      	mov	r1, sl
   16fac:	4650      	mov	r0, sl
   16fae:	f7f5 feb7 	bl	cd20 <add_mod_n>
   16fb2:	9700      	str	r7, [sp, #0]
   16fb4:	4623      	mov	r3, r4
   16fb6:	f10d 0cd8 	add.w	ip, sp, #216	; 0xd8
   16fba:	4662      	mov	r2, ip
   16fbc:	4659      	mov	r1, fp
   16fbe:	a806      	add	r0, sp, #24
   16fc0:	f7f9 f9c8 	bl	10354 <mul_mont_384x>
   16fc4:	463b      	mov	r3, r7
   16fc6:	4622      	mov	r2, r4
   16fc8:	4641      	mov	r1, r8
   16fca:	4630      	mov	r0, r6
   16fcc:	f7fc fc50 	bl	13870 <sqr_mont_384x>
   16fd0:	9500      	str	r5, [sp, #0]
   16fd2:	4623      	mov	r3, r4
   16fd4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   16fd8:	4662      	mov	r2, ip
   16fda:	4631      	mov	r1, r6
   16fdc:	4630      	mov	r0, r6
   16fde:	f7f5 fb49 	bl	c674 <sub_mod_n>
   16fe2:	f106 0a30 	add.w	sl, r6, #48	; 0x30
   16fe6:	9500      	str	r5, [sp, #0]
   16fe8:	4623      	mov	r3, r4
   16fea:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   16fee:	4662      	mov	r2, ip
   16ff0:	4651      	mov	r1, sl
   16ff2:	4650      	mov	r0, sl
   16ff4:	f7f5 fb3e 	bl	c674 <sub_mod_n>
   16ff8:	9500      	str	r5, [sp, #0]
   16ffa:	4623      	mov	r3, r4
   16ffc:	f10d 0c18 	add.w	ip, sp, #24
   17000:	4662      	mov	r2, ip
   17002:	4631      	mov	r1, r6
   17004:	4630      	mov	r0, r6
   17006:	f7f5 fb35 	bl	c674 <sub_mod_n>
   1700a:	9500      	str	r5, [sp, #0]
   1700c:	4623      	mov	r3, r4
   1700e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   17012:	4662      	mov	r2, ip
   17014:	4651      	mov	r1, sl
   17016:	4650      	mov	r0, sl
   17018:	f7f5 fb2c 	bl	c674 <sub_mod_n>
   1701c:	9500      	str	r5, [sp, #0]
   1701e:	4623      	mov	r3, r4
   17020:	f10d 0c18 	add.w	ip, sp, #24
   17024:	4662      	mov	r2, ip
   17026:	4631      	mov	r1, r6
   17028:	4630      	mov	r0, r6
   1702a:	f7f5 fb23 	bl	c674 <sub_mod_n>
   1702e:	9500      	str	r5, [sp, #0]
   17030:	4623      	mov	r3, r4
   17032:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   17036:	4662      	mov	r2, ip
   17038:	4651      	mov	r1, sl
   1703a:	4650      	mov	r0, sl
   1703c:	f7f5 fb1a 	bl	c674 <sub_mod_n>
   17040:	9700      	str	r7, [sp, #0]
   17042:	4623      	mov	r3, r4
   17044:	464a      	mov	r2, r9
   17046:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   1704a:	4661      	mov	r1, ip
   1704c:	4660      	mov	r0, ip
   1704e:	f7f9 f981 	bl	10354 <mul_mont_384x>
   17052:	f106 0960 	add.w	r9, r6, #96	; 0x60
   17056:	9500      	str	r5, [sp, #0]
   17058:	4623      	mov	r3, r4
   1705a:	4632      	mov	r2, r6
   1705c:	f10d 0c18 	add.w	ip, sp, #24
   17060:	4661      	mov	r1, ip
   17062:	4648      	mov	r0, r9
   17064:	f7f5 fb06 	bl	c674 <sub_mod_n>
   17068:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1706c:	9500      	str	r5, [sp, #0]
   1706e:	4623      	mov	r3, r4
   17070:	4652      	mov	r2, sl
   17072:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   17076:	4661      	mov	r1, ip
   17078:	4682      	mov	sl, r0
   1707a:	f7f5 fafb 	bl	c674 <sub_mod_n>
   1707e:	9700      	str	r7, [sp, #0]
   17080:	4623      	mov	r3, r4
   17082:	4642      	mov	r2, r8
   17084:	4649      	mov	r1, r9
   17086:	4648      	mov	r0, r9
   17088:	f7f9 f964 	bl	10354 <mul_mont_384x>
   1708c:	9500      	str	r5, [sp, #0]
   1708e:	4623      	mov	r3, r4
   17090:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   17094:	4662      	mov	r2, ip
   17096:	4649      	mov	r1, r9
   17098:	4648      	mov	r0, r9
   1709a:	f7f5 faeb 	bl	c674 <sub_mod_n>
   1709e:	9500      	str	r5, [sp, #0]
   170a0:	4623      	mov	r3, r4
   170a2:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   170a6:	4662      	mov	r2, ip
   170a8:	4651      	mov	r1, sl
   170aa:	4650      	mov	r0, sl
   170ac:	f7f5 fae2 	bl	c674 <sub_mod_n>
   170b0:	9500      	str	r5, [sp, #0]
   170b2:	4623      	mov	r3, r4
   170b4:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   170b8:	4662      	mov	r2, ip
   170ba:	4649      	mov	r1, r9
   170bc:	4648      	mov	r0, r9
   170be:	f7f5 fad9 	bl	c674 <sub_mod_n>
   170c2:	9500      	str	r5, [sp, #0]
   170c4:	4623      	mov	r3, r4
   170c6:	f10d 0ca8 	add.w	ip, sp, #168	; 0xa8
   170ca:	4662      	mov	r2, ip
   170cc:	4651      	mov	r1, sl
   170ce:	4650      	mov	r0, sl
   170d0:	f7f5 fad0 	bl	c674 <sub_mod_n>
   170d4:	f106 09c0 	add.w	r9, r6, #192	; 0xc0
   170d8:	9500      	str	r5, [sp, #0]
   170da:	4623      	mov	r3, r4
   170dc:	f50d 7ccc 	add.w	ip, sp, #408	; 0x198
   170e0:	4662      	mov	r2, ip
   170e2:	9902      	ldr	r1, [sp, #8]
   170e4:	4648      	mov	r0, r9
   170e6:	f7f5 fe1b 	bl	cd20 <add_mod_n>
   170ea:	f106 0af0 	add.w	sl, r6, #240	; 0xf0
   170ee:	9500      	str	r5, [sp, #0]
   170f0:	4623      	mov	r3, r4
   170f2:	aa72      	add	r2, sp, #456	; 0x1c8
   170f4:	f10b 01f0 	add.w	r1, fp, #240	; 0xf0
   170f8:	4650      	mov	r0, sl
   170fa:	f7f5 fe11 	bl	cd20 <add_mod_n>
   170fe:	463b      	mov	r3, r7
   17100:	4622      	mov	r2, r4
   17102:	4649      	mov	r1, r9
   17104:	4648      	mov	r0, r9
   17106:	f7fc fbb3 	bl	13870 <sqr_mont_384x>
   1710a:	9500      	str	r5, [sp, #0]
   1710c:	4623      	mov	r3, r4
   1710e:	aaae      	add	r2, sp, #696	; 0x2b8
   17110:	4649      	mov	r1, r9
   17112:	4648      	mov	r0, r9
   17114:	f7f5 faae 	bl	c674 <sub_mod_n>
   17118:	9500      	str	r5, [sp, #0]
   1711a:	4623      	mov	r3, r4
   1711c:	aaba      	add	r2, sp, #744	; 0x2e8
   1711e:	4651      	mov	r1, sl
   17120:	4650      	mov	r0, sl
   17122:	f7f5 faa7 	bl	c674 <sub_mod_n>
   17126:	9500      	str	r5, [sp, #0]
   17128:	4623      	mov	r3, r4
   1712a:	aa4e      	add	r2, sp, #312	; 0x138
   1712c:	4649      	mov	r1, r9
   1712e:	4648      	mov	r0, r9
   17130:	f7f5 faa0 	bl	c674 <sub_mod_n>
   17134:	9500      	str	r5, [sp, #0]
   17136:	4623      	mov	r3, r4
   17138:	aa5a      	add	r2, sp, #360	; 0x168
   1713a:	4651      	mov	r1, sl
   1713c:	4650      	mov	r0, sl
   1713e:	f7f5 fa99 	bl	c674 <sub_mod_n>
   17142:	9700      	str	r7, [sp, #0]
   17144:	4623      	mov	r3, r4
   17146:	9a05      	ldr	r2, [sp, #20]
   17148:	4641      	mov	r1, r8
   1714a:	a836      	add	r0, sp, #216	; 0xd8
   1714c:	f7f9 f902 	bl	10354 <mul_mont_384x>
   17150:	9700      	str	r7, [sp, #0]
   17152:	4623      	mov	r3, r4
   17154:	464a      	mov	r2, r9
   17156:	9903      	ldr	r1, [sp, #12]
   17158:	a81e      	add	r0, sp, #120	; 0x78
   1715a:	f7f9 f8fb 	bl	10354 <mul_mont_384x>
   1715e:	9500      	str	r5, [sp, #0]
   17160:	4623      	mov	r3, r4
   17162:	aa1e      	add	r2, sp, #120	; 0x78
   17164:	a936      	add	r1, sp, #216	; 0xd8
   17166:	4608      	mov	r0, r1
   17168:	f7f5 fa84 	bl	c674 <sub_mod_n>
   1716c:	9500      	str	r5, [sp, #0]
   1716e:	4623      	mov	r3, r4
   17170:	aa2a      	add	r2, sp, #168	; 0xa8
   17172:	a942      	add	r1, sp, #264	; 0x108
   17174:	4608      	mov	r0, r1
   17176:	f7f5 fa7d 	bl	c674 <sub_mod_n>
   1717a:	9500      	str	r5, [sp, #0]
   1717c:	4623      	mov	r3, r4
   1717e:	aa36      	add	r2, sp, #216	; 0xd8
   17180:	4611      	mov	r1, r2
   17182:	f8dd 8010 	ldr.w	r8, [sp, #16]
   17186:	4640      	mov	r0, r8
   17188:	f7f5 fdca 	bl	cd20 <add_mod_n>
   1718c:	9500      	str	r5, [sp, #0]
   1718e:	4623      	mov	r3, r4
   17190:	aa42      	add	r2, sp, #264	; 0x108
   17192:	4611      	mov	r1, r2
   17194:	f108 0030 	add.w	r0, r8, #48	; 0x30
   17198:	f7f5 fdc2 	bl	cd20 <add_mod_n>
   1719c:	f106 03bc 	add.w	r3, r6, #188	; 0xbc
   171a0:	f108 00bc 	add.w	r0, r8, #188	; 0xbc
   171a4:	f506 768e 	add.w	r6, r6, #284	; 0x11c
   171a8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   171ac:	f840 2f04 	str.w	r2, [r0, #4]!
   171b0:	429e      	cmp	r6, r3
   171b2:	d1f9      	bne.n	171a8 <line_add+0x334>
   171b4:	f50d 7d47 	add.w	sp, sp, #796	; 0x31c
   171b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171bc:	fffcfffd 	.word	0xfffcfffd
   171c0:	00024108 	.word	0x00024108

000171c4 <add_n_dbl_n>:
   171c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c8:	b0c9      	sub	sp, #292	; 0x124
   171ca:	4604      	mov	r4, r0
   171cc:	468b      	mov	fp, r1
   171ce:	469a      	mov	sl, r3
   171d0:	9d52      	ldr	r5, [sp, #328]	; 0x148
   171d2:	b1e5      	cbz	r5, 1720e <add_n_dbl_n+0x4a>
   171d4:	460e      	mov	r6, r1
   171d6:	4617      	mov	r7, r2
   171d8:	4699      	mov	r9, r3
   171da:	f04f 0800 	mov.w	r8, #0
   171de:	463b      	mov	r3, r7
   171e0:	4632      	mov	r2, r6
   171e2:	4631      	mov	r1, r6
   171e4:	4668      	mov	r0, sp
   171e6:	f7ff fe45 	bl	16e74 <line_add>
   171ea:	4649      	mov	r1, r9
   171ec:	4668      	mov	r0, sp
   171ee:	f7f5 fd11 	bl	cc14 <line_by_Px2>
   171f2:	466a      	mov	r2, sp
   171f4:	4621      	mov	r1, r4
   171f6:	4620      	mov	r0, r4
   171f8:	f7f9 fde4 	bl	10dc4 <mul_by_xy00z0_fp12>
   171fc:	f108 0801 	add.w	r8, r8, #1
   17200:	f506 7690 	add.w	r6, r6, #288	; 0x120
   17204:	37c0      	adds	r7, #192	; 0xc0
   17206:	f109 0960 	add.w	r9, r9, #96	; 0x60
   1720a:	4545      	cmp	r5, r8
   1720c:	d1e7      	bne.n	171de <add_n_dbl_n+0x1a>
   1720e:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   17210:	f103 38ff 	add.w	r8, r3, #4294967295
   17214:	b30b      	cbz	r3, 1725a <add_n_dbl_n+0x96>
   17216:	4621      	mov	r1, r4
   17218:	4620      	mov	r0, r4
   1721a:	f7f9 fc31 	bl	10a80 <sqr_fp12>
   1721e:	b1bd      	cbz	r5, 17250 <add_n_dbl_n+0x8c>
   17220:	465e      	mov	r6, fp
   17222:	46d1      	mov	r9, sl
   17224:	2700      	movs	r7, #0
   17226:	4632      	mov	r2, r6
   17228:	4631      	mov	r1, r6
   1722a:	4668      	mov	r0, sp
   1722c:	f7ff fc5e 	bl	16aec <line_dbl>
   17230:	4649      	mov	r1, r9
   17232:	4668      	mov	r0, sp
   17234:	f7f5 fcee 	bl	cc14 <line_by_Px2>
   17238:	466a      	mov	r2, sp
   1723a:	4621      	mov	r1, r4
   1723c:	4620      	mov	r0, r4
   1723e:	f7f9 fdc1 	bl	10dc4 <mul_by_xy00z0_fp12>
   17242:	3701      	adds	r7, #1
   17244:	f506 7690 	add.w	r6, r6, #288	; 0x120
   17248:	f109 0960 	add.w	r9, r9, #96	; 0x60
   1724c:	42bd      	cmp	r5, r7
   1724e:	d1ea      	bne.n	17226 <add_n_dbl_n+0x62>
   17250:	f108 38ff 	add.w	r8, r8, #4294967295
   17254:	f1b8 3fff 	cmp.w	r8, #4294967295
   17258:	d1dd      	bne.n	17216 <add_n_dbl_n+0x52>
   1725a:	b049      	add	sp, #292	; 0x124
   1725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017260 <miller_loop_n>:
   17260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17264:	b089      	sub	sp, #36	; 0x24
   17266:	af02      	add	r7, sp, #8
   17268:	6038      	str	r0, [r7, #0]
   1726a:	6139      	str	r1, [r7, #16]
   1726c:	4690      	mov	r8, r2
   1726e:	461a      	mov	r2, r3
   17270:	617b      	str	r3, [r7, #20]
   17272:	f8c7 d004 	str.w	sp, [r7, #4]
   17276:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1727a:	4669      	mov	r1, sp
   1727c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   17280:	469d      	mov	sp, r3
   17282:	ab02      	add	r3, sp, #8
   17284:	60fb      	str	r3, [r7, #12]
   17286:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1728a:	4669      	mov	r1, sp
   1728c:	eba1 1343 	sub.w	r3, r1, r3, lsl #5
   17290:	469d      	mov	sp, r3
   17292:	ab02      	add	r3, sp, #8
   17294:	60bb      	str	r3, [r7, #8]
   17296:	2a01      	cmp	r2, #1
   17298:	f000 808b 	beq.w	173b2 <miller_loop_n+0x152>
   1729c:	697b      	ldr	r3, [r7, #20]
   1729e:	2b00      	cmp	r3, #0
   172a0:	d044      	beq.n	1732c <miller_loop_n+0xcc>
   172a2:	68be      	ldr	r6, [r7, #8]
   172a4:	68fb      	ldr	r3, [r7, #12]
   172a6:	f103 0abc 	add.w	sl, r3, #188	; 0xbc
   172aa:	693b      	ldr	r3, [r7, #16]
   172ac:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
   172b0:	f04f 0b00 	mov.w	fp, #0
   172b4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 17410 <miller_loop_n+0x1b0>
   172b8:	f109 05ec 	add.w	r5, r9, #236	; 0xec
   172bc:	230c      	movs	r3, #12
   172be:	9300      	str	r3, [sp, #0]
   172c0:	464b      	mov	r3, r9
   172c2:	4642      	mov	r2, r8
   172c4:	4641      	mov	r1, r8
   172c6:	4630      	mov	r0, r6
   172c8:	f7f5 fd2a 	bl	cd20 <add_mod_n>
   172cc:	230c      	movs	r3, #12
   172ce:	9300      	str	r3, [sp, #0]
   172d0:	464b      	mov	r3, r9
   172d2:	2201      	movs	r2, #1
   172d4:	4631      	mov	r1, r6
   172d6:	4630      	mov	r0, r6
   172d8:	f7f6 fbb6 	bl	da48 <cneg_mod_n>
   172dc:	f108 0130 	add.w	r1, r8, #48	; 0x30
   172e0:	230c      	movs	r3, #12
   172e2:	9300      	str	r3, [sp, #0]
   172e4:	464b      	mov	r3, r9
   172e6:	460a      	mov	r2, r1
   172e8:	f106 0030 	add.w	r0, r6, #48	; 0x30
   172ec:	f7f5 fd18 	bl	cd20 <add_mod_n>
   172f0:	f1a4 03c0 	sub.w	r3, r4, #192	; 0xc0
   172f4:	f1aa 02c0 	sub.w	r2, sl, #192	; 0xc0
   172f8:	f853 1f04 	ldr.w	r1, [r3, #4]!
   172fc:	f842 1f04 	str.w	r1, [r2, #4]!
   17300:	42a3      	cmp	r3, r4
   17302:	d1f9      	bne.n	172f8 <miller_loop_n+0x98>
   17304:	f109 038c 	add.w	r3, r9, #140	; 0x8c
   17308:	4652      	mov	r2, sl
   1730a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1730e:	f842 1f04 	str.w	r1, [r2, #4]!
   17312:	42ab      	cmp	r3, r5
   17314:	d1f9      	bne.n	1730a <miller_loop_n+0xaa>
   17316:	f10b 0b01 	add.w	fp, fp, #1
   1731a:	3660      	adds	r6, #96	; 0x60
   1731c:	f108 0860 	add.w	r8, r8, #96	; 0x60
   17320:	f50a 7a90 	add.w	sl, sl, #288	; 0x120
   17324:	34c0      	adds	r4, #192	; 0xc0
   17326:	697b      	ldr	r3, [r7, #20]
   17328:	455b      	cmp	r3, fp
   1732a:	d8c7      	bhi.n	172bc <miller_loop_n+0x5c>
   1732c:	697d      	ldr	r5, [r7, #20]
   1732e:	462b      	mov	r3, r5
   17330:	f8d7 8008 	ldr.w	r8, [r7, #8]
   17334:	4642      	mov	r2, r8
   17336:	68fe      	ldr	r6, [r7, #12]
   17338:	4631      	mov	r1, r6
   1733a:	683c      	ldr	r4, [r7, #0]
   1733c:	4620      	mov	r0, r4
   1733e:	f7ff fd4f 	bl	16de0 <start_dbl_n>
   17342:	2302      	movs	r3, #2
   17344:	9301      	str	r3, [sp, #4]
   17346:	9500      	str	r5, [sp, #0]
   17348:	4643      	mov	r3, r8
   1734a:	f8d7 9010 	ldr.w	r9, [r7, #16]
   1734e:	464a      	mov	r2, r9
   17350:	4631      	mov	r1, r6
   17352:	4620      	mov	r0, r4
   17354:	f7ff ff36 	bl	171c4 <add_n_dbl_n>
   17358:	2303      	movs	r3, #3
   1735a:	9301      	str	r3, [sp, #4]
   1735c:	9500      	str	r5, [sp, #0]
   1735e:	4643      	mov	r3, r8
   17360:	464a      	mov	r2, r9
   17362:	4631      	mov	r1, r6
   17364:	4620      	mov	r0, r4
   17366:	f7ff ff2d 	bl	171c4 <add_n_dbl_n>
   1736a:	2309      	movs	r3, #9
   1736c:	9301      	str	r3, [sp, #4]
   1736e:	9500      	str	r5, [sp, #0]
   17370:	4643      	mov	r3, r8
   17372:	464a      	mov	r2, r9
   17374:	4631      	mov	r1, r6
   17376:	4620      	mov	r0, r4
   17378:	f7ff ff24 	bl	171c4 <add_n_dbl_n>
   1737c:	2320      	movs	r3, #32
   1737e:	9301      	str	r3, [sp, #4]
   17380:	9500      	str	r5, [sp, #0]
   17382:	4643      	mov	r3, r8
   17384:	464a      	mov	r2, r9
   17386:	4631      	mov	r1, r6
   17388:	4620      	mov	r0, r4
   1738a:	f7ff ff1b 	bl	171c4 <add_n_dbl_n>
   1738e:	2310      	movs	r3, #16
   17390:	9301      	str	r3, [sp, #4]
   17392:	9500      	str	r5, [sp, #0]
   17394:	4643      	mov	r3, r8
   17396:	464a      	mov	r2, r9
   17398:	4631      	mov	r1, r6
   1739a:	4620      	mov	r0, r4
   1739c:	f7ff ff12 	bl	171c4 <add_n_dbl_n>
   173a0:	4620      	mov	r0, r4
   173a2:	f7f6 fcd1 	bl	dd48 <conjugate_fp12>
   173a6:	f8d7 d004 	ldr.w	sp, [r7, #4]
   173aa:	371c      	adds	r7, #28
   173ac:	46bd      	mov	sp, r7
   173ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b2:	693a      	ldr	r2, [r7, #16]
   173b4:	1f13      	subs	r3, r2, #4
   173b6:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   173ba:	2100      	movs	r1, #0
   173bc:	f853 2f04 	ldr.w	r2, [r3, #4]!
   173c0:	4311      	orrs	r1, r2
   173c2:	4283      	cmp	r3, r0
   173c4:	d1fa      	bne.n	173bc <miller_loop_n+0x15c>
   173c6:	1e4c      	subs	r4, r1, #1
   173c8:	ea24 0101 	bic.w	r1, r4, r1
   173cc:	0fcc      	lsrs	r4, r1, #31
   173ce:	f1a8 0304 	sub.w	r3, r8, #4
   173d2:	f108 005c 	add.w	r0, r8, #92	; 0x5c
   173d6:	2100      	movs	r1, #0
   173d8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   173dc:	4311      	orrs	r1, r2
   173de:	4283      	cmp	r3, r0
   173e0:	d1fa      	bne.n	173d8 <miller_loop_n+0x178>
   173e2:	1e4b      	subs	r3, r1, #1
   173e4:	ea23 0101 	bic.w	r1, r3, r1
   173e8:	ea54 73d1 	orrs.w	r3, r4, r1, lsr #31
   173ec:	f43f af59 	beq.w	172a2 <miller_loop_n+0x42>
   173f0:	4807      	ldr	r0, [pc, #28]	; (17410 <miller_loop_n+0x1b0>)
   173f2:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   173f6:	683a      	ldr	r2, [r7, #0]
   173f8:	3a04      	subs	r2, #4
   173fa:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   173fe:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17402:	f842 1f04 	str.w	r1, [r2, #4]!
   17406:	4283      	cmp	r3, r0
   17408:	d1f9      	bne.n	173fe <miller_loop_n+0x19e>
   1740a:	f8d7 d004 	ldr.w	sp, [r7, #4]
   1740e:	e7cc      	b.n	173aa <miller_loop_n+0x14a>
   17410:	00024108 	.word	0x00024108

00017414 <blst_miller_loop>:
   17414:	b508      	push	{r3, lr}
   17416:	2301      	movs	r3, #1
   17418:	f7ff ff22 	bl	17260 <miller_loop_n>
   1741c:	bd08      	pop	{r3, pc}

0001741e <PAIRING_Aggregate_PK_in_G2>:
   1741e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17422:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
   17426:	4698      	mov	r8, r3
   17428:	6803      	ldr	r3, [r0, #0]
   1742a:	f013 0602 	ands.w	r6, r3, #2
   1742e:	f040 8148 	bne.w	176c2 <PAIRING_Aggregate_PK_in_G2+0x2a4>
   17432:	4607      	mov	r7, r0
   17434:	460d      	mov	r5, r1
   17436:	4691      	mov	r9, r2
   17438:	f043 0301 	orr.w	r3, r3, #1
   1743c:	6003      	str	r3, [r0, #0]
   1743e:	f1b8 0f00 	cmp.w	r8, #0
   17442:	d072      	beq.n	1752a <PAIRING_Aggregate_PK_in_G2+0x10c>
   17444:	f1a8 0304 	sub.w	r3, r8, #4
   17448:	f108 045c 	add.w	r4, r8, #92	; 0x5c
   1744c:	461a      	mov	r2, r3
   1744e:	4631      	mov	r1, r6
   17450:	f852 0f04 	ldr.w	r0, [r2, #4]!
   17454:	4301      	orrs	r1, r0
   17456:	42a2      	cmp	r2, r4
   17458:	d1fa      	bne.n	17450 <PAIRING_Aggregate_PK_in_G2+0x32>
   1745a:	1e48      	subs	r0, r1, #1
   1745c:	ea20 0101 	bic.w	r1, r0, r1
   17460:	0fc9      	lsrs	r1, r1, #31
   17462:	d162      	bne.n	1752a <PAIRING_Aggregate_PK_in_G2+0x10c>
   17464:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   17468:	f50d 7e80 	add.w	lr, sp, #256	; 0x100
   1746c:	aa28      	add	r2, sp, #160	; 0xa0
   1746e:	4618      	mov	r0, r3
   17470:	f850 cf04 	ldr.w	ip, [r0, #4]!
   17474:	f842 cb04 	str.w	ip, [r2], #4
   17478:	4572      	cmp	r2, lr
   1747a:	d1f9      	bne.n	17470 <PAIRING_Aggregate_PK_in_G2+0x52>
   1747c:	461a      	mov	r2, r3
   1747e:	f852 0f04 	ldr.w	r0, [r2, #4]!
   17482:	4301      	orrs	r1, r0
   17484:	42a2      	cmp	r2, r4
   17486:	d1fa      	bne.n	1747e <PAIRING_Aggregate_PK_in_G2+0x60>
   17488:	1e48      	subs	r0, r1, #1
   1748a:	ea20 0101 	bic.w	r1, r0, r1
   1748e:	17c8      	asrs	r0, r1, #31
   17490:	498e      	ldr	r1, [pc, #568]	; (176cc <PAIRING_Aggregate_PK_in_G2+0x2ae>)
   17492:	aa3f      	add	r2, sp, #252	; 0xfc
   17494:	f108 0c2c 	add.w	ip, r8, #44	; 0x2c
   17498:	f851 eb04 	ldr.w	lr, [r1], #4
   1749c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   174a0:	ea8e 0404 	eor.w	r4, lr, r4
   174a4:	4004      	ands	r4, r0
   174a6:	ea84 040e 	eor.w	r4, r4, lr
   174aa:	f842 4f04 	str.w	r4, [r2, #4]!
   174ae:	4563      	cmp	r3, ip
   174b0:	d1f2      	bne.n	17498 <PAIRING_Aggregate_PK_in_G2+0x7a>
   174b2:	9bc0      	ldr	r3, [sp, #768]	; 0x300
   174b4:	b9a3      	cbnz	r3, 174e0 <PAIRING_Aggregate_PK_in_G2+0xc2>
   174b6:	683b      	ldr	r3, [r7, #0]
   174b8:	f013 0f10 	tst.w	r3, #16
   174bc:	d01d      	beq.n	174fa <PAIRING_Aggregate_PK_in_G2+0xdc>
   174be:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   174c0:	b1ab      	cbz	r3, 174ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   174c2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   174c4:	b19b      	cbz	r3, 174ee <PAIRING_Aggregate_PK_in_G2+0xd0>
   174c6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   174c8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   174ca:	a928      	add	r1, sp, #160	; 0xa0
   174cc:	4608      	mov	r0, r1
   174ce:	f7f8 f804 	bl	f4da <POINTonE1_mult_w5>
   174d2:	2300      	movs	r3, #0
   174d4:	aa28      	add	r2, sp, #160	; 0xa0
   174d6:	4651      	mov	r1, sl
   174d8:	4650      	mov	r0, sl
   174da:	f7f7 fd1f 	bl	ef1c <POINTonE1_dadd>
   174de:	e024      	b.n	1752a <PAIRING_Aggregate_PK_in_G2+0x10c>
   174e0:	a828      	add	r0, sp, #160	; 0xa0
   174e2:	f7f8 f8a3 	bl	f62c <POINTonE1_in_G1>
   174e6:	2800      	cmp	r0, #0
   174e8:	d1e5      	bne.n	174b6 <PAIRING_Aggregate_PK_in_G2+0x98>
   174ea:	2003      	movs	r0, #3
   174ec:	e0b1      	b.n	17652 <PAIRING_Aggregate_PK_in_G2+0x234>
   174ee:	4642      	mov	r2, r8
   174f0:	4651      	mov	r1, sl
   174f2:	4650      	mov	r0, sl
   174f4:	f7f7 fba0 	bl	ec38 <POINTonE1_dadd_affine>
   174f8:	e017      	b.n	1752a <PAIRING_Aggregate_PK_in_G2+0x10c>
   174fa:	f043 0310 	orr.w	r3, r3, #16
   174fe:	603b      	str	r3, [r7, #0]
   17500:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   17502:	b143      	cbz	r3, 17516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   17504:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   17506:	b133      	cbz	r3, 17516 <PAIRING_Aggregate_PK_in_G2+0xf8>
   17508:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   1750a:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   1750c:	a928      	add	r1, sp, #160	; 0xa0
   1750e:	4650      	mov	r0, sl
   17510:	f7f7 ffe3 	bl	f4da <POINTonE1_mult_w5>
   17514:	e009      	b.n	1752a <PAIRING_Aggregate_PK_in_G2+0x10c>
   17516:	ab27      	add	r3, sp, #156	; 0x9c
   17518:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   1751c:	a84b      	add	r0, sp, #300	; 0x12c
   1751e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17522:	f842 1f04 	str.w	r1, [r2, #4]!
   17526:	4283      	cmp	r3, r0
   17528:	d1f9      	bne.n	1751e <PAIRING_Aggregate_PK_in_G2+0x100>
   1752a:	2d00      	cmp	r5, #0
   1752c:	f000 80cb 	beq.w	176c6 <PAIRING_Aggregate_PK_in_G2+0x2a8>
   17530:	f8d7 8008 	ldr.w	r8, [r7, #8]
   17534:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   17538:	bf08      	it	eq
   1753a:	f507 6847 	addeq.w	r8, r7, #3184	; 0xc70
   1753e:	1f2c      	subs	r4, r5, #4
   17540:	35bc      	adds	r5, #188	; 0xbc
   17542:	4623      	mov	r3, r4
   17544:	f853 2f04 	ldr.w	r2, [r3, #4]!
   17548:	4316      	orrs	r6, r2
   1754a:	42ab      	cmp	r3, r5
   1754c:	d1fa      	bne.n	17544 <PAIRING_Aggregate_PK_in_G2+0x126>
   1754e:	1e73      	subs	r3, r6, #1
   17550:	ea23 0606 	bic.w	r6, r3, r6
   17554:	0ff6      	lsrs	r6, r6, #31
   17556:	f040 80b2 	bne.w	176be <PAIRING_Aggregate_PK_in_G2+0x2a0>
   1755a:	f1b9 0f00 	cmp.w	r9, #0
   1755e:	d02f      	beq.n	175c0 <PAIRING_Aggregate_PK_in_G2+0x1a2>
   17560:	ab28      	add	r3, sp, #160	; 0xa0
   17562:	a858      	add	r0, sp, #352	; 0x160
   17564:	4622      	mov	r2, r4
   17566:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1756a:	f843 1b04 	str.w	r1, [r3], #4
   1756e:	4283      	cmp	r3, r0
   17570:	d1f9      	bne.n	17566 <PAIRING_Aggregate_PK_in_G2+0x148>
   17572:	4623      	mov	r3, r4
   17574:	4632      	mov	r2, r6
   17576:	f853 1f04 	ldr.w	r1, [r3, #4]!
   1757a:	430a      	orrs	r2, r1
   1757c:	42ab      	cmp	r3, r5
   1757e:	d1fa      	bne.n	17576 <PAIRING_Aggregate_PK_in_G2+0x158>
   17580:	f102 3cff 	add.w	ip, r2, #4294967295
   17584:	ea2c 0c02 	bic.w	ip, ip, r2
   17588:	ea4f 7cec 	mov.w	ip, ip, asr #31
   1758c:	4b50      	ldr	r3, [pc, #320]	; (176d0 <PAIRING_Aggregate_PK_in_G2+0x2b2>)
   1758e:	f103 0290 	add.w	r2, r3, #144	; 0x90
   17592:	a857      	add	r0, sp, #348	; 0x15c
   17594:	f103 0ef0 	add.w	lr, r3, #240	; 0xf0
   17598:	4621      	mov	r1, r4
   1759a:	f852 9b04 	ldr.w	r9, [r2], #4
   1759e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   175a2:	ea89 0303 	eor.w	r3, r9, r3
   175a6:	ea03 030c 	and.w	r3, r3, ip
   175aa:	ea83 0309 	eor.w	r3, r3, r9
   175ae:	f840 3f04 	str.w	r3, [r0, #4]!
   175b2:	4572      	cmp	r2, lr
   175b4:	d1f1      	bne.n	1759a <PAIRING_Aggregate_PK_in_G2+0x17c>
   175b6:	a828      	add	r0, sp, #160	; 0xa0
   175b8:	f7fd ff0a 	bl	153d0 <POINTonE2_in_G2>
   175bc:	2800      	cmp	r0, #0
   175be:	d04c      	beq.n	1765a <PAIRING_Aggregate_PK_in_G2+0x23c>
   175c0:	683b      	ldr	r3, [r7, #0]
   175c2:	f013 0f40 	tst.w	r3, #64	; 0x40
   175c6:	d04a      	beq.n	1765e <PAIRING_Aggregate_PK_in_G2+0x240>
   175c8:	68fb      	ldr	r3, [r7, #12]
   175ca:	9303      	str	r3, [sp, #12]
   175cc:	f8cd 8008 	str.w	r8, [sp, #8]
   175d0:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   175d2:	9301      	str	r3, [sp, #4]
   175d4:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   175d6:	9300      	str	r3, [sp, #0]
   175d8:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   175da:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   175dc:	2102      	movs	r1, #2
   175de:	a828      	add	r0, sp, #160	; 0xa0
   175e0:	f7fb fd0d 	bl	12ffe <hash_to_field>
   175e4:	aa34      	add	r2, sp, #208	; 0xd0
   175e6:	a928      	add	r1, sp, #160	; 0xa0
   175e8:	a804      	add	r0, sp, #16
   175ea:	f7fb f85b 	bl	126a4 <map_to_g1>
   175ee:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   175f0:	b13b      	cbz	r3, 17602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   175f2:	9bc1      	ldr	r3, [sp, #772]	; 0x304
   175f4:	b12b      	cbz	r3, 17602 <PAIRING_Aggregate_PK_in_G2+0x1e4>
   175f6:	9bc2      	ldr	r3, [sp, #776]	; 0x308
   175f8:	9ac1      	ldr	r2, [sp, #772]	; 0x304
   175fa:	a904      	add	r1, sp, #16
   175fc:	4608      	mov	r0, r1
   175fe:	f7f7 ff6c 	bl	f4da <POINTonE1_mult_w5>
   17602:	a904      	add	r1, sp, #16
   17604:	4608      	mov	r0, r1
   17606:	f7fa f8c1 	bl	1178c <POINTonE1_from_Jacobian>
   1760a:	687a      	ldr	r2, [r7, #4]
   1760c:	f507 715c 	add.w	r1, r7, #880	; 0x370
   17610:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   17614:	eb07 1383 	add.w	r3, r7, r3, lsl #6
   17618:	f503 735b 	add.w	r3, r3, #876	; 0x36c
   1761c:	f854 0f04 	ldr.w	r0, [r4, #4]!
   17620:	f843 0f04 	str.w	r0, [r3, #4]!
   17624:	42ac      	cmp	r4, r5
   17626:	d1f9      	bne.n	1761c <PAIRING_Aggregate_PK_in_G2+0x1fe>
   17628:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   1762c:	ab03      	add	r3, sp, #12
   1762e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   17632:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   17636:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   1763a:	ad1b      	add	r5, sp, #108	; 0x6c
   1763c:	f853 4f04 	ldr.w	r4, [r3, #4]!
   17640:	f840 4f04 	str.w	r4, [r0, #4]!
   17644:	429d      	cmp	r5, r3
   17646:	d1f9      	bne.n	1763c <PAIRING_Aggregate_PK_in_G2+0x21e>
   17648:	1c54      	adds	r4, r2, #1
   1764a:	2a07      	cmp	r2, #7
   1764c:	d01b      	beq.n	17686 <PAIRING_Aggregate_PK_in_G2+0x268>
   1764e:	607c      	str	r4, [r7, #4]
   17650:	2000      	movs	r0, #0
   17652:	f50d 7d38 	add.w	sp, sp, #736	; 0x2e0
   17656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1765a:	2003      	movs	r0, #3
   1765c:	e7f9      	b.n	17652 <PAIRING_Aggregate_PK_in_G2+0x234>
   1765e:	68fb      	ldr	r3, [r7, #12]
   17660:	9303      	str	r3, [sp, #12]
   17662:	f8cd 8008 	str.w	r8, [sp, #8]
   17666:	9bc4      	ldr	r3, [sp, #784]	; 0x310
   17668:	9301      	str	r3, [sp, #4]
   1766a:	9bc3      	ldr	r3, [sp, #780]	; 0x30c
   1766c:	9300      	str	r3, [sp, #0]
   1766e:	9bc6      	ldr	r3, [sp, #792]	; 0x318
   17670:	9ac5      	ldr	r2, [sp, #788]	; 0x314
   17672:	2101      	movs	r1, #1
   17674:	a828      	add	r0, sp, #160	; 0xa0
   17676:	f7fb fcc2 	bl	12ffe <hash_to_field>
   1767a:	2200      	movs	r2, #0
   1767c:	a928      	add	r1, sp, #160	; 0xa0
   1767e:	a804      	add	r0, sp, #16
   17680:	f7fb f810 	bl	126a4 <map_to_g1>
   17684:	e7b3      	b.n	175ee <PAIRING_Aggregate_PK_in_G2+0x1d0>
   17686:	683c      	ldr	r4, [r7, #0]
   17688:	f014 0420 	ands.w	r4, r4, #32
   1768c:	d00c      	beq.n	176a8 <PAIRING_Aggregate_PK_in_G2+0x28a>
   1768e:	2308      	movs	r3, #8
   17690:	4662      	mov	r2, ip
   17692:	a828      	add	r0, sp, #160	; 0xa0
   17694:	f7ff fde4 	bl	17260 <miller_loop_n>
   17698:	f107 0010 	add.w	r0, r7, #16
   1769c:	aa28      	add	r2, sp, #160	; 0xa0
   1769e:	4601      	mov	r1, r0
   176a0:	f7f9 f96c 	bl	1097c <mul_fp12>
   176a4:	4634      	mov	r4, r6
   176a6:	e7d2      	b.n	1764e <PAIRING_Aggregate_PK_in_G2+0x230>
   176a8:	2308      	movs	r3, #8
   176aa:	4662      	mov	r2, ip
   176ac:	f107 0010 	add.w	r0, r7, #16
   176b0:	f7ff fdd6 	bl	17260 <miller_loop_n>
   176b4:	683b      	ldr	r3, [r7, #0]
   176b6:	f043 0320 	orr.w	r3, r3, #32
   176ba:	603b      	str	r3, [r7, #0]
   176bc:	e7c7      	b.n	1764e <PAIRING_Aggregate_PK_in_G2+0x230>
   176be:	2006      	movs	r0, #6
   176c0:	e7c7      	b.n	17652 <PAIRING_Aggregate_PK_in_G2+0x234>
   176c2:	2004      	movs	r0, #4
   176c4:	e7c5      	b.n	17652 <PAIRING_Aggregate_PK_in_G2+0x234>
   176c6:	2000      	movs	r0, #0
   176c8:	e7c3      	b.n	17652 <PAIRING_Aggregate_PK_in_G2+0x234>
   176ca:	bf00      	nop
   176cc:	00024198 	.word	0x00024198
   176d0:	00024108 	.word	0x00024108

000176d4 <blst_pairing_aggregate_pk_in_g2>:
   176d4:	b500      	push	{lr}
   176d6:	b089      	sub	sp, #36	; 0x24
   176d8:	4694      	mov	ip, r2
   176da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   176dc:	9206      	str	r2, [sp, #24]
   176de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176e0:	9205      	str	r2, [sp, #20]
   176e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   176e4:	9204      	str	r2, [sp, #16]
   176e6:	9303      	str	r3, [sp, #12]
   176e8:	2200      	movs	r2, #0
   176ea:	9202      	str	r2, [sp, #8]
   176ec:	9201      	str	r2, [sp, #4]
   176ee:	2301      	movs	r3, #1
   176f0:	9300      	str	r3, [sp, #0]
   176f2:	4663      	mov	r3, ip
   176f4:	f7ff fe93 	bl	1741e <PAIRING_Aggregate_PK_in_G2>
   176f8:	b009      	add	sp, #36	; 0x24
   176fa:	f85d fb04 	ldr.w	pc, [sp], #4

000176fe <blst_pairing_mul_n_aggregate_pk_in_g2>:
   176fe:	b500      	push	{lr}
   17700:	b089      	sub	sp, #36	; 0x24
   17702:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   17706:	f8cd c018 	str.w	ip, [sp, #24]
   1770a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1770e:	f8cd c014 	str.w	ip, [sp, #20]
   17712:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   17716:	f8cd c010 	str.w	ip, [sp, #16]
   1771a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1771e:	f8cd c00c 	str.w	ip, [sp, #12]
   17722:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   17726:	f8cd c008 	str.w	ip, [sp, #8]
   1772a:	9301      	str	r3, [sp, #4]
   1772c:	2301      	movs	r3, #1
   1772e:	9300      	str	r3, [sp, #0]
   17730:	4613      	mov	r3, r2
   17732:	2200      	movs	r2, #0
   17734:	f7ff fe73 	bl	1741e <PAIRING_Aggregate_PK_in_G2>
   17738:	b009      	add	sp, #36	; 0x24
   1773a:	f85d fb04 	ldr.w	pc, [sp], #4

0001773e <blst_pairing_chk_n_aggr_pk_in_g2>:
   1773e:	b510      	push	{r4, lr}
   17740:	b088      	sub	sp, #32
   17742:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   17744:	9406      	str	r4, [sp, #24]
   17746:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   17748:	9405      	str	r4, [sp, #20]
   1774a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1774c:	9404      	str	r4, [sp, #16]
   1774e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   17750:	9403      	str	r4, [sp, #12]
   17752:	2400      	movs	r4, #0
   17754:	9402      	str	r4, [sp, #8]
   17756:	9401      	str	r4, [sp, #4]
   17758:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1775a:	9400      	str	r4, [sp, #0]
   1775c:	f7ff fe5f 	bl	1741e <PAIRING_Aggregate_PK_in_G2>
   17760:	b008      	add	sp, #32
   17762:	bd10      	pop	{r4, pc}

00017764 <blst_pairing_chk_n_mul_n_aggr_pk_in_g2>:
   17764:	b500      	push	{lr}
   17766:	b089      	sub	sp, #36	; 0x24
   17768:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1776c:	f8cd c018 	str.w	ip, [sp, #24]
   17770:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   17774:	f8cd c014 	str.w	ip, [sp, #20]
   17778:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1777c:	f8cd c010 	str.w	ip, [sp, #16]
   17780:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   17784:	f8cd c00c 	str.w	ip, [sp, #12]
   17788:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   1778c:	f8cd c008 	str.w	ip, [sp, #8]
   17790:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   17794:	f8cd c004 	str.w	ip, [sp, #4]
   17798:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1779c:	f8cd c000 	str.w	ip, [sp]
   177a0:	f7ff fe3d 	bl	1741e <PAIRING_Aggregate_PK_in_G2>
   177a4:	b009      	add	sp, #36	; 0x24
   177a6:	f85d fb04 	ldr.w	pc, [sp], #4

000177aa <PAIRING_Commit>:
   177aa:	6843      	ldr	r3, [r0, #4]
   177ac:	b32b      	cbz	r3, 177fa <PAIRING_Commit+0x50>
   177ae:	b510      	push	{r4, lr}
   177b0:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
   177b4:	4604      	mov	r4, r0
   177b6:	6802      	ldr	r2, [r0, #0]
   177b8:	f012 0f20 	tst.w	r2, #32
   177bc:	d011      	beq.n	177e2 <PAIRING_Commit+0x38>
   177be:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   177c2:	f500 715c 	add.w	r1, r0, #880	; 0x370
   177c6:	4668      	mov	r0, sp
   177c8:	f7ff fd4a 	bl	17260 <miller_loop_n>
   177cc:	f104 0010 	add.w	r0, r4, #16
   177d0:	466a      	mov	r2, sp
   177d2:	4601      	mov	r1, r0
   177d4:	f7f9 f8d2 	bl	1097c <mul_fp12>
   177d8:	2300      	movs	r3, #0
   177da:	6063      	str	r3, [r4, #4]
   177dc:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   177e0:	bd10      	pop	{r4, pc}
   177e2:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   177e6:	f500 715c 	add.w	r1, r0, #880	; 0x370
   177ea:	3010      	adds	r0, #16
   177ec:	f7ff fd38 	bl	17260 <miller_loop_n>
   177f0:	6823      	ldr	r3, [r4, #0]
   177f2:	f043 0320 	orr.w	r3, r3, #32
   177f6:	6023      	str	r3, [r4, #0]
   177f8:	e7ee      	b.n	177d8 <PAIRING_Commit+0x2e>
   177fa:	4770      	bx	lr

000177fc <blst_pairing_commit>:
   177fc:	b508      	push	{r3, lr}
   177fe:	f7ff ffd4 	bl	177aa <PAIRING_Commit>
   17802:	bd08      	pop	{r3, pc}

00017804 <PAIRING_FinalVerify>:
   17804:	b530      	push	{r4, r5, lr}
   17806:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
   1780a:	4605      	mov	r5, r0
   1780c:	6803      	ldr	r3, [r0, #0]
   1780e:	f013 0020 	ands.w	r0, r3, #32
   17812:	d03a      	beq.n	1788a <PAIRING_FinalVerify+0x86>
   17814:	2900      	cmp	r1, #0
   17816:	d03b      	beq.n	17890 <PAIRING_FinalVerify+0x8c>
   17818:	3904      	subs	r1, #4
   1781a:	ab48      	add	r3, sp, #288	; 0x120
   1781c:	a8d8      	add	r0, sp, #864	; 0x360
   1781e:	f851 2f04 	ldr.w	r2, [r1, #4]!
   17822:	f843 2b04 	str.w	r2, [r3], #4
   17826:	4283      	cmp	r3, r0
   17828:	d1f9      	bne.n	1781e <PAIRING_FinalVerify+0x1a>
   1782a:	ac48      	add	r4, sp, #288	; 0x120
   1782c:	4620      	mov	r0, r4
   1782e:	f7f6 fa8b 	bl	dd48 <conjugate_fp12>
   17832:	f105 0210 	add.w	r2, r5, #16
   17836:	4621      	mov	r1, r4
   17838:	4620      	mov	r0, r4
   1783a:	f7f9 f89f 	bl	1097c <mul_fp12>
   1783e:	4621      	mov	r1, r4
   17840:	4620      	mov	r0, r4
   17842:	f7ff f89d 	bl	16980 <final_exp>
   17846:	aa47      	add	r2, sp, #284	; 0x11c
   17848:	4929      	ldr	r1, [pc, #164]	; (178f0 <PAIRING_FinalVerify+0xec>)
   1784a:	f50d 7ebe 	add.w	lr, sp, #380	; 0x17c
   1784e:	f04f 0c00 	mov.w	ip, #0
   17852:	f852 3f04 	ldr.w	r3, [r2, #4]!
   17856:	f851 0f04 	ldr.w	r0, [r1, #4]!
   1785a:	4043      	eors	r3, r0
   1785c:	ea4c 0c03 	orr.w	ip, ip, r3
   17860:	4572      	cmp	r2, lr
   17862:	d1f6      	bne.n	17852 <PAIRING_FinalVerify+0x4e>
   17864:	f10c 30ff 	add.w	r0, ip, #4294967295
   17868:	ea20 000c 	bic.w	r0, r0, ip
   1786c:	0fc0      	lsrs	r0, r0, #31
   1786e:	ab5f      	add	r3, sp, #380	; 0x17c
   17870:	f504 710f 	add.w	r1, r4, #572	; 0x23c
   17874:	2200      	movs	r2, #0
   17876:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1787a:	4322      	orrs	r2, r4
   1787c:	4299      	cmp	r1, r3
   1787e:	d1fa      	bne.n	17876 <PAIRING_FinalVerify+0x72>
   17880:	1e53      	subs	r3, r2, #1
   17882:	ea23 0202 	bic.w	r2, r3, r2
   17886:	ea00 70d2 	and.w	r0, r0, r2, lsr #31
   1788a:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
   1788e:	bd30      	pop	{r4, r5, pc}
   17890:	f013 0f10 	tst.w	r3, #16
   17894:	d01f      	beq.n	178d6 <PAIRING_FinalVerify+0xd2>
   17896:	f003 0303 	and.w	r3, r3, #3
   1789a:	2b01      	cmp	r3, #1
   1789c:	d003      	beq.n	178a6 <PAIRING_FinalVerify+0xa2>
   1789e:	2b02      	cmp	r3, #2
   178a0:	d00d      	beq.n	178be <PAIRING_FinalVerify+0xba>
   178a2:	2000      	movs	r0, #0
   178a4:	e7f1      	b.n	1788a <PAIRING_FinalVerify+0x86>
   178a6:	f505 7114 	add.w	r1, r5, #592	; 0x250
   178aa:	4668      	mov	r0, sp
   178ac:	f7f9 ff6e 	bl	1178c <POINTonE1_from_Jacobian>
   178b0:	2301      	movs	r3, #1
   178b2:	466a      	mov	r2, sp
   178b4:	490f      	ldr	r1, [pc, #60]	; (178f4 <PAIRING_FinalVerify+0xf0>)
   178b6:	a848      	add	r0, sp, #288	; 0x120
   178b8:	f7ff fcd2 	bl	17260 <miller_loop_n>
   178bc:	e7b5      	b.n	1782a <PAIRING_FinalVerify+0x26>
   178be:	f505 7114 	add.w	r1, r5, #592	; 0x250
   178c2:	4668      	mov	r0, sp
   178c4:	f7fc f809 	bl	138da <POINTonE2_from_Jacobian>
   178c8:	2301      	movs	r3, #1
   178ca:	4a0b      	ldr	r2, [pc, #44]	; (178f8 <PAIRING_FinalVerify+0xf4>)
   178cc:	4669      	mov	r1, sp
   178ce:	a848      	add	r0, sp, #288	; 0x120
   178d0:	f7ff fcc6 	bl	17260 <miller_loop_n>
   178d4:	e7a9      	b.n	1782a <PAIRING_FinalVerify+0x26>
   178d6:	4809      	ldr	r0, [pc, #36]	; (178fc <PAIRING_FinalVerify+0xf8>)
   178d8:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   178dc:	aa47      	add	r2, sp, #284	; 0x11c
   178de:	f500 7033 	add.w	r0, r0, #716	; 0x2cc
   178e2:	f853 1f04 	ldr.w	r1, [r3, #4]!
   178e6:	f842 1f04 	str.w	r1, [r2, #4]!
   178ea:	4283      	cmp	r3, r0
   178ec:	d1f9      	bne.n	178e2 <PAIRING_FinalVerify+0xde>
   178ee:	e79c      	b.n	1782a <PAIRING_FinalVerify+0x26>
   178f0:	00024194 	.word	0x00024194
   178f4:	00024e88 	.word	0x00024e88
   178f8:	00024df8 	.word	0x00024df8
   178fc:	00024108 	.word	0x00024108

00017900 <blst_pairing_finalverify>:
   17900:	b508      	push	{r3, lr}
   17902:	f7ff ff7f 	bl	17804 <PAIRING_FinalVerify>
   17906:	bd08      	pop	{r3, pc}

00017908 <blst_core_verify_pk_in_g2>:
   17908:	b510      	push	{r4, lr}
   1790a:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   1790e:	2a00      	cmp	r2, #0
   17910:	bf14      	ite	ne
   17912:	2240      	movne	r2, #64	; 0x40
   17914:	2200      	moveq	r2, #0
   17916:	9208      	str	r2, [sp, #32]
   17918:	2200      	movs	r2, #0
   1791a:	9209      	str	r2, [sp, #36]	; 0x24
   1791c:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   17920:	940a      	str	r4, [sp, #40]	; 0x28
   17922:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   17926:	940b      	str	r4, [sp, #44]	; 0x2c
   17928:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   1792c:	9406      	str	r4, [sp, #24]
   1792e:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   17932:	9405      	str	r4, [sp, #20]
   17934:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   17938:	9404      	str	r4, [sp, #16]
   1793a:	9303      	str	r3, [sp, #12]
   1793c:	9202      	str	r2, [sp, #8]
   1793e:	9201      	str	r2, [sp, #4]
   17940:	2201      	movs	r2, #1
   17942:	9200      	str	r2, [sp, #0]
   17944:	460b      	mov	r3, r1
   17946:	4601      	mov	r1, r0
   17948:	a808      	add	r0, sp, #32
   1794a:	f7ff fd68 	bl	1741e <PAIRING_Aggregate_PK_in_G2>
   1794e:	4604      	mov	r4, r0
   17950:	b118      	cbz	r0, 1795a <blst_core_verify_pk_in_g2+0x52>
   17952:	4620      	mov	r0, r4
   17954:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   17958:	bd10      	pop	{r4, pc}
   1795a:	a808      	add	r0, sp, #32
   1795c:	f7ff ff25 	bl	177aa <PAIRING_Commit>
   17960:	2100      	movs	r1, #0
   17962:	a808      	add	r0, sp, #32
   17964:	f7ff ff4e 	bl	17804 <PAIRING_FinalVerify>
   17968:	2800      	cmp	r0, #0
   1796a:	bf08      	it	eq
   1796c:	2405      	moveq	r4, #5
   1796e:	e7f0      	b.n	17952 <blst_core_verify_pk_in_g2+0x4a>

00017970 <blst_aggregated_in_g1>:
   17970:	b508      	push	{r3, lr}
   17972:	460a      	mov	r2, r1
   17974:	2301      	movs	r3, #1
   17976:	4902      	ldr	r1, [pc, #8]	; (17980 <blst_aggregated_in_g1+0x10>)
   17978:	f7ff fc72 	bl	17260 <miller_loop_n>
   1797c:	bd08      	pop	{r3, pc}
   1797e:	bf00      	nop
   17980:	00024e88 	.word	0x00024e88

00017984 <blst_aggregated_in_g2>:
   17984:	b508      	push	{r3, lr}
   17986:	2301      	movs	r3, #1
   17988:	4a01      	ldr	r2, [pc, #4]	; (17990 <blst_aggregated_in_g2+0xc>)
   1798a:	f7ff fc69 	bl	17260 <miller_loop_n>
   1798e:	bd08      	pop	{r3, pc}
   17990:	00024df8 	.word	0x00024df8

00017994 <pre_add_n_dbl>:
   17994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17996:	460e      	mov	r6, r1
   17998:	461f      	mov	r7, r3
   1799a:	f500 7490 	add.w	r4, r0, #288	; 0x120
   1799e:	4613      	mov	r3, r2
   179a0:	460a      	mov	r2, r1
   179a2:	f7ff fa67 	bl	16e74 <line_add>
   179a6:	1e7d      	subs	r5, r7, #1
   179a8:	b157      	cbz	r7, 179c0 <pre_add_n_dbl+0x2c>
   179aa:	4620      	mov	r0, r4
   179ac:	4632      	mov	r2, r6
   179ae:	4631      	mov	r1, r6
   179b0:	f504 7490 	add.w	r4, r4, #288	; 0x120
   179b4:	f7ff f89a 	bl	16aec <line_dbl>
   179b8:	3d01      	subs	r5, #1
   179ba:	f1b5 3fff 	cmp.w	r5, #4294967295
   179be:	d1f4      	bne.n	179aa <pre_add_n_dbl+0x16>
   179c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000179c2 <precompute_lines>:
   179c2:	b530      	push	{r4, r5, lr}
   179c4:	b0c9      	sub	sp, #292	; 0x124
   179c6:	4604      	mov	r4, r0
   179c8:	460d      	mov	r5, r1
   179ca:	f1a1 0c04 	sub.w	ip, r1, #4
   179ce:	466b      	mov	r3, sp
   179d0:	a930      	add	r1, sp, #192	; 0xc0
   179d2:	f85c 2f04 	ldr.w	r2, [ip, #4]!
   179d6:	f843 2b04 	str.w	r2, [r3], #4
   179da:	428b      	cmp	r3, r1
   179dc:	d1f9      	bne.n	179d2 <precompute_lines+0x10>
   179de:	491b      	ldr	r1, [pc, #108]	; (17a4c <precompute_lines+0x8a>)
   179e0:	f101 038c 	add.w	r3, r1, #140	; 0x8c
   179e4:	f10d 0cbc 	add.w	ip, sp, #188	; 0xbc
   179e8:	31ec      	adds	r1, #236	; 0xec
   179ea:	f853 2f04 	ldr.w	r2, [r3, #4]!
   179ee:	f84c 2f04 	str.w	r2, [ip, #4]!
   179f2:	428b      	cmp	r3, r1
   179f4:	d1f9      	bne.n	179ea <precompute_lines+0x28>
   179f6:	466a      	mov	r2, sp
   179f8:	4669      	mov	r1, sp
   179fa:	4620      	mov	r0, r4
   179fc:	f7ff f876 	bl	16aec <line_dbl>
   17a00:	2302      	movs	r3, #2
   17a02:	462a      	mov	r2, r5
   17a04:	4669      	mov	r1, sp
   17a06:	f504 7090 	add.w	r0, r4, #288	; 0x120
   17a0a:	f7ff ffc3 	bl	17994 <pre_add_n_dbl>
   17a0e:	2303      	movs	r3, #3
   17a10:	462a      	mov	r2, r5
   17a12:	4669      	mov	r1, sp
   17a14:	f504 6090 	add.w	r0, r4, #1152	; 0x480
   17a18:	f7ff ffbc 	bl	17994 <pre_add_n_dbl>
   17a1c:	2309      	movs	r3, #9
   17a1e:	462a      	mov	r2, r5
   17a20:	4669      	mov	r1, sp
   17a22:	f504 6010 	add.w	r0, r4, #2304	; 0x900
   17a26:	f7ff ffb5 	bl	17994 <pre_add_n_dbl>
   17a2a:	2320      	movs	r3, #32
   17a2c:	462a      	mov	r2, r5
   17a2e:	4669      	mov	r1, sp
   17a30:	f504 50a2 	add.w	r0, r4, #5184	; 0x1440
   17a34:	f7ff ffae 	bl	17994 <pre_add_n_dbl>
   17a38:	2310      	movs	r3, #16
   17a3a:	462a      	mov	r2, r5
   17a3c:	4669      	mov	r1, sp
   17a3e:	f504 5065 	add.w	r0, r4, #14656	; 0x3940
   17a42:	3020      	adds	r0, #32
   17a44:	f7ff ffa6 	bl	17994 <pre_add_n_dbl>
   17a48:	b049      	add	sp, #292	; 0x124
   17a4a:	bd30      	pop	{r4, r5, pc}
   17a4c:	00024108 	.word	0x00024108

00017a50 <blst_precompute_lines>:
   17a50:	b508      	push	{r3, lr}
   17a52:	f7ff ffb6 	bl	179c2 <precompute_lines>
   17a56:	bd08      	pop	{r3, pc}

00017a58 <POINTonE2_dadd_affine>:
   17a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a5c:	f5ad 7d5f 	sub.w	sp, sp, #892	; 0x37c
   17a60:	9005      	str	r0, [sp, #20]
   17a62:	460c      	mov	r4, r1
   17a64:	4616      	mov	r6, r2
   17a66:	1f17      	subs	r7, r2, #4
   17a68:	f102 00bc 	add.w	r0, r2, #188	; 0xbc
   17a6c:	463b      	mov	r3, r7
   17a6e:	2200      	movs	r2, #0
   17a70:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17a74:	430a      	orrs	r2, r1
   17a76:	4283      	cmp	r3, r0
   17a78:	d1fa      	bne.n	17a70 <POINTonE2_dadd_affine+0x18>
   17a7a:	1e53      	subs	r3, r2, #1
   17a7c:	ea23 0202 	bic.w	r2, r3, r2
   17a80:	0fd3      	lsrs	r3, r2, #31
   17a82:	9304      	str	r3, [sp, #16]
   17a84:	4dc1      	ldr	r5, [pc, #772]	; (17d8c <POINTonE2_dadd_affine+0x334>)
   17a86:	f04f 090c 	mov.w	r9, #12
   17a8a:	f8cd 9000 	str.w	r9, [sp]
   17a8e:	462b      	mov	r3, r5
   17a90:	4632      	mov	r2, r6
   17a92:	4631      	mov	r1, r6
   17a94:	a836      	add	r0, sp, #216	; 0xd8
   17a96:	f7f5 f943 	bl	cd20 <add_mod_n>
   17a9a:	f106 0130 	add.w	r1, r6, #48	; 0x30
   17a9e:	f8cd 9000 	str.w	r9, [sp]
   17aa2:	462b      	mov	r3, r5
   17aa4:	460a      	mov	r2, r1
   17aa6:	a842      	add	r0, sp, #264	; 0x108
   17aa8:	f7f5 f93a 	bl	cd20 <add_mod_n>
   17aac:	4bb8      	ldr	r3, [pc, #736]	; (17d90 <POINTonE2_dadd_affine+0x338>)
   17aae:	462a      	mov	r2, r5
   17ab0:	4631      	mov	r1, r6
   17ab2:	a81e      	add	r0, sp, #120	; 0x78
   17ab4:	f7fb fedc 	bl	13870 <sqr_mont_384x>
   17ab8:	464b      	mov	r3, r9
   17aba:	462a      	mov	r2, r5
   17abc:	a91e      	add	r1, sp, #120	; 0x78
   17abe:	4608      	mov	r0, r1
   17ac0:	f7f5 f9b6 	bl	ce30 <mul_by_3_mod_n>
   17ac4:	464b      	mov	r3, r9
   17ac6:	462a      	mov	r2, r5
   17ac8:	a92a      	add	r1, sp, #168	; 0xa8
   17aca:	4608      	mov	r0, r1
   17acc:	f7f5 f9b0 	bl	ce30 <mul_by_3_mod_n>
   17ad0:	f106 0860 	add.w	r8, r6, #96	; 0x60
   17ad4:	f8cd 9000 	str.w	r9, [sp]
   17ad8:	462b      	mov	r3, r5
   17ada:	4642      	mov	r2, r8
   17adc:	4641      	mov	r1, r8
   17ade:	a806      	add	r0, sp, #24
   17ae0:	f7f5 f91e 	bl	cd20 <add_mod_n>
   17ae4:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17ae8:	f8cd 9000 	str.w	r9, [sp]
   17aec:	462b      	mov	r3, r5
   17aee:	460a      	mov	r2, r1
   17af0:	a812      	add	r0, sp, #72	; 0x48
   17af2:	f7f5 f915 	bl	cd20 <add_mod_n>
   17af6:	f104 0ac0 	add.w	sl, r4, #192	; 0xc0
   17afa:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   17afe:	f504 708e 	add.w	r0, r4, #284	; 0x11c
   17b02:	2200      	movs	r2, #0
   17b04:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17b08:	430a      	orrs	r2, r1
   17b0a:	4283      	cmp	r3, r0
   17b0c:	d1fa      	bne.n	17b04 <POINTonE2_dadd_affine+0xac>
   17b0e:	1e53      	subs	r3, r2, #1
   17b10:	ea23 0202 	bic.w	r2, r3, r2
   17b14:	0fd3      	lsrs	r3, r2, #31
   17b16:	9303      	str	r3, [sp, #12]
   17b18:	f8df 9274 	ldr.w	r9, [pc, #628]	; 17d90 <POINTonE2_dadd_affine+0x338>
   17b1c:	4d9b      	ldr	r5, [pc, #620]	; (17d8c <POINTonE2_dadd_affine+0x334>)
   17b1e:	464b      	mov	r3, r9
   17b20:	462a      	mov	r2, r5
   17b22:	4651      	mov	r1, sl
   17b24:	a84e      	add	r0, sp, #312	; 0x138
   17b26:	f7fb fea3 	bl	13870 <sqr_mont_384x>
   17b2a:	f8cd 9000 	str.w	r9, [sp]
   17b2e:	462b      	mov	r3, r5
   17b30:	4652      	mov	r2, sl
   17b32:	a94e      	add	r1, sp, #312	; 0x138
   17b34:	a866      	add	r0, sp, #408	; 0x198
   17b36:	f7f8 fc0d 	bl	10354 <mul_mont_384x>
   17b3a:	f8cd 9000 	str.w	r9, [sp]
   17b3e:	462b      	mov	r3, r5
   17b40:	4642      	mov	r2, r8
   17b42:	a966      	add	r1, sp, #408	; 0x198
   17b44:	4608      	mov	r0, r1
   17b46:	f7f8 fc05 	bl	10354 <mul_mont_384x>
   17b4a:	f04f 080c 	mov.w	r8, #12
   17b4e:	f8cd 8000 	str.w	r8, [sp]
   17b52:	462b      	mov	r3, r5
   17b54:	f104 0260 	add.w	r2, r4, #96	; 0x60
   17b58:	a966      	add	r1, sp, #408	; 0x198
   17b5a:	4608      	mov	r0, r1
   17b5c:	f7f4 fd8a 	bl	c674 <sub_mod_n>
   17b60:	f8cd 8000 	str.w	r8, [sp]
   17b64:	462b      	mov	r3, r5
   17b66:	f104 0290 	add.w	r2, r4, #144	; 0x90
   17b6a:	a972      	add	r1, sp, #456	; 0x1c8
   17b6c:	4608      	mov	r0, r1
   17b6e:	f7f4 fd81 	bl	c674 <sub_mod_n>
   17b72:	f8cd 9000 	str.w	r9, [sp]
   17b76:	462b      	mov	r3, r5
   17b78:	4632      	mov	r2, r6
   17b7a:	a94e      	add	r1, sp, #312	; 0x138
   17b7c:	4608      	mov	r0, r1
   17b7e:	f7f8 fbe9 	bl	10354 <mul_mont_384x>
   17b82:	f8cd 8000 	str.w	r8, [sp]
   17b86:	462b      	mov	r3, r5
   17b88:	4622      	mov	r2, r4
   17b8a:	a94e      	add	r1, sp, #312	; 0x138
   17b8c:	a87e      	add	r0, sp, #504	; 0x1f8
   17b8e:	f7f5 f8c7 	bl	cd20 <add_mod_n>
   17b92:	f104 0630 	add.w	r6, r4, #48	; 0x30
   17b96:	f8cd 8000 	str.w	r8, [sp]
   17b9a:	462b      	mov	r3, r5
   17b9c:	4632      	mov	r2, r6
   17b9e:	a95a      	add	r1, sp, #360	; 0x168
   17ba0:	a88a      	add	r0, sp, #552	; 0x228
   17ba2:	f7f5 f8bd 	bl	cd20 <add_mod_n>
   17ba6:	f8cd 8000 	str.w	r8, [sp]
   17baa:	462b      	mov	r3, r5
   17bac:	4622      	mov	r2, r4
   17bae:	a94e      	add	r1, sp, #312	; 0x138
   17bb0:	4608      	mov	r0, r1
   17bb2:	f7f4 fd5f 	bl	c674 <sub_mod_n>
   17bb6:	f8cd 8000 	str.w	r8, [sp]
   17bba:	462b      	mov	r3, r5
   17bbc:	4632      	mov	r2, r6
   17bbe:	a95a      	add	r1, sp, #360	; 0x168
   17bc0:	4608      	mov	r0, r1
   17bc2:	f7f4 fd57 	bl	c674 <sub_mod_n>
   17bc6:	f8cd 9000 	str.w	r9, [sp]
   17bca:	462b      	mov	r3, r5
   17bcc:	4652      	mov	r2, sl
   17bce:	a94e      	add	r1, sp, #312	; 0x138
   17bd0:	a8c6      	add	r0, sp, #792	; 0x318
   17bd2:	f7f8 fbbf 	bl	10354 <mul_mont_384x>
   17bd6:	f50d 7c9a 	add.w	ip, sp, #308	; 0x134
   17bda:	a87d      	add	r0, sp, #500	; 0x1f4
   17bdc:	4663      	mov	r3, ip
   17bde:	2200      	movs	r2, #0
   17be0:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17be4:	430a      	orrs	r2, r1
   17be6:	4283      	cmp	r3, r0
   17be8:	d1fa      	bne.n	17be0 <POINTonE2_dadd_affine+0x188>
   17bea:	1e50      	subs	r0, r2, #1
   17bec:	ea20 0002 	bic.w	r0, r0, r2
   17bf0:	17c0      	asrs	r0, r0, #31
   17bf2:	3c04      	subs	r4, #4
   17bf4:	ad96      	add	r5, sp, #600	; 0x258
   17bf6:	f50d 7846 	add.w	r8, sp, #792	; 0x318
   17bfa:	462a      	mov	r2, r5
   17bfc:	4626      	mov	r6, r4
   17bfe:	46be      	mov	lr, r7
   17c00:	f856 1f04 	ldr.w	r1, [r6, #4]!
   17c04:	f85e 3f04 	ldr.w	r3, [lr, #4]!
   17c08:	404b      	eors	r3, r1
   17c0a:	4003      	ands	r3, r0
   17c0c:	404b      	eors	r3, r1
   17c0e:	f842 3b04 	str.w	r3, [r2], #4
   17c12:	4542      	cmp	r2, r8
   17c14:	d1f4      	bne.n	17c00 <POINTonE2_dadd_affine+0x1a8>
   17c16:	aa05      	add	r2, sp, #20
   17c18:	aec5      	add	r6, sp, #788	; 0x314
   17c1a:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
   17c1e:	46b6      	mov	lr, r6
   17c20:	4611      	mov	r1, r2
   17c22:	f85e 9f04 	ldr.w	r9, [lr, #4]!
   17c26:	f851 3f04 	ldr.w	r3, [r1, #4]!
   17c2a:	ea89 0303 	eor.w	r3, r9, r3
   17c2e:	4003      	ands	r3, r0
   17c30:	ea83 0309 	eor.w	r3, r3, r9
   17c34:	f8ce 3000 	str.w	r3, [lr]
   17c38:	4551      	cmp	r1, sl
   17c3a:	d1f2      	bne.n	17c22 <POINTonE2_dadd_affine+0x1ca>
   17c3c:	a94d      	add	r1, sp, #308	; 0x134
   17c3e:	468e      	mov	lr, r1
   17c40:	f85c 1f04 	ldr.w	r1, [ip, #4]!
   17c44:	f852 3f04 	ldr.w	r3, [r2, #4]!
   17c48:	404b      	eors	r3, r1
   17c4a:	4003      	ands	r3, r0
   17c4c:	404b      	eors	r3, r1
   17c4e:	f8cc 3000 	str.w	r3, [ip]
   17c52:	4572      	cmp	r2, lr
   17c54:	d1f4      	bne.n	17c40 <POINTonE2_dadd_affine+0x1e8>
   17c56:	f8df a138 	ldr.w	sl, [pc, #312]	; 17d90 <POINTonE2_dadd_affine+0x338>
   17c5a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 17d8c <POINTonE2_dadd_affine+0x334>
   17c5e:	4653      	mov	r3, sl
   17c60:	464a      	mov	r2, r9
   17c62:	a94e      	add	r1, sp, #312	; 0x138
   17c64:	a806      	add	r0, sp, #24
   17c66:	f7fb fe03 	bl	13870 <sqr_mont_384x>
   17c6a:	f8cd a000 	str.w	sl, [sp]
   17c6e:	464b      	mov	r3, r9
   17c70:	aa4e      	add	r2, sp, #312	; 0x138
   17c72:	a906      	add	r1, sp, #24
   17c74:	a81e      	add	r0, sp, #120	; 0x78
   17c76:	f7f8 fb6d 	bl	10354 <mul_mont_384x>
   17c7a:	f8cd a000 	str.w	sl, [sp]
   17c7e:	464b      	mov	r3, r9
   17c80:	aaae      	add	r2, sp, #696	; 0x2b8
   17c82:	a91e      	add	r1, sp, #120	; 0x78
   17c84:	4608      	mov	r0, r1
   17c86:	f7f8 fb65 	bl	10354 <mul_mont_384x>
   17c8a:	f8cd a000 	str.w	sl, [sp]
   17c8e:	464b      	mov	r3, r9
   17c90:	aa96      	add	r2, sp, #600	; 0x258
   17c92:	a906      	add	r1, sp, #24
   17c94:	a8ae      	add	r0, sp, #696	; 0x2b8
   17c96:	f7f8 fb5d 	bl	10354 <mul_mont_384x>
   17c9a:	f8cd a000 	str.w	sl, [sp]
   17c9e:	464b      	mov	r3, r9
   17ca0:	aa7e      	add	r2, sp, #504	; 0x1f8
   17ca2:	a906      	add	r1, sp, #24
   17ca4:	4608      	mov	r0, r1
   17ca6:	f7f8 fb55 	bl	10354 <mul_mont_384x>
   17caa:	4653      	mov	r3, sl
   17cac:	464a      	mov	r2, r9
   17cae:	a966      	add	r1, sp, #408	; 0x198
   17cb0:	a896      	add	r0, sp, #600	; 0x258
   17cb2:	f7fb fddd 	bl	13870 <sqr_mont_384x>
   17cb6:	f04f 0b0c 	mov.w	fp, #12
   17cba:	f8cd b000 	str.w	fp, [sp]
   17cbe:	464b      	mov	r3, r9
   17cc0:	aa06      	add	r2, sp, #24
   17cc2:	a996      	add	r1, sp, #600	; 0x258
   17cc4:	4608      	mov	r0, r1
   17cc6:	f7f4 fcd5 	bl	c674 <sub_mod_n>
   17cca:	f8cd b000 	str.w	fp, [sp]
   17cce:	464b      	mov	r3, r9
   17cd0:	aa12      	add	r2, sp, #72	; 0x48
   17cd2:	a9a2      	add	r1, sp, #648	; 0x288
   17cd4:	4608      	mov	r0, r1
   17cd6:	f7f4 fccd 	bl	c674 <sub_mod_n>
   17cda:	f8cd b000 	str.w	fp, [sp]
   17cde:	464b      	mov	r3, r9
   17ce0:	aa96      	add	r2, sp, #600	; 0x258
   17ce2:	a9ae      	add	r1, sp, #696	; 0x2b8
   17ce4:	4608      	mov	r0, r1
   17ce6:	f7f4 fcc5 	bl	c674 <sub_mod_n>
   17cea:	f8cd b000 	str.w	fp, [sp]
   17cee:	464b      	mov	r3, r9
   17cf0:	aaa2      	add	r2, sp, #648	; 0x288
   17cf2:	a9ba      	add	r1, sp, #744	; 0x2e8
   17cf4:	4608      	mov	r0, r1
   17cf6:	f7f4 fcbd 	bl	c674 <sub_mod_n>
   17cfa:	f8cd a000 	str.w	sl, [sp]
   17cfe:	464b      	mov	r3, r9
   17d00:	aa66      	add	r2, sp, #408	; 0x198
   17d02:	a9ae      	add	r1, sp, #696	; 0x2b8
   17d04:	4608      	mov	r0, r1
   17d06:	f7f8 fb25 	bl	10354 <mul_mont_384x>
   17d0a:	f8cd b000 	str.w	fp, [sp]
   17d0e:	464b      	mov	r3, r9
   17d10:	aa1e      	add	r2, sp, #120	; 0x78
   17d12:	a9ae      	add	r1, sp, #696	; 0x2b8
   17d14:	4608      	mov	r0, r1
   17d16:	f7f4 fcad 	bl	c674 <sub_mod_n>
   17d1a:	f8cd b000 	str.w	fp, [sp]
   17d1e:	464b      	mov	r3, r9
   17d20:	aa2a      	add	r2, sp, #168	; 0xa8
   17d22:	a9ba      	add	r1, sp, #744	; 0x2e8
   17d24:	4608      	mov	r0, r1
   17d26:	f7f4 fca5 	bl	c674 <sub_mod_n>
   17d2a:	9b03      	ldr	r3, [sp, #12]
   17d2c:	425a      	negs	r2, r3
   17d2e:	4629      	mov	r1, r5
   17d30:	6808      	ldr	r0, [r1, #0]
   17d32:	f857 3f04 	ldr.w	r3, [r7, #4]!
   17d36:	4043      	eors	r3, r0
   17d38:	4013      	ands	r3, r2
   17d3a:	4043      	eors	r3, r0
   17d3c:	f841 3b04 	str.w	r3, [r1], #4
   17d40:	4541      	cmp	r1, r8
   17d42:	d1f5      	bne.n	17d30 <POINTonE2_dadd_affine+0x2d8>
   17d44:	4f11      	ldr	r7, [pc, #68]	; (17d8c <POINTonE2_dadd_affine+0x334>)
   17d46:	f107 018c 	add.w	r1, r7, #140	; 0x8c
   17d4a:	37ec      	adds	r7, #236	; 0xec
   17d4c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   17d50:	f851 3f04 	ldr.w	r3, [r1, #4]!
   17d54:	4043      	eors	r3, r0
   17d56:	4013      	ands	r3, r2
   17d58:	4043      	eors	r3, r0
   17d5a:	6033      	str	r3, [r6, #0]
   17d5c:	42b9      	cmp	r1, r7
   17d5e:	d1f5      	bne.n	17d4c <POINTonE2_dadd_affine+0x2f4>
   17d60:	9b04      	ldr	r3, [sp, #16]
   17d62:	4259      	negs	r1, r3
   17d64:	9b05      	ldr	r3, [sp, #20]
   17d66:	1f18      	subs	r0, r3, #4
   17d68:	f505 7690 	add.w	r6, r5, #288	; 0x120
   17d6c:	f855 2b04 	ldr.w	r2, [r5], #4
   17d70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   17d74:	4053      	eors	r3, r2
   17d76:	400b      	ands	r3, r1
   17d78:	4053      	eors	r3, r2
   17d7a:	f840 3f04 	str.w	r3, [r0, #4]!
   17d7e:	42b5      	cmp	r5, r6
   17d80:	d1f4      	bne.n	17d6c <POINTonE2_dadd_affine+0x314>
   17d82:	f50d 7d5f 	add.w	sp, sp, #892	; 0x37c
   17d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d8a:	bf00      	nop
   17d8c:	00024108 	.word	0x00024108
   17d90:	fffcfffd 	.word	0xfffcfffd

00017d94 <PAIRING_Aggregate_PK_in_G1>:
   17d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d98:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
   17d9c:	4698      	mov	r8, r3
   17d9e:	6803      	ldr	r3, [r0, #0]
   17da0:	f013 0501 	ands.w	r5, r3, #1
   17da4:	f040 818b 	bne.w	180be <PAIRING_Aggregate_PK_in_G1+0x32a>
   17da8:	4607      	mov	r7, r0
   17daa:	460e      	mov	r6, r1
   17dac:	4691      	mov	r9, r2
   17dae:	f043 0302 	orr.w	r3, r3, #2
   17db2:	6003      	str	r3, [r0, #0]
   17db4:	f1b8 0f00 	cmp.w	r8, #0
   17db8:	d07d      	beq.n	17eb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   17dba:	f1a8 0204 	sub.w	r2, r8, #4
   17dbe:	f108 04bc 	add.w	r4, r8, #188	; 0xbc
   17dc2:	4613      	mov	r3, r2
   17dc4:	4629      	mov	r1, r5
   17dc6:	f853 0f04 	ldr.w	r0, [r3, #4]!
   17dca:	4301      	orrs	r1, r0
   17dcc:	42a3      	cmp	r3, r4
   17dce:	d1fa      	bne.n	17dc6 <PAIRING_Aggregate_PK_in_G1+0x32>
   17dd0:	1e48      	subs	r0, r1, #1
   17dd2:	ea20 0101 	bic.w	r1, r0, r1
   17dd6:	0fc9      	lsrs	r1, r1, #31
   17dd8:	d16d      	bne.n	17eb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   17dda:	f507 7a14 	add.w	sl, r7, #592	; 0x250
   17dde:	f50d 7e20 	add.w	lr, sp, #640	; 0x280
   17de2:	ab70      	add	r3, sp, #448	; 0x1c0
   17de4:	4610      	mov	r0, r2
   17de6:	f850 cf04 	ldr.w	ip, [r0, #4]!
   17dea:	f843 cb04 	str.w	ip, [r3], #4
   17dee:	4573      	cmp	r3, lr
   17df0:	d1f9      	bne.n	17de6 <PAIRING_Aggregate_PK_in_G1+0x52>
   17df2:	4613      	mov	r3, r2
   17df4:	f853 0f04 	ldr.w	r0, [r3, #4]!
   17df8:	4301      	orrs	r1, r0
   17dfa:	42a3      	cmp	r3, r4
   17dfc:	d1fa      	bne.n	17df4 <PAIRING_Aggregate_PK_in_G1+0x60>
   17dfe:	1e48      	subs	r0, r1, #1
   17e00:	ea20 0101 	bic.w	r1, r0, r1
   17e04:	17c8      	asrs	r0, r1, #31
   17e06:	4cb0      	ldr	r4, [pc, #704]	; (180c8 <PAIRING_Aggregate_PK_in_G1+0x334>)
   17e08:	f104 0390 	add.w	r3, r4, #144	; 0x90
   17e0c:	a99f      	add	r1, sp, #636	; 0x27c
   17e0e:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
   17e12:	f853 eb04 	ldr.w	lr, [r3], #4
   17e16:	f852 4f04 	ldr.w	r4, [r2, #4]!
   17e1a:	ea8e 0404 	eor.w	r4, lr, r4
   17e1e:	4004      	ands	r4, r0
   17e20:	ea84 040e 	eor.w	r4, r4, lr
   17e24:	f841 4f04 	str.w	r4, [r1, #4]!
   17e28:	4563      	cmp	r3, ip
   17e2a:	d1f2      	bne.n	17e12 <PAIRING_Aggregate_PK_in_G1+0x7e>
   17e2c:	f8dd 3428 	ldr.w	r3, [sp, #1064]	; 0x428
   17e30:	b9c3      	cbnz	r3, 17e64 <PAIRING_Aggregate_PK_in_G1+0xd0>
   17e32:	683b      	ldr	r3, [r7, #0]
   17e34:	f013 0f10 	tst.w	r3, #16
   17e38:	d021      	beq.n	17e7e <PAIRING_Aggregate_PK_in_G1+0xea>
   17e3a:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17e3e:	b1c3      	cbz	r3, 17e72 <PAIRING_Aggregate_PK_in_G1+0xde>
   17e40:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   17e44:	b1ab      	cbz	r3, 17e72 <PAIRING_Aggregate_PK_in_G1+0xde>
   17e46:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17e4a:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   17e4e:	a970      	add	r1, sp, #448	; 0x1c0
   17e50:	4608      	mov	r0, r1
   17e52:	f7fd f9a5 	bl	151a0 <POINTonE2_mult_w5>
   17e56:	2300      	movs	r3, #0
   17e58:	aa70      	add	r2, sp, #448	; 0x1c0
   17e5a:	4651      	mov	r1, sl
   17e5c:	4650      	mov	r0, sl
   17e5e:	f7fc fe4d 	bl	14afc <POINTonE2_dadd>
   17e62:	e028      	b.n	17eb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   17e64:	a870      	add	r0, sp, #448	; 0x1c0
   17e66:	f7fd fab3 	bl	153d0 <POINTonE2_in_G2>
   17e6a:	2800      	cmp	r0, #0
   17e6c:	d1e1      	bne.n	17e32 <PAIRING_Aggregate_PK_in_G1+0x9e>
   17e6e:	2003      	movs	r0, #3
   17e70:	e0e9      	b.n	18046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   17e72:	4642      	mov	r2, r8
   17e74:	4651      	mov	r1, sl
   17e76:	4650      	mov	r0, sl
   17e78:	f7ff fdee 	bl	17a58 <POINTonE2_dadd_affine>
   17e7c:	e01b      	b.n	17eb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   17e7e:	f043 0310 	orr.w	r3, r3, #16
   17e82:	603b      	str	r3, [r7, #0]
   17e84:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17e88:	b15b      	cbz	r3, 17ea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   17e8a:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   17e8e:	b143      	cbz	r3, 17ea2 <PAIRING_Aggregate_PK_in_G1+0x10e>
   17e90:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17e94:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   17e98:	a970      	add	r1, sp, #448	; 0x1c0
   17e9a:	4650      	mov	r0, sl
   17e9c:	f7fd f980 	bl	151a0 <POINTonE2_mult_w5>
   17ea0:	e009      	b.n	17eb6 <PAIRING_Aggregate_PK_in_G1+0x122>
   17ea2:	ab6f      	add	r3, sp, #444	; 0x1bc
   17ea4:	f507 7213 	add.w	r2, r7, #588	; 0x24c
   17ea8:	a8b7      	add	r0, sp, #732	; 0x2dc
   17eaa:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17eae:	f842 1f04 	str.w	r1, [r2, #4]!
   17eb2:	4283      	cmp	r3, r0
   17eb4:	d1f9      	bne.n	17eaa <PAIRING_Aggregate_PK_in_G1+0x116>
   17eb6:	2e00      	cmp	r6, #0
   17eb8:	f000 8103 	beq.w	180c2 <PAIRING_Aggregate_PK_in_G1+0x32e>
   17ebc:	f8d7 b008 	ldr.w	fp, [r7, #8]
   17ec0:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
   17ec4:	bf08      	it	eq
   17ec6:	f507 6b47 	addeq.w	fp, r7, #3184	; 0xc70
   17eca:	f1a6 0804 	sub.w	r8, r6, #4
   17ece:	46b2      	mov	sl, r6
   17ed0:	f106 045c 	add.w	r4, r6, #92	; 0x5c
   17ed4:	4643      	mov	r3, r8
   17ed6:	f853 2f04 	ldr.w	r2, [r3, #4]!
   17eda:	4315      	orrs	r5, r2
   17edc:	42a3      	cmp	r3, r4
   17ede:	d1fa      	bne.n	17ed6 <PAIRING_Aggregate_PK_in_G1+0x142>
   17ee0:	1e6b      	subs	r3, r5, #1
   17ee2:	ea23 0505 	bic.w	r5, r3, r5
   17ee6:	0fed      	lsrs	r5, r5, #31
   17ee8:	f040 80e7 	bne.w	180ba <PAIRING_Aggregate_PK_in_G1+0x326>
   17eec:	f1b9 0f00 	cmp.w	r9, #0
   17ef0:	d02d      	beq.n	17f4e <PAIRING_Aggregate_PK_in_G1+0x1ba>
   17ef2:	ab70      	add	r3, sp, #448	; 0x1c0
   17ef4:	a888      	add	r0, sp, #544	; 0x220
   17ef6:	4642      	mov	r2, r8
   17ef8:	f852 1f04 	ldr.w	r1, [r2, #4]!
   17efc:	f843 1b04 	str.w	r1, [r3], #4
   17f00:	4283      	cmp	r3, r0
   17f02:	d1f9      	bne.n	17ef8 <PAIRING_Aggregate_PK_in_G1+0x164>
   17f04:	4643      	mov	r3, r8
   17f06:	462a      	mov	r2, r5
   17f08:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17f0c:	430a      	orrs	r2, r1
   17f0e:	42a3      	cmp	r3, r4
   17f10:	d1fa      	bne.n	17f08 <PAIRING_Aggregate_PK_in_G1+0x174>
   17f12:	f102 3cff 	add.w	ip, r2, #4294967295
   17f16:	ea2c 0c02 	bic.w	ip, ip, r2
   17f1a:	ea4f 7cec 	mov.w	ip, ip, asr #31
   17f1e:	486b      	ldr	r0, [pc, #428]	; (180cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   17f20:	a987      	add	r1, sp, #540	; 0x21c
   17f22:	f10a 0e2c 	add.w	lr, sl, #44	; 0x2c
   17f26:	4642      	mov	r2, r8
   17f28:	f850 9b04 	ldr.w	r9, [r0], #4
   17f2c:	f852 3f04 	ldr.w	r3, [r2, #4]!
   17f30:	ea89 0303 	eor.w	r3, r9, r3
   17f34:	ea03 030c 	and.w	r3, r3, ip
   17f38:	ea83 0309 	eor.w	r3, r3, r9
   17f3c:	f841 3f04 	str.w	r3, [r1, #4]!
   17f40:	4572      	cmp	r2, lr
   17f42:	d1f1      	bne.n	17f28 <PAIRING_Aggregate_PK_in_G1+0x194>
   17f44:	a870      	add	r0, sp, #448	; 0x1c0
   17f46:	f7f7 fb71 	bl	f62c <POINTonE1_in_G1>
   17f4a:	2800      	cmp	r0, #0
   17f4c:	d07f      	beq.n	1804e <PAIRING_Aggregate_PK_in_G1+0x2ba>
   17f4e:	683b      	ldr	r3, [r7, #0]
   17f50:	f013 0f40 	tst.w	r3, #64	; 0x40
   17f54:	d07d      	beq.n	18052 <PAIRING_Aggregate_PK_in_G1+0x2be>
   17f56:	68fb      	ldr	r3, [r7, #12]
   17f58:	9303      	str	r3, [sp, #12]
   17f5a:	f8cd b008 	str.w	fp, [sp, #8]
   17f5e:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   17f62:	9301      	str	r3, [sp, #4]
   17f64:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   17f68:	9300      	str	r3, [sp, #0]
   17f6a:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   17f6e:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   17f72:	2104      	movs	r1, #4
   17f74:	a870      	add	r0, sp, #448	; 0x1c0
   17f76:	f7fb f842 	bl	12ffe <hash_to_field>
   17f7a:	aa88      	add	r2, sp, #544	; 0x220
   17f7c:	a970      	add	r1, sp, #448	; 0x1c0
   17f7e:	a828      	add	r0, sp, #160	; 0xa0
   17f80:	f7fd fee8 	bl	15d54 <map_to_g2>
   17f84:	a928      	add	r1, sp, #160	; 0xa0
   17f86:	4608      	mov	r0, r1
   17f88:	f7fb fca7 	bl	138da <POINTonE2_from_Jacobian>
   17f8c:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17f90:	b393      	cbz	r3, 17ff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   17f92:	f8dd 342c 	ldr.w	r3, [sp, #1068]	; 0x42c
   17f96:	b37b      	cbz	r3, 17ff8 <PAIRING_Aggregate_PK_in_G1+0x264>
   17f98:	ab04      	add	r3, sp, #16
   17f9a:	a81c      	add	r0, sp, #112	; 0x70
   17f9c:	4642      	mov	r2, r8
   17f9e:	f852 1f04 	ldr.w	r1, [r2, #4]!
   17fa2:	f843 1b04 	str.w	r1, [r3], #4
   17fa6:	4283      	cmp	r3, r0
   17fa8:	d1f9      	bne.n	17f9e <PAIRING_Aggregate_PK_in_G1+0x20a>
   17faa:	4643      	mov	r3, r8
   17fac:	462a      	mov	r2, r5
   17fae:	f853 1f04 	ldr.w	r1, [r3, #4]!
   17fb2:	430a      	orrs	r2, r1
   17fb4:	42a3      	cmp	r3, r4
   17fb6:	d1fa      	bne.n	17fae <PAIRING_Aggregate_PK_in_G1+0x21a>
   17fb8:	1e54      	subs	r4, r2, #1
   17fba:	ea24 0202 	bic.w	r2, r4, r2
   17fbe:	17d4      	asrs	r4, r2, #31
   17fc0:	4842      	ldr	r0, [pc, #264]	; (180cc <PAIRING_Aggregate_PK_in_G1+0x338>)
   17fc2:	a91b      	add	r1, sp, #108	; 0x6c
   17fc4:	f10a 0a2c 	add.w	sl, sl, #44	; 0x2c
   17fc8:	f850 2b04 	ldr.w	r2, [r0], #4
   17fcc:	f858 3f04 	ldr.w	r3, [r8, #4]!
   17fd0:	4053      	eors	r3, r2
   17fd2:	4023      	ands	r3, r4
   17fd4:	4053      	eors	r3, r2
   17fd6:	f841 3f04 	str.w	r3, [r1, #4]!
   17fda:	45d0      	cmp	r8, sl
   17fdc:	d1f4      	bne.n	17fc8 <PAIRING_Aggregate_PK_in_G1+0x234>
   17fde:	f8dd 3430 	ldr.w	r3, [sp, #1072]	; 0x430
   17fe2:	f8dd 242c 	ldr.w	r2, [sp, #1068]	; 0x42c
   17fe6:	a904      	add	r1, sp, #16
   17fe8:	4608      	mov	r0, r1
   17fea:	f7f7 fa76 	bl	f4da <POINTonE1_mult_w5>
   17fee:	a904      	add	r1, sp, #16
   17ff0:	4608      	mov	r0, r1
   17ff2:	f7f9 fbcb 	bl	1178c <POINTonE1_from_Jacobian>
   17ff6:	ae04      	add	r6, sp, #16
   17ff8:	687c      	ldr	r4, [r7, #4]
   17ffa:	f507 715c 	add.w	r1, r7, #880	; 0x370
   17ffe:	ab27      	add	r3, sp, #156	; 0x9c
   18000:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   18004:	eb07 1282 	add.w	r2, r7, r2, lsl #6
   18008:	f502 725b 	add.w	r2, r2, #876	; 0x36c
   1800c:	f50d 7cae 	add.w	ip, sp, #348	; 0x15c
   18010:	f853 0f04 	ldr.w	r0, [r3, #4]!
   18014:	f842 0f04 	str.w	r0, [r2, #4]!
   18018:	4563      	cmp	r3, ip
   1801a:	d1f9      	bne.n	18010 <PAIRING_Aggregate_PK_in_G1+0x27c>
   1801c:	f507 6c17 	add.w	ip, r7, #2416	; 0x970
   18020:	1f33      	subs	r3, r6, #4
   18022:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18026:	eb07 1040 	add.w	r0, r7, r0, lsl #5
   1802a:	f600 106c 	addw	r0, r0, #2412	; 0x96c
   1802e:	365c      	adds	r6, #92	; 0x5c
   18030:	f853 2f04 	ldr.w	r2, [r3, #4]!
   18034:	f840 2f04 	str.w	r2, [r0, #4]!
   18038:	42b3      	cmp	r3, r6
   1803a:	d1f9      	bne.n	18030 <PAIRING_Aggregate_PK_in_G1+0x29c>
   1803c:	1c66      	adds	r6, r4, #1
   1803e:	2c07      	cmp	r4, #7
   18040:	d01f      	beq.n	18082 <PAIRING_Aggregate_PK_in_G1+0x2ee>
   18042:	607e      	str	r6, [r7, #4]
   18044:	2000      	movs	r0, #0
   18046:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
   1804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1804e:	2003      	movs	r0, #3
   18050:	e7f9      	b.n	18046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   18052:	68fb      	ldr	r3, [r7, #12]
   18054:	9303      	str	r3, [sp, #12]
   18056:	f8cd b008 	str.w	fp, [sp, #8]
   1805a:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
   1805e:	9301      	str	r3, [sp, #4]
   18060:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
   18064:	9300      	str	r3, [sp, #0]
   18066:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
   1806a:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
   1806e:	2102      	movs	r1, #2
   18070:	a870      	add	r0, sp, #448	; 0x1c0
   18072:	f7fa ffc4 	bl	12ffe <hash_to_field>
   18076:	2200      	movs	r2, #0
   18078:	a970      	add	r1, sp, #448	; 0x1c0
   1807a:	a828      	add	r0, sp, #160	; 0xa0
   1807c:	f7fd fe6a 	bl	15d54 <map_to_g2>
   18080:	e780      	b.n	17f84 <PAIRING_Aggregate_PK_in_G1+0x1f0>
   18082:	683e      	ldr	r6, [r7, #0]
   18084:	f016 0620 	ands.w	r6, r6, #32
   18088:	d00c      	beq.n	180a4 <PAIRING_Aggregate_PK_in_G1+0x310>
   1808a:	2308      	movs	r3, #8
   1808c:	4662      	mov	r2, ip
   1808e:	a870      	add	r0, sp, #448	; 0x1c0
   18090:	f7ff f8e6 	bl	17260 <miller_loop_n>
   18094:	f107 0010 	add.w	r0, r7, #16
   18098:	aa70      	add	r2, sp, #448	; 0x1c0
   1809a:	4601      	mov	r1, r0
   1809c:	f7f8 fc6e 	bl	1097c <mul_fp12>
   180a0:	462e      	mov	r6, r5
   180a2:	e7ce      	b.n	18042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   180a4:	2308      	movs	r3, #8
   180a6:	4662      	mov	r2, ip
   180a8:	f107 0010 	add.w	r0, r7, #16
   180ac:	f7ff f8d8 	bl	17260 <miller_loop_n>
   180b0:	683b      	ldr	r3, [r7, #0]
   180b2:	f043 0320 	orr.w	r3, r3, #32
   180b6:	603b      	str	r3, [r7, #0]
   180b8:	e7c3      	b.n	18042 <PAIRING_Aggregate_PK_in_G1+0x2ae>
   180ba:	2006      	movs	r0, #6
   180bc:	e7c3      	b.n	18046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   180be:	2004      	movs	r0, #4
   180c0:	e7c1      	b.n	18046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   180c2:	2000      	movs	r0, #0
   180c4:	e7bf      	b.n	18046 <PAIRING_Aggregate_PK_in_G1+0x2b2>
   180c6:	bf00      	nop
   180c8:	00024108 	.word	0x00024108
   180cc:	00024198 	.word	0x00024198

000180d0 <blst_pairing_aggregate_pk_in_g1>:
   180d0:	b500      	push	{lr}
   180d2:	b089      	sub	sp, #36	; 0x24
   180d4:	4694      	mov	ip, r2
   180d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   180d8:	9206      	str	r2, [sp, #24]
   180da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   180dc:	9205      	str	r2, [sp, #20]
   180de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   180e0:	9204      	str	r2, [sp, #16]
   180e2:	9303      	str	r3, [sp, #12]
   180e4:	2200      	movs	r2, #0
   180e6:	9202      	str	r2, [sp, #8]
   180e8:	9201      	str	r2, [sp, #4]
   180ea:	2301      	movs	r3, #1
   180ec:	9300      	str	r3, [sp, #0]
   180ee:	4663      	mov	r3, ip
   180f0:	f7ff fe50 	bl	17d94 <PAIRING_Aggregate_PK_in_G1>
   180f4:	b009      	add	sp, #36	; 0x24
   180f6:	f85d fb04 	ldr.w	pc, [sp], #4

000180fa <blst_pairing_mul_n_aggregate_pk_in_g1>:
   180fa:	b500      	push	{lr}
   180fc:	b089      	sub	sp, #36	; 0x24
   180fe:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   18102:	f8cd c018 	str.w	ip, [sp, #24]
   18106:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   1810a:	f8cd c014 	str.w	ip, [sp, #20]
   1810e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   18112:	f8cd c010 	str.w	ip, [sp, #16]
   18116:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   1811a:	f8cd c00c 	str.w	ip, [sp, #12]
   1811e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   18122:	f8cd c008 	str.w	ip, [sp, #8]
   18126:	9301      	str	r3, [sp, #4]
   18128:	2301      	movs	r3, #1
   1812a:	9300      	str	r3, [sp, #0]
   1812c:	4613      	mov	r3, r2
   1812e:	2200      	movs	r2, #0
   18130:	f7ff fe30 	bl	17d94 <PAIRING_Aggregate_PK_in_G1>
   18134:	b009      	add	sp, #36	; 0x24
   18136:	f85d fb04 	ldr.w	pc, [sp], #4

0001813a <blst_pairing_chk_n_aggr_pk_in_g1>:
   1813a:	b510      	push	{r4, lr}
   1813c:	b088      	sub	sp, #32
   1813e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   18140:	9406      	str	r4, [sp, #24]
   18142:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   18144:	9405      	str	r4, [sp, #20]
   18146:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   18148:	9404      	str	r4, [sp, #16]
   1814a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1814c:	9403      	str	r4, [sp, #12]
   1814e:	2400      	movs	r4, #0
   18150:	9402      	str	r4, [sp, #8]
   18152:	9401      	str	r4, [sp, #4]
   18154:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   18156:	9400      	str	r4, [sp, #0]
   18158:	f7ff fe1c 	bl	17d94 <PAIRING_Aggregate_PK_in_G1>
   1815c:	b008      	add	sp, #32
   1815e:	bd10      	pop	{r4, pc}

00018160 <blst_pairing_chk_n_mul_n_aggr_pk_in_g1>:
   18160:	b500      	push	{lr}
   18162:	b089      	sub	sp, #36	; 0x24
   18164:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   18168:	f8cd c018 	str.w	ip, [sp, #24]
   1816c:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   18170:	f8cd c014 	str.w	ip, [sp, #20]
   18174:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   18178:	f8cd c010 	str.w	ip, [sp, #16]
   1817c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   18180:	f8cd c00c 	str.w	ip, [sp, #12]
   18184:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   18188:	f8cd c008 	str.w	ip, [sp, #8]
   1818c:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   18190:	f8cd c004 	str.w	ip, [sp, #4]
   18194:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   18198:	f8cd c000 	str.w	ip, [sp]
   1819c:	f7ff fdfa 	bl	17d94 <PAIRING_Aggregate_PK_in_G1>
   181a0:	b009      	add	sp, #36	; 0x24
   181a2:	f85d fb04 	ldr.w	pc, [sp], #4

000181a6 <blst_core_verify_pk_in_g1>:
   181a6:	b510      	push	{r4, lr}
   181a8:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
   181ac:	2a00      	cmp	r2, #0
   181ae:	bf14      	ite	ne
   181b0:	2240      	movne	r2, #64	; 0x40
   181b2:	2200      	moveq	r2, #0
   181b4:	9208      	str	r2, [sp, #32]
   181b6:	2200      	movs	r2, #0
   181b8:	9209      	str	r2, [sp, #36]	; 0x24
   181ba:	f8dd 4c9c 	ldr.w	r4, [sp, #3228]	; 0xc9c
   181be:	940a      	str	r4, [sp, #40]	; 0x28
   181c0:	f8dd 4ca0 	ldr.w	r4, [sp, #3232]	; 0xca0
   181c4:	940b      	str	r4, [sp, #44]	; 0x2c
   181c6:	f8dd 4ca8 	ldr.w	r4, [sp, #3240]	; 0xca8
   181ca:	9406      	str	r4, [sp, #24]
   181cc:	f8dd 4ca4 	ldr.w	r4, [sp, #3236]	; 0xca4
   181d0:	9405      	str	r4, [sp, #20]
   181d2:	f8dd 4c98 	ldr.w	r4, [sp, #3224]	; 0xc98
   181d6:	9404      	str	r4, [sp, #16]
   181d8:	9303      	str	r3, [sp, #12]
   181da:	9202      	str	r2, [sp, #8]
   181dc:	9201      	str	r2, [sp, #4]
   181de:	2201      	movs	r2, #1
   181e0:	9200      	str	r2, [sp, #0]
   181e2:	460b      	mov	r3, r1
   181e4:	4601      	mov	r1, r0
   181e6:	a808      	add	r0, sp, #32
   181e8:	f7ff fdd4 	bl	17d94 <PAIRING_Aggregate_PK_in_G1>
   181ec:	4604      	mov	r4, r0
   181ee:	b118      	cbz	r0, 181f8 <blst_core_verify_pk_in_g1+0x52>
   181f0:	4620      	mov	r0, r4
   181f2:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   181f6:	bd10      	pop	{r4, pc}
   181f8:	a808      	add	r0, sp, #32
   181fa:	f7ff fad6 	bl	177aa <PAIRING_Commit>
   181fe:	2100      	movs	r1, #0
   18200:	a808      	add	r0, sp, #32
   18202:	f7ff faff 	bl	17804 <PAIRING_FinalVerify>
   18206:	2800      	cmp	r0, #0
   18208:	bf08      	it	eq
   1820a:	2405      	moveq	r4, #5
   1820c:	e7f0      	b.n	181f0 <blst_core_verify_pk_in_g1+0x4a>

0001820e <blst_aggregate_in_g2>:
   1820e:	b5f0      	push	{r4, r5, r6, r7, lr}
   18210:	b0c9      	sub	sp, #292	; 0x124
   18212:	4605      	mov	r5, r0
   18214:	460e      	mov	r6, r1
   18216:	7813      	ldrb	r3, [r2, #0]
   18218:	f013 0740 	ands.w	r7, r3, #64	; 0x40
   1821c:	d120      	bne.n	18260 <blst_aggregate_in_g2+0x52>
   1821e:	4611      	mov	r1, r2
   18220:	f013 0f80 	tst.w	r3, #128	; 0x80
   18224:	d12b      	bne.n	1827e <blst_aggregate_in_g2+0x70>
   18226:	4668      	mov	r0, sp
   18228:	f7fb fcca 	bl	13bc0 <POINTonE2_Deserialize_BE>
   1822c:	4668      	mov	r0, sp
   1822e:	f7fb fc65 	bl	13afc <POINTonE2_affine_on_curve>
   18232:	b3b0      	cbz	r0, 182a2 <blst_aggregate_in_g2+0x94>
   18234:	481d      	ldr	r0, [pc, #116]	; (182ac <blst_aggregate_in_g2+0x9e>)
   18236:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1823a:	aa2f      	add	r2, sp, #188	; 0xbc
   1823c:	30ec      	adds	r0, #236	; 0xec
   1823e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   18242:	f842 4f04 	str.w	r4, [r2, #4]!
   18246:	4283      	cmp	r3, r0
   18248:	d1f9      	bne.n	1823e <blst_aggregate_in_g2+0x30>
   1824a:	4668      	mov	r0, sp
   1824c:	f7fd f8c0 	bl	153d0 <POINTonE2_in_G2>
   18250:	b348      	cbz	r0, 182a6 <blst_aggregate_in_g2+0x98>
   18252:	b1de      	cbz	r6, 1828c <blst_aggregate_in_g2+0x7e>
   18254:	466a      	mov	r2, sp
   18256:	4631      	mov	r1, r6
   18258:	4628      	mov	r0, r5
   1825a:	f7ff fbfd 	bl	17a58 <POINTonE2_dadd_affine>
   1825e:	e001      	b.n	18264 <blst_aggregate_in_g2+0x56>
   18260:	b119      	cbz	r1, 1826a <blst_aggregate_in_g2+0x5c>
   18262:	2700      	movs	r7, #0
   18264:	4638      	mov	r0, r7
   18266:	b049      	add	sp, #292	; 0x124
   18268:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1826a:	4603      	mov	r3, r0
   1826c:	f500 7190 	add.w	r1, r0, #288	; 0x120
   18270:	2200      	movs	r2, #0
   18272:	f843 2b04 	str.w	r2, [r3], #4
   18276:	4299      	cmp	r1, r3
   18278:	d1fb      	bne.n	18272 <blst_aggregate_in_g2+0x64>
   1827a:	2700      	movs	r7, #0
   1827c:	e7f2      	b.n	18264 <blst_aggregate_in_g2+0x56>
   1827e:	4668      	mov	r0, sp
   18280:	f7fc f89c 	bl	143bc <POINTonE2_Uncompress>
   18284:	2800      	cmp	r0, #0
   18286:	d0d5      	beq.n	18234 <blst_aggregate_in_g2+0x26>
   18288:	4607      	mov	r7, r0
   1828a:	e7eb      	b.n	18264 <blst_aggregate_in_g2+0x56>
   1828c:	f1ad 0304 	sub.w	r3, sp, #4
   18290:	3d04      	subs	r5, #4
   18292:	a947      	add	r1, sp, #284	; 0x11c
   18294:	f853 2f04 	ldr.w	r2, [r3, #4]!
   18298:	f845 2f04 	str.w	r2, [r5, #4]!
   1829c:	428b      	cmp	r3, r1
   1829e:	d1f9      	bne.n	18294 <blst_aggregate_in_g2+0x86>
   182a0:	e7e0      	b.n	18264 <blst_aggregate_in_g2+0x56>
   182a2:	2702      	movs	r7, #2
   182a4:	e7de      	b.n	18264 <blst_aggregate_in_g2+0x56>
   182a6:	2703      	movs	r7, #3
   182a8:	e7dc      	b.n	18264 <blst_aggregate_in_g2+0x56>
   182aa:	bf00      	nop
   182ac:	00024108 	.word	0x00024108

000182b0 <POINTonE2_add_affine>:
   182b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182b4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   182b8:	9003      	str	r0, [sp, #12]
   182ba:	460d      	mov	r5, r1
   182bc:	4616      	mov	r6, r2
   182be:	f101 0bc0 	add.w	fp, r1, #192	; 0xc0
   182c2:	f101 03bc 	add.w	r3, r1, #188	; 0xbc
   182c6:	f501 708e 	add.w	r0, r1, #284	; 0x11c
   182ca:	2200      	movs	r2, #0
   182cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
   182d0:	430a      	orrs	r2, r1
   182d2:	4283      	cmp	r3, r0
   182d4:	d1fa      	bne.n	182cc <POINTonE2_add_affine+0x1c>
   182d6:	1e57      	subs	r7, r2, #1
   182d8:	ea27 0702 	bic.w	r7, r7, r2
   182dc:	0fff      	lsrs	r7, r7, #31
   182de:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 185a4 <POINTonE2_add_affine+0x2f4>
   182e2:	4cb1      	ldr	r4, [pc, #708]	; (185a8 <POINTonE2_add_affine+0x2f8>)
   182e4:	4643      	mov	r3, r8
   182e6:	4622      	mov	r2, r4
   182e8:	4659      	mov	r1, fp
   182ea:	a864      	add	r0, sp, #400	; 0x190
   182ec:	f7fb fac0 	bl	13870 <sqr_mont_384x>
   182f0:	f8cd 8000 	str.w	r8, [sp]
   182f4:	4623      	mov	r3, r4
   182f6:	465a      	mov	r2, fp
   182f8:	a964      	add	r1, sp, #400	; 0x190
   182fa:	a8ac      	add	r0, sp, #688	; 0x2b0
   182fc:	f7f8 f82a 	bl	10354 <mul_mont_384x>
   18300:	f8cd 8000 	str.w	r8, [sp]
   18304:	4623      	mov	r3, r4
   18306:	f106 0260 	add.w	r2, r6, #96	; 0x60
   1830a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1830c:	4608      	mov	r0, r1
   1830e:	f7f8 f821 	bl	10354 <mul_mont_384x>
   18312:	f1a6 0804 	sub.w	r8, r6, #4
   18316:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   1831a:	4643      	mov	r3, r8
   1831c:	2200      	movs	r2, #0
   1831e:	f853 1f04 	ldr.w	r1, [r3, #4]!
   18322:	430a      	orrs	r2, r1
   18324:	4283      	cmp	r3, r0
   18326:	d1fa      	bne.n	1831e <POINTonE2_add_affine+0x6e>
   18328:	1e53      	subs	r3, r2, #1
   1832a:	ea23 0202 	bic.w	r2, r3, r2
   1832e:	0fd3      	lsrs	r3, r2, #31
   18330:	9302      	str	r3, [sp, #8]
   18332:	4c9d      	ldr	r4, [pc, #628]	; (185a8 <POINTonE2_add_affine+0x2f8>)
   18334:	f8df 926c 	ldr.w	r9, [pc, #620]	; 185a4 <POINTonE2_add_affine+0x2f4>
   18338:	f8cd 9000 	str.w	r9, [sp]
   1833c:	4623      	mov	r3, r4
   1833e:	aa64      	add	r2, sp, #400	; 0x190
   18340:	4631      	mov	r1, r6
   18342:	a84c      	add	r0, sp, #304	; 0x130
   18344:	f7f8 f806 	bl	10354 <mul_mont_384x>
   18348:	260c      	movs	r6, #12
   1834a:	9600      	str	r6, [sp, #0]
   1834c:	4623      	mov	r3, r4
   1834e:	462a      	mov	r2, r5
   18350:	a94c      	add	r1, sp, #304	; 0x130
   18352:	4608      	mov	r0, r1
   18354:	f7f4 f98e 	bl	c674 <sub_mod_n>
   18358:	9600      	str	r6, [sp, #0]
   1835a:	4623      	mov	r3, r4
   1835c:	f105 0230 	add.w	r2, r5, #48	; 0x30
   18360:	a958      	add	r1, sp, #352	; 0x160
   18362:	4608      	mov	r0, r1
   18364:	f7f4 f986 	bl	c674 <sub_mod_n>
   18368:	464b      	mov	r3, r9
   1836a:	4622      	mov	r2, r4
   1836c:	a94c      	add	r1, sp, #304	; 0x130
   1836e:	a834      	add	r0, sp, #208	; 0xd0
   18370:	f7fb fa7e 	bl	13870 <sqr_mont_384x>
   18374:	9600      	str	r6, [sp, #0]
   18376:	4623      	mov	r3, r4
   18378:	aa34      	add	r2, sp, #208	; 0xd0
   1837a:	4611      	mov	r1, r2
   1837c:	a81c      	add	r0, sp, #112	; 0x70
   1837e:	f7f4 fccf 	bl	cd20 <add_mod_n>
   18382:	9600      	str	r6, [sp, #0]
   18384:	4623      	mov	r3, r4
   18386:	aa40      	add	r2, sp, #256	; 0x100
   18388:	4611      	mov	r1, r2
   1838a:	a828      	add	r0, sp, #160	; 0xa0
   1838c:	f7f4 fcc8 	bl	cd20 <add_mod_n>
   18390:	9600      	str	r6, [sp, #0]
   18392:	4623      	mov	r3, r4
   18394:	aa1c      	add	r2, sp, #112	; 0x70
   18396:	4611      	mov	r1, r2
   18398:	4610      	mov	r0, r2
   1839a:	f7f4 fcc1 	bl	cd20 <add_mod_n>
   1839e:	9600      	str	r6, [sp, #0]
   183a0:	4623      	mov	r3, r4
   183a2:	aa28      	add	r2, sp, #160	; 0xa0
   183a4:	4611      	mov	r1, r2
   183a6:	4610      	mov	r0, r2
   183a8:	f7f4 fcba 	bl	cd20 <add_mod_n>
   183ac:	f8cd 9000 	str.w	r9, [sp]
   183b0:	4623      	mov	r3, r4
   183b2:	aa1c      	add	r2, sp, #112	; 0x70
   183b4:	4629      	mov	r1, r5
   183b6:	a894      	add	r0, sp, #592	; 0x250
   183b8:	f7f7 ffcc 	bl	10354 <mul_mont_384x>
   183bc:	f8cd 9000 	str.w	r9, [sp]
   183c0:	4623      	mov	r3, r4
   183c2:	aa1c      	add	r2, sp, #112	; 0x70
   183c4:	a94c      	add	r1, sp, #304	; 0x130
   183c6:	a804      	add	r0, sp, #16
   183c8:	f7f7 ffc4 	bl	10354 <mul_mont_384x>
   183cc:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   183d0:	f8cd 9000 	str.w	r9, [sp]
   183d4:	4623      	mov	r3, r4
   183d6:	4652      	mov	r2, sl
   183d8:	a904      	add	r1, sp, #16
   183da:	a81c      	add	r0, sp, #112	; 0x70
   183dc:	f7f7 ffba 	bl	10354 <mul_mont_384x>
   183e0:	9600      	str	r6, [sp, #0]
   183e2:	4623      	mov	r3, r4
   183e4:	4652      	mov	r2, sl
   183e6:	a9ac      	add	r1, sp, #688	; 0x2b0
   183e8:	4608      	mov	r0, r1
   183ea:	f7f4 f943 	bl	c674 <sub_mod_n>
   183ee:	9600      	str	r6, [sp, #0]
   183f0:	4623      	mov	r3, r4
   183f2:	f105 0290 	add.w	r2, r5, #144	; 0x90
   183f6:	a9b8      	add	r1, sp, #736	; 0x2e0
   183f8:	4608      	mov	r0, r1
   183fa:	f7f4 f93b 	bl	c674 <sub_mod_n>
   183fe:	9600      	str	r6, [sp, #0]
   18400:	4623      	mov	r3, r4
   18402:	aaac      	add	r2, sp, #688	; 0x2b0
   18404:	4611      	mov	r1, r2
   18406:	4610      	mov	r0, r2
   18408:	f7f4 fc8a 	bl	cd20 <add_mod_n>
   1840c:	9600      	str	r6, [sp, #0]
   1840e:	4623      	mov	r3, r4
   18410:	aab8      	add	r2, sp, #736	; 0x2e0
   18412:	4611      	mov	r1, r2
   18414:	4610      	mov	r0, r2
   18416:	f7f4 fc83 	bl	cd20 <add_mod_n>
   1841a:	464b      	mov	r3, r9
   1841c:	4622      	mov	r2, r4
   1841e:	a9ac      	add	r1, sp, #688	; 0x2b0
   18420:	a87c      	add	r0, sp, #496	; 0x1f0
   18422:	f7fb fa25 	bl	13870 <sqr_mont_384x>
   18426:	9600      	str	r6, [sp, #0]
   18428:	4623      	mov	r3, r4
   1842a:	aa04      	add	r2, sp, #16
   1842c:	a97c      	add	r1, sp, #496	; 0x1f0
   1842e:	4608      	mov	r0, r1
   18430:	f7f4 f920 	bl	c674 <sub_mod_n>
   18434:	9600      	str	r6, [sp, #0]
   18436:	4623      	mov	r3, r4
   18438:	aa10      	add	r2, sp, #64	; 0x40
   1843a:	a988      	add	r1, sp, #544	; 0x220
   1843c:	4608      	mov	r0, r1
   1843e:	f7f4 f919 	bl	c674 <sub_mod_n>
   18442:	9600      	str	r6, [sp, #0]
   18444:	4623      	mov	r3, r4
   18446:	aa94      	add	r2, sp, #592	; 0x250
   18448:	a97c      	add	r1, sp, #496	; 0x1f0
   1844a:	4608      	mov	r0, r1
   1844c:	f7f4 f912 	bl	c674 <sub_mod_n>
   18450:	9600      	str	r6, [sp, #0]
   18452:	4623      	mov	r3, r4
   18454:	aaa0      	add	r2, sp, #640	; 0x280
   18456:	a988      	add	r1, sp, #544	; 0x220
   18458:	4608      	mov	r0, r1
   1845a:	f7f4 f90b 	bl	c674 <sub_mod_n>
   1845e:	9600      	str	r6, [sp, #0]
   18460:	4623      	mov	r3, r4
   18462:	aa94      	add	r2, sp, #592	; 0x250
   18464:	a97c      	add	r1, sp, #496	; 0x1f0
   18466:	4608      	mov	r0, r1
   18468:	f7f4 f904 	bl	c674 <sub_mod_n>
   1846c:	9600      	str	r6, [sp, #0]
   1846e:	4623      	mov	r3, r4
   18470:	aaa0      	add	r2, sp, #640	; 0x280
   18472:	a988      	add	r1, sp, #544	; 0x220
   18474:	4608      	mov	r0, r1
   18476:	f7f4 f8fd 	bl	c674 <sub_mod_n>
   1847a:	9600      	str	r6, [sp, #0]
   1847c:	4623      	mov	r3, r4
   1847e:	aa7c      	add	r2, sp, #496	; 0x1f0
   18480:	a994      	add	r1, sp, #592	; 0x250
   18482:	4608      	mov	r0, r1
   18484:	f7f4 f8f6 	bl	c674 <sub_mod_n>
   18488:	9600      	str	r6, [sp, #0]
   1848a:	4623      	mov	r3, r4
   1848c:	aa88      	add	r2, sp, #544	; 0x220
   1848e:	a9a0      	add	r1, sp, #640	; 0x280
   18490:	4608      	mov	r0, r1
   18492:	f7f4 f8ef 	bl	c674 <sub_mod_n>
   18496:	f8cd 9000 	str.w	r9, [sp]
   1849a:	4623      	mov	r3, r4
   1849c:	aaac      	add	r2, sp, #688	; 0x2b0
   1849e:	a994      	add	r1, sp, #592	; 0x250
   184a0:	4608      	mov	r0, r1
   184a2:	f7f7 ff57 	bl	10354 <mul_mont_384x>
   184a6:	9600      	str	r6, [sp, #0]
   184a8:	4623      	mov	r3, r4
   184aa:	aa1c      	add	r2, sp, #112	; 0x70
   184ac:	a994      	add	r1, sp, #592	; 0x250
   184ae:	4608      	mov	r0, r1
   184b0:	f7f4 f8e0 	bl	c674 <sub_mod_n>
   184b4:	9600      	str	r6, [sp, #0]
   184b6:	4623      	mov	r3, r4
   184b8:	aa28      	add	r2, sp, #160	; 0xa0
   184ba:	a9a0      	add	r1, sp, #640	; 0x280
   184bc:	4608      	mov	r0, r1
   184be:	f7f4 f8d9 	bl	c674 <sub_mod_n>
   184c2:	9600      	str	r6, [sp, #0]
   184c4:	4623      	mov	r3, r4
   184c6:	aa1c      	add	r2, sp, #112	; 0x70
   184c8:	a994      	add	r1, sp, #592	; 0x250
   184ca:	4608      	mov	r0, r1
   184cc:	f7f4 f8d2 	bl	c674 <sub_mod_n>
   184d0:	9600      	str	r6, [sp, #0]
   184d2:	4623      	mov	r3, r4
   184d4:	aa28      	add	r2, sp, #160	; 0xa0
   184d6:	a9a0      	add	r1, sp, #640	; 0x280
   184d8:	4608      	mov	r0, r1
   184da:	f7f4 f8cb 	bl	c674 <sub_mod_n>
   184de:	9600      	str	r6, [sp, #0]
   184e0:	4623      	mov	r3, r4
   184e2:	aa4c      	add	r2, sp, #304	; 0x130
   184e4:	4659      	mov	r1, fp
   184e6:	a8ac      	add	r0, sp, #688	; 0x2b0
   184e8:	f7f4 fc1a 	bl	cd20 <add_mod_n>
   184ec:	9600      	str	r6, [sp, #0]
   184ee:	4623      	mov	r3, r4
   184f0:	aa58      	add	r2, sp, #352	; 0x160
   184f2:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   184f6:	a8b8      	add	r0, sp, #736	; 0x2e0
   184f8:	f7f4 fc12 	bl	cd20 <add_mod_n>
   184fc:	464b      	mov	r3, r9
   184fe:	4622      	mov	r2, r4
   18500:	a9ac      	add	r1, sp, #688	; 0x2b0
   18502:	4608      	mov	r0, r1
   18504:	f7fb f9b4 	bl	13870 <sqr_mont_384x>
   18508:	9600      	str	r6, [sp, #0]
   1850a:	4623      	mov	r3, r4
   1850c:	aa64      	add	r2, sp, #400	; 0x190
   1850e:	a9ac      	add	r1, sp, #688	; 0x2b0
   18510:	4608      	mov	r0, r1
   18512:	f7f4 f8af 	bl	c674 <sub_mod_n>
   18516:	9600      	str	r6, [sp, #0]
   18518:	4623      	mov	r3, r4
   1851a:	aa70      	add	r2, sp, #448	; 0x1c0
   1851c:	a9b8      	add	r1, sp, #736	; 0x2e0
   1851e:	4608      	mov	r0, r1
   18520:	f7f4 f8a8 	bl	c674 <sub_mod_n>
   18524:	9600      	str	r6, [sp, #0]
   18526:	4623      	mov	r3, r4
   18528:	aa34      	add	r2, sp, #208	; 0xd0
   1852a:	a9ac      	add	r1, sp, #688	; 0x2b0
   1852c:	4608      	mov	r0, r1
   1852e:	f7f4 f8a1 	bl	c674 <sub_mod_n>
   18532:	9600      	str	r6, [sp, #0]
   18534:	4623      	mov	r3, r4
   18536:	aa40      	add	r2, sp, #256	; 0x100
   18538:	a9b8      	add	r1, sp, #736	; 0x2e0
   1853a:	4608      	mov	r0, r1
   1853c:	f7f4 f89a 	bl	c674 <sub_mod_n>
   18540:	427f      	negs	r7, r7
   18542:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   18546:	aaab      	add	r2, sp, #684	; 0x2ac
   18548:	34ec      	adds	r4, #236	; 0xec
   1854a:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1854e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   18552:	4043      	eors	r3, r0
   18554:	403b      	ands	r3, r7
   18556:	4043      	eors	r3, r0
   18558:	6013      	str	r3, [r2, #0]
   1855a:	428c      	cmp	r4, r1
   1855c:	d1f5      	bne.n	1854a <POINTonE2_add_affine+0x29a>
   1855e:	aa7c      	add	r2, sp, #496	; 0x1f0
   18560:	acac      	add	r4, sp, #688	; 0x2b0
   18562:	4611      	mov	r1, r2
   18564:	6808      	ldr	r0, [r1, #0]
   18566:	f858 3f04 	ldr.w	r3, [r8, #4]!
   1856a:	4043      	eors	r3, r0
   1856c:	403b      	ands	r3, r7
   1856e:	4043      	eors	r3, r0
   18570:	f841 3b04 	str.w	r3, [r1], #4
   18574:	428c      	cmp	r4, r1
   18576:	d1f5      	bne.n	18564 <POINTonE2_add_affine+0x2b4>
   18578:	9b02      	ldr	r3, [sp, #8]
   1857a:	425c      	negs	r4, r3
   1857c:	3d04      	subs	r5, #4
   1857e:	9b03      	ldr	r3, [sp, #12]
   18580:	1f18      	subs	r0, r3, #4
   18582:	f502 7690 	add.w	r6, r2, #288	; 0x120
   18586:	f852 1b04 	ldr.w	r1, [r2], #4
   1858a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   1858e:	404b      	eors	r3, r1
   18590:	4023      	ands	r3, r4
   18592:	404b      	eors	r3, r1
   18594:	f840 3f04 	str.w	r3, [r0, #4]!
   18598:	4296      	cmp	r6, r2
   1859a:	d1f4      	bne.n	18586 <POINTonE2_add_affine+0x2d6>
   1859c:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   185a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185a4:	fffcfffd 	.word	0xfffcfffd
   185a8:	00024108 	.word	0x00024108

000185ac <blst_fr_add>:
   185ac:	b500      	push	{lr}
   185ae:	b083      	sub	sp, #12
   185b0:	2308      	movs	r3, #8
   185b2:	9300      	str	r3, [sp, #0]
   185b4:	4b02      	ldr	r3, [pc, #8]	; (185c0 <blst_fr_add+0x14>)
   185b6:	f7f4 fbb3 	bl	cd20 <add_mod_n>
   185ba:	b003      	add	sp, #12
   185bc:	f85d fb04 	ldr.w	pc, [sp], #4
   185c0:	000254c8 	.word	0x000254c8

000185c4 <blst_fr_sub>:
   185c4:	b500      	push	{lr}
   185c6:	b083      	sub	sp, #12
   185c8:	2308      	movs	r3, #8
   185ca:	9300      	str	r3, [sp, #0]
   185cc:	4b02      	ldr	r3, [pc, #8]	; (185d8 <blst_fr_sub+0x14>)
   185ce:	f7f4 f851 	bl	c674 <sub_mod_n>
   185d2:	b003      	add	sp, #12
   185d4:	f85d fb04 	ldr.w	pc, [sp], #4
   185d8:	000254c8 	.word	0x000254c8

000185dc <blst_fr_mul_by_3>:
   185dc:	b508      	push	{r3, lr}
   185de:	2308      	movs	r3, #8
   185e0:	4a01      	ldr	r2, [pc, #4]	; (185e8 <blst_fr_mul_by_3+0xc>)
   185e2:	f7f4 fc25 	bl	ce30 <mul_by_3_mod_n>
   185e6:	bd08      	pop	{r3, pc}
   185e8:	000254c8 	.word	0x000254c8

000185ec <blst_fr_lshift>:
   185ec:	b500      	push	{lr}
   185ee:	b083      	sub	sp, #12
   185f0:	2308      	movs	r3, #8
   185f2:	9300      	str	r3, [sp, #0]
   185f4:	4b02      	ldr	r3, [pc, #8]	; (18600 <blst_fr_lshift+0x14>)
   185f6:	f7f4 fcbb 	bl	cf70 <lshift_mod_n>
   185fa:	b003      	add	sp, #12
   185fc:	f85d fb04 	ldr.w	pc, [sp], #4
   18600:	000254c8 	.word	0x000254c8

00018604 <blst_fr_rshift>:
   18604:	b500      	push	{lr}
   18606:	b083      	sub	sp, #12
   18608:	2308      	movs	r3, #8
   1860a:	9300      	str	r3, [sp, #0]
   1860c:	4b02      	ldr	r3, [pc, #8]	; (18618 <blst_fr_rshift+0x14>)
   1860e:	f7f4 f899 	bl	c744 <rshift_mod_n>
   18612:	b003      	add	sp, #12
   18614:	f85d fb04 	ldr.w	pc, [sp], #4
   18618:	000254c8 	.word	0x000254c8

0001861c <blst_fr_mul>:
   1861c:	b500      	push	{lr}
   1861e:	b083      	sub	sp, #12
   18620:	2308      	movs	r3, #8
   18622:	9301      	str	r3, [sp, #4]
   18624:	f04f 33ff 	mov.w	r3, #4294967295
   18628:	9300      	str	r3, [sp, #0]
   1862a:	4b03      	ldr	r3, [pc, #12]	; (18638 <blst_fr_mul+0x1c>)
   1862c:	f7f4 f9d0 	bl	c9d0 <mul_mont_n>
   18630:	b003      	add	sp, #12
   18632:	f85d fb04 	ldr.w	pc, [sp], #4
   18636:	bf00      	nop
   18638:	000254c8 	.word	0x000254c8

0001863c <blst_fr_sqr>:
   1863c:	b500      	push	{lr}
   1863e:	b083      	sub	sp, #12
   18640:	460a      	mov	r2, r1
   18642:	2308      	movs	r3, #8
   18644:	9301      	str	r3, [sp, #4]
   18646:	f04f 33ff 	mov.w	r3, #4294967295
   1864a:	9300      	str	r3, [sp, #0]
   1864c:	4b02      	ldr	r3, [pc, #8]	; (18658 <blst_fr_sqr+0x1c>)
   1864e:	f7f4 f9bf 	bl	c9d0 <mul_mont_n>
   18652:	b003      	add	sp, #12
   18654:	f85d fb04 	ldr.w	pc, [sp], #4
   18658:	000254c8 	.word	0x000254c8

0001865c <blst_fr_cneg>:
   1865c:	b500      	push	{lr}
   1865e:	b083      	sub	sp, #12
   18660:	1e53      	subs	r3, r2, #1
   18662:	ea23 0202 	bic.w	r2, r3, r2
   18666:	2308      	movs	r3, #8
   18668:	9300      	str	r3, [sp, #0]
   1866a:	4b04      	ldr	r3, [pc, #16]	; (1867c <blst_fr_cneg+0x20>)
   1866c:	43d2      	mvns	r2, r2
   1866e:	0fd2      	lsrs	r2, r2, #31
   18670:	f7f5 f9ea 	bl	da48 <cneg_mod_n>
   18674:	b003      	add	sp, #12
   18676:	f85d fb04 	ldr.w	pc, [sp], #4
   1867a:	bf00      	nop
   1867c:	000254c8 	.word	0x000254c8

00018680 <blst_fr_to>:
   18680:	b500      	push	{lr}
   18682:	b083      	sub	sp, #12
   18684:	4a07      	ldr	r2, [pc, #28]	; (186a4 <blst_fr_to+0x24>)
   18686:	2308      	movs	r3, #8
   18688:	9301      	str	r3, [sp, #4]
   1868a:	f04f 33ff 	mov.w	r3, #4294967295
   1868e:	9300      	str	r3, [sp, #0]
   18690:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   18694:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   18698:	f7f4 f99a 	bl	c9d0 <mul_mont_n>
   1869c:	b003      	add	sp, #12
   1869e:	f85d fb04 	ldr.w	pc, [sp], #4
   186a2:	bf00      	nop
   186a4:	00025200 	.word	0x00025200

000186a8 <blst_fr_from>:
   186a8:	b500      	push	{lr}
   186aa:	b083      	sub	sp, #12
   186ac:	2308      	movs	r3, #8
   186ae:	9300      	str	r3, [sp, #0]
   186b0:	f04f 33ff 	mov.w	r3, #4294967295
   186b4:	4a02      	ldr	r2, [pc, #8]	; (186c0 <blst_fr_from+0x18>)
   186b6:	f7f4 fcbd 	bl	d034 <from_mont_n>
   186ba:	b003      	add	sp, #12
   186bc:	f85d fb04 	ldr.w	pc, [sp], #4
   186c0:	000254c8 	.word	0x000254c8

000186c4 <blst_fr_eucl_inverse>:
   186c4:	b500      	push	{lr}
   186c6:	b083      	sub	sp, #12
   186c8:	4a05      	ldr	r2, [pc, #20]	; (186e0 <blst_fr_eucl_inverse+0x1c>)
   186ca:	2308      	movs	r3, #8
   186cc:	9300      	str	r3, [sp, #0]
   186ce:	f502 6388 	add.w	r3, r2, #1088	; 0x440
   186d2:	f502 7232 	add.w	r2, r2, #712	; 0x2c8
   186d6:	f7f6 f99b 	bl	ea10 <eucl_inverse_mod_n>
   186da:	b003      	add	sp, #12
   186dc:	f85d fb04 	ldr.w	pc, [sp], #4
   186e0:	00025200 	.word	0x00025200

000186e4 <blst_fp_add>:
   186e4:	b500      	push	{lr}
   186e6:	b083      	sub	sp, #12
   186e8:	230c      	movs	r3, #12
   186ea:	9300      	str	r3, [sp, #0]
   186ec:	4b02      	ldr	r3, [pc, #8]	; (186f8 <blst_fp_add+0x14>)
   186ee:	f7f4 fb17 	bl	cd20 <add_mod_n>
   186f2:	b003      	add	sp, #12
   186f4:	f85d fb04 	ldr.w	pc, [sp], #4
   186f8:	00024108 	.word	0x00024108

000186fc <blst_fp_sub>:
   186fc:	b500      	push	{lr}
   186fe:	b083      	sub	sp, #12
   18700:	230c      	movs	r3, #12
   18702:	9300      	str	r3, [sp, #0]
   18704:	4b02      	ldr	r3, [pc, #8]	; (18710 <blst_fp_sub+0x14>)
   18706:	f7f3 ffb5 	bl	c674 <sub_mod_n>
   1870a:	b003      	add	sp, #12
   1870c:	f85d fb04 	ldr.w	pc, [sp], #4
   18710:	00024108 	.word	0x00024108

00018714 <blst_fp_mul_by_3>:
   18714:	b508      	push	{r3, lr}
   18716:	230c      	movs	r3, #12
   18718:	4a01      	ldr	r2, [pc, #4]	; (18720 <blst_fp_mul_by_3+0xc>)
   1871a:	f7f4 fb89 	bl	ce30 <mul_by_3_mod_n>
   1871e:	bd08      	pop	{r3, pc}
   18720:	00024108 	.word	0x00024108

00018724 <blst_fp_mul_by_8>:
   18724:	b500      	push	{lr}
   18726:	b083      	sub	sp, #12
   18728:	230c      	movs	r3, #12
   1872a:	9300      	str	r3, [sp, #0]
   1872c:	4b03      	ldr	r3, [pc, #12]	; (1873c <blst_fp_mul_by_8+0x18>)
   1872e:	2203      	movs	r2, #3
   18730:	f7f4 fc1e 	bl	cf70 <lshift_mod_n>
   18734:	b003      	add	sp, #12
   18736:	f85d fb04 	ldr.w	pc, [sp], #4
   1873a:	bf00      	nop
   1873c:	00024108 	.word	0x00024108

00018740 <blst_fp_lshift>:
   18740:	b500      	push	{lr}
   18742:	b083      	sub	sp, #12
   18744:	230c      	movs	r3, #12
   18746:	9300      	str	r3, [sp, #0]
   18748:	4b02      	ldr	r3, [pc, #8]	; (18754 <blst_fp_lshift+0x14>)
   1874a:	f7f4 fc11 	bl	cf70 <lshift_mod_n>
   1874e:	b003      	add	sp, #12
   18750:	f85d fb04 	ldr.w	pc, [sp], #4
   18754:	00024108 	.word	0x00024108

00018758 <blst_fp_mul>:
   18758:	b500      	push	{lr}
   1875a:	b083      	sub	sp, #12
   1875c:	230c      	movs	r3, #12
   1875e:	9301      	str	r3, [sp, #4]
   18760:	4b03      	ldr	r3, [pc, #12]	; (18770 <blst_fp_mul+0x18>)
   18762:	9300      	str	r3, [sp, #0]
   18764:	4b03      	ldr	r3, [pc, #12]	; (18774 <blst_fp_mul+0x1c>)
   18766:	f7f4 f933 	bl	c9d0 <mul_mont_n>
   1876a:	b003      	add	sp, #12
   1876c:	f85d fb04 	ldr.w	pc, [sp], #4
   18770:	fffcfffd 	.word	0xfffcfffd
   18774:	00024108 	.word	0x00024108

00018778 <blst_fp_sqr>:
   18778:	b500      	push	{lr}
   1877a:	b083      	sub	sp, #12
   1877c:	460a      	mov	r2, r1
   1877e:	230c      	movs	r3, #12
   18780:	9301      	str	r3, [sp, #4]
   18782:	4b04      	ldr	r3, [pc, #16]	; (18794 <blst_fp_sqr+0x1c>)
   18784:	9300      	str	r3, [sp, #0]
   18786:	4b04      	ldr	r3, [pc, #16]	; (18798 <blst_fp_sqr+0x20>)
   18788:	f7f4 f922 	bl	c9d0 <mul_mont_n>
   1878c:	b003      	add	sp, #12
   1878e:	f85d fb04 	ldr.w	pc, [sp], #4
   18792:	bf00      	nop
   18794:	fffcfffd 	.word	0xfffcfffd
   18798:	00024108 	.word	0x00024108

0001879c <blst_fp_cneg>:
   1879c:	b500      	push	{lr}
   1879e:	b083      	sub	sp, #12
   187a0:	1e53      	subs	r3, r2, #1
   187a2:	ea23 0202 	bic.w	r2, r3, r2
   187a6:	230c      	movs	r3, #12
   187a8:	9300      	str	r3, [sp, #0]
   187aa:	4b04      	ldr	r3, [pc, #16]	; (187bc <blst_fp_cneg+0x20>)
   187ac:	43d2      	mvns	r2, r2
   187ae:	0fd2      	lsrs	r2, r2, #31
   187b0:	f7f5 f94a 	bl	da48 <cneg_mod_n>
   187b4:	b003      	add	sp, #12
   187b6:	f85d fb04 	ldr.w	pc, [sp], #4
   187ba:	bf00      	nop
   187bc:	00024108 	.word	0x00024108

000187c0 <blst_fp_to>:
   187c0:	b500      	push	{lr}
   187c2:	b083      	sub	sp, #12
   187c4:	4b05      	ldr	r3, [pc, #20]	; (187dc <blst_fp_to+0x1c>)
   187c6:	220c      	movs	r2, #12
   187c8:	9201      	str	r2, [sp, #4]
   187ca:	4a05      	ldr	r2, [pc, #20]	; (187e0 <blst_fp_to+0x20>)
   187cc:	9200      	str	r2, [sp, #0]
   187ce:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   187d2:	f7f4 f8fd 	bl	c9d0 <mul_mont_n>
   187d6:	b003      	add	sp, #12
   187d8:	f85d fb04 	ldr.w	pc, [sp], #4
   187dc:	00024108 	.word	0x00024108
   187e0:	fffcfffd 	.word	0xfffcfffd

000187e4 <blst_fp_from>:
   187e4:	b500      	push	{lr}
   187e6:	b083      	sub	sp, #12
   187e8:	230c      	movs	r3, #12
   187ea:	9300      	str	r3, [sp, #0]
   187ec:	4b03      	ldr	r3, [pc, #12]	; (187fc <blst_fp_from+0x18>)
   187ee:	4a04      	ldr	r2, [pc, #16]	; (18800 <blst_fp_from+0x1c>)
   187f0:	f7f4 fc20 	bl	d034 <from_mont_n>
   187f4:	b003      	add	sp, #12
   187f6:	f85d fb04 	ldr.w	pc, [sp], #4
   187fa:	bf00      	nop
   187fc:	fffcfffd 	.word	0xfffcfffd
   18800:	00024108 	.word	0x00024108

00018804 <blst_fp_from_uint32>:
   18804:	b500      	push	{lr}
   18806:	b083      	sub	sp, #12
   18808:	4b05      	ldr	r3, [pc, #20]	; (18820 <blst_fp_from_uint32+0x1c>)
   1880a:	220c      	movs	r2, #12
   1880c:	9201      	str	r2, [sp, #4]
   1880e:	4a05      	ldr	r2, [pc, #20]	; (18824 <blst_fp_from_uint32+0x20>)
   18810:	9200      	str	r2, [sp, #0]
   18812:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   18816:	f7f4 f8db 	bl	c9d0 <mul_mont_n>
   1881a:	b003      	add	sp, #12
   1881c:	f85d fb04 	ldr.w	pc, [sp], #4
   18820:	00024108 	.word	0x00024108
   18824:	fffcfffd 	.word	0xfffcfffd

00018828 <blst_uint32_from_fp>:
   18828:	b500      	push	{lr}
   1882a:	b083      	sub	sp, #12
   1882c:	230c      	movs	r3, #12
   1882e:	9300      	str	r3, [sp, #0]
   18830:	4b03      	ldr	r3, [pc, #12]	; (18840 <blst_uint32_from_fp+0x18>)
   18832:	4a04      	ldr	r2, [pc, #16]	; (18844 <blst_uint32_from_fp+0x1c>)
   18834:	f7f4 fbfe 	bl	d034 <from_mont_n>
   18838:	b003      	add	sp, #12
   1883a:	f85d fb04 	ldr.w	pc, [sp], #4
   1883e:	bf00      	nop
   18840:	fffcfffd 	.word	0xfffcfffd
   18844:	00024108 	.word	0x00024108

00018848 <blst_fp_from_uint64>:
   18848:	b500      	push	{lr}
   1884a:	b083      	sub	sp, #12
   1884c:	4b05      	ldr	r3, [pc, #20]	; (18864 <blst_fp_from_uint64+0x1c>)
   1884e:	220c      	movs	r2, #12
   18850:	9201      	str	r2, [sp, #4]
   18852:	4a05      	ldr	r2, [pc, #20]	; (18868 <blst_fp_from_uint64+0x20>)
   18854:	9200      	str	r2, [sp, #0]
   18856:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1885a:	f7f4 f8b9 	bl	c9d0 <mul_mont_n>
   1885e:	b003      	add	sp, #12
   18860:	f85d fb04 	ldr.w	pc, [sp], #4
   18864:	00024108 	.word	0x00024108
   18868:	fffcfffd 	.word	0xfffcfffd

0001886c <blst_uint64_from_fp>:
   1886c:	b500      	push	{lr}
   1886e:	b083      	sub	sp, #12
   18870:	230c      	movs	r3, #12
   18872:	9300      	str	r3, [sp, #0]
   18874:	4b03      	ldr	r3, [pc, #12]	; (18884 <blst_uint64_from_fp+0x18>)
   18876:	4a04      	ldr	r2, [pc, #16]	; (18888 <blst_uint64_from_fp+0x1c>)
   18878:	f7f4 fbdc 	bl	d034 <from_mont_n>
   1887c:	b003      	add	sp, #12
   1887e:	f85d fb04 	ldr.w	pc, [sp], #4
   18882:	bf00      	nop
   18884:	fffcfffd 	.word	0xfffcfffd
   18888:	00024108 	.word	0x00024108

0001888c <blst_fp_from_bendian>:
   1888c:	b510      	push	{r4, lr}
   1888e:	b08e      	sub	sp, #56	; 0x38
   18890:	f101 0e30 	add.w	lr, r1, #48	; 0x30
   18894:	460a      	mov	r2, r1
   18896:	2400      	movs	r4, #0
   18898:	f101 0c2f 	add.w	ip, r1, #47	; 0x2f
   1889c:	ebac 0302 	sub.w	r3, ip, r2
   188a0:	f812 1b01 	ldrb.w	r1, [r2], #1
   188a4:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
   188a8:	f023 0303 	bic.w	r3, r3, #3
   188ac:	a90e      	add	r1, sp, #56	; 0x38
   188ae:	440b      	add	r3, r1
   188b0:	f843 4c30 	str.w	r4, [r3, #-48]
   188b4:	4572      	cmp	r2, lr
   188b6:	d1f1      	bne.n	1889c <blst_fp_from_bendian+0x10>
   188b8:	4b05      	ldr	r3, [pc, #20]	; (188d0 <blst_fp_from_bendian+0x44>)
   188ba:	220c      	movs	r2, #12
   188bc:	9201      	str	r2, [sp, #4]
   188be:	4a05      	ldr	r2, [pc, #20]	; (188d4 <blst_fp_from_bendian+0x48>)
   188c0:	9200      	str	r2, [sp, #0]
   188c2:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   188c6:	a902      	add	r1, sp, #8
   188c8:	f7f4 f882 	bl	c9d0 <mul_mont_n>
   188cc:	b00e      	add	sp, #56	; 0x38
   188ce:	bd10      	pop	{r4, pc}
   188d0:	00024108 	.word	0x00024108
   188d4:	fffcfffd 	.word	0xfffcfffd

000188d8 <blst_bendian_from_fp>:
   188d8:	b510      	push	{r4, lr}
   188da:	b08e      	sub	sp, #56	; 0x38
   188dc:	4604      	mov	r4, r0
   188de:	230c      	movs	r3, #12
   188e0:	9300      	str	r3, [sp, #0]
   188e2:	4b0e      	ldr	r3, [pc, #56]	; (1891c <blst_bendian_from_fp+0x44>)
   188e4:	4a0e      	ldr	r2, [pc, #56]	; (18920 <blst_bendian_from_fp+0x48>)
   188e6:	a802      	add	r0, sp, #8
   188e8:	f7f4 fba4 	bl	d034 <from_mont_n>
   188ec:	f104 0c30 	add.w	ip, r4, #48	; 0x30
   188f0:	4622      	mov	r2, r4
   188f2:	f104 002f 	add.w	r0, r4, #47	; 0x2f
   188f6:	1a83      	subs	r3, r0, r2
   188f8:	f023 0103 	bic.w	r1, r3, #3
   188fc:	ac0e      	add	r4, sp, #56	; 0x38
   188fe:	4421      	add	r1, r4
   18900:	f003 0303 	and.w	r3, r3, #3
   18904:	00db      	lsls	r3, r3, #3
   18906:	f851 1c30 	ldr.w	r1, [r1, #-48]
   1890a:	fa21 f303 	lsr.w	r3, r1, r3
   1890e:	f802 3b01 	strb.w	r3, [r2], #1
   18912:	4562      	cmp	r2, ip
   18914:	d1ef      	bne.n	188f6 <blst_bendian_from_fp+0x1e>
   18916:	b00e      	add	sp, #56	; 0x38
   18918:	bd10      	pop	{r4, pc}
   1891a:	bf00      	nop
   1891c:	fffcfffd 	.word	0xfffcfffd
   18920:	00024108 	.word	0x00024108

00018924 <blst_fp_from_lendian>:
   18924:	b510      	push	{r4, lr}
   18926:	b08e      	sub	sp, #56	; 0x38
   18928:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1892c:	2400      	movs	r4, #0
   1892e:	ea6f 0e01 	mvn.w	lr, r1
   18932:	eb0e 0302 	add.w	r3, lr, r2
   18936:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1893a:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   1893e:	f023 0303 	bic.w	r3, r3, #3
   18942:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
   18946:	4463      	add	r3, ip
   18948:	f843 4c30 	str.w	r4, [r3, #-48]
   1894c:	428a      	cmp	r2, r1
   1894e:	d1f0      	bne.n	18932 <blst_fp_from_lendian+0xe>
   18950:	4b05      	ldr	r3, [pc, #20]	; (18968 <blst_fp_from_lendian+0x44>)
   18952:	220c      	movs	r2, #12
   18954:	9201      	str	r2, [sp, #4]
   18956:	4a05      	ldr	r2, [pc, #20]	; (1896c <blst_fp_from_lendian+0x48>)
   18958:	9200      	str	r2, [sp, #0]
   1895a:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   1895e:	a902      	add	r1, sp, #8
   18960:	f7f4 f836 	bl	c9d0 <mul_mont_n>
   18964:	b00e      	add	sp, #56	; 0x38
   18966:	bd10      	pop	{r4, pc}
   18968:	00024108 	.word	0x00024108
   1896c:	fffcfffd 	.word	0xfffcfffd

00018970 <blst_lendian_from_fp>:
   18970:	b530      	push	{r4, r5, lr}
   18972:	b08f      	sub	sp, #60	; 0x3c
   18974:	4604      	mov	r4, r0
   18976:	ad02      	add	r5, sp, #8
   18978:	230c      	movs	r3, #12
   1897a:	9300      	str	r3, [sp, #0]
   1897c:	4b0c      	ldr	r3, [pc, #48]	; (189b0 <blst_lendian_from_fp+0x40>)
   1897e:	4a0d      	ldr	r2, [pc, #52]	; (189b4 <blst_lendian_from_fp+0x44>)
   18980:	4628      	mov	r0, r5
   18982:	f7f4 fb57 	bl	d034 <from_mont_n>
   18986:	42ac      	cmp	r4, r5
   18988:	d00f      	beq.n	189aa <blst_lendian_from_fp+0x3a>
   1898a:	4628      	mov	r0, r5
   1898c:	1d21      	adds	r1, r4, #4
   1898e:	ac0e      	add	r4, sp, #56	; 0x38
   18990:	e002      	b.n	18998 <blst_lendian_from_fp+0x28>
   18992:	3104      	adds	r1, #4
   18994:	42a0      	cmp	r0, r4
   18996:	d008      	beq.n	189aa <blst_lendian_from_fp+0x3a>
   18998:	1f0a      	subs	r2, r1, #4
   1899a:	f850 3b04 	ldr.w	r3, [r0], #4
   1899e:	f802 3b01 	strb.w	r3, [r2], #1
   189a2:	0a1b      	lsrs	r3, r3, #8
   189a4:	428a      	cmp	r2, r1
   189a6:	d1fa      	bne.n	1899e <blst_lendian_from_fp+0x2e>
   189a8:	e7f3      	b.n	18992 <blst_lendian_from_fp+0x22>
   189aa:	b00f      	add	sp, #60	; 0x3c
   189ac:	bd30      	pop	{r4, r5, pc}
   189ae:	bf00      	nop
   189b0:	fffcfffd 	.word	0xfffcfffd
   189b4:	00024108 	.word	0x00024108

000189b8 <blst_fp2_add>:
   189b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189bc:	b082      	sub	sp, #8
   189be:	4604      	mov	r4, r0
   189c0:	460d      	mov	r5, r1
   189c2:	4616      	mov	r6, r2
   189c4:	4f0a      	ldr	r7, [pc, #40]	; (189f0 <blst_fp2_add+0x38>)
   189c6:	f04f 080c 	mov.w	r8, #12
   189ca:	f8cd 8000 	str.w	r8, [sp]
   189ce:	463b      	mov	r3, r7
   189d0:	f7f4 f9a6 	bl	cd20 <add_mod_n>
   189d4:	f8cd 8000 	str.w	r8, [sp]
   189d8:	463b      	mov	r3, r7
   189da:	f106 0230 	add.w	r2, r6, #48	; 0x30
   189de:	f105 0130 	add.w	r1, r5, #48	; 0x30
   189e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   189e6:	f7f4 f99b 	bl	cd20 <add_mod_n>
   189ea:	b002      	add	sp, #8
   189ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   189f0:	00024108 	.word	0x00024108

000189f4 <blst_fp2_sub>:
   189f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   189f8:	b082      	sub	sp, #8
   189fa:	4604      	mov	r4, r0
   189fc:	460d      	mov	r5, r1
   189fe:	4616      	mov	r6, r2
   18a00:	4f0a      	ldr	r7, [pc, #40]	; (18a2c <blst_fp2_sub+0x38>)
   18a02:	f04f 080c 	mov.w	r8, #12
   18a06:	f8cd 8000 	str.w	r8, [sp]
   18a0a:	463b      	mov	r3, r7
   18a0c:	f7f3 fe32 	bl	c674 <sub_mod_n>
   18a10:	f8cd 8000 	str.w	r8, [sp]
   18a14:	463b      	mov	r3, r7
   18a16:	f106 0230 	add.w	r2, r6, #48	; 0x30
   18a1a:	f105 0130 	add.w	r1, r5, #48	; 0x30
   18a1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18a22:	f7f3 fe27 	bl	c674 <sub_mod_n>
   18a26:	b002      	add	sp, #8
   18a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a2c:	00024108 	.word	0x00024108

00018a30 <blst_fp2_mul_by_3>:
   18a30:	b570      	push	{r4, r5, r6, lr}
   18a32:	4604      	mov	r4, r0
   18a34:	460d      	mov	r5, r1
   18a36:	4e07      	ldr	r6, [pc, #28]	; (18a54 <blst_fp2_mul_by_3+0x24>)
   18a38:	230c      	movs	r3, #12
   18a3a:	4632      	mov	r2, r6
   18a3c:	f7f4 f9f8 	bl	ce30 <mul_by_3_mod_n>
   18a40:	230c      	movs	r3, #12
   18a42:	4632      	mov	r2, r6
   18a44:	f105 0130 	add.w	r1, r5, #48	; 0x30
   18a48:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18a4c:	f7f4 f9f0 	bl	ce30 <mul_by_3_mod_n>
   18a50:	bd70      	pop	{r4, r5, r6, pc}
   18a52:	bf00      	nop
   18a54:	00024108 	.word	0x00024108

00018a58 <blst_fp2_mul_by_8>:
   18a58:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a5a:	b083      	sub	sp, #12
   18a5c:	4604      	mov	r4, r0
   18a5e:	460d      	mov	r5, r1
   18a60:	4e08      	ldr	r6, [pc, #32]	; (18a84 <blst_fp2_mul_by_8+0x2c>)
   18a62:	270c      	movs	r7, #12
   18a64:	9700      	str	r7, [sp, #0]
   18a66:	4633      	mov	r3, r6
   18a68:	2203      	movs	r2, #3
   18a6a:	f7f4 fa81 	bl	cf70 <lshift_mod_n>
   18a6e:	9700      	str	r7, [sp, #0]
   18a70:	4633      	mov	r3, r6
   18a72:	2203      	movs	r2, #3
   18a74:	f105 0130 	add.w	r1, r5, #48	; 0x30
   18a78:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18a7c:	f7f4 fa78 	bl	cf70 <lshift_mod_n>
   18a80:	b003      	add	sp, #12
   18a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18a84:	00024108 	.word	0x00024108

00018a88 <blst_fp2_lshift>:
   18a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a8c:	b082      	sub	sp, #8
   18a8e:	4604      	mov	r4, r0
   18a90:	460d      	mov	r5, r1
   18a92:	4616      	mov	r6, r2
   18a94:	4f0a      	ldr	r7, [pc, #40]	; (18ac0 <blst_fp2_lshift+0x38>)
   18a96:	f04f 080c 	mov.w	r8, #12
   18a9a:	f8cd 8000 	str.w	r8, [sp]
   18a9e:	463b      	mov	r3, r7
   18aa0:	f7f4 fa66 	bl	cf70 <lshift_mod_n>
   18aa4:	f8cd 8000 	str.w	r8, [sp]
   18aa8:	463b      	mov	r3, r7
   18aaa:	4632      	mov	r2, r6
   18aac:	f105 0130 	add.w	r1, r5, #48	; 0x30
   18ab0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   18ab4:	f7f4 fa5c 	bl	cf70 <lshift_mod_n>
   18ab8:	b002      	add	sp, #8
   18aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18abe:	bf00      	nop
   18ac0:	00024108 	.word	0x00024108

00018ac4 <blst_fp2_mul>:
   18ac4:	b500      	push	{lr}
   18ac6:	b083      	sub	sp, #12
   18ac8:	4b03      	ldr	r3, [pc, #12]	; (18ad8 <blst_fp2_mul+0x14>)
   18aca:	9300      	str	r3, [sp, #0]
   18acc:	4b03      	ldr	r3, [pc, #12]	; (18adc <blst_fp2_mul+0x18>)
   18ace:	f7f7 fc41 	bl	10354 <mul_mont_384x>
   18ad2:	b003      	add	sp, #12
   18ad4:	f85d fb04 	ldr.w	pc, [sp], #4
   18ad8:	fffcfffd 	.word	0xfffcfffd
   18adc:	00024108 	.word	0x00024108

00018ae0 <blst_fp2_sqr>:
   18ae0:	b508      	push	{r3, lr}
   18ae2:	4b02      	ldr	r3, [pc, #8]	; (18aec <blst_fp2_sqr+0xc>)
   18ae4:	4a02      	ldr	r2, [pc, #8]	; (18af0 <blst_fp2_sqr+0x10>)
   18ae6:	f7fa fec3 	bl	13870 <sqr_mont_384x>
   18aea:	bd08      	pop	{r3, pc}
   18aec:	fffcfffd 	.word	0xfffcfffd
   18af0:	00024108 	.word	0x00024108

00018af4 <blst_fp2_cneg>:
   18af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18af8:	b082      	sub	sp, #8
   18afa:	4605      	mov	r5, r0
   18afc:	460e      	mov	r6, r1
   18afe:	1e54      	subs	r4, r2, #1
   18b00:	ea24 0402 	bic.w	r4, r4, r2
   18b04:	43e4      	mvns	r4, r4
   18b06:	0fe4      	lsrs	r4, r4, #31
   18b08:	4f0a      	ldr	r7, [pc, #40]	; (18b34 <blst_fp2_cneg+0x40>)
   18b0a:	f04f 080c 	mov.w	r8, #12
   18b0e:	f8cd 8000 	str.w	r8, [sp]
   18b12:	463b      	mov	r3, r7
   18b14:	4622      	mov	r2, r4
   18b16:	f7f4 ff97 	bl	da48 <cneg_mod_n>
   18b1a:	f8cd 8000 	str.w	r8, [sp]
   18b1e:	463b      	mov	r3, r7
   18b20:	4622      	mov	r2, r4
   18b22:	f106 0130 	add.w	r1, r6, #48	; 0x30
   18b26:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18b2a:	f7f4 ff8d 	bl	da48 <cneg_mod_n>
   18b2e:	b002      	add	sp, #8
   18b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b34:	00024108 	.word	0x00024108

00018b38 <blst_p1_add>:
   18b38:	b508      	push	{r3, lr}
   18b3a:	f7f5 fc97 	bl	e46c <POINTonE1_add>
   18b3e:	bd08      	pop	{r3, pc}

00018b40 <blst_p1_add_or_double>:
   18b40:	b508      	push	{r3, lr}
   18b42:	2300      	movs	r3, #0
   18b44:	f7f6 f9ea 	bl	ef1c <POINTonE1_dadd>
   18b48:	bd08      	pop	{r3, pc}

00018b4a <blst_p1_add_affine>:
   18b4a:	b508      	push	{r3, lr}
   18b4c:	f7f5 fac0 	bl	e0d0 <POINTonE1_add_affine>
   18b50:	bd08      	pop	{r3, pc}

00018b52 <blst_p1_add_or_double_affine>:
   18b52:	b508      	push	{r3, lr}
   18b54:	f7f6 f870 	bl	ec38 <POINTonE1_dadd_affine>
   18b58:	bd08      	pop	{r3, pc}

00018b5a <blst_p1_double>:
   18b5a:	b508      	push	{r3, lr}
   18b5c:	f7f5 f982 	bl	de64 <POINTonE1_double>
   18b60:	bd08      	pop	{r3, pc}

00018b62 <blst_p1_affine_is_equal>:
   18b62:	b410      	push	{r4}
   18b64:	1f02      	subs	r2, r0, #4
   18b66:	3904      	subs	r1, #4
   18b68:	f100 0c5c 	add.w	ip, r0, #92	; 0x5c
   18b6c:	2000      	movs	r0, #0
   18b6e:	f852 3f04 	ldr.w	r3, [r2, #4]!
   18b72:	f851 4f04 	ldr.w	r4, [r1, #4]!
   18b76:	4063      	eors	r3, r4
   18b78:	4318      	orrs	r0, r3
   18b7a:	4562      	cmp	r2, ip
   18b7c:	d1f7      	bne.n	18b6e <blst_p1_affine_is_equal+0xc>
   18b7e:	1e43      	subs	r3, r0, #1
   18b80:	ea23 0000 	bic.w	r0, r3, r0
   18b84:	0fc0      	lsrs	r0, r0, #31
   18b86:	bc10      	pop	{r4}
   18b88:	4770      	bx	lr

00018b8a <blst_p2_add>:
   18b8a:	b508      	push	{r3, lr}
   18b8c:	f7fb fd26 	bl	145dc <POINTonE2_add>
   18b90:	bd08      	pop	{r3, pc}

00018b92 <blst_p2_add_or_double>:
   18b92:	b508      	push	{r3, lr}
   18b94:	2300      	movs	r3, #0
   18b96:	f7fb ffb1 	bl	14afc <POINTonE2_dadd>
   18b9a:	bd08      	pop	{r3, pc}

00018b9c <blst_p2_add_affine>:
   18b9c:	b508      	push	{r3, lr}
   18b9e:	f7ff fb87 	bl	182b0 <POINTonE2_add_affine>
   18ba2:	bd08      	pop	{r3, pc}

00018ba4 <blst_p2_add_or_double_affine>:
   18ba4:	b508      	push	{r3, lr}
   18ba6:	f7fe ff57 	bl	17a58 <POINTonE2_dadd_affine>
   18baa:	bd08      	pop	{r3, pc}

00018bac <blst_p2_double>:
   18bac:	b508      	push	{r3, lr}
   18bae:	f7fb fe9d 	bl	148ec <POINTonE2_double>
   18bb2:	bd08      	pop	{r3, pc}

00018bb4 <blst_p2_affine_is_equal>:
   18bb4:	b410      	push	{r4}
   18bb6:	1f02      	subs	r2, r0, #4
   18bb8:	3904      	subs	r1, #4
   18bba:	f100 0cbc 	add.w	ip, r0, #188	; 0xbc
   18bbe:	2000      	movs	r0, #0
   18bc0:	f852 3f04 	ldr.w	r3, [r2, #4]!
   18bc4:	f851 4f04 	ldr.w	r4, [r1, #4]!
   18bc8:	4063      	eors	r3, r4
   18bca:	4318      	orrs	r0, r3
   18bcc:	4562      	cmp	r2, ip
   18bce:	d1f7      	bne.n	18bc0 <blst_p2_affine_is_equal+0xc>
   18bd0:	1e43      	subs	r3, r0, #1
   18bd2:	ea23 0000 	bic.w	r0, r3, r0
   18bd6:	0fc0      	lsrs	r0, r0, #31
   18bd8:	bc10      	pop	{r4}
   18bda:	4770      	bx	lr

00018bdc <blst_scalar_from_uint32>:
   18bdc:	4281      	cmp	r1, r0
   18bde:	d014      	beq.n	18c0a <blst_scalar_from_uint32+0x2e>
   18be0:	1d03      	adds	r3, r0, #4
   18be2:	3904      	subs	r1, #4
   18be4:	3024      	adds	r0, #36	; 0x24
   18be6:	f851 2f04 	ldr.w	r2, [r1, #4]!
   18bea:	f803 2c04 	strb.w	r2, [r3, #-4]
   18bee:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   18bf2:	f803 cc03 	strb.w	ip, [r3, #-3]
   18bf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   18bfa:	f803 cc02 	strb.w	ip, [r3, #-2]
   18bfe:	0e12      	lsrs	r2, r2, #24
   18c00:	f803 2c01 	strb.w	r2, [r3, #-1]
   18c04:	3304      	adds	r3, #4
   18c06:	4283      	cmp	r3, r0
   18c08:	d1ed      	bne.n	18be6 <blst_scalar_from_uint32+0xa>
   18c0a:	4770      	bx	lr

00018c0c <blst_uint32_from_scalar>:
   18c0c:	4288      	cmp	r0, r1
   18c0e:	d019      	beq.n	18c44 <blst_uint32_from_scalar+0x38>
   18c10:	b500      	push	{lr}
   18c12:	1d0a      	adds	r2, r1, #4
   18c14:	3804      	subs	r0, #4
   18c16:	3124      	adds	r1, #36	; 0x24
   18c18:	f812 cc04 	ldrb.w	ip, [r2, #-4]
   18c1c:	f812 ec03 	ldrb.w	lr, [r2, #-3]
   18c20:	f812 3c02 	ldrb.w	r3, [r2, #-2]
   18c24:	041b      	lsls	r3, r3, #16
   18c26:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   18c2a:	ea43 030c 	orr.w	r3, r3, ip
   18c2e:	f812 cc01 	ldrb.w	ip, [r2, #-1]
   18c32:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   18c36:	f840 3f04 	str.w	r3, [r0, #4]!
   18c3a:	3204      	adds	r2, #4
   18c3c:	428a      	cmp	r2, r1
   18c3e:	d1eb      	bne.n	18c18 <blst_uint32_from_scalar+0xc>
   18c40:	f85d fb04 	ldr.w	pc, [sp], #4
   18c44:	4770      	bx	lr

00018c46 <blst_scalar_from_uint64>:
   18c46:	4281      	cmp	r1, r0
   18c48:	d026      	beq.n	18c98 <blst_scalar_from_uint64+0x52>
   18c4a:	b500      	push	{lr}
   18c4c:	f100 0308 	add.w	r3, r0, #8
   18c50:	f1a1 0c08 	sub.w	ip, r1, #8
   18c54:	3028      	adds	r0, #40	; 0x28
   18c56:	f85c 1f08 	ldr.w	r1, [ip, #8]!
   18c5a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   18c5e:	f803 1c08 	strb.w	r1, [r3, #-8]
   18c62:	ea4f 2e11 	mov.w	lr, r1, lsr #8
   18c66:	f803 ec07 	strb.w	lr, [r3, #-7]
   18c6a:	ea4f 4e11 	mov.w	lr, r1, lsr #16
   18c6e:	f803 ec06 	strb.w	lr, [r3, #-6]
   18c72:	0e09      	lsrs	r1, r1, #24
   18c74:	f803 1c05 	strb.w	r1, [r3, #-5]
   18c78:	f803 2c04 	strb.w	r2, [r3, #-4]
   18c7c:	0a11      	lsrs	r1, r2, #8
   18c7e:	f803 1c03 	strb.w	r1, [r3, #-3]
   18c82:	0c11      	lsrs	r1, r2, #16
   18c84:	f803 1c02 	strb.w	r1, [r3, #-2]
   18c88:	0e12      	lsrs	r2, r2, #24
   18c8a:	f803 2c01 	strb.w	r2, [r3, #-1]
   18c8e:	3308      	adds	r3, #8
   18c90:	4283      	cmp	r3, r0
   18c92:	d1e0      	bne.n	18c56 <blst_scalar_from_uint64+0x10>
   18c94:	f85d fb04 	ldr.w	pc, [sp], #4
   18c98:	4770      	bx	lr

00018c9a <blst_uint64_from_scalar>:
   18c9a:	4288      	cmp	r0, r1
   18c9c:	d029      	beq.n	18cf2 <blst_uint64_from_scalar+0x58>
   18c9e:	b500      	push	{lr}
   18ca0:	f101 0308 	add.w	r3, r1, #8
   18ca4:	3808      	subs	r0, #8
   18ca6:	f101 0c28 	add.w	ip, r1, #40	; 0x28
   18caa:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   18cae:	f813 ec07 	ldrb.w	lr, [r3, #-7]
   18cb2:	f813 2c06 	ldrb.w	r2, [r3, #-6]
   18cb6:	0412      	lsls	r2, r2, #16
   18cb8:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
   18cbc:	430a      	orrs	r2, r1
   18cbe:	f813 1c05 	ldrb.w	r1, [r3, #-5]
   18cc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   18cc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
   18cca:	f813 ec03 	ldrb.w	lr, [r3, #-3]
   18cce:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
   18cd2:	f813 ec02 	ldrb.w	lr, [r3, #-2]
   18cd6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
   18cda:	f813 ec01 	ldrb.w	lr, [r3, #-1]
   18cde:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
   18ce2:	f840 2f08 	str.w	r2, [r0, #8]!
   18ce6:	6041      	str	r1, [r0, #4]
   18ce8:	3308      	adds	r3, #8
   18cea:	4563      	cmp	r3, ip
   18cec:	d1dd      	bne.n	18caa <blst_uint64_from_scalar+0x10>
   18cee:	f85d fb04 	ldr.w	pc, [sp], #4
   18cf2:	4770      	bx	lr

00018cf4 <blst_scalar_from_bendian>:
   18cf4:	b510      	push	{r4, lr}
   18cf6:	b088      	sub	sp, #32
   18cf8:	468e      	mov	lr, r1
   18cfa:	f101 0420 	add.w	r4, r1, #32
   18cfe:	460a      	mov	r2, r1
   18d00:	2100      	movs	r1, #0
   18d02:	f10e 0e1f 	add.w	lr, lr, #31
   18d06:	ebae 0302 	sub.w	r3, lr, r2
   18d0a:	f812 cb01 	ldrb.w	ip, [r2], #1
   18d0e:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
   18d12:	f023 0303 	bic.w	r3, r3, #3
   18d16:	f10d 0c20 	add.w	ip, sp, #32
   18d1a:	4463      	add	r3, ip
   18d1c:	f843 1c20 	str.w	r1, [r3, #-32]
   18d20:	42a2      	cmp	r2, r4
   18d22:	d1f0      	bne.n	18d06 <blst_scalar_from_bendian+0x12>
   18d24:	46ec      	mov	ip, sp
   18d26:	4560      	cmp	r0, ip
   18d28:	d005      	beq.n	18d36 <blst_scalar_from_bendian+0x42>
   18d2a:	1d01      	adds	r1, r0, #4
   18d2c:	f1ad 0004 	sub.w	r0, sp, #4
   18d30:	f10c 041c 	add.w	r4, ip, #28
   18d34:	e00c      	b.n	18d50 <blst_scalar_from_bendian+0x5c>
   18d36:	f10c 0220 	add.w	r2, ip, #32
   18d3a:	2300      	movs	r3, #0
   18d3c:	f84c 3b04 	str.w	r3, [ip], #4
   18d40:	4562      	cmp	r2, ip
   18d42:	d1fb      	bne.n	18d3c <blst_scalar_from_bendian+0x48>
   18d44:	466b      	mov	r3, sp
   18d46:	b008      	add	sp, #32
   18d48:	bd10      	pop	{r4, pc}
   18d4a:	3104      	adds	r1, #4
   18d4c:	42a0      	cmp	r0, r4
   18d4e:	d0f2      	beq.n	18d36 <blst_scalar_from_bendian+0x42>
   18d50:	1f0a      	subs	r2, r1, #4
   18d52:	f850 3f04 	ldr.w	r3, [r0, #4]!
   18d56:	f802 3b01 	strb.w	r3, [r2], #1
   18d5a:	0a1b      	lsrs	r3, r3, #8
   18d5c:	428a      	cmp	r2, r1
   18d5e:	d1fa      	bne.n	18d56 <blst_scalar_from_bendian+0x62>
   18d60:	e7f3      	b.n	18d4a <blst_scalar_from_bendian+0x56>

00018d62 <blst_bendian_from_scalar>:
   18d62:	b510      	push	{r4, lr}
   18d64:	b088      	sub	sp, #32
   18d66:	f101 0220 	add.w	r2, r1, #32
   18d6a:	2400      	movs	r4, #0
   18d6c:	ea6f 0e01 	mvn.w	lr, r1
   18d70:	eb0e 0302 	add.w	r3, lr, r2
   18d74:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   18d78:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   18d7c:	f023 0303 	bic.w	r3, r3, #3
   18d80:	f10d 0c20 	add.w	ip, sp, #32
   18d84:	4463      	add	r3, ip
   18d86:	f843 4c20 	str.w	r4, [r3, #-32]
   18d8a:	428a      	cmp	r2, r1
   18d8c:	d1f0      	bne.n	18d70 <blst_bendian_from_scalar+0xe>
   18d8e:	f100 0420 	add.w	r4, r0, #32
   18d92:	4602      	mov	r2, r0
   18d94:	301f      	adds	r0, #31
   18d96:	1a83      	subs	r3, r0, r2
   18d98:	f023 0103 	bic.w	r1, r3, #3
   18d9c:	f10d 0c20 	add.w	ip, sp, #32
   18da0:	4461      	add	r1, ip
   18da2:	f003 0303 	and.w	r3, r3, #3
   18da6:	00db      	lsls	r3, r3, #3
   18da8:	f851 1c20 	ldr.w	r1, [r1, #-32]
   18dac:	fa21 f303 	lsr.w	r3, r1, r3
   18db0:	f802 3b01 	strb.w	r3, [r2], #1
   18db4:	42a2      	cmp	r2, r4
   18db6:	d1ee      	bne.n	18d96 <blst_bendian_from_scalar+0x34>
   18db8:	466b      	mov	r3, sp
   18dba:	4661      	mov	r1, ip
   18dbc:	2200      	movs	r2, #0
   18dbe:	f843 2b04 	str.w	r2, [r3], #4
   18dc2:	4299      	cmp	r1, r3
   18dc4:	d1fb      	bne.n	18dbe <blst_bendian_from_scalar+0x5c>
   18dc6:	466b      	mov	r3, sp
   18dc8:	b008      	add	sp, #32
   18dca:	bd10      	pop	{r4, pc}

00018dcc <blst_scalar_from_lendian>:
   18dcc:	4288      	cmp	r0, r1
   18dce:	d009      	beq.n	18de4 <blst_scalar_from_lendian+0x18>
   18dd0:	1e4b      	subs	r3, r1, #1
   18dd2:	1e42      	subs	r2, r0, #1
   18dd4:	f101 001f 	add.w	r0, r1, #31
   18dd8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   18ddc:	f802 1f01 	strb.w	r1, [r2, #1]!
   18de0:	4283      	cmp	r3, r0
   18de2:	d1f9      	bne.n	18dd8 <blst_scalar_from_lendian+0xc>
   18de4:	4770      	bx	lr

00018de6 <blst_lendian_from_scalar>:
   18de6:	4288      	cmp	r0, r1
   18de8:	d009      	beq.n	18dfe <blst_lendian_from_scalar+0x18>
   18dea:	1e4b      	subs	r3, r1, #1
   18dec:	1e42      	subs	r2, r0, #1
   18dee:	f101 001f 	add.w	r0, r1, #31
   18df2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   18df6:	f802 1f01 	strb.w	r1, [r2, #1]!
   18dfa:	4283      	cmp	r3, r0
   18dfc:	d1f9      	bne.n	18df2 <blst_lendian_from_scalar+0xc>
   18dfe:	4770      	bx	lr

00018e00 <blst_scalar_fr_check>:
   18e00:	b530      	push	{r4, r5, lr}
   18e02:	b093      	sub	sp, #76	; 0x4c
   18e04:	4605      	mov	r5, r0
   18e06:	2220      	movs	r2, #32
   18e08:	2100      	movs	r1, #0
   18e0a:	a802      	add	r0, sp, #8
   18e0c:	f00a f992 	bl	23134 <memset>
   18e10:	f105 0220 	add.w	r2, r5, #32
   18e14:	2100      	movs	r1, #0
   18e16:	43e8      	mvns	r0, r5
   18e18:	1883      	adds	r3, r0, r2
   18e1a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   18e1e:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
   18e22:	f023 0303 	bic.w	r3, r3, #3
   18e26:	ac12      	add	r4, sp, #72	; 0x48
   18e28:	4423      	add	r3, r4
   18e2a:	f843 1c20 	str.w	r1, [r3, #-32]
   18e2e:	42aa      	cmp	r2, r5
   18e30:	d1f2      	bne.n	18e18 <blst_scalar_fr_check+0x18>
   18e32:	2308      	movs	r3, #8
   18e34:	9300      	str	r3, [sp, #0]
   18e36:	4b15      	ldr	r3, [pc, #84]	; (18e8c <blst_scalar_fr_check+0x8c>)
   18e38:	aa0a      	add	r2, sp, #40	; 0x28
   18e3a:	a902      	add	r1, sp, #8
   18e3c:	4608      	mov	r0, r1
   18e3e:	f7f3 ff6f 	bl	cd20 <add_mod_n>
   18e42:	a901      	add	r1, sp, #4
   18e44:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   18e48:	aa02      	add	r2, sp, #8
   18e4a:	4665      	mov	r5, ip
   18e4c:	2000      	movs	r0, #0
   18e4e:	f851 3f04 	ldr.w	r3, [r1, #4]!
   18e52:	f85c 4f04 	ldr.w	r4, [ip, #4]!
   18e56:	4063      	eors	r3, r4
   18e58:	4318      	orrs	r0, r3
   18e5a:	42a9      	cmp	r1, r5
   18e5c:	d1f7      	bne.n	18e4e <blst_scalar_fr_check+0x4e>
   18e5e:	1e43      	subs	r3, r0, #1
   18e60:	ea23 0000 	bic.w	r0, r3, r0
   18e64:	0fc0      	lsrs	r0, r0, #31
   18e66:	f102 0120 	add.w	r1, r2, #32
   18e6a:	2300      	movs	r3, #0
   18e6c:	f842 3b04 	str.w	r3, [r2], #4
   18e70:	428a      	cmp	r2, r1
   18e72:	d1fb      	bne.n	18e6c <blst_scalar_fr_check+0x6c>
   18e74:	ab02      	add	r3, sp, #8
   18e76:	ab0a      	add	r3, sp, #40	; 0x28
   18e78:	a912      	add	r1, sp, #72	; 0x48
   18e7a:	2200      	movs	r2, #0
   18e7c:	f843 2b04 	str.w	r2, [r3], #4
   18e80:	4299      	cmp	r1, r3
   18e82:	d1fb      	bne.n	18e7c <blst_scalar_fr_check+0x7c>
   18e84:	ab0a      	add	r3, sp, #40	; 0x28
   18e86:	b013      	add	sp, #76	; 0x4c
   18e88:	bd30      	pop	{r4, r5, pc}
   18e8a:	bf00      	nop
   18e8c:	000254c8 	.word	0x000254c8

00018e90 <blst_sk_check>:
   18e90:	b508      	push	{r3, lr}
   18e92:	2208      	movs	r2, #8
   18e94:	4901      	ldr	r1, [pc, #4]	; (18e9c <blst_sk_check+0xc>)
   18e96:	f7f3 fc26 	bl	c6e6 <check_mod_n>
   18e9a:	bd08      	pop	{r3, pc}
   18e9c:	000254c8 	.word	0x000254c8

00018ea0 <blst_fr_from_uint64>:
   18ea0:	b500      	push	{lr}
   18ea2:	b083      	sub	sp, #12
   18ea4:	4a07      	ldr	r2, [pc, #28]	; (18ec4 <blst_fr_from_uint64+0x24>)
   18ea6:	2308      	movs	r3, #8
   18ea8:	9301      	str	r3, [sp, #4]
   18eaa:	f04f 33ff 	mov.w	r3, #4294967295
   18eae:	9300      	str	r3, [sp, #0]
   18eb0:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   18eb4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   18eb8:	f7f3 fd8a 	bl	c9d0 <mul_mont_n>
   18ebc:	b003      	add	sp, #12
   18ebe:	f85d fb04 	ldr.w	pc, [sp], #4
   18ec2:	bf00      	nop
   18ec4:	00025200 	.word	0x00025200

00018ec8 <blst_uint64_from_fr>:
   18ec8:	b500      	push	{lr}
   18eca:	b083      	sub	sp, #12
   18ecc:	2308      	movs	r3, #8
   18ece:	9300      	str	r3, [sp, #0]
   18ed0:	f04f 33ff 	mov.w	r3, #4294967295
   18ed4:	4a02      	ldr	r2, [pc, #8]	; (18ee0 <blst_uint64_from_fr+0x18>)
   18ed6:	f7f4 f8ad 	bl	d034 <from_mont_n>
   18eda:	b003      	add	sp, #12
   18edc:	f85d fb04 	ldr.w	pc, [sp], #4
   18ee0:	000254c8 	.word	0x000254c8

00018ee4 <blst_fr_from_scalar>:
   18ee4:	b510      	push	{r4, lr}
   18ee6:	b082      	sub	sp, #8
   18ee8:	f101 0320 	add.w	r3, r1, #32
   18eec:	2400      	movs	r4, #0
   18eee:	ea6f 0e01 	mvn.w	lr, r1
   18ef2:	eb0e 0203 	add.w	r2, lr, r3
   18ef6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   18efa:	ea4c 2404 	orr.w	r4, ip, r4, lsl #8
   18efe:	f022 0203 	bic.w	r2, r2, #3
   18f02:	5084      	str	r4, [r0, r2]
   18f04:	428b      	cmp	r3, r1
   18f06:	d1f4      	bne.n	18ef2 <blst_fr_from_scalar+0xe>
   18f08:	4a07      	ldr	r2, [pc, #28]	; (18f28 <blst_fr_from_scalar+0x44>)
   18f0a:	2308      	movs	r3, #8
   18f0c:	9301      	str	r3, [sp, #4]
   18f0e:	f04f 33ff 	mov.w	r3, #4294967295
   18f12:	9300      	str	r3, [sp, #0]
   18f14:	f502 7332 	add.w	r3, r2, #712	; 0x2c8
   18f18:	f502 6288 	add.w	r2, r2, #1088	; 0x440
   18f1c:	4601      	mov	r1, r0
   18f1e:	f7f3 fd57 	bl	c9d0 <mul_mont_n>
   18f22:	b002      	add	sp, #8
   18f24:	bd10      	pop	{r4, pc}
   18f26:	bf00      	nop
   18f28:	00025200 	.word	0x00025200

00018f2c <blst_scalar_from_fr>:
   18f2c:	b530      	push	{r4, r5, lr}
   18f2e:	b08b      	sub	sp, #44	; 0x2c
   18f30:	4604      	mov	r4, r0
   18f32:	ad02      	add	r5, sp, #8
   18f34:	2308      	movs	r3, #8
   18f36:	9300      	str	r3, [sp, #0]
   18f38:	f04f 33ff 	mov.w	r3, #4294967295
   18f3c:	4a10      	ldr	r2, [pc, #64]	; (18f80 <blst_scalar_from_fr+0x54>)
   18f3e:	4628      	mov	r0, r5
   18f40:	f7f4 f878 	bl	d034 <from_mont_n>
   18f44:	4628      	mov	r0, r5
   18f46:	42ac      	cmp	r4, r5
   18f48:	d004      	beq.n	18f54 <blst_scalar_from_fr+0x28>
   18f4a:	1d21      	adds	r1, r4, #4
   18f4c:	ac01      	add	r4, sp, #4
   18f4e:	f105 0c1c 	add.w	ip, r5, #28
   18f52:	e00c      	b.n	18f6e <blst_scalar_from_fr+0x42>
   18f54:	f100 0220 	add.w	r2, r0, #32
   18f58:	2300      	movs	r3, #0
   18f5a:	f840 3b04 	str.w	r3, [r0], #4
   18f5e:	4290      	cmp	r0, r2
   18f60:	d1fb      	bne.n	18f5a <blst_scalar_from_fr+0x2e>
   18f62:	ab02      	add	r3, sp, #8
   18f64:	b00b      	add	sp, #44	; 0x2c
   18f66:	bd30      	pop	{r4, r5, pc}
   18f68:	3104      	adds	r1, #4
   18f6a:	4564      	cmp	r4, ip
   18f6c:	d0f2      	beq.n	18f54 <blst_scalar_from_fr+0x28>
   18f6e:	1f0a      	subs	r2, r1, #4
   18f70:	f854 3f04 	ldr.w	r3, [r4, #4]!
   18f74:	f802 3b01 	strb.w	r3, [r2], #1
   18f78:	0a1b      	lsrs	r3, r3, #8
   18f7a:	428a      	cmp	r2, r1
   18f7c:	d1fa      	bne.n	18f74 <blst_scalar_from_fr+0x48>
   18f7e:	e7f3      	b.n	18f68 <blst_scalar_from_fr+0x3c>
   18f80:	000254c8 	.word	0x000254c8

00018f84 <blst_scalar_from_hexascii>:
   18f84:	b508      	push	{r3, lr}
   18f86:	460a      	mov	r2, r1
   18f88:	2120      	movs	r1, #32
   18f8a:	f7f3 fcdd 	bl	c948 <limbs_from_hexascii>
   18f8e:	bd08      	pop	{r3, pc}

00018f90 <blst_fp_from_hexascii>:
   18f90:	b510      	push	{r4, lr}
   18f92:	b082      	sub	sp, #8
   18f94:	4604      	mov	r4, r0
   18f96:	460a      	mov	r2, r1
   18f98:	2130      	movs	r1, #48	; 0x30
   18f9a:	f7f3 fcd5 	bl	c948 <limbs_from_hexascii>
   18f9e:	4b06      	ldr	r3, [pc, #24]	; (18fb8 <blst_fp_from_hexascii+0x28>)
   18fa0:	220c      	movs	r2, #12
   18fa2:	9201      	str	r2, [sp, #4]
   18fa4:	4a05      	ldr	r2, [pc, #20]	; (18fbc <blst_fp_from_hexascii+0x2c>)
   18fa6:	9200      	str	r2, [sp, #0]
   18fa8:	f503 7234 	add.w	r2, r3, #720	; 0x2d0
   18fac:	4621      	mov	r1, r4
   18fae:	4620      	mov	r0, r4
   18fb0:	f7f3 fd0e 	bl	c9d0 <mul_mont_n>
   18fb4:	b002      	add	sp, #8
   18fb6:	bd10      	pop	{r4, pc}
   18fb8:	00024108 	.word	0x00024108
   18fbc:	fffcfffd 	.word	0xfffcfffd

00018fc0 <blst_uniq_sizeof>:
   18fc0:	0100      	lsls	r0, r0, #4
   18fc2:	3008      	adds	r0, #8
   18fc4:	4770      	bx	lr

00018fc6 <blst_uniq_init>:
   18fc6:	2300      	movs	r3, #0
   18fc8:	6003      	str	r3, [r0, #0]
   18fca:	6043      	str	r3, [r0, #4]
   18fcc:	4770      	bx	lr

00018fce <blst_uniq_test>:
   18fce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18fd2:	b0a8      	sub	sp, #160	; 0xa0
   18fd4:	4607      	mov	r7, r0
   18fd6:	4688      	mov	r8, r1
   18fd8:	4615      	mov	r5, r2
   18fda:	6801      	ldr	r1, [r0, #0]
   18fdc:	2900      	cmp	r1, #0
   18fde:	f000 80ac 	beq.w	1913a <blst_uniq_test+0x16c>
   18fe2:	f10d 0920 	add.w	r9, sp, #32
   18fe6:	466e      	mov	r6, sp
   18fe8:	2400      	movs	r4, #0
   18fea:	e014      	b.n	19016 <blst_uniq_test+0x48>
   18fec:	eba0 000e 	sub.w	r0, r0, lr
   18ff0:	e001      	b.n	18ff6 <blst_uniq_test+0x28>
   18ff2:	eba5 000a 	sub.w	r0, r5, sl
   18ff6:	2800      	cmp	r0, #0
   18ff8:	f000 80b7 	beq.w	1916a <blst_uniq_test+0x19c>
   18ffc:	f849 1b04 	str.w	r1, [r9], #4
   19000:	2800      	cmp	r0, #0
   19002:	bfd4      	ite	le
   19004:	2000      	movle	r0, #0
   19006:	2001      	movgt	r0, #1
   19008:	f806 0b01 	strb.w	r0, [r6], #1
   1900c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   19010:	1c63      	adds	r3, r4, #1
   19012:	b1c1      	cbz	r1, 19046 <blst_uniq_test+0x78>
   19014:	461c      	mov	r4, r3
   19016:	688a      	ldr	r2, [r1, #8]
   19018:	68cb      	ldr	r3, [r1, #12]
   1901a:	ea4f 0a53 	mov.w	sl, r3, lsr #1
   1901e:	4628      	mov	r0, r5
   19020:	4555      	cmp	r5, sl
   19022:	bf28      	it	cs
   19024:	4650      	movcs	r0, sl
   19026:	2800      	cmp	r0, #0
   19028:	d0e3      	beq.n	18ff2 <blst_uniq_test+0x24>
   1902a:	f108 33ff 	add.w	r3, r8, #4294967295
   1902e:	f102 3cff 	add.w	ip, r2, #4294967295
   19032:	181a      	adds	r2, r3, r0
   19034:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   19038:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   1903c:	4570      	cmp	r0, lr
   1903e:	d1d5      	bne.n	18fec <blst_uniq_test+0x1e>
   19040:	4293      	cmp	r3, r2
   19042:	d1f7      	bne.n	19034 <blst_uniq_test+0x66>
   19044:	e7d5      	b.n	18ff2 <blst_uniq_test+0x24>
   19046:	687a      	ldr	r2, [r7, #4]
   19048:	1c51      	adds	r1, r2, #1
   1904a:	6079      	str	r1, [r7, #4]
   1904c:	0112      	lsls	r2, r2, #4
   1904e:	f102 0108 	add.w	r1, r2, #8
   19052:	4439      	add	r1, r7
   19054:	443a      	add	r2, r7
   19056:	2000      	movs	r0, #0
   19058:	60d0      	str	r0, [r2, #12]
   1905a:	6090      	str	r0, [r2, #8]
   1905c:	f8c2 8010 	str.w	r8, [r2, #16]
   19060:	0068      	lsls	r0, r5, #1
   19062:	f040 0001 	orr.w	r0, r0, #1
   19066:	6150      	str	r0, [r2, #20]
   19068:	2b00      	cmp	r3, #0
   1906a:	d077      	beq.n	1915c <blst_uniq_test+0x18e>
   1906c:	aa28      	add	r2, sp, #160	; 0xa0
   1906e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   19072:	f852 2c80 	ldr.w	r2, [r2, #-128]
   19076:	a828      	add	r0, sp, #160	; 0xa0
   19078:	4404      	add	r4, r0
   1907a:	f814 0ca0 	ldrb.w	r0, [r4, #-160]
   1907e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
   19082:	2b01      	cmp	r3, #1
   19084:	d96b      	bls.n	1915e <blst_uniq_test+0x190>
   19086:	aa08      	add	r2, sp, #32
   19088:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1908c:	f103 3eff 	add.w	lr, r3, #4294967295
   19090:	f851 4c04 	ldr.w	r4, [r1, #-4]
   19094:	68e2      	ldr	r2, [r4, #12]
   19096:	f012 0f01 	tst.w	r2, #1
   1909a:	d060      	beq.n	1915e <blst_uniq_test+0x190>
   1909c:	eb0d 0203 	add.w	r2, sp, r3
   190a0:	f812 cc02 	ldrb.w	ip, [r2, #-2]
   190a4:	f851 0c08 	ldr.w	r0, [r1, #-8]
   190a8:	f08c 0501 	eor.w	r5, ip, #1
   190ac:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
   190b0:	b1a2      	cbz	r2, 190dc <blst_uniq_test+0x10e>
   190b2:	68d6      	ldr	r6, [r2, #12]
   190b4:	f016 0f01 	tst.w	r6, #1
   190b8:	d010      	beq.n	190dc <blst_uniq_test+0x10e>
   190ba:	68c5      	ldr	r5, [r0, #12]
   190bc:	f045 0501 	orr.w	r5, r5, #1
   190c0:	60c5      	str	r5, [r0, #12]
   190c2:	68e0      	ldr	r0, [r4, #12]
   190c4:	f020 0001 	bic.w	r0, r0, #1
   190c8:	60e0      	str	r0, [r4, #12]
   190ca:	68d0      	ldr	r0, [r2, #12]
   190cc:	f020 0001 	bic.w	r0, r0, #1
   190d0:	60d0      	str	r0, [r2, #12]
   190d2:	3b02      	subs	r3, #2
   190d4:	3908      	subs	r1, #8
   190d6:	2b01      	cmp	r3, #1
   190d8:	d8d8      	bhi.n	1908c <blst_uniq_test+0xbe>
   190da:	e040      	b.n	1915e <blst_uniq_test+0x190>
   190dc:	aa28      	add	r2, sp, #160	; 0xa0
   190de:	4496      	add	lr, r2
   190e0:	f81e 2ca0 	ldrb.w	r2, [lr, #-160]
   190e4:	4562      	cmp	r2, ip
   190e6:	d024      	beq.n	19132 <blst_uniq_test+0x164>
   190e8:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   190ec:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
   190f0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   190f4:	f842 402c 	str.w	r4, [r2, ip, lsl #2]
   190f8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
   190fc:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
   19100:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
   19104:	68c1      	ldr	r1, [r0, #12]
   19106:	f041 0101 	orr.w	r1, r1, #1
   1910a:	60c1      	str	r1, [r0, #12]
   1910c:	68d1      	ldr	r1, [r2, #12]
   1910e:	f021 0101 	bic.w	r1, r1, #1
   19112:	60d1      	str	r1, [r2, #12]
   19114:	2b02      	cmp	r3, #2
   19116:	d90e      	bls.n	19136 <blst_uniq_test+0x168>
   19118:	3b03      	subs	r3, #3
   1911a:	a928      	add	r1, sp, #160	; 0xa0
   1911c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   19120:	f851 1c80 	ldr.w	r1, [r1, #-128]
   19124:	a828      	add	r0, sp, #160	; 0xa0
   19126:	4403      	add	r3, r0
   19128:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
   1912c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   19130:	e015      	b.n	1915e <blst_uniq_test+0x190>
   19132:	4622      	mov	r2, r4
   19134:	e7e0      	b.n	190f8 <blst_uniq_test+0x12a>
   19136:	603a      	str	r2, [r7, #0]
   19138:	e011      	b.n	1915e <blst_uniq_test+0x190>
   1913a:	6842      	ldr	r2, [r0, #4]
   1913c:	1c53      	adds	r3, r2, #1
   1913e:	6043      	str	r3, [r0, #4]
   19140:	0112      	lsls	r2, r2, #4
   19142:	f102 0108 	add.w	r1, r2, #8
   19146:	4401      	add	r1, r0
   19148:	4402      	add	r2, r0
   1914a:	2300      	movs	r3, #0
   1914c:	60d3      	str	r3, [r2, #12]
   1914e:	6093      	str	r3, [r2, #8]
   19150:	f8c2 8010 	str.w	r8, [r2, #16]
   19154:	006b      	lsls	r3, r5, #1
   19156:	f043 0301 	orr.w	r3, r3, #1
   1915a:	6153      	str	r3, [r2, #20]
   1915c:	6039      	str	r1, [r7, #0]
   1915e:	683a      	ldr	r2, [r7, #0]
   19160:	68d3      	ldr	r3, [r2, #12]
   19162:	f023 0301 	bic.w	r3, r3, #1
   19166:	60d3      	str	r3, [r2, #12]
   19168:	2001      	movs	r0, #1
   1916a:	b028      	add	sp, #160	; 0xa0
   1916c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019170 <clock_settime>:
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;

	if (clock_id != CLOCK_REALTIME) {
   19170:	2801      	cmp	r0, #1
{
   19172:	b570      	push	{r4, r5, r6, lr}
   19174:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   19176:	d006      	beq.n	19186 <clock_settime+0x16>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   19178:	f006 f8e0 	bl	1f33c <z_impl_z_errno>
		errno = EINVAL;
   1917c:	2316      	movs	r3, #22
   1917e:	6003      	str	r3, [r0, #0]
		return -1;
   19180:	f04f 30ff 	mov.w	r0, #4294967295
	base.tv_nsec = delta % NSEC_PER_SEC;

	rt_clock_base = base;

	return 0;
}
   19184:	bd70      	pop	{r4, r5, r6, pc}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   19186:	f00a fba3 	bl	238d0 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1918a:	4b1b      	ldr	r3, [pc, #108]	; (191f8 <clock_settime+0x88>)
   1918c:	6834      	ldr	r4, [r6, #0]
   1918e:	460a      	mov	r2, r1
   19190:	fba4 4503 	umull	r4, r5, r4, r3
   19194:	6871      	ldr	r1, [r6, #4]
   19196:	fb03 5501 	mla	r5, r3, r1, r5
   1919a:	68b3      	ldr	r3, [r6, #8]
   1919c:	18e4      	adds	r4, r4, r3
   1919e:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   191a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   191a6:	fba0 0103 	umull	r0, r1, r0, r3
   191aa:	fb03 1102 	mla	r1, r3, r2, r1
   191ae:	0bc2      	lsrs	r2, r0, #15
   191b0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   191b4:	0bc8      	lsrs	r0, r1, #15
		- elapsed_msecs * USEC_PER_MSEC * NSEC_PER_USEC;
   191b6:	4911      	ldr	r1, [pc, #68]	; (191fc <clock_settime+0x8c>)
   191b8:	fba2 2301 	umull	r2, r3, r2, r1
   191bc:	fb01 3300 	mla	r3, r1, r0, r3
   191c0:	1aa6      	subs	r6, r4, r2
   191c2:	eb65 0503 	sbc.w	r5, r5, r3
	base.tv_sec = delta / NSEC_PER_SEC;
   191c6:	4630      	mov	r0, r6
   191c8:	a309      	add	r3, pc, #36	; (adr r3, 191f0 <clock_settime+0x80>)
   191ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   191ce:	4629      	mov	r1, r5
   191d0:	f7f3 f836 	bl	c240 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   191d4:	a306      	add	r3, pc, #24	; (adr r3, 191f0 <clock_settime+0x80>)
   191d6:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
   191da:	4c09      	ldr	r4, [pc, #36]	; (19200 <clock_settime+0x90>)
   191dc:	e9c4 0100 	strd	r0, r1, [r4]
	base.tv_nsec = delta % NSEC_PER_SEC;
   191e0:	4630      	mov	r0, r6
   191e2:	4629      	mov	r1, r5
   191e4:	f7f3 f82c 	bl	c240 <__aeabi_ldivmod>
	return 0;
   191e8:	2000      	movs	r0, #0
	base.tv_nsec = delta % NSEC_PER_SEC;
   191ea:	60a2      	str	r2, [r4, #8]
	return 0;
   191ec:	e7ca      	b.n	19184 <clock_settime+0x14>
   191ee:	bf00      	nop
   191f0:	3b9aca00 	.word	0x3b9aca00
   191f4:	00000000 	.word	0x00000000
   191f8:	3b9aca00 	.word	0x3b9aca00
   191fc:	000f4240 	.word	0x000f4240
   19200:	200105f0 	.word	0x200105f0

00019204 <cmd_public_key>:
	return 0;
}


static int cmd_public_key(const struct shell *shell, size_t argc, char **argv)
{
   19204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

        printf("Public key: \n");
        
        printf("0x");
        int cont = keys_counter - 1;
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   19206:	2460      	movs	r4, #96	; 0x60
        printf("Public key: \n");
   19208:	480d      	ldr	r0, [pc, #52]	; (19240 <cmd_public_key+0x3c>)
   1920a:	f005 f9bb 	bl	1e584 <printf>
        printf("0x");
   1920e:	480d      	ldr	r0, [pc, #52]	; (19244 <cmd_public_key+0x40>)
   19210:	f005 f9b8 	bl	1e584 <printf>
        int cont = keys_counter - 1;
   19214:	4b0c      	ldr	r3, [pc, #48]	; (19248 <cmd_public_key+0x44>)
          printf("%c", public_keys_hex_store[i]);
   19216:	4e0d      	ldr	r6, [pc, #52]	; (1924c <cmd_public_key+0x48>)
        int cont = keys_counter - 1;
   19218:	681b      	ldr	r3, [r3, #0]
          printf("%c", public_keys_hex_store[i]);
   1921a:	4f0d      	ldr	r7, [pc, #52]	; (19250 <cmd_public_key+0x4c>)
        int cont = keys_counter - 1;
   1921c:	3b01      	subs	r3, #1
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   1921e:	435c      	muls	r4, r3
   19220:	f104 0560 	add.w	r5, r4, #96	; 0x60
   19224:	42a5      	cmp	r5, r4
   19226:	dc04      	bgt.n	19232 <cmd_public_key+0x2e>
        }
        printf("\n");
   19228:	480a      	ldr	r0, [pc, #40]	; (19254 <cmd_public_key+0x50>)
   1922a:	f005 f9ab 	bl	1e584 <printf>

	return 0;
}
   1922e:	2000      	movs	r0, #0
   19230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          printf("%c", public_keys_hex_store[i]);
   19232:	5d31      	ldrb	r1, [r6, r4]
   19234:	4638      	mov	r0, r7
   19236:	f005 f9a5 	bl	1e584 <printf>
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
   1923a:	3401      	adds	r4, #1
   1923c:	e7f2      	b.n	19224 <cmd_public_key+0x20>
   1923e:	bf00      	nop
   19240:	000269a6 	.word	0x000269a6
   19244:	000269b4 	.word	0x000269b4
   19248:	20010778 	.word	0x20010778
   1924c:	2001e460 	.word	0x2001e460
   19250:	0002783f 	.word	0x0002783f
   19254:	0002745d 	.word	0x0002745d

00019258 <cmd_get_keys>:

	return 0;
}

static int cmd_get_keys(const struct shell *shell, size_t argc, char **argv)
{
   19258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int j = 0;
        int cont = keys_counter - 1;
        int counter = keys_counter;
        
        printf("{'keys':['");
        for(int i = 0; i < 96 * cont + 96; i++){
   1925c:	2400      	movs	r4, #0
   1925e:	2760      	movs	r7, #96	; 0x60
        int cont = keys_counter - 1;
   19260:	4b12      	ldr	r3, [pc, #72]	; (192ac <cmd_get_keys+0x54>)
        printf("{'keys':['");
   19262:	4813      	ldr	r0, [pc, #76]	; (192b0 <cmd_get_keys+0x58>)
        int cont = keys_counter - 1;
   19264:	681e      	ldr	r6, [r3, #0]
        int j = 0;
   19266:	4625      	mov	r5, r4
        printf("{'keys':['");
   19268:	f005 f98c 	bl	1e584 <printf>
        for(int i = 0; i < 96 * cont + 96; i++){
   1926c:	4377      	muls	r7, r6
   1926e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 192b4 <cmd_get_keys+0x5c>
            printf("%c", public_keys_hex_store[i]);
   19272:	f8df 9044 	ldr.w	r9, [pc, #68]	; 192b8 <cmd_get_keys+0x60>
            j++;
            if (j == 96){
                if(counter > 1) {
                    printf("'\n'");
                } else {
                    printf("']}\n");
   19276:	f8df a044 	ldr.w	sl, [pc, #68]	; 192bc <cmd_get_keys+0x64>
                    printf("'\n'");
   1927a:	f8df b044 	ldr.w	fp, [pc, #68]	; 192c0 <cmd_get_keys+0x68>
        for(int i = 0; i < 96 * cont + 96; i++){
   1927e:	42a7      	cmp	r7, r4
   19280:	dc02      	bgt.n	19288 <cmd_get_keys+0x30>
                counter--;
            }           
        }

	return 0;
}
   19282:	2000      	movs	r0, #0
   19284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printf("%c", public_keys_hex_store[i]);
   19288:	4648      	mov	r0, r9
   1928a:	f818 1b01 	ldrb.w	r1, [r8], #1
            j++;
   1928e:	3501      	adds	r5, #1
            printf("%c", public_keys_hex_store[i]);
   19290:	f005 f978 	bl	1e584 <printf>
            if (j == 96){
   19294:	2d60      	cmp	r5, #96	; 0x60
   19296:	d107      	bne.n	192a8 <cmd_get_keys+0x50>
                if(counter > 1) {
   19298:	2e01      	cmp	r6, #1
                    printf("'\n'");
   1929a:	bfcc      	ite	gt
   1929c:	4658      	movgt	r0, fp
                    printf("']}\n");
   1929e:	4650      	movle	r0, sl
   192a0:	f005 f970 	bl	1e584 <printf>
                j = 0;
   192a4:	2500      	movs	r5, #0
                counter--;
   192a6:	3e01      	subs	r6, #1
        for(int i = 0; i < 96 * cont + 96; i++){
   192a8:	3401      	adds	r4, #1
   192aa:	e7e8      	b.n	1927e <cmd_get_keys+0x26>
   192ac:	20010778 	.word	0x20010778
   192b0:	000269b7 	.word	0x000269b7
   192b4:	2001e460 	.word	0x2001e460
   192b8:	0002783f 	.word	0x0002783f
   192bc:	000269c6 	.word	0x000269c6
   192c0:	000269c2 	.word	0x000269c2

000192c4 <cmd_keygen>:
        size_t olen = random_number_len;
   192c4:	2190      	movs	r1, #144	; 0x90
{
   192c6:	b570      	push	{r4, r5, r6, lr}
   192c8:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   192cc:	aa03      	add	r2, sp, #12
   192ce:	a874      	add	r0, sp, #464	; 0x1d0
        size_t olen = random_number_len;
   192d0:	9103      	str	r1, [sp, #12]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   192d2:	f009 fdb8 	bl	22e46 <spm_request_random_number>
        if (ret != 0) {
   192d6:	4601      	mov	r1, r0
   192d8:	b110      	cbz	r0, 192e0 <cmd_keygen+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
   192da:	4841      	ldr	r0, [pc, #260]	; (193e0 <cmd_keygen+0x11c>)
   192dc:	f007 feed 	bl	210ba <printk>
        for(int i = 0; i < sizeof(ikm); i++){
   192e0:	a904      	add	r1, sp, #16
{
   192e2:	2200      	movs	r2, #0
   192e4:	460d      	mov	r5, r1
   192e6:	ab74      	add	r3, sp, #464	; 0x1d0
          ikm[i] = random_number[i];
   192e8:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
   192ec:	3201      	adds	r2, #1
   192ee:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
   192f0:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
   192f4:	d1f8      	bne.n	192e8 <cmd_keygen+0x24>
        char info[] = {
   192f6:	4b3b      	ldr	r3, [pc, #236]	; (193e4 <cmd_keygen+0x120>)
   192f8:	ac0c      	add	r4, sp, #48	; 0x30
   192fa:	f103 0620 	add.w	r6, r3, #32
   192fe:	4622      	mov	r2, r4
   19300:	6818      	ldr	r0, [r3, #0]
   19302:	6859      	ldr	r1, [r3, #4]
   19304:	3308      	adds	r3, #8
   19306:	c203      	stmia	r2!, {r0, r1}
   19308:	42b3      	cmp	r3, r6
   1930a:	4614      	mov	r4, r2
   1930c:	d1f7      	bne.n	192fe <cmd_keygen+0x3a>
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   1930e:	2220      	movs	r2, #32
        secret_keys_store[keys_counter] = sk;
   19310:	4c35      	ldr	r4, [pc, #212]	; (193e8 <cmd_keygen+0x124>)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   19312:	4629      	mov	r1, r5
   19314:	4835      	ldr	r0, [pc, #212]	; (193ec <cmd_keygen+0x128>)
   19316:	9200      	str	r2, [sp, #0]
   19318:	ab0c      	add	r3, sp, #48	; 0x30
   1931a:	f7fa f8f1 	bl	13500 <blst_keygen>
        secret_keys_store[keys_counter] = sk;
   1931e:	6823      	ldr	r3, [r4, #0]
   19320:	4a32      	ldr	r2, [pc, #200]	; (193ec <cmd_keygen+0x128>)
   19322:	4933      	ldr	r1, [pc, #204]	; (193f0 <cmd_keygen+0x12c>)
   19324:	f102 0020 	add.w	r0, r2, #32
   19328:	eb01 1143 	add.w	r1, r1, r3, lsl #5
   1932c:	f852 5b04 	ldr.w	r5, [r2], #4
   19330:	4282      	cmp	r2, r0
   19332:	f841 5b04 	str.w	r5, [r1], #4
   19336:	d1f9      	bne.n	1932c <cmd_keygen+0x68>
        keys_counter++;
   19338:	3301      	adds	r3, #1
        blst_bendian_from_scalar(priv_key_bin, &sk);
   1933a:	492c      	ldr	r1, [pc, #176]	; (193ec <cmd_keygen+0x128>)
   1933c:	a814      	add	r0, sp, #80	; 0x50
        keys_counter++;
   1933e:	6023      	str	r3, [r4, #0]
        blst_bendian_from_scalar(priv_key_bin, &sk);
   19340:	f7ff fd0f 	bl	18d62 <blst_bendian_from_scalar>
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
   19344:	2340      	movs	r3, #64	; 0x40
   19346:	2120      	movs	r1, #32
   19348:	aa28      	add	r2, sp, #160	; 0xa0
   1934a:	a814      	add	r0, sp, #80	; 0x50
   1934c:	f007 fe0e 	bl	20f6c <bin2hex>
   19350:	b910      	cbnz	r0, 19358 <cmd_keygen+0x94>
          printf("Error2\n");
   19352:	4828      	ldr	r0, [pc, #160]	; (193f4 <cmd_keygen+0x130>)
   19354:	f005 f916 	bl	1e584 <printf>
        printf("Secret key: \n");
   19358:	4827      	ldr	r0, [pc, #156]	; (193f8 <cmd_keygen+0x134>)
   1935a:	f005 f913 	bl	1e584 <printf>
        printf("0x");
   1935e:	4827      	ldr	r0, [pc, #156]	; (193fc <cmd_keygen+0x138>)
   19360:	f005 f910 	bl	1e584 <printf>
        printf("%s\n", priv_key_hex2);
   19364:	a928      	add	r1, sp, #160	; 0xa0
   19366:	4826      	ldr	r0, [pc, #152]	; (19400 <cmd_keygen+0x13c>)
   19368:	f005 f90c 	bl	1e584 <printf>
        blst_sk_to_pk_in_g1(&pk, &sk);
   1936c:	491f      	ldr	r1, [pc, #124]	; (193ec <cmd_keygen+0x128>)
   1936e:	a850      	add	r0, sp, #320	; 0x140
   19370:	f7f9 fb84 	bl	12a7c <blst_sk_to_pk_in_g1>
        blst_p1_to_affine(&pk2, &pk);
   19374:	4823      	ldr	r0, [pc, #140]	; (19404 <cmd_keygen+0x140>)
   19376:	a950      	add	r1, sp, #320	; 0x140
   19378:	f7f8 fa6e 	bl	11858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   1937c:	a950      	add	r1, sp, #320	; 0x140
   1937e:	a81c      	add	r0, sp, #112	; 0x70
   19380:	f7f8 fad0 	bl	11924 <blst_p1_compress>
        printf("Public key: \n");
   19384:	4820      	ldr	r0, [pc, #128]	; (19408 <cmd_keygen+0x144>)
   19386:	f005 f8fd 	bl	1e584 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   1938a:	2360      	movs	r3, #96	; 0x60
   1938c:	2130      	movs	r1, #48	; 0x30
   1938e:	aa38      	add	r2, sp, #224	; 0xe0
   19390:	a81c      	add	r0, sp, #112	; 0x70
   19392:	f007 fdeb 	bl	20f6c <bin2hex>
   19396:	b910      	cbnz	r0, 1939e <cmd_keygen+0xda>
          printf("Error3\n");
   19398:	481c      	ldr	r0, [pc, #112]	; (1940c <cmd_keygen+0x148>)
   1939a:	f005 f8f3 	bl	1e584 <printf>
        int cont = keys_counter - 1;
   1939e:	6823      	ldr	r3, [r4, #0]
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   193a0:	2460      	movs	r4, #96	; 0x60
   193a2:	4a1b      	ldr	r2, [pc, #108]	; (19410 <cmd_keygen+0x14c>)
   193a4:	ad38      	add	r5, sp, #224	; 0xe0
        int cont = keys_counter - 1;
   193a6:	3b01      	subs	r3, #1
   193a8:	fb04 2303 	mla	r3, r4, r3, r2
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   193ac:	462a      	mov	r2, r5
   193ae:	f812 1b01 	ldrb.w	r1, [r2], #1
        for(int i = 0; i < 96; i++){
   193b2:	3c01      	subs	r4, #1
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
   193b4:	f803 1b01 	strb.w	r1, [r3], #1
        for(int i = 0; i < 96; i++){
   193b8:	d1f9      	bne.n	193ae <cmd_keygen+0xea>
        printf("0x");
   193ba:	4810      	ldr	r0, [pc, #64]	; (193fc <cmd_keygen+0x138>)
   193bc:	f005 f8e2 	bl	1e584 <printf>
          printf("%c", public_key_hex[i]);
   193c0:	4e14      	ldr	r6, [pc, #80]	; (19414 <cmd_keygen+0x150>)
   193c2:	4630      	mov	r0, r6
   193c4:	f815 1b01 	ldrb.w	r1, [r5], #1
        for(int i = 0; i < 96; i++) {
   193c8:	3401      	adds	r4, #1
          printf("%c", public_key_hex[i]);
   193ca:	f005 f8db 	bl	1e584 <printf>
        for(int i = 0; i < 96; i++) {
   193ce:	2c60      	cmp	r4, #96	; 0x60
   193d0:	d1f7      	bne.n	193c2 <cmd_keygen+0xfe>
        printf("\n");
   193d2:	4811      	ldr	r0, [pc, #68]	; (19418 <cmd_keygen+0x154>)
   193d4:	f005 f8d6 	bl	1e584 <printf>
}
   193d8:	2000      	movs	r0, #0
   193da:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
   193de:	bd70      	pop	{r4, r5, r6, pc}
   193e0:	000269cb 	.word	0x000269cb
   193e4:	00026114 	.word	0x00026114
   193e8:	20010778 	.word	0x20010778
   193ec:	2001e960 	.word	0x2001e960
   193f0:	2001e820 	.word	0x2001e820
   193f4:	000269f2 	.word	0x000269f2
   193f8:	000269fa 	.word	0x000269fa
   193fc:	000269b4 	.word	0x000269b4
   19400:	0002758c 	.word	0x0002758c
   19404:	20010318 	.word	0x20010318
   19408:	000269a6 	.word	0x000269a6
   1940c:	00026a08 	.word	0x00026a08
   19410:	2001e460 	.word	0x2001e460
   19414:	0002783f 	.word	0x0002783f
   19418:	0002745d 	.word	0x0002745d

0001941c <cmd_signature_verification>:
{
   1941c:	b570      	push	{r4, r5, r6, lr}
   1941e:	b092      	sub	sp, #72	; 0x48
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   19420:	aa07      	add	r2, sp, #28
   19422:	4615      	mov	r5, r2
   19424:	4b12      	ldr	r3, [pc, #72]	; (19470 <cmd_signature_verification+0x54>)
   19426:	f103 0628 	add.w	r6, r3, #40	; 0x28
   1942a:	4614      	mov	r4, r2
   1942c:	6818      	ldr	r0, [r3, #0]
   1942e:	6859      	ldr	r1, [r3, #4]
   19430:	3308      	adds	r3, #8
   19432:	c403      	stmia	r4!, {r0, r1}
   19434:	42b3      	cmp	r3, r6
   19436:	4622      	mov	r2, r4
   19438:	d1f7      	bne.n	1942a <cmd_signature_verification+0xe>
   1943a:	8819      	ldrh	r1, [r3, #0]
   1943c:	789b      	ldrb	r3, [r3, #2]
   1943e:	8021      	strh	r1, [r4, #0]
   19440:	70a3      	strb	r3, [r4, #2]
        if(blst_core_verify_pk_in_g1(&pk2, &sig2, 1, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0) != BLST_SUCCESS){
   19442:	2300      	movs	r3, #0
   19444:	e9cd 3303 	strd	r3, r3, [sp, #12]
   19448:	232b      	movs	r3, #43	; 0x2b
   1944a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1944e:	2320      	movs	r3, #32
   19450:	2201      	movs	r2, #1
   19452:	9300      	str	r3, [sp, #0]
   19454:	4907      	ldr	r1, [pc, #28]	; (19474 <cmd_signature_verification+0x58>)
   19456:	4b08      	ldr	r3, [pc, #32]	; (19478 <cmd_signature_verification+0x5c>)
   19458:	4808      	ldr	r0, [pc, #32]	; (1947c <cmd_signature_verification+0x60>)
   1945a:	f7fe fea4 	bl	181a6 <blst_core_verify_pk_in_g1>
   1945e:	b128      	cbz	r0, 1946c <cmd_signature_verification+0x50>
          printf("Error\n");
   19460:	4807      	ldr	r0, [pc, #28]	; (19480 <cmd_signature_verification+0x64>)
          printf("Success\n");
   19462:	f005 f88f 	bl	1e584 <printf>
}
   19466:	2000      	movs	r0, #0
   19468:	b012      	add	sp, #72	; 0x48
   1946a:	bd70      	pop	{r4, r5, r6, pc}
          printf("Success\n");
   1946c:	4805      	ldr	r0, [pc, #20]	; (19484 <cmd_signature_verification+0x68>)
   1946e:	e7f8      	b.n	19462 <cmd_signature_verification+0x46>
   19470:	00026a20 	.word	0x00026a20
   19474:	20010378 	.word	0x20010378
   19478:	2001e440 	.word	0x2001e440
   1947c:	20010318 	.word	0x20010318
   19480:	00026a10 	.word	0x00026a10
   19484:	00026a17 	.word	0x00026a17

00019488 <k_timer_remaining_get.constprop.0>:
 *
 * @param timer     Address of timer.
 *
 * @return Remaining time (in milliseconds).
 */
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
   19488:	b508      	push	{r3, lr}
	return z_timeout_remaining(&timer->timeout);
   1948a:	4805      	ldr	r0, [pc, #20]	; (194a0 <k_timer_remaining_get.constprop.0+0x18>)
   1948c:	f00a f9e2 	bl	23854 <z_timeout_remaining>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   19490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19494:	fba0 2302 	umull	r2, r3, r0, r2
   19498:	0bd0      	lsrs	r0, r2, #15
{
	return k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));
}
   1949a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1949e:	bd08      	pop	{r3, pc}
   194a0:	20010168 	.word	0x20010168

000194a4 <cmd_benchmark>:
	ARG_UNUSED(argv);

        unsigned char ikm[32];
	const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
   194a4:	2190      	movs	r1, #144	; 0x90
{
   194a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   194a8:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
        int ret;

        ret = spm_request_random_number(random_number, random_number_len, &olen);
   194ac:	aa04      	add	r2, sp, #16
   194ae:	a8b0      	add	r0, sp, #704	; 0x2c0
        size_t olen = random_number_len;
   194b0:	9104      	str	r1, [sp, #16]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
   194b2:	f009 fcc8 	bl	22e46 <spm_request_random_number>
        if (ret != 0) {
   194b6:	4601      	mov	r1, r0
   194b8:	b110      	cbz	r0, 194c0 <cmd_benchmark+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
   194ba:	488c      	ldr	r0, [pc, #560]	; (196ec <cmd_benchmark+0x248>)
   194bc:	f007 fdfd 	bl	210ba <printk>
        }

        for(int i = 0; i < sizeof(ikm); i++){
   194c0:	a905      	add	r1, sp, #20
{
   194c2:	2200      	movs	r2, #0
   194c4:	460d      	mov	r5, r1
   194c6:	abb0      	add	r3, sp, #704	; 0x2c0
          ikm[i] = random_number[i];
   194c8:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
   194cc:	3201      	adds	r2, #1
   194ce:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
   194d0:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
   194d4:	d1f8      	bne.n	194c8 <cmd_benchmark+0x24>
        } 

        // key_info is an optional parameter.  This parameter MAY be used to derive
        // multiple independent keys from the same IKM.  By default, key_info is the empty string.
        char info[] = {
   194d6:	4b86      	ldr	r3, [pc, #536]	; (196f0 <cmd_benchmark+0x24c>)
   194d8:	ac0d      	add	r4, sp, #52	; 0x34
   194da:	f103 0620 	add.w	r6, r3, #32
   194de:	4622      	mov	r2, r4
   194e0:	6818      	ldr	r0, [r3, #0]
   194e2:	6859      	ldr	r1, [r3, #4]
   194e4:	3308      	adds	r3, #8
   194e6:	c203      	stmia	r2!, {r0, r1}
   194e8:	42b3      	cmp	r3, r6
   194ea:	4614      	mov	r4, r2
   194ec:	d1f7      	bne.n	194de <cmd_benchmark+0x3a>
	z_impl_k_timer_start(timer, duration, period);
   194ee:	2200      	movs	r2, #0
   194f0:	2300      	movs	r3, #0
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        k_timer_start(&my_timer, K_MSEC(3000), K_NO_WAIT);
        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
   194f2:	2420      	movs	r4, #32
   194f4:	e9cd 2300 	strd	r2, r3, [sp]
   194f8:	487e      	ldr	r0, [pc, #504]	; (196f4 <cmd_benchmark+0x250>)
   194fa:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   194fe:	2300      	movs	r3, #0
   19500:	f007 f9a8 	bl	20854 <z_impl_k_timer_start>
   19504:	4622      	mov	r2, r4
   19506:	ab0d      	add	r3, sp, #52	; 0x34
   19508:	4629      	mov	r1, r5
   1950a:	487b      	ldr	r0, [pc, #492]	; (196f8 <cmd_benchmark+0x254>)
   1950c:	9400      	str	r4, [sp, #0]
   1950e:	f7f9 fff7 	bl	13500 <blst_keygen>
                
        uint8_t priv_key_bin[32];
        blst_bendian_from_scalar(priv_key_bin, &sk);
   19512:	4979      	ldr	r1, [pc, #484]	; (196f8 <cmd_benchmark+0x254>)
   19514:	a815      	add	r0, sp, #84	; 0x54
   19516:	f7ff fc24 	bl	18d62 <blst_bendian_from_scalar>

        char priv_key_hex2[64];
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
   1951a:	2340      	movs	r3, #64	; 0x40
   1951c:	4621      	mov	r1, r4
   1951e:	aa3c      	add	r2, sp, #240	; 0xf0
   19520:	a815      	add	r0, sp, #84	; 0x54
   19522:	f007 fd23 	bl	20f6c <bin2hex>
   19526:	b910      	cbnz	r0, 1952e <cmd_benchmark+0x8a>
          printf("Error2\n");
   19528:	4874      	ldr	r0, [pc, #464]	; (196fc <cmd_benchmark+0x258>)
   1952a:	f005 f82b 	bl	1e584 <printf>
        }

        printf("Secret key: \n");
   1952e:	4874      	ldr	r0, [pc, #464]	; (19700 <cmd_benchmark+0x25c>)
   19530:	f005 f828 	bl	1e584 <printf>
        printf("0x");
   19534:	4873      	ldr	r0, [pc, #460]	; (19704 <cmd_benchmark+0x260>)
   19536:	f005 f825 	bl	1e584 <printf>
        printf("%s\n", priv_key_hex2);
   1953a:	a93c      	add	r1, sp, #240	; 0xf0
   1953c:	4872      	ldr	r0, [pc, #456]	; (19708 <cmd_benchmark+0x264>)
   1953e:	f005 f821 	bl	1e584 <printf>

        //The secret key allow us to generate the associated public key
        blst_p1 pk;
        byte out[48];
        char public_key_hex[96];
        blst_sk_to_pk_in_g1(&pk, &sk);
   19542:	a88c      	add	r0, sp, #560	; 0x230
   19544:	496c      	ldr	r1, [pc, #432]	; (196f8 <cmd_benchmark+0x254>)
   19546:	f7f9 fa99 	bl	12a7c <blst_sk_to_pk_in_g1>
        blst_p1_to_affine(&pk2, &pk);
   1954a:	a98c      	add	r1, sp, #560	; 0x230
   1954c:	486f      	ldr	r0, [pc, #444]	; (1970c <cmd_benchmark+0x268>)
   1954e:	f7f8 f983 	bl	11858 <blst_p1_to_affine>
        blst_p1_compress(out, &pk);
   19552:	a98c      	add	r1, sp, #560	; 0x230
   19554:	a830      	add	r0, sp, #192	; 0xc0
   19556:	f7f8 f9e5 	bl	11924 <blst_p1_compress>

        uint32_t time_left;
        time_left = k_timer_remaining_get(&my_timer);
   1955a:	f7ff ff95 	bl	19488 <k_timer_remaining_get.constprop.0>
   1955e:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   19560:	4864      	ldr	r0, [pc, #400]	; (196f4 <cmd_benchmark+0x250>)
   19562:	f00a f9ec 	bl	2393e <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);

        printf("Public key: \n");
   19566:	486a      	ldr	r0, [pc, #424]	; (19710 <cmd_benchmark+0x26c>)
   19568:	f005 f80c 	bl	1e584 <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
   1956c:	2360      	movs	r3, #96	; 0x60
   1956e:	2130      	movs	r1, #48	; 0x30
   19570:	aa5c      	add	r2, sp, #368	; 0x170
   19572:	a830      	add	r0, sp, #192	; 0xc0
   19574:	f007 fcfa 	bl	20f6c <bin2hex>
   19578:	b910      	cbnz	r0, 19580 <cmd_benchmark+0xdc>
          printf("Error3\n");
   1957a:	4866      	ldr	r0, [pc, #408]	; (19714 <cmd_benchmark+0x270>)
   1957c:	f005 f802 	bl	1e584 <printf>
        }
           
        printf("0x");
   19580:	4860      	ldr	r0, [pc, #384]	; (19704 <cmd_benchmark+0x260>)
   19582:	f004 ffff 	bl	1e584 <printf>
        for(int i = 0; i < 96; i++) {
   19586:	2600      	movs	r6, #0
          printf("%c", public_key_hex[i]);
   19588:	4f63      	ldr	r7, [pc, #396]	; (19718 <cmd_benchmark+0x274>)
   1958a:	ac5c      	add	r4, sp, #368	; 0x170
   1958c:	4638      	mov	r0, r7
   1958e:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 96; i++) {
   19592:	3601      	adds	r6, #1
          printf("%c", public_key_hex[i]);
   19594:	f004 fff6 	bl	1e584 <printf>
        for(int i = 0; i < 96; i++) {
   19598:	2e60      	cmp	r6, #96	; 0x60
   1959a:	d1f7      	bne.n	1958c <cmd_benchmark+0xe8>
        }
        printf("\n");
   1959c:	485f      	ldr	r0, [pc, #380]	; (1971c <cmd_benchmark+0x278>)
   1959e:	f004 fff1 	bl	1e584 <printf>

        printf("\nBenchmark for key generation: %u ms\n", 3000-time_left);
   195a2:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   195a6:	3108      	adds	r1, #8
   195a8:	485d      	ldr	r0, [pc, #372]	; (19720 <cmd_benchmark+0x27c>)
   195aa:	f004 ffeb 	bl	1e584 <printf>
	z_impl_k_timer_start(timer, duration, period);
   195ae:	2200      	movs	r2, #0
   195b0:	2300      	movs	r3, #0
   195b2:	4850      	ldr	r0, [pc, #320]	; (196f4 <cmd_benchmark+0x250>)
   195b4:	e9cd 2300 	strd	r2, r3, [sp]
   195b8:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   195bc:	2300      	movs	r3, #0
   195be:	f007 f949 	bl	20854 <z_impl_k_timer_start>
        
        blst_p2 hash;
        char * msg_hex = "5656565656565656565656565656565656565656565656565656565656565656";
        uint8_t msg_bin[32];
             
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   195c2:	4858      	ldr	r0, [pc, #352]	; (19724 <cmd_benchmark+0x280>)
   195c4:	f009 fd42 	bl	2304c <strlen>
   195c8:	2320      	movs	r3, #32
   195ca:	4601      	mov	r1, r0
   195cc:	aa1d      	add	r2, sp, #116	; 0x74
   195ce:	4855      	ldr	r0, [pc, #340]	; (19724 <cmd_benchmark+0x280>)
   195d0:	f007 fcf7 	bl	20fc2 <hex2bin>
   195d4:	b910      	cbnz	r0, 195dc <cmd_benchmark+0x138>
          printf("Error4\n");
   195d6:	4854      	ldr	r0, [pc, #336]	; (19728 <cmd_benchmark+0x284>)
   195d8:	f004 ffd4 	bl	1e584 <printf>
        }

        char message[64];
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   195dc:	2340      	movs	r3, #64	; 0x40
   195de:	2120      	movs	r1, #32
   195e0:	aa4c      	add	r2, sp, #304	; 0x130
   195e2:	a81d      	add	r0, sp, #116	; 0x74
   195e4:	f007 fcc2 	bl	20f6c <bin2hex>
   195e8:	b910      	cbnz	r0, 195f0 <cmd_benchmark+0x14c>
          printf("Error5\n");
   195ea:	4850      	ldr	r0, [pc, #320]	; (1972c <cmd_benchmark+0x288>)
   195ec:	f004 ffca 	bl	1e584 <printf>
        }

        printf("\nMessage: \n");
   195f0:	484f      	ldr	r0, [pc, #316]	; (19730 <cmd_benchmark+0x28c>)
   195f2:	f004 ffc7 	bl	1e584 <printf>
        printf("0x");
   195f6:	4843      	ldr	r0, [pc, #268]	; (19704 <cmd_benchmark+0x260>)
   195f8:	f004 ffc4 	bl	1e584 <printf>
        printf("%s\n", message);
   195fc:	4842      	ldr	r0, [pc, #264]	; (19708 <cmd_benchmark+0x264>)
   195fe:	a94c      	add	r1, sp, #304	; 0x130
   19600:	f004 ffc0 	bl	1e584 <printf>
               
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   19604:	4b4b      	ldr	r3, [pc, #300]	; (19734 <cmd_benchmark+0x290>)
   19606:	aa25      	add	r2, sp, #148	; 0x94
   19608:	f103 0528 	add.w	r5, r3, #40	; 0x28
   1960c:	4614      	mov	r4, r2
   1960e:	6818      	ldr	r0, [r3, #0]
   19610:	6859      	ldr	r1, [r3, #4]
   19612:	3308      	adds	r3, #8
   19614:	c403      	stmia	r4!, {r0, r1}
   19616:	42ab      	cmp	r3, r5
   19618:	4622      	mov	r2, r4
   1961a:	d1f7      	bne.n	1960c <cmd_benchmark+0x168>
   1961c:	8819      	ldrh	r1, [r3, #0]
   1961e:	789b      	ldrb	r3, [r3, #2]
   19620:	8021      	strh	r1, [r4, #0]
   19622:	70a3      	strb	r3, [r4, #2]
        //Obtain the point from a message
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   19624:	2300      	movs	r3, #0
   19626:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1962a:	232b      	movs	r3, #43	; 0x2b
   1962c:	2220      	movs	r2, #32
   1962e:	9300      	str	r3, [sp, #0]
   19630:	a91d      	add	r1, sp, #116	; 0x74
   19632:	ab25      	add	r3, sp, #148	; 0x94
   19634:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   19638:	f7fc fceb 	bl	16012 <blst_hash_to_g2>

        time_left = k_timer_remaining_get(&my_timer);
   1963c:	f7ff ff24 	bl	19488 <k_timer_remaining_get.constprop.0>
   19640:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
   19642:	482c      	ldr	r0, [pc, #176]	; (196f4 <cmd_benchmark+0x250>)
   19644:	f00a f97b 	bl	2393e <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        printf("\nBenchmark for message hash: %u ms\n", 3000-time_left);
   19648:	f5c4 613b 	rsb	r1, r4, #2992	; 0xbb0
   1964c:	3108      	adds	r1, #8
   1964e:	483a      	ldr	r0, [pc, #232]	; (19738 <cmd_benchmark+0x294>)
   19650:	f004 ff98 	bl	1e584 <printf>
	z_impl_k_timer_start(timer, duration, period);
   19654:	2200      	movs	r2, #0
   19656:	2300      	movs	r3, #0
   19658:	4826      	ldr	r0, [pc, #152]	; (196f4 <cmd_benchmark+0x250>)
   1965a:	e9cd 2300 	strd	r2, r3, [sp]
   1965e:	2300      	movs	r3, #0
   19660:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
   19664:	f007 f8f6 	bl	20854 <z_impl_k_timer_start>
        blst_p2 sig;
        blst_p2_affine sig2;
        byte out2[96];
        char sig_hex[192];

        blst_sign_pk_in_g1(&sig, &hash, &sk); 
   19668:	4a23      	ldr	r2, [pc, #140]	; (196f8 <cmd_benchmark+0x254>)
   1966a:	f50d 619a 	add.w	r1, sp, #1232	; 0x4d0
   1966e:	f50d 60be 	add.w	r0, sp, #1520	; 0x5f0
   19672:	f7fc f845 	bl	15700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   19676:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   1967a:	a8d4      	add	r0, sp, #848	; 0x350
   1967c:	f7fa f9ac 	bl	139d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   19680:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
   19684:	a874      	add	r0, sp, #464	; 0x1d0
   19686:	f7fa fa13 	bl	13ab0 <blst_p2_compress>
        
        time_left = k_timer_remaining_get(&my_timer);
   1968a:	f7ff fefd 	bl	19488 <k_timer_remaining_get.constprop.0>
   1968e:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
   19690:	4818      	ldr	r0, [pc, #96]	; (196f4 <cmd_benchmark+0x250>)
   19692:	f00a f954 	bl	2393e <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        
        printf("\nSignature: \n");
   19696:	4829      	ldr	r0, [pc, #164]	; (1973c <cmd_benchmark+0x298>)
   19698:	f004 ff74 	bl	1e584 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   1969c:	23c0      	movs	r3, #192	; 0xc0
   1969e:	2160      	movs	r1, #96	; 0x60
   196a0:	f50d 6282 	add.w	r2, sp, #1040	; 0x410
   196a4:	a874      	add	r0, sp, #464	; 0x1d0
   196a6:	f007 fc61 	bl	20f6c <bin2hex>
   196aa:	b910      	cbnz	r0, 196b2 <cmd_benchmark+0x20e>
          printf("Error6\n");
   196ac:	4824      	ldr	r0, [pc, #144]	; (19740 <cmd_benchmark+0x29c>)
   196ae:	f004 ff69 	bl	1e584 <printf>
        }
        
        printf("0x");
   196b2:	4814      	ldr	r0, [pc, #80]	; (19704 <cmd_benchmark+0x260>)
   196b4:	f004 ff66 	bl	1e584 <printf>
        for(int i = 0; i < 192; i++) {
   196b8:	2600      	movs	r6, #0
          printf("%c", sig_hex[i]);
   196ba:	4f17      	ldr	r7, [pc, #92]	; (19718 <cmd_benchmark+0x274>)
   196bc:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
   196c0:	4638      	mov	r0, r7
   196c2:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   196c6:	3601      	adds	r6, #1
          printf("%c", sig_hex[i]);
   196c8:	f004 ff5c 	bl	1e584 <printf>
        for(int i = 0; i < 192; i++) {
   196cc:	2ec0      	cmp	r6, #192	; 0xc0
   196ce:	d1f7      	bne.n	196c0 <cmd_benchmark+0x21c>
        }
        printf("\n");
   196d0:	4812      	ldr	r0, [pc, #72]	; (1971c <cmd_benchmark+0x278>)
   196d2:	f004 ff57 	bl	1e584 <printf>

        printf("\nBenchmark for signature: %u ms\n", 3000-time_left);
   196d6:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
   196da:	3108      	adds	r1, #8
   196dc:	4819      	ldr	r0, [pc, #100]	; (19744 <cmd_benchmark+0x2a0>)
   196de:	f004 ff51 	bl	1e584 <printf>

	return 0;
}
   196e2:	2000      	movs	r0, #0
   196e4:	f20d 7d14 	addw	sp, sp, #1812	; 0x714
   196e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   196ea:	bf00      	nop
   196ec:	000269cb 	.word	0x000269cb
   196f0:	00026114 	.word	0x00026114
   196f4:	20010168 	.word	0x20010168
   196f8:	2001e960 	.word	0x2001e960
   196fc:	000269f2 	.word	0x000269f2
   19700:	000269fa 	.word	0x000269fa
   19704:	000269b4 	.word	0x000269b4
   19708:	0002758c 	.word	0x0002758c
   1970c:	20010318 	.word	0x20010318
   19710:	000269a6 	.word	0x000269a6
   19714:	00026a08 	.word	0x00026a08
   19718:	0002783f 	.word	0x0002783f
   1971c:	0002745d 	.word	0x0002745d
   19720:	00026a4b 	.word	0x00026a4b
   19724:	00026a71 	.word	0x00026a71
   19728:	00026ab2 	.word	0x00026ab2
   1972c:	00026aba 	.word	0x00026aba
   19730:	00026ac2 	.word	0x00026ac2
   19734:	00026a20 	.word	0x00026a20
   19738:	00026ace 	.word	0x00026ace
   1973c:	00026af2 	.word	0x00026af2
   19740:	00026b00 	.word	0x00026b00
   19744:	00026b08 	.word	0x00026b08

00019748 <public_key_to_sk>:
void public_key_to_sk(char * public_key_hex, blst_scalar sk){
   19748:	b084      	sub	sp, #16
   1974a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1974c:	b0b1      	sub	sp, #196	; 0xc4
   1974e:	a837      	add	r0, sp, #220	; 0xdc
   19750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
   19754:	4b14      	ldr	r3, [pc, #80]	; (197a8 <public_key_to_sk+0x60>)
   19756:	2260      	movs	r2, #96	; 0x60
   19758:	461f      	mov	r7, r3
   1975a:	a918      	add	r1, sp, #96	; 0x60
           aux2[i] = public_keys_hex_store[i];
   1975c:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < 96; i++){
   19760:	3a01      	subs	r2, #1
           aux2[i] = public_keys_hex_store[i];
   19762:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < 96; i++){
   19766:	d1f9      	bne.n	1975c <public_key_to_sk+0x14>
                  aux2[k] = public_keys_hex_store[k+96*cont];
   19768:	2160      	movs	r1, #96	; 0x60
        for(int i = 0; i < keys_counter; i++){
   1976a:	4615      	mov	r5, r2
        int cont = keys_counter - 1;
   1976c:	4c0f      	ldr	r4, [pc, #60]	; (197ac <public_key_to_sk+0x64>)
   1976e:	6826      	ldr	r6, [r4, #0]
   19770:	3e01      	subs	r6, #1
                  aux2[k] = public_keys_hex_store[k+96*cont];
   19772:	434e      	muls	r6, r1
        for(int i = 0; i < keys_counter; i++){
   19774:	6823      	ldr	r3, [r4, #0]
   19776:	42ab      	cmp	r3, r5
   19778:	dc04      	bgt.n	19784 <public_key_to_sk+0x3c>
}
   1977a:	b031      	add	sp, #196	; 0xc4
   1977c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   19780:	b004      	add	sp, #16
   19782:	4770      	bx	lr
            if (strcmp(aux, aux2) == 0){
   19784:	4668      	mov	r0, sp
   19786:	a918      	add	r1, sp, #96	; 0x60
   19788:	f009 fc67 	bl	2305a <strcmp>
   1978c:	2800      	cmp	r0, #0
   1978e:	d0f4      	beq.n	1977a <public_key_to_sk+0x32>
   19790:	2360      	movs	r3, #96	; 0x60
   19792:	19b9      	adds	r1, r7, r6
   19794:	aa18      	add	r2, sp, #96	; 0x60
                  aux2[k] = public_keys_hex_store[k+96*cont];
   19796:	f811 0b01 	ldrb.w	r0, [r1], #1
                for(int k = 0; k < 96; k++){
   1979a:	3b01      	subs	r3, #1
                  aux2[k] = public_keys_hex_store[k+96*cont];
   1979c:	f802 0b01 	strb.w	r0, [r2], #1
                for(int k = 0; k < 96; k++){
   197a0:	d1f9      	bne.n	19796 <public_key_to_sk+0x4e>
        for(int i = 0; i < keys_counter; i++){
   197a2:	3501      	adds	r5, #1
   197a4:	e7e6      	b.n	19774 <public_key_to_sk+0x2c>
   197a6:	bf00      	nop
   197a8:	2001e460 	.word	0x2001e460
   197ac:	20010778 	.word	0x20010778

000197b0 <cmd_signature_message>:
{
   197b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   197b2:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
        public_key_to_sk(argv[1], sk_sign);
   197b6:	466c      	mov	r4, sp
{
   197b8:	4617      	mov	r7, r2
        public_key_to_sk(argv[1], sk_sign);
   197ba:	ad0a      	add	r5, sp, #40	; 0x28
   197bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   197be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   197c0:	682b      	ldr	r3, [r5, #0]
   197c2:	ae07      	add	r6, sp, #28
   197c4:	6023      	str	r3, [r4, #0]
   197c6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
   197ca:	6878      	ldr	r0, [r7, #4]
   197cc:	f7ff ffbc 	bl	19748 <public_key_to_sk>
        char * msg_hex = argv[2];
   197d0:	68bc      	ldr	r4, [r7, #8]
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
   197d2:	4620      	mov	r0, r4
   197d4:	f009 fc3a 	bl	2304c <strlen>
   197d8:	2320      	movs	r3, #32
   197da:	4601      	mov	r1, r0
   197dc:	4a2d      	ldr	r2, [pc, #180]	; (19894 <cmd_signature_message+0xe4>)
   197de:	4620      	mov	r0, r4
   197e0:	f007 fbef 	bl	20fc2 <hex2bin>
   197e4:	b910      	cbnz	r0, 197ec <cmd_signature_message+0x3c>
          printf("Error4\n");
   197e6:	482c      	ldr	r0, [pc, #176]	; (19898 <cmd_signature_message+0xe8>)
   197e8:	f004 fecc 	bl	1e584 <printf>
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
   197ec:	2340      	movs	r3, #64	; 0x40
   197ee:	2120      	movs	r1, #32
   197f0:	4828      	ldr	r0, [pc, #160]	; (19894 <cmd_signature_message+0xe4>)
   197f2:	aa1a      	add	r2, sp, #104	; 0x68
   197f4:	f007 fbba 	bl	20f6c <bin2hex>
   197f8:	b910      	cbnz	r0, 19800 <cmd_signature_message+0x50>
          printf("Error5\n");
   197fa:	4828      	ldr	r0, [pc, #160]	; (1989c <cmd_signature_message+0xec>)
   197fc:	f004 fec2 	bl	1e584 <printf>
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
   19800:	4b27      	ldr	r3, [pc, #156]	; (198a0 <cmd_signature_message+0xf0>)
   19802:	aa0f      	add	r2, sp, #60	; 0x3c
   19804:	f103 0528 	add.w	r5, r3, #40	; 0x28
   19808:	4614      	mov	r4, r2
   1980a:	6818      	ldr	r0, [r3, #0]
   1980c:	6859      	ldr	r1, [r3, #4]
   1980e:	3308      	adds	r3, #8
   19810:	c403      	stmia	r4!, {r0, r1}
   19812:	42ab      	cmp	r3, r5
   19814:	4622      	mov	r2, r4
   19816:	d1f7      	bne.n	19808 <cmd_signature_message+0x58>
   19818:	8819      	ldrh	r1, [r3, #0]
   1981a:	789b      	ldrb	r3, [r3, #2]
   1981c:	8021      	strh	r1, [r4, #0]
   1981e:	70a3      	strb	r3, [r4, #2]
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);
   19820:	2300      	movs	r3, #0
   19822:	e9cd 3301 	strd	r3, r3, [sp, #4]
   19826:	232b      	movs	r3, #43	; 0x2b
   19828:	2220      	movs	r2, #32
   1982a:	491a      	ldr	r1, [pc, #104]	; (19894 <cmd_signature_message+0xe4>)
   1982c:	481d      	ldr	r0, [pc, #116]	; (198a4 <cmd_signature_message+0xf4>)
   1982e:	9300      	str	r3, [sp, #0]
   19830:	ab0f      	add	r3, sp, #60	; 0x3c
   19832:	f7fc fbee 	bl	16012 <blst_hash_to_g2>
        blst_sign_pk_in_g1(&sig, &hash, &sk_sign); 
   19836:	4632      	mov	r2, r6
   19838:	491a      	ldr	r1, [pc, #104]	; (198a4 <cmd_signature_message+0xf4>)
   1983a:	a872      	add	r0, sp, #456	; 0x1c8
   1983c:	f7fb ff60 	bl	15700 <blst_sign_pk_in_g1>
        blst_p2_to_affine(&sig2, &sig);
   19840:	4819      	ldr	r0, [pc, #100]	; (198a8 <cmd_signature_message+0xf8>)
   19842:	a972      	add	r1, sp, #456	; 0x1c8
   19844:	f7fa f8c8 	bl	139d8 <blst_p2_to_affine>
        blst_p2_compress(out2, &sig);
   19848:	a972      	add	r1, sp, #456	; 0x1c8
   1984a:	a82a      	add	r0, sp, #168	; 0xa8
   1984c:	f7fa f930 	bl	13ab0 <blst_p2_compress>
        printf("Signature: \n");
   19850:	4816      	ldr	r0, [pc, #88]	; (198ac <cmd_signature_message+0xfc>)
   19852:	f004 fe97 	bl	1e584 <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
   19856:	23c0      	movs	r3, #192	; 0xc0
   19858:	2160      	movs	r1, #96	; 0x60
   1985a:	aa42      	add	r2, sp, #264	; 0x108
   1985c:	a82a      	add	r0, sp, #168	; 0xa8
   1985e:	f007 fb85 	bl	20f6c <bin2hex>
   19862:	b910      	cbnz	r0, 1986a <cmd_signature_message+0xba>
          printf("Error6\n");
   19864:	4812      	ldr	r0, [pc, #72]	; (198b0 <cmd_signature_message+0x100>)
   19866:	f004 fe8d 	bl	1e584 <printf>
        printf("0x");
   1986a:	4812      	ldr	r0, [pc, #72]	; (198b4 <cmd_signature_message+0x104>)
   1986c:	f004 fe8a 	bl	1e584 <printf>
        for(int i = 0; i < 192; i++) {
   19870:	2500      	movs	r5, #0
          printf("%c", sig_hex[i]);
   19872:	4e11      	ldr	r6, [pc, #68]	; (198b8 <cmd_signature_message+0x108>)
   19874:	ac42      	add	r4, sp, #264	; 0x108
   19876:	4630      	mov	r0, r6
   19878:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
   1987c:	3501      	adds	r5, #1
          printf("%c", sig_hex[i]);
   1987e:	f004 fe81 	bl	1e584 <printf>
        for(int i = 0; i < 192; i++) {
   19882:	2dc0      	cmp	r5, #192	; 0xc0
   19884:	d1f7      	bne.n	19876 <cmd_signature_message+0xc6>
        printf("\n\n");
   19886:	480d      	ldr	r0, [pc, #52]	; (198bc <cmd_signature_message+0x10c>)
   19888:	f004 fe7c 	bl	1e584 <printf>
}
   1988c:	2000      	movs	r0, #0
   1988e:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
   19892:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19894:	2001e440 	.word	0x2001e440
   19898:	00026ab2 	.word	0x00026ab2
   1989c:	00026aba 	.word	0x00026aba
   198a0:	00026a20 	.word	0x00026a20
   198a4:	200101f8 	.word	0x200101f8
   198a8:	20010378 	.word	0x20010378
   198ac:	00026af3 	.word	0x00026af3
   198b0:	00026b00 	.word	0x00026b00
   198b4:	000269b4 	.word	0x000269b4
   198b8:	0002783f 	.word	0x0002783f
   198bc:	0002745c 	.word	0x0002745c

000198c0 <dynamic_cmd_get>:
}

/* dynamic command creation */
static void dynamic_cmd_get(size_t idx, struct shell_static_entry *entry)
{
	if (idx < dynamic_cmd_cnt) {
   198c0:	4b08      	ldr	r3, [pc, #32]	; (198e4 <dynamic_cmd_get+0x24>)
   198c2:	781b      	ldrb	r3, [r3, #0]
   198c4:	4283      	cmp	r3, r0
   198c6:	d90a      	bls.n	198de <dynamic_cmd_get+0x1e>
		/* m_dynamic_cmd_buffer must be sorted alphabetically to ensure
		 * correct CLI completion
		 */
		entry->syntax = dynamic_cmd_buffer[idx];
   198c8:	4b07      	ldr	r3, [pc, #28]	; (198e8 <dynamic_cmd_get+0x28>)
   198ca:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   198ce:	4418      	add	r0, r3
		entry->handler  = NULL;
   198d0:	2300      	movs	r3, #0
		entry->subcmd = NULL;
   198d2:	e9c1 3302 	strd	r3, r3, [r1, #8]
		entry->help = "Show dynamic command name.";
   198d6:	4b05      	ldr	r3, [pc, #20]	; (198ec <dynamic_cmd_get+0x2c>)
		entry->syntax = dynamic_cmd_buffer[idx];
   198d8:	6008      	str	r0, [r1, #0]
		entry->help = "Show dynamic command name.";
   198da:	604b      	str	r3, [r1, #4]
   198dc:	4770      	bx	lr
	} else {
		/* if there are no more dynamic commands available syntax
		 * must be set to NULL.
		 */
		entry->syntax = NULL;
   198de:	2300      	movs	r3, #0
   198e0:	600b      	str	r3, [r1, #0]
	}
}
   198e2:	4770      	bx	lr
   198e4:	2001ec14 	.word	0x2001ec14
   198e8:	2001e980 	.word	0x2001e980
   198ec:	00026c68 	.word	0x00026c68

000198f0 <cmd_dynamic_show>:
{
   198f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (dynamic_cmd_cnt == 0U) {
   198f4:	4d12      	ldr	r5, [pc, #72]	; (19940 <cmd_dynamic_show+0x50>)
{
   198f6:	4606      	mov	r6, r0
	if (dynamic_cmd_cnt == 0U) {
   198f8:	782a      	ldrb	r2, [r5, #0]
   198fa:	b942      	cbnz	r2, 1990e <cmd_dynamic_show+0x1e>
		shell_warn(shell, "Please add some commands first.");
   198fc:	2104      	movs	r1, #4
   198fe:	4a11      	ldr	r2, [pc, #68]	; (19944 <cmd_dynamic_show+0x54>)
   19900:	f008 fb63 	bl	21fca <shell_fprintf>
   19904:	f06f 0007 	mvn.w	r0, #7
}
   19908:	b002      	add	sp, #8
   1990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	shell_print(shell, "Dynamic command list:");
   1990e:	2100      	movs	r1, #0
   19910:	4a0d      	ldr	r2, [pc, #52]	; (19948 <cmd_dynamic_show+0x58>)
   19912:	f008 fb5a 	bl	21fca <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   19916:	2400      	movs	r4, #0
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   19918:	4f0c      	ldr	r7, [pc, #48]	; (1994c <cmd_dynamic_show+0x5c>)
   1991a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 19950 <cmd_dynamic_show+0x60>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   1991e:	7829      	ldrb	r1, [r5, #0]
   19920:	b2e3      	uxtb	r3, r4
   19922:	4299      	cmp	r1, r3
   19924:	d801      	bhi.n	1992a <cmd_dynamic_show+0x3a>
	return 0;
   19926:	2000      	movs	r0, #0
   19928:	e7ee      	b.n	19908 <cmd_dynamic_show+0x18>
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
   1992a:	eb03 1143 	add.w	r1, r3, r3, lsl #5
   1992e:	4439      	add	r1, r7
   19930:	9100      	str	r1, [sp, #0]
   19932:	4642      	mov	r2, r8
   19934:	2100      	movs	r1, #0
   19936:	4630      	mov	r0, r6
   19938:	f008 fb47 	bl	21fca <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
   1993c:	3401      	adds	r4, #1
   1993e:	e7ee      	b.n	1991e <cmd_dynamic_show+0x2e>
   19940:	2001ec14 	.word	0x2001ec14
   19944:	00026c83 	.word	0x00026c83
   19948:	00026ca4 	.word	0x00026ca4
   1994c:	2001e980 	.word	0x2001e980
   19950:	00026cbb 	.word	0x00026cbb

00019954 <cmd_dynamic_execute>:
{
   19954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19958:	4606      	mov	r6, r0
   1995a:	4615      	mov	r5, r2
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   1995c:	2700      	movs	r7, #0
   1995e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 199b8 <cmd_dynamic_execute+0x64>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   19962:	f8df 9058 	ldr.w	r9, [pc, #88]	; 199bc <cmd_dynamic_execute+0x68>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   19966:	f898 2000 	ldrb.w	r2, [r8]
   1996a:	b2fb      	uxtb	r3, r7
   1996c:	429a      	cmp	r2, r3
   1996e:	6869      	ldr	r1, [r5, #4]
   19970:	d809      	bhi.n	19986 <cmd_dynamic_execute+0x32>
	shell_error(shell, "%s: uknown parameter: %s", argv[0], argv[1]);
   19972:	9100      	str	r1, [sp, #0]
   19974:	4630      	mov	r0, r6
   19976:	2102      	movs	r1, #2
   19978:	682b      	ldr	r3, [r5, #0]
   1997a:	4a0d      	ldr	r2, [pc, #52]	; (199b0 <cmd_dynamic_execute+0x5c>)
   1997c:	f008 fb25 	bl	21fca <shell_fprintf>
	return -ENOEXEC;
   19980:	f06f 0407 	mvn.w	r4, #7
   19984:	e00f      	b.n	199a6 <cmd_dynamic_execute+0x52>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   19986:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   1998a:	eb09 0003 	add.w	r0, r9, r3
   1998e:	f009 fb64 	bl	2305a <strcmp>
   19992:	3701      	adds	r7, #1
   19994:	4604      	mov	r4, r0
   19996:	2800      	cmp	r0, #0
   19998:	d1e5      	bne.n	19966 <cmd_dynamic_execute+0x12>
			shell_print(shell, "dynamic command: %s", argv[1]);
   1999a:	4601      	mov	r1, r0
   1999c:	686b      	ldr	r3, [r5, #4]
   1999e:	4630      	mov	r0, r6
   199a0:	4a04      	ldr	r2, [pc, #16]	; (199b4 <cmd_dynamic_execute+0x60>)
   199a2:	f008 fb12 	bl	21fca <shell_fprintf>
}
   199a6:	4620      	mov	r0, r4
   199a8:	b003      	add	sp, #12
   199aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199ae:	bf00      	nop
   199b0:	00026cda 	.word	0x00026cda
   199b4:	00026cc5 	.word	0x00026cc5
   199b8:	2001ec14 	.word	0x2001ec14
   199bc:	2001e980 	.word	0x2001e980

000199c0 <cmd_dynamic_remove>:
{
   199c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   199c4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 19a54 <cmd_dynamic_remove+0x94>
{
   199c8:	4693      	mov	fp, r2
   199ca:	4606      	mov	r6, r0
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   199cc:	2200      	movs	r2, #0
   199ce:	46d0      	mov	r8, sl
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   199d0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19a58 <cmd_dynamic_remove+0x98>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
   199d4:	f89a 1000 	ldrb.w	r1, [sl]
   199d8:	b2d4      	uxtb	r4, r2
   199da:	42a1      	cmp	r1, r4
   199dc:	f8db 3004 	ldr.w	r3, [fp, #4]
   199e0:	d807      	bhi.n	199f2 <cmd_dynamic_remove+0x32>
	shell_error(shell, "did not find command: %s", argv[1]);
   199e2:	2102      	movs	r1, #2
   199e4:	4630      	mov	r0, r6
   199e6:	4a19      	ldr	r2, [pc, #100]	; (19a4c <cmd_dynamic_remove+0x8c>)
   199e8:	f008 faef 	bl	21fca <shell_fprintf>
	return -ENOEXEC;
   199ec:	f06f 0507 	mvn.w	r5, #7
   199f0:	e01a      	b.n	19a28 <cmd_dynamic_remove+0x68>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   199f2:	eb04 1744 	add.w	r7, r4, r4, lsl #5
   199f6:	444f      	add	r7, r9
   199f8:	4619      	mov	r1, r3
   199fa:	4638      	mov	r0, r7
   199fc:	9201      	str	r2, [sp, #4]
   199fe:	f009 fb2c 	bl	2305a <strcmp>
   19a02:	9a01      	ldr	r2, [sp, #4]
   19a04:	4605      	mov	r5, r0
   19a06:	3201      	adds	r2, #1
   19a08:	2800      	cmp	r0, #0
   19a0a:	d1e3      	bne.n	199d4 <cmd_dynamic_remove+0x14>
			if (idx == MAX_CMD_CNT - 1) {
   19a0c:	2c13      	cmp	r4, #19
   19a0e:	d10f      	bne.n	19a30 <cmd_dynamic_remove+0x70>
				dynamic_cmd_buffer[idx][0] = '\0';
   19a10:	f889 0273 	strb.w	r0, [r9, #627]	; 0x273
			--dynamic_cmd_cnt;
   19a14:	f898 3000 	ldrb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   19a18:	2100      	movs	r1, #0
			--dynamic_cmd_cnt;
   19a1a:	3b01      	subs	r3, #1
			shell_print(shell, "command removed successfully");
   19a1c:	4630      	mov	r0, r6
   19a1e:	4a0c      	ldr	r2, [pc, #48]	; (19a50 <cmd_dynamic_remove+0x90>)
			--dynamic_cmd_cnt;
   19a20:	f888 3000 	strb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
   19a24:	f008 fad1 	bl	21fca <shell_fprintf>
}
   19a28:	4628      	mov	r0, r5
   19a2a:	b003      	add	sp, #12
   19a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(dynamic_cmd_cnt - idx));
   19a30:	f89a 2000 	ldrb.w	r2, [sl]
				memmove(dynamic_cmd_buffer[idx],
   19a34:	4638      	mov	r0, r7
					(dynamic_cmd_cnt - idx));
   19a36:	1b12      	subs	r2, r2, r4
					dynamic_cmd_buffer[idx + 1],
   19a38:	3401      	adds	r4, #1
   19a3a:	eb04 1444 	add.w	r4, r4, r4, lsl #5
				memmove(dynamic_cmd_buffer[idx],
   19a3e:	eb02 1242 	add.w	r2, r2, r2, lsl #5
   19a42:	eb09 0104 	add.w	r1, r9, r4
   19a46:	f009 fb33 	bl	230b0 <memmove>
   19a4a:	e7e3      	b.n	19a14 <cmd_dynamic_remove+0x54>
   19a4c:	00026d12 	.word	0x00026d12
   19a50:	00026cf4 	.word	0x00026cf4
   19a54:	2001ec14 	.word	0x2001ec14
   19a58:	2001e980 	.word	0x2001e980

00019a5c <cmd_dynamic_add>:
{
   19a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   19a60:	4d29      	ldr	r5, [pc, #164]	; (19b08 <cmd_dynamic_add+0xac>)
{
   19a62:	4604      	mov	r4, r0
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   19a64:	782b      	ldrb	r3, [r5, #0]
{
   19a66:	4616      	mov	r6, r2
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
   19a68:	2b13      	cmp	r3, #19
   19a6a:	d907      	bls.n	19a7c <cmd_dynamic_add+0x20>
		shell_error(shell, "command limit reached");
   19a6c:	2102      	movs	r1, #2
   19a6e:	4a27      	ldr	r2, [pc, #156]	; (19b0c <cmd_dynamic_add+0xb0>)
			shell_error(shell, "duplicated command");
   19a70:	f008 faab 	bl	21fca <shell_fprintf>
			return -ENOEXEC;
   19a74:	f06f 0007 	mvn.w	r0, #7
}
   19a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cmd_len = strlen(argv[1]);
   19a7c:	6850      	ldr	r0, [r2, #4]
   19a7e:	f009 fae5 	bl	2304c <strlen>
   19a82:	b280      	uxth	r0, r0
	if (cmd_len >= MAX_CMD_LEN) {
   19a84:	2820      	cmp	r0, #32
   19a86:	d80f      	bhi.n	19aa8 <cmd_dynamic_add+0x4c>
   19a88:	2300      	movs	r3, #0
   19a8a:	6877      	ldr	r7, [r6, #4]
	for (idx = 0U; idx < cmd_len; idx++) {
   19a8c:	b29a      	uxth	r2, r3
   19a8e:	4290      	cmp	r0, r2
   19a90:	d80e      	bhi.n	19ab0 <cmd_dynamic_add+0x54>
   19a92:	4f1f      	ldr	r7, [pc, #124]	; (19b10 <cmd_dynamic_add+0xb4>)
   19a94:	f04f 0800 	mov.w	r8, #0
   19a98:	46b9      	mov	r9, r7
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
   19a9a:	4638      	mov	r0, r7
   19a9c:	6871      	ldr	r1, [r6, #4]
   19a9e:	f009 fadc 	bl	2305a <strcmp>
   19aa2:	b990      	cbnz	r0, 19aca <cmd_dynamic_add+0x6e>
			shell_error(shell, "duplicated command");
   19aa4:	4a1b      	ldr	r2, [pc, #108]	; (19b14 <cmd_dynamic_add+0xb8>)
   19aa6:	e000      	b.n	19aaa <cmd_dynamic_add+0x4e>
		shell_error(shell, "too long command");
   19aa8:	4a1b      	ldr	r2, [pc, #108]	; (19b18 <cmd_dynamic_add+0xbc>)
			shell_error(shell, "duplicated command");
   19aaa:	2102      	movs	r1, #2
   19aac:	4620      	mov	r0, r4
   19aae:	e7df      	b.n	19a70 <cmd_dynamic_add+0x14>
		if (!isalnum((int)(argv[1][idx]))) {
   19ab0:	5cfa      	ldrb	r2, [r7, r3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19ab2:	f042 0120 	orr.w	r1, r2, #32
   19ab6:	3961      	subs	r1, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   19ab8:	2919      	cmp	r1, #25
   19aba:	d904      	bls.n	19ac6 <cmd_dynamic_add+0x6a>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   19abc:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   19abe:	2a09      	cmp	r2, #9
   19ac0:	d901      	bls.n	19ac6 <cmd_dynamic_add+0x6a>
			shell_error(shell,
   19ac2:	4a16      	ldr	r2, [pc, #88]	; (19b1c <cmd_dynamic_add+0xc0>)
   19ac4:	e7f1      	b.n	19aaa <cmd_dynamic_add+0x4e>
	for (idx = 0U; idx < cmd_len; idx++) {
   19ac6:	3301      	adds	r3, #1
   19ac8:	e7e0      	b.n	19a8c <cmd_dynamic_add+0x30>
	for (idx = 0U; idx < MAX_CMD_CNT; idx++) {
   19aca:	f108 0801 	add.w	r8, r8, #1
   19ace:	f1b8 0f14 	cmp.w	r8, #20
   19ad2:	f107 0721 	add.w	r7, r7, #33	; 0x21
   19ad6:	d1e0      	bne.n	19a9a <cmd_dynamic_add+0x3e>
	sprintf(dynamic_cmd_buffer[dynamic_cmd_cnt++], "%s", argv[1]);
   19ad8:	7828      	ldrb	r0, [r5, #0]
   19ada:	6872      	ldr	r2, [r6, #4]
   19adc:	1c43      	adds	r3, r0, #1
   19ade:	eb00 1040 	add.w	r0, r0, r0, lsl #5
   19ae2:	490f      	ldr	r1, [pc, #60]	; (19b20 <cmd_dynamic_add+0xc4>)
   19ae4:	4448      	add	r0, r9
   19ae6:	702b      	strb	r3, [r5, #0]
   19ae8:	f004 fd34 	bl	1e554 <sprintf>
	qsort(dynamic_cmd_buffer, dynamic_cmd_cnt,
   19aec:	2221      	movs	r2, #33	; 0x21
   19aee:	4b0d      	ldr	r3, [pc, #52]	; (19b24 <cmd_dynamic_add+0xc8>)
   19af0:	7829      	ldrb	r1, [r5, #0]
   19af2:	4807      	ldr	r0, [pc, #28]	; (19b10 <cmd_dynamic_add+0xb4>)
   19af4:	f006 ffe6 	bl	20ac4 <qsort>
	shell_print(shell, "command added successfully");
   19af8:	4620      	mov	r0, r4
   19afa:	2100      	movs	r1, #0
   19afc:	4a0a      	ldr	r2, [pc, #40]	; (19b28 <cmd_dynamic_add+0xcc>)
   19afe:	f008 fa64 	bl	21fca <shell_fprintf>
	return 0;
   19b02:	2000      	movs	r0, #0
   19b04:	e7b8      	b.n	19a78 <cmd_dynamic_add+0x1c>
   19b06:	bf00      	nop
   19b08:	2001ec14 	.word	0x2001ec14
   19b0c:	00026d2c 	.word	0x00026d2c
   19b10:	2001e980 	.word	0x2001e980
   19b14:	00026d93 	.word	0x00026d93
   19b18:	00026d43 	.word	0x00026d43
   19b1c:	00026d55 	.word	0x00026d55
   19b20:	00027587 	.word	0x00027587
   19b24:	00020a6b 	.word	0x00020a6b
   19b28:	00026da7 	.word	0x00026da7

00019b2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   19b2c:	680b      	ldr	r3, [r1, #0]
   19b2e:	3301      	adds	r3, #1
   19b30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   19b32:	4b01      	ldr	r3, [pc, #4]	; (19b38 <char_out+0xc>)
   19b34:	681b      	ldr	r3, [r3, #0]
   19b36:	4718      	bx	r3
   19b38:	20010000 	.word	0x20010000

00019b3c <__printk_hook_install>:
	_char_out = fn;
   19b3c:	4b01      	ldr	r3, [pc, #4]	; (19b44 <__printk_hook_install+0x8>)
   19b3e:	6018      	str	r0, [r3, #0]
}
   19b40:	4770      	bx	lr
   19b42:	bf00      	nop
   19b44:	20010000 	.word	0x20010000

00019b48 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   19b48:	b507      	push	{r0, r1, r2, lr}
   19b4a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   19b4c:	2100      	movs	r1, #0
{
   19b4e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   19b50:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   19b52:	4803      	ldr	r0, [pc, #12]	; (19b60 <vprintk+0x18>)
   19b54:	a901      	add	r1, sp, #4
   19b56:	f000 fad9 	bl	1a10c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   19b5a:	b003      	add	sp, #12
   19b5c:	f85d fb04 	ldr.w	pc, [sp], #4
   19b60:	00019b2d 	.word	0x00019b2d

00019b64 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   19b64:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   19b66:	2500      	movs	r5, #0
{
   19b68:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   19b6a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   19b6e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   19b70:	a901      	add	r1, sp, #4
   19b72:	4805      	ldr	r0, [pc, #20]	; (19b88 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   19b74:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   19b76:	f000 fac9 	bl	1a10c <cbvprintf>

	if (ctx.count < ctx.max) {
   19b7a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   19b7e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   19b80:	bfb8      	it	lt
   19b82:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   19b84:	b005      	add	sp, #20
   19b86:	bd30      	pop	{r4, r5, pc}
   19b88:	00021095 	.word	0x00021095

00019b8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   19b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19b90:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   19b94:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   19b96:	f019 0808 	ands.w	r8, r9, #8
{
   19b9a:	4693      	mov	fp, r2
	if (processing) {
   19b9c:	d00d      	beq.n	19bba <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   19b9e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   19ba0:	bf0c      	ite	eq
   19ba2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   19ba6:	f049 0920 	orrne.w	r9, r9, #32
   19baa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   19bae:	f38b 8811 	msr	BASEPRI, fp
   19bb2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   19bb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19bba:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   19bbe:	2902      	cmp	r1, #2
   19bc0:	d107      	bne.n	19bd2 <process_event+0x46>
			evt = process_recheck(mgr);
   19bc2:	4620      	mov	r0, r4
   19bc4:	f007 fa93 	bl	210ee <process_recheck>
		if (evt == EVT_NOP) {
   19bc8:	2800      	cmp	r0, #0
   19bca:	d0f0      	beq.n	19bae <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   19bcc:	2801      	cmp	r0, #1
   19bce:	8b23      	ldrh	r3, [r4, #24]
   19bd0:	d150      	bne.n	19c74 <process_event+0xe8>
			res = mgr->last_res;
   19bd2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19bd4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   19bd6:	2f00      	cmp	r7, #0
   19bd8:	da15      	bge.n	19c06 <process_event+0x7a>
		*clients = mgr->clients;
   19bda:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19bdc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   19be0:	e9c4 8800 	strd	r8, r8, [r4]
   19be4:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   19be8:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   19bea:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   19bec:	8b21      	ldrh	r1, [r4, #24]
   19bee:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   19bf2:	45ca      	cmp	sl, r9
   19bf4:	d002      	beq.n	19bfc <process_event+0x70>
		if (do_monitors
   19bf6:	68a3      	ldr	r3, [r4, #8]
   19bf8:	2b00      	cmp	r3, #0
   19bfa:	d15c      	bne.n	19cb6 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   19bfc:	b90d      	cbnz	r5, 19c02 <process_event+0x76>
		    || (transit != NULL)) {
   19bfe:	2e00      	cmp	r6, #0
   19c00:	d074      	beq.n	19cec <process_event+0x160>
   19c02:	2300      	movs	r3, #0
   19c04:	e058      	b.n	19cb8 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19c06:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19c0a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   19c0c:	2a01      	cmp	r2, #1
   19c0e:	d820      	bhi.n	19c52 <process_event+0xc6>
		*clients = mgr->clients;
   19c10:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   19c14:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   19c16:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   19c18:	b289      	uxth	r1, r1
	list->tail = NULL;
   19c1a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   19c1e:	d10c      	bne.n	19c3a <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   19c20:	2d00      	cmp	r5, #0
   19c22:	462b      	mov	r3, r5
   19c24:	bf38      	it	cc
   19c26:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19c28:	b12b      	cbz	r3, 19c36 <process_event+0xaa>
				mgr->refs += 1U;
   19c2a:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19c2c:	681b      	ldr	r3, [r3, #0]
   19c2e:	3201      	adds	r2, #1
   19c30:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   19c32:	2b00      	cmp	r3, #0
   19c34:	d1f8      	bne.n	19c28 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c36:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   19c3a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c3c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19c3e:	f007 fa56 	bl	210ee <process_recheck>
   19c42:	4606      	mov	r6, r0
   19c44:	2800      	cmp	r0, #0
   19c46:	d0d1      	beq.n	19bec <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19c48:	8b23      	ldrh	r3, [r4, #24]
   19c4a:	f043 0320 	orr.w	r3, r3, #32
   19c4e:	8323      	strh	r3, [r4, #24]
   19c50:	e7cb      	b.n	19bea <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   19c52:	2b04      	cmp	r3, #4
   19c54:	d10c      	bne.n	19c70 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c56:	f021 0107 	bic.w	r1, r1, #7
   19c5a:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   19c5c:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c5e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   19c60:	f007 fa45 	bl	210ee <process_recheck>
   19c64:	4605      	mov	r5, r0
   19c66:	2800      	cmp	r0, #0
   19c68:	d0bf      	beq.n	19bea <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   19c6a:	f041 0120 	orr.w	r1, r1, #32
   19c6e:	8321      	strh	r1, [r4, #24]
   19c70:	2500      	movs	r5, #0
   19c72:	e7ba      	b.n	19bea <process_event+0x5e>
		} else if (evt == EVT_START) {
   19c74:	2803      	cmp	r0, #3
   19c76:	d109      	bne.n	19c8c <process_event+0x100>
			transit = mgr->transitions->start;
   19c78:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c7a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   19c7e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c80:	f043 0306 	orr.w	r3, r3, #6
}
   19c84:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   19c86:	8323      	strh	r3, [r4, #24]
		res = 0;
   19c88:	462f      	mov	r7, r5
   19c8a:	e7af      	b.n	19bec <process_event+0x60>
		} else if (evt == EVT_STOP) {
   19c8c:	2804      	cmp	r0, #4
   19c8e:	d106      	bne.n	19c9e <process_event+0x112>
			transit = mgr->transitions->stop;
   19c90:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c92:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   19c96:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19c98:	f043 0304 	orr.w	r3, r3, #4
   19c9c:	e7f2      	b.n	19c84 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   19c9e:	2805      	cmp	r0, #5
   19ca0:	d106      	bne.n	19cb0 <process_event+0x124>
			transit = mgr->transitions->reset;
   19ca2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19ca4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   19ca8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   19caa:	f043 0305 	orr.w	r3, r3, #5
   19cae:	e7e9      	b.n	19c84 <process_event+0xf8>
   19cb0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   19cb2:	462e      	mov	r6, r5
   19cb4:	e7e8      	b.n	19c88 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   19cb6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   19cb8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   19cbc:	8321      	strh	r1, [r4, #24]
   19cbe:	f38b 8811 	msr	BASEPRI, fp
   19cc2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   19cc6:	bb03      	cbnz	r3, 19d0a <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   19cc8:	2d00      	cmp	r5, #0
   19cca:	d133      	bne.n	19d34 <process_event+0x1a8>
			if (transit != NULL) {
   19ccc:	b116      	cbz	r6, 19cd4 <process_event+0x148>
				transit(mgr, transition_complete);
   19cce:	4620      	mov	r0, r4
   19cd0:	4920      	ldr	r1, [pc, #128]	; (19d54 <process_event+0x1c8>)
   19cd2:	47b0      	blx	r6
	__asm__ volatile(
   19cd4:	f04f 0320 	mov.w	r3, #32
   19cd8:	f3ef 8b11 	mrs	fp, BASEPRI
   19cdc:	f383 8811 	msr	BASEPRI, r3
   19ce0:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   19ce4:	8b23      	ldrh	r3, [r4, #24]
   19ce6:	f023 0308 	bic.w	r3, r3, #8
   19cea:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   19cec:	8b23      	ldrh	r3, [r4, #24]
   19cee:	06da      	lsls	r2, r3, #27
   19cf0:	d528      	bpl.n	19d44 <process_event+0x1b8>
			evt = EVT_COMPLETE;
   19cf2:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   19cf4:	f023 0310 	bic.w	r3, r3, #16
   19cf8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   19cfa:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   19cfe:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   19d02:	2900      	cmp	r1, #0
   19d04:	f47f af5b 	bne.w	19bbe <process_event+0x32>
out:
   19d08:	e751      	b.n	19bae <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19d0a:	68a1      	ldr	r1, [r4, #8]
   19d0c:	2900      	cmp	r1, #0
   19d0e:	d0db      	beq.n	19cc8 <process_event+0x13c>
	return node->next;
   19d10:	680b      	ldr	r3, [r1, #0]
   19d12:	2b00      	cmp	r3, #0
   19d14:	bf38      	it	cc
   19d16:	2300      	movcc	r3, #0
   19d18:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   19d1a:	4652      	mov	r2, sl
   19d1c:	463b      	mov	r3, r7
   19d1e:	4620      	mov	r0, r4
   19d20:	f8d1 b004 	ldr.w	fp, [r1, #4]
   19d24:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19d26:	f1b9 0f00 	cmp.w	r9, #0
   19d2a:	d0cd      	beq.n	19cc8 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19d2c:	4649      	mov	r1, r9
   19d2e:	f8d9 3000 	ldr.w	r3, [r9]
   19d32:	e7ee      	b.n	19d12 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19d34:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   19d36:	463b      	mov	r3, r7
   19d38:	4652      	mov	r2, sl
   19d3a:	4620      	mov	r0, r4
   19d3c:	682d      	ldr	r5, [r5, #0]
   19d3e:	f007 f9f2 	bl	21126 <notify_one>
   19d42:	e7c1      	b.n	19cc8 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   19d44:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19d48:	bf1e      	ittt	ne
   19d4a:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   19d4e:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   19d50:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   19d52:	e7d2      	b.n	19cfa <process_event+0x16e>
   19d54:	00021153 	.word	0x00021153

00019d58 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   19d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   19d5c:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   19d5e:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   19d60:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   19d64:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   19d66:	f240 746c 	movw	r4, #1900	; 0x76c
   19d6a:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   19d6c:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   19d6e:	6943      	ldr	r3, [r0, #20]
{
   19d70:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   19d72:	18e4      	adds	r4, r4, r3
   19d74:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   19d78:	f1b9 0f02 	cmp.w	r9, #2
   19d7c:	bf8c      	ite	hi
   19d7e:	2300      	movhi	r3, #0
   19d80:	2301      	movls	r3, #1
   19d82:	1ae4      	subs	r4, r4, r3
   19d84:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   19d88:	2c00      	cmp	r4, #0
   19d8a:	f175 0300 	sbcs.w	r3, r5, #0
   19d8e:	da57      	bge.n	19e40 <timeutil_timegm64+0xe8>
   19d90:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   19d94:	f44f 72c8 	mov.w	r2, #400	; 0x190
   19d98:	2300      	movs	r3, #0
   19d9a:	1820      	adds	r0, r4, r0
   19d9c:	f145 31ff 	adc.w	r1, r5, #4294967295
   19da0:	f7f2 fa4e 	bl	c240 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   19da4:	4b29      	ldr	r3, [pc, #164]	; (19e4c <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   19da6:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   19daa:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   19dae:	e9d8 5300 	ldrd	r5, r3, [r8]
   19db2:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19db4:	f1b9 0f02 	cmp.w	r9, #2
   19db8:	bf8c      	ite	hi
   19dba:	f06f 0e02 	mvnhi.w	lr, #2
   19dbe:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   19dc2:	ea4f 7be3 	mov.w	fp, r3, asr #31
   19dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19dca:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   19dcc:	fbcc ab03 	smlal	sl, fp, ip, r3
   19dd0:	fbaa 230c 	umull	r2, r3, sl, ip
   19dd4:	fb0c 330b 	mla	r3, ip, fp, r3
   19dd8:	1952      	adds	r2, r2, r5
   19dda:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   19dde:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19de2:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   19de6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   19dea:	fb05 cc04 	mla	ip, r5, r4, ip
   19dee:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19df0:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   19df4:	4465      	add	r5, ip
   19df6:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19dfa:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   19dfe:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   19e02:	f10e 0e02 	add.w	lr, lr, #2
   19e06:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
   19e0a:	f8df c04c 	ldr.w	ip, [pc, #76]	; 19e58 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   19e0e:	1b2c      	subs	r4, r5, r4
   19e10:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   19e12:	fba0 450c 	umull	r4, r5, r0, ip
   19e16:	fb0c 5501 	mla	r5, ip, r1, r5
   19e1a:	490d      	ldr	r1, [pc, #52]	; (19e50 <timeutil_timegm64+0xf8>)
   19e1c:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   19e1e:	490d      	ldr	r1, [pc, #52]	; (19e54 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   19e20:	f145 37ff 	adc.w	r7, r5, #4294967295
   19e24:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   19e28:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   19e2c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   19e30:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   19e34:	18a0      	adds	r0, r4, r2
   19e36:	eb45 0103 	adc.w	r1, r5, r3
   19e3a:	b003      	add	sp, #12
   19e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   19e40:	f44f 72c8 	mov.w	r2, #400	; 0x190
   19e44:	2300      	movs	r3, #0
   19e46:	4620      	mov	r0, r4
   19e48:	4629      	mov	r1, r5
   19e4a:	e7a9      	b.n	19da0 <timeutil_timegm64+0x48>
   19e4c:	fffffe70 	.word	0xfffffe70
   19e50:	fff50594 	.word	0xfff50594
   19e54:	00015180 	.word	0x00015180
   19e58:	00023ab1 	.word	0x00023ab1

00019e5c <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
   19e5c:	2200      	movs	r2, #0
{
   19e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
   19e60:	e9c0 2200 	strd	r2, r2, [r0]
   19e64:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
   19e66:	784a      	ldrb	r2, [r1, #1]
{
   19e68:	4603      	mov	r3, r0
	if (*sp == '%') {
   19e6a:	2a25      	cmp	r2, #37	; 0x25
   19e6c:	d033      	beq.n	19ed6 <extract_conversion+0x7a>
	++sp;
   19e6e:	3101      	adds	r1, #1
   19e70:	460c      	mov	r4, r1
		switch (*sp) {
   19e72:	f811 2b01 	ldrb.w	r2, [r1], #1
   19e76:	2a2b      	cmp	r2, #43	; 0x2b
   19e78:	d03d      	beq.n	19ef6 <extract_conversion+0x9a>
   19e7a:	d82f      	bhi.n	19edc <extract_conversion+0x80>
   19e7c:	2a20      	cmp	r2, #32
   19e7e:	d03e      	beq.n	19efe <extract_conversion+0xa2>
   19e80:	2a23      	cmp	r2, #35	; 0x23
   19e82:	d040      	beq.n	19f06 <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
   19e84:	781a      	ldrb	r2, [r3, #0]
   19e86:	f002 0144 	and.w	r1, r2, #68	; 0x44
   19e8a:	2944      	cmp	r1, #68	; 0x44
   19e8c:	d102      	bne.n	19e94 <extract_conversion+0x38>
		conv->flag_zero = false;
   19e8e:	f36f 1286 	bfc	r2, #6, #1
   19e92:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
   19e94:	7822      	ldrb	r2, [r4, #0]
   19e96:	2a2a      	cmp	r2, #42	; 0x2a
   19e98:	d14c      	bne.n	19f34 <extract_conversion+0xd8>
		conv->width_present = true;
   19e9a:	881a      	ldrh	r2, [r3, #0]
   19e9c:	1c60      	adds	r0, r4, #1
   19e9e:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
   19ea2:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
   19ea4:	7802      	ldrb	r2, [r0, #0]
   19ea6:	2a2e      	cmp	r2, #46	; 0x2e
   19ea8:	d14f      	bne.n	19f4a <extract_conversion+0xee>
	if (*sp == '*') {
   19eaa:	7842      	ldrb	r2, [r0, #1]
   19eac:	2a2a      	cmp	r2, #42	; 0x2a
   19eae:	d045      	beq.n	19f3c <extract_conversion+0xe0>
   19eb0:	3001      	adds	r0, #1
	const char *sp = *str;
   19eb2:	4605      	mov	r5, r0
	size_t val = 0;
   19eb4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   19eb6:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   19eb8:	4601      	mov	r1, r0
   19eba:	f811 4b01 	ldrb.w	r4, [r1], #1
   19ebe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   19ec2:	2e09      	cmp	r6, #9
   19ec4:	d953      	bls.n	19f6e <extract_conversion+0x112>
	if (sp != wp) {
   19ec6:	42a8      	cmp	r0, r5
		conv->prec_present = true;
   19ec8:	bf1f      	itttt	ne
   19eca:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
   19ecc:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
   19ece:	f041 0102 	orrne.w	r1, r1, #2
   19ed2:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
   19ed4:	e039      	b.n	19f4a <extract_conversion+0xee>
		conv->specifier = *sp++;
   19ed6:	1c88      	adds	r0, r1, #2
   19ed8:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
   19eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
   19edc:	2a2d      	cmp	r2, #45	; 0x2d
   19ede:	d005      	beq.n	19eec <extract_conversion+0x90>
   19ee0:	2a30      	cmp	r2, #48	; 0x30
   19ee2:	d1cf      	bne.n	19e84 <extract_conversion+0x28>
			conv->flag_zero = true;
   19ee4:	781a      	ldrb	r2, [r3, #0]
   19ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19eea:	e002      	b.n	19ef2 <extract_conversion+0x96>
			conv->flag_dash = true;
   19eec:	781a      	ldrb	r2, [r3, #0]
   19eee:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
   19ef2:	701a      	strb	r2, [r3, #0]
			break;
   19ef4:	e7bc      	b.n	19e70 <extract_conversion+0x14>
			conv->flag_plus = true;
   19ef6:	781a      	ldrb	r2, [r3, #0]
   19ef8:	f042 0208 	orr.w	r2, r2, #8
   19efc:	e7f9      	b.n	19ef2 <extract_conversion+0x96>
			conv->flag_space = true;
   19efe:	781a      	ldrb	r2, [r3, #0]
   19f00:	f042 0210 	orr.w	r2, r2, #16
   19f04:	e7f5      	b.n	19ef2 <extract_conversion+0x96>
			conv->flag_hash = true;
   19f06:	781a      	ldrb	r2, [r3, #0]
   19f08:	f042 0220 	orr.w	r2, r2, #32
   19f0c:	e7f1      	b.n	19ef2 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
   19f0e:	4608      	mov	r0, r1
   19f10:	fb07 5202 	mla	r2, r7, r2, r5
   19f14:	3a30      	subs	r2, #48	; 0x30
   19f16:	4601      	mov	r1, r0
   19f18:	f811 5b01 	ldrb.w	r5, [r1], #1
   19f1c:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   19f20:	2e09      	cmp	r6, #9
   19f22:	d9f4      	bls.n	19f0e <extract_conversion+0xb2>
	if (sp != wp) {
   19f24:	4284      	cmp	r4, r0
		conv->width_present = true;
   19f26:	bf1f      	itttt	ne
   19f28:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
   19f2a:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
   19f2c:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
   19f30:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
   19f32:	e7b7      	b.n	19ea4 <extract_conversion+0x48>
   19f34:	4620      	mov	r0, r4
	size_t val = 0;
   19f36:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   19f38:	270a      	movs	r7, #10
   19f3a:	e7ec      	b.n	19f16 <extract_conversion+0xba>
		conv->prec_present = true;
   19f3c:	785a      	ldrb	r2, [r3, #1]
		return ++sp;
   19f3e:	3002      	adds	r0, #2
		conv->prec_present = true;
   19f40:	f022 0206 	bic.w	r2, r2, #6
   19f44:	f042 0206 	orr.w	r2, r2, #6
   19f48:	705a      	strb	r2, [r3, #1]
	switch (*sp) {
   19f4a:	4601      	mov	r1, r0
   19f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
   19f50:	2c6c      	cmp	r4, #108	; 0x6c
   19f52:	d03c      	beq.n	19fce <extract_conversion+0x172>
   19f54:	d810      	bhi.n	19f78 <extract_conversion+0x11c>
   19f56:	2c68      	cmp	r4, #104	; 0x68
   19f58:	d015      	beq.n	19f86 <extract_conversion+0x12a>
   19f5a:	2c6a      	cmp	r4, #106	; 0x6a
   19f5c:	d03f      	beq.n	19fde <extract_conversion+0x182>
   19f5e:	2c4c      	cmp	r4, #76	; 0x4c
   19f60:	d042      	beq.n	19fe8 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
   19f62:	785a      	ldrb	r2, [r3, #1]
		break;
   19f64:	4601      	mov	r1, r0
		conv->length_mod = LENGTH_NONE;
   19f66:	f36f 02c6 	bfc	r2, #3, #4
   19f6a:	705a      	strb	r2, [r3, #1]
		break;
   19f6c:	e014      	b.n	19f98 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
   19f6e:	fb07 4202 	mla	r2, r7, r2, r4
   19f72:	4608      	mov	r0, r1
   19f74:	3a30      	subs	r2, #48	; 0x30
   19f76:	e79f      	b.n	19eb8 <extract_conversion+0x5c>
	switch (*sp) {
   19f78:	2c74      	cmp	r4, #116	; 0x74
   19f7a:	785a      	ldrb	r2, [r3, #1]
   19f7c:	d032      	beq.n	19fe4 <extract_conversion+0x188>
   19f7e:	2c7a      	cmp	r4, #122	; 0x7a
   19f80:	d1ef      	bne.n	19f62 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
   19f82:	2006      	movs	r0, #6
   19f84:	e01f      	b.n	19fc6 <extract_conversion+0x16a>
		if (*++sp == 'h') {
   19f86:	7842      	ldrb	r2, [r0, #1]
   19f88:	2a68      	cmp	r2, #104	; 0x68
   19f8a:	785a      	ldrb	r2, [r3, #1]
   19f8c:	d11a      	bne.n	19fc4 <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
   19f8e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   19f90:	f361 02c6 	bfi	r2, r1, #3, #4
   19f94:	705a      	strb	r2, [r3, #1]
			++sp;
   19f96:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
   19f98:	4608      	mov	r0, r1
   19f9a:	f810 4b01 	ldrb.w	r4, [r0], #1
	switch (conv->specifier) {
   19f9e:	2c78      	cmp	r4, #120	; 0x78
	conv->specifier = *sp++;
   19fa0:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
   19fa2:	f200 80ac 	bhi.w	1a0fe <extract_conversion+0x2a2>
   19fa6:	2c57      	cmp	r4, #87	; 0x57
   19fa8:	d829      	bhi.n	19ffe <extract_conversion+0x1a2>
   19faa:	2c41      	cmp	r4, #65	; 0x41
   19fac:	d003      	beq.n	19fb6 <extract_conversion+0x15a>
   19fae:	3c45      	subs	r4, #69	; 0x45
   19fb0:	2c02      	cmp	r4, #2
   19fb2:	f200 80a4 	bhi.w	1a0fe <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
   19fb6:	2104      	movs	r1, #4
   19fb8:	789a      	ldrb	r2, [r3, #2]
   19fba:	f361 0202 	bfi	r2, r1, #0, #3
   19fbe:	709a      	strb	r2, [r3, #2]
			unsupported = true;
   19fc0:	2201      	movs	r2, #1
			break;
   19fc2:	e078      	b.n	1a0b6 <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
   19fc4:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
   19fc6:	f360 02c6 	bfi	r2, r0, #3, #4
   19fca:	705a      	strb	r2, [r3, #1]
   19fcc:	e7e4      	b.n	19f98 <extract_conversion+0x13c>
		if (*++sp == 'l') {
   19fce:	7842      	ldrb	r2, [r0, #1]
   19fd0:	2a6c      	cmp	r2, #108	; 0x6c
   19fd2:	785a      	ldrb	r2, [r3, #1]
   19fd4:	d101      	bne.n	19fda <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
   19fd6:	2104      	movs	r1, #4
   19fd8:	e7da      	b.n	19f90 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
   19fda:	2003      	movs	r0, #3
   19fdc:	e7f3      	b.n	19fc6 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
   19fde:	2005      	movs	r0, #5
   19fe0:	785a      	ldrb	r2, [r3, #1]
   19fe2:	e7f0      	b.n	19fc6 <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
   19fe4:	2007      	movs	r0, #7
   19fe6:	e7ee      	b.n	19fc6 <extract_conversion+0x16a>
		conv->unsupported = true;
   19fe8:	881a      	ldrh	r2, [r3, #0]
   19fea:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   19fee:	f022 0202 	bic.w	r2, r2, #2
   19ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   19ff6:	f042 0202 	orr.w	r2, r2, #2
   19ffa:	801a      	strh	r2, [r3, #0]
		break;
   19ffc:	e7cc      	b.n	19f98 <extract_conversion+0x13c>
   19ffe:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
   1a002:	2a20      	cmp	r2, #32
   1a004:	d87b      	bhi.n	1a0fe <extract_conversion+0x2a2>
   1a006:	a101      	add	r1, pc, #4	; (adr r1, 1a00c <extract_conversion+0x1b0>)
   1a008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1a00c:	0001a0c7 	.word	0x0001a0c7
   1a010:	0001a0ff 	.word	0x0001a0ff
   1a014:	0001a0ff 	.word	0x0001a0ff
   1a018:	0001a0ff 	.word	0x0001a0ff
   1a01c:	0001a0ff 	.word	0x0001a0ff
   1a020:	0001a0ff 	.word	0x0001a0ff
   1a024:	0001a0ff 	.word	0x0001a0ff
   1a028:	0001a0ff 	.word	0x0001a0ff
   1a02c:	0001a0ff 	.word	0x0001a0ff
   1a030:	00019fb7 	.word	0x00019fb7
   1a034:	0001a0ff 	.word	0x0001a0ff
   1a038:	0001a0c7 	.word	0x0001a0c7
   1a03c:	0001a091 	.word	0x0001a091
   1a040:	00019fb7 	.word	0x00019fb7
   1a044:	00019fb7 	.word	0x00019fb7
   1a048:	00019fb7 	.word	0x00019fb7
   1a04c:	0001a0ff 	.word	0x0001a0ff
   1a050:	0001a091 	.word	0x0001a091
   1a054:	0001a0ff 	.word	0x0001a0ff
   1a058:	0001a0ff 	.word	0x0001a0ff
   1a05c:	0001a0ff 	.word	0x0001a0ff
   1a060:	0001a0ff 	.word	0x0001a0ff
   1a064:	0001a0cd 	.word	0x0001a0cd
   1a068:	0001a0c7 	.word	0x0001a0c7
   1a06c:	0001a0e7 	.word	0x0001a0e7
   1a070:	0001a0ff 	.word	0x0001a0ff
   1a074:	0001a0ff 	.word	0x0001a0ff
   1a078:	0001a0e7 	.word	0x0001a0e7
   1a07c:	0001a0ff 	.word	0x0001a0ff
   1a080:	0001a0c7 	.word	0x0001a0c7
   1a084:	0001a0ff 	.word	0x0001a0ff
   1a088:	0001a0ff 	.word	0x0001a0ff
   1a08c:	0001a0c7 	.word	0x0001a0c7
		conv->specifier_cat = SPECIFIER_SINT;
   1a090:	2101      	movs	r1, #1
   1a092:	789a      	ldrb	r2, [r3, #2]
		conv->specifier_cat = SPECIFIER_UINT;
   1a094:	f361 0202 	bfi	r2, r1, #0, #3
   1a098:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a09a:	785a      	ldrb	r2, [r3, #1]
   1a09c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a0a0:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
   1a0a2:	bf02      	ittt	eq
   1a0a4:	7819      	ldrbeq	r1, [r3, #0]
   1a0a6:	f041 0101 	orreq.w	r1, r1, #1
   1a0aa:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
   1a0ac:	2c63      	cmp	r4, #99	; 0x63
   1a0ae:	d12a      	bne.n	1a106 <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1a0b0:	3a00      	subs	r2, #0
   1a0b2:	bf18      	it	ne
   1a0b4:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
   1a0b6:	7819      	ldrb	r1, [r3, #0]
   1a0b8:	f3c1 0440 	ubfx	r4, r1, #1, #1
   1a0bc:	4322      	orrs	r2, r4
   1a0be:	f362 0141 	bfi	r1, r2, #1, #1
   1a0c2:	7019      	strb	r1, [r3, #0]
	return sp;
   1a0c4:	e709      	b.n	19eda <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
   1a0c6:	2102      	movs	r1, #2
   1a0c8:	789a      	ldrb	r2, [r3, #2]
   1a0ca:	e7e3      	b.n	1a094 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
   1a0cc:	2103      	movs	r1, #3
   1a0ce:	789a      	ldrb	r2, [r3, #2]
   1a0d0:	f361 0202 	bfi	r2, r1, #0, #3
   1a0d4:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   1a0d6:	785a      	ldrb	r2, [r3, #1]
   1a0d8:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1a0dc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
   1a0e0:	424a      	negs	r2, r1
   1a0e2:	414a      	adcs	r2, r1
   1a0e4:	e7e7      	b.n	1a0b6 <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
   1a0e6:	2103      	movs	r1, #3
   1a0e8:	789a      	ldrb	r2, [r3, #2]
   1a0ea:	f361 0202 	bfi	r2, r1, #0, #3
   1a0ee:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
   1a0f0:	785a      	ldrb	r2, [r3, #1]
   1a0f2:	f012 0f78 	tst.w	r2, #120	; 0x78
   1a0f6:	bf14      	ite	ne
   1a0f8:	2201      	movne	r2, #1
   1a0fa:	2200      	moveq	r2, #0
   1a0fc:	e7db      	b.n	1a0b6 <extract_conversion+0x25a>
		conv->invalid = true;
   1a0fe:	781a      	ldrb	r2, [r3, #0]
   1a100:	f042 0201 	orr.w	r2, r2, #1
   1a104:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
   1a106:	2200      	movs	r2, #0
   1a108:	e7d5      	b.n	1a0b6 <extract_conversion+0x25a>
   1a10a:	bf00      	nop

0001a10c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a110:	4680      	mov	r8, r0
   1a112:	4689      	mov	r9, r1
   1a114:	4692      	mov	sl, r2
   1a116:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1a118:	2500      	movs	r5, #0
{
   1a11a:	b08f      	sub	sp, #60	; 0x3c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1a11c:	f89a 0000 	ldrb.w	r0, [sl]
   1a120:	b908      	cbnz	r0, 1a126 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1a122:	4628      	mov	r0, r5
   1a124:	e10b      	b.n	1a33e <cbvprintf+0x232>
		if (*fp != '%') {
   1a126:	2825      	cmp	r0, #37	; 0x25
   1a128:	d009      	beq.n	1a13e <cbvprintf+0x32>
			OUTC(*fp++);
   1a12a:	4649      	mov	r1, r9
   1a12c:	47c0      	blx	r8
   1a12e:	2800      	cmp	r0, #0
   1a130:	f2c0 8105 	blt.w	1a33e <cbvprintf+0x232>
   1a134:	f10a 0301 	add.w	r3, sl, #1
   1a138:	9302      	str	r3, [sp, #8]
			OUTC('%');
   1a13a:	3501      	adds	r5, #1
			break;
   1a13c:	e059      	b.n	1a1f2 <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
   1a13e:	4651      	mov	r1, sl
   1a140:	a805      	add	r0, sp, #20
   1a142:	f7ff fe8b 	bl	19e5c <extract_conversion>
		if (conv.width_star) {
   1a146:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
   1a14a:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
   1a14c:	07d9      	lsls	r1, r3, #31
   1a14e:	d51a      	bpl.n	1a186 <cbvprintf+0x7a>
			width = va_arg(ap, int);
   1a150:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
   1a154:	2f00      	cmp	r7, #0
   1a156:	da06      	bge.n	1a166 <cbvprintf+0x5a>
				conv.flag_dash = true;
   1a158:	f89d 2014 	ldrb.w	r2, [sp, #20]
				width = -width;
   1a15c:	427f      	negs	r7, r7
				conv.flag_dash = true;
   1a15e:	f042 0204 	orr.w	r2, r2, #4
   1a162:	f88d 2014 	strb.w	r2, [sp, #20]
		if (conv.prec_star) {
   1a166:	075a      	lsls	r2, r3, #29
   1a168:	d515      	bpl.n	1a196 <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
   1a16a:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
   1a16e:	f1bb 0f00 	cmp.w	fp, #0
   1a172:	da14      	bge.n	1a19e <cbvprintf+0x92>
				conv.prec_present = false;
   1a174:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a178:	f36f 0341 	bfc	r3, #1, #1
   1a17c:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
   1a180:	f04f 3bff 	mov.w	fp, #4294967295
   1a184:	e00b      	b.n	1a19e <cbvprintf+0x92>
		} else if (conv.width_present) {
   1a186:	f99d 2014 	ldrsb.w	r2, [sp, #20]
   1a18a:	2a00      	cmp	r2, #0
		int width = -1;
   1a18c:	bfac      	ite	ge
   1a18e:	f04f 37ff 	movge.w	r7, #4294967295
			width = conv.width_value;
   1a192:	9f06      	ldrlt	r7, [sp, #24]
   1a194:	e7e7      	b.n	1a166 <cbvprintf+0x5a>
		} else if (conv.prec_present) {
   1a196:	079b      	lsls	r3, r3, #30
   1a198:	d5f2      	bpl.n	1a180 <cbvprintf+0x74>
			precision = conv.prec_value;
   1a19a:	f8dd b01c 	ldr.w	fp, [sp, #28]
		conv.pad0_value = 0;
   1a19e:	2100      	movs	r1, #0
			= (enum specifier_cat_enum)conv.specifier_cat;
   1a1a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
   1a1a4:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
   1a1a8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1a1ac:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
   1a1ae:	468e      	mov	lr, r1
		conv.pad0_pre_exp = 0;
   1a1b0:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
   1a1b4:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1a1b8:	d130      	bne.n	1a21c <cbvprintf+0x110>
			switch (length_mod) {
   1a1ba:	f1ac 0303 	sub.w	r3, ip, #3
   1a1be:	2b04      	cmp	r3, #4
   1a1c0:	d81a      	bhi.n	1a1f8 <cbvprintf+0xec>
   1a1c2:	e8df f003 	tbb	[pc, r3]
   1a1c6:	3b03      	.short	0x3b03
   1a1c8:	193b      	.short	0x193b
   1a1ca:	19          	.byte	0x19
   1a1cb:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
   1a1cc:	f854 1b04 	ldr.w	r1, [r4], #4
   1a1d0:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
   1a1d2:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
   1a1d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a1d8:	f013 0603 	ands.w	r6, r3, #3
   1a1dc:	d050      	beq.n	1a280 <cbvprintf+0x174>
			OUTS(sp, fp);
   1a1de:	4652      	mov	r2, sl
   1a1e0:	4649      	mov	r1, r9
   1a1e2:	4640      	mov	r0, r8
   1a1e4:	9b02      	ldr	r3, [sp, #8]
   1a1e6:	f007 fa35 	bl	21654 <outs>
   1a1ea:	2800      	cmp	r0, #0
   1a1ec:	f2c0 80a7 	blt.w	1a33e <cbvprintf+0x232>
   1a1f0:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1a1f2:	f8dd a008 	ldr.w	sl, [sp, #8]
   1a1f6:	e791      	b.n	1a11c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a1f8:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a1fc:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1a200:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
   1a204:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
   1a206:	d102      	bne.n	1a20e <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
   1a208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1a20c:	e013      	b.n	1a236 <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
   1a20e:	f1bc 0f02 	cmp.w	ip, #2
   1a212:	d1df      	bne.n	1a1d4 <cbvprintf+0xc8>
				value.sint = (short)value.sint;
   1a214:	b20a      	sxth	r2, r1
   1a216:	17d3      	asrs	r3, r2, #31
   1a218:	4611      	mov	r1, r2
   1a21a:	e7da      	b.n	1a1d2 <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1a21c:	2b02      	cmp	r3, #2
   1a21e:	d122      	bne.n	1a266 <cbvprintf+0x15a>
			switch (length_mod) {
   1a220:	f1ac 0303 	sub.w	r3, ip, #3
   1a224:	2b04      	cmp	r3, #4
   1a226:	d812      	bhi.n	1a24e <cbvprintf+0x142>
   1a228:	e8df f003 	tbb	[pc, r3]
   1a22c:	11080803 	.word	0x11080803
   1a230:	11          	.byte	0x11
   1a231:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
   1a232:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
   1a236:	f04f 0e00 	mov.w	lr, #0
   1a23a:	e7cb      	b.n	1a1d4 <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
   1a23c:	1de3      	adds	r3, r4, #7
   1a23e:	f023 0307 	bic.w	r3, r3, #7
   1a242:	461c      	mov	r4, r3
				value.uint =
   1a244:	f8d3 e004 	ldr.w	lr, [r3, #4]
   1a248:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
   1a24c:	e7c2      	b.n	1a1d4 <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
   1a24e:	f1bc 0f01 	cmp.w	ip, #1
				value.uint =
   1a252:	f04f 0e00 	mov.w	lr, #0
					(uint_value_type)va_arg(ap, size_t);
   1a256:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
   1a25a:	d0d5      	beq.n	1a208 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
   1a25c:	f1bc 0f02 	cmp.w	ip, #2
   1a260:	d1b8      	bne.n	1a1d4 <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
   1a262:	b289      	uxth	r1, r1
   1a264:	e7e7      	b.n	1a236 <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
   1a266:	2b04      	cmp	r3, #4
   1a268:	d105      	bne.n	1a276 <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
   1a26a:	3407      	adds	r4, #7
   1a26c:	f024 0407 	bic.w	r4, r4, #7
   1a270:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1a274:	e7d0      	b.n	1a218 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1a276:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
   1a278:	bf08      	it	eq
   1a27a:	f854 1b04 	ldreq.w	r1, [r4], #4
   1a27e:	e7a9      	b.n	1a1d4 <cbvprintf+0xc8>
		switch (conv.specifier) {
   1a280:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1a284:	2878      	cmp	r0, #120	; 0x78
   1a286:	d8b4      	bhi.n	1a1f2 <cbvprintf+0xe6>
   1a288:	2862      	cmp	r0, #98	; 0x62
   1a28a:	d821      	bhi.n	1a2d0 <cbvprintf+0x1c4>
   1a28c:	2825      	cmp	r0, #37	; 0x25
   1a28e:	d051      	beq.n	1a334 <cbvprintf+0x228>
   1a290:	2858      	cmp	r0, #88	; 0x58
   1a292:	d1ae      	bne.n	1a1f2 <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
   1a294:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1a298:	4608      	mov	r0, r1
   1a29a:	9300      	str	r3, [sp, #0]
   1a29c:	4671      	mov	r1, lr
   1a29e:	ab08      	add	r3, sp, #32
   1a2a0:	aa05      	add	r2, sp, #20
   1a2a2:	f007 f98c 	bl	215be <encode_uint>
   1a2a6:	4682      	mov	sl, r0
			if (precision >= 0) {
   1a2a8:	f1bb 0f00 	cmp.w	fp, #0
   1a2ac:	f10d 0136 	add.w	r1, sp, #54	; 0x36
   1a2b0:	db0c      	blt.n	1a2cc <cbvprintf+0x1c0>
				conv.flag_zero = false;
   1a2b2:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
   1a2b6:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
   1a2ba:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1a2be:	459b      	cmp	fp, r3
				conv.flag_zero = false;
   1a2c0:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
   1a2c4:	d902      	bls.n	1a2cc <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
   1a2c6:	ebab 0303 	sub.w	r3, fp, r3
   1a2ca:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
   1a2cc:	468b      	mov	fp, r1
   1a2ce:	e048      	b.n	1a362 <cbvprintf+0x256>
   1a2d0:	3863      	subs	r0, #99	; 0x63
   1a2d2:	2815      	cmp	r0, #21
   1a2d4:	d88d      	bhi.n	1a1f2 <cbvprintf+0xe6>
   1a2d6:	a201      	add	r2, pc, #4	; (adr r2, 1a2dc <cbvprintf+0x1d0>)
   1a2d8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1a2dc:	0001a36b 	.word	0x0001a36b
   1a2e0:	0001a3c9 	.word	0x0001a3c9
   1a2e4:	0001a1f3 	.word	0x0001a1f3
   1a2e8:	0001a1f3 	.word	0x0001a1f3
   1a2ec:	0001a1f3 	.word	0x0001a1f3
   1a2f0:	0001a1f3 	.word	0x0001a1f3
   1a2f4:	0001a3c9 	.word	0x0001a3c9
   1a2f8:	0001a1f3 	.word	0x0001a1f3
   1a2fc:	0001a1f3 	.word	0x0001a1f3
   1a300:	0001a1f3 	.word	0x0001a1f3
   1a304:	0001a1f3 	.word	0x0001a1f3
   1a308:	0001a423 	.word	0x0001a423
   1a30c:	0001a3f1 	.word	0x0001a3f1
   1a310:	0001a3f5 	.word	0x0001a3f5
   1a314:	0001a1f3 	.word	0x0001a1f3
   1a318:	0001a1f3 	.word	0x0001a1f3
   1a31c:	0001a345 	.word	0x0001a345
   1a320:	0001a1f3 	.word	0x0001a1f3
   1a324:	0001a3f1 	.word	0x0001a3f1
   1a328:	0001a1f3 	.word	0x0001a1f3
   1a32c:	0001a1f3 	.word	0x0001a1f3
   1a330:	0001a3f1 	.word	0x0001a3f1
			OUTC('%');
   1a334:	4649      	mov	r1, r9
   1a336:	47c0      	blx	r8
   1a338:	2800      	cmp	r0, #0
   1a33a:	f6bf aefe 	bge.w	1a13a <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
   1a33e:	b00f      	add	sp, #60	; 0x3c
   1a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
   1a344:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
   1a346:	468a      	mov	sl, r1
			size_t len = strlen(bps);
   1a348:	9103      	str	r1, [sp, #12]
   1a34a:	f008 fe7f 	bl	2304c <strlen>
			if ((precision >= 0)
   1a34e:	f1bb 0f00 	cmp.w	fp, #0
   1a352:	9903      	ldr	r1, [sp, #12]
   1a354:	db02      	blt.n	1a35c <cbvprintf+0x250>
   1a356:	4558      	cmp	r0, fp
   1a358:	bf28      	it	cs
   1a35a:	4658      	movcs	r0, fp
		char sign = 0;
   1a35c:	2600      	movs	r6, #0
			bpe = bps + len;
   1a35e:	eb01 0b00 	add.w	fp, r1, r0
		if (bps == NULL) {
   1a362:	f1ba 0f00 	cmp.w	sl, #0
   1a366:	d107      	bne.n	1a378 <cbvprintf+0x26c>
   1a368:	e743      	b.n	1a1f2 <cbvprintf+0xe6>
			break;
   1a36a:	2600      	movs	r6, #0
			buf[0] = value.uint;
   1a36c:	f88d 1020 	strb.w	r1, [sp, #32]
			bpe = buf + 1;
   1a370:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
   1a374:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
   1a378:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
   1a37c:	b106      	cbz	r6, 1a380 <cbvprintf+0x274>
			nj_len += 1U;
   1a37e:	3301      	adds	r3, #1
		if (conv.altform_0c) {
   1a380:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1a384:	06d0      	lsls	r0, r2, #27
   1a386:	d567      	bpl.n	1a458 <cbvprintf+0x34c>
			nj_len += 2U;
   1a388:	3302      	adds	r3, #2
		if (conv.pad_fp) {
   1a38a:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
   1a38c:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
   1a38e:	bf48      	it	mi
   1a390:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
   1a392:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
   1a394:	bf48      	it	mi
   1a396:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1a398:	2f00      	cmp	r7, #0
   1a39a:	dd70      	ble.n	1a47e <cbvprintf+0x372>
			if (!conv.flag_dash) {
   1a39c:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
   1a3a0:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
   1a3a2:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1a3a6:	9303      	str	r3, [sp, #12]
   1a3a8:	0753      	lsls	r3, r2, #29
   1a3aa:	d468      	bmi.n	1a47e <cbvprintf+0x372>
				if (conv.flag_zero) {
   1a3ac:	0650      	lsls	r0, r2, #25
   1a3ae:	f140 80a3 	bpl.w	1a4f8 <cbvprintf+0x3ec>
					if (sign != 0) {
   1a3b2:	b13e      	cbz	r6, 1a3c4 <cbvprintf+0x2b8>
						OUTC(sign);
   1a3b4:	4649      	mov	r1, r9
   1a3b6:	4630      	mov	r0, r6
   1a3b8:	47c0      	blx	r8
   1a3ba:	2800      	cmp	r0, #0
   1a3bc:	dbbf      	blt.n	1a33e <cbvprintf+0x232>
						sign = 0;
   1a3be:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1a3c0:	3501      	adds	r5, #1
						sign = 0;
   1a3c2:	461e      	mov	r6, r3
					pad = '0';
   1a3c4:	2330      	movs	r3, #48	; 0x30
   1a3c6:	e098      	b.n	1a4fa <cbvprintf+0x3ee>
			if (conv.flag_plus) {
   1a3c8:	071e      	lsls	r6, r3, #28
   1a3ca:	d40f      	bmi.n	1a3ec <cbvprintf+0x2e0>
				sign = ' ';
   1a3cc:	f013 0610 	ands.w	r6, r3, #16
   1a3d0:	bf18      	it	ne
   1a3d2:	2620      	movne	r6, #32
			if (value.sint < 0) {
   1a3d4:	2900      	cmp	r1, #0
   1a3d6:	f17e 0000 	sbcs.w	r0, lr, #0
   1a3da:	f6bf af5b 	bge.w	1a294 <cbvprintf+0x188>
				value.uint = -value.sint;
   1a3de:	424a      	negs	r2, r1
   1a3e0:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
   1a3e4:	4611      	mov	r1, r2
   1a3e6:	469e      	mov	lr, r3
				sign = '-';
   1a3e8:	262d      	movs	r6, #45	; 0x2d
   1a3ea:	e753      	b.n	1a294 <cbvprintf+0x188>
				sign = '+';
   1a3ec:	262b      	movs	r6, #43	; 0x2b
   1a3ee:	e7f1      	b.n	1a3d4 <cbvprintf+0x2c8>
		switch (conv.specifier) {
   1a3f0:	2600      	movs	r6, #0
   1a3f2:	e74f      	b.n	1a294 <cbvprintf+0x188>
			if (value.ptr != NULL) {
   1a3f4:	b351      	cbz	r1, 1a44c <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   1a3f6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1a3fa:	4608      	mov	r0, r1
   1a3fc:	9300      	str	r3, [sp, #0]
   1a3fe:	2100      	movs	r1, #0
   1a400:	ab08      	add	r3, sp, #32
   1a402:	aa05      	add	r2, sp, #20
   1a404:	f007 f8db 	bl	215be <encode_uint>
				conv.altform_0c = true;
   1a408:	f8bd 3016 	ldrh.w	r3, [sp, #22]
				bps = encode_uint((uintptr_t)value.ptr, &conv,
   1a40c:	4682      	mov	sl, r0
				conv.altform_0c = true;
   1a40e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1a412:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1a416:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1a41a:	2600      	movs	r6, #0
				conv.altform_0c = true;
   1a41c:	f8ad 3016 	strh.w	r3, [sp, #22]
				goto prec_int_pad0;
   1a420:	e742      	b.n	1a2a8 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
   1a422:	f1bc 0f07 	cmp.w	ip, #7
   1a426:	f63f aee4 	bhi.w	1a1f2 <cbvprintf+0xe6>
   1a42a:	e8df f00c 	tbb	[pc, ip]
   1a42e:	040d      	.short	0x040d
   1a430:	08080d06 	.word	0x08080d06
   1a434:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   1a436:	700d      	strb	r5, [r1, #0]
		break;
   1a438:	e6db      	b.n	1a1f2 <cbvprintf+0xe6>
		*(short *)dp = (short)count;
   1a43a:	800d      	strh	r5, [r1, #0]
		break;
   1a43c:	e6d9      	b.n	1a1f2 <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
   1a43e:	462a      	mov	r2, r5
   1a440:	17eb      	asrs	r3, r5, #31
   1a442:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   1a446:	e6d4      	b.n	1a1f2 <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1a448:	600d      	str	r5, [r1, #0]
		break;
   1a44a:	e6d2      	b.n	1a1f2 <cbvprintf+0xe6>
			bpe = bps + 5;
   1a44c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 1a510 <cbvprintf+0x404>
   1a450:	460e      	mov	r6, r1
			bps = "(nil)";
   1a452:	f1ab 0a05 	sub.w	sl, fp, #5
   1a456:	e78f      	b.n	1a378 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
   1a458:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1a45a:	bf48      	it	mi
   1a45c:	3301      	addmi	r3, #1
   1a45e:	e794      	b.n	1a38a <cbvprintf+0x27e>
					OUTC(pad);
   1a460:	4618      	mov	r0, r3
   1a462:	4649      	mov	r1, r9
   1a464:	9303      	str	r3, [sp, #12]
   1a466:	47c0      	blx	r8
   1a468:	2800      	cmp	r0, #0
   1a46a:	9b03      	ldr	r3, [sp, #12]
   1a46c:	f6ff af67 	blt.w	1a33e <cbvprintf+0x232>
				while (width-- > 0) {
   1a470:	2f00      	cmp	r7, #0
   1a472:	eba5 0107 	sub.w	r1, r5, r7
   1a476:	f107 37ff 	add.w	r7, r7, #4294967295
   1a47a:	dcf1      	bgt.n	1a460 <cbvprintf+0x354>
   1a47c:	460d      	mov	r5, r1
		if (sign != 0) {
   1a47e:	b136      	cbz	r6, 1a48e <cbvprintf+0x382>
			OUTC(sign);
   1a480:	4649      	mov	r1, r9
   1a482:	4630      	mov	r0, r6
   1a484:	47c0      	blx	r8
   1a486:	2800      	cmp	r0, #0
   1a488:	f6ff af59 	blt.w	1a33e <cbvprintf+0x232>
   1a48c:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
   1a48e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1a492:	06d9      	lsls	r1, r3, #27
   1a494:	d401      	bmi.n	1a49a <cbvprintf+0x38e>
   1a496:	071a      	lsls	r2, r3, #28
   1a498:	d506      	bpl.n	1a4a8 <cbvprintf+0x39c>
				OUTC('0');
   1a49a:	4649      	mov	r1, r9
   1a49c:	2030      	movs	r0, #48	; 0x30
   1a49e:	47c0      	blx	r8
   1a4a0:	2800      	cmp	r0, #0
   1a4a2:	f6ff af4c 	blt.w	1a33e <cbvprintf+0x232>
   1a4a6:	3501      	adds	r5, #1
			if (conv.altform_0c) {
   1a4a8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1a4ac:	06db      	lsls	r3, r3, #27
   1a4ae:	d507      	bpl.n	1a4c0 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
   1a4b0:	4649      	mov	r1, r9
   1a4b2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1a4b6:	47c0      	blx	r8
   1a4b8:	2800      	cmp	r0, #0
   1a4ba:	f6ff af40 	blt.w	1a33e <cbvprintf+0x232>
   1a4be:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1a4c0:	9e06      	ldr	r6, [sp, #24]
   1a4c2:	442e      	add	r6, r5
   1a4c4:	1b73      	subs	r3, r6, r5
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	dc19      	bgt.n	1a4fe <cbvprintf+0x3f2>
			OUTS(bps, bpe);
   1a4ca:	465b      	mov	r3, fp
   1a4cc:	4652      	mov	r2, sl
   1a4ce:	4649      	mov	r1, r9
   1a4d0:	4640      	mov	r0, r8
   1a4d2:	f007 f8bf 	bl	21654 <outs>
   1a4d6:	2800      	cmp	r0, #0
   1a4d8:	f6ff af31 	blt.w	1a33e <cbvprintf+0x232>
   1a4dc:	4405      	add	r5, r0
		while (width > 0) {
   1a4de:	442f      	add	r7, r5
   1a4e0:	1b7b      	subs	r3, r7, r5
   1a4e2:	2b00      	cmp	r3, #0
   1a4e4:	f77f ae85 	ble.w	1a1f2 <cbvprintf+0xe6>
			OUTC(' ');
   1a4e8:	4649      	mov	r1, r9
   1a4ea:	2020      	movs	r0, #32
   1a4ec:	47c0      	blx	r8
   1a4ee:	2800      	cmp	r0, #0
   1a4f0:	f6ff af25 	blt.w	1a33e <cbvprintf+0x232>
   1a4f4:	3501      	adds	r5, #1
			--width;
   1a4f6:	e7f3      	b.n	1a4e0 <cbvprintf+0x3d4>
				char pad = ' ';
   1a4f8:	2320      	movs	r3, #32
   1a4fa:	443d      	add	r5, r7
   1a4fc:	e7b8      	b.n	1a470 <cbvprintf+0x364>
				OUTC('0');
   1a4fe:	4649      	mov	r1, r9
   1a500:	2030      	movs	r0, #48	; 0x30
   1a502:	47c0      	blx	r8
   1a504:	2800      	cmp	r0, #0
   1a506:	f6ff af1a 	blt.w	1a33e <cbvprintf+0x232>
   1a50a:	3501      	adds	r5, #1
   1a50c:	e7da      	b.n	1a4c4 <cbvprintf+0x3b8>
   1a50e:	bf00      	nop
   1a510:	00026f55 	.word	0x00026f55

0001a514 <nordicsemi_nrf91_init>:
   1a514:	f04f 0220 	mov.w	r2, #32
   1a518:	f3ef 8311 	mrs	r3, BASEPRI
   1a51c:	f382 8811 	msr	BASEPRI, r2
   1a520:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1a524:	2101      	movs	r1, #1
   1a526:	4a04      	ldr	r2, [pc, #16]	; (1a538 <nordicsemi_nrf91_init+0x24>)
   1a528:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   1a52c:	f383 8811 	msr	BASEPRI, r3
   1a530:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1a534:	2000      	movs	r0, #0
   1a536:	4770      	bx	lr
   1a538:	40039000 	.word	0x40039000

0001a53c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1a53c:	b120      	cbz	r0, 1a548 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1a53e:	4b03      	ldr	r3, [pc, #12]	; (1a54c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1a540:	0180      	lsls	r0, r0, #6
   1a542:	f043 0301 	orr.w	r3, r3, #1
   1a546:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1a548:	4770      	bx	lr
   1a54a:	bf00      	nop
   1a54c:	00026140 	.word	0x00026140

0001a550 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1a550:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1a552:	2200      	movs	r2, #0
{
   1a554:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1a556:	490f      	ldr	r1, [pc, #60]	; (1a594 <enable_logger+0x44>)
   1a558:	480f      	ldr	r0, [pc, #60]	; (1a598 <enable_logger+0x48>)
   1a55a:	f009 f9e4 	bl	23926 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a55e:	2200      	movs	r2, #0
   1a560:	2300      	movs	r3, #0
   1a562:	2400      	movs	r4, #0
   1a564:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a568:	230e      	movs	r3, #14
   1a56a:	4d0c      	ldr	r5, [pc, #48]	; (1a59c <enable_logger+0x4c>)
   1a56c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1a570:	f44f 7240 	mov.w	r2, #768	; 0x300
   1a574:	4628      	mov	r0, r5
   1a576:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a57a:	4b09      	ldr	r3, [pc, #36]	; (1a5a0 <enable_logger+0x50>)
   1a57c:	4909      	ldr	r1, [pc, #36]	; (1a5a4 <enable_logger+0x54>)
   1a57e:	9400      	str	r4, [sp, #0]
   1a580:	f005 ff1e 	bl	203c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1a584:	4908      	ldr	r1, [pc, #32]	; (1a5a8 <enable_logger+0x58>)
   1a586:	4628      	mov	r0, r5
   1a588:	f005 fe70 	bl	2026c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   1a58c:	4620      	mov	r0, r4
   1a58e:	b009      	add	sp, #36	; 0x24
   1a590:	bd30      	pop	{r4, r5, pc}
   1a592:	bf00      	nop
   1a594:	0001a5ad 	.word	0x0001a5ad
   1a598:	20010438 	.word	0x20010438
   1a59c:	20010470 	.word	0x20010470
   1a5a0:	0001ab09 	.word	0x0001ab09
   1a5a4:	2001ecc0 	.word	0x2001ecc0
   1a5a8:	000272cd 	.word	0x000272cd

0001a5ac <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1a5ac:	4801      	ldr	r0, [pc, #4]	; (1a5b4 <log_process_thread_timer_expiry_fn+0x8>)
   1a5ae:	f005 bdd5 	b.w	2015c <z_impl_k_sem_give>
   1a5b2:	bf00      	nop
   1a5b4:	200101dc 	.word	0x200101dc

0001a5b8 <log_core_init>:
{
   1a5b8:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
   1a5ba:	f000 fb03 	bl	1abc4 <log_msg_pool_init>
		log_list_init(&list);
   1a5be:	4813      	ldr	r0, [pc, #76]	; (1a60c <log_core_init+0x54>)
   1a5c0:	f007 f916 	bl	217f0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   1a5c4:	4912      	ldr	r1, [pc, #72]	; (1a610 <log_core_init+0x58>)
   1a5c6:	2304      	movs	r3, #4
   1a5c8:	2228      	movs	r2, #40	; 0x28
   1a5ca:	4812      	ldr	r0, [pc, #72]	; (1a614 <log_core_init+0x5c>)
   1a5cc:	f008 ff7b 	bl	234c6 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   1a5d0:	4b11      	ldr	r3, [pc, #68]	; (1a618 <log_core_init+0x60>)
   1a5d2:	4a12      	ldr	r2, [pc, #72]	; (1a61c <log_core_init+0x64>)
	log_output_timestamp_freq_set(freq);
   1a5d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   1a5d8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1a5da:	f000 fd3b 	bl	1b054 <log_output_timestamp_freq_set>
		for (int i = 0; i < log_sources_count(); i++) {
   1a5de:	2100      	movs	r1, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a5e0:	480f      	ldr	r0, [pc, #60]	; (1a620 <log_core_init+0x68>)
   1a5e2:	4b10      	ldr	r3, [pc, #64]	; (1a624 <log_core_init+0x6c>)
   1a5e4:	4c10      	ldr	r4, [pc, #64]	; (1a628 <log_core_init+0x70>)
   1a5e6:	1a1b      	subs	r3, r3, r0
   1a5e8:	08db      	lsrs	r3, r3, #3
	return __log_const_start[source_id].level;
   1a5ea:	3004      	adds	r0, #4
   1a5ec:	4299      	cmp	r1, r3
   1a5ee:	d100      	bne.n	1a5f2 <log_core_init+0x3a>
}
   1a5f0:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
   1a5f2:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   1a5f6:	6825      	ldr	r5, [r4, #0]
   1a5f8:	f002 0207 	and.w	r2, r2, #7
   1a5fc:	f025 0507 	bic.w	r5, r5, #7
   1a600:	432a      	orrs	r2, r5
   1a602:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
   1a606:	3101      	adds	r1, #1
   1a608:	e7f0      	b.n	1a5ec <log_core_init+0x34>
   1a60a:	bf00      	nop
   1a60c:	20010788 	.word	0x20010788
   1a610:	2002c900 	.word	0x2002c900
   1a614:	20010790 	.word	0x20010790
   1a618:	20010004 	.word	0x20010004
   1a61c:	0002182f 	.word	0x0002182f
   1a620:	00023fa4 	.word	0x00023fa4
   1a624:	00024004 	.word	0x00024004
   1a628:	20010134 	.word	0x20010134

0001a62c <dropped_notify>:
{
   1a62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a62e:	2500      	movs	r5, #0
   1a630:	4b0c      	ldr	r3, [pc, #48]	; (1a664 <dropped_notify+0x38>)
   1a632:	e8d3 7fef 	ldaex	r7, [r3]
   1a636:	e8c3 5fe2 	stlex	r2, r5, [r3]
   1a63a:	2a00      	cmp	r2, #0
   1a63c:	d1f9      	bne.n	1a632 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   1a63e:	4c0a      	ldr	r4, [pc, #40]	; (1a668 <dropped_notify+0x3c>)
   1a640:	4e0a      	ldr	r6, [pc, #40]	; (1a66c <dropped_notify+0x40>)
   1a642:	1b36      	subs	r6, r6, r4
   1a644:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1a646:	42b5      	cmp	r5, r6
   1a648:	db00      	blt.n	1a64c <dropped_notify+0x20>
}
   1a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   1a64c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1a64e:	795b      	ldrb	r3, [r3, #5]
   1a650:	b12b      	cbz	r3, 1a65e <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   1a652:	6823      	ldr	r3, [r4, #0]
   1a654:	68db      	ldr	r3, [r3, #12]
   1a656:	b113      	cbz	r3, 1a65e <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   1a658:	4639      	mov	r1, r7
   1a65a:	4620      	mov	r0, r4
   1a65c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1a65e:	3501      	adds	r5, #1
   1a660:	3410      	adds	r4, #16
   1a662:	e7f0      	b.n	1a646 <dropped_notify+0x1a>
   1a664:	20010780 	.word	0x20010780
   1a668:	00024004 	.word	0x00024004
   1a66c:	00024014 	.word	0x00024014

0001a670 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1a670:	4b04      	ldr	r3, [pc, #16]	; (1a684 <log_dropped+0x14>)
   1a672:	e8d3 2fef 	ldaex	r2, [r3]
   1a676:	3201      	adds	r2, #1
   1a678:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a67c:	2900      	cmp	r1, #0
   1a67e:	d1f8      	bne.n	1a672 <log_dropped+0x2>
}
   1a680:	4770      	bx	lr
   1a682:	bf00      	nop
   1a684:	20010780 	.word	0x20010780

0001a688 <log_source_name_get>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a688:	4a04      	ldr	r2, [pc, #16]	; (1a69c <log_source_name_get+0x14>)
   1a68a:	4b05      	ldr	r3, [pc, #20]	; (1a6a0 <log_source_name_get+0x18>)
   1a68c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1a68e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   1a692:	bf34      	ite	cc
   1a694:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1a698:	2000      	movcs	r0, #0
}
   1a69a:	4770      	bx	lr
   1a69c:	00023fa4 	.word	0x00023fa4
   1a6a0:	00024004 	.word	0x00024004

0001a6a4 <z_impl_log_filter_set>:
{
   1a6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6a8:	4689      	mov	r9, r1
   1a6aa:	4616      	mov	r6, r2
   1a6ac:	4698      	mov	r8, r3
		if (backend == NULL) {
   1a6ae:	4604      	mov	r4, r0
   1a6b0:	b9b0      	cbnz	r0, 1a6e0 <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
   1a6b2:	4b21      	ldr	r3, [pc, #132]	; (1a738 <z_impl_log_filter_set+0x94>)
			uint32_t max = 0U;
   1a6b4:	4605      	mov	r5, r0
   1a6b6:	469a      	mov	sl, r3
   1a6b8:	4f20      	ldr	r7, [pc, #128]	; (1a73c <z_impl_log_filter_set+0x98>)
   1a6ba:	1aff      	subs	r7, r7, r3
   1a6bc:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
   1a6be:	42bc      	cmp	r4, r7
   1a6c0:	db02      	blt.n	1a6c8 <z_impl_log_filter_set+0x24>
}
   1a6c2:	4628      	mov	r0, r5
   1a6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&src_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
   1a6c8:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   1a6cc:	4643      	mov	r3, r8
   1a6ce:	4632      	mov	r2, r6
   1a6d0:	4649      	mov	r1, r9
   1a6d2:	f7ff ffe7 	bl	1a6a4 <z_impl_log_filter_set>
				max = MAX(current, max);
   1a6d6:	4285      	cmp	r5, r0
   1a6d8:	bf38      	it	cc
   1a6da:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   1a6dc:	3401      	adds	r4, #1
   1a6de:	e7ee      	b.n	1a6be <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
   1a6e0:	4b17      	ldr	r3, [pc, #92]	; (1a740 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
   1a6e2:	4918      	ldr	r1, [pc, #96]	; (1a744 <z_impl_log_filter_set+0xa0>)
   1a6e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
   1a6e8:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
   1a6ea:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
   1a6ec:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   1a6ee:	791a      	ldrb	r2, [r3, #4]
   1a6f0:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
   1a6f4:	bf28      	it	cs
   1a6f6:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
   1a6f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1a6fc:	fa03 f002 	lsl.w	r0, r3, r2
   1a700:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
   1a704:	ea23 0300 	bic.w	r3, r3, r0
   1a708:	f005 0007 	and.w	r0, r5, #7
   1a70c:	fa00 f202 	lsl.w	r2, r0, r2
   1a710:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   1a712:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
   1a714:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   1a716:	fa23 f402 	lsr.w	r4, r3, r2
   1a71a:	f004 0407 	and.w	r4, r4, #7
   1a71e:	42a0      	cmp	r0, r4
   1a720:	f102 0203 	add.w	r2, r2, #3
   1a724:	bf38      	it	cc
   1a726:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   1a728:	2a1e      	cmp	r2, #30
   1a72a:	d1f4      	bne.n	1a716 <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
   1a72c:	f023 0307 	bic.w	r3, r3, #7
   1a730:	4303      	orrs	r3, r0
   1a732:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
   1a736:	e7c4      	b.n	1a6c2 <z_impl_log_filter_set+0x1e>
   1a738:	00024004 	.word	0x00024004
   1a73c:	00024014 	.word	0x00024014
   1a740:	00023fa4 	.word	0x00023fa4
   1a744:	20010134 	.word	0x20010134

0001a748 <backend_filter_set>:
{
   1a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a74a:	4606      	mov	r6, r0
   1a74c:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
   1a74e:	2500      	movs	r5, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a750:	4c07      	ldr	r4, [pc, #28]	; (1a770 <backend_filter_set+0x28>)
   1a752:	4b08      	ldr	r3, [pc, #32]	; (1a774 <backend_filter_set+0x2c>)
   1a754:	1ae4      	subs	r4, r4, r3
   1a756:	08e4      	lsrs	r4, r4, #3
   1a758:	42a5      	cmp	r5, r4
   1a75a:	d100      	bne.n	1a75e <backend_filter_set+0x16>
}
   1a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a75e:	2100      	movs	r1, #0
   1a760:	462a      	mov	r2, r5
   1a762:	463b      	mov	r3, r7
   1a764:	4630      	mov	r0, r6
   1a766:	f7ff ff9d 	bl	1a6a4 <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
   1a76a:	3501      	adds	r5, #1
   1a76c:	e7f4      	b.n	1a758 <backend_filter_set+0x10>
   1a76e:	bf00      	nop
   1a770:	00024004 	.word	0x00024004
   1a774:	00023fa4 	.word	0x00023fa4

0001a778 <log_backend_enable>:
	id += backend - log_backend_get(0);
   1a778:	4b0c      	ldr	r3, [pc, #48]	; (1a7ac <log_backend_enable+0x34>)
{
   1a77a:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
   1a77c:	1ac3      	subs	r3, r0, r3
	log_backend_id_set(backend, id);
   1a77e:	6846      	ldr	r6, [r0, #4]
	id += backend - log_backend_get(0);
   1a780:	111b      	asrs	r3, r3, #4
{
   1a782:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
   1a784:	3301      	adds	r3, #1
{
   1a786:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
   1a788:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
   1a78a:	4611      	mov	r1, r2
   1a78c:	f7ff ffdc 	bl	1a748 <backend_filter_set>
	backend->cb->active = true;
   1a790:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   1a792:	6863      	ldr	r3, [r4, #4]
	if (!backend_attached) {
   1a794:	4c06      	ldr	r4, [pc, #24]	; (1a7b0 <log_backend_enable+0x38>)
   1a796:	715a      	strb	r2, [r3, #5]
   1a798:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   1a79a:	601d      	str	r5, [r3, #0]
   1a79c:	b912      	cbnz	r2, 1a7a4 <log_backend_enable+0x2c>
   1a79e:	4805      	ldr	r0, [pc, #20]	; (1a7b4 <log_backend_enable+0x3c>)
   1a7a0:	f005 fcdc 	bl	2015c <z_impl_k_sem_give>
	backend_attached = true;
   1a7a4:	2301      	movs	r3, #1
   1a7a6:	7023      	strb	r3, [r4, #0]
}
   1a7a8:	bd70      	pop	{r4, r5, r6, pc}
   1a7aa:	bf00      	nop
   1a7ac:	00024004 	.word	0x00024004
   1a7b0:	2001ec15 	.word	0x2001ec15
   1a7b4:	200101dc 	.word	0x200101dc

0001a7b8 <log_init>:
{
   1a7b8:	b570      	push	{r4, r5, r6, lr}
   1a7ba:	4b0f      	ldr	r3, [pc, #60]	; (1a7f8 <log_init+0x40>)
   1a7bc:	e8d3 5fef 	ldaex	r5, [r3]
   1a7c0:	1c6a      	adds	r2, r5, #1
   1a7c2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a7c6:	2900      	cmp	r1, #0
   1a7c8:	d1f8      	bne.n	1a7bc <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
   1a7ca:	b92d      	cbnz	r5, 1a7d8 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
   1a7cc:	4c0b      	ldr	r4, [pc, #44]	; (1a7fc <log_init+0x44>)
   1a7ce:	4e0c      	ldr	r6, [pc, #48]	; (1a800 <log_init+0x48>)
   1a7d0:	1b36      	subs	r6, r6, r4
   1a7d2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   1a7d4:	42b5      	cmp	r5, r6
   1a7d6:	db00      	blt.n	1a7da <log_init+0x22>
}
   1a7d8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1a7da:	7b23      	ldrb	r3, [r4, #12]
   1a7dc:	b143      	cbz	r3, 1a7f0 <log_init+0x38>
			if (backend->api->init != NULL) {
   1a7de:	6823      	ldr	r3, [r4, #0]
   1a7e0:	695b      	ldr	r3, [r3, #20]
   1a7e2:	b103      	cbz	r3, 1a7e6 <log_init+0x2e>
				backend->api->init();
   1a7e4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1a7e6:	2204      	movs	r2, #4
   1a7e8:	2100      	movs	r1, #0
   1a7ea:	4620      	mov	r0, r4
   1a7ec:	f7ff ffc4 	bl	1a778 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1a7f0:	3501      	adds	r5, #1
   1a7f2:	3410      	adds	r4, #16
   1a7f4:	e7ee      	b.n	1a7d4 <log_init+0x1c>
   1a7f6:	bf00      	nop
   1a7f8:	20010784 	.word	0x20010784
   1a7fc:	00024004 	.word	0x00024004
   1a800:	00024014 	.word	0x00024014

0001a804 <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   1a804:	b153      	cbz	r3, 1a81c <log_filter_get+0x18>
	return backend->cb->id;
   1a806:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
   1a808:	4907      	ldr	r1, [pc, #28]	; (1a828 <log_filter_get+0x24>)
   1a80a:	7918      	ldrb	r0, [r3, #4]
   1a80c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a810:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   1a814:	40d8      	lsrs	r0, r3
   1a816:	f000 0007 	and.w	r0, r0, #7
   1a81a:	4770      	bx	lr
	return __log_const_start[source_id].level;
   1a81c:	4b03      	ldr	r3, [pc, #12]	; (1a82c <log_filter_get+0x28>)
   1a81e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
   1a822:	7910      	ldrb	r0, [r2, #4]
}
   1a824:	4770      	bx	lr
   1a826:	bf00      	nop
   1a828:	20010134 	.word	0x20010134
   1a82c:	00023fa4 	.word	0x00023fa4

0001a830 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   1a830:	4b14      	ldr	r3, [pc, #80]	; (1a884 <log_strdup+0x54>)
{
   1a832:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   1a834:	4298      	cmp	r0, r3
{
   1a836:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1a838:	d302      	bcc.n	1a840 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1a83a:	4b13      	ldr	r3, [pc, #76]	; (1a888 <log_strdup+0x58>)
   1a83c:	4298      	cmp	r0, r3
   1a83e:	d31c      	bcc.n	1a87a <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1a840:	2200      	movs	r2, #0
   1a842:	2300      	movs	r3, #0
   1a844:	4811      	ldr	r0, [pc, #68]	; (1a88c <log_strdup+0x5c>)
   1a846:	a901      	add	r1, sp, #4
   1a848:	f004 ff24 	bl	1f694 <k_mem_slab_alloc>
	if (err != 0) {
   1a84c:	4605      	mov	r5, r0
   1a84e:	b9b8      	cbnz	r0, 1a880 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a850:	2201      	movs	r2, #1
   1a852:	9b01      	ldr	r3, [sp, #4]
   1a854:	e8d3 1fef 	ldaex	r1, [r3]
   1a858:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1a85c:	2800      	cmp	r0, #0
   1a85e:	d1f9      	bne.n	1a854 <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   1a860:	9801      	ldr	r0, [sp, #4]
   1a862:	4621      	mov	r1, r4
   1a864:	221f      	movs	r2, #31
   1a866:	3004      	adds	r0, #4
   1a868:	f008 fbcf 	bl	2300a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1a86c:	237e      	movs	r3, #126	; 0x7e
   1a86e:	9c01      	ldr	r4, [sp, #4]
   1a870:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1a874:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
   1a878:	3404      	adds	r4, #4
}
   1a87a:	4620      	mov	r0, r4
   1a87c:	b003      	add	sp, #12
   1a87e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   1a880:	4c03      	ldr	r4, [pc, #12]	; (1a890 <log_strdup+0x60>)
   1a882:	e7fa      	b.n	1a87a <log_strdup+0x4a>
   1a884:	00023d34 	.word	0x00023d34
   1a888:	00028650 	.word	0x00028650
   1a88c:	20010790 	.word	0x20010790
   1a890:	00026f5a 	.word	0x00026f5a

0001a894 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1a894:	b148      	cbz	r0, 1a8aa <log_is_strdup+0x16>
   1a896:	4b05      	ldr	r3, [pc, #20]	; (1a8ac <log_is_strdup+0x18>)
   1a898:	4298      	cmp	r0, r3
   1a89a:	d305      	bcc.n	1a8a8 <log_is_strdup+0x14>
   1a89c:	33a0      	adds	r3, #160	; 0xa0
   1a89e:	4298      	cmp	r0, r3
   1a8a0:	bf2c      	ite	cs
   1a8a2:	2000      	movcs	r0, #0
   1a8a4:	2001      	movcc	r0, #1
   1a8a6:	4770      	bx	lr
   1a8a8:	2000      	movs	r0, #0
}
   1a8aa:	4770      	bx	lr
   1a8ac:	2002c900 	.word	0x2002c900

0001a8b0 <z_impl_log_process>:
{
   1a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   1a8b4:	4b55      	ldr	r3, [pc, #340]	; (1aa0c <z_impl_log_process+0x15c>)
{
   1a8b6:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   1a8b8:	781b      	ldrb	r3, [r3, #0]
{
   1a8ba:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   1a8bc:	b903      	cbnz	r3, 1a8c0 <z_impl_log_process+0x10>
   1a8be:	b340      	cbz	r0, 1a912 <z_impl_log_process+0x62>
	__asm__ volatile(
   1a8c0:	f04f 0320 	mov.w	r3, #32
   1a8c4:	f3ef 8611 	mrs	r6, BASEPRI
   1a8c8:	f383 8811 	msr	BASEPRI, r3
   1a8cc:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   1a8d0:	484f      	ldr	r0, [pc, #316]	; (1aa10 <z_impl_log_process+0x160>)
   1a8d2:	f006 ff9d 	bl	21810 <log_list_head_get>
   1a8d6:	4604      	mov	r4, r0
	__asm__ volatile(
   1a8d8:	f386 8811 	msr	BASEPRI, r6
   1a8dc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   1a8e0:	b158      	cbz	r0, 1a8fa <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1a8e2:	4b4c      	ldr	r3, [pc, #304]	; (1aa14 <z_impl_log_process+0x164>)
   1a8e4:	e8d3 2fef 	ldaex	r2, [r3]
   1a8e8:	3a01      	subs	r2, #1
   1a8ea:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1a8ee:	2900      	cmp	r1, #0
   1a8f0:	d1f8      	bne.n	1a8e4 <z_impl_log_process+0x34>
	if (!bypass) {
   1a8f2:	b195      	cbz	r5, 1a91a <z_impl_log_process+0x6a>
	log_msg_put(msg);
   1a8f4:	4620      	mov	r0, r4
   1a8f6:	f007 f89a 	bl	21a2e <log_msg_put>
	if (!bypass && dropped_cnt) {
   1a8fa:	b925      	cbnz	r5, 1a906 <z_impl_log_process+0x56>
   1a8fc:	4b46      	ldr	r3, [pc, #280]	; (1aa18 <z_impl_log_process+0x168>)
   1a8fe:	681b      	ldr	r3, [r3, #0]
   1a900:	b10b      	cbz	r3, 1a906 <z_impl_log_process+0x56>
		dropped_notify();
   1a902:	f7ff fe93 	bl	1a62c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1a906:	4842      	ldr	r0, [pc, #264]	; (1aa10 <z_impl_log_process+0x160>)
   1a908:	f006 ff80 	bl	2180c <log_list_head_peek>
   1a90c:	1e05      	subs	r5, r0, #0
   1a90e:	bf18      	it	ne
   1a910:	2501      	movne	r5, #1
}
   1a912:	4628      	mov	r0, r5
   1a914:	b005      	add	sp, #20
   1a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   1a91a:	4b40      	ldr	r3, [pc, #256]	; (1aa1c <z_impl_log_process+0x16c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   1a91c:	781b      	ldrb	r3, [r3, #0]
   1a91e:	b9cb      	cbnz	r3, 1a954 <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1a920:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   1a922:	07da      	lsls	r2, r3, #31
   1a924:	d416      	bmi.n	1a954 <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   1a926:	f007 f891 	bl	21a4c <log_msg_str_get>
   1a92a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1a92c:	4620      	mov	r0, r4
   1a92e:	f007 f85c 	bl	219ea <log_msg_nargs_get>
   1a932:	4601      	mov	r1, r0
   1a934:	4640      	mov	r0, r8
   1a936:	f006 ff7e 	bl	21836 <z_log_get_s_mask>
   1a93a:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a93c:	4f38      	ldr	r7, [pc, #224]	; (1aa20 <z_impl_log_process+0x170>)
   1a93e:	4b39      	ldr	r3, [pc, #228]	; (1aa24 <z_impl_log_process+0x174>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1a940:	f8df b100 	ldr.w	fp, [pc, #256]	; 1aa44 <z_impl_log_process+0x194>
   1a944:	1bdb      	subs	r3, r3, r7
   1a946:	08db      	lsrs	r3, r3, #3
   1a948:	9303      	str	r3, [sp, #12]
   1a94a:	4b37      	ldr	r3, [pc, #220]	; (1aa28 <z_impl_log_process+0x178>)
   1a94c:	1bdb      	subs	r3, r3, r7
   1a94e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   1a952:	b946      	cbnz	r6, 1a966 <z_impl_log_process+0xb6>
	return __log_backends_end - __log_backends_start;
   1a954:	4e35      	ldr	r6, [pc, #212]	; (1aa2c <z_impl_log_process+0x17c>)
   1a956:	4f36      	ldr	r7, [pc, #216]	; (1aa30 <z_impl_log_process+0x180>)
   1a958:	f04f 0800 	mov.w	r8, #0
   1a95c:	1bbf      	subs	r7, r7, r6
		return LOG_FILTER_SLOT_GET(filters,
   1a95e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1aa48 <z_impl_log_process+0x198>
   1a962:	113f      	asrs	r7, r7, #4
   1a964:	e04e      	b.n	1aa04 <z_impl_log_process+0x154>
		idx = 31 - __builtin_clz(mask);
   1a966:	fab6 f186 	clz	r1, r6
   1a96a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1a96e:	4649      	mov	r1, r9
   1a970:	4620      	mov	r0, r4
   1a972:	f007 f83d 	bl	219f0 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   1a976:	4b2f      	ldr	r3, [pc, #188]	; (1aa34 <z_impl_log_process+0x184>)
		str = (const char *)log_msg_arg_get(msg, idx);
   1a978:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1a97a:	4298      	cmp	r0, r3
   1a97c:	d302      	bcc.n	1a984 <z_impl_log_process+0xd4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1a97e:	4b2e      	ldr	r3, [pc, #184]	; (1aa38 <z_impl_log_process+0x188>)
   1a980:	4298      	cmp	r0, r3
   1a982:	d31e      	bcc.n	1a9c2 <z_impl_log_process+0x112>
   1a984:	4608      	mov	r0, r1
   1a986:	f7ff ff85 	bl	1a894 <log_is_strdup>
   1a98a:	4602      	mov	r2, r0
   1a98c:	b9c8      	cbnz	r0, 1a9c2 <z_impl_log_process+0x112>
   1a98e:	4b2b      	ldr	r3, [pc, #172]	; (1aa3c <z_impl_log_process+0x18c>)
   1a990:	4299      	cmp	r1, r3
   1a992:	d016      	beq.n	1a9c2 <z_impl_log_process+0x112>
	return msg->hdr.ids.source_id;
   1a994:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1a996:	9903      	ldr	r1, [sp, #12]
   1a998:	f3c3 1389 	ubfx	r3, r3, #6, #10
   1a99c:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   1a99e:	bf38      	it	cc
   1a9a0:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1a9a4:	f8db 3000 	ldr.w	r3, [fp]
   1a9a8:	075b      	lsls	r3, r3, #29
   1a9aa:	d00a      	beq.n	1a9c2 <z_impl_log_process+0x112>
   1a9ac:	ea4f 138a 	mov.w	r3, sl, lsl #6
   1a9b0:	f043 0301 	orr.w	r3, r3, #1
   1a9b4:	f8ad 3000 	strh.w	r3, [sp]
   1a9b8:	4649      	mov	r1, r9
   1a9ba:	4643      	mov	r3, r8
   1a9bc:	4820      	ldr	r0, [pc, #128]	; (1aa40 <z_impl_log_process+0x190>)
   1a9be:	f006 ff99 	bl	218f4 <log_3>
		mask &= ~BIT(idx);
   1a9c2:	2101      	movs	r1, #1
   1a9c4:	fa01 f109 	lsl.w	r1, r1, r9
   1a9c8:	ea26 0601 	bic.w	r6, r6, r1
   1a9cc:	e7c1      	b.n	1a952 <z_impl_log_process+0xa2>
			if (log_backend_is_active(backend) &&
   1a9ce:	6873      	ldr	r3, [r6, #4]
   1a9d0:	795a      	ldrb	r2, [r3, #5]
   1a9d2:	b1a2      	cbz	r2, 1a9fe <z_impl_log_process+0x14e>
   1a9d4:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
   1a9d6:	791b      	ldrb	r3, [r3, #4]
   1a9d8:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1a9dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1a9e0:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	return msg->hdr.ids.level;
   1a9e4:	7aa1      	ldrb	r1, [r4, #10]
   1a9e6:	40d3      	lsrs	r3, r2
   1a9e8:	f001 0107 	and.w	r1, r1, #7
   1a9ec:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
   1a9f0:	4299      	cmp	r1, r3
   1a9f2:	d804      	bhi.n	1a9fe <z_impl_log_process+0x14e>
	backend->api->put(backend, msg);
   1a9f4:	6833      	ldr	r3, [r6, #0]
   1a9f6:	4621      	mov	r1, r4
   1a9f8:	4630      	mov	r0, r6
   1a9fa:	681b      	ldr	r3, [r3, #0]
   1a9fc:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   1a9fe:	f108 0801 	add.w	r8, r8, #1
   1aa02:	3610      	adds	r6, #16
   1aa04:	45b8      	cmp	r8, r7
   1aa06:	dbe2      	blt.n	1a9ce <z_impl_log_process+0x11e>
   1aa08:	e774      	b.n	1a8f4 <z_impl_log_process+0x44>
   1aa0a:	bf00      	nop
   1aa0c:	2001ec15 	.word	0x2001ec15
   1aa10:	20010788 	.word	0x20010788
   1aa14:	2001077c 	.word	0x2001077c
   1aa18:	20010780 	.word	0x20010780
   1aa1c:	2001ec16 	.word	0x2001ec16
   1aa20:	00023fa4 	.word	0x00023fa4
   1aa24:	00024004 	.word	0x00024004
   1aa28:	00023fc4 	.word	0x00023fc4
   1aa2c:	00024004 	.word	0x00024004
   1aa30:	00024014 	.word	0x00024014
   1aa34:	00023d34 	.word	0x00023d34
   1aa38:	00028650 	.word	0x00028650
   1aa3c:	00026f5a 	.word	0x00026f5a
   1aa40:	00026f74 	.word	0x00026f74
   1aa44:	20010144 	.word	0x20010144
   1aa48:	20010134 	.word	0x20010134

0001aa4c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   1aa4c:	4b27      	ldr	r3, [pc, #156]	; (1aaec <msg_finalize+0xa0>)
{
   1aa4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   1aa50:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1aa52:	8141      	strh	r1, [r0, #10]
{
   1aa54:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1aa56:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1aa58:	4d25      	ldr	r5, [pc, #148]	; (1aaf0 <msg_finalize+0xa4>)
   1aa5a:	60e0      	str	r0, [r4, #12]
   1aa5c:	e8d5 3fef 	ldaex	r3, [r5]
   1aa60:	3301      	adds	r3, #1
   1aa62:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1aa66:	2a00      	cmp	r2, #0
   1aa68:	d1f8      	bne.n	1aa5c <msg_finalize+0x10>
	__asm__ volatile(
   1aa6a:	f04f 0320 	mov.w	r3, #32
   1aa6e:	f3ef 8611 	mrs	r6, BASEPRI
   1aa72:	f383 8811 	msr	BASEPRI, r3
   1aa76:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1aa7a:	481e      	ldr	r0, [pc, #120]	; (1aaf4 <msg_finalize+0xa8>)
   1aa7c:	4621      	mov	r1, r4
   1aa7e:	f006 febb 	bl	217f8 <log_list_add_tail>
	__asm__ volatile(
   1aa82:	f386 8811 	msr	BASEPRI, r6
   1aa86:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1aa8a:	4b1b      	ldr	r3, [pc, #108]	; (1aaf8 <msg_finalize+0xac>)
   1aa8c:	781b      	ldrb	r3, [r3, #0]
   1aa8e:	b183      	cbz	r3, 1aab2 <msg_finalize+0x66>
	__asm__ volatile(
   1aa90:	f04f 0320 	mov.w	r3, #32
   1aa94:	f3ef 8411 	mrs	r4, BASEPRI
   1aa98:	f383 8811 	msr	BASEPRI, r3
   1aa9c:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
   1aaa0:	2000      	movs	r0, #0
   1aaa2:	f7ff ff05 	bl	1a8b0 <z_impl_log_process>
	__asm__ volatile(
   1aaa6:	f384 8811 	msr	BASEPRI, r4
   1aaaa:	f3bf 8f6f 	isb	sy
}
   1aaae:	b002      	add	sp, #8
   1aab0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   1aab2:	4a12      	ldr	r2, [pc, #72]	; (1aafc <msg_finalize+0xb0>)
   1aab4:	682b      	ldr	r3, [r5, #0]
   1aab6:	6812      	ldr	r2, [r2, #0]
   1aab8:	2a00      	cmp	r2, #0
   1aaba:	d0f8      	beq.n	1aaae <msg_finalize+0x62>
   1aabc:	2b01      	cmp	r3, #1
   1aabe:	d10a      	bne.n	1aad6 <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   1aac0:	2200      	movs	r2, #0
   1aac2:	2300      	movs	r3, #0
   1aac4:	480e      	ldr	r0, [pc, #56]	; (1ab00 <msg_finalize+0xb4>)
   1aac6:	e9cd 2300 	strd	r2, r3, [sp]
   1aaca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1aace:	2300      	movs	r3, #0
   1aad0:	f005 fec0 	bl	20854 <z_impl_k_timer_start>
   1aad4:	e7eb      	b.n	1aaae <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   1aad6:	2b0a      	cmp	r3, #10
   1aad8:	d1e9      	bne.n	1aaae <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   1aada:	4809      	ldr	r0, [pc, #36]	; (1ab00 <msg_finalize+0xb4>)
   1aadc:	f008 ff2f 	bl	2393e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1aae0:	4808      	ldr	r0, [pc, #32]	; (1ab04 <msg_finalize+0xb8>)
}
   1aae2:	b002      	add	sp, #8
   1aae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1aae8:	f005 bb38 	b.w	2015c <z_impl_k_sem_give>
   1aaec:	20010004 	.word	0x20010004
   1aaf0:	2001077c 	.word	0x2001077c
   1aaf4:	20010788 	.word	0x20010788
   1aaf8:	2001ec16 	.word	0x2001ec16
   1aafc:	200107ac 	.word	0x200107ac
   1ab00:	20010438 	.word	0x20010438
   1ab04:	200101dc 	.word	0x200101dc

0001ab08 <log_process_thread_func>:
{
   1ab08:	b510      	push	{r4, lr}
	log_init();
   1ab0a:	f7ff fe55 	bl	1a7b8 <log_init>
	return z_impl_k_current_get();
   1ab0e:	f005 fb1f 	bl	20150 <z_impl_k_current_get>
	proc_tid = process_tid;
   1ab12:	4b0c      	ldr	r3, [pc, #48]	; (1ab44 <log_process_thread_func+0x3c>)
   1ab14:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1ab16:	b130      	cbz	r0, 1ab26 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   1ab18:	4b0b      	ldr	r3, [pc, #44]	; (1ab48 <log_process_thread_func+0x40>)
	    process_tid &&
   1ab1a:	681b      	ldr	r3, [r3, #0]
   1ab1c:	2b09      	cmp	r3, #9
   1ab1e:	dd02      	ble.n	1ab26 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   1ab20:	480a      	ldr	r0, [pc, #40]	; (1ab4c <log_process_thread_func+0x44>)
   1ab22:	f005 fb1b 	bl	2015c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   1ab26:	4c09      	ldr	r4, [pc, #36]	; (1ab4c <log_process_thread_func+0x44>)
   1ab28:	2000      	movs	r0, #0
   1ab2a:	f7ff fec1 	bl	1a8b0 <z_impl_log_process>
		if (log_process(false) == false) {
   1ab2e:	2800      	cmp	r0, #0
   1ab30:	d1fa      	bne.n	1ab28 <log_process_thread_func+0x20>
   1ab32:	f04f 32ff 	mov.w	r2, #4294967295
   1ab36:	f04f 33ff 	mov.w	r3, #4294967295
   1ab3a:	4620      	mov	r0, r4
   1ab3c:	f005 fb34 	bl	201a8 <z_impl_k_sem_take>
   1ab40:	e7f2      	b.n	1ab28 <log_process_thread_func+0x20>
   1ab42:	bf00      	nop
   1ab44:	200107ac 	.word	0x200107ac
   1ab48:	2001077c 	.word	0x2001077c
   1ab4c:	200101dc 	.word	0x200101dc

0001ab50 <z_impl_log_panic>:
{
   1ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   1ab52:	4f0e      	ldr	r7, [pc, #56]	; (1ab8c <z_impl_log_panic+0x3c>)
   1ab54:	783d      	ldrb	r5, [r7, #0]
   1ab56:	b975      	cbnz	r5, 1ab76 <z_impl_log_panic+0x26>
	log_init();
   1ab58:	f7ff fe2e 	bl	1a7b8 <log_init>
	return __log_backends_end - __log_backends_start;
   1ab5c:	4c0c      	ldr	r4, [pc, #48]	; (1ab90 <z_impl_log_panic+0x40>)
   1ab5e:	4e0d      	ldr	r6, [pc, #52]	; (1ab94 <z_impl_log_panic+0x44>)
   1ab60:	1b36      	subs	r6, r6, r4
   1ab62:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ab64:	42b5      	cmp	r5, r6
   1ab66:	db07      	blt.n	1ab78 <z_impl_log_panic+0x28>
   1ab68:	2000      	movs	r0, #0
   1ab6a:	f7ff fea1 	bl	1a8b0 <z_impl_log_process>
		while (log_process(false) == true) {
   1ab6e:	2800      	cmp	r0, #0
   1ab70:	d1fa      	bne.n	1ab68 <z_impl_log_panic+0x18>
	panic_mode = true;
   1ab72:	2301      	movs	r3, #1
   1ab74:	703b      	strb	r3, [r7, #0]
}
   1ab76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   1ab78:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1ab7a:	795b      	ldrb	r3, [r3, #5]
   1ab7c:	b11b      	cbz	r3, 1ab86 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   1ab7e:	6823      	ldr	r3, [r4, #0]
   1ab80:	4620      	mov	r0, r4
   1ab82:	691b      	ldr	r3, [r3, #16]
   1ab84:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1ab86:	3501      	adds	r5, #1
   1ab88:	3410      	adds	r4, #16
   1ab8a:	e7eb      	b.n	1ab64 <z_impl_log_panic+0x14>
   1ab8c:	2001ec16 	.word	0x2001ec16
   1ab90:	00024004 	.word	0x00024004
   1ab94:	00024014 	.word	0x00024014

0001ab98 <log_free>:
{
   1ab98:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1ab9a:	3804      	subs	r0, #4
   1ab9c:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ab9e:	e8d0 3fef 	ldaex	r3, [r0]
   1aba2:	1e5a      	subs	r2, r3, #1
   1aba4:	e8c0 2fe1 	stlex	r1, r2, [r0]
   1aba8:	2900      	cmp	r1, #0
   1abaa:	d1f8      	bne.n	1ab9e <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   1abac:	2b01      	cmp	r3, #1
   1abae:	d103      	bne.n	1abb8 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1abb0:	4803      	ldr	r0, [pc, #12]	; (1abc0 <log_free+0x28>)
   1abb2:	a901      	add	r1, sp, #4
   1abb4:	f004 fda0 	bl	1f6f8 <k_mem_slab_free>
}
   1abb8:	b003      	add	sp, #12
   1abba:	f85d fb04 	ldr.w	pc, [sp], #4
   1abbe:	bf00      	nop
   1abc0:	20010790 	.word	0x20010790

0001abc4 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   1abc4:	2320      	movs	r3, #32
   1abc6:	4902      	ldr	r1, [pc, #8]	; (1abd0 <log_msg_pool_init+0xc>)
   1abc8:	461a      	mov	r2, r3
   1abca:	4802      	ldr	r0, [pc, #8]	; (1abd4 <log_msg_pool_init+0x10>)
   1abcc:	f008 bc7b 	b.w	234c6 <k_mem_slab_init>
   1abd0:	2002c9a0 	.word	0x2002c9a0
   1abd4:	200107b0 	.word	0x200107b0

0001abd8 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   1abd8:	2300      	movs	r3, #0
{
   1abda:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   1abdc:	4d09      	ldr	r5, [pc, #36]	; (1ac04 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1abde:	9301      	str	r3, [sp, #4]
   1abe0:	2001      	movs	r0, #1
   1abe2:	f7ff fe65 	bl	1a8b0 <z_impl_log_process>
   1abe6:	4604      	mov	r4, r0
			log_dropped();
   1abe8:	f7ff fd42 	bl	1a670 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   1abec:	2200      	movs	r2, #0
   1abee:	2300      	movs	r3, #0
   1abf0:	4628      	mov	r0, r5
   1abf2:	a901      	add	r1, sp, #4
   1abf4:	f004 fd4e 	bl	1f694 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   1abf8:	b108      	cbz	r0, 1abfe <log_msg_no_space_handle+0x26>
   1abfa:	2c00      	cmp	r4, #0
   1abfc:	d1f0      	bne.n	1abe0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   1abfe:	9801      	ldr	r0, [sp, #4]
   1ac00:	b003      	add	sp, #12
   1ac02:	bd30      	pop	{r4, r5, pc}
   1ac04:	200107b0 	.word	0x200107b0

0001ac08 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   1ac08:	2300      	movs	r3, #0
{
   1ac0a:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1ac0c:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   1ac0e:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1ac10:	4806      	ldr	r0, [pc, #24]	; (1ac2c <log_msg_chunk_alloc+0x24>)
   1ac12:	2300      	movs	r3, #0
   1ac14:	a901      	add	r1, sp, #4
   1ac16:	f004 fd3d 	bl	1f694 <k_mem_slab_alloc>
	if (err != 0) {
   1ac1a:	b110      	cbz	r0, 1ac22 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   1ac1c:	f7ff ffdc 	bl	1abd8 <log_msg_no_space_handle>
   1ac20:	9001      	str	r0, [sp, #4]
}
   1ac22:	9801      	ldr	r0, [sp, #4]
   1ac24:	b003      	add	sp, #12
   1ac26:	f85d fb04 	ldr.w	pc, [sp], #4
   1ac2a:	bf00      	nop
   1ac2c:	200107b0 	.word	0x200107b0

0001ac30 <msg_free>:
{
   1ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1ac32:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   1ac34:	7a45      	ldrb	r5, [r0, #9]
{
   1ac36:	b085      	sub	sp, #20
   1ac38:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   1ac3a:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   1ac3c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   1ac40:	d41c      	bmi.n	1ac7c <msg_free+0x4c>
   1ac42:	b1dd      	cbz	r5, 1ac7c <msg_free+0x4c>
		uint32_t smask = 0;
   1ac44:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   1ac46:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   1ac48:	4631      	mov	r1, r6
   1ac4a:	9801      	ldr	r0, [sp, #4]
   1ac4c:	f006 fed0 	bl	219f0 <log_msg_arg_get>
   1ac50:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1ac52:	f7ff fe1f 	bl	1a894 <log_is_strdup>
   1ac56:	b170      	cbz	r0, 1ac76 <msg_free+0x46>
				if (smask == 0) {
   1ac58:	b934      	cbnz	r4, 1ac68 <msg_free+0x38>
					smask = z_log_get_s_mask(
   1ac5a:	9b01      	ldr	r3, [sp, #4]
   1ac5c:	4629      	mov	r1, r5
   1ac5e:	6918      	ldr	r0, [r3, #16]
   1ac60:	f006 fde9 	bl	21836 <z_log_get_s_mask>
					if (smask == 0) {
   1ac64:	4604      	mov	r4, r0
   1ac66:	b148      	cbz	r0, 1ac7c <msg_free+0x4c>
				if (smask & BIT(i)) {
   1ac68:	fa24 f306 	lsr.w	r3, r4, r6
   1ac6c:	07d9      	lsls	r1, r3, #31
   1ac6e:	d502      	bpl.n	1ac76 <msg_free+0x46>
					log_free(buf);
   1ac70:	4638      	mov	r0, r7
   1ac72:	f7ff ff91 	bl	1ab98 <log_free>
		for (i = 0; i < nargs; i++) {
   1ac76:	3601      	adds	r6, #1
   1ac78:	42ae      	cmp	r6, r5
   1ac7a:	d3e5      	bcc.n	1ac48 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   1ac7c:	9b01      	ldr	r3, [sp, #4]
   1ac7e:	7a1a      	ldrb	r2, [r3, #8]
   1ac80:	0792      	lsls	r2, r2, #30
   1ac82:	d504      	bpl.n	1ac8e <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   1ac84:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1ac86:	4c08      	ldr	r4, [pc, #32]	; (1aca8 <msg_free+0x78>)
   1ac88:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   1ac8a:	9b03      	ldr	r3, [sp, #12]
   1ac8c:	b92b      	cbnz	r3, 1ac9a <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   1ac8e:	4806      	ldr	r0, [pc, #24]	; (1aca8 <msg_free+0x78>)
   1ac90:	a901      	add	r1, sp, #4
   1ac92:	f004 fd31 	bl	1f6f8 <k_mem_slab_free>
}
   1ac96:	b005      	add	sp, #20
   1ac98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   1ac9a:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1ac9c:	4620      	mov	r0, r4
   1ac9e:	a903      	add	r1, sp, #12
   1aca0:	f004 fd2a 	bl	1f6f8 <k_mem_slab_free>
		cont = next;
   1aca4:	9503      	str	r5, [sp, #12]
   1aca6:	e7f0      	b.n	1ac8a <msg_free+0x5a>
   1aca8:	200107b0 	.word	0x200107b0

0001acac <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   1acac:	b40e      	push	{r1, r2, r3}
   1acae:	b503      	push	{r0, r1, lr}
   1acb0:	ab03      	add	r3, sp, #12
   1acb2:	f853 2b04 	ldr.w	r2, [r3], #4
   1acb6:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   1acb8:	4804      	ldr	r0, [pc, #16]	; (1accc <print_formatted+0x20>)
	va_start(args, fmt);
   1acba:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   1acbc:	f7ff fa26 	bl	1a10c <cbvprintf>
	va_end(args);

	return length;
}
   1acc0:	b002      	add	sp, #8
   1acc2:	f85d eb04 	ldr.w	lr, [sp], #4
   1acc6:	b003      	add	sp, #12
   1acc8:	4770      	bx	lr
   1acca:	bf00      	nop
   1accc:	00021d4d 	.word	0x00021d4d

0001acd0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   1acd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1acd4:	f011 0402 	ands.w	r4, r1, #2
{
   1acd8:	b085      	sub	sp, #20
   1acda:	4690      	mov	r8, r2
   1acdc:	4606      	mov	r6, r0
   1acde:	461a      	mov	r2, r3
   1ace0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1ace4:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1ace8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   1acec:	d007      	beq.n	1acfe <prefix_print+0x2e>
	if (!format) {
   1acee:	f011 0f44 	tst.w	r1, #68	; 0x44
   1acf2:	d137      	bne.n	1ad64 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   1acf4:	4932      	ldr	r1, [pc, #200]	; (1adc0 <prefix_print+0xf0>)
   1acf6:	f7ff ffd9 	bl	1acac <print_formatted>
			length = print_formatted(log_output,
   1acfa:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
   1acfc:	460c      	mov	r4, r1
	if (color) {
   1acfe:	f1b9 0f00 	cmp.w	r9, #0
   1ad02:	d00a      	beq.n	1ad1a <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
   1ad04:	4b2f      	ldr	r3, [pc, #188]	; (1adc4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   1ad06:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   1ad08:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   1ad0c:	4b2e      	ldr	r3, [pc, #184]	; (1adc8 <prefix_print+0xf8>)
   1ad0e:	492f      	ldr	r1, [pc, #188]	; (1adcc <prefix_print+0xfc>)
   1ad10:	2a00      	cmp	r2, #0
   1ad12:	bf08      	it	eq
   1ad14:	461a      	moveq	r2, r3
   1ad16:	f7ff ffc9 	bl	1acac <print_formatted>
	if (level_on) {
   1ad1a:	b13d      	cbz	r5, 1ad2c <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   1ad1c:	4b2c      	ldr	r3, [pc, #176]	; (1add0 <prefix_print+0x100>)
   1ad1e:	4630      	mov	r0, r6
   1ad20:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   1ad24:	492b      	ldr	r1, [pc, #172]	; (1add4 <prefix_print+0x104>)
   1ad26:	f7ff ffc1 	bl	1acac <print_formatted>
   1ad2a:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   1ad2c:	f1b8 0f00 	cmp.w	r8, #0
   1ad30:	d043      	beq.n	1adba <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   1ad32:	2301      	movs	r3, #1
   1ad34:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   1ad38:	4b27      	ldr	r3, [pc, #156]	; (1add8 <prefix_print+0x108>)
   1ad3a:	f017 0f10 	tst.w	r7, #16
   1ad3e:	4f27      	ldr	r7, [pc, #156]	; (1addc <prefix_print+0x10c>)
   1ad40:	bf18      	it	ne
   1ad42:	461f      	movne	r7, r3
   1ad44:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   1ad48:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1ad4c:	f7ff fc9c 	bl	1a688 <log_source_name_get>
   1ad50:	4639      	mov	r1, r7
   1ad52:	4602      	mov	r2, r0
   1ad54:	4630      	mov	r0, r6
   1ad56:	f7ff ffa9 	bl	1acac <print_formatted>
   1ad5a:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   1ad5c:	4420      	add	r0, r4
   1ad5e:	b005      	add	sp, #20
   1ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1ad64:	4b1e      	ldr	r3, [pc, #120]	; (1ade0 <prefix_print+0x110>)
   1ad66:	6819      	ldr	r1, [r3, #0]
   1ad68:	2900      	cmp	r1, #0
   1ad6a:	d0c7      	beq.n	1acfc <prefix_print+0x2c>
		timestamp /= timestamp_div;
   1ad6c:	4b1d      	ldr	r3, [pc, #116]	; (1ade4 <prefix_print+0x114>)
   1ad6e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1ad72:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   1ad74:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1ad78:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   1ad7c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   1ad80:	fbb4 f2fe 	udiv	r2, r4, lr
   1ad84:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   1ad88:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   1ad8c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ad90:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1ad94:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ad98:	fb01 441b 	mls	r4, r1, fp, r4
   1ad9c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   1ada0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1ada4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   1ada8:	e9cd b101 	strd	fp, r1, [sp, #4]
   1adac:	fb0a e113 	mls	r1, sl, r3, lr
   1adb0:	9100      	str	r1, [sp, #0]
   1adb2:	490d      	ldr	r1, [pc, #52]	; (1ade8 <prefix_print+0x118>)
   1adb4:	f7ff ff7a 	bl	1acac <print_formatted>
   1adb8:	e79f      	b.n	1acfa <prefix_print+0x2a>
	total += print_formatted(log_output,
   1adba:	4f08      	ldr	r7, [pc, #32]	; (1addc <prefix_print+0x10c>)
   1adbc:	e7c2      	b.n	1ad44 <prefix_print+0x74>
   1adbe:	bf00      	nop
   1adc0:	00026fc5 	.word	0x00026fc5
   1adc4:	00026248 	.word	0x00026248
   1adc8:	00026fb7 	.word	0x00026fb7
   1adcc:	00027587 	.word	0x00027587
   1add0:	0002625c 	.word	0x0002625c
   1add4:	00026fea 	.word	0x00026fea
   1add8:	00026fc1 	.word	0x00026fc1
   1addc:	00026fbc 	.word	0x00026fbc
   1ade0:	200107cc 	.word	0x200107cc
   1ade4:	200107d0 	.word	0x200107d0
   1ade8:	00026fce 	.word	0x00026fce

0001adec <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   1adec:	b538      	push	{r3, r4, r5, lr}
   1adee:	460c      	mov	r4, r1
	if (color) {
   1adf0:	07e1      	lsls	r1, r4, #31
{
   1adf2:	4605      	mov	r5, r0
	if (color) {
   1adf4:	d503      	bpl.n	1adfe <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   1adf6:	4a08      	ldr	r2, [pc, #32]	; (1ae18 <postfix_print+0x2c>)
   1adf8:	4908      	ldr	r1, [pc, #32]	; (1ae1c <postfix_print+0x30>)
   1adfa:	f7ff ff57 	bl	1acac <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1adfe:	06e2      	lsls	r2, r4, #27
   1ae00:	d408      	bmi.n	1ae14 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ae02:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   1ae04:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   1ae06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   1ae0a:	bf4c      	ite	mi
   1ae0c:	4904      	ldrmi	r1, [pc, #16]	; (1ae20 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   1ae0e:	4905      	ldrpl	r1, [pc, #20]	; (1ae24 <postfix_print+0x38>)
   1ae10:	f7ff bf4c 	b.w	1acac <print_formatted>
}
   1ae14:	bd38      	pop	{r3, r4, r5, pc}
   1ae16:	bf00      	nop
   1ae18:	00026fb7 	.word	0x00026fb7
   1ae1c:	00027587 	.word	0x00027587
   1ae20:	0002745d 	.word	0x0002745d
   1ae24:	0002706a 	.word	0x0002706a

0001ae28 <hexdump_line_print>:
{
   1ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae2c:	461d      	mov	r5, r3
   1ae2e:	9b08      	ldr	r3, [sp, #32]
   1ae30:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ae32:	06da      	lsls	r2, r3, #27
{
   1ae34:	4604      	mov	r4, r0
   1ae36:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1ae38:	d405      	bmi.n	1ae46 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1ae3a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   1ae3c:	bf4c      	ite	mi
   1ae3e:	492a      	ldrmi	r1, [pc, #168]	; (1aee8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   1ae40:	492a      	ldrpl	r1, [pc, #168]	; (1aeec <hexdump_line_print+0xc4>)
   1ae42:	f7ff ff33 	bl	1acac <print_formatted>
{
   1ae46:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   1ae4a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1aef4 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   1ae4e:	45a8      	cmp	r8, r5
   1ae50:	db2a      	blt.n	1aea8 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1ae52:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1ae54:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1aef8 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   1ae58:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1aefc <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   1ae5c:	f8df a094 	ldr.w	sl, [pc, #148]	; 1aef4 <hexdump_line_print+0xcc>
		if (i < length) {
   1ae60:	42bd      	cmp	r5, r7
   1ae62:	d22f      	bcs.n	1aec4 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
   1ae64:	4649      	mov	r1, r9
   1ae66:	4620      	mov	r0, r4
   1ae68:	5d72      	ldrb	r2, [r6, r5]
   1ae6a:	f7ff ff1f 	bl	1acac <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1ae6e:	3501      	adds	r5, #1
   1ae70:	2d10      	cmp	r5, #16
   1ae72:	d120      	bne.n	1aeb6 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
   1ae74:	4620      	mov	r0, r4
   1ae76:	491e      	ldr	r1, [pc, #120]	; (1aef0 <hexdump_line_print+0xc8>)
   1ae78:	f7ff ff18 	bl	1acac <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1ae7c:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   1ae7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1aef4 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
   1ae82:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1af00 <hexdump_line_print+0xd8>
		if (i < length) {
   1ae86:	42af      	cmp	r7, r5
   1ae88:	d928      	bls.n	1aedc <hexdump_line_print+0xb4>
			char c = (char)data[i];
   1ae8a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   1ae8c:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   1ae8e:	f1a2 0320 	sub.w	r3, r2, #32
   1ae92:	2b5f      	cmp	r3, #95	; 0x5f
   1ae94:	bf28      	it	cs
   1ae96:	222e      	movcs	r2, #46	; 0x2e
   1ae98:	4620      	mov	r0, r4
   1ae9a:	f7ff ff07 	bl	1acac <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1ae9e:	3501      	adds	r5, #1
   1aea0:	2d10      	cmp	r5, #16
   1aea2:	d114      	bne.n	1aece <hexdump_line_print+0xa6>
}
   1aea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   1aea8:	4649      	mov	r1, r9
   1aeaa:	4620      	mov	r0, r4
   1aeac:	f7ff fefe 	bl	1acac <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1aeb0:	f108 0801 	add.w	r8, r8, #1
   1aeb4:	e7cb      	b.n	1ae4e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   1aeb6:	076a      	lsls	r2, r5, #29
   1aeb8:	d1d2      	bne.n	1ae60 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   1aeba:	4651      	mov	r1, sl
   1aebc:	4620      	mov	r0, r4
   1aebe:	f7ff fef5 	bl	1acac <print_formatted>
   1aec2:	e7cd      	b.n	1ae60 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   1aec4:	4641      	mov	r1, r8
   1aec6:	4620      	mov	r0, r4
   1aec8:	f7ff fef0 	bl	1acac <print_formatted>
   1aecc:	e7cf      	b.n	1ae6e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1aece:	076b      	lsls	r3, r5, #29
   1aed0:	d1d9      	bne.n	1ae86 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   1aed2:	4641      	mov	r1, r8
   1aed4:	4620      	mov	r0, r4
   1aed6:	f7ff fee9 	bl	1acac <print_formatted>
   1aeda:	e7d4      	b.n	1ae86 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   1aedc:	4641      	mov	r1, r8
   1aede:	4620      	mov	r0, r4
   1aee0:	f7ff fee4 	bl	1acac <print_formatted>
   1aee4:	e7db      	b.n	1ae9e <hexdump_line_print+0x76>
   1aee6:	bf00      	nop
   1aee8:	0002745d 	.word	0x0002745d
   1aeec:	0002706a 	.word	0x0002706a
   1aef0:	00026ffa 	.word	0x00026ffa
   1aef4:	00026ff8 	.word	0x00026ff8
   1aef8:	00026ff6 	.word	0x00026ff6
   1aefc:	00026ff0 	.word	0x00026ff0
   1af00:	0002783f 	.word	0x0002783f

0001af04 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   1af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   1af08:	7a8b      	ldrb	r3, [r1, #10]
   1af0a:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1af0c:	f013 0807 	ands.w	r8, r3, #7
{
   1af10:	4605      	mov	r5, r0
   1af12:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1af14:	7a0a      	ldrb	r2, [r1, #8]
   1af16:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1af18:	d021      	beq.n	1af5e <log_output_msg_process+0x5a>
   1af1a:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   1af1c:	8949      	ldrh	r1, [r1, #10]
   1af1e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1af22:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1af26:	e9cd 8300 	strd	r8, r3, [sp]
   1af2a:	9102      	str	r1, [sp, #8]
   1af2c:	68f3      	ldr	r3, [r6, #12]
   1af2e:	4639      	mov	r1, r7
   1af30:	f002 0201 	and.w	r2, r2, #1
   1af34:	f7ff fecc 	bl	1acd0 <prefix_print>
   1af38:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1af3a:	7a34      	ldrb	r4, [r6, #8]
   1af3c:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1af3e:	f014 0401 	ands.w	r4, r4, #1
   1af42:	d00e      	beq.n	1af62 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   1af44:	4629      	mov	r1, r5
   1af46:	4630      	mov	r0, r6
   1af48:	f006 fd96 	bl	21a78 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   1af4c:	f1b8 0f00 	cmp.w	r8, #0
   1af50:	d02b      	beq.n	1afaa <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   1af52:	4642      	mov	r2, r8
   1af54:	4639      	mov	r1, r7
   1af56:	4628      	mov	r0, r5
   1af58:	f7ff ff48 	bl	1adec <postfix_print>
   1af5c:	e025      	b.n	1afaa <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   1af5e:	46c1      	mov	r9, r8
   1af60:	e7eb      	b.n	1af3a <log_output_msg_process+0x36>
	} else if (raw_string) {
   1af62:	f1b8 0f00 	cmp.w	r8, #0
   1af66:	d126      	bne.n	1afb6 <log_output_msg_process+0xb2>
	size_t offset = 0;
   1af68:	4627      	mov	r7, r4
		length = log_output->size;
   1af6a:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   1af6c:	aa06      	add	r2, sp, #24
		length = log_output->size;
   1af6e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   1af70:	4630      	mov	r0, r6
   1af72:	463b      	mov	r3, r7
   1af74:	68a9      	ldr	r1, [r5, #8]
   1af76:	f006 fd6b 	bl	21a50 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   1af7a:	9a06      	ldr	r2, [sp, #24]
   1af7c:	686b      	ldr	r3, [r5, #4]
   1af7e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   1af80:	b13a      	cbz	r2, 1af92 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   1af82:	68ab      	ldr	r3, [r5, #8]
   1af84:	4413      	add	r3, r2
   1af86:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   1af8a:	f1a4 030a 	sub.w	r3, r4, #10
   1af8e:	425c      	negs	r4, r3
   1af90:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   1af92:	4628      	mov	r0, r5
   1af94:	f006 fecd 	bl	21d32 <log_output_flush>
		offset += length;
   1af98:	9b06      	ldr	r3, [sp, #24]
   1af9a:	441f      	add	r7, r3
	} while (length > 0);
   1af9c:	2b00      	cmp	r3, #0
   1af9e:	d1e4      	bne.n	1af6a <log_output_msg_process+0x66>
	if (eol) {
   1afa0:	b11c      	cbz	r4, 1afaa <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   1afa2:	4628      	mov	r0, r5
   1afa4:	4913      	ldr	r1, [pc, #76]	; (1aff4 <log_output_msg_process+0xf0>)
   1afa6:	f7ff fe81 	bl	1acac <print_formatted>
	}

	log_output_flush(log_output);
   1afaa:	4628      	mov	r0, r5
   1afac:	f006 fec1 	bl	21d32 <log_output_flush>
}
   1afb0:	b00a      	add	sp, #40	; 0x28
   1afb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   1afb6:	4630      	mov	r0, r6
   1afb8:	f006 fd48 	bl	21a4c <log_msg_str_get>
   1afbc:	490e      	ldr	r1, [pc, #56]	; (1aff8 <log_output_msg_process+0xf4>)
   1afbe:	4602      	mov	r2, r0
   1afc0:	4628      	mov	r0, r5
   1afc2:	f7ff fe73 	bl	1acac <print_formatted>
		length = sizeof(buf);
   1afc6:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1afca:	aa05      	add	r2, sp, #20
   1afcc:	4623      	mov	r3, r4
   1afce:	4630      	mov	r0, r6
   1afd0:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1afd2:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1afd6:	f006 fd3b 	bl	21a50 <log_msg_hexdump_data_get>
		if (length) {
   1afda:	9a05      	ldr	r2, [sp, #20]
   1afdc:	2a00      	cmp	r2, #0
   1afde:	d0b8      	beq.n	1af52 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   1afe0:	464b      	mov	r3, r9
   1afe2:	4628      	mov	r0, r5
   1afe4:	9700      	str	r7, [sp, #0]
   1afe6:	a906      	add	r1, sp, #24
   1afe8:	f7ff ff1e 	bl	1ae28 <hexdump_line_print>
			offset += length;
   1afec:	9b05      	ldr	r3, [sp, #20]
   1afee:	441c      	add	r4, r3
		length = sizeof(buf);
   1aff0:	e7eb      	b.n	1afca <log_output_msg_process+0xc6>
   1aff2:	bf00      	nop
   1aff4:	00026ffc 	.word	0x00026ffc
   1aff8:	00027587 	.word	0x00027587

0001affc <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1affc:	f242 730f 	movw	r3, #9999	; 0x270f
{
   1b000:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b002:	428b      	cmp	r3, r1
   1b004:	bf28      	it	cs
   1b006:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   1b008:	6805      	ldr	r5, [r0, #0]
{
   1b00a:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1b00c:	2105      	movs	r1, #5
   1b00e:	4668      	mov	r0, sp
   1b010:	4a0d      	ldr	r2, [pc, #52]	; (1b048 <log_output_dropped_process+0x4c>)
   1b012:	f006 f85f 	bl	210d4 <snprintk>
   1b016:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1b018:	6863      	ldr	r3, [r4, #4]
   1b01a:	4628      	mov	r0, r5
   1b01c:	2204      	movs	r2, #4
   1b01e:	685b      	ldr	r3, [r3, #4]
   1b020:	490a      	ldr	r1, [pc, #40]	; (1b04c <log_output_dropped_process+0x50>)
   1b022:	f006 fd1c 	bl	21a5e <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   1b026:	6863      	ldr	r3, [r4, #4]
   1b028:	4632      	mov	r2, r6
   1b02a:	4669      	mov	r1, sp
   1b02c:	4628      	mov	r0, r5
   1b02e:	685b      	ldr	r3, [r3, #4]
   1b030:	f006 fd15 	bl	21a5e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1b034:	6863      	ldr	r3, [r4, #4]
   1b036:	2217      	movs	r2, #23
   1b038:	4628      	mov	r0, r5
   1b03a:	685b      	ldr	r3, [r3, #4]
   1b03c:	4904      	ldr	r1, [pc, #16]	; (1b050 <log_output_dropped_process+0x54>)
   1b03e:	f006 fd0e 	bl	21a5e <buffer_write>
		     log_output->control_block->ctx);
}
   1b042:	b002      	add	sp, #8
   1b044:	bd70      	pop	{r4, r5, r6, pc}
   1b046:	bf00      	nop
   1b048:	0002782b 	.word	0x0002782b
   1b04c:	00027036 	.word	0x00027036
   1b050:	0002701e 	.word	0x0002701e

0001b054 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1b054:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1b056:	2100      	movs	r1, #0
	timestamp_div = 1U;
   1b058:	4a07      	ldr	r2, [pc, #28]	; (1b078 <log_output_timestamp_freq_set+0x24>)
{
   1b05a:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   1b05c:	4c07      	ldr	r4, [pc, #28]	; (1b07c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   1b05e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   1b060:	42a0      	cmp	r0, r4
   1b062:	d804      	bhi.n	1b06e <log_output_timestamp_freq_set+0x1a>
   1b064:	b101      	cbz	r1, 1b068 <log_output_timestamp_freq_set+0x14>
   1b066:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1b068:	4b05      	ldr	r3, [pc, #20]	; (1b080 <log_output_timestamp_freq_set+0x2c>)
   1b06a:	6018      	str	r0, [r3, #0]
}
   1b06c:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   1b06e:	2101      	movs	r1, #1
		frequency /= 2U;
   1b070:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1b072:	005b      	lsls	r3, r3, #1
   1b074:	e7f4      	b.n	1b060 <log_output_timestamp_freq_set+0xc>
   1b076:	bf00      	nop
   1b078:	200107d0 	.word	0x200107d0
   1b07c:	000f4240 	.word	0x000f4240
   1b080:	200107cc 	.word	0x200107cc

0001b084 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   1b084:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   1b086:	2804      	cmp	r0, #4
	entry->handler = NULL;
   1b088:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1b08a:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   1b08c:	bf98      	it	ls
   1b08e:	4b04      	ldrls	r3, [pc, #16]	; (1b0a0 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   1b090:	4a04      	ldr	r2, [pc, #16]	; (1b0a4 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   1b092:	bf98      	it	ls
   1b094:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   1b098:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   1b09a:	600b      	str	r3, [r1, #0]
}
   1b09c:	4770      	bx	lr
   1b09e:	bf00      	nop
   1b0a0:	000262b0 	.word	0x000262b0
   1b0a4:	0002628c 	.word	0x0002628c

0001b0a8 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   1b0a8:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   1b0aa:	4a08      	ldr	r2, [pc, #32]	; (1b0cc <backend_name_get+0x24>)
	entry->syntax  = NULL;
   1b0ac:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   1b0ae:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1b0b0:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   1b0b2:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   1b0b4:	4b06      	ldr	r3, [pc, #24]	; (1b0d0 <backend_name_get+0x28>)
   1b0b6:	4a07      	ldr	r2, [pc, #28]	; (1b0d4 <backend_name_get+0x2c>)
   1b0b8:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   1b0ba:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   1b0be:	bf3e      	ittt	cc
   1b0c0:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   1b0c4:	689b      	ldrcc	r3, [r3, #8]
   1b0c6:	600b      	strcc	r3, [r1, #0]
	}
}
   1b0c8:	4770      	bx	lr
   1b0ca:	bf00      	nop
   1b0cc:	000263f0 	.word	0x000263f0
   1b0d0:	00024004 	.word	0x00024004
   1b0d4:	00024014 	.word	0x00024014

0001b0d8 <cmd_log_backends_list>:
{
   1b0d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b0dc:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
   1b0de:	2600      	movs	r6, #0
   1b0e0:	4c10      	ldr	r4, [pc, #64]	; (1b124 <cmd_log_backends_list+0x4c>)
   1b0e2:	4d11      	ldr	r5, [pc, #68]	; (1b128 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   1b0e4:	f8df 8044 	ldr.w	r8, [pc, #68]	; 1b12c <cmd_log_backends_list+0x54>
   1b0e8:	1b2d      	subs	r5, r5, r4
   1b0ea:	f8df 9044 	ldr.w	r9, [pc, #68]	; 1b130 <cmd_log_backends_list+0x58>
   1b0ee:	f8df a044 	ldr.w	sl, [pc, #68]	; 1b134 <cmd_log_backends_list+0x5c>
   1b0f2:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   1b0f4:	42ae      	cmp	r6, r5
   1b0f6:	db03      	blt.n	1b100 <cmd_log_backends_list+0x28>
}
   1b0f8:	2000      	movs	r0, #0
   1b0fa:	b002      	add	sp, #8
   1b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   1b100:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   1b102:	2100      	movs	r1, #0
   1b104:	7953      	ldrb	r3, [r2, #5]
   1b106:	7912      	ldrb	r2, [r2, #4]
   1b108:	2b00      	cmp	r3, #0
   1b10a:	bf14      	ite	ne
   1b10c:	4643      	movne	r3, r8
   1b10e:	464b      	moveq	r3, r9
   1b110:	4638      	mov	r0, r7
   1b112:	e9cd 3200 	strd	r3, r2, [sp]
   1b116:	68a3      	ldr	r3, [r4, #8]
   1b118:	4652      	mov	r2, sl
   1b11a:	f006 ff56 	bl	21fca <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   1b11e:	3601      	adds	r6, #1
   1b120:	3410      	adds	r4, #16
   1b122:	e7e7      	b.n	1b0f4 <cmd_log_backends_list+0x1c>
   1b124:	00024004 	.word	0x00024004
   1b128:	00024014 	.word	0x00024014
   1b12c:	0002703b 	.word	0x0002703b
   1b130:	00027043 	.word	0x00027043
   1b134:	0002704c 	.word	0x0002704c

0001b138 <log_status>:
{
   1b138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1b13c:	4b21      	ldr	r3, [pc, #132]	; (1b1c4 <log_status+0x8c>)
   1b13e:	4d22      	ldr	r5, [pc, #136]	; (1b1c8 <log_status+0x90>)
   1b140:	4606      	mov	r6, r0
   1b142:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
   1b144:	684b      	ldr	r3, [r1, #4]
   1b146:	460f      	mov	r7, r1
	if (!log_backend_is_active(backend)) {
   1b148:	795b      	ldrb	r3, [r3, #5]
   1b14a:	08ed      	lsrs	r5, r5, #3
   1b14c:	b91b      	cbnz	r3, 1b156 <log_status+0x1e>
		shell_warn(shell, "Logs are halted!");
   1b14e:	2104      	movs	r1, #4
   1b150:	4a1e      	ldr	r2, [pc, #120]	; (1b1cc <log_status+0x94>)
   1b152:	f006 ff3a 	bl	21fca <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1b156:	2100      	movs	r1, #0
   1b158:	4630      	mov	r0, r6
   1b15a:	4b1d      	ldr	r3, [pc, #116]	; (1b1d0 <log_status+0x98>)
   1b15c:	4a1d      	ldr	r2, [pc, #116]	; (1b1d4 <log_status+0x9c>)
   1b15e:	f006 ff34 	bl	21fca <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   1b162:	2100      	movs	r1, #0
   1b164:	4630      	mov	r0, r6
   1b166:	4a1c      	ldr	r2, [pc, #112]	; (1b1d8 <log_status+0xa0>)
   1b168:	f006 ff2f 	bl	21fca <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   1b16c:	2400      	movs	r4, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1b16e:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1b1dc <log_status+0xa4>
   1b172:	f8df b06c 	ldr.w	fp, [pc, #108]	; 1b1e0 <log_status+0xa8>
	for (i = 0U; i < modules_cnt; i++) {
   1b176:	42ac      	cmp	r4, r5
   1b178:	d103      	bne.n	1b182 <log_status+0x4a>
}
   1b17a:	2000      	movs	r0, #0
   1b17c:	b003      	add	sp, #12
   1b17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1b182:	4622      	mov	r2, r4
   1b184:	2301      	movs	r3, #1
   1b186:	2100      	movs	r1, #0
   1b188:	4638      	mov	r0, r7
   1b18a:	f7ff fb3b 	bl	1a804 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1b18e:	2300      	movs	r3, #0
   1b190:	4622      	mov	r2, r4
   1b192:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1b194:	4680      	mov	r8, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1b196:	4638      	mov	r0, r7
   1b198:	f7ff fb34 	bl	1a804 <log_filter_get>
   1b19c:	4681      	mov	r9, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1b19e:	4621      	mov	r1, r4
   1b1a0:	2000      	movs	r0, #0
   1b1a2:	f7ff fa71 	bl	1a688 <log_source_name_get>
   1b1a6:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   1b1aa:	4603      	mov	r3, r0
   1b1ac:	9201      	str	r2, [sp, #4]
   1b1ae:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
   1b1b2:	2100      	movs	r1, #0
   1b1b4:	9200      	str	r2, [sp, #0]
   1b1b6:	4630      	mov	r0, r6
   1b1b8:	465a      	mov	r2, fp
   1b1ba:	f006 ff06 	bl	21fca <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   1b1be:	3401      	adds	r4, #1
   1b1c0:	e7d9      	b.n	1b176 <log_status+0x3e>
   1b1c2:	bf00      	nop
   1b1c4:	00023fa4 	.word	0x00023fa4
   1b1c8:	00024004 	.word	0x00024004
   1b1cc:	0002706d 	.word	0x0002706d
   1b1d0:	0002707f 	.word	0x0002707f
   1b1d4:	0002708b 	.word	0x0002708b
   1b1d8:	000270a9 	.word	0x000270a9
   1b1dc:	0002629c 	.word	0x0002629c
   1b1e0:	000270e6 	.word	0x000270e6

0001b1e4 <module_name_get>:
	entry->handler = NULL;
   1b1e4:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   1b1e6:	4a06      	ldr	r2, [pc, #24]	; (1b200 <module_name_get+0x1c>)
{
   1b1e8:	b510      	push	{r4, lr}
   1b1ea:	460c      	mov	r4, r1
	entry->handler = NULL;
   1b1ec:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1b1ee:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   1b1f0:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   1b1f2:	4601      	mov	r1, r0
   1b1f4:	4618      	mov	r0, r3
   1b1f6:	f7ff fa47 	bl	1a688 <log_source_name_get>
   1b1fa:	6020      	str	r0, [r4, #0]
}
   1b1fc:	bd10      	pop	{r4, pc}
   1b1fe:	bf00      	nop
   1b200:	0002628c 	.word	0x0002628c

0001b204 <shell_backend_cmd_execute>:
{
   1b204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   1b208:	f852 bc04 	ldr.w	fp, [r2, #-4]
{
   1b20c:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   1b20e:	4658      	mov	r0, fp
{
   1b210:	4691      	mov	r9, r2
   1b212:	468a      	mov	sl, r1
   1b214:	9300      	str	r3, [sp, #0]
	size_t slen = strlen(name);
   1b216:	f007 ff19 	bl	2304c <strlen>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1b21a:	f04f 0800 	mov.w	r8, #0
	size_t slen = strlen(name);
   1b21e:	4602      	mov	r2, r0
	return __log_backends_end - __log_backends_start;
   1b220:	4c13      	ldr	r4, [pc, #76]	; (1b270 <shell_backend_cmd_execute+0x6c>)
   1b222:	4e14      	ldr	r6, [pc, #80]	; (1b274 <shell_backend_cmd_execute+0x70>)
   1b224:	1b36      	subs	r6, r6, r4
   1b226:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1b228:	45b0      	cmp	r8, r6
   1b22a:	db08      	blt.n	1b23e <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   1b22c:	465b      	mov	r3, fp
   1b22e:	2102      	movs	r1, #2
   1b230:	4638      	mov	r0, r7
   1b232:	4a11      	ldr	r2, [pc, #68]	; (1b278 <shell_backend_cmd_execute+0x74>)
   1b234:	f006 fec9 	bl	21fca <shell_fprintf>
		return -ENOEXEC;
   1b238:	f06f 0507 	mvn.w	r5, #7
   1b23c:	e013      	b.n	1b266 <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   1b23e:	68a1      	ldr	r1, [r4, #8]
   1b240:	4658      	mov	r0, fp
   1b242:	9201      	str	r2, [sp, #4]
   1b244:	f007 ff15 	bl	23072 <strncmp>
   1b248:	3410      	adds	r4, #16
   1b24a:	4605      	mov	r5, r0
   1b24c:	b118      	cbz	r0, 1b256 <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1b24e:	9a01      	ldr	r2, [sp, #4]
   1b250:	f108 0801 	add.w	r8, r8, #1
   1b254:	e7e8      	b.n	1b228 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   1b256:	4906      	ldr	r1, [pc, #24]	; (1b270 <shell_backend_cmd_execute+0x6c>)
   1b258:	464b      	mov	r3, r9
   1b25a:	4652      	mov	r2, sl
   1b25c:	4638      	mov	r0, r7
   1b25e:	9c00      	ldr	r4, [sp, #0]
   1b260:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   1b264:	47a0      	blx	r4
}
   1b266:	4628      	mov	r0, r5
   1b268:	b003      	add	sp, #12
   1b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b26e:	bf00      	nop
   1b270:	00024004 	.word	0x00024004
   1b274:	00024014 	.word	0x00024014
   1b278:	000270fa 	.word	0x000270fa

0001b27c <cmd_log_backend_status>:
{
   1b27c:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   1b27e:	4b02      	ldr	r3, [pc, #8]	; (1b288 <cmd_log_backend_status+0xc>)
   1b280:	f7ff ffc0 	bl	1b204 <shell_backend_cmd_execute>
}
   1b284:	2000      	movs	r0, #0
   1b286:	bd08      	pop	{r3, pc}
   1b288:	0001b139 	.word	0x0001b139

0001b28c <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   1b28c:	4b01      	ldr	r3, [pc, #4]	; (1b294 <cmd_log_backend_halt+0x8>)
   1b28e:	f7ff bfb9 	b.w	1b204 <shell_backend_cmd_execute>
   1b292:	bf00      	nop
   1b294:	00021d7b 	.word	0x00021d7b

0001b298 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   1b298:	4b01      	ldr	r3, [pc, #4]	; (1b2a0 <cmd_log_backend_go+0x8>)
   1b29a:	f7ff bfb3 	b.w	1b204 <shell_backend_cmd_execute>
   1b29e:	bf00      	nop
   1b2a0:	00021d83 	.word	0x00021d83

0001b2a4 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   1b2a4:	4b01      	ldr	r3, [pc, #4]	; (1b2ac <cmd_log_backend_enable+0x8>)
   1b2a6:	f7ff bfad 	b.w	1b204 <shell_backend_cmd_execute>
   1b2aa:	bf00      	nop
   1b2ac:	0001b3ad 	.word	0x0001b3ad

0001b2b0 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   1b2b0:	4b01      	ldr	r3, [pc, #4]	; (1b2b8 <cmd_log_backend_disable+0x8>)
   1b2b2:	f7ff bfa7 	b.w	1b204 <shell_backend_cmd_execute>
   1b2b6:	bf00      	nop
   1b2b8:	00021dff 	.word	0x00021dff

0001b2bc <shell_state_precheck>:
{
   1b2bc:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   1b2be:	69c3      	ldr	r3, [r0, #28]
   1b2c0:	68db      	ldr	r3, [r3, #12]
   1b2c2:	791c      	ldrb	r4, [r3, #4]
   1b2c4:	b92c      	cbnz	r4, 1b2d2 <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   1b2c6:	2102      	movs	r1, #2
   1b2c8:	4a03      	ldr	r2, [pc, #12]	; (1b2d8 <shell_state_precheck+0x1c>)
   1b2ca:	f006 fe7e 	bl	21fca <shell_fprintf>
   1b2ce:	4620      	mov	r0, r4
}
   1b2d0:	bd10      	pop	{r4, pc}
	return true;
   1b2d2:	2001      	movs	r0, #1
   1b2d4:	e7fc      	b.n	1b2d0 <shell_state_precheck+0x14>
   1b2d6:	bf00      	nop
   1b2d8:	0002710f 	.word	0x0002710f

0001b2dc <filters_set>:
{
   1b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2e0:	461f      	mov	r7, r3
   1b2e2:	4e2c      	ldr	r6, [pc, #176]	; (1b394 <filters_set+0xb8>)
   1b2e4:	4b2c      	ldr	r3, [pc, #176]	; (1b398 <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
   1b2e6:	1e15      	subs	r5, r2, #0
   1b2e8:	eba6 0603 	sub.w	r6, r6, r3
   1b2ec:	ea4f 06d6 	mov.w	r6, r6, lsr #3
   1b2f0:	bf14      	ite	ne
   1b2f2:	462b      	movne	r3, r5
   1b2f4:	4633      	moveq	r3, r6
{
   1b2f6:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
   1b2f8:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   1b2fa:	684b      	ldr	r3, [r1, #4]
{
   1b2fc:	4680      	mov	r8, r0
	if (!backend->cb->active) {
   1b2fe:	795b      	ldrb	r3, [r3, #5]
{
   1b300:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   1b302:	b91b      	cbnz	r3, 1b30c <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
   1b304:	2104      	movs	r1, #4
   1b306:	4a25      	ldr	r2, [pc, #148]	; (1b39c <filters_set+0xc0>)
   1b308:	f006 fe5f 	bl	21fca <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   1b30c:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
   1b30e:	f8df a098 	ldr.w	sl, [pc, #152]	; 1b3a8 <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
   1b312:	9b02      	ldr	r3, [sp, #8]
   1b314:	429c      	cmp	r4, r3
   1b316:	db02      	blt.n	1b31e <filters_set+0x42>
}
   1b318:	b005      	add	sp, #20
   1b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   1b31e:	b3b5      	cbz	r5, 1b38e <filters_set+0xb2>
	for (i = 0U; i < modules_cnt; i++) {
   1b320:	2300      	movs	r3, #0
		id = all ? i : module_id_get(argv[i]);
   1b322:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   1b326:	429e      	cmp	r6, r3
   1b328:	d107      	bne.n	1b33a <filters_set+0x5e>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   1b32a:	2102      	movs	r1, #2
   1b32c:	4640      	mov	r0, r8
   1b32e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1b332:	4a1b      	ldr	r2, [pc, #108]	; (1b3a0 <filters_set+0xc4>)
   1b334:	f006 fe49 	bl	21fca <shell_fprintf>
   1b338:	e022      	b.n	1b380 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   1b33a:	4619      	mov	r1, r3
   1b33c:	2000      	movs	r0, #0
   1b33e:	9303      	str	r3, [sp, #12]
   1b340:	f7ff f9a2 	bl	1a688 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   1b344:	2240      	movs	r2, #64	; 0x40
   1b346:	4659      	mov	r1, fp
   1b348:	f007 fe93 	bl	23072 <strncmp>
   1b34c:	9b03      	ldr	r3, [sp, #12]
   1b34e:	b9c8      	cbnz	r0, 1b384 <filters_set+0xa8>
			return i;
   1b350:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
   1b352:	2100      	movs	r1, #0
   1b354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b356:	4648      	mov	r0, r9
   1b358:	f7ff f9a4 	bl	1a6a4 <z_impl_log_filter_set>
			if (set_lvl != level) {
   1b35c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b35e:	4683      	mov	fp, r0
   1b360:	4283      	cmp	r3, r0
   1b362:	d00d      	beq.n	1b380 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   1b364:	b985      	cbnz	r5, 1b388 <filters_set+0xac>
					log_source_name_get(
   1b366:	4621      	mov	r1, r4
   1b368:	4628      	mov	r0, r5
   1b36a:	f7ff f98d 	bl	1a688 <log_source_name_get>
   1b36e:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   1b370:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   1b374:	2104      	movs	r1, #4
   1b376:	9200      	str	r2, [sp, #0]
   1b378:	4640      	mov	r0, r8
   1b37a:	4a0a      	ldr	r2, [pc, #40]	; (1b3a4 <filters_set+0xc8>)
   1b37c:	f006 fe25 	bl	21fca <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   1b380:	3401      	adds	r4, #1
   1b382:	e7c6      	b.n	1b312 <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
   1b384:	3301      	adds	r3, #1
   1b386:	e7ce      	b.n	1b326 <filters_set+0x4a>
						CONFIG_LOG_DOMAIN_ID, i) :
   1b388:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   1b38c:	e7f0      	b.n	1b370 <filters_set+0x94>
   1b38e:	4622      	mov	r2, r4
   1b390:	e7df      	b.n	1b352 <filters_set+0x76>
   1b392:	bf00      	nop
   1b394:	00024004 	.word	0x00024004
   1b398:	00023fa4 	.word	0x00023fa4
   1b39c:	00027133 	.word	0x00027133
   1b3a0:	0002715e 	.word	0x0002715e
   1b3a4:	00027148 	.word	0x00027148
   1b3a8:	0002629c 	.word	0x0002629c

0001b3ac <log_enable>:
{
   1b3ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3b0:	4606      	mov	r6, r0
   1b3b2:	4688      	mov	r8, r1
   1b3b4:	4691      	mov	r9, r2
   1b3b6:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1b3b8:	2700      	movs	r7, #0
	severity_level = severity_level_get(argv[1]);
   1b3ba:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1b3be:	f8df a048 	ldr.w	sl, [pc, #72]	; 1b408 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   1b3c2:	2204      	movs	r2, #4
   1b3c4:	4658      	mov	r0, fp
   1b3c6:	f85a 1b04 	ldr.w	r1, [sl], #4
   1b3ca:	f007 fe52 	bl	23072 <strncmp>
   1b3ce:	4604      	mov	r4, r0
   1b3d0:	b170      	cbz	r0, 1b3f0 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1b3d2:	3701      	adds	r7, #1
   1b3d4:	2f05      	cmp	r7, #5
   1b3d6:	d1f4      	bne.n	1b3c2 <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   1b3d8:	2102      	movs	r1, #2
   1b3da:	4630      	mov	r0, r6
   1b3dc:	686b      	ldr	r3, [r5, #4]
   1b3de:	4a09      	ldr	r2, [pc, #36]	; (1b404 <log_enable+0x58>)
   1b3e0:	f006 fdf3 	bl	21fca <shell_fprintf>
   1b3e4:	f06f 0407 	mvn.w	r4, #7
}
   1b3e8:	4620      	mov	r0, r4
   1b3ea:	b003      	add	sp, #12
   1b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   1b3f0:	4641      	mov	r1, r8
   1b3f2:	4630      	mov	r0, r6
   1b3f4:	9700      	str	r7, [sp, #0]
   1b3f6:	f105 0308 	add.w	r3, r5, #8
   1b3fa:	f1a9 0202 	sub.w	r2, r9, #2
   1b3fe:	f7ff ff6d 	bl	1b2dc <filters_set>
	return 0;
   1b402:	e7f1      	b.n	1b3e8 <log_enable+0x3c>
   1b404:	00027178 	.word	0x00027178
   1b408:	0002629c 	.word	0x0002629c

0001b40c <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   1b40c:	b513      	push	{r0, r1, r4, lr}
   1b40e:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   1b410:	f005 f874 	bl	204fc <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   1b414:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1b418:	9301      	str	r3, [sp, #4]
   1b41a:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1b41e:	9300      	str	r3, [sp, #0]
   1b420:	2100      	movs	r1, #0
   1b422:	0e03      	lsrs	r3, r0, #24
   1b424:	4a03      	ldr	r2, [pc, #12]	; (1b434 <cmd_kernel_version+0x28>)
   1b426:	4620      	mov	r0, r4
   1b428:	f006 fdcf 	bl	21fca <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   1b42c:	2000      	movs	r0, #0
   1b42e:	b002      	add	sp, #8
   1b430:	bd10      	pop	{r4, pc}
   1b432:	bf00      	nop
   1b434:	0002731f 	.word	0x0002731f

0001b438 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   1b438:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   1b43c:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   1b43e:	f008 fa47 	bl	238d0 <z_impl_k_uptime_ticks>
   1b442:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1b446:	2500      	movs	r5, #0
   1b448:	fba0 bc06 	umull	fp, ip, r0, r6
   1b44c:	fb06 cc01 	mla	ip, r6, r1, ip
   1b450:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   1b454:	4620      	mov	r0, r4
   1b456:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   1b45a:	4629      	mov	r1, r5
   1b45c:	4a02      	ldr	r2, [pc, #8]	; (1b468 <cmd_kernel_uptime+0x30>)
   1b45e:	f006 fdb4 	bl	21fca <shell_fprintf>
	return 0;
}
   1b462:	4628      	mov	r0, r5
   1b464:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   1b468:	00027338 	.word	0x00027338

0001b46c <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   1b46c:	b510      	push	{r4, lr}
   1b46e:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", z_clock_elapsed());
   1b470:	f002 f98c 	bl	1d78c <z_clock_elapsed>
   1b474:	2100      	movs	r1, #0
   1b476:	4603      	mov	r3, r0
   1b478:	4a07      	ldr	r2, [pc, #28]	; (1b498 <cmd_kernel_threads+0x2c>)
   1b47a:	4620      	mov	r0, r4
   1b47c:	f006 fda5 	bl	21fca <shell_fprintf>
	shell_print(shell, "Threads:");
   1b480:	4620      	mov	r0, r4
   1b482:	4a06      	ldr	r2, [pc, #24]	; (1b49c <cmd_kernel_threads+0x30>)
   1b484:	2100      	movs	r1, #0
   1b486:	f006 fda0 	bl	21fca <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   1b48a:	4621      	mov	r1, r4
   1b48c:	4804      	ldr	r0, [pc, #16]	; (1b4a0 <cmd_kernel_threads+0x34>)
   1b48e:	f004 feb5 	bl	201fc <k_thread_foreach>
	return 0;
}
   1b492:	2000      	movs	r0, #0
   1b494:	bd10      	pop	{r4, pc}
   1b496:	bf00      	nop
   1b498:	00027347 	.word	0x00027347
   1b49c:	00027366 	.word	0x00027366
   1b4a0:	0001b501 	.word	0x0001b501

0001b4a4 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   1b4a4:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1b4a6:	4601      	mov	r1, r0
{
   1b4a8:	4604      	mov	r4, r0
   1b4aa:	b087      	sub	sp, #28
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1b4ac:	4811      	ldr	r0, [pc, #68]	; (1b4f4 <cmd_kernel_stacks+0x50>)
   1b4ae:	f004 fea5 	bl	201fc <k_thread_foreach>
	 */
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
   1b4b2:	2300      	movs	r3, #0
   1b4b4:	4a10      	ldr	r2, [pc, #64]	; (1b4f8 <cmd_kernel_stacks+0x54>)
		for (size_t i = 0; i < size; i++) {
			if (buf[i] == 0xAAU) {
   1b4b6:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b4ba:	29aa      	cmp	r1, #170	; 0xaa
   1b4bc:	d103      	bne.n	1b4c6 <cmd_kernel_stacks+0x22>
				unused++;
   1b4be:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   1b4c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1b4c4:	d1f7      	bne.n	1b4b6 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   1b4c6:	2264      	movs	r2, #100	; 0x64
   1b4c8:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   1b4cc:	434a      	muls	r2, r1
   1b4ce:	0ad2      	lsrs	r2, r2, #11
   1b4d0:	2500      	movs	r5, #0
   1b4d2:	9205      	str	r2, [sp, #20]
   1b4d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b4d8:	4620      	mov	r0, r4
   1b4da:	e9cd 1203 	strd	r1, r2, [sp, #12]
   1b4de:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b4e2:	4629      	mov	r1, r5
   1b4e4:	4b04      	ldr	r3, [pc, #16]	; (1b4f8 <cmd_kernel_stacks+0x54>)
   1b4e6:	4a05      	ldr	r2, [pc, #20]	; (1b4fc <cmd_kernel_stacks+0x58>)
   1b4e8:	9500      	str	r5, [sp, #0]
   1b4ea:	f006 fd6e 	bl	21fca <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   1b4ee:	4628      	mov	r0, r5
   1b4f0:	b007      	add	sp, #28
   1b4f2:	bd30      	pop	{r4, r5, pc}
   1b4f4:	0001b5dd 	.word	0x0001b5dd
   1b4f8:	2002c100 	.word	0x2002c100
   1b4fc:	00027370 	.word	0x00027370

0001b500 <shell_tdata_dump>:
{
   1b500:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b502:	b087      	sub	sp, #28
   1b504:	4604      	mov	r4, r0
   1b506:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
   1b508:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
	tname = k_thread_name_get(thread);
   1b50c:	f008 f97c 	bl	23808 <k_thread_name_get>
   1b510:	4606      	mov	r6, r0
	return z_impl_k_current_get();
   1b512:	f004 fe1d 	bl	20150 <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
   1b516:	4b22      	ldr	r3, [pc, #136]	; (1b5a0 <shell_tdata_dump+0xa0>)
   1b518:	4a22      	ldr	r2, [pc, #136]	; (1b5a4 <shell_tdata_dump+0xa4>)
   1b51a:	2e00      	cmp	r6, #0
   1b51c:	bf08      	it	eq
   1b51e:	461e      	moveq	r6, r3
   1b520:	4b21      	ldr	r3, [pc, #132]	; (1b5a8 <shell_tdata_dump+0xa8>)
   1b522:	2100      	movs	r1, #0
   1b524:	4284      	cmp	r4, r0
   1b526:	bf18      	it	ne
   1b528:	4613      	movne	r3, r2
   1b52a:	e9cd 4600 	strd	r4, r6, [sp]
   1b52e:	4628      	mov	r0, r5
   1b530:	4a1e      	ldr	r2, [pc, #120]	; (1b5ac <shell_tdata_dump+0xac>)
   1b532:	f006 fd4a 	bl	21fca <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
   1b536:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1b53a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1b53e:	f994 300e 	ldrsb.w	r3, [r4, #14]
   1b542:	2100      	movs	r1, #0
   1b544:	4628      	mov	r0, r5
   1b546:	4a1a      	ldr	r2, [pc, #104]	; (1b5b0 <shell_tdata_dump+0xb0>)
   1b548:	9300      	str	r3, [sp, #0]
   1b54a:	7b23      	ldrb	r3, [r4, #12]
   1b54c:	f006 fd3d 	bl	21fca <shell_fprintf>
	shell_print(shell, "\tstate: %s", k_thread_state_str(thread));
   1b550:	4620      	mov	r0, r4
   1b552:	f004 fe9b 	bl	2028c <k_thread_state_str>
   1b556:	2100      	movs	r1, #0
   1b558:	4603      	mov	r3, r0
   1b55a:	4a16      	ldr	r2, [pc, #88]	; (1b5b4 <shell_tdata_dump+0xb4>)
   1b55c:	4628      	mov	r0, r5
   1b55e:	f006 fd34 	bl	21fca <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   1b562:	a905      	add	r1, sp, #20
   1b564:	4620      	mov	r0, r4
   1b566:	f008 f951 	bl	2380c <z_impl_k_thread_stack_space_get>
	if (ret) {
   1b56a:	4601      	mov	r1, r0
   1b56c:	b138      	cbz	r0, 1b57e <shell_tdata_dump+0x7e>
		shell_print(shell,
   1b56e:	4603      	mov	r3, r0
   1b570:	2100      	movs	r1, #0
   1b572:	4628      	mov	r0, r5
   1b574:	4a10      	ldr	r2, [pc, #64]	; (1b5b8 <shell_tdata_dump+0xb8>)
   1b576:	f006 fd28 	bl	21fca <shell_fprintf>
}
   1b57a:	b007      	add	sp, #28
   1b57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
   1b57e:	2364      	movs	r3, #100	; 0x64
   1b580:	9a05      	ldr	r2, [sp, #20]
   1b582:	1ab8      	subs	r0, r7, r2
   1b584:	4343      	muls	r3, r0
   1b586:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   1b58a:	e9cd 2000 	strd	r2, r0, [sp]
   1b58e:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1b592:	4628      	mov	r0, r5
   1b594:	463b      	mov	r3, r7
   1b596:	4a09      	ldr	r2, [pc, #36]	; (1b5bc <shell_tdata_dump+0xbc>)
   1b598:	f006 fd17 	bl	21fca <shell_fprintf>
}
   1b59c:	e7ed      	b.n	1b57a <shell_tdata_dump+0x7a>
   1b59e:	bf00      	nop
   1b5a0:	000273b6 	.word	0x000273b6
   1b5a4:	00026ff8 	.word	0x00026ff8
   1b5a8:	00028409 	.word	0x00028409
   1b5ac:	000273b9 	.word	0x000273b9
   1b5b0:	000273c5 	.word	0x000273c5
   1b5b4:	000273ef 	.word	0x000273ef
   1b5b8:	000273fb 	.word	0x000273fb
   1b5bc:	00027428 	.word	0x00027428

0001b5c0 <cmd_kernel_cycles>:
{
   1b5c0:	b510      	push	{r4, lr}
   1b5c2:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1b5c4:	f002 f8fc 	bl	1d7c0 <z_timer_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   1b5c8:	2100      	movs	r1, #0
   1b5ca:	4603      	mov	r3, r0
   1b5cc:	4a02      	ldr	r2, [pc, #8]	; (1b5d8 <cmd_kernel_cycles+0x18>)
   1b5ce:	4620      	mov	r0, r4
   1b5d0:	f006 fcfb 	bl	21fca <shell_fprintf>
}
   1b5d4:	2000      	movs	r0, #0
   1b5d6:	bd10      	pop	{r4, pc}
   1b5d8:	0002745f 	.word	0x0002745f

0001b5dc <shell_stack_dump>:
{
   1b5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5de:	4605      	mov	r5, r0
   1b5e0:	460e      	mov	r6, r1
	size_t size = thread->stack_info.size;
   1b5e2:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
{
   1b5e6:	b089      	sub	sp, #36	; 0x24
   1b5e8:	a907      	add	r1, sp, #28
   1b5ea:	f008 f90f 	bl	2380c <z_impl_k_thread_stack_space_get>
	if (ret) {
   1b5ee:	4604      	mov	r4, r0
   1b5f0:	b138      	cbz	r0, 1b602 <shell_stack_dump+0x26>
		shell_print(shell,
   1b5f2:	4603      	mov	r3, r0
   1b5f4:	2100      	movs	r1, #0
   1b5f6:	4630      	mov	r0, r6
   1b5f8:	4a0f      	ldr	r2, [pc, #60]	; (1b638 <shell_stack_dump+0x5c>)
   1b5fa:	f006 fce6 	bl	21fca <shell_fprintf>
}
   1b5fe:	b009      	add	sp, #36	; 0x24
   1b600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   1b602:	4628      	mov	r0, r5
   1b604:	f008 f900 	bl	23808 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
   1b608:	2364      	movs	r3, #100	; 0x64
   1b60a:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   1b60c:	f8df c030 	ldr.w	ip, [pc, #48]	; 1b640 <shell_stack_dump+0x64>
	pcnt = ((size - unused) * 100U) / size;
   1b610:	1ab9      	subs	r1, r7, r2
   1b612:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   1b614:	2800      	cmp	r0, #0
   1b616:	bf08      	it	eq
   1b618:	4660      	moveq	r0, ip
	pcnt = ((size - unused) * 100U) / size;
   1b61a:	fbb3 f3f7 	udiv	r3, r3, r7
	shell_print((const struct shell *)user_data,
   1b61e:	e9cd 2102 	strd	r2, r1, [sp, #8]
   1b622:	e9cd 7304 	strd	r7, r3, [sp, #16]
   1b626:	e9cd 0700 	strd	r0, r7, [sp]
   1b62a:	462b      	mov	r3, r5
   1b62c:	4621      	mov	r1, r4
   1b62e:	4630      	mov	r0, r6
   1b630:	4a02      	ldr	r2, [pc, #8]	; (1b63c <shell_stack_dump+0x60>)
   1b632:	f006 fcca 	bl	21fca <shell_fprintf>
   1b636:	e7e2      	b.n	1b5fe <shell_stack_dump+0x22>
   1b638:	000273fb 	.word	0x000273fb
   1b63c:	00027475 	.word	0x00027475
   1b640:	000273b6 	.word	0x000273b6

0001b644 <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
   1b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   1b648:	2100      	movs	r1, #0
   1b64a:	4a0f      	ldr	r2, [pc, #60]	; (1b688 <cmd_device_list+0x44>)
{
   1b64c:	4605      	mov	r5, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   1b64e:	f006 fcbc 	bl	21fca <shell_fprintf>

	for (dev = __device_start; dev != __device_end; dev++) {
   1b652:	4c0e      	ldr	r4, [pc, #56]	; (1b68c <cmd_device_list+0x48>)
   1b654:	4e0e      	ldr	r6, [pc, #56]	; (1b690 <cmd_device_list+0x4c>)
		if (!z_device_ready(dev)) {
			continue;
		}

		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
   1b656:	4f0f      	ldr	r7, [pc, #60]	; (1b694 <cmd_device_list+0x50>)
		if (!err) {
			shell_fprintf(shell, SHELL_NORMAL, " (%s)",
				      device_pm_state_str(state));
		}
#endif /* CONFIG_DEVICE_POWER_MANAGEMENT */
		shell_fprintf(shell, SHELL_NORMAL, "\n");
   1b658:	f8df 803c 	ldr.w	r8, [pc, #60]	; 1b698 <cmd_device_list+0x54>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b65c:	42b4      	cmp	r4, r6
   1b65e:	d102      	bne.n	1b666 <cmd_device_list+0x22>
	}

	return 0;
}
   1b660:	2000      	movs	r0, #0
   1b662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!z_device_ready(dev)) {
   1b666:	4620      	mov	r0, r4
   1b668:	f003 fe2a 	bl	1f2c0 <z_device_ready>
   1b66c:	b150      	cbz	r0, 1b684 <cmd_device_list+0x40>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
   1b66e:	463a      	mov	r2, r7
   1b670:	2100      	movs	r1, #0
   1b672:	4628      	mov	r0, r5
   1b674:	6823      	ldr	r3, [r4, #0]
   1b676:	f006 fca8 	bl	21fca <shell_fprintf>
		shell_fprintf(shell, SHELL_NORMAL, "\n");
   1b67a:	4642      	mov	r2, r8
   1b67c:	2100      	movs	r1, #0
   1b67e:	4628      	mov	r0, r5
   1b680:	f006 fca3 	bl	21fca <shell_fprintf>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b684:	3410      	adds	r4, #16
   1b686:	e7e9      	b.n	1b65c <cmd_device_list+0x18>
   1b688:	0002757b 	.word	0x0002757b
   1b68c:	200100e0 	.word	0x200100e0
   1b690:	20010130 	.word	0x20010130
   1b694:	00027585 	.word	0x00027585
   1b698:	0002745d 	.word	0x0002745d

0001b69c <device_get_config_level>:
{
   1b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b6a0:	4606      	mov	r6, r0
	bool devices = false;
   1b6a2:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1b6a4:	4b0d      	ldr	r3, [pc, #52]	; (1b6dc <device_get_config_level+0x40>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
   1b6a6:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1b6e0 <device_get_config_level+0x44>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1b6aa:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   1b6ae:	3101      	adds	r1, #1
   1b6b0:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
   1b6b4:	45a0      	cmp	r8, r4
   1b6b6:	d802      	bhi.n	1b6be <device_get_config_level+0x22>
}
   1b6b8:	4638      	mov	r0, r7
   1b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (z_device_ready(dev)) {
   1b6be:	4620      	mov	r0, r4
   1b6c0:	f003 fdfe 	bl	1f2c0 <z_device_ready>
   1b6c4:	4605      	mov	r5, r0
   1b6c6:	b130      	cbz	r0, 1b6d6 <device_get_config_level+0x3a>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
   1b6c8:	464a      	mov	r2, r9
   1b6ca:	2100      	movs	r1, #0
   1b6cc:	4630      	mov	r0, r6
   1b6ce:	6823      	ldr	r3, [r4, #0]
   1b6d0:	f006 fc7b 	bl	21fca <shell_fprintf>
			devices = true;
   1b6d4:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   1b6d6:	3410      	adds	r4, #16
   1b6d8:	e7ec      	b.n	1b6b4 <device_get_config_level+0x18>
   1b6da:	bf00      	nop
   1b6dc:	00026500 	.word	0x00026500
   1b6e0:	0002758a 	.word	0x0002758a

0001b6e4 <cmd_device_levels>:
{
   1b6e4:	b510      	push	{r4, lr}
   1b6e6:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   1b6e8:	2100      	movs	r1, #0
   1b6ea:	4a1e      	ldr	r2, [pc, #120]	; (1b764 <cmd_device_levels+0x80>)
   1b6ec:	f006 fc6d 	bl	21fca <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   1b6f0:	2102      	movs	r1, #2
   1b6f2:	4620      	mov	r0, r4
   1b6f4:	f7ff ffd2 	bl	1b69c <device_get_config_level>
	if (ret == false) {
   1b6f8:	4601      	mov	r1, r0
   1b6fa:	b918      	cbnz	r0, 1b704 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1b6fc:	4620      	mov	r0, r4
   1b6fe:	4a1a      	ldr	r2, [pc, #104]	; (1b768 <cmd_device_levels+0x84>)
   1b700:	f006 fc63 	bl	21fca <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   1b704:	2100      	movs	r1, #0
   1b706:	4620      	mov	r0, r4
   1b708:	4a18      	ldr	r2, [pc, #96]	; (1b76c <cmd_device_levels+0x88>)
   1b70a:	f006 fc5e 	bl	21fca <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   1b70e:	2103      	movs	r1, #3
   1b710:	4620      	mov	r0, r4
   1b712:	f7ff ffc3 	bl	1b69c <device_get_config_level>
	if (ret == false) {
   1b716:	4601      	mov	r1, r0
   1b718:	b918      	cbnz	r0, 1b722 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1b71a:	4620      	mov	r0, r4
   1b71c:	4a12      	ldr	r2, [pc, #72]	; (1b768 <cmd_device_levels+0x84>)
   1b71e:	f006 fc54 	bl	21fca <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   1b722:	2100      	movs	r1, #0
   1b724:	4620      	mov	r0, r4
   1b726:	4a12      	ldr	r2, [pc, #72]	; (1b770 <cmd_device_levels+0x8c>)
   1b728:	f006 fc4f 	bl	21fca <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b72c:	2100      	movs	r1, #0
   1b72e:	4620      	mov	r0, r4
   1b730:	f7ff ffb4 	bl	1b69c <device_get_config_level>
	if (ret == false) {
   1b734:	4601      	mov	r1, r0
   1b736:	b918      	cbnz	r0, 1b740 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1b738:	4620      	mov	r0, r4
   1b73a:	4a0b      	ldr	r2, [pc, #44]	; (1b768 <cmd_device_levels+0x84>)
   1b73c:	f006 fc45 	bl	21fca <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   1b740:	2100      	movs	r1, #0
   1b742:	4620      	mov	r0, r4
   1b744:	4a0b      	ldr	r2, [pc, #44]	; (1b774 <cmd_device_levels+0x90>)
   1b746:	f006 fc40 	bl	21fca <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b74a:	2101      	movs	r1, #1
   1b74c:	4620      	mov	r0, r4
   1b74e:	f7ff ffa5 	bl	1b69c <device_get_config_level>
	if (ret == false) {
   1b752:	4601      	mov	r1, r0
   1b754:	b918      	cbnz	r0, 1b75e <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   1b756:	4620      	mov	r0, r4
   1b758:	4a03      	ldr	r2, [pc, #12]	; (1b768 <cmd_device_levels+0x84>)
   1b75a:	f006 fc36 	bl	21fca <shell_fprintf>
}
   1b75e:	2000      	movs	r0, #0
   1b760:	bd10      	pop	{r4, pc}
   1b762:	bf00      	nop
   1b764:	00027590 	.word	0x00027590
   1b768:	0002759e 	.word	0x0002759e
   1b76c:	000275a6 	.word	0x000275a6
   1b770:	000275b4 	.word	0x000275b4
   1b774:	000275c3 	.word	0x000275c3

0001b778 <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   1b778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   1b77a:	680a      	ldr	r2, [r1, #0]
   1b77c:	694b      	ldr	r3, [r1, #20]
   1b77e:	9204      	str	r2, [sp, #16]
   1b780:	684a      	ldr	r2, [r1, #4]
   1b782:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   1b786:	9203      	str	r2, [sp, #12]
   1b788:	688a      	ldr	r2, [r1, #8]
   1b78a:	9202      	str	r2, [sp, #8]
   1b78c:	68ca      	ldr	r2, [r1, #12]
   1b78e:	9201      	str	r2, [sp, #4]
   1b790:	690a      	ldr	r2, [r1, #16]
   1b792:	2100      	movs	r1, #0
   1b794:	3201      	adds	r2, #1
   1b796:	9200      	str	r2, [sp, #0]
   1b798:	4a02      	ldr	r2, [pc, #8]	; (1b7a4 <date_print+0x2c>)
   1b79a:	f006 fc16 	bl	21fca <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   1b79e:	b007      	add	sp, #28
   1b7a0:	f85d fb04 	ldr.w	pc, [sp], #4
   1b7a4:	00027628 	.word	0x00027628

0001b7a8 <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   1b7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   1b7aa:	7813      	ldrb	r3, [r2, #0]
{
   1b7ac:	4606      	mov	r6, r0
	if (*time_str == ':') {
   1b7ae:	2b3a      	cmp	r3, #58	; 0x3a
{
   1b7b0:	460f      	mov	r7, r1
   1b7b2:	4615      	mov	r5, r2
	if (*time_str == ':') {
   1b7b4:	d116      	bne.n	1b7e4 <get_h_m_s+0x3c>
		time_str++;
   1b7b6:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   1b7b8:	7823      	ldrb	r3, [r4, #0]
   1b7ba:	2b3a      	cmp	r3, #58	; 0x3a
   1b7bc:	d12e      	bne.n	1b81c <get_h_m_s+0x74>
		time_str++;
   1b7be:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   1b7c0:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1b7c2:	220a      	movs	r2, #10
   1b7c4:	4620      	mov	r0, r4
   1b7c6:	a901      	add	r1, sp, #4
	endptr = NULL;
   1b7c8:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1b7ca:	f007 fb7e 	bl	22eca <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   1b7ce:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1b7d0:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   1b7d2:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   1b7d4:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   1b7d6:	d010      	beq.n	1b7fa <get_h_m_s+0x52>
   1b7d8:	7810      	ldrb	r0, [r2, #0]
   1b7da:	b970      	cbnz	r0, 1b7fa <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   1b7dc:	2b3c      	cmp	r3, #60	; 0x3c
   1b7de:	d90e      	bls.n	1b7fe <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   1b7e0:	4a18      	ldr	r2, [pc, #96]	; (1b844 <get_h_m_s+0x9c>)
   1b7e2:	e014      	b.n	1b80e <get_h_m_s+0x66>
		endptr = NULL;
   1b7e4:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1b7e6:	220a      	movs	r2, #10
   1b7e8:	4628      	mov	r0, r5
   1b7ea:	a901      	add	r1, sp, #4
		endptr = NULL;
   1b7ec:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1b7ee:	f007 fb6c 	bl	22eca <strtol>
		if (endptr == time_str) {
   1b7f2:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   1b7f4:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   1b7f6:	42ac      	cmp	r4, r5
   1b7f8:	d103      	bne.n	1b802 <get_h_m_s+0x5a>
		return -EINVAL;
   1b7fa:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   1b7fe:	b003      	add	sp, #12
   1b800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   1b802:	7823      	ldrb	r3, [r4, #0]
   1b804:	2b3a      	cmp	r3, #58	; 0x3a
   1b806:	d1f8      	bne.n	1b7fa <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   1b808:	2817      	cmp	r0, #23
   1b80a:	d905      	bls.n	1b818 <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   1b80c:	4a0e      	ldr	r2, [pc, #56]	; (1b848 <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   1b80e:	2102      	movs	r1, #2
   1b810:	4630      	mov	r0, r6
   1b812:	f006 fbda 	bl	21fca <shell_fprintf>
   1b816:	e7f0      	b.n	1b7fa <get_h_m_s+0x52>
			time_str = endptr + 1;
   1b818:	3401      	adds	r4, #1
   1b81a:	e7cd      	b.n	1b7b8 <get_h_m_s+0x10>
		endptr = NULL;
   1b81c:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   1b81e:	220a      	movs	r2, #10
   1b820:	4620      	mov	r0, r4
   1b822:	a901      	add	r1, sp, #4
		endptr = NULL;
   1b824:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   1b826:	f007 fb50 	bl	22eca <strtol>
		if (endptr == time_str) {
   1b82a:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   1b82c:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   1b82e:	42a2      	cmp	r2, r4
   1b830:	d0e3      	beq.n	1b7fa <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   1b832:	7813      	ldrb	r3, [r2, #0]
   1b834:	2b3a      	cmp	r3, #58	; 0x3a
   1b836:	d1e0      	bne.n	1b7fa <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   1b838:	283b      	cmp	r0, #59	; 0x3b
   1b83a:	d901      	bls.n	1b840 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   1b83c:	4a03      	ldr	r2, [pc, #12]	; (1b84c <get_h_m_s+0xa4>)
   1b83e:	e7e6      	b.n	1b80e <get_h_m_s+0x66>
			time_str = endptr + 1;
   1b840:	1c54      	adds	r4, r2, #1
   1b842:	e7bd      	b.n	1b7c0 <get_h_m_s+0x18>
   1b844:	00027667 	.word	0x00027667
   1b848:	00027649 	.word	0x00027649
   1b84c:	00027657 	.word	0x00027657

0001b850 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   1b850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b854:	4604      	mov	r4, r0
   1b856:	460d      	mov	r5, r1
   1b858:	4617      	mov	r7, r2
   1b85a:	b091      	sub	sp, #68	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   1b85c:	2001      	movs	r0, #1
   1b85e:	a902      	add	r1, sp, #8
   1b860:	f002 ff84 	bl	1e76c <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   1b864:	a907      	add	r1, sp, #28
   1b866:	a802      	add	r0, sp, #8
   1b868:	f002 fe9e 	bl	1e5a8 <gmtime_r>

	if (argc == 3) {
   1b86c:	2d03      	cmp	r5, #3
   1b86e:	d160      	bne.n	1b932 <cmd_date_set+0xe2>
	endptr = NULL;
   1b870:	f04f 0900 	mov.w	r9, #0
		ret = get_y_m_d(shell, &tm, argv[1]);
   1b874:	687d      	ldr	r5, [r7, #4]
	year = strtol(date_str, &endptr, 10);
   1b876:	220a      	movs	r2, #10
   1b878:	4628      	mov	r0, r5
   1b87a:	a901      	add	r1, sp, #4
	endptr = NULL;
   1b87c:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   1b880:	f007 fb23 	bl	22eca <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   1b884:	9e01      	ldr	r6, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   1b886:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   1b888:	42b5      	cmp	r5, r6
   1b88a:	d018      	beq.n	1b8be <cmd_date_set+0x6e>
   1b88c:	7832      	ldrb	r2, [r6, #0]
   1b88e:	2a2d      	cmp	r2, #45	; 0x2d
   1b890:	d115      	bne.n	1b8be <cmd_date_set+0x6e>
	date_str = endptr + 1;
   1b892:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   1b894:	220a      	movs	r2, #10
   1b896:	4630      	mov	r0, r6
   1b898:	a901      	add	r1, sp, #4
	endptr = NULL;
   1b89a:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   1b89e:	f007 fb14 	bl	22eca <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   1b8a2:	9b01      	ldr	r3, [sp, #4]
   1b8a4:	429e      	cmp	r6, r3
   1b8a6:	d00a      	beq.n	1b8be <cmd_date_set+0x6e>
   1b8a8:	781a      	ldrb	r2, [r3, #0]
   1b8aa:	2a2d      	cmp	r2, #45	; 0x2d
   1b8ac:	d107      	bne.n	1b8be <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   1b8ae:	1e45      	subs	r5, r0, #1
   1b8b0:	2d0b      	cmp	r5, #11
   1b8b2:	d90d      	bls.n	1b8d0 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   1b8b4:	4a2b      	ldr	r2, [pc, #172]	; (1b964 <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   1b8b6:	2102      	movs	r1, #2
   1b8b8:	4620      	mov	r0, r4
   1b8ba:	f006 fb86 	bl	21fca <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   1b8be:	4620      	mov	r0, r4
   1b8c0:	f006 fb90 	bl	21fe4 <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   1b8c4:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   1b8c8:	4628      	mov	r0, r5
   1b8ca:	b011      	add	sp, #68	; 0x44
   1b8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   1b8d0:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   1b8d2:	220a      	movs	r2, #10
   1b8d4:	4630      	mov	r0, r6
   1b8d6:	a901      	add	r1, sp, #4
	endptr = NULL;
   1b8d8:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   1b8dc:	f007 faf5 	bl	22eca <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   1b8e0:	9b01      	ldr	r3, [sp, #4]
   1b8e2:	429e      	cmp	r6, r3
   1b8e4:	d0eb      	beq.n	1b8be <cmd_date_set+0x6e>
   1b8e6:	781b      	ldrb	r3, [r3, #0]
   1b8e8:	2b00      	cmp	r3, #0
   1b8ea:	d1e8      	bne.n	1b8be <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   1b8ec:	1e43      	subs	r3, r0, #1
   1b8ee:	2b1e      	cmp	r3, #30
   1b8f0:	d901      	bls.n	1b8f6 <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   1b8f2:	4a1d      	ldr	r2, [pc, #116]	; (1b968 <cmd_date_set+0x118>)
   1b8f4:	e7df      	b.n	1b8b6 <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   1b8f6:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   1b8fa:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   1b8fe:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   1b900:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   1b902:	4620      	mov	r0, r4
   1b904:	a907      	add	r1, sp, #28
   1b906:	f7ff ff4f 	bl	1b7a8 <get_h_m_s>
		if (ret != 0) {
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d1d7      	bne.n	1b8be <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   1b90e:	a807      	add	r0, sp, #28
   1b910:	f005 fca2 	bl	21258 <timeutil_timegm>
   1b914:	460b      	mov	r3, r1
   1b916:	4602      	mov	r2, r0
   1b918:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   1b91c:	3301      	adds	r3, #1
   1b91e:	bf08      	it	eq
   1b920:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1b924:	d109      	bne.n	1b93a <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   1b926:	2102      	movs	r1, #2
   1b928:	4620      	mov	r0, r4
   1b92a:	4a10      	ldr	r2, [pc, #64]	; (1b96c <cmd_date_set+0x11c>)
   1b92c:	f006 fb4d 	bl	21fca <shell_fprintf>
		return -EINVAL;
   1b930:	e7c8      	b.n	1b8c4 <cmd_date_set+0x74>
	} else if (argc == 2) {
   1b932:	2d02      	cmp	r5, #2
   1b934:	d1c3      	bne.n	1b8be <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   1b936:	687a      	ldr	r2, [r7, #4]
   1b938:	e7e3      	b.n	1b902 <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   1b93a:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   1b93c:	2001      	movs	r0, #1
   1b93e:	a902      	add	r1, sp, #8
	tp.tv_nsec = 0;
   1b940:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   1b942:	f7fd fc15 	bl	19170 <clock_settime>
	if (ret != 0) {
   1b946:	4605      	mov	r5, r0
   1b948:	b130      	cbz	r0, 1b958 <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   1b94a:	4603      	mov	r3, r0
   1b94c:	2102      	movs	r1, #2
   1b94e:	4620      	mov	r0, r4
   1b950:	4a07      	ldr	r2, [pc, #28]	; (1b970 <cmd_date_set+0x120>)
   1b952:	f006 fb3a 	bl	21fca <shell_fprintf>
   1b956:	e7b5      	b.n	1b8c4 <cmd_date_set+0x74>
	date_print(shell, &tm);
   1b958:	4620      	mov	r0, r4
   1b95a:	a907      	add	r1, sp, #28
   1b95c:	f7ff ff0c 	bl	1b778 <date_print>
	return 0;
   1b960:	e7b2      	b.n	1b8c8 <cmd_date_set+0x78>
   1b962:	bf00      	nop
   1b964:	00027677 	.word	0x00027677
   1b968:	00027686 	.word	0x00027686
   1b96c:	00027693 	.word	0x00027693
   1b970:	000276bc 	.word	0x000276bc

0001b974 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   1b974:	b510      	push	{r4, lr}
   1b976:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   1b978:	6881      	ldr	r1, [r0, #8]
   1b97a:	3108      	adds	r1, #8
   1b97c:	f001 f9e2 	bl	1cd44 <shell_help_cmd_print>
	shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1b980:	68a1      	ldr	r1, [r4, #8]
   1b982:	4620      	mov	r0, r4
				"Subcommands:\n");
}
   1b984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1b988:	4a01      	ldr	r2, [pc, #4]	; (1b990 <shell_internal_help_print+0x1c>)
   1b98a:	3108      	adds	r1, #8
   1b98c:	f001 b97e 	b.w	1cc8c <shell_help_subcmd_print>
   1b990:	00027701 	.word	0x00027701

0001b994 <state_set.part.0>:
	}

	return 0;
}

static inline void state_set(const struct shell *shell, enum shell_state state)
   1b994:	b538      	push	{r3, r4, r5, lr}
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1b996:	2500      	movs	r5, #0
{
	shell->ctx->state = state;

	if (state == SHELL_STATE_ACTIVE) {
		cmd_buffer_clear(shell);
   1b998:	6883      	ldr	r3, [r0, #8]
static inline void state_set(const struct shell *shell, enum shell_state state)
   1b99a:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1b99c:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   1b9a0:	869d      	strh	r5, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   1b9a2:	865d      	strh	r5, [r3, #50]	; 0x32
		if (flag_print_noinit_get(shell)) {
   1b9a4:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
   1b9a6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1b9aa:	03db      	lsls	r3, r3, #15
   1b9ac:	d50b      	bpl.n	1b9c6 <state_set.part.0+0x32>
			shell_internal_fprintf(shell, SHELL_WARNING, "%s",
   1b9ae:	4b08      	ldr	r3, [pc, #32]	; (1b9d0 <state_set.part.0+0x3c>)
   1b9b0:	4a08      	ldr	r2, [pc, #32]	; (1b9d4 <state_set.part.0+0x40>)
   1b9b2:	2104      	movs	r1, #4
   1b9b4:	f006 fe5f 	bl	22676 <shell_internal_fprintf>
					       SHELL_MSG_BACKEND_NOT_ACTIVE);
			flag_print_noinit_set(shell, false);
   1b9b8:	68a3      	ldr	r3, [r4, #8]
}

static inline void flag_print_noinit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.print_noinit = val ? 1 : 0;
   1b9ba:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1b9be:	f365 4210 	bfi	r2, r5, #16, #1
   1b9c2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		}
		shell_print_prompt_and_cmd(shell);
   1b9c6:	4620      	mov	r0, r4
	}
}
   1b9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		shell_print_prompt_and_cmd(shell);
   1b9cc:	f001 b816 	b.w	1c9fc <shell_print_prompt_and_cmd>
   1b9d0:	0002770f 	.word	0x0002770f
   1b9d4:	00027587 	.word	0x00027587

0001b9d8 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
   1b9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
   1b9da:	6883      	ldr	r3, [r0, #8]
{
   1b9dc:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.history_exit == 1;
   1b9de:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1b9e2:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
   1b9e4:	0652      	lsls	r2, r2, #25
   1b9e6:	d508      	bpl.n	1b9fa <history_handle+0x22>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1b9e8:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1b9ec:	68c0      	ldr	r0, [r0, #12]
   1b9ee:	f36f 1286 	bfc	r2, #6, #1
   1b9f2:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
   1b9f6:	f006 ff65 	bl	228c4 <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
   1b9fa:	68e3      	ldr	r3, [r4, #12]
   1b9fc:	68db      	ldr	r3, [r3, #12]
   1b9fe:	b963      	cbnz	r3, 1ba1a <history_handle+0x42>
		if (up) {
   1ba00:	b39d      	cbz	r5, 1ba6a <history_handle+0x92>
			uint16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
   1ba02:	68a0      	ldr	r0, [r4, #8]
   1ba04:	3038      	adds	r0, #56	; 0x38
   1ba06:	f006 fa65 	bl	21ed4 <shell_strlen>

			if (cmd_len) {
   1ba0a:	68a3      	ldr	r3, [r4, #8]
   1ba0c:	b378      	cbz	r0, 1ba6e <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
   1ba0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
   1ba12:	f503 709c 	add.w	r0, r3, #312	; 0x138
   1ba16:	f007 faee 	bl	22ff6 <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
   1ba1a:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
   1ba1c:	4629      	mov	r1, r5
   1ba1e:	68e0      	ldr	r0, [r4, #12]
   1ba20:	f10d 0306 	add.w	r3, sp, #6
   1ba24:	3238      	adds	r2, #56	; 0x38
   1ba26:	f006 ff50 	bl	228ca <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
   1ba2a:	b958      	cbnz	r0, 1ba44 <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   1ba2c:	68a0      	ldr	r0, [r4, #8]
   1ba2e:	f500 719c 	add.w	r1, r0, #312	; 0x138
   1ba32:	3038      	adds	r0, #56	; 0x38
   1ba34:	f007 fadf 	bl	22ff6 <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
   1ba38:	68a0      	ldr	r0, [r4, #8]
   1ba3a:	3038      	adds	r0, #56	; 0x38
   1ba3c:	f006 fa4a 	bl	21ed4 <shell_strlen>
   1ba40:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
   1ba44:	4620      	mov	r0, r4
   1ba46:	f006 fd75 	bl	22534 <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   1ba4a:	4a0a      	ldr	r2, [pc, #40]	; (1ba74 <history_handle+0x9c>)
   1ba4c:	490a      	ldr	r1, [pc, #40]	; (1ba78 <history_handle+0xa0>)
   1ba4e:	6960      	ldr	r0, [r4, #20]
   1ba50:	f006 fa46 	bl	21ee0 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
   1ba54:	4620      	mov	r0, r4
   1ba56:	f000 fecf 	bl	1c7f8 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   1ba5a:	68a3      	ldr	r3, [r4, #8]
   1ba5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	shell_op_cond_next_line(shell);
   1ba60:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
   1ba62:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
   1ba64:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
   1ba66:	f000 fe89 	bl	1c77c <shell_op_cond_next_line>
}
   1ba6a:	b003      	add	sp, #12
   1ba6c:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   1ba6e:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
   1ba72:	e7d2      	b.n	1ba1a <history_handle+0x42>
   1ba74:	0002782e 	.word	0x0002782e
   1ba78:	00027587 	.word	0x00027587

0001ba7c <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
   1ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
   1ba80:	2200      	movs	r2, #0
{
   1ba82:	4604      	mov	r4, r0
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
   1ba84:	6883      	ldr	r3, [r0, #8]
{
   1ba86:	b09f      	sub	sp, #124	; 0x7c
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
   1ba88:	69de      	ldr	r6, [r3, #28]
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
   1ba8a:	3338      	adds	r3, #56	; 0x38
	size_t argc = 0, args_left = SIZE_MAX;
   1ba8c:	e9cd 2205 	strd	r2, r2, [sp, #20]
	char *cmd_buf = shell->ctx->cmd_buff;
   1ba90:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	shell_op_cursor_end_move(shell);
   1ba92:	f006 fd55 	bl	22540 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
   1ba96:	4620      	mov	r0, r4
   1ba98:	f006 fcda 	bl	22450 <shell_cursor_in_empty_line>
   1ba9c:	b918      	cbnz	r0, 1baa6 <execute+0x2a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1ba9e:	49a4      	ldr	r1, [pc, #656]	; (1bd30 <execute+0x2b4>)
   1baa0:	6960      	ldr	r0, [r4, #20]
   1baa2:	f006 fa1d 	bl	21ee0 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
   1baa6:	68a0      	ldr	r0, [r4, #8]
   1baa8:	2214      	movs	r2, #20
   1baaa:	2100      	movs	r1, #0
   1baac:	3008      	adds	r0, #8
   1baae:	f007 fb41 	bl	23134 <memset>

	shell_cmd_trim(shell);
   1bab2:	4620      	mov	r0, r4
   1bab4:	f006 fc79 	bl	223aa <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
   1bab8:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
   1baba:	68e0      	ldr	r0, [r4, #12]
   1babc:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   1babe:	3138      	adds	r1, #56	; 0x38
   1bac0:	f006 ff3a 	bl	22938 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
   1bac4:	4620      	mov	r0, r4
   1bac6:	f007 f8f7 	bl	22cb8 <shell_wildcard_prepare>
	}

	/* Parent present means we are in select mode. */
	if (parent != NULL) {
   1baca:	2e00      	cmp	r6, #0
   1bacc:	f000 80f6 	beq.w	1bcbc <execute+0x240>
		argv[0] = parent->syntax;
   1bad0:	6833      	ldr	r3, [r6, #0]
   1bad2:	9311      	str	r3, [sp, #68]	; 0x44
		argv[1] = cmd_buf;
   1bad4:	9b03      	ldr	r3, [sp, #12]
   1bad6:	9312      	str	r3, [sp, #72]	; 0x48
	if (entry->handler) {
   1bad8:	68f3      	ldr	r3, [r6, #12]
   1bada:	b35b      	cbz	r3, 1bb34 <execute+0xb8>
		*active_cmd = *entry;
   1badc:	4637      	mov	r7, r6
   1bade:	68a5      	ldr	r5, [r4, #8]
   1bae0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1bae2:	3508      	adds	r5, #8
   1bae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bae6:	683b      	ldr	r3, [r7, #0]
   1bae8:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1baec:	602b      	str	r3, [r5, #0]
		if ((entry->subcmd == NULL)
   1baee:	68b3      	ldr	r3, [r6, #8]
   1baf0:	bb23      	cbnz	r3, 1bb3c <execute+0xc0>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   1baf2:	7c73      	ldrb	r3, [r6, #17]
   1baf4:	2bfe      	cmp	r3, #254	; 0xfe
   1baf6:	d121      	bne.n	1bb3c <execute+0xc0>
			*args_left = entry->args.mandatory - 1;
   1baf8:	7c37      	ldrb	r7, [r6, #16]
			*lvl = *lvl + 1;
   1bafa:	f108 0301 	add.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
   1bafe:	3f01      	subs	r7, #1
			*lvl = *lvl + 1;
   1bb00:	9305      	str	r3, [sp, #20]
	if (entry->help) {
   1bb02:	f8d6 e004 	ldr.w	lr, [r6, #4]
   1bb06:	f1be 0f00 	cmp.w	lr, #0
   1bb0a:	d008      	beq.n	1bb1e <execute+0xa2>
		*help_entry = *entry;
   1bb0c:	46b4      	mov	ip, r6
   1bb0e:	46f2      	mov	sl, lr
   1bb10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bb14:	ad0c      	add	r5, sp, #48	; 0x30
   1bb16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bb18:	f8dc 3000 	ldr.w	r3, [ip]
   1bb1c:	602b      	str	r3, [r5, #0]
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
   1bb1e:	9b05      	ldr	r3, [sp, #20]
		argvp = &argv[1];
   1bb20:	f10d 0948 	add.w	r9, sp, #72	; 0x48
		cmd_lvl++;
   1bb24:	3301      	adds	r3, #1
   1bb26:	9305      	str	r3, [sp, #20]
			/* Wildcard character was not found function can process
			 * argument.
			 */
			if (status != SHELL_WILDCARD_NOT_FOUND) {
				++cmd_lvl;
				wildcard_found = true;
   1bb28:	f04f 0b00 	mov.w	fp, #0
   1bb2c:	465d      	mov	r5, fp
   1bb2e:	f8cd b008 	str.w	fp, [sp, #8]
   1bb32:	e04c      	b.n	1bbce <execute+0x152>
	size_t argc = 0, args_left = SIZE_MAX;
   1bb34:	f04f 37ff 	mov.w	r7, #4294967295
	size_t cmd_with_handler_lvl = 0;
   1bb38:	4698      	mov	r8, r3
   1bb3a:	e7e2      	b.n	1bb02 <execute+0x86>
	size_t argc = 0, args_left = SIZE_MAX;
   1bb3c:	f04f 37ff 	mov.w	r7, #4294967295
   1bb40:	e7df      	b.n	1bb02 <execute+0x86>
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
   1bb42:	2302      	movs	r3, #2
   1bb44:	9a03      	ldr	r2, [sp, #12]
   1bb46:	4649      	mov	r1, r9
   1bb48:	a806      	add	r0, sp, #24
   1bb4a:	f006 fac8 	bl	220de <shell_make_argv>
		cmd_buf = (char *)argvp[1];
   1bb4e:	f8d9 2004 	ldr.w	r2, [r9, #4]
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
   1bb52:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
   1bb54:	9203      	str	r2, [sp, #12]
		if (argc == 0) {
   1bb56:	9a06      	ldr	r2, [sp, #24]
   1bb58:	b92a      	cbnz	r2, 1bb66 <execute+0xea>
			return -ENOEXEC;
   1bb5a:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
   1bb5e:	4628      	mov	r0, r5
   1bb60:	b01f      	add	sp, #124	; 0x7c
   1bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   1bb66:	2a01      	cmp	r2, #1
   1bb68:	d106      	bne.n	1bb78 <execute+0xfc>
   1bb6a:	b128      	cbz	r0, 1bb78 <execute+0xfc>
			shell_internal_fprintf(shell, SHELL_ERROR,
   1bb6c:	2102      	movs	r1, #2
   1bb6e:	4a71      	ldr	r2, [pc, #452]	; (1bd34 <execute+0x2b8>)
   1bb70:	4620      	mov	r0, r4
   1bb72:	f006 fd80 	bl	22676 <shell_internal_fprintf>
   1bb76:	e7f0      	b.n	1bb5a <execute+0xde>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   1bb78:	9b05      	ldr	r3, [sp, #20]
   1bb7a:	2b00      	cmp	r3, #0
   1bb7c:	d042      	beq.n	1bc04 <execute+0x188>
		    (!strcmp(argvp[0], "-h") ||
   1bb7e:	496e      	ldr	r1, [pc, #440]	; (1bd38 <execute+0x2bc>)
   1bb80:	f8d9 0000 	ldr.w	r0, [r9]
   1bb84:	f007 fa69 	bl	2305a <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   1bb88:	b940      	cbnz	r0, 1bb9c <execute+0x120>
			if (help_entry.help) {
   1bb8a:	f1ba 0f00 	cmp.w	sl, #0
   1bb8e:	d12b      	bne.n	1bbe8 <execute+0x16c>
			shell_internal_fprintf(shell, SHELL_ERROR,
   1bb90:	4a6a      	ldr	r2, [pc, #424]	; (1bd3c <execute+0x2c0>)
		shell_internal_fprintf(shell, SHELL_ERROR,
   1bb92:	2102      	movs	r1, #2
   1bb94:	4620      	mov	r0, r4
   1bb96:	f006 fd6e 	bl	22676 <shell_internal_fprintf>
		return false;
   1bb9a:	e7de      	b.n	1bb5a <execute+0xde>
		     !strcmp(argvp[0], "--help"))) {
   1bb9c:	4968      	ldr	r1, [pc, #416]	; (1bd40 <execute+0x2c4>)
   1bb9e:	f8d9 0000 	ldr.w	r0, [r9]
   1bba2:	f007 fa5a 	bl	2305a <strcmp>
		    (!strcmp(argvp[0], "-h") ||
   1bba6:	2800      	cmp	r0, #0
   1bba8:	d0ef      	beq.n	1bb8a <execute+0x10e>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   1bbaa:	9b05      	ldr	r3, [sp, #20]
   1bbac:	b353      	cbz	r3, 1bc04 <execute+0x188>
			status = shell_wildcard_process(shell, entry,
   1bbae:	4629      	mov	r1, r5
   1bbb0:	4620      	mov	r0, r4
   1bbb2:	f8d9 2000 	ldr.w	r2, [r9]
   1bbb6:	f001 fa41 	bl	1d03c <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   1bbba:	2802      	cmp	r0, #2
   1bbbc:	f000 80cc 	beq.w	1bd58 <execute+0x2dc>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   1bbc0:	2803      	cmp	r0, #3
   1bbc2:	d01f      	beq.n	1bc04 <execute+0x188>
				++cmd_lvl;
   1bbc4:	9b05      	ldr	r3, [sp, #20]
   1bbc6:	3301      	adds	r3, #1
   1bbc8:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   1bbca:	2301      	movs	r3, #1
   1bbcc:	9302      	str	r3, [sp, #8]
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   1bbce:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1bbd2:	2a01      	cmp	r2, #1
   1bbd4:	f000 80c0 	beq.w	1bd58 <execute+0x2dc>
   1bbd8:	2b0b      	cmp	r3, #11
   1bbda:	d976      	bls.n	1bcca <execute+0x24e>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1bbdc:	9906      	ldr	r1, [sp, #24]
   1bbde:	2902      	cmp	r1, #2
   1bbe0:	d176      	bne.n	1bcd0 <execute+0x254>
		shell_internal_fprintf(shell, SHELL_ERROR,
   1bbe2:	4b58      	ldr	r3, [pc, #352]	; (1bd44 <execute+0x2c8>)
   1bbe4:	4a58      	ldr	r2, [pc, #352]	; (1bd48 <execute+0x2cc>)
   1bbe6:	e7c3      	b.n	1bb70 <execute+0xf4>
				shell->ctx->active_cmd = help_entry;
   1bbe8:	68a5      	ldr	r5, [r4, #8]
   1bbea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   1bbee:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   1bbf0:	ae0c      	add	r6, sp, #48	; 0x30
   1bbf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1bbf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bbf6:	6833      	ldr	r3, [r6, #0]
   1bbf8:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   1bbfa:	4620      	mov	r0, r4
   1bbfc:	f7ff feba 	bl	1b974 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   1bc00:	2501      	movs	r5, #1
   1bc02:	e7ac      	b.n	1bb5e <execute+0xe2>
		if (has_last_handler == false) {
   1bc04:	f1bb 0f00 	cmp.w	fp, #0
   1bc08:	d106      	bne.n	1bc18 <execute+0x19c>
			entry = shell_find_cmd(parent, argvp[0], &dloc);
   1bc0a:	4630      	mov	r0, r6
   1bc0c:	f8d9 1000 	ldr.w	r1, [r9]
   1bc10:	aa07      	add	r2, sp, #28
   1bc12:	f006 fb4f 	bl	222b4 <shell_find_cmd>
   1bc16:	4605      	mov	r5, r0
		argvp++;
   1bc18:	f109 0904 	add.w	r9, r9, #4
		args_left--;
   1bc1c:	3f01      	subs	r7, #1
		if (entry) {
   1bc1e:	2d00      	cmp	r5, #0
   1bc20:	d03a      	beq.n	1bc98 <execute+0x21c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   1bc22:	9b02      	ldr	r3, [sp, #8]
   1bc24:	b14b      	cbz	r3, 1bc3a <execute+0x1be>
   1bc26:	68eb      	ldr	r3, [r5, #12]
   1bc28:	b13b      	cbz	r3, 1bc3a <execute+0x1be>
		shell_op_cursor_end_move(shell);
   1bc2a:	4620      	mov	r0, r4
   1bc2c:	f006 fc88 	bl	22540 <shell_op_cursor_end_move>
		shell_op_cond_next_line(shell);
   1bc30:	4620      	mov	r0, r4
   1bc32:	f000 fda3 	bl	1c77c <shell_op_cond_next_line>
		shell_internal_fprintf(shell, SHELL_ERROR,
   1bc36:	4a45      	ldr	r2, [pc, #276]	; (1bd4c <execute+0x2d0>)
   1bc38:	e7ab      	b.n	1bb92 <execute+0x116>
	if (entry->handler) {
   1bc3a:	68eb      	ldr	r3, [r5, #12]
   1bc3c:	b1ab      	cbz	r3, 1bc6a <execute+0x1ee>
		*active_cmd = *entry;
   1bc3e:	46ac      	mov	ip, r5
   1bc40:	68a6      	ldr	r6, [r4, #8]
   1bc42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1bc46:	3608      	adds	r6, #8
   1bc48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1bc4a:	f8dc 3000 	ldr.w	r3, [ip]
   1bc4e:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1bc52:	6033      	str	r3, [r6, #0]
		if ((entry->subcmd == NULL)
   1bc54:	68ab      	ldr	r3, [r5, #8]
   1bc56:	b943      	cbnz	r3, 1bc6a <execute+0x1ee>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   1bc58:	7c6b      	ldrb	r3, [r5, #17]
   1bc5a:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   1bc5c:	bf01      	itttt	eq
   1bc5e:	7c2f      	ldrbeq	r7, [r5, #16]
			*lvl = *lvl + 1;
   1bc60:	f108 0301 	addeq.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
   1bc64:	f107 37ff 	addeq.w	r7, r7, #4294967295
			*lvl = *lvl + 1;
   1bc68:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   1bc6a:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1bc6e:	f1bc 0f00 	cmp.w	ip, #0
   1bc72:	d008      	beq.n	1bc86 <execute+0x20a>
		*help_entry = *entry;
   1bc74:	46ae      	mov	lr, r5
   1bc76:	46e2      	mov	sl, ip
   1bc78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1bc7c:	ae0c      	add	r6, sp, #48	; 0x30
   1bc7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1bc80:	f8de 3000 	ldr.w	r3, [lr]
   1bc84:	6033      	str	r3, [r6, #0]
   1bc86:	462e      	mov	r6, r5
		if (args_left || (argc == 2)) {
   1bc88:	b917      	cbnz	r7, 1bc90 <execute+0x214>
   1bc8a:	9b06      	ldr	r3, [sp, #24]
   1bc8c:	2b02      	cmp	r3, #2
   1bc8e:	d19e      	bne.n	1bbce <execute+0x152>
			cmd_lvl++;
   1bc90:	9b05      	ldr	r3, [sp, #20]
   1bc92:	3301      	adds	r3, #1
   1bc94:	9305      	str	r3, [sp, #20]
   1bc96:	e79a      	b.n	1bbce <execute+0x152>
			if (cmd_lvl == 0 &&
   1bc98:	9b05      	ldr	r3, [sp, #20]
   1bc9a:	b963      	cbnz	r3, 1bcb6 <execute+0x23a>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   1bc9c:	68a3      	ldr	r3, [r4, #8]
   1bc9e:	69db      	ldr	r3, [r3, #28]
   1bca0:	b10b      	cbz	r3, 1bca6 <execute+0x22a>
				(!shell_in_select_mode(shell) ||
   1bca2:	68db      	ldr	r3, [r3, #12]
   1bca4:	b93b      	cbnz	r3, 1bcb6 <execute+0x23a>
				shell_internal_fprintf(shell, SHELL_ERROR,
   1bca6:	4b2a      	ldr	r3, [pc, #168]	; (1bd50 <execute+0x2d4>)
   1bca8:	2102      	movs	r1, #2
   1bcaa:	9300      	str	r3, [sp, #0]
   1bcac:	4620      	mov	r0, r4
   1bcae:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bcb0:	4a28      	ldr	r2, [pc, #160]	; (1bd54 <execute+0x2d8>)
   1bcb2:	f006 fce0 	bl	22676 <shell_internal_fprintf>
			has_last_handler = true;
   1bcb6:	f04f 0b01 	mov.w	fp, #1
   1bcba:	e7e5      	b.n	1bc88 <execute+0x20c>
		help_entry.help = NULL;
   1bcbc:	46b2      	mov	sl, r6
	size_t argc = 0, args_left = SIZE_MAX;
   1bcbe:	f04f 37ff 	mov.w	r7, #4294967295
	size_t cmd_with_handler_lvl = 0;
   1bcc2:	46b0      	mov	r8, r6
		argvp = &argv[0];
   1bcc4:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   1bcc8:	e72e      	b.n	1bb28 <execute+0xac>
		&& args_left > 0) {
   1bcca:	2f00      	cmp	r7, #0
   1bccc:	f47f af39 	bne.w	1bb42 <execute+0xc6>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   1bcd0:	9b02      	ldr	r3, [sp, #8]
   1bcd2:	b1ab      	cbz	r3, 1bd00 <execute+0x284>
		shell_wildcard_finalize(shell);
   1bcd4:	4620      	mov	r0, r4
   1bcd6:	f007 f813 	bl	22d00 <shell_wildcard_finalize>
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   1bcda:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&cmd_lvl,
   1bcdc:	a811      	add	r0, sp, #68	; 0x44
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   1bcde:	69d1      	ldr	r1, [r2, #28]
		(void)shell_make_argv(&cmd_lvl,
   1bce0:	230c      	movs	r3, #12
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   1bce2:	3900      	subs	r1, #0
   1bce4:	bf18      	it	ne
   1bce6:	2101      	movne	r1, #1
		(void)shell_make_argv(&cmd_lvl,
   1bce8:	3238      	adds	r2, #56	; 0x38
   1bcea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1bcee:	a805      	add	r0, sp, #20
   1bcf0:	f006 f9f5 	bl	220de <shell_make_argv>
		if (shell->ctx->selected_cmd) {
   1bcf4:	68a3      	ldr	r3, [r4, #8]
   1bcf6:	69db      	ldr	r3, [r3, #28]
   1bcf8:	b113      	cbz	r3, 1bd00 <execute+0x284>
			cmd_lvl++;
   1bcfa:	9b05      	ldr	r3, [sp, #20]
   1bcfc:	3301      	adds	r3, #1
   1bcfe:	9305      	str	r3, [sp, #20]
	argv[cmd_lvl] = NULL;
   1bd00:	2200      	movs	r2, #0
   1bd02:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   1bd04:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   1bd06:	ab1e      	add	r3, sp, #120	; 0x78
   1bd08:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1bd0c:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   1bd10:	6943      	ldr	r3, [r0, #20]
   1bd12:	bb2b      	cbnz	r3, 1bd60 <execute+0x2e4>
			if (help_entry->help == NULL) {
   1bd14:	f1ba 0f00 	cmp.w	sl, #0
   1bd18:	f43f af1f 	beq.w	1bb5a <execute+0xde>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   1bd1c:	68c3      	ldr	r3, [r0, #12]
   1bd1e:	4553      	cmp	r3, sl
   1bd20:	f43f af6b 	beq.w	1bbfa <execute+0x17e>
				shell->ctx->active_cmd = *help_entry;
   1bd24:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   1bd28:	f100 0508 	add.w	r5, r0, #8
   1bd2c:	e760      	b.n	1bbf0 <execute+0x174>
   1bd2e:	bf00      	nop
   1bd30:	0002745d 	.word	0x0002745d
   1bd34:	00027753 	.word	0x00027753
   1bd38:	00027767 	.word	0x00027767
   1bd3c:	00027771 	.word	0x00027771
   1bd40:	0002776a 	.word	0x0002776a
   1bd44:	000277d2 	.word	0x000277d2
   1bd48:	0002758c 	.word	0x0002758c
   1bd4c:	0002778f 	.word	0x0002778f
   1bd50:	000277be 	.word	0x000277be
   1bd54:	00027a8e 	.word	0x00027a8e
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1bd58:	9b05      	ldr	r3, [sp, #20]
   1bd5a:	2b0b      	cmp	r3, #11
   1bd5c:	d9b8      	bls.n	1bcd0 <execute+0x254>
   1bd5e:	e73d      	b.n	1bbdc <execute+0x160>
	if (shell->ctx->active_cmd.args.mandatory) {
   1bd60:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   1bd62:	eba5 0508 	sub.w	r5, r5, r8
	if (shell->ctx->active_cmd.args.mandatory) {
   1bd66:	b1b3      	cbz	r3, 1bd96 <execute+0x31a>
				UINT16_MAX : opt8;
   1bd68:	f64f 71ff 	movw	r1, #65535	; 0xffff
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   1bd6c:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   1bd6e:	2aff      	cmp	r2, #255	; 0xff
   1bd70:	bf08      	it	eq
   1bd72:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   1bd74:	429d      	cmp	r5, r3
   1bd76:	d302      	bcc.n	1bd7e <execute+0x302>
   1bd78:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   1bd7a:	429d      	cmp	r5, r3
   1bd7c:	d90b      	bls.n	1bd96 <execute+0x31a>
		shell_internal_fprintf(shell, SHELL_ERROR,
   1bd7e:	6883      	ldr	r3, [r0, #8]
   1bd80:	2102      	movs	r1, #2
   1bd82:	4620      	mov	r0, r4
   1bd84:	4a16      	ldr	r2, [pc, #88]	; (1bde0 <execute+0x364>)
   1bd86:	f006 fc76 	bl	22676 <shell_internal_fprintf>
			shell_internal_help_print(shell);
   1bd8a:	4620      	mov	r0, r4
   1bd8c:	f7ff fdf2 	bl	1b974 <shell_internal_help_print>
		return -EINVAL;
   1bd90:	f06f 0515 	mvn.w	r5, #21
   1bd94:	e6e3      	b.n	1bb5e <execute+0xe2>
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
   1bd96:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		k_mutex_unlock(&shell->ctx->wr_mtx);
   1bd9a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1bd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bda2:	f840 3c94 	str.w	r3, [r0, #-148]
   1bda6:	f006 f893 	bl	21ed0 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   1bdaa:	68a3      	ldr	r3, [r4, #8]
   1bdac:	aa11      	add	r2, sp, #68	; 0x44
   1bdae:	4629      	mov	r1, r5
   1bdb0:	695b      	ldr	r3, [r3, #20]
   1bdb2:	eb02 0288 	add.w	r2, r2, r8, lsl #2
   1bdb6:	4620      	mov	r0, r4
   1bdb8:	4798      	blx	r3
   1bdba:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1bdbc:	68a0      	ldr	r0, [r4, #8]
   1bdbe:	f04f 32ff 	mov.w	r2, #4294967295
   1bdc2:	f04f 33ff 	mov.w	r3, #4294967295
   1bdc6:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1bdca:	f006 f8a0 	bl	21f0e <k_mutex_lock.constprop.0>
		flag_cmd_ctx_set(shell, false);
   1bdce:	68a3      	ldr	r3, [r4, #8]
   1bdd0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1bdd4:	f36f 12c7 	bfc	r2, #7, #1
   1bdd8:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1bddc:	e6bf      	b.n	1bb5e <execute+0xe2>
   1bdde:	bf00      	nop
   1bde0:	000277f6 	.word	0x000277f6

0001bde4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   1bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bde8:	4604      	mov	r4, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bdea:	6883      	ldr	r3, [r0, #8]
   1bdec:	b0ab      	sub	sp, #172	; 0xac
   1bdee:	f503 7316 	add.w	r3, r3, #600	; 0x258
   1bdf2:	e8d3 2fef 	ldaex	r2, [r3]
   1bdf6:	f042 0208 	orr.w	r2, r2, #8
   1bdfa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bdfe:	2900      	cmp	r1, #0
   1be00:	d1f7      	bne.n	1bdf2 <shell_process+0xe>
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
   1be02:	68a3      	ldr	r3, [r4, #8]
   1be04:	791b      	ldrb	r3, [r3, #4]
   1be06:	2b02      	cmp	r3, #2
   1be08:	f040 832b 	bne.w	1c462 <shell_process+0x67e>
	size_t count = 0;
   1be0c:	2300      	movs	r3, #0
   1be0e:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
   1be10:	6860      	ldr	r0, [r4, #4]
   1be12:	2201      	movs	r2, #1
   1be14:	6803      	ldr	r3, [r0, #0]
   1be16:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   1be1a:	691d      	ldr	r5, [r3, #16]
   1be1c:	ab0b      	add	r3, sp, #44	; 0x2c
   1be1e:	47a8      	blx	r5
		if (count == 0) {
   1be20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1be22:	2b00      	cmp	r3, #0
   1be24:	f000 831d 	beq.w	1c462 <shell_process+0x67e>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1be28:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
   1be2c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1be30:	2a00      	cmp	r2, #0
   1be32:	dbed      	blt.n	1be10 <shell_process+0x2c>
		switch (shell->ctx->receive_state) {
   1be34:	68a0      	ldr	r0, [r4, #8]
   1be36:	7941      	ldrb	r1, [r0, #5]
   1be38:	2901      	cmp	r1, #1
   1be3a:	f000 828e 	beq.w	1c35a <shell_process+0x576>
   1be3e:	2902      	cmp	r1, #2
   1be40:	f000 82a1 	beq.w	1c386 <shell_process+0x5a2>
   1be44:	2900      	cmp	r1, #0
   1be46:	f040 830a 	bne.w	1c45e <shell_process+0x67a>
	if ((data != '\r') && (data != '\n')) {
   1be4a:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
   1be4c:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   1be50:	d01a      	beq.n	1be88 <shell_process+0xa4>
   1be52:	2b0a      	cmp	r3, #10
   1be54:	d018      	beq.n	1be88 <shell_process+0xa4>
   1be56:	f361 220f 	bfi	r2, r1, #8, #8
   1be5a:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
			switch (data) {
   1be5e:	2b09      	cmp	r3, #9
   1be60:	d055      	beq.n	1bf0e <shell_process+0x12a>
   1be62:	d83a      	bhi.n	1beda <shell_process+0xf6>
   1be64:	2b00      	cmp	r3, #0
   1be66:	d0d3      	beq.n	1be10 <shell_process+0x2c>
   1be68:	2b08      	cmp	r3, #8
   1be6a:	f000 81dc 	beq.w	1c226 <shell_process+0x442>
   1be6e:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
   1be72:	2a5e      	cmp	r2, #94	; 0x5e
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1be74:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   1be78:	f200 81e4 	bhi.w	1c244 <shell_process+0x460>
   1be7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
					shell_op_char_insert(shell, data);
   1be80:	4619      	mov	r1, r3
   1be82:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
   1be86:	e0f9      	b.n	1c07c <shell_process+0x298>
	if ((flag_last_nl_get(shell) == 0U) ||
   1be88:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   1be8c:	d005      	beq.n	1be9a <shell_process+0xb6>
	return shell->ctx->internal.flags.last_nl;
   1be8e:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   1be92:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1be96:	4293      	cmp	r3, r2
   1be98:	d1e1      	bne.n	1be5e <shell_process+0x7a>
	shell->ctx->internal.flags.last_nl = val;
   1be9a:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   1be9e:	f363 220f 	bfi	r2, r3, #8, #8
   1bea2:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len) {
   1bea6:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1bea8:	b99a      	cbnz	r2, 1bed2 <shell_process+0xee>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1beaa:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1beae:	f362 1386 	bfi	r3, r2, #6, #1
   1beb2:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
   1beb6:	68e0      	ldr	r0, [r4, #12]
   1beb8:	f006 fd04 	bl	228c4 <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1bebc:	49b3      	ldr	r1, [pc, #716]	; (1c18c <shell_process+0x3a8>)
   1bebe:	6960      	ldr	r0, [r4, #20]
   1bec0:	f006 f80e 	bl	21ee0 <shell_raw_fprintf>
	shell->ctx->state = state;
   1bec4:	68a3      	ldr	r3, [r4, #8]
   1bec6:	2202      	movs	r2, #2
   1bec8:	4620      	mov	r0, r4
   1beca:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   1becc:	f7ff fd62 	bl	1b994 <state_set.part.0>
   1bed0:	e79e      	b.n	1be10 <shell_process+0x2c>
					(void)execute(shell);
   1bed2:	4620      	mov	r0, r4
   1bed4:	f7ff fdd2 	bl	1ba7c <execute>
   1bed8:	e7f4      	b.n	1bec4 <shell_process+0xe0>
   1beda:	2b1b      	cmp	r3, #27
   1bedc:	d014      	beq.n	1bf08 <shell_process+0x124>
   1bede:	2b7f      	cmp	r3, #127	; 0x7f
   1bee0:	d1c5      	bne.n	1be6e <shell_process+0x8a>
	return shell->ctx->internal.flags.echo == 1;
   1bee2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   1bee6:	075f      	lsls	r7, r3, #29
   1bee8:	d592      	bpl.n	1be10 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1beea:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1beee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bef2:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1;
   1bef6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
   1befa:	069e      	lsls	r6, r3, #26
   1befc:	f100 819e 	bmi.w	1c23c <shell_process+0x458>
		shell_op_char_delete(shell);
   1bf00:	4620      	mov	r0, r4
   1bf02:	f006 fbf9 	bl	226f8 <shell_op_char_delete>
		break;
   1bf06:	e783      	b.n	1be10 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1bf08:	2301      	movs	r3, #1
   1bf0a:	7143      	strb	r3, [r0, #5]
}
   1bf0c:	e780      	b.n	1be10 <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1;
   1bf0e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   1bf12:	0759      	lsls	r1, r3, #29
   1bf14:	f57f af7c 	bpl.w	1be10 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1bf18:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1bf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bf20:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
   1bf24:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   1bf26:	2bff      	cmp	r3, #255	; 0xff
   1bf28:	f43f af72 	beq.w	1be10 <shell_process+0x2c>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   1bf2c:	2500      	movs	r5, #0
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
   1bf2e:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   1bf30:	f100 0138 	add.w	r1, r0, #56	; 0x38
   1bf34:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1bf38:	f007 f8d1 	bl	230de <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   1bf3c:	68a2      	ldr	r2, [r4, #8]
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   1bf3e:	a91d      	add	r1, sp, #116	; 0x74
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   1bf40:	8e93      	ldrh	r3, [r2, #52]	; 0x34
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   1bf42:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   1bf44:	4413      	add	r3, r2
   1bf46:	f883 5138 	strb.w	r5, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   1bf4a:	f502 729c 	add.w	r2, r2, #312	; 0x138
   1bf4e:	230c      	movs	r3, #12
   1bf50:	f006 f8c5 	bl	220de <shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   1bf54:	990d      	ldr	r1, [sp, #52]	; 0x34
   1bf56:	290c      	cmp	r1, #12
   1bf58:	f63f af5a 	bhi.w	1be10 <shell_process+0x2c>
	int space = isspace((int)shell->ctx->cmd_buff[
   1bf5c:	68a0      	ldr	r0, [r4, #8]
	(*argv)[*argc] = NULL;
   1bf5e:	ab2a      	add	r3, sp, #168	; 0xa8
   1bf60:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1bf64:	f843 5c34 	str.w	r5, [r3, #-52]
						shell->ctx->cmd_buff_pos - 1]);
   1bf68:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
   1bf6a:	4403      	add	r3, r0
   1bf6c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bf70:	2b20      	cmp	r3, #32
   1bf72:	f000 8284 	beq.w	1c47e <shell_process+0x69a>
   1bf76:	3b09      	subs	r3, #9
   1bf78:	2b04      	cmp	r3, #4
   1bf7a:	f240 8280 	bls.w	1c47e <shell_process+0x69a>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   1bf7e:	2901      	cmp	r1, #1
   1bf80:	d856      	bhi.n	1c030 <shell_process+0x24c>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
   1bf82:	2300      	movs	r3, #0
		*cmd = shell->ctx->selected_cmd;
   1bf84:	69c6      	ldr	r6, [r0, #28]
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
   1bf86:	930c      	str	r3, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   1bf88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bf8a:	aa2a      	add	r2, sp, #168	; 0xa8
   1bf8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1bf90:	f853 ac34 	ldr.w	sl, [r3, #-52]
	*cnt = 0;
   1bf94:	2500      	movs	r5, #0
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   1bf96:	4650      	mov	r0, sl
   1bf98:	f005 ff9c 	bl	21ed4 <shell_strlen>
	size_t first = 0;
   1bf9c:	46a8      	mov	r8, r5
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   1bf9e:	4681      	mov	r9, r0
	size_t idx = 0;
   1bfa0:	462f      	mov	r7, r5
	*longest = 0U;
   1bfa2:	9504      	str	r5, [sp, #16]
	while ((candidate = shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   1bfa4:	4639      	mov	r1, r7
   1bfa6:	4630      	mov	r0, r6
   1bfa8:	aa18      	add	r2, sp, #96	; 0x60
   1bfaa:	f000 fb99 	bl	1c6e0 <shell_cmd_get>
   1bfae:	4683      	mov	fp, r0
   1bfb0:	2800      	cmp	r0, #0
   1bfb2:	d14b      	bne.n	1c04c <shell_process+0x268>
	if (cnt == 1) {
   1bfb4:	2d01      	cmp	r5, #1
   1bfb6:	d16a      	bne.n	1c08e <shell_process+0x2aa>
		autocomplete(shell, cmd, argv[arg_idx], first);
   1bfb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bfba:	aa2a      	add	r2, sp, #168	; 0xa8
   1bfbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = shell_strlen(arg);
   1bfc0:	f853 0c34 	ldr.w	r0, [r3, #-52]
   1bfc4:	f005 ff86 	bl	21ed4 <shell_strlen>
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   1bfc8:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = shell_strlen(arg);
   1bfca:	4605      	mov	r5, r0
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   1bfcc:	4641      	mov	r1, r8
   1bfce:	4630      	mov	r0, r6
   1bfd0:	3208      	adds	r2, #8
   1bfd2:	f000 fb85 	bl	1c6e0 <shell_cmd_get>
   1bfd6:	4606      	mov	r6, r0
	cmd_len = shell_strlen(match->syntax);
   1bfd8:	6800      	ldr	r0, [r0, #0]
   1bfda:	f005 ff7b 	bl	21ed4 <shell_strlen>
	if (cmd_len != arg_len) {
   1bfde:	4285      	cmp	r5, r0
   1bfe0:	d006      	beq.n	1bff0 <shell_process+0x20c>
		shell_op_completion_insert(shell,
   1bfe2:	6831      	ldr	r1, [r6, #0]
   1bfe4:	1b42      	subs	r2, r0, r5
   1bfe6:	b292      	uxth	r2, r2
   1bfe8:	4620      	mov	r0, r4
   1bfea:	4429      	add	r1, r5
   1bfec:	f006 fb82 	bl	226f4 <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   1bff0:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
   1bff2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
   1bff4:	441a      	add	r2, r3
   1bff6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   1bffa:	2a20      	cmp	r2, #32
   1bffc:	d042      	beq.n	1c084 <shell_process+0x2a0>
   1bffe:	3a09      	subs	r2, #9
   1c000:	2a04      	cmp	r2, #4
   1c002:	d93f      	bls.n	1c084 <shell_process+0x2a0>
	return shell->ctx->internal.flags.insert_mode == 1;
   1c004:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
   1c008:	07d2      	lsls	r2, r2, #31
   1c00a:	d536      	bpl.n	1c07a <shell_process+0x296>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   1c00c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
   1c010:	2120      	movs	r1, #32
   1c012:	f36f 0200 	bfc	r2, #0, #1
   1c016:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1c01a:	4620      	mov	r0, r4
   1c01c:	f000 fcbc 	bl	1c998 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
   1c020:	68a2      	ldr	r2, [r4, #8]
   1c022:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c026:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1c02a:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
}
   1c02e:	e6ef      	b.n	1be10 <shell_process+0x2c>
	search_argc = space ? *argc : *argc - 1;
   1c030:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell->ctx->selected_cmd, search_argc,
   1c032:	2300      	movs	r3, #0
   1c034:	9301      	str	r3, [sp, #4]
   1c036:	ab0e      	add	r3, sp, #56	; 0x38
   1c038:	9300      	str	r3, [sp, #0]
   1c03a:	69c0      	ldr	r0, [r0, #28]
   1c03c:	ab0c      	add	r3, sp, #48	; 0x30
   1c03e:	aa1d      	add	r2, sp, #116	; 0x74
   1c040:	f006 f94f 	bl	222e2 <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   1c044:	4606      	mov	r6, r0
   1c046:	2800      	cmp	r0, #0
   1c048:	d19e      	bne.n	1bf88 <shell_process+0x1a4>
   1c04a:	e6e1      	b.n	1be10 <shell_process+0x2c>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   1c04c:	464a      	mov	r2, r9
   1c04e:	4651      	mov	r1, sl
   1c050:	f8db 0000 	ldr.w	r0, [fp]
   1c054:	f007 f80d 	bl	23072 <strncmp>
		if (is_candidate) {
   1c058:	b968      	cbnz	r0, 1c076 <shell_process+0x292>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   1c05a:	f8db 0000 	ldr.w	r0, [fp]
   1c05e:	f006 fff5 	bl	2304c <strlen>
   1c062:	9b04      	ldr	r3, [sp, #16]
   1c064:	4283      	cmp	r3, r0
   1c066:	bf38      	it	cc
   1c068:	4603      	movcc	r3, r0
   1c06a:	b29b      	uxth	r3, r3
				*first_idx = idx;
   1c06c:	2d00      	cmp	r5, #0
   1c06e:	bf08      	it	eq
   1c070:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   1c072:	9304      	str	r3, [sp, #16]
			(*cnt)++;
   1c074:	3501      	adds	r5, #1
		idx++;
   1c076:	3701      	adds	r7, #1
   1c078:	e794      	b.n	1bfa4 <shell_process+0x1c0>
			shell_op_char_insert(shell, ' ');
   1c07a:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
   1c07c:	4620      	mov	r0, r4
   1c07e:	f000 fc8b 	bl	1c998 <shell_op_char_insert>
   1c082:	e6c5      	b.n	1be10 <shell_process+0x2c>
		shell_op_cursor_move(shell, 1);
   1c084:	2101      	movs	r1, #1
   1c086:	4620      	mov	r0, r4
   1c088:	f006 f9f6 	bl	22478 <shell_op_cursor_move>
   1c08c:	e6c0      	b.n	1be10 <shell_process+0x2c>
	} else if (cnt > 1) {
   1c08e:	f67f aebf 	bls.w	1be10 <shell_process+0x2c>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   1c092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c094:	aa2a      	add	r2, sp, #168	; 0xa8
   1c096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1c09a:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = shell_strlen(str);
   1c09e:	4650      	mov	r0, sl
   1c0a0:	f005 ff18 	bl	21ed4 <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1c0a4:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = shell_strlen(str);
   1c0a6:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1c0a8:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += shell_strlen(tab);
   1c0ac:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 1c190 <shell_process+0x3ac>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1c0b0:	9505      	str	r5, [sp, #20]
   1c0b2:	f8cd 800c 	str.w	r8, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   1c0b6:	68a2      	ldr	r2, [r4, #8]
   1c0b8:	4630      	mov	r0, r6
   1c0ba:	9903      	ldr	r1, [sp, #12]
   1c0bc:	3208      	adds	r2, #8
   1c0be:	f000 fb0f 	bl	1c6e0 <shell_cmd_get>
		idx++;
   1c0c2:	9b03      	ldr	r3, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   1c0c4:	4607      	mov	r7, r0
		idx++;
   1c0c6:	3301      	adds	r3, #1
   1c0c8:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
   1c0ca:	f1ba 0f00 	cmp.w	sl, #0
   1c0ce:	d152      	bne.n	1c176 <shell_process+0x392>
		tab_item_print(shell, match->syntax, longest);
   1c0d0:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   1c0d2:	2b00      	cmp	r3, #0
   1c0d4:	d15e      	bne.n	1c194 <shell_process+0x3b0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1c0d6:	68a2      	ldr	r2, [r4, #8]
   1c0d8:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   1c0da:	9b05      	ldr	r3, [sp, #20]
   1c0dc:	3b01      	subs	r3, #1
   1c0de:	9305      	str	r3, [sp, #20]
   1c0e0:	d1e9      	bne.n	1c0b6 <shell_process+0x2d2>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1c0e2:	492a      	ldr	r1, [pc, #168]	; (1c18c <shell_process+0x3a8>)
   1c0e4:	6960      	ldr	r0, [r4, #20]
   1c0e6:	f005 fefb 	bl	21ee0 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
   1c0ea:	4620      	mov	r0, r4
   1c0ec:	f000 fc86 	bl	1c9fc <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   1c0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c0f2:	aa2a      	add	r2, sp, #168	; 0xa8
   1c0f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = shell_strlen(arg);
   1c0f8:	f853 0c34 	ldr.w	r0, [r3, #-52]
   1c0fc:	f005 feea 	bl	21ed4 <shell_strlen>
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   1c100:	4641      	mov	r1, r8
   1c102:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = shell_strlen(arg);
   1c104:	4607      	mov	r7, r0
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   1c106:	4630      	mov	r0, r6
   1c108:	f000 faea 	bl	1c6e0 <shell_cmd_get>
	size_t idx = first + 1;
   1c10c:	f108 0901 	add.w	r9, r8, #1
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   1c110:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
   1c112:	68a0      	ldr	r0, [r4, #8]
   1c114:	f8d8 1000 	ldr.w	r1, [r8]
   1c118:	22ff      	movs	r2, #255	; 0xff
   1c11a:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1c11e:	f006 ff74 	bl	2300a <strncpy>
	*str = match->syntax;
   1c122:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   1c126:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
   1c12a:	4649      	mov	r1, r9
   1c12c:	4630      	mov	r0, r6
   1c12e:	aa18      	add	r2, sp, #96	; 0x60
   1c130:	f109 0b01 	add.w	fp, r9, #1
   1c134:	f000 fad4 	bl	1c6e0 <shell_cmd_get>
		if (match2 == NULL) {
   1c138:	2800      	cmp	r0, #0
   1c13a:	d067      	beq.n	1c20c <shell_process+0x428>
	size_t common = 0;
   1c13c:	2200      	movs	r2, #0
   1c13e:	68a3      	ldr	r3, [r4, #8]
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   1c140:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1c142:	f503 739c 	add.w	r3, r3, #312	; 0x138
   1c146:	f813 cb01 	ldrb.w	ip, [r3], #1
   1c14a:	5c81      	ldrb	r1, [r0, r2]
   1c14c:	4561      	cmp	r1, ip
   1c14e:	d105      	bne.n	1c15c <shell_process+0x378>
   1c150:	b121      	cbz	r1, 1c15c <shell_process+0x378>
   1c152:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
   1c156:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1c158:	428a      	cmp	r2, r1
   1c15a:	d1f4      	bne.n	1c146 <shell_process+0x362>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   1c15c:	b10f      	cbz	r7, 1c162 <shell_process+0x37e>
   1c15e:	42ba      	cmp	r2, r7
   1c160:	db07      	blt.n	1c172 <shell_process+0x38e>
			common = (curr_common < common) ? curr_common : common;
   1c162:	4590      	cmp	r8, r2
   1c164:	bfa8      	it	ge
   1c166:	4690      	movge	r8, r2
			--cnt;
   1c168:	3d01      	subs	r5, #1
	while (cnt > 1) {
   1c16a:	2d01      	cmp	r5, #1
			common = (curr_common < common) ? curr_common : common;
   1c16c:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   1c170:	d04c      	beq.n	1c20c <shell_process+0x428>
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
   1c172:	46d9      	mov	r9, fp
   1c174:	e7d9      	b.n	1c12a <shell_process+0x346>
		if (str && match->syntax &&
   1c176:	6800      	ldr	r0, [r0, #0]
   1c178:	2800      	cmp	r0, #0
   1c17a:	d0a9      	beq.n	1c0d0 <shell_process+0x2ec>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   1c17c:	4651      	mov	r1, sl
   1c17e:	9a06      	ldr	r2, [sp, #24]
   1c180:	f006 ff77 	bl	23072 <strncmp>
		if (str && match->syntax &&
   1c184:	2800      	cmp	r0, #0
   1c186:	d0a3      	beq.n	1c0d0 <shell_process+0x2ec>
   1c188:	e795      	b.n	1c0b6 <shell_process+0x2d2>
   1c18a:	bf00      	nop
   1c18c:	0002745d 	.word	0x0002745d
   1c190:	00026ff7 	.word	0x00026ff7
	longest_option += shell_strlen(tab);
   1c194:	4658      	mov	r0, fp
   1c196:	9307      	str	r3, [sp, #28]
   1c198:	f005 fe9c 	bl	21ed4 <shell_strlen>
   1c19c:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   1c19e:	68a1      	ldr	r1, [r4, #8]
	longest_option += shell_strlen(tab);
   1c1a0:	18c2      	adds	r2, r0, r3
   1c1a2:	b292      	uxth	r2, r2
			- shell_strlen(tab)) / longest_option;
   1c1a4:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   1c1a6:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += shell_strlen(tab);
   1c1a8:	9209      	str	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
   1c1aa:	f005 fe93 	bl	21ed4 <shell_strlen>
	diff = longest_option - shell_strlen(option);
   1c1ae:	9b07      	ldr	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
   1c1b0:	9008      	str	r0, [sp, #32]
	diff = longest_option - shell_strlen(option);
   1c1b2:	4618      	mov	r0, r3
   1c1b4:	f005 fe8e 	bl	21ed4 <shell_strlen>
			- shell_strlen(tab)) / longest_option;
   1c1b8:	9908      	ldr	r1, [sp, #32]
	diff = longest_option - shell_strlen(option);
   1c1ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
   1c1bc:	1a7f      	subs	r7, r7, r1
	diff = longest_option - shell_strlen(option);
   1c1be:	eba2 0900 	sub.w	r9, r2, r0
			- shell_strlen(tab)) / longest_option;
   1c1c2:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   1c1c6:	68a0      	ldr	r0, [r4, #8]
   1c1c8:	b292      	uxth	r2, r2
   1c1ca:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   1c1ce:	9b07      	ldr	r3, [sp, #28]
   1c1d0:	fbbc f1f2 	udiv	r1, ip, r2
   1c1d4:	fb02 c211 	mls	r2, r2, r1, ip
   1c1d8:	f10c 0e01 	add.w	lr, ip, #1
   1c1dc:	b292      	uxth	r2, r2
	diff = longest_option - shell_strlen(option);
   1c1de:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   1c1e2:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   1c1e6:	b95a      	cbnz	r2, 1c200 <shell_process+0x41c>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
   1c1e8:	9300      	str	r3, [sp, #0]
   1c1ea:	2107      	movs	r1, #7
   1c1ec:	465b      	mov	r3, fp
   1c1ee:	4620      	mov	r0, r4
   1c1f0:	4aa5      	ldr	r2, [pc, #660]	; (1c488 <shell_process+0x6a4>)
   1c1f2:	f006 fa40 	bl	22676 <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
   1c1f6:	4649      	mov	r1, r9
   1c1f8:	4620      	mov	r0, r4
   1c1fa:	f000 faaf 	bl	1c75c <shell_op_cursor_horiz_move>
   1c1fe:	e76c      	b.n	1c0da <shell_process+0x2f6>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
   1c200:	2107      	movs	r1, #7
   1c202:	4620      	mov	r0, r4
   1c204:	4aa1      	ldr	r2, [pc, #644]	; (1c48c <shell_process+0x6a8>)
   1c206:	f006 fa36 	bl	22676 <shell_internal_fprintf>
   1c20a:	e7f4      	b.n	1c1f6 <shell_process+0x412>
	if (common) {
   1c20c:	f1b8 0f00 	cmp.w	r8, #0
   1c210:	f43f adfe 	beq.w	1be10 <shell_process+0x2c>
		shell_op_completion_insert(shell, &completion[arg_len],
   1c214:	eba8 0207 	sub.w	r2, r8, r7
   1c218:	4620      	mov	r0, r4
   1c21a:	b292      	uxth	r2, r2
   1c21c:	eb0a 0107 	add.w	r1, sl, r7
   1c220:	f006 fa68 	bl	226f4 <shell_op_completion_insert>
   1c224:	e5f4      	b.n	1be10 <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1;
   1c226:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   1c22a:	075b      	lsls	r3, r3, #29
   1c22c:	f57f adf0 	bpl.w	1be10 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1c230:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1c234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c238:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
   1c23c:	4620      	mov	r0, r4
   1c23e:	f006 fa76 	bl	2272e <shell_op_char_backspace>
   1c242:	e5e5      	b.n	1be10 <shell_process+0x2c>
				} else if (flag_echo_get(shell)) {
   1c244:	0755      	lsls	r5, r2, #29
   1c246:	f57f ade3 	bpl.w	1be10 <shell_process+0x2c>
	switch (data) {
   1c24a:	3b01      	subs	r3, #1
   1c24c:	2b16      	cmp	r3, #22
   1c24e:	f63f addf 	bhi.w	1be10 <shell_process+0x2c>
   1c252:	a201      	add	r2, pc, #4	; (adr r2, 1c258 <shell_process+0x474>)
   1c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c258:	0001c425 	.word	0x0001c425
   1c25c:	0001c2b5 	.word	0x0001c2b5
   1c260:	0001c2bd 	.word	0x0001c2bd
   1c264:	0001bf01 	.word	0x0001bf01
   1c268:	0001c419 	.word	0x0001c419
   1c26c:	0001c2e3 	.word	0x0001c2e3
   1c270:	0001be11 	.word	0x0001be11
   1c274:	0001be11 	.word	0x0001be11
   1c278:	0001be11 	.word	0x0001be11
   1c27c:	0001be11 	.word	0x0001be11
   1c280:	0001c2eb 	.word	0x0001c2eb
   1c284:	0001c2f3 	.word	0x0001c2f3
   1c288:	0001be11 	.word	0x0001be11
   1c28c:	0001c30f 	.word	0x0001c30f
   1c290:	0001be11 	.word	0x0001be11
   1c294:	0001c319 	.word	0x0001c319
   1c298:	0001be11 	.word	0x0001be11
   1c29c:	0001be11 	.word	0x0001be11
   1c2a0:	0001be11 	.word	0x0001be11
   1c2a4:	0001be11 	.word	0x0001be11
   1c2a8:	0001c31d 	.word	0x0001c31d
   1c2ac:	0001be11 	.word	0x0001be11
   1c2b0:	0001c349 	.word	0x0001c349
		shell_op_left_arrow(shell);
   1c2b4:	4620      	mov	r0, r4
   1c2b6:	f006 f94a 	bl	2254e <shell_op_left_arrow>
		break;
   1c2ba:	e5a9      	b.n	1be10 <shell_process+0x2c>
		shell_op_cursor_end_move(shell);
   1c2bc:	4620      	mov	r0, r4
   1c2be:	f006 f93f 	bl	22540 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	f006 f8c4 	bl	22450 <shell_cursor_in_empty_line>
   1c2c8:	b918      	cbnz	r0, 1c2d2 <shell_process+0x4ee>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1c2ca:	4971      	ldr	r1, [pc, #452]	; (1c490 <shell_process+0x6ac>)
   1c2cc:	6960      	ldr	r0, [r4, #20]
   1c2ce:	f005 fe07 	bl	21ee0 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
   1c2d2:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1c2d4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1c2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1c2dc:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1c2e0:	e5f1      	b.n	1bec6 <shell_process+0xe2>
		shell_op_right_arrow(shell);
   1c2e2:	4620      	mov	r0, r4
   1c2e4:	f006 f93b 	bl	2255e <shell_op_right_arrow>
		break;
   1c2e8:	e592      	b.n	1be10 <shell_process+0x2c>
		shell_op_delete_from_cursor(shell);
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	f006 f940 	bl	22570 <shell_op_delete_from_cursor>
		break;
   1c2f0:	e58e      	b.n	1be10 <shell_process+0x2c>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   1c2f2:	6960      	ldr	r0, [r4, #20]
   1c2f4:	4a67      	ldr	r2, [pc, #412]	; (1c494 <shell_process+0x6b0>)
   1c2f6:	4965      	ldr	r1, [pc, #404]	; (1c48c <shell_process+0x6a8>)
   1c2f8:	f005 fdf2 	bl	21ee0 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   1c2fc:	6960      	ldr	r0, [r4, #20]
   1c2fe:	4a66      	ldr	r2, [pc, #408]	; (1c498 <shell_process+0x6b4>)
   1c300:	4962      	ldr	r1, [pc, #392]	; (1c48c <shell_process+0x6a8>)
   1c302:	f005 fded 	bl	21ee0 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
   1c306:	4620      	mov	r0, r4
   1c308:	f000 fb78 	bl	1c9fc <shell_print_prompt_and_cmd>
		break;
   1c30c:	e580      	b.n	1be10 <shell_process+0x2c>
		history_handle(shell, false);
   1c30e:	2100      	movs	r1, #0
		history_handle(shell, true);
   1c310:	4620      	mov	r0, r4
   1c312:	f7ff fb61 	bl	1b9d8 <history_handle>
		break;
   1c316:	e57b      	b.n	1be10 <shell_process+0x2c>
		history_handle(shell, true);
   1c318:	2101      	movs	r1, #1
   1c31a:	e7f9      	b.n	1c310 <shell_process+0x52c>
		shell_op_cursor_home_move(shell);
   1c31c:	4620      	mov	r0, r4
   1c31e:	f006 f909 	bl	22534 <shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1c322:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
   1c324:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   1c326:	4959      	ldr	r1, [pc, #356]	; (1c48c <shell_process+0x6a8>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   1c328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   1c32c:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   1c32e:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
   1c330:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1c332:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c33a:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   1c33e:	6960      	ldr	r0, [r4, #20]
   1c340:	4a56      	ldr	r2, [pc, #344]	; (1c49c <shell_process+0x6b8>)
   1c342:	f005 fdcd 	bl	21ee0 <shell_raw_fprintf>
}
   1c346:	e563      	b.n	1be10 <shell_process+0x2c>
		shell_op_word_remove(shell);
   1c348:	4620      	mov	r0, r4
   1c34a:	f000 faa7 	bl	1c89c <shell_op_word_remove>
		flag_history_exit_set(shell, true);
   1c34e:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1c350:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1c358:	e667      	b.n	1c02a <shell_process+0x246>
			if (data == '[') {
   1c35a:	2b5b      	cmp	r3, #91	; 0x5b
   1c35c:	d101      	bne.n	1c362 <shell_process+0x57e>
	shell->ctx->receive_state = state;
   1c35e:	2302      	movs	r3, #2
   1c360:	e5d3      	b.n	1bf0a <shell_process+0x126>
	return shell->ctx->internal.flags.echo == 1;
   1c362:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
   1c366:	0750      	lsls	r0, r2, #29
   1c368:	d509      	bpl.n	1c37e <shell_process+0x59a>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   1c36a:	2b62      	cmp	r3, #98	; 0x62
   1c36c:	d105      	bne.n	1c37a <shell_process+0x596>
		shell_op_cursor_word_move(shell, -1);
   1c36e:	f04f 31ff 	mov.w	r1, #4294967295
		shell_op_cursor_word_move(shell, 1);
   1c372:	4620      	mov	r0, r4
   1c374:	f006 f8a4 	bl	224c0 <shell_op_cursor_word_move>
   1c378:	e001      	b.n	1c37e <shell_process+0x59a>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   1c37a:	2b66      	cmp	r3, #102	; 0x66
   1c37c:	d0f9      	beq.n	1c372 <shell_process+0x58e>
	shell->ctx->receive_state = state;
   1c37e:	2200      	movs	r2, #0
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   1c380:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   1c382:	715a      	strb	r2, [r3, #5]
}
   1c384:	e544      	b.n	1be10 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1c386:	2200      	movs	r2, #0
   1c388:	7142      	strb	r2, [r0, #5]
			if (!flag_echo_get(shell)) {
   1c38a:	68a2      	ldr	r2, [r4, #8]
   1c38c:	f8d2 1258 	ldr.w	r1, [r2, #600]	; 0x258
   1c390:	0749      	lsls	r1, r1, #29
   1c392:	f57f ad3d 	bpl.w	1be10 <shell_process+0x2c>
			switch (data) {
   1c396:	3b31      	subs	r3, #49	; 0x31
   1c398:	2b1b      	cmp	r3, #27
   1c39a:	f63f ad39 	bhi.w	1be10 <shell_process+0x2c>
   1c39e:	a101      	add	r1, pc, #4	; (adr r1, 1c3a4 <shell_process+0x5c0>)
   1c3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1c3a4:	0001c421 	.word	0x0001c421
   1c3a8:	0001c42d 	.word	0x0001c42d
   1c3ac:	0001c44d 	.word	0x0001c44d
   1c3b0:	0001c415 	.word	0x0001c415
   1c3b4:	0001be11 	.word	0x0001be11
   1c3b8:	0001be11 	.word	0x0001be11
   1c3bc:	0001be11 	.word	0x0001be11
   1c3c0:	0001be11 	.word	0x0001be11
   1c3c4:	0001be11 	.word	0x0001be11
   1c3c8:	0001be11 	.word	0x0001be11
   1c3cc:	0001be11 	.word	0x0001be11
   1c3d0:	0001be11 	.word	0x0001be11
   1c3d4:	0001be11 	.word	0x0001be11
   1c3d8:	0001be11 	.word	0x0001be11
   1c3dc:	0001be11 	.word	0x0001be11
   1c3e0:	0001be11 	.word	0x0001be11
   1c3e4:	0001c319 	.word	0x0001c319
   1c3e8:	0001c30f 	.word	0x0001c30f
   1c3ec:	0001c2e3 	.word	0x0001c2e3
   1c3f0:	0001c2b5 	.word	0x0001c2b5
   1c3f4:	0001be11 	.word	0x0001be11
   1c3f8:	0001c419 	.word	0x0001c419
   1c3fc:	0001be11 	.word	0x0001be11
   1c400:	0001c425 	.word	0x0001c425
   1c404:	0001be11 	.word	0x0001be11
   1c408:	0001be11 	.word	0x0001be11
   1c40c:	0001be11 	.word	0x0001be11
   1c410:	0001c431 	.word	0x0001c431
	shell->ctx->receive_state = state;
   1c414:	2303      	movs	r3, #3
   1c416:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_end_move(shell);
   1c418:	4620      	mov	r0, r4
   1c41a:	f006 f891 	bl	22540 <shell_op_cursor_end_move>
		break;
   1c41e:	e4f7      	b.n	1be10 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1c420:	2303      	movs	r3, #3
   1c422:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_home_move(shell);
   1c424:	4620      	mov	r0, r4
   1c426:	f006 f885 	bl	22534 <shell_op_cursor_home_move>
		break;
   1c42a:	e4f1      	b.n	1be10 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1c42c:	2303      	movs	r3, #3
   1c42e:	7153      	strb	r3, [r2, #5]
				bool status = flag_insert_mode_get(shell);
   1c430:	68a2      	ldr	r2, [r4, #8]
	return shell->ctx->internal.flags.insert_mode == 1;
   1c432:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   1c436:	f8d2 1258 	ldr.w	r1, [r2, #600]	; 0x258
	return shell->ctx->internal.flags.insert_mode == 1;
   1c43a:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
   1c43e:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   1c442:	f363 0100 	bfi	r1, r3, #0, #1
   1c446:	f8c2 1258 	str.w	r1, [r2, #600]	; 0x258
}
   1c44a:	e4e1      	b.n	1be10 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1c44c:	2303      	movs	r3, #3
   1c44e:	7153      	strb	r3, [r2, #5]
				if (flag_echo_get(shell)) {
   1c450:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   1c452:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1c456:	075b      	lsls	r3, r3, #29
   1c458:	f57f acda 	bpl.w	1be10 <shell_process+0x2c>
   1c45c:	e550      	b.n	1bf00 <shell_process+0x11c>
	shell->ctx->receive_state = state;
   1c45e:	2300      	movs	r3, #0
   1c460:	e553      	b.n	1bf0a <shell_process+0x126>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c462:	68a3      	ldr	r3, [r4, #8]
   1c464:	f503 7316 	add.w	r3, r3, #600	; 0x258
   1c468:	e8d3 2fef 	ldaex	r2, [r3]
   1c46c:	f022 0208 	bic.w	r2, r2, #8
   1c470:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c474:	2900      	cmp	r1, #0
   1c476:	d1f7      	bne.n	1c468 <shell_process+0x684>

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
   1c478:	b02b      	add	sp, #172	; 0xac
   1c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   1c47e:	2900      	cmp	r1, #0
   1c480:	f43f ad7f 	beq.w	1bf82 <shell_process+0x19e>
   1c484:	e5d5      	b.n	1c032 <shell_process+0x24e>
   1c486:	bf00      	nop
   1c488:	00027811 	.word	0x00027811
   1c48c:	00027587 	.word	0x00027587
   1c490:	0002745d 	.word	0x0002745d
   1c494:	00027832 	.word	0x00027832
   1c498:	00027836 	.word	0x00027836
   1c49c:	0002782e 	.word	0x0002782e

0001c4a0 <shell_init>:
{
   1c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4a4:	4604      	mov	r4, r0
   1c4a6:	b088      	sub	sp, #32
   1c4a8:	460f      	mov	r7, r1
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   1c4aa:	f44f 7241 	mov.w	r2, #772	; 0x304
   1c4ae:	2100      	movs	r1, #0
   1c4b0:	6880      	ldr	r0, [r0, #8]
{
   1c4b2:	461e      	mov	r6, r3
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   1c4b4:	f006 fe3e 	bl	23134 <memset>
	shell->ctx->prompt = shell->default_prompt;
   1c4b8:	68a3      	ldr	r3, [r4, #8]
   1c4ba:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
   1c4bc:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
   1c4be:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
   1c4c0:	f006 faa6 	bl	22a10 <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
   1c4c4:	68a0      	ldr	r0, [r4, #8]
   1c4c6:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	return z_impl_k_mutex_init(mutex);
   1c4ca:	f007 f831 	bl	23530 <z_impl_k_mutex_init>
   1c4ce:	f44f 7827 	mov.w	r8, #668	; 0x29c
   1c4d2:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
   1c4d6:	68a0      	ldr	r0, [r4, #8]
   1c4d8:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
   1c4da:	f007 fba0 	bl	23c1e <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
   1c4de:	68a0      	ldr	r0, [r4, #8]
   1c4e0:	2200      	movs	r2, #0
   1c4e2:	1943      	adds	r3, r0, r5
   1c4e4:	2101      	movs	r1, #1
   1c4e6:	4440      	add	r0, r8
   1c4e8:	3510      	adds	r5, #16
   1c4ea:	f007 fb7b 	bl	23be4 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   1c4ee:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
   1c4f2:	f108 0814 	add.w	r8, r8, #20
   1c4f6:	d1ee      	bne.n	1c4d6 <shell_init+0x36>
		shell->stats->log_lost_cnt = 0;
   1c4f8:	2200      	movs	r2, #0
   1c4fa:	69a3      	ldr	r3, [r4, #24]
   1c4fc:	601a      	str	r2, [r3, #0]
	flag_tx_rdy_set(shell, true);
   1c4fe:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   1c500:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   1c504:	6810      	ldr	r0, [r2, #0]
   1c506:	f043 0310 	orr.w	r3, r3, #16
   1c50a:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   1c50e:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c512:	f043 0304 	orr.w	r3, r3, #4
   1c516:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   1c51a:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c51e:	f043 0320 	orr.w	r3, r3, #32
   1c522:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.terminal_hei =
   1c526:	4b1b      	ldr	r3, [pc, #108]	; (1c594 <shell_init+0xf4>)
   1c528:	6293      	str	r3, [r2, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   1c52a:	f005 fcd3 	bl	21ed4 <shell_strlen>
   1c52e:	68a3      	ldr	r3, [r4, #8]
	int ret = shell->iface->api->init(shell->iface, p_config,
   1c530:	4639      	mov	r1, r7
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   1c532:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   1c536:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   1c538:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1c53c:	f043 0302 	orr.w	r3, r3, #2
   1c540:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	int ret = shell->iface->api->init(shell->iface, p_config,
   1c544:	6860      	ldr	r0, [r4, #4]
   1c546:	4a14      	ldr	r2, [pc, #80]	; (1c598 <shell_init+0xf8>)
   1c548:	6803      	ldr	r3, [r0, #0]
   1c54a:	681d      	ldr	r5, [r3, #0]
   1c54c:	4623      	mov	r3, r4
   1c54e:	47a8      	blx	r5
	if (ret == 0) {
   1c550:	4605      	mov	r5, r0
   1c552:	b9d0      	cbnz	r0, 1c58a <shell_init+0xea>
	shell->ctx->state = state;
   1c554:	2201      	movs	r2, #1
   1c556:	68a3      	ldr	r3, [r4, #8]
   1c558:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   1c55a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c55e:	2200      	movs	r2, #0
   1c560:	2300      	movs	r3, #0
   1c562:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c566:	230e      	movs	r3, #14
   1c568:	9303      	str	r3, [sp, #12]
   1c56a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c56c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   1c570:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1c574:	9504      	str	r5, [sp, #16]
   1c576:	4b09      	ldr	r3, [pc, #36]	; (1c59c <shell_init+0xfc>)
   1c578:	9400      	str	r4, [sp, #0]
   1c57a:	f003 ff21 	bl	203c0 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   1c57e:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   1c580:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   1c582:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
   1c586:	f003 fe71 	bl	2026c <z_impl_k_thread_name_set>
}
   1c58a:	4628      	mov	r0, r5
   1c58c:	b008      	add	sp, #32
   1c58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c592:	bf00      	nop
   1c594:	00500018 	.word	0x00500018
   1c598:	00021efb 	.word	0x00021efb
   1c59c:	0001c5f1 	.word	0x0001c5f1

0001c5a0 <shell_start>:
{
   1c5a0:	b510      	push	{r4, lr}
   1c5a2:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   1c5a4:	6880      	ldr	r0, [r0, #8]
   1c5a6:	7903      	ldrb	r3, [r0, #4]
   1c5a8:	2b01      	cmp	r3, #1
   1c5aa:	d11c      	bne.n	1c5e6 <shell_start+0x46>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1c5ac:	f04f 32ff 	mov.w	r2, #4294967295
   1c5b0:	f04f 33ff 	mov.w	r3, #4294967295
   1c5b4:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1c5b8:	f005 fca9 	bl	21f0e <k_mutex_lock.constprop.0>
		shell_vt100_color_set(shell, SHELL_NORMAL);
   1c5bc:	2100      	movs	r1, #0
   1c5be:	4620      	mov	r0, r4
   1c5c0:	f000 f922 	bl	1c808 <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   1c5c4:	4909      	ldr	r1, [pc, #36]	; (1c5ec <shell_start+0x4c>)
   1c5c6:	6960      	ldr	r0, [r4, #20]
   1c5c8:	f005 fc8a 	bl	21ee0 <shell_raw_fprintf>
	shell->ctx->state = state;
   1c5cc:	2202      	movs	r2, #2
   1c5ce:	68a3      	ldr	r3, [r4, #8]
   1c5d0:	4620      	mov	r0, r4
   1c5d2:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   1c5d4:	f7ff f9de 	bl	1b994 <state_set.part.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   1c5d8:	68a0      	ldr	r0, [r4, #8]
   1c5da:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1c5de:	f005 fc77 	bl	21ed0 <k_mutex_unlock>
	return 0;
   1c5e2:	2000      	movs	r0, #0
}
   1c5e4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   1c5e6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c5ea:	e7fb      	b.n	1c5e4 <shell_start+0x44>
   1c5ec:	0002745c 	.word	0x0002745c

0001c5f0 <shell_thread>:
{
   1c5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c5f4:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   1c5f6:	6840      	ldr	r0, [r0, #4]
{
   1c5f8:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   1c5fa:	6803      	ldr	r3, [r0, #0]
   1c5fc:	2100      	movs	r1, #0
   1c5fe:	689b      	ldr	r3, [r3, #8]
{
   1c600:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   1c602:	4798      	blx	r3
	if (err != 0) {
   1c604:	2800      	cmp	r0, #0
   1c606:	d14c      	bne.n	1c6a2 <shell_thread+0xb2>
	if (log_backend && IS_ENABLED(CONFIG_SHELL_LOG_BACKEND)) {
   1c608:	b126      	cbz	r6, 1c614 <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
   1c60a:	462a      	mov	r2, r5
   1c60c:	4621      	mov	r1, r4
   1c60e:	69e0      	ldr	r0, [r4, #28]
   1c610:	f006 fab7 	bl	22b82 <shell_log_backend_enable>
	err = shell_start(shell);
   1c614:	4620      	mov	r0, r4
   1c616:	f7ff ffc3 	bl	1c5a0 <shell_start>
	if (err != 0) {
   1c61a:	2800      	cmp	r0, #0
   1c61c:	d141      	bne.n	1c6a2 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   1c61e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1c6b4 <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   1c622:	4f21      	ldr	r7, [pc, #132]	; (1c6a8 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   1c624:	4e21      	ldr	r6, [pc, #132]	; (1c6ac <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   1c626:	68a0      	ldr	r0, [r4, #8]
   1c628:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
   1c62c:	f04f 32ff 	mov.w	r2, #4294967295
   1c630:	f04f 33ff 	mov.w	r3, #4294967295
   1c634:	2103      	movs	r1, #3
   1c636:	f004 f969 	bl	2090c <z_impl_k_poll>
		if (err != 0) {
   1c63a:	4605      	mov	r5, r0
   1c63c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1c63e:	f04f 32ff 	mov.w	r2, #4294967295
   1c642:	f04f 33ff 	mov.w	r3, #4294967295
   1c646:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
		if (err != 0) {
   1c64a:	b175      	cbz	r5, 1c66a <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1c64c:	f005 fc5f 	bl	21f0e <k_mutex_lock.constprop.0>
			shell_internal_fprintf(shell, SHELL_ERROR,
   1c650:	4620      	mov	r0, r4
   1c652:	462b      	mov	r3, r5
   1c654:	2102      	movs	r1, #2
   1c656:	4a16      	ldr	r2, [pc, #88]	; (1c6b0 <shell_thread+0xc0>)
   1c658:	f006 f80d 	bl	22676 <shell_internal_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   1c65c:	68a0      	ldr	r0, [r4, #8]
}
   1c65e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   1c662:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1c666:	f005 bc33 	b.w	21ed0 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1c66a:	f005 fc50 	bl	21f0e <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   1c66e:	6860      	ldr	r0, [r4, #4]
   1c670:	6803      	ldr	r3, [r0, #0]
   1c672:	695b      	ldr	r3, [r3, #20]
   1c674:	b103      	cbz	r3, 1c678 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   1c676:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   1c678:	4642      	mov	r2, r8
   1c67a:	4620      	mov	r0, r4
   1c67c:	2102      	movs	r1, #2
   1c67e:	f005 fbf7 	bl	21e70 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   1c682:	463a      	mov	r2, r7
   1c684:	4620      	mov	r0, r4
   1c686:	2100      	movs	r1, #0
   1c688:	f005 fbf2 	bl	21e70 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   1c68c:	4620      	mov	r0, r4
   1c68e:	4632      	mov	r2, r6
   1c690:	2101      	movs	r1, #1
   1c692:	f005 fbed 	bl	21e70 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   1c696:	68a0      	ldr	r0, [r4, #8]
   1c698:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1c69c:	f005 fc18 	bl	21ed0 <k_mutex_unlock>
   1c6a0:	e7c1      	b.n	1c626 <shell_thread+0x36>
}
   1c6a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c6a6:	bf00      	nop
   1c6a8:	0001bde5 	.word	0x0001bde5
   1c6ac:	00021f13 	.word	0x00021f13
   1c6b0:	00027817 	.word	0x00027817
   1c6b4:	00021e9b 	.word	0x00021e9b

0001c6b8 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
   1c6b8:	b510      	push	{r4, lr}
   1c6ba:	4604      	mov	r4, r0
   1c6bc:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   1c6be:	460a      	mov	r2, r1
   1c6c0:	4601      	mov	r1, r0
   1c6c2:	4806      	ldr	r0, [pc, #24]	; (1c6dc <shell_fprintf_fmt+0x24>)
   1c6c4:	f7fd fd22 	bl	1a10c <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   1c6c8:	6923      	ldr	r3, [r4, #16]
   1c6ca:	791b      	ldrb	r3, [r3, #4]
   1c6cc:	b123      	cbz	r3, 1c6d8 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
   1c6ce:	4620      	mov	r0, r4
	}
}
   1c6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
   1c6d4:	f005 bc9b 	b.w	2200e <shell_fprintf_buffer_flush>
}
   1c6d8:	bd10      	pop	{r4, pc}
   1c6da:	bf00      	nop
   1c6dc:	00022027 	.word	0x00022027

0001c6e0 <shell_cmd_get>:

const struct shell_static_entry *shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   1c6e0:	b510      	push	{r4, lr}
   1c6e2:	460b      	mov	r3, r1
   1c6e4:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   1c6e6:	b950      	cbnz	r0, 1c6fe <shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
   1c6e8:	490e      	ldr	r1, [pc, #56]	; (1c724 <shell_cmd_get+0x44>)
   1c6ea:	4a0f      	ldr	r2, [pc, #60]	; (1c728 <shell_cmd_get+0x48>)
   1c6ec:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   1c6ee:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1c6f2:	d20f      	bcs.n	1c714 <shell_cmd_get+0x34>
   1c6f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1c6f8:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   1c6fa:	4620      	mov	r0, r4
   1c6fc:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
   1c6fe:	6881      	ldr	r1, [r0, #8]
   1c700:	b141      	cbz	r1, 1c714 <shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
   1c702:	684a      	ldr	r2, [r1, #4]
   1c704:	7809      	ldrb	r1, [r1, #0]
   1c706:	b139      	cbz	r1, 1c718 <shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
   1c708:	4618      	mov	r0, r3
   1c70a:	4621      	mov	r1, r4
   1c70c:	4790      	blx	r2
			if (dloc->syntax != NULL) {
   1c70e:	6823      	ldr	r3, [r4, #0]
   1c710:	2b00      	cmp	r3, #0
   1c712:	d1f2      	bne.n	1c6fa <shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
   1c714:	2400      	movs	r4, #0
   1c716:	e7f0      	b.n	1c6fa <shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   1c718:	2014      	movs	r0, #20
   1c71a:	4343      	muls	r3, r0
   1c71c:	18d4      	adds	r4, r2, r3
   1c71e:	58d3      	ldr	r3, [r2, r3]
   1c720:	e7f6      	b.n	1c710 <shell_cmd_get+0x30>
   1c722:	bf00      	nop
   1c724:	00024044 	.word	0x00024044
   1c728:	000240cc 	.word	0x000240cc

0001c72c <clear_eos.isra.0>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   1c72c:	4a01      	ldr	r2, [pc, #4]	; (1c734 <clear_eos.isra.0+0x8>)
   1c72e:	4902      	ldr	r1, [pc, #8]	; (1c738 <clear_eos.isra.0+0xc>)
   1c730:	f005 be6d 	b.w	2240e <shell_raw_fprintf>
   1c734:	00027842 	.word	0x00027842
   1c738:	00027587 	.word	0x00027587

0001c73c <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   1c73c:	b159      	cbz	r1, 1c756 <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   1c73e:	2900      	cmp	r1, #0
   1c740:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   1c744:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   1c748:	bfcc      	ite	gt
   1c74a:	2341      	movgt	r3, #65	; 0x41
   1c74c:	2342      	movle	r3, #66	; 0x42
   1c74e:	4902      	ldr	r1, [pc, #8]	; (1c758 <shell_op_cursor_vert_move+0x1c>)
   1c750:	6940      	ldr	r0, [r0, #20]
   1c752:	f005 be5c 	b.w	2240e <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
   1c756:	4770      	bx	lr
   1c758:	0002783b 	.word	0x0002783b

0001c75c <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   1c75c:	b159      	cbz	r1, 1c776 <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   1c75e:	2900      	cmp	r1, #0
   1c760:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   1c764:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   1c768:	bfcc      	ite	gt
   1c76a:	2343      	movgt	r3, #67	; 0x43
   1c76c:	2344      	movle	r3, #68	; 0x44
   1c76e:	4902      	ldr	r1, [pc, #8]	; (1c778 <shell_op_cursor_horiz_move+0x1c>)
   1c770:	6940      	ldr	r0, [r0, #20]
   1c772:	f005 be4c 	b.w	2240e <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
   1c776:	4770      	bx	lr
   1c778:	0002783b 	.word	0x0002783b

0001c77c <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
   1c77c:	b510      	push	{r4, lr}
   1c77e:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   1c780:	f005 fe66 	bl	22450 <shell_cursor_in_empty_line>
   1c784:	b128      	cbz	r0, 1c792 <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1c786:	6960      	ldr	r0, [r4, #20]
   1c788:	4905      	ldr	r1, [pc, #20]	; (1c7a0 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
   1c78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c78e:	f005 be3e 	b.w	2240e <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   1c792:	f104 0008 	add.w	r0, r4, #8
   1c796:	f005 fe47 	bl	22428 <full_line_cmd.isra.0>
   1c79a:	2800      	cmp	r0, #0
   1c79c:	d1f3      	bne.n	1c786 <shell_op_cond_next_line+0xa>
}
   1c79e:	bd10      	pop	{r4, pc}
   1c7a0:	0002745d 	.word	0x0002745d

0001c7a4 <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
   1c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   1c7a8:	4606      	mov	r6, r0
   1c7aa:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
   1c7ae:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1c7b0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1c7b2:	f104 0020 	add.w	r0, r4, #32
   1c7b6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   1c7b8:	f005 fc7b 	bl	220b2 <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   1c7bc:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   1c7be:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   1c7c2:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   1c7c4:	f005 fe30 	bl	22428 <full_line_cmd.isra.0>
   1c7c8:	b118      	cbz	r0, 1c7d2 <shell_op_cursor_position_synchronize+0x2e>
   1c7ca:	490a      	ldr	r1, [pc, #40]	; (1c7f4 <shell_op_cursor_position_synchronize+0x50>)
   1c7cc:	6968      	ldr	r0, [r5, #20]
   1c7ce:	f005 fe1e 	bl	2240e <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
   1c7d2:	45b8      	cmp	r8, r7
   1c7d4:	d107      	bne.n	1c7e6 <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   1c7d6:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   1c7d8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   1c7da:	4628      	mov	r0, r5
	}
}
   1c7dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   1c7e0:	1ac9      	subs	r1, r1, r3
   1c7e2:	f7ff bfbb 	b.w	1c75c <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   1c7e6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   1c7e8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1c7ea:	4628      	mov	r0, r5
   1c7ec:	1ac9      	subs	r1, r1, r3
   1c7ee:	f7ff ffa5 	bl	1c73c <shell_op_cursor_vert_move>
   1c7f2:	e7f0      	b.n	1c7d6 <shell_op_cursor_position_synchronize+0x32>
   1c7f4:	0002745d 	.word	0x0002745d

0001c7f8 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   1c7f8:	6882      	ldr	r2, [r0, #8]
   1c7fa:	4902      	ldr	r1, [pc, #8]	; (1c804 <shell_print_cmd+0xc>)
   1c7fc:	6940      	ldr	r0, [r0, #20]
   1c7fe:	3238      	adds	r2, #56	; 0x38
   1c800:	f005 be05 	b.w	2240e <shell_raw_fprintf>
   1c804:	00027587 	.word	0x00027587

0001c808 <shell_vt100_color_set>:

}

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{
   1c808:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
   1c80a:	6883      	ldr	r3, [r0, #8]
   1c80c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   1c810:	428a      	cmp	r2, r1
   1c812:	d012      	beq.n	1c83a <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   1c814:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   1c818:	6940      	ldr	r0, [r0, #20]
   1c81a:	b189      	cbz	r1, 1c840 <shell_vt100_color_set+0x38>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   1c81c:	4b09      	ldr	r3, [pc, #36]	; (1c844 <_flash_used>)

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   1c81e:	466a      	mov	r2, sp
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   1c820:	9300      	str	r3, [sp, #0]
   1c822:	2333      	movs	r3, #51	; 0x33
   1c824:	f88d 3004 	strb.w	r3, [sp, #4]
   1c828:	236d      	movs	r3, #109	; 0x6d
   1c82a:	312f      	adds	r1, #47	; 0x2f
   1c82c:	f88d 1005 	strb.w	r1, [sp, #5]
   1c830:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   1c834:	4904      	ldr	r1, [pc, #16]	; (1c848 <_flash_used+0x4>)
   1c836:	f005 fdea 	bl	2240e <shell_raw_fprintf>
	}
}
   1c83a:	b003      	add	sp, #12
   1c83c:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   1c840:	4a02      	ldr	r2, [pc, #8]	; (1c84c <_flash_used+0x8>)
   1c842:	e7f7      	b.n	1c834 <shell_vt100_color_set+0x2c>
   1c844:	3b315b1b 	.word	0x3b315b1b
   1c848:	00027587 	.word	0x00027587
   1c84c:	0002784c 	.word	0x0002784c

0001c850 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
   1c850:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c852:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
   1c854:	7809      	ldrb	r1, [r1, #0]
{
   1c856:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
   1c858:	f7ff ffd6 	bl	1c808 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   1c85c:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   1c85e:	b1cb      	cbz	r3, 1c894 <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   1c860:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   1c862:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
   1c866:	4299      	cmp	r1, r3
   1c868:	d014      	beq.n	1c894 <shell_vt100_colors_restore+0x44>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   1c86a:	f645 311b 	movw	r1, #23323	; 0x5b1b
   1c86e:	f8ad 1000 	strh.w	r1, [sp]
   1c872:	2134      	movs	r1, #52	; 0x34
   1c874:	f88d 1002 	strb.w	r1, [sp, #2]
   1c878:	f103 012f 	add.w	r1, r3, #47	; 0x2f
   1c87c:	f88d 1003 	strb.w	r1, [sp, #3]
   1c880:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   1c882:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   1c886:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   1c88a:	466a      	mov	r2, sp
   1c88c:	4902      	ldr	r1, [pc, #8]	; (1c898 <shell_vt100_colors_restore+0x48>)
   1c88e:	6960      	ldr	r0, [r4, #20]
   1c890:	f005 fdbd 	bl	2240e <shell_raw_fprintf>
}
   1c894:	b003      	add	sp, #12
   1c896:	bd30      	pop	{r4, r5, pc}
   1c898:	00027587 	.word	0x00027587

0001c89c <shell_op_word_remove>:
{
   1c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   1c89e:	6883      	ldr	r3, [r0, #8]
{
   1c8a0:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   1c8a2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1c8a4:	2a00      	cmp	r2, #0
   1c8a6:	d046      	beq.n	1c936 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   1c8a8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
   1c8aa:	2800      	cmp	r0, #0
   1c8ac:	d043      	beq.n	1c936 <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   1c8ae:	3037      	adds	r0, #55	; 0x37
   1c8b0:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   1c8b2:	f103 0638 	add.w	r6, r3, #56	; 0x38
   1c8b6:	4603      	mov	r3, r0
   1c8b8:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   1c8ba:	42b3      	cmp	r3, r6
   1c8bc:	4619      	mov	r1, r3
   1c8be:	b2a4      	uxth	r4, r4
   1c8c0:	d30d      	bcc.n	1c8de <shell_op_word_remove+0x42>
   1c8c2:	f811 7901 	ldrb.w	r7, [r1], #-1
   1c8c6:	2f20      	cmp	r7, #32
   1c8c8:	d033      	beq.n	1c932 <shell_op_word_remove+0x96>
   1c8ca:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   1c8cc:	7808      	ldrb	r0, [r1, #0]
   1c8ce:	3b01      	subs	r3, #1
   1c8d0:	2820      	cmp	r0, #32
   1c8d2:	d004      	beq.n	1c8de <shell_op_word_remove+0x42>
		++chars_to_delete;
   1c8d4:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   1c8d6:	429e      	cmp	r6, r3
		--str;
   1c8d8:	4619      	mov	r1, r3
		++chars_to_delete;
   1c8da:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
   1c8dc:	d9f5      	bls.n	1c8ca <shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1c8de:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
   1c8e0:	1c63      	adds	r3, r4, #1
   1c8e2:	1c4e      	adds	r6, r1, #1
   1c8e4:	1b12      	subs	r2, r2, r4
   1c8e6:	4419      	add	r1, r3
   1c8e8:	4630      	mov	r0, r6
   1c8ea:	f006 fbe1 	bl	230b0 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   1c8ee:	68a9      	ldr	r1, [r5, #8]
	shell_op_cursor_move(shell, -chars_to_delete);
   1c8f0:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
   1c8f2:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   1c8f4:	1b12      	subs	r2, r2, r4
   1c8f6:	b292      	uxth	r2, r2
   1c8f8:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1c8fa:	440a      	add	r2, r1
	shell_op_cursor_move(shell, -chars_to_delete);
   1c8fc:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1c8fe:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
   1c902:	b209      	sxth	r1, r1
   1c904:	f005 fdb8 	bl	22478 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   1c908:	6968      	ldr	r0, [r5, #20]
   1c90a:	4a0b      	ldr	r2, [pc, #44]	; (1c938 <shell_op_word_remove+0x9c>)
   1c90c:	490b      	ldr	r1, [pc, #44]	; (1c93c <shell_op_word_remove+0xa0>)
   1c90e:	f005 fd7e 	bl	2240e <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   1c912:	4639      	mov	r1, r7
   1c914:	4633      	mov	r3, r6
   1c916:	4628      	mov	r0, r5
   1c918:	4a08      	ldr	r2, [pc, #32]	; (1c93c <shell_op_word_remove+0xa0>)
   1c91a:	f005 feac 	bl	22676 <shell_internal_fprintf>
	clear_eos(shell);
   1c91e:	6968      	ldr	r0, [r5, #20]
   1c920:	f7ff ff04 	bl	1c72c <clear_eos.isra.0>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   1c924:	6968      	ldr	r0, [r5, #20]
   1c926:	4a06      	ldr	r2, [pc, #24]	; (1c940 <shell_op_word_remove+0xa4>)
   1c928:	4904      	ldr	r1, [pc, #16]	; (1c93c <shell_op_word_remove+0xa0>)
}
   1c92a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c92e:	f005 bd6e 	b.w	2240e <shell_raw_fprintf>
   1c932:	460b      	mov	r3, r1
   1c934:	e7c0      	b.n	1c8b8 <shell_op_word_remove+0x1c>
   1c936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c938:	00027846 	.word	0x00027846
   1c93c:	00027587 	.word	0x00027587
   1c940:	00027849 	.word	0x00027849

0001c944 <reprint_from_cursor>:
{
   1c944:	b570      	push	{r4, r5, r6, lr}
   1c946:	4604      	mov	r4, r0
   1c948:	460d      	mov	r5, r1
	if (data_removed) {
   1c94a:	4616      	mov	r6, r2
   1c94c:	b112      	cbz	r2, 1c954 <reprint_from_cursor+0x10>
		clear_eos(shell);
   1c94e:	6940      	ldr	r0, [r0, #20]
   1c950:	f7ff feec 	bl	1c72c <clear_eos.isra.0>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   1c954:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
   1c956:	4620      	mov	r0, r4
   1c958:	8e93      	ldrh	r3, [r2, #52]	; 0x34
   1c95a:	2100      	movs	r1, #0
   1c95c:	3338      	adds	r3, #56	; 0x38
   1c95e:	4413      	add	r3, r2
   1c960:	4a0b      	ldr	r2, [pc, #44]	; (1c990 <reprint_from_cursor+0x4c>)
   1c962:	f005 fe88 	bl	22676 <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   1c966:	4620      	mov	r0, r4
   1c968:	f850 3f08 	ldr.w	r3, [r0, #8]!
   1c96c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1c96e:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
   1c970:	f005 fd5a 	bl	22428 <full_line_cmd.isra.0>
   1c974:	b128      	cbz	r0, 1c982 <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   1c976:	b106      	cbz	r6, 1c97a <reprint_from_cursor+0x36>
   1c978:	b11d      	cbz	r5, 1c982 <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1c97a:	4906      	ldr	r1, [pc, #24]	; (1c994 <reprint_from_cursor+0x50>)
   1c97c:	6960      	ldr	r0, [r4, #20]
   1c97e:	f005 fd46 	bl	2240e <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
   1c982:	4269      	negs	r1, r5
   1c984:	4620      	mov	r0, r4
}
   1c986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
   1c98a:	b209      	sxth	r1, r1
   1c98c:	f005 bd74 	b.w	22478 <shell_op_cursor_move>
   1c990:	00027587 	.word	0x00027587
   1c994:	0002745d 	.word	0x0002745d

0001c998 <shell_op_char_insert>:
{
   1c998:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
   1c99a:	6883      	ldr	r3, [r0, #8]
{
   1c99c:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
   1c9a0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
{
   1c9a4:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
   1c9a6:	07d2      	lsls	r2, r2, #31
   1c9a8:	d51d      	bpl.n	1c9e6 <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   1c9aa:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
   1c9ac:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1c9ae:	428a      	cmp	r2, r1
   1c9b0:	d019      	beq.n	1c9e6 <shell_op_char_insert+0x4e>
		char_replace(shell, data);
   1c9b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   1c9b6:	1c48      	adds	r0, r1, #1
   1c9b8:	8698      	strh	r0, [r3, #52]	; 0x34
   1c9ba:	440b      	add	r3, r1
   1c9bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   1c9c0:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   1c9c2:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1c9c6:	075b      	lsls	r3, r3, #29
   1c9c8:	d50b      	bpl.n	1c9e2 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   1c9ca:	6960      	ldr	r0, [r4, #20]
   1c9cc:	4909      	ldr	r1, [pc, #36]	; (1c9f4 <shell_op_char_insert+0x5c>)
   1c9ce:	f005 fd1e 	bl	2240e <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
   1c9d2:	4620      	mov	r0, r4
   1c9d4:	f005 fd3c 	bl	22450 <shell_cursor_in_empty_line>
   1c9d8:	b118      	cbz	r0, 1c9e2 <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1c9da:	4907      	ldr	r1, [pc, #28]	; (1c9f8 <shell_op_char_insert+0x60>)
   1c9dc:	6960      	ldr	r0, [r4, #20]
   1c9de:	f005 fd16 	bl	2240e <shell_raw_fprintf>
}
   1c9e2:	b002      	add	sp, #8
   1c9e4:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   1c9e6:	2201      	movs	r2, #1
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f10d 0107 	add.w	r1, sp, #7
   1c9ee:	f005 fe4f 	bl	22690 <data_insert>
}
   1c9f2:	e7f6      	b.n	1c9e2 <shell_op_char_insert+0x4a>
   1c9f4:	0002783f 	.word	0x0002783f
   1c9f8:	0002745d 	.word	0x0002745d

0001c9fc <shell_print_prompt_and_cmd>:
{
   1c9fc:	b510      	push	{r4, lr}
   1c9fe:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   1ca00:	6883      	ldr	r3, [r0, #8]
   1ca02:	2103      	movs	r1, #3
   1ca04:	681b      	ldr	r3, [r3, #0]
   1ca06:	4a08      	ldr	r2, [pc, #32]	; (1ca28 <shell_print_prompt_and_cmd+0x2c>)
   1ca08:	f005 fe35 	bl	22676 <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
   1ca0c:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   1ca0e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ca12:	075b      	lsls	r3, r3, #29
   1ca14:	d507      	bpl.n	1ca26 <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
   1ca16:	4620      	mov	r0, r4
   1ca18:	f7ff feee 	bl	1c7f8 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
   1ca1c:	4620      	mov	r0, r4
}
   1ca1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
   1ca22:	f7ff bebf 	b.w	1c7a4 <shell_op_cursor_position_synchronize>
}
   1ca26:	bd10      	pop	{r4, pc}
   1ca28:	00027587 	.word	0x00027587

0001ca2c <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
   1ca2c:	b538      	push	{r3, r4, r5, lr}
   1ca2e:	460c      	mov	r4, r1
   1ca30:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   1ca32:	6842      	ldr	r2, [r0, #4]

	sh_uart->ctrl_blk->dev = (const struct device *)config;
   1ca34:	6811      	ldr	r1, [r2, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
   1ca36:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   1ca38:	68a3      	ldr	r3, [r4, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   1ca3a:	e9c1 4500 	strd	r4, r5, [r1]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   1ca3e:	b123      	cbz	r3, 1ca4a <init+0x1e>
   1ca40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca42:	b113      	cbz	r3, 1ca4a <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
   1ca44:	4620      	mov	r0, r4
   1ca46:	4904      	ldr	r1, [pc, #16]	; (1ca58 <init+0x2c>)
   1ca48:	4798      	blx	r3
	if (api->irq_rx_enable) {
   1ca4a:	68a3      	ldr	r3, [r4, #8]
   1ca4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ca4e:	b10b      	cbz	r3, 1ca54 <init+0x28>
		api->irq_rx_enable(dev);
   1ca50:	4620      	mov	r0, r4
   1ca52:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
   1ca54:	2000      	movs	r0, #0
   1ca56:	bd38      	pop	{r3, r4, r5, pc}
   1ca58:	0001ca8d 	.word	0x0001ca8d

0001ca5c <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   1ca5c:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1ca5e:	4809      	ldr	r0, [pc, #36]	; (1ca84 <enable_shell_uart+0x28>)
   1ca60:	f002 fc44 	bl	1f2ec <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	uint32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	if (dev == NULL) {
   1ca64:	4601      	mov	r1, r0
   1ca66:	b150      	cbz	r0, 1ca7e <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
   1ca68:	2304      	movs	r3, #4
   1ca6a:	9300      	str	r3, [sp, #0]
   1ca6c:	2301      	movs	r3, #1
   1ca6e:	4806      	ldr	r0, [pc, #24]	; (1ca88 <enable_shell_uart+0x2c>)
   1ca70:	461a      	mov	r2, r3
   1ca72:	f7ff fd15 	bl	1c4a0 <shell_init>

	return 0;
   1ca76:	2000      	movs	r0, #0
}
   1ca78:	b003      	add	sp, #12
   1ca7a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   1ca7e:	f06f 0012 	mvn.w	r0, #18
   1ca82:	e7f9      	b.n	1ca78 <enable_shell_uart+0x1c>
   1ca84:	00027850 	.word	0x00027850
   1ca88:	00024014 	.word	0x00024014

0001ca8c <uart_callback>:
{
   1ca8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ca90:	4682      	mov	sl, r0
   1ca92:	460d      	mov	r5, r1
	if (api->irq_update) {
   1ca94:	6883      	ldr	r3, [r0, #8]
   1ca96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ca98:	b103      	cbz	r3, 1ca9c <uart_callback+0x10>
		return api->irq_update(dev);
   1ca9a:	4798      	blx	r3
	if (api->irq_rx_ready) {
   1ca9c:	f8da 3008 	ldr.w	r3, [sl, #8]
   1caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1caa2:	2b00      	cmp	r3, #0
   1caa4:	d031      	beq.n	1cb0a <uart_callback+0x7e>
		return api->irq_rx_ready(dev);
   1caa6:	4650      	mov	r0, sl
   1caa8:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   1caaa:	b370      	cbz	r0, 1cb0a <uart_callback+0x7e>
	bool new_data = false;
   1caac:	f04f 0800 	mov.w	r8, #0
   1cab0:	4e35      	ldr	r6, [pc, #212]	; (1cb88 <uart_callback+0xfc>)
   1cab2:	4b36      	ldr	r3, [pc, #216]	; (1cb8c <uart_callback+0x100>)
			LOG_WRN("RX ring buffer full.");
   1cab4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 1cb94 <uart_callback+0x108>
   1cab8:	1af6      	subs	r6, r6, r3
   1caba:	08f6      	lsrs	r6, r6, #3
   1cabc:	01b6      	lsls	r6, r6, #6
   1cabe:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   1cac2:	68e8      	ldr	r0, [r5, #12]
   1cac4:	a901      	add	r1, sp, #4
   1cac6:	6902      	ldr	r2, [r0, #16]
   1cac8:	f004 fddd 	bl	21686 <ring_buf_put_claim>
		if (len > 0) {
   1cacc:	4607      	mov	r7, r0
   1cace:	2800      	cmp	r0, #0
   1cad0:	d03d      	beq.n	1cb4e <uart_callback+0xc2>
	if (api->fifo_read) {
   1cad2:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cad6:	699c      	ldr	r4, [r3, #24]
   1cad8:	b124      	cbz	r4, 1cae4 <uart_callback+0x58>
		return api->fifo_read(dev, rx_data, size);
   1cada:	4602      	mov	r2, r0
   1cadc:	9901      	ldr	r1, [sp, #4]
   1cade:	4650      	mov	r0, sl
   1cae0:	47a0      	blx	r4
   1cae2:	4604      	mov	r4, r0
				new_data = true;
   1cae4:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   1cae6:	4621      	mov	r1, r4
   1cae8:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
   1caea:	bf18      	it	ne
   1caec:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   1caf0:	f004 fde5 	bl	216be <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
   1caf4:	b10c      	cbz	r4, 1cafa <uart_callback+0x6e>
   1caf6:	42a7      	cmp	r7, r4
   1caf8:	d0e3      	beq.n	1cac2 <uart_callback+0x36>
	if (new_data) {
   1cafa:	f1b8 0f00 	cmp.w	r8, #0
   1cafe:	d004      	beq.n	1cb0a <uart_callback+0x7e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   1cb00:	682b      	ldr	r3, [r5, #0]
   1cb02:	2000      	movs	r0, #0
   1cb04:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1cb08:	4790      	blx	r2
	if (api->irq_tx_ready) {
   1cb0a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cb10:	b1d3      	cbz	r3, 1cb48 <uart_callback+0xbc>
		return api->irq_tx_ready(dev);
   1cb12:	4650      	mov	r0, sl
   1cb14:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   1cb16:	b1b8      	cbz	r0, 1cb48 <uart_callback+0xbc>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   1cb18:	68a8      	ldr	r0, [r5, #8]
   1cb1a:	a901      	add	r1, sp, #4
   1cb1c:	6902      	ldr	r2, [r0, #16]
   1cb1e:	f004 fdfa 	bl	21716 <ring_buf_get_claim>
	if (len) {
   1cb22:	4604      	mov	r4, r0
   1cb24:	b350      	cbz	r0, 1cb7c <uart_callback+0xf0>
	if (api->fifo_fill) {
   1cb26:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cb2a:	695b      	ldr	r3, [r3, #20]
   1cb2c:	b323      	cbz	r3, 1cb78 <uart_callback+0xec>
		return api->fifo_fill(dev, tx_data, size);
   1cb2e:	4602      	mov	r2, r0
   1cb30:	9901      	ldr	r1, [sp, #4]
   1cb32:	4650      	mov	r0, sl
   1cb34:	4798      	blx	r3
   1cb36:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   1cb38:	68a8      	ldr	r0, [r5, #8]
   1cb3a:	f004 fe08 	bl	2174e <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1cb3e:	682b      	ldr	r3, [r5, #0]
   1cb40:	2001      	movs	r0, #1
   1cb42:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1cb46:	4790      	blx	r2
}
   1cb48:	b002      	add	sp, #8
   1cb4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			LOG_WRN("RX ring buffer full.");
   1cb4e:	f8d9 3000 	ldr.w	r3, [r9]
   1cb52:	f013 0f06 	tst.w	r3, #6
   1cb56:	d003      	beq.n	1cb60 <uart_callback+0xd4>
   1cb58:	4631      	mov	r1, r6
   1cb5a:	480d      	ldr	r0, [pc, #52]	; (1cb90 <uart_callback+0x104>)
   1cb5c:	f004 fe90 	bl	21880 <log_0>
	if (api->fifo_read) {
   1cb60:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cb64:	699c      	ldr	r4, [r3, #24]
   1cb66:	2c00      	cmp	r4, #0
   1cb68:	d0c7      	beq.n	1cafa <uart_callback+0x6e>
		return api->fifo_read(dev, rx_data, size);
   1cb6a:	2201      	movs	r2, #1
   1cb6c:	4650      	mov	r0, sl
   1cb6e:	f10d 0103 	add.w	r1, sp, #3
   1cb72:	47a0      	blx	r4
   1cb74:	4604      	mov	r4, r0
   1cb76:	e7bd      	b.n	1caf4 <uart_callback+0x68>
	return 0;
   1cb78:	4619      	mov	r1, r3
   1cb7a:	e7dd      	b.n	1cb38 <uart_callback+0xac>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   1cb7c:	4650      	mov	r0, sl
   1cb7e:	f005 fde7 	bl	22750 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   1cb82:	682b      	ldr	r3, [r5, #0]
   1cb84:	60dc      	str	r4, [r3, #12]
   1cb86:	e7da      	b.n	1cb3e <uart_callback+0xb2>
   1cb88:	00023fec 	.word	0x00023fec
   1cb8c:	00023fa4 	.word	0x00023fa4
   1cb90:	00027857 	.word	0x00027857
   1cb94:	20010158 	.word	0x20010158

0001cb98 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   1cb98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb9c:	4604      	mov	r4, r0
   1cb9e:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   1cba0:	460e      	mov	r6, r1
   1cba2:	2900      	cmp	r1, #0
   1cba4:	d06e      	beq.n	1cc84 <formatted_text_print.constprop.0+0xec>
   1cba6:	2500      	movs	r5, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   1cba8:	5d73      	ldrb	r3, [r6, r5]
   1cbaa:	2b20      	cmp	r3, #32
   1cbac:	d025      	beq.n	1cbfa <formatted_text_print.constprop.0+0x62>
   1cbae:	3b09      	subs	r3, #9
   1cbb0:	2b04      	cmp	r3, #4
   1cbb2:	d922      	bls.n	1cbfa <formatted_text_print.constprop.0+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   1cbb4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1cc88 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1cbb8:	4630      	mov	r0, r6
   1cbba:	f006 fa47 	bl	2304c <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   1cbbe:	68a3      	ldr	r3, [r4, #8]
		length = shell_strlen(str) - offset;
   1cbc0:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   1cbc2:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
   1cbc4:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   1cbc6:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   1cbca:	4298      	cmp	r0, r3
   1cbcc:	eb06 0a05 	add.w	sl, r6, r5
   1cbd0:	d915      	bls.n	1cbfe <formatted_text_print.constprop.0+0x66>
   1cbd2:	4650      	mov	r0, sl
		size_t idx = 0;
   1cbd4:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   1cbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
   1cbda:	2a20      	cmp	r2, #32
   1cbdc:	d006      	beq.n	1cbec <formatted_text_print.constprop.0+0x54>
   1cbde:	f1a2 0c09 	sub.w	ip, r2, #9
   1cbe2:	f1bc 0f04 	cmp.w	ip, #4
   1cbe6:	d802      	bhi.n	1cbee <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   1cbe8:	2a0a      	cmp	r2, #10
   1cbea:	d031      	beq.n	1cc50 <formatted_text_print.constprop.0+0xb8>
   1cbec:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   1cbee:	eb08 0207 	add.w	r2, r8, r7
   1cbf2:	4291      	cmp	r1, r2
   1cbf4:	d92b      	bls.n	1cc4e <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   1cbf6:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   1cbf8:	e7ed      	b.n	1cbd6 <formatted_text_print.constprop.0+0x3e>
		++offset;
   1cbfa:	3501      	adds	r5, #1
   1cbfc:	e7d4      	b.n	1cba8 <formatted_text_print.constprop.0+0x10>
   1cbfe:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
   1cc00:	2700      	movs	r7, #0
   1cc02:	42b8      	cmp	r0, r7
   1cc04:	d017      	beq.n	1cc36 <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
   1cc06:	f813 2b01 	ldrb.w	r2, [r3], #1
   1cc0a:	eb05 0907 	add.w	r9, r5, r7
   1cc0e:	2a0a      	cmp	r2, #10
   1cc10:	d11b      	bne.n	1cc4a <formatted_text_print.constprop.0+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1cc12:	6960      	ldr	r0, [r4, #20]
   1cc14:	f005 f9fb 	bl	2200e <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
   1cc18:	463a      	mov	r2, r7
   1cc1a:	4651      	mov	r1, sl
   1cc1c:	4620      	mov	r0, r4
   1cc1e:	f005 fccb 	bl	225b8 <shell_write>
   1cc22:	4919      	ldr	r1, [pc, #100]	; (1cc88 <formatted_text_print.constprop.0+0xf0>)
   1cc24:	6960      	ldr	r0, [r4, #20]
   1cc26:	f005 fde7 	bl	227f8 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
   1cc2a:	4641      	mov	r1, r8
   1cc2c:	4620      	mov	r0, r4
					offset += idx + 1;
   1cc2e:	f109 0501 	add.w	r5, r9, #1
					shell_op_cursor_horiz_move(shell,
   1cc32:	f7ff fd93 	bl	1c75c <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   1cc36:	6960      	ldr	r0, [r4, #20]
   1cc38:	1971      	adds	r1, r6, r5
   1cc3a:	f005 fddd 	bl	227f8 <shell_raw_fprintf>
   1cc3e:	6960      	ldr	r0, [r4, #20]
   1cc40:	4911      	ldr	r1, [pc, #68]	; (1cc88 <formatted_text_print.constprop.0+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
   1cc42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc46:	f005 bdd7 	b.w	227f8 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   1cc4a:	3701      	adds	r7, #1
   1cc4c:	e7d9      	b.n	1cc02 <formatted_text_print.constprop.0+0x6a>
   1cc4e:	461f      	mov	r7, r3
   1cc50:	6960      	ldr	r0, [r4, #20]
   1cc52:	f005 f9dc 	bl	2200e <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
   1cc56:	463a      	mov	r2, r7
   1cc58:	4651      	mov	r1, sl
   1cc5a:	4620      	mov	r0, r4
   1cc5c:	f005 fcac 	bl	225b8 <shell_write>
		offset += length;
   1cc60:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   1cc62:	5d73      	ldrb	r3, [r6, r5]
   1cc64:	2b20      	cmp	r3, #32
   1cc66:	d00b      	beq.n	1cc80 <formatted_text_print.constprop.0+0xe8>
   1cc68:	3b09      	subs	r3, #9
   1cc6a:	2b04      	cmp	r3, #4
   1cc6c:	d908      	bls.n	1cc80 <formatted_text_print.constprop.0+0xe8>
   1cc6e:	4649      	mov	r1, r9
   1cc70:	6960      	ldr	r0, [r4, #20]
   1cc72:	f005 fdc1 	bl	227f8 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
   1cc76:	4641      	mov	r1, r8
   1cc78:	4620      	mov	r0, r4
   1cc7a:	f7ff fd6f 	bl	1c75c <shell_op_cursor_horiz_move>
	while (true) {
   1cc7e:	e79b      	b.n	1cbb8 <formatted_text_print.constprop.0+0x20>
			++offset;
   1cc80:	3501      	adds	r5, #1
   1cc82:	e7ee      	b.n	1cc62 <formatted_text_print.constprop.0+0xca>
}
   1cc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cc88:	0002745d 	.word	0x0002745d

0001cc8c <shell_help_subcmd_print>:
 * help string
 */
void shell_help_subcmd_print(const struct shell *shell,
			     const struct shell_static_entry *parent,
			     const char *description)
{
   1cc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc90:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   1cc92:	2100      	movs	r1, #0
{
   1cc94:	4604      	mov	r4, r0
   1cc96:	4617      	mov	r7, r2
	uint16_t longest = 0U;
   1cc98:	460d      	mov	r5, r1
{
   1cc9a:	b08d      	sub	sp, #52	; 0x34

	/* Searching for the longest subcommand to print. */
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1cc9c:	4630      	mov	r0, r6
   1cc9e:	aa07      	add	r2, sp, #28
   1cca0:	f101 0801 	add.w	r8, r1, #1
   1cca4:	f7ff fd1c 	bl	1c6e0 <shell_cmd_get>
   1cca8:	4601      	mov	r1, r0
   1ccaa:	b9b0      	cbnz	r0, 1ccda <shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
	};

	/* No help to print */
	if (longest == 0) {
   1ccac:	b195      	cbz	r5, 1ccd4 <shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
   1ccae:	b11f      	cbz	r7, 1ccb8 <shell_help_subcmd_print+0x2c>
		shell_internal_fprintf(shell, SHELL_NORMAL, description);
   1ccb0:	463a      	mov	r2, r7
   1ccb2:	4620      	mov	r0, r4
   1ccb4:	f005 fcdf 	bl	22676 <shell_internal_fprintf>
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1ccb8:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1ccba:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1cd38 <shell_help_subcmd_print+0xac>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
   1ccbe:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1cd3c <shell_help_subcmd_print+0xb0>
   1ccc2:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1cd40 <shell_help_subcmd_print+0xb4>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1ccc6:	1c4b      	adds	r3, r1, #1
   1ccc8:	4630      	mov	r0, r6
   1ccca:	aa07      	add	r2, sp, #28
   1cccc:	9304      	str	r3, [sp, #16]
   1ccce:	f7ff fd07 	bl	1c6e0 <shell_cmd_get>
   1ccd2:	b960      	cbnz	r0, 1ccee <shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   1ccd4:	b00d      	add	sp, #52	; 0x34
   1ccd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
   1ccda:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1ccdc:	b110      	cbz	r0, 1cce4 <shell_help_subcmd_print+0x58>
   1ccde:	f006 f9b5 	bl	2304c <strlen>
   1cce2:	b280      	uxth	r0, r0
   1cce4:	4285      	cmp	r5, r0
   1cce6:	bf38      	it	cc
   1cce8:	4605      	movcc	r5, r0
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1ccea:	4641      	mov	r1, r8
   1ccec:	e7d6      	b.n	1cc9c <shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   1ccee:	6803      	ldr	r3, [r0, #0]
   1ccf0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1ccf4:	4810      	ldr	r0, [pc, #64]	; (1cd38 <shell_help_subcmd_print+0xac>)
		help_item_print(shell, entry->syntax, longest, entry->help);
   1ccf6:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1ccf8:	f006 f9a8 	bl	2304c <strlen>
	if (item_name == NULL) {
   1ccfc:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1ccfe:	4607      	mov	r7, r0
	if (item_name == NULL) {
   1cd00:	b17b      	cbz	r3, 1cd22 <shell_help_subcmd_print+0x96>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
   1cd02:	e9cd 3801 	strd	r3, r8, [sp, #4]
   1cd06:	4652      	mov	r2, sl
   1cd08:	4643      	mov	r3, r8
   1cd0a:	2100      	movs	r1, #0
   1cd0c:	4620      	mov	r0, r4
   1cd0e:	9500      	str	r5, [sp, #0]
   1cd10:	f005 fcb1 	bl	22676 <shell_internal_fprintf>
	if (item_help == NULL) {
   1cd14:	f1b9 0f00 	cmp.w	r9, #0
   1cd18:	d105      	bne.n	1cd26 <shell_help_subcmd_print+0x9a>
   1cd1a:	4659      	mov	r1, fp
   1cd1c:	6960      	ldr	r0, [r4, #20]
   1cd1e:	f005 fd6b 	bl	227f8 <shell_raw_fprintf>
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1cd22:	9904      	ldr	r1, [sp, #16]
   1cd24:	e7cf      	b.n	1ccc6 <shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   1cd26:	1c6a      	adds	r2, r5, #1
   1cd28:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   1cd2c:	4649      	mov	r1, r9
   1cd2e:	4620      	mov	r0, r4
   1cd30:	b292      	uxth	r2, r2
   1cd32:	f7ff ff31 	bl	1cb98 <formatted_text_print.constprop.0>
   1cd36:	e7f4      	b.n	1cd22 <shell_help_subcmd_print+0x96>
   1cd38:	000278a7 	.word	0x000278a7
   1cd3c:	00027899 	.word	0x00027899
   1cd40:	0002745d 	.word	0x0002745d

0001cd44 <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell,
			  const struct shell_static_entry *cmd)
{
   1cd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd46:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   1cd48:	6808      	ldr	r0, [r1, #0]
{
   1cd4a:	460d      	mov	r5, r1
   1cd4c:	b1b8      	cbz	r0, 1cd7e <shell_help_cmd_print+0x3a>
   1cd4e:	f006 f97d 	bl	2304c <strlen>
   1cd52:	b284      	uxth	r4, r0
   1cd54:	4f0b      	ldr	r7, [pc, #44]	; (1cd84 <shell_help_cmd_print+0x40>)
   1cd56:	4638      	mov	r0, r7
   1cd58:	f006 f978 	bl	2304c <strlen>
	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   1cd5c:	4404      	add	r4, r0

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   1cd5e:	2100      	movs	r1, #0
   1cd60:	4630      	mov	r0, r6
   1cd62:	682b      	ldr	r3, [r5, #0]
   1cd64:	4a08      	ldr	r2, [pc, #32]	; (1cd88 <shell_help_cmd_print+0x44>)
	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   1cd66:	b2a4      	uxth	r4, r4
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   1cd68:	9700      	str	r7, [sp, #0]
   1cd6a:	f005 fc84 	bl	22676 <shell_internal_fprintf>
				cmd->syntax, cmd_sep);

	formatted_text_print(shell, cmd->help, field_width, false);
   1cd6e:	4622      	mov	r2, r4
   1cd70:	4630      	mov	r0, r6
   1cd72:	6869      	ldr	r1, [r5, #4]
}
   1cd74:	b003      	add	sp, #12
   1cd76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   1cd7a:	f7ff bf0d 	b.w	1cb98 <formatted_text_print.constprop.0>
   1cd7e:	4604      	mov	r4, r0
   1cd80:	e7e8      	b.n	1cd54 <shell_help_cmd_print+0x10>
   1cd82:	bf00      	nop
   1cd84:	000278a3 	.word	0x000278a3
   1cd88:	00027812 	.word	0x00027812

0001cd8c <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
   1cd8c:	b538      	push	{r3, r4, r5, lr}
   1cd8e:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   1cd90:	4d06      	ldr	r5, [pc, #24]	; (1cdac <cmd_clear+0x20>)
   1cd92:	4a07      	ldr	r2, [pc, #28]	; (1cdb0 <cmd_clear+0x24>)
   1cd94:	4629      	mov	r1, r5
   1cd96:	6940      	ldr	r0, [r0, #20]
   1cd98:	f005 fd75 	bl	22886 <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   1cd9c:	6960      	ldr	r0, [r4, #20]
   1cd9e:	4629      	mov	r1, r5
   1cda0:	4a04      	ldr	r2, [pc, #16]	; (1cdb4 <cmd_clear+0x28>)
   1cda2:	f005 fd70 	bl	22886 <shell_raw_fprintf>

	return 0;
}
   1cda6:	2000      	movs	r0, #0
   1cda8:	bd38      	pop	{r3, r4, r5, pc}
   1cdaa:	bf00      	nop
   1cdac:	00027587 	.word	0x00027587
   1cdb0:	00027ece 	.word	0x00027ece
   1cdb4:	00027ed2 	.word	0x00027ed2

0001cdb8 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   1cdb8:	b510      	push	{r4, lr}
   1cdba:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   1cdbc:	4a04      	ldr	r2, [pc, #16]	; (1cdd0 <cmd_resize_default+0x18>)
   1cdbe:	4905      	ldr	r1, [pc, #20]	; (1cdd4 <cmd_resize_default+0x1c>)
   1cdc0:	6940      	ldr	r0, [r0, #20]
   1cdc2:	f005 fd60 	bl	22886 <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   1cdc6:	68a3      	ldr	r3, [r4, #8]
   1cdc8:	4a03      	ldr	r2, [pc, #12]	; (1cdd8 <cmd_resize_default+0x20>)

	return 0;
}
   1cdca:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   1cdcc:	629a      	str	r2, [r3, #40]	; 0x28
}
   1cdce:	bd10      	pop	{r4, pc}
   1cdd0:	00027ed7 	.word	0x00027ed7
   1cdd4:	00027587 	.word	0x00027587
   1cdd8:	00500018 	.word	0x00500018

0001cddc <cmd_shell_stats_show>:
{
   1cddc:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
   1cdde:	6983      	ldr	r3, [r0, #24]
   1cde0:	2100      	movs	r1, #0
   1cde2:	681b      	ldr	r3, [r3, #0]
   1cde4:	4a02      	ldr	r2, [pc, #8]	; (1cdf0 <cmd_shell_stats_show+0x14>)
   1cde6:	f005 f8f0 	bl	21fca <shell_fprintf>
}
   1cdea:	2000      	movs	r0, #0
   1cdec:	bd08      	pop	{r3, pc}
   1cdee:	bf00      	nop
   1cdf0:	000278aa 	.word	0x000278aa

0001cdf4 <cmd_help>:
{
   1cdf4:	b510      	push	{r4, lr}
   1cdf6:	4604      	mov	r4, r0
	shell_print(shell,
   1cdf8:	2100      	movs	r1, #0
   1cdfa:	4a07      	ldr	r2, [pc, #28]	; (1ce18 <cmd_help+0x24>)
   1cdfc:	f005 f8e5 	bl	21fca <shell_fprintf>
	shell_print(shell,
   1ce00:	4620      	mov	r0, r4
   1ce02:	2100      	movs	r1, #0
   1ce04:	4a05      	ldr	r2, [pc, #20]	; (1ce1c <cmd_help+0x28>)
   1ce06:	f005 f8e0 	bl	21fca <shell_fprintf>
		shell_help_subcmd_print(shell, NULL, "\nAvailable commands:\n");
   1ce0a:	4620      	mov	r0, r4
   1ce0c:	2100      	movs	r1, #0
   1ce0e:	4a04      	ldr	r2, [pc, #16]	; (1ce20 <cmd_help+0x2c>)
   1ce10:	f7ff ff3c 	bl	1cc8c <shell_help_subcmd_print>
}
   1ce14:	2000      	movs	r0, #0
   1ce16:	bd10      	pop	{r4, pc}
   1ce18:	000278b9 	.word	0x000278b9
   1ce1c:	000279a8 	.word	0x000279a8
   1ce20:	00027a71 	.word	0x00027a71

0001ce24 <cmd_history>:
{
   1ce24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce26:	4604      	mov	r4, r0
	size_t i = 0;
   1ce28:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
   1ce2a:	4f0f      	ldr	r7, [pc, #60]	; (1ce68 <cmd_history+0x44>)
{
   1ce2c:	b085      	sub	sp, #20
				  shell->ctx->temp_buff, &len);
   1ce2e:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
   1ce30:	f10d 030e 	add.w	r3, sp, #14
   1ce34:	2101      	movs	r1, #1
   1ce36:	68e0      	ldr	r0, [r4, #12]
   1ce38:	f502 729c 	add.w	r2, r2, #312	; 0x138
   1ce3c:	f005 fd45 	bl	228ca <shell_history_get>
		if (len) {
   1ce40:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1ce44:	68a3      	ldr	r3, [r4, #8]
   1ce46:	b158      	cbz	r0, 1ce60 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
   1ce48:	f503 739c 	add.w	r3, r3, #312	; 0x138
   1ce4c:	9300      	str	r3, [sp, #0]
   1ce4e:	463a      	mov	r2, r7
   1ce50:	462b      	mov	r3, r5
   1ce52:	2100      	movs	r1, #0
   1ce54:	4620      	mov	r0, r4
   1ce56:	1c6e      	adds	r6, r5, #1
   1ce58:	f005 f8b7 	bl	21fca <shell_fprintf>
   1ce5c:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
   1ce5e:	e7e6      	b.n	1ce2e <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
   1ce60:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
   1ce64:	b005      	add	sp, #20
   1ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ce68:	00026cbb 	.word	0x00026cbb

0001ce6c <cmd_echo>:
	if (argc == 2) {
   1ce6c:	2902      	cmp	r1, #2
{
   1ce6e:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   1ce70:	d10c      	bne.n	1ce8c <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
   1ce72:	6853      	ldr	r3, [r2, #4]
   1ce74:	9301      	str	r3, [sp, #4]
   1ce76:	4b0d      	ldr	r3, [pc, #52]	; (1ceac <cmd_echo+0x40>)
   1ce78:	9300      	str	r3, [sp, #0]
   1ce7a:	6813      	ldr	r3, [r2, #0]
   1ce7c:	4a0c      	ldr	r2, [pc, #48]	; (1ceb0 <cmd_echo+0x44>)
   1ce7e:	f005 f8a4 	bl	21fca <shell_fprintf>
   1ce82:	f06f 0015 	mvn.w	r0, #21
}
   1ce86:	b003      	add	sp, #12
   1ce88:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   1ce8c:	6883      	ldr	r3, [r0, #8]
   1ce8e:	4a09      	ldr	r2, [pc, #36]	; (1ceb4 <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1;
   1ce90:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ce94:	2100      	movs	r1, #0
   1ce96:	f013 0f04 	tst.w	r3, #4
   1ce9a:	4b07      	ldr	r3, [pc, #28]	; (1ceb8 <cmd_echo+0x4c>)
   1ce9c:	bf18      	it	ne
   1ce9e:	4613      	movne	r3, r2
   1cea0:	4a06      	ldr	r2, [pc, #24]	; (1cebc <cmd_echo+0x50>)
   1cea2:	f005 f892 	bl	21fca <shell_fprintf>
	return 0;
   1cea6:	2000      	movs	r0, #0
   1cea8:	e7ed      	b.n	1ce86 <cmd_echo+0x1a>
   1ceaa:	bf00      	nop
   1ceac:	00027a94 	.word	0x00027a94
   1ceb0:	00027a8b 	.word	0x00027a8b
   1ceb4:	00027544 	.word	0x00027544
   1ceb8:	00027a87 	.word	0x00027a87
   1cebc:	00027aa9 	.word	0x00027aa9

0001cec0 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   1cec0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   1cec2:	2901      	cmp	r1, #1
{
   1cec4:	4605      	mov	r5, r0
   1cec6:	b085      	sub	sp, #20
	if (argc != 1) {
   1cec8:	d00d      	beq.n	1cee6 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   1ceca:	6853      	ldr	r3, [r2, #4]
   1cecc:	2102      	movs	r1, #2
   1cece:	9301      	str	r3, [sp, #4]
   1ced0:	4b52      	ldr	r3, [pc, #328]	; (1d01c <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   1ced2:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
   1ced6:	9300      	str	r3, [sp, #0]
   1ced8:	6813      	ldr	r3, [r2, #0]
   1ceda:	4a51      	ldr	r2, [pc, #324]	; (1d020 <cmd_resize+0x160>)
   1cedc:	f005 f875 	bl	21fca <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   1cee0:	4620      	mov	r0, r4
   1cee2:	b005      	add	sp, #20
   1cee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
   1cee6:	2400      	movs	r4, #0
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   1cee8:	4a4e      	ldr	r2, [pc, #312]	; (1d024 <cmd_resize+0x164>)
   1ceea:	494f      	ldr	r1, [pc, #316]	; (1d028 <cmd_resize+0x168>)
   1ceec:	6940      	ldr	r0, [r0, #20]
   1ceee:	f005 fcca 	bl	22886 <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   1cef2:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   1cef6:	4628      	mov	r0, r5
   1cef8:	f7ff fc20 	bl	1c73c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   1cefc:	21fa      	movs	r1, #250	; 0xfa
   1cefe:	4628      	mov	r0, r5
   1cf00:	f7ff fc2c 	bl	1c75c <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   1cf04:	68a8      	ldr	r0, [r5, #8]
   1cf06:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cf0a:	4621      	mov	r1, r4
   1cf0c:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
   1cf10:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   1cf14:	f006 f90e 	bl	23134 <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   1cf18:	4944      	ldr	r1, [pc, #272]	; (1d02c <cmd_resize+0x16c>)
   1cf1a:	6968      	ldr	r0, [r5, #20]
   1cf1c:	f005 fcb3 	bl	22886 <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1cf20:	6968      	ldr	r0, [r5, #20]
   1cf22:	f005 f874 	bl	2200e <shell_fprintf_buffer_flush>
   1cf26:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   1cf2a:	6868      	ldr	r0, [r5, #4]
   1cf2c:	2201      	movs	r2, #1
   1cf2e:	6803      	ldr	r3, [r0, #0]
   1cf30:	f10d 010b 	add.w	r1, sp, #11
   1cf34:	691f      	ldr	r7, [r3, #16]
   1cf36:	ab03      	add	r3, sp, #12
   1cf38:	47b8      	blx	r7
			if (cnt == 0) {
   1cf3a:	9b03      	ldr	r3, [sp, #12]
   1cf3c:	b953      	cbnz	r3, 1cf54 <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
   1cf3e:	3e01      	subs	r6, #1
   1cf40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1cf44:	b2b6      	uxth	r6, r6
   1cf46:	f006 fc5b 	bl	23800 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   1cf4a:	2e00      	cmp	r6, #0
   1cf4c:	d1ed      	bne.n	1cf2a <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
   1cf4e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1cf52:	e031      	b.n	1cfb8 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   1cf54:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cf58:	68aa      	ldr	r2, [r5, #8]
   1cf5a:	2b1b      	cmp	r3, #27
   1cf5c:	d053      	beq.n	1d006 <cmd_resize+0x146>
   1cf5e:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
   1cf62:	291b      	cmp	r1, #27
   1cf64:	d1e1      	bne.n	1cf2a <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
   1cf66:	2b52      	cmp	r3, #82	; 0x52
   1cf68:	d14d      	bne.n	1d006 <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	4414      	add	r4, r2
   1cf6e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
   1cf72:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   1cf76:	295b      	cmp	r1, #91	; 0x5b
   1cf78:	d14d      	bne.n	1d016 <cmd_resize+0x156>
	*y = 0U;
   1cf7a:	461f      	mov	r7, r3
				buff_idx = 2U;
   1cf7c:	2602      	movs	r6, #2
   1cf7e:	f502 709d 	add.w	r0, r2, #314	; 0x13a
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   1cf82:	f810 1b01 	ldrb.w	r1, [r0], #1
   1cf86:	3601      	adds	r6, #1
   1cf88:	293b      	cmp	r1, #59	; 0x3b
   1cf8a:	b2b6      	uxth	r6, r6
   1cf8c:	d126      	bne.n	1cfdc <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1cf8e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1cf92:	d0dc      	beq.n	1cf4e <cmd_resize+0x8e>
	*x = 0U;
   1cf94:	2300      	movs	r3, #0
   1cf96:	f506 709c 	add.w	r0, r6, #312	; 0x138
   1cf9a:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
   1cf9c:	f810 4b01 	ldrb.w	r4, [r0], #1
   1cfa0:	bb34      	cbnz	r4, 1cff0 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   1cfa2:	2bfa      	cmp	r3, #250	; 0xfa
   1cfa4:	bf28      	it	cs
   1cfa6:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   1cfa8:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   1cfaa:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   1cfac:	463b      	mov	r3, r7
   1cfae:	bf28      	it	cs
   1cfb0:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   1cfb2:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   1cfb6:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   1cfb8:	4a1d      	ldr	r2, [pc, #116]	; (1d030 <cmd_resize+0x170>)
   1cfba:	491b      	ldr	r1, [pc, #108]	; (1d028 <cmd_resize+0x168>)
   1cfbc:	6968      	ldr	r0, [r5, #20]
   1cfbe:	f005 fc62 	bl	22886 <shell_raw_fprintf>
	if (err != 0) {
   1cfc2:	2c00      	cmp	r4, #0
   1cfc4:	d08c      	beq.n	1cee0 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   1cfc6:	68ab      	ldr	r3, [r5, #8]
   1cfc8:	4a1a      	ldr	r2, [pc, #104]	; (1d034 <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   1cfca:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
   1cfcc:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   1cfce:	4628      	mov	r0, r5
   1cfd0:	4a19      	ldr	r2, [pc, #100]	; (1d038 <cmd_resize+0x178>)
   1cfd2:	f004 fffa 	bl	21fca <shell_fprintf>
   1cfd6:	f06f 0407 	mvn.w	r4, #7
   1cfda:	e781      	b.n	1cee0 <cmd_resize+0x20>
					*y = *y * 10U +
   1cfdc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1cfe0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1cfe4:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   1cfe6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   1cfea:	b29f      	uxth	r7, r3
					if (buff_idx >=
   1cfec:	d1c9      	bne.n	1cf82 <cmd_resize+0xc2>
   1cfee:	e7ae      	b.n	1cf4e <cmd_resize+0x8e>
					*x = *x * 10U +
   1cff0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   1cff4:	3601      	adds	r6, #1
					*x = *x * 10U +
   1cff6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   1cffa:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   1cffc:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
   1cffe:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   1d000:	b2a3      	uxth	r3, r4
					if (buff_idx >=
   1d002:	d9cb      	bls.n	1cf9c <cmd_resize+0xdc>
   1d004:	e7a3      	b.n	1cf4e <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
   1d006:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   1d008:	3401      	adds	r4, #1
   1d00a:	b2a4      	uxth	r4, r4
   1d00c:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
   1d00e:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   1d012:	d98a      	bls.n	1cf2a <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
   1d014:	2300      	movs	r3, #0
   1d016:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
   1d01a:	e798      	b.n	1cf4e <cmd_resize+0x8e>
   1d01c:	00027a94 	.word	0x00027a94
   1d020:	00027a8b 	.word	0x00027a8b
   1d024:	00027ec8 	.word	0x00027ec8
   1d028:	00027587 	.word	0x00027587
   1d02c:	00027edd 	.word	0x00027edd
   1d030:	00027ecb 	.word	0x00027ecb
   1d034:	00500018 	.word	0x00500018
   1d038:	00027aba 	.word	0x00027aba

0001d03c <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   1d03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d040:	4607      	mov	r7, r0
   1d042:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   1d044:	4689      	mov	r9, r1
{
   1d046:	b089      	sub	sp, #36	; 0x24
	if (cmd == NULL) {
   1d048:	b921      	cbnz	r1, 1d054 <shell_wildcard_process+0x18>
		return ret_val;
   1d04a:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   1d04c:	4620      	mov	r0, r4
   1d04e:	b009      	add	sp, #36	; 0x24
   1d050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
   1d054:	4610      	mov	r0, r2
   1d056:	f005 fe1b 	bl	22c90 <shell_wildcard_character_exist>
   1d05a:	2800      	cmp	r0, #0
   1d05c:	d0f5      	beq.n	1d04a <shell_wildcard_process+0xe>
	size_t cnt = 0;
   1d05e:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1d062:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
   1d064:	4641      	mov	r1, r8
   1d066:	e024      	b.n	1d0b2 <shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1d068:	465c      	mov	r4, fp
   1d06a:	e03c      	b.n	1d0e6 <shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   1d06c:	4629      	mov	r1, r5
   1d06e:	f50a 709c 	add.w	r0, sl, #312	; 0x138
   1d072:	f005 ffa0 	bl	22fb6 <strstr>
	if (!completion_addr) {
   1d076:	4606      	mov	r6, r0
   1d078:	2800      	cmp	r0, #0
   1d07a:	d04e      	beq.n	1d11a <shell_wildcard_process+0xde>
   1d07c:	f005 ffe6 	bl	2304c <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   1d080:	b282      	uxth	r2, r0
   1d082:	1c60      	adds	r0, r4, #1
   1d084:	4631      	mov	r1, r6
   1d086:	3201      	adds	r2, #1
   1d088:	4430      	add	r0, r6
   1d08a:	f006 f811 	bl	230b0 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   1d08e:	4622      	mov	r2, r4
   1d090:	4659      	mov	r1, fp
   1d092:	4630      	mov	r0, r6
   1d094:	f006 f823 	bl	230de <memcpy>
	completion_addr[cmd_len] = ' ';
   1d098:	f04f 0320 	mov.w	r3, #32
   1d09c:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   1d09e:	f8ba 0036 	ldrh.w	r0, [sl, #54]	; 0x36
			cnt++;
   1d0a2:	f108 0801 	add.w	r8, r8, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
   1d0a6:	4404      	add	r4, r0
   1d0a8:	3401      	adds	r4, #1
   1d0aa:	f8aa 4036 	strh.w	r4, [sl, #54]	; 0x36
			ret_val = command_add(shell->ctx->temp_buff,
   1d0ae:	2400      	movs	r4, #0
   1d0b0:	9901      	ldr	r1, [sp, #4]
	while ((entry = shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   1d0b2:	1c4b      	adds	r3, r1, #1
   1d0b4:	4648      	mov	r0, r9
   1d0b6:	aa03      	add	r2, sp, #12
   1d0b8:	9301      	str	r3, [sp, #4]
   1d0ba:	f7ff fb11 	bl	1c6e0 <shell_cmd_get>
   1d0be:	4606      	mov	r6, r0
   1d0c0:	b1f8      	cbz	r0, 1d102 <shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   1d0c2:	2200      	movs	r2, #0
   1d0c4:	4628      	mov	r0, r5
   1d0c6:	6831      	ldr	r1, [r6, #0]
   1d0c8:	f003 ff28 	bl	20f1c <fnmatch>
   1d0cc:	2800      	cmp	r0, #0
   1d0ce:	d1ef      	bne.n	1d0b0 <shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   1d0d0:	f8d6 b000 	ldr.w	fp, [r6]
   1d0d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
   1d0d8:	f1bb 0f00 	cmp.w	fp, #0
   1d0dc:	d0c4      	beq.n	1d068 <shell_wildcard_process+0x2c>
   1d0de:	4658      	mov	r0, fp
   1d0e0:	f005 ffb4 	bl	2304c <strlen>
   1d0e4:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   1d0e6:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
   1d0ea:	3201      	adds	r2, #1
   1d0ec:	4422      	add	r2, r4
   1d0ee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   1d0f2:	ddbb      	ble.n	1d06c <shell_wildcard_process+0x30>
				shell_internal_fprintf(shell,
   1d0f4:	462b      	mov	r3, r5
   1d0f6:	2104      	movs	r1, #4
   1d0f8:	4638      	mov	r0, r7
   1d0fa:	4a09      	ldr	r2, [pc, #36]	; (1d120 <shell_wildcard_process+0xe4>)
   1d0fc:	f005 fabb 	bl	22676 <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   1d100:	2401      	movs	r4, #1
	if (cnt > 0) {
   1d102:	f1b8 0f00 	cmp.w	r8, #0
   1d106:	d0a1      	beq.n	1d04c <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
   1d108:	68b8      	ldr	r0, [r7, #8]
   1d10a:	462a      	mov	r2, r5
   1d10c:	f100 0136 	add.w	r1, r0, #54	; 0x36
   1d110:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1d114:	f005 f8a7 	bl	22266 <shell_pattern_remove>
	return ret_val;
   1d118:	e798      	b.n	1d04c <shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1d11a:	2402      	movs	r4, #2
   1d11c:	e7f1      	b.n	1d102 <shell_wildcard_process+0xc6>
   1d11e:	bf00      	nop
   1d120:	00027ee2 	.word	0x00027ee2

0001d124 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1d124:	4604      	mov	r4, r0
   1d126:	b508      	push	{r3, lr}
	__asm__ volatile(
   1d128:	f04f 0220 	mov.w	r2, #32
   1d12c:	f3ef 8311 	mrs	r3, BASEPRI
   1d130:	f382 8811 	msr	BASEPRI, r2
   1d134:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1d138:	f005 fe84 	bl	22e44 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   1d13c:	4620      	mov	r0, r4
   1d13e:	f000 ffff 	bl	1e140 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1d142:	4803      	ldr	r0, [pc, #12]	; (1d150 <sys_reboot+0x2c>)
   1d144:	f003 ffb9 	bl	210ba <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1d148:	f000 fc8a 	bl	1da60 <arch_cpu_idle>
   1d14c:	e7fc      	b.n	1d148 <sys_reboot+0x24>
   1d14e:	bf00      	nop
   1d150:	00027f3a 	.word	0x00027f3a

0001d154 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d154:	b510      	push	{r4, lr}
   1d156:	4807      	ldr	r0, [pc, #28]	; (1d174 <uart_console_init+0x20>)
   1d158:	f002 f8c8 	bl	1f2ec <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   1d15c:	4c06      	ldr	r4, [pc, #24]	; (1d178 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1d15e:	4b07      	ldr	r3, [pc, #28]	; (1d17c <uart_console_init+0x28>)
   1d160:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   1d162:	4620      	mov	r0, r4
   1d164:	f001 f9e4 	bl	1e530 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d168:	4620      	mov	r0, r4
   1d16a:	f7fc fce7 	bl	19b3c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   1d16e:	2000      	movs	r0, #0
   1d170:	bd10      	pop	{r4, pc}
   1d172:	bf00      	nop
   1d174:	00027850 	.word	0x00027850
   1d178:	0001d181 	.word	0x0001d181
   1d17c:	20010b0c 	.word	0x20010b0c

0001d180 <console_out>:
	if ('\n' == c) {
   1d180:	280a      	cmp	r0, #10
{
   1d182:	b538      	push	{r3, r4, r5, lr}
   1d184:	4604      	mov	r4, r0
   1d186:	4d07      	ldr	r5, [pc, #28]	; (1d1a4 <console_out+0x24>)
	if ('\n' == c) {
   1d188:	d104      	bne.n	1d194 <console_out+0x14>
   1d18a:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   1d18c:	6883      	ldr	r3, [r0, #8]
   1d18e:	210d      	movs	r1, #13
   1d190:	685b      	ldr	r3, [r3, #4]
   1d192:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1d194:	6828      	ldr	r0, [r5, #0]
   1d196:	6883      	ldr	r3, [r0, #8]
   1d198:	b2e1      	uxtb	r1, r4
   1d19a:	685b      	ldr	r3, [r3, #4]
   1d19c:	4798      	blx	r3
}
   1d19e:	4620      	mov	r0, r4
   1d1a0:	bd38      	pop	{r3, r4, r5, pc}
   1d1a2:	bf00      	nop
   1d1a4:	20010b0c 	.word	0x20010b0c

0001d1a8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d1a8:	b570      	push	{r4, r5, r6, lr}
   1d1aa:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   1d1ac:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   1d1ae:	480d      	ldr	r0, [pc, #52]	; (1d1e4 <onoff_stop+0x3c>)
{
   1d1b0:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1d1b2:	1a23      	subs	r3, r4, r0
   1d1b4:	109a      	asrs	r2, r3, #2
   1d1b6:	4b0c      	ldr	r3, [pc, #48]	; (1d1e8 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   1d1b8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1d1ba:	4353      	muls	r3, r2
   1d1bc:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   1d1be:	435d      	muls	r5, r3
   1d1c0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1d1c4:	4418      	add	r0, r3
   1d1c6:	f005 fdb1 	bl	22d2c <set_off_state>
	if (err < 0) {
   1d1ca:	1e01      	subs	r1, r0, #0
   1d1cc:	db04      	blt.n	1d1d8 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   1d1ce:	4b07      	ldr	r3, [pc, #28]	; (1d1ec <onoff_stop+0x44>)
   1d1d0:	442b      	add	r3, r5
   1d1d2:	685b      	ldr	r3, [r3, #4]
   1d1d4:	4798      	blx	r3
	return 0;
   1d1d6:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   1d1d8:	4620      	mov	r0, r4
   1d1da:	4633      	mov	r3, r6
}
   1d1dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1d1e0:	4718      	bx	r3
   1d1e2:	bf00      	nop
   1d1e4:	20010b20 	.word	0x20010b20
   1d1e8:	b6db6db7 	.word	0xb6db6db7
   1d1ec:	00026860 	.word	0x00026860

0001d1f0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1d1f4:	4c0f      	ldr	r4, [pc, #60]	; (1d234 <onoff_start+0x44>)
   1d1f6:	4d10      	ldr	r5, [pc, #64]	; (1d238 <onoff_start+0x48>)
   1d1f8:	1b03      	subs	r3, r0, r4
   1d1fa:	109b      	asrs	r3, r3, #2
   1d1fc:	435d      	muls	r5, r3
   1d1fe:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   1d200:	250c      	movs	r5, #12
   1d202:	435d      	muls	r5, r3
{
   1d204:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1d206:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1d20a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1d20c:	4420      	add	r0, r4
   1d20e:	2140      	movs	r1, #64	; 0x40
   1d210:	f005 fda5 	bl	22d5e <set_starting_state>
	if (err < 0) {
   1d214:	1e01      	subs	r1, r0, #0
   1d216:	db08      	blt.n	1d22a <onoff_start+0x3a>
	subdata->cb = cb;
   1d218:	4b08      	ldr	r3, [pc, #32]	; (1d23c <onoff_start+0x4c>)
   1d21a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1d21c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1d220:	4b07      	ldr	r3, [pc, #28]	; (1d240 <onoff_start+0x50>)
   1d222:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1d224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1d228:	4718      	bx	r3
		notify(mgr, err);
   1d22a:	4638      	mov	r0, r7
   1d22c:	4633      	mov	r3, r6
}
   1d22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1d232:	4718      	bx	r3
   1d234:	20010b20 	.word	0x20010b20
   1d238:	b6db6db7 	.word	0xb6db6db7
   1d23c:	00022dc1 	.word	0x00022dc1
   1d240:	00026860 	.word	0x00026860

0001d244 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   1d244:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d246:	2200      	movs	r2, #0
   1d248:	2101      	movs	r1, #1
{
   1d24a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d24c:	2005      	movs	r0, #5
   1d24e:	f000 fb0b 	bl	1d868 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d252:	2005      	movs	r0, #5
   1d254:	f000 faea 	bl	1d82c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d258:	480f      	ldr	r0, [pc, #60]	; (1d298 <clk_init+0x54>)
   1d25a:	f001 ff35 	bl	1f0c8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d25e:	4b0f      	ldr	r3, [pc, #60]	; (1d29c <clk_init+0x58>)
   1d260:	4298      	cmp	r0, r3
   1d262:	d115      	bne.n	1d290 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d264:	f006 f922 	bl	234ac <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1d268:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d26a:	490d      	ldr	r1, [pc, #52]	; (1d2a0 <clk_init+0x5c>)
   1d26c:	4630      	mov	r0, r6
   1d26e:	f003 ff8d 	bl	2118c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1d272:	2800      	cmp	r0, #0
   1d274:	db0b      	blt.n	1d28e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d276:	2501      	movs	r5, #1
   1d278:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1d27a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d27c:	4908      	ldr	r1, [pc, #32]	; (1d2a0 <clk_init+0x5c>)
   1d27e:	f104 001c 	add.w	r0, r4, #28
   1d282:	f003 ff83 	bl	2118c <onoff_manager_init>
		if (err < 0) {
   1d286:	2800      	cmp	r0, #0
   1d288:	db01      	blt.n	1d28e <clk_init+0x4a>
	}

	return 0;
   1d28a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d28c:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   1d28e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d290:	f06f 0004 	mvn.w	r0, #4
   1d294:	e7fb      	b.n	1d28e <clk_init+0x4a>
   1d296:	bf00      	nop
   1d298:	0001d2d9 	.word	0x0001d2d9
   1d29c:	0bad0000 	.word	0x0bad0000
   1d2a0:	000268a8 	.word	0x000268a8

0001d2a4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1d2a4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1d2a6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   1d2a8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   1d2aa:	434b      	muls	r3, r1
   1d2ac:	4808      	ldr	r0, [pc, #32]	; (1d2d0 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   1d2ae:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1d2b0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1d2b2:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1d2b4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d2b8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1d2ba:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1d2bc:	f005 fd6d 	bl	22d9a <set_on_state>
	if (callback) {
   1d2c0:	b12d      	cbz	r5, 1d2ce <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d2c2:	4632      	mov	r2, r6
   1d2c4:	462b      	mov	r3, r5
}
   1d2c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1d2ca:	4802      	ldr	r0, [pc, #8]	; (1d2d4 <clkstarted_handle.constprop.0+0x30>)
   1d2cc:	4718      	bx	r3
}
   1d2ce:	bd70      	pop	{r4, r5, r6, pc}
   1d2d0:	20010b20 	.word	0x20010b20
   1d2d4:	200100e0 	.word	0x200100e0

0001d2d8 <clock_event_handler>:
	switch (event) {
   1d2d8:	b110      	cbz	r0, 1d2e0 <clock_event_handler+0x8>
   1d2da:	2801      	cmp	r0, #1
   1d2dc:	d004      	beq.n	1d2e8 <clock_event_handler+0x10>
   1d2de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d2e0:	4b03      	ldr	r3, [pc, #12]	; (1d2f0 <clock_event_handler+0x18>)
   1d2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d2e4:	075b      	lsls	r3, r3, #29
   1d2e6:	d101      	bne.n	1d2ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d2e8:	f7ff bfdc 	b.w	1d2a4 <clkstarted_handle.constprop.0>
}
   1d2ec:	4770      	bx	lr
   1d2ee:	bf00      	nop
   1d2f0:	20010b20 	.word	0x20010b20

0001d2f4 <hfclk_start>:
{
   1d2f4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   1d2f6:	f006 faeb 	bl	238d0 <z_impl_k_uptime_ticks>
   1d2fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d2fe:	460c      	mov	r4, r1
   1d300:	fba0 0103 	umull	r0, r1, r0, r3
   1d304:	fb03 1104 	mla	r1, r3, r4, r1
}
   1d308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d30c:	0bc3      	lsrs	r3, r0, #15
		hf_start_tstamp = k_uptime_get();
   1d30e:	4a04      	ldr	r2, [pc, #16]	; (1d320 <hfclk_start+0x2c>)
   1d310:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1d314:	2001      	movs	r0, #1
   1d316:	0bc9      	lsrs	r1, r1, #15
   1d318:	e9c2 3100 	strd	r3, r1, [r2]
   1d31c:	f001 bee4 	b.w	1f0e8 <nrfx_clock_start>
   1d320:	200105e0 	.word	0x200105e0

0001d324 <generic_hfclk_start>:
{
   1d324:	b508      	push	{r3, lr}
   1d326:	f04f 0320 	mov.w	r3, #32
   1d32a:	f3ef 8111 	mrs	r1, BASEPRI
   1d32e:	f383 8811 	msr	BASEPRI, r3
   1d332:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d336:	4a11      	ldr	r2, [pc, #68]	; (1d37c <generic_hfclk_start+0x58>)
   1d338:	6813      	ldr	r3, [r2, #0]
   1d33a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1d33e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1d342:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d344:	d00b      	beq.n	1d35e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d346:	4a0e      	ldr	r2, [pc, #56]	; (1d380 <generic_hfclk_start+0x5c>)
   1d348:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d34c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d350:	f013 0301 	ands.w	r3, r3, #1
   1d354:	d003      	beq.n	1d35e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   1d356:	480b      	ldr	r0, [pc, #44]	; (1d384 <generic_hfclk_start+0x60>)
   1d358:	f005 fd1f 	bl	22d9a <set_on_state>
			already_started = true;
   1d35c:	2301      	movs	r3, #1
	__asm__ volatile(
   1d35e:	f381 8811 	msr	BASEPRI, r1
   1d362:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d366:	b123      	cbz	r3, 1d372 <generic_hfclk_start+0x4e>
}
   1d368:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   1d36c:	2000      	movs	r0, #0
   1d36e:	f7ff bf99 	b.w	1d2a4 <clkstarted_handle.constprop.0>
}
   1d372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   1d376:	f7ff bfbd 	b.w	1d2f4 <hfclk_start>
   1d37a:	bf00      	nop
   1d37c:	20010b70 	.word	0x20010b70
   1d380:	40005000 	.word	0x40005000
   1d384:	20010b60 	.word	0x20010b60

0001d388 <hfclk_stop>:
{
   1d388:	b510      	push	{r4, lr}
   1d38a:	f006 faa1 	bl	238d0 <z_impl_k_uptime_ticks>
   1d38e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d392:	460c      	mov	r4, r1
   1d394:	fba0 0103 	umull	r0, r1, r0, r3
   1d398:	fb03 1104 	mla	r1, r3, r4, r1
}
   1d39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d3a0:	0bc3      	lsrs	r3, r0, #15
		hf_stop_tstamp = k_uptime_get();
   1d3a2:	4a04      	ldr	r2, [pc, #16]	; (1d3b4 <hfclk_stop+0x2c>)
   1d3a4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1d3a8:	2001      	movs	r0, #1
   1d3aa:	0bc9      	lsrs	r1, r1, #15
   1d3ac:	e9c2 3100 	strd	r3, r1, [r2]
   1d3b0:	f001 becc 	b.w	1f14c <nrfx_clock_stop>
   1d3b4:	200105e8 	.word	0x200105e8

0001d3b8 <generic_hfclk_stop>:
   1d3b8:	4b06      	ldr	r3, [pc, #24]	; (1d3d4 <generic_hfclk_stop+0x1c>)
   1d3ba:	e8d3 2fef 	ldaex	r2, [r3]
   1d3be:	f022 0102 	bic.w	r1, r2, #2
   1d3c2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1d3c6:	2800      	cmp	r0, #0
   1d3c8:	d1f7      	bne.n	1d3ba <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d3ca:	07d3      	lsls	r3, r2, #31
   1d3cc:	d401      	bmi.n	1d3d2 <generic_hfclk_stop+0x1a>
	hfclk_stop();
   1d3ce:	f7ff bfdb 	b.w	1d388 <hfclk_stop>
}
   1d3d2:	4770      	bx	lr
   1d3d4:	20010b70 	.word	0x20010b70

0001d3d8 <cmd_status>:
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   1d3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d3dc:	4f32      	ldr	r7, [pc, #200]	; (1d4a8 <cmd_status+0xd0>)
   1d3de:	4604      	mov	r4, r0
   1d3e0:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   1d3e4:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   1d3e8:	f04f 0320 	mov.w	r3, #32
   1d3ec:	f3ef 8811 	mrs	r8, BASEPRI
   1d3f0:	f383 8811 	msr	BASEPRI, r3
   1d3f4:	f3bf 8f6f 	isb	sy
   1d3f8:	f006 fa6a 	bl	238d0 <z_impl_k_uptime_ticks>
   1d3fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d400:	460a      	mov	r2, r1
   1d402:	fba0 0103 	umull	r0, r1, r0, r3
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d406:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
   1d40a:	fb03 1102 	mla	r1, r3, r2, r1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d40e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   1d412:	4b26      	ldr	r3, [pc, #152]	; (1d4ac <cmd_status+0xd4>)
   1d414:	0bc5      	lsrs	r5, r0, #15
   1d416:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   1d41a:	4b25      	ldr	r3, [pc, #148]	; (1d4b0 <cmd_status+0xd8>)
   1d41c:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   1d420:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
   1d424:	f388 8811 	msr	BASEPRI, r8
   1d428:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   1d42c:	2100      	movs	r1, #0
   1d42e:	4620      	mov	r0, r4
   1d430:	4a20      	ldr	r2, [pc, #128]	; (1d4b4 <cmd_status+0xdc>)
   1d432:	f004 fdca 	bl	21fca <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1d436:	f019 0f01 	tst.w	r9, #1
   1d43a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1d4cc <cmd_status+0xf4>
   1d43e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d4d0 <cmd_status+0xf8>
   1d442:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   1d446:	4f1c      	ldr	r7, [pc, #112]	; (1d4b8 <cmd_status+0xe0>)
   1d448:	9300      	str	r3, [sp, #0]
   1d44a:	4620      	mov	r0, r4
   1d44c:	bf14      	ite	ne
   1d44e:	4643      	movne	r3, r8
   1d450:	463b      	moveq	r3, r7
   1d452:	2100      	movs	r1, #0
   1d454:	4a19      	ldr	r2, [pc, #100]	; (1d4bc <cmd_status+0xe4>)
   1d456:	f004 fdb8 	bl	21fca <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1d45a:	eba5 030b 	sub.w	r3, r5, fp
   1d45e:	4620      	mov	r0, r4
   1d460:	9300      	str	r3, [sp, #0]
   1d462:	2100      	movs	r1, #0
   1d464:	465b      	mov	r3, fp
   1d466:	4a16      	ldr	r2, [pc, #88]	; (1d4c0 <cmd_status+0xe8>)
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1d468:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   1d46c:	f004 fdad 	bl	21fca <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   1d470:	4653      	mov	r3, sl
   1d472:	4620      	mov	r0, r4
   1d474:	2100      	movs	r1, #0
   1d476:	4a13      	ldr	r2, [pc, #76]	; (1d4c4 <cmd_status+0xec>)
   1d478:	9500      	str	r5, [sp, #0]
   1d47a:	f004 fda6 	bl	21fca <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   1d47e:	4620      	mov	r0, r4
   1d480:	2100      	movs	r1, #0
   1d482:	4a11      	ldr	r2, [pc, #68]	; (1d4c8 <cmd_status+0xf0>)
   1d484:	f004 fda1 	bl	21fca <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   1d488:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   1d48c:	4620      	mov	r0, r4
   1d48e:	9300      	str	r3, [sp, #0]
   1d490:	2100      	movs	r1, #0
   1d492:	2e00      	cmp	r6, #0
   1d494:	bf14      	ite	ne
   1d496:	4643      	movne	r3, r8
   1d498:	463b      	moveq	r3, r7
   1d49a:	4a08      	ldr	r2, [pc, #32]	; (1d4bc <cmd_status+0xe4>)
   1d49c:	f004 fd95 	bl	21fca <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   1d4a0:	2000      	movs	r0, #0
   1d4a2:	b003      	add	sp, #12
   1d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4a8:	40005000 	.word	0x40005000
   1d4ac:	200105e0 	.word	0x200105e0
   1d4b0:	200105e8 	.word	0x200105e8
   1d4b4:	00027f68 	.word	0x00027f68
   1d4b8:	00027f63 	.word	0x00027f63
   1d4bc:	00027f73 	.word	0x00027f73
   1d4c0:	00027f8d 	.word	0x00027f8d
   1d4c4:	00027faf 	.word	0x00027faf
   1d4c8:	00027fd0 	.word	0x00027fd0
   1d4cc:	20010b20 	.word	0x20010b20
   1d4d0:	0002745e 	.word	0x0002745e

0001d4d4 <api_blocking_start>:
{
   1d4d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d4d6:	2200      	movs	r2, #0
   1d4d8:	2301      	movs	r3, #1
   1d4da:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1d4de:	ab04      	add	r3, sp, #16
   1d4e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d4e4:	4a09      	ldr	r2, [pc, #36]	; (1d50c <api_blocking_start+0x38>)
   1d4e6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d4e8:	f8cd d000 	str.w	sp, [sp]
   1d4ec:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d4f0:	f005 fc8c 	bl	22e0c <api_start>
	if (err < 0) {
   1d4f4:	2800      	cmp	r0, #0
   1d4f6:	db05      	blt.n	1d504 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1d4f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d4fc:	2300      	movs	r3, #0
   1d4fe:	4668      	mov	r0, sp
   1d500:	f002 fe52 	bl	201a8 <z_impl_k_sem_take>
}
   1d504:	b007      	add	sp, #28
   1d506:	f85d fb04 	ldr.w	pc, [sp], #4
   1d50a:	bf00      	nop
   1d50c:	00022dd3 	.word	0x00022dd3

0001d510 <z_nrf_clock_control_lf_on>:
{
   1d510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d514:	2201      	movs	r2, #1
   1d516:	4607      	mov	r7, r0
   1d518:	4936      	ldr	r1, [pc, #216]	; (1d5f4 <z_nrf_clock_control_lf_on+0xe4>)
   1d51a:	e8d1 3fef 	ldaex	r3, [r1]
   1d51e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   1d522:	2800      	cmp	r0, #0
   1d524:	d1f9      	bne.n	1d51a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   1d526:	b933      	cbnz	r3, 1d536 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d528:	4933      	ldr	r1, [pc, #204]	; (1d5f8 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   1d52a:	4834      	ldr	r0, [pc, #208]	; (1d5fc <z_nrf_clock_control_lf_on+0xec>)
   1d52c:	604b      	str	r3, [r1, #4]
   1d52e:	60cb      	str	r3, [r1, #12]
   1d530:	608a      	str	r2, [r1, #8]
   1d532:	f003 fe3e 	bl	211b2 <onoff_request>
	switch (start_mode) {
   1d536:	1e7b      	subs	r3, r7, #1
   1d538:	2b01      	cmp	r3, #1
   1d53a:	d82e      	bhi.n	1d59a <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d53c:	2f01      	cmp	r7, #1
   1d53e:	d106      	bne.n	1d54e <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d540:	4b2f      	ldr	r3, [pc, #188]	; (1d600 <z_nrf_clock_control_lf_on+0xf0>)
   1d542:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d546:	f003 0303 	and.w	r3, r3, #3
   1d54a:	2b02      	cmp	r3, #2
   1d54c:	d025      	beq.n	1d59a <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d54e:	f006 f951 	bl	237f4 <k_is_in_isr>
   1d552:	4604      	mov	r4, r0
   1d554:	b918      	cbnz	r0, 1d55e <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   1d556:	4b2b      	ldr	r3, [pc, #172]	; (1d604 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   1d558:	781b      	ldrb	r3, [r3, #0]
   1d55a:	2b00      	cmp	r3, #0
   1d55c:	d144      	bne.n	1d5e8 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   1d55e:	f04f 0320 	mov.w	r3, #32
   1d562:	f3ef 8611 	mrs	r6, BASEPRI
   1d566:	f383 8811 	msr	BASEPRI, r3
   1d56a:	f3bf 8f6f 	isb	sy
   1d56e:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d570:	4d23      	ldr	r5, [pc, #140]	; (1d600 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d572:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1d610 <z_nrf_clock_control_lf_on+0x100>
   1d576:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d578:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d57c:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1d580:	03d2      	lsls	r2, r2, #15
   1d582:	d50c      	bpl.n	1d59e <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d584:	f003 0303 	and.w	r3, r3, #3
   1d588:	2b02      	cmp	r3, #2
   1d58a:	d001      	beq.n	1d590 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d58c:	2f01      	cmp	r7, #1
   1d58e:	d106      	bne.n	1d59e <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   1d590:	b334      	cbz	r4, 1d5e0 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1d592:	f386 8811 	msr	BASEPRI, r6
   1d596:	f3bf 8f6f 	isb	sy
}
   1d59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   1d59e:	b1d4      	cbz	r4, 1d5d6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d5a0:	4630      	mov	r0, r6
   1d5a2:	f000 fa6b 	bl	1da7c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d5a6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d5aa:	b2db      	uxtb	r3, r3
   1d5ac:	2b01      	cmp	r3, #1
   1d5ae:	d1e3      	bne.n	1d578 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d5b0:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1d5b4:	2a00      	cmp	r2, #0
   1d5b6:	d0df      	beq.n	1d578 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d5b8:	2200      	movs	r2, #0
   1d5ba:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d5be:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d5c2:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d5c4:	2120      	movs	r1, #32
   1d5c6:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   1d5ca:	4a0f      	ldr	r2, [pc, #60]	; (1d608 <z_nrf_clock_control_lf_on+0xf8>)
   1d5cc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d5d0:	4a0e      	ldr	r2, [pc, #56]	; (1d60c <z_nrf_clock_control_lf_on+0xfc>)
   1d5d2:	6013      	str	r3, [r2, #0]
}
   1d5d4:	e7d0      	b.n	1d578 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   1d5d6:	2100      	movs	r1, #0
   1d5d8:	2021      	movs	r0, #33	; 0x21
   1d5da:	f002 fd99 	bl	20110 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d5de:	e7e2      	b.n	1d5a6 <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   1d5e0:	2302      	movs	r3, #2
   1d5e2:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1d5e6:	e7d8      	b.n	1d59a <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   1d5e8:	2202      	movs	r2, #2
   1d5ea:	4b05      	ldr	r3, [pc, #20]	; (1d600 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   1d5ec:	4606      	mov	r6, r0
   1d5ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d5f2:	e7bd      	b.n	1d570 <z_nrf_clock_control_lf_on+0x60>
   1d5f4:	20010b74 	.word	0x20010b74
   1d5f8:	20010b10 	.word	0x20010b10
   1d5fc:	20010b3c 	.word	0x20010b3c
   1d600:	40005000 	.word	0x40005000
   1d604:	2001ecbf 	.word	0x2001ecbf
   1d608:	e000e100 	.word	0xe000e100
   1d60c:	40005008 	.word	0x40005008
   1d610:	40005104 	.word	0x40005104

0001d614 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   1d614:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1d616:	4b08      	ldr	r3, [pc, #32]	; (1d638 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1d618:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d61c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d620:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   1d624:	4290      	cmp	r0, r2
   1d626:	d100      	bne.n	1d62a <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   1d628:	4770      	bx	lr
   1d62a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1d62e:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1d630:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1d634:	e7f2      	b.n	1d61c <handle_next_cycle_case+0x8>
   1d636:	bf00      	nop
   1d638:	40015000 	.word	0x40015000

0001d63c <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d63c:	2200      	movs	r2, #0
   1d63e:	4b07      	ldr	r3, [pc, #28]	; (1d65c <rtc_nrf_isr+0x20>)
   1d640:	601a      	str	r2, [r3, #0]
   1d642:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1d644:	4a06      	ldr	r2, [pc, #24]	; (1d660 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   1d646:	4b07      	ldr	r3, [pc, #28]	; (1d664 <rtc_nrf_isr+0x28>)
   1d648:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   1d64c:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   1d64e:	1ac0      	subs	r0, r0, r3
   1d650:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1d654:	4403      	add	r3, r0
   1d656:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   1d658:	f003 b852 	b.w	20700 <z_clock_announce>
   1d65c:	40015140 	.word	0x40015140
   1d660:	20010b78 	.word	0x20010b78
   1d664:	40015000 	.word	0x40015000

0001d668 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   1d668:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   1d66a:	2400      	movs	r4, #0
   1d66c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d670:	4d0e      	ldr	r5, [pc, #56]	; (1d6ac <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d672:	4b0f      	ldr	r3, [pc, #60]	; (1d6b0 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   1d674:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d678:	601c      	str	r4, [r3, #0]
   1d67a:	681b      	ldr	r3, [r3, #0]
   1d67c:	4b0d      	ldr	r3, [pc, #52]	; (1d6b4 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d67e:	2101      	movs	r1, #1
   1d680:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   1d684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d688:	4622      	mov	r2, r4
   1d68a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   1d68e:	2015      	movs	r0, #21
   1d690:	f000 f8ea 	bl	1d868 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d694:	2015      	movs	r0, #21
   1d696:	f000 f8c9 	bl	1d82c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d69a:	2301      	movs	r3, #1
   1d69c:	4a06      	ldr	r2, [pc, #24]	; (1d6b8 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   1d69e:	2002      	movs	r0, #2
   1d6a0:	6013      	str	r3, [r2, #0]
   1d6a2:	602b      	str	r3, [r5, #0]
   1d6a4:	f7ff ff34 	bl	1d510 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d6a8:	4620      	mov	r0, r4
   1d6aa:	bd38      	pop	{r3, r4, r5, pc}
   1d6ac:	40015000 	.word	0x40015000
   1d6b0:	40015140 	.word	0x40015140
   1d6b4:	e000e100 	.word	0xe000e100
   1d6b8:	40015008 	.word	0x40015008

0001d6bc <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   1d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1d6be:	4b2e      	ldr	r3, [pc, #184]	; (1d778 <z_clock_set_timeout+0xbc>)
   1d6c0:	f1b0 3fff 	cmp.w	r0, #4294967295
   1d6c4:	bf08      	it	eq
   1d6c6:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d6c8:	3801      	subs	r0, #1
   1d6ca:	2800      	cmp	r0, #0
   1d6cc:	dd41      	ble.n	1d752 <z_clock_set_timeout+0x96>
   1d6ce:	4298      	cmp	r0, r3
   1d6d0:	bfa8      	it	ge
   1d6d2:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   1d6d4:	4b29      	ldr	r3, [pc, #164]	; (1d77c <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   1d6d6:	492a      	ldr	r1, [pc, #168]	; (1d780 <z_clock_set_timeout+0xc4>)
   1d6d8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1d6dc:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d6de:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   1d6e0:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   1d6e2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1d6e6:	bf18      	it	ne
   1d6e8:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   1d6ea:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1d6ee:	3401      	adds	r4, #1
   1d6f0:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   1d6f2:	4c21      	ldr	r4, [pc, #132]	; (1d778 <z_clock_set_timeout+0xbc>)
   1d6f4:	4d23      	ldr	r5, [pc, #140]	; (1d784 <z_clock_set_timeout+0xc8>)
   1d6f6:	42a0      	cmp	r0, r4
   1d6f8:	bf94      	ite	ls
   1d6fa:	180c      	addls	r4, r1, r0
   1d6fc:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   1d6fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1d702:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   1d706:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   1d70a:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d70e:	602e      	str	r6, [r5, #0]
   1d710:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1d712:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d716:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1d71a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   1d71e:	1a53      	subs	r3, r2, r1
   1d720:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   1d724:	2b01      	cmp	r3, #1
   1d726:	d104      	bne.n	1d732 <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   1d728:	200f      	movs	r0, #15
   1d72a:	f006 f869 	bl	23800 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d72e:	602e      	str	r6, [r5, #0]
   1d730:	682b      	ldr	r3, [r5, #0]
   1d732:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1d736:	4b14      	ldr	r3, [pc, #80]	; (1d788 <z_clock_set_timeout+0xcc>)
   1d738:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   1d73c:	4b0f      	ldr	r3, [pc, #60]	; (1d77c <z_clock_set_timeout+0xc0>)
   1d73e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d742:	1a22      	subs	r2, r4, r0
   1d744:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   1d748:	2a01      	cmp	r2, #1
   1d74a:	d104      	bne.n	1d756 <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   1d74c:	f7ff ff62 	bl	1d614 <handle_next_cycle_case>
   1d750:	e00b      	b.n	1d76a <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1d752:	2000      	movs	r0, #0
   1d754:	e7be      	b.n	1d6d4 <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1d756:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d75a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   1d75e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d762:	1a24      	subs	r4, r4, r0
   1d764:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   1d766:	0223      	lsls	r3, r4, #8
   1d768:	d4f0      	bmi.n	1d74c <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   1d76a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d76e:	4b03      	ldr	r3, [pc, #12]	; (1d77c <z_clock_set_timeout+0xc0>)
   1d770:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   1d774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d776:	bf00      	nop
   1d778:	007fffff 	.word	0x007fffff
   1d77c:	40015000 	.word	0x40015000
   1d780:	20010b78 	.word	0x20010b78
   1d784:	40015140 	.word	0x40015140
   1d788:	e000e100 	.word	0xe000e100

0001d78c <z_clock_elapsed>:
	__asm__ volatile(
   1d78c:	f04f 0220 	mov.w	r2, #32
   1d790:	f3ef 8311 	mrs	r3, BASEPRI
   1d794:	f382 8811 	msr	BASEPRI, r2
   1d798:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   1d79c:	4a06      	ldr	r2, [pc, #24]	; (1d7b8 <z_clock_elapsed+0x2c>)
   1d79e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   1d7a2:	4a06      	ldr	r2, [pc, #24]	; (1d7bc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   1d7a4:	6812      	ldr	r2, [r2, #0]
   1d7a6:	1a80      	subs	r0, r0, r2
   1d7a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   1d7ac:	f383 8811 	msr	BASEPRI, r3
   1d7b0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   1d7b4:	4770      	bx	lr
   1d7b6:	bf00      	nop
   1d7b8:	40015000 	.word	0x40015000
   1d7bc:	20010b78 	.word	0x20010b78

0001d7c0 <z_timer_cycle_get_32>:
	__asm__ volatile(
   1d7c0:	f04f 0320 	mov.w	r3, #32
   1d7c4:	f3ef 8211 	mrs	r2, BASEPRI
   1d7c8:	f383 8811 	msr	BASEPRI, r3
   1d7cc:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   1d7d0:	4906      	ldr	r1, [pc, #24]	; (1d7ec <z_timer_cycle_get_32+0x2c>)
   1d7d2:	4b07      	ldr	r3, [pc, #28]	; (1d7f0 <z_timer_cycle_get_32+0x30>)
   1d7d4:	6808      	ldr	r0, [r1, #0]
   1d7d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   1d7da:	f382 8811 	msr	BASEPRI, r2
   1d7de:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   1d7e2:	1a1b      	subs	r3, r3, r0
   1d7e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   1d7e8:	4418      	add	r0, r3
   1d7ea:	4770      	bx	lr
   1d7ec:	20010b78 	.word	0x20010b78
   1d7f0:	40015000 	.word	0x40015000

0001d7f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1d7f4:	4a0a      	ldr	r2, [pc, #40]	; (1d820 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1d7f6:	490b      	ldr	r1, [pc, #44]	; (1d824 <arch_swap+0x30>)
	_current->arch.basepri = key;
   1d7f8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1d7fa:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   1d7fc:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
	_current->arch.swap_return_value = _k_neg_eagain;
   1d800:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1d804:	4908      	ldr	r1, [pc, #32]	; (1d828 <arch_swap+0x34>)
   1d806:	684b      	ldr	r3, [r1, #4]
   1d808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1d80c:	604b      	str	r3, [r1, #4]
   1d80e:	2300      	movs	r3, #0
   1d810:	f383 8811 	msr	BASEPRI, r3
   1d814:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1d818:	6893      	ldr	r3, [r2, #8]
}
   1d81a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   1d81e:	4770      	bx	lr
   1d820:	20010bbc 	.word	0x20010bbc
   1d824:	0002697c 	.word	0x0002697c
   1d828:	e000ed00 	.word	0xe000ed00

0001d82c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1d82c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1d82e:	2b00      	cmp	r3, #0
   1d830:	db08      	blt.n	1d844 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d832:	2201      	movs	r2, #1
   1d834:	f000 001f 	and.w	r0, r0, #31
   1d838:	fa02 f000 	lsl.w	r0, r2, r0
   1d83c:	4a02      	ldr	r2, [pc, #8]	; (1d848 <arch_irq_enable+0x1c>)
   1d83e:	095b      	lsrs	r3, r3, #5
   1d840:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   1d844:	4770      	bx	lr
   1d846:	bf00      	nop
   1d848:	e000e100 	.word	0xe000e100

0001d84c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1d84c:	4b05      	ldr	r3, [pc, #20]	; (1d864 <arch_irq_is_enabled+0x18>)
   1d84e:	0942      	lsrs	r2, r0, #5
   1d850:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1d854:	2301      	movs	r3, #1
   1d856:	f000 001f 	and.w	r0, r0, #31
   1d85a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1d85e:	4010      	ands	r0, r2
   1d860:	4770      	bx	lr
   1d862:	bf00      	nop
   1d864:	e000e100 	.word	0xe000e100

0001d868 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1d868:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1d86a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   1d86c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d870:	bfac      	ite	ge
   1d872:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d876:	4b06      	ldrlt	r3, [pc, #24]	; (1d890 <z_arm_irq_priority_set+0x28>)
   1d878:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1d87c:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d87e:	bfab      	itete	ge
   1d880:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d884:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d888:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d88c:	5419      	strblt	r1, [r3, r0]
}
   1d88e:	4770      	bx	lr
   1d890:	e000ed14 	.word	0xe000ed14

0001d894 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1d894:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1d898:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1d89a:	490b      	ldr	r1, [pc, #44]	; (1d8c8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   1d89c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1d8a0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   1d8a2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   1d8a6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1d8aa:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1d8ac:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   1d8b0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1d8b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1d8b8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1d8bc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1d8be:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1d8c0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   1d8c2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1d8c6:	4770      	bx	lr
   1d8c8:	00021245 	.word	0x00021245

0001d8cc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1d8cc:	4604      	mov	r4, r0
   1d8ce:	b508      	push	{r3, lr}
   1d8d0:	460e      	mov	r6, r1
   1d8d2:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   1d8d4:	f000 fc74 	bl	1e1c0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   1d8d8:	4b09      	ldr	r3, [pc, #36]	; (1d900 <arch_switch_to_main_thread+0x34>)
   1d8da:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1d8dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1d8e0:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1d8e4:	4628      	mov	r0, r5
   1d8e6:	f386 8809 	msr	PSP, r6
   1d8ea:	2100      	movs	r1, #0
   1d8ec:	b663      	cpsie	if
   1d8ee:	f381 8811 	msr	BASEPRI, r1
   1d8f2:	f3bf 8f6f 	isb	sy
   1d8f6:	2200      	movs	r2, #0
   1d8f8:	2300      	movs	r3, #0
   1d8fa:	f003 fca3 	bl	21244 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1d8fe:	bf00      	nop
   1d900:	20010bbc 	.word	0x20010bbc

0001d904 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1d904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d906:	4607      	mov	r7, r0

	if (esf != NULL) {
   1d908:	460c      	mov	r4, r1
   1d90a:	2900      	cmp	r1, #0
   1d90c:	d02d      	beq.n	1d96a <z_arm_fatal_error+0x66>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1d90e:	4e1a      	ldr	r6, [pc, #104]	; (1d978 <z_arm_fatal_error+0x74>)
   1d910:	6833      	ldr	r3, [r6, #0]
   1d912:	0758      	lsls	r0, r3, #29
   1d914:	d029      	beq.n	1d96a <z_arm_fatal_error+0x66>
   1d916:	4b19      	ldr	r3, [pc, #100]	; (1d97c <z_arm_fatal_error+0x78>)
   1d918:	4d19      	ldr	r5, [pc, #100]	; (1d980 <z_arm_fatal_error+0x7c>)
   1d91a:	481a      	ldr	r0, [pc, #104]	; (1d984 <z_arm_fatal_error+0x80>)
   1d91c:	1aed      	subs	r5, r5, r3
   1d91e:	08ed      	lsrs	r5, r5, #3
   1d920:	01ad      	lsls	r5, r5, #6
   1d922:	f045 0501 	orr.w	r5, r5, #1
   1d926:	f8ad 5000 	strh.w	r5, [sp]
   1d92a:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   1d92e:	6809      	ldr	r1, [r1, #0]
   1d930:	f003 ffe0 	bl	218f4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1d934:	6833      	ldr	r3, [r6, #0]
   1d936:	0759      	lsls	r1, r3, #29
   1d938:	d017      	beq.n	1d96a <z_arm_fatal_error+0x66>
   1d93a:	f8ad 5000 	strh.w	r5, [sp]
   1d93e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1d942:	68e1      	ldr	r1, [r4, #12]
   1d944:	4810      	ldr	r0, [pc, #64]	; (1d988 <z_arm_fatal_error+0x84>)
   1d946:	f003 ffd5 	bl	218f4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1d94a:	6833      	ldr	r3, [r6, #0]
   1d94c:	075a      	lsls	r2, r3, #29
   1d94e:	d00c      	beq.n	1d96a <z_arm_fatal_error+0x66>
   1d950:	462a      	mov	r2, r5
   1d952:	69e1      	ldr	r1, [r4, #28]
   1d954:	480d      	ldr	r0, [pc, #52]	; (1d98c <z_arm_fatal_error+0x88>)
   1d956:	f003 ffa0 	bl	2189a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1d95a:	6833      	ldr	r3, [r6, #0]
   1d95c:	075b      	lsls	r3, r3, #29
   1d95e:	d004      	beq.n	1d96a <z_arm_fatal_error+0x66>
   1d960:	462a      	mov	r2, r5
   1d962:	69a1      	ldr	r1, [r4, #24]
   1d964:	480a      	ldr	r0, [pc, #40]	; (1d990 <z_arm_fatal_error+0x8c>)
   1d966:	f003 ff98 	bl	2189a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1d96a:	4621      	mov	r1, r4
   1d96c:	4638      	mov	r0, r7
}
   1d96e:	b003      	add	sp, #12
   1d970:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   1d974:	f001 bce8 	b.w	1f348 <z_fatal_error>
   1d978:	2001014c 	.word	0x2001014c
   1d97c:	00023fa4 	.word	0x00023fa4
   1d980:	00023fd4 	.word	0x00023fd4
   1d984:	00028028 	.word	0x00028028
   1d988:	00028057 	.word	0x00028057
   1d98c:	00028086 	.word	0x00028086
   1d990:	00028095 	.word	0x00028095

0001d994 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1d994:	4a0e      	ldr	r2, [pc, #56]	; (1d9d0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1d996:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1d998:	4b0e      	ldr	r3, [pc, #56]	; (1d9d4 <z_arm_prep_c+0x40>)
   1d99a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1d99e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1d9a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d9a4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1d9a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1d9ac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1d9b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1d9b4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1d9b8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1d9bc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1d9c0:	f001 fd7c 	bl	1f4bc <z_bss_zero>
	z_data_copy();
   1d9c4:	f001 fd84 	bl	1f4d0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1d9c8:	f000 fbcc 	bl	1e164 <z_arm_interrupt_init>
	z_cstart();
   1d9cc:	f001 fdb2 	bl	1f534 <z_cstart>
   1d9d0:	0000c000 	.word	0x0000c000
   1d9d4:	e000ed00 	.word	0xe000ed00

0001d9d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1d9d8:	4914      	ldr	r1, [pc, #80]	; (1da2c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1d9da:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1d9dc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   1d9e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1d9e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1d9e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1d9ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1d9ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1d9f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1d9f4:	4f0e      	ldr	r7, [pc, #56]	; (1da30 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1d9f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1d9fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   1d9fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1d9fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1da00:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
    movs r3, #0
   1da04:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   1da06:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1da0a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1da0e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   1da12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1da16:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   1da1a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   1da1e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   1da20:	f005 fa21 	bl	22e66 <configure_builtin_stack_guard>
    pop {r2, lr}
   1da24:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   1da28:	4770      	bx	lr
   1da2a:	0000      	.short	0x0000
    ldr r1, =_kernel
   1da2c:	20010bbc 	.word	0x20010bbc
    ldr v4, =_SCS_ICSR
   1da30:	e000ed04 	.word	0xe000ed04

0001da34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1da34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1da38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1da3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   1da3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1da42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1da44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1da48:	2902      	cmp	r1, #2
    beq _oops
   1da4a:	d0ff      	beq.n	1da4c <_oops>

0001da4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1da4c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   1da4e:	f005 fa0f 	bl	22e70 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1da52:	bd01      	pop	{r0, pc}

0001da54 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1da54:	4901      	ldr	r1, [pc, #4]	; (1da5c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1da56:	2210      	movs	r2, #16
	str	r2, [r1]
   1da58:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   1da5a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   1da5c:	e000ed10 	.word	0xe000ed10

0001da60 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1da60:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1da62:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1da64:	f380 8811 	msr	BASEPRI, r0
	isb
   1da68:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   1da6c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1da70:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1da72:	b662      	cpsie	i
	isb
   1da74:	f3bf 8f6f 	isb	sy

	bx	lr
   1da78:	4770      	bx	lr
   1da7a:	bf00      	nop

0001da7c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   1da7c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1da7e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1da80:	f381 8811 	msr	BASEPRI, r1

	wfe
   1da84:	bf20      	wfe

	msr	BASEPRI, r0
   1da86:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1da8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1da8c:	4770      	bx	lr
   1da8e:	bf00      	nop

0001da90 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1da90:	bf30      	wfi
    b z_SysNmiOnReset
   1da92:	f7ff bffd 	b.w	1da90 <z_SysNmiOnReset>
   1da96:	bf00      	nop

0001da98 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1da98:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1da9a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1da9c:	4a0b      	ldr	r2, [pc, #44]	; (1dacc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1da9e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   1daa0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1daa2:	bf1e      	ittt	ne
	movne	r1, #0
   1daa4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1daa6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   1daa8:	f005 fd0b 	blne	234c2 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1daac:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1daae:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1dab2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1dab6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1daba:	4905      	ldr	r1, [pc, #20]	; (1dad0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   1dabc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1dabe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1dac0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1dac2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1dac6:	4903      	ldr	r1, [pc, #12]	; (1dad4 <_isr_wrapper+0x3c>)
	bx r1
   1dac8:	4708      	bx	r1
   1daca:	0000      	.short	0x0000
	ldr r2, =_kernel
   1dacc:	20010bbc 	.word	0x20010bbc
	ldr r1, =_sw_isr_table
   1dad0:	00023d9c 	.word	0x00023d9c
	ldr r1, =z_arm_int_exit
   1dad4:	0001db29 	.word	0x0001db29

0001dad8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1dad8:	f003 fe88 	bl	217ec <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1dadc:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1dade:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   1dae2:	480b      	ldr	r0, [pc, #44]	; (1db10 <__start+0x38>)
    ldr r1, =0xaa
   1dae4:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1dae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   1daec:	f005 fb22 	bl	23134 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1daf0:	4807      	ldr	r0, [pc, #28]	; (1db10 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1daf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1daf6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1daf8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1dafc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1db00:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1db02:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1db04:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1db08:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1db0c:	f7ff ff42 	bl	1d994 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
   1db10:	2002c100 	.word	0x2002c100

0001db14 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1db14:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1db18:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1db1c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1db1e:	4672      	mov	r2, lr
	bl z_arm_fault
   1db20:	f000 fa06 	bl	1df30 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1db24:	bd01      	pop	{r0, pc}
   1db26:	bf00      	nop

0001db28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   1db28:	4b04      	ldr	r3, [pc, #16]	; (1db3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1db2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1db2c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   1db2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   1db30:	d003      	beq.n	1db3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1db32:	4903      	ldr	r1, [pc, #12]	; (1db40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1db34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1db38:	600a      	str	r2, [r1, #0]

0001db3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1db3a:	4770      	bx	lr
	ldr r3, =_kernel
   1db3c:	20010bbc 	.word	0x20010bbc
	ldr r1, =_SCS_ICSR
   1db40:	e000ed04 	.word	0xe000ed04

0001db44 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1db44:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1db46:	4c48      	ldr	r4, [pc, #288]	; (1dc68 <usage_fault.isra.0+0x124>)
   1db48:	6823      	ldr	r3, [r4, #0]
   1db4a:	075d      	lsls	r5, r3, #29
   1db4c:	d009      	beq.n	1db62 <usage_fault.isra.0+0x1e>
   1db4e:	4947      	ldr	r1, [pc, #284]	; (1dc6c <usage_fault.isra.0+0x128>)
   1db50:	4b47      	ldr	r3, [pc, #284]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1db52:	4848      	ldr	r0, [pc, #288]	; (1dc74 <usage_fault.isra.0+0x130>)
   1db54:	1ac9      	subs	r1, r1, r3
   1db56:	08c9      	lsrs	r1, r1, #3
   1db58:	0189      	lsls	r1, r1, #6
   1db5a:	f041 0101 	orr.w	r1, r1, #1
   1db5e:	f003 fe8f 	bl	21880 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1db62:	4b45      	ldr	r3, [pc, #276]	; (1dc78 <usage_fault.isra.0+0x134>)
   1db64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1db66:	0198      	lsls	r0, r3, #6
   1db68:	d50c      	bpl.n	1db84 <usage_fault.isra.0+0x40>
		PR_FAULT_INFO("  Division by zero");
   1db6a:	6823      	ldr	r3, [r4, #0]
   1db6c:	0759      	lsls	r1, r3, #29
   1db6e:	d009      	beq.n	1db84 <usage_fault.isra.0+0x40>
   1db70:	493e      	ldr	r1, [pc, #248]	; (1dc6c <usage_fault.isra.0+0x128>)
   1db72:	4b3f      	ldr	r3, [pc, #252]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1db74:	4841      	ldr	r0, [pc, #260]	; (1dc7c <usage_fault.isra.0+0x138>)
   1db76:	1ac9      	subs	r1, r1, r3
   1db78:	08c9      	lsrs	r1, r1, #3
   1db7a:	0189      	lsls	r1, r1, #6
   1db7c:	f041 0101 	orr.w	r1, r1, #1
   1db80:	f003 fe7e 	bl	21880 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1db84:	4b3c      	ldr	r3, [pc, #240]	; (1dc78 <usage_fault.isra.0+0x134>)
   1db86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1db88:	01da      	lsls	r2, r3, #7
   1db8a:	d50c      	bpl.n	1dba6 <usage_fault.isra.0+0x62>
		PR_FAULT_INFO("  Unaligned memory access");
   1db8c:	6823      	ldr	r3, [r4, #0]
   1db8e:	075b      	lsls	r3, r3, #29
   1db90:	d009      	beq.n	1dba6 <usage_fault.isra.0+0x62>
   1db92:	4936      	ldr	r1, [pc, #216]	; (1dc6c <usage_fault.isra.0+0x128>)
   1db94:	4b36      	ldr	r3, [pc, #216]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1db96:	483a      	ldr	r0, [pc, #232]	; (1dc80 <usage_fault.isra.0+0x13c>)
   1db98:	1ac9      	subs	r1, r1, r3
   1db9a:	08c9      	lsrs	r1, r1, #3
   1db9c:	0189      	lsls	r1, r1, #6
   1db9e:	f041 0101 	orr.w	r1, r1, #1
   1dba2:	f003 fe6d 	bl	21880 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   1dba6:	4b34      	ldr	r3, [pc, #208]	; (1dc78 <usage_fault.isra.0+0x134>)
   1dba8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1dbaa:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   1dbae:	d00d      	beq.n	1dbcc <usage_fault.isra.0+0x88>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   1dbb0:	6823      	ldr	r3, [r4, #0]
   1dbb2:	075d      	lsls	r5, r3, #29
   1dbb4:	d009      	beq.n	1dbca <usage_fault.isra.0+0x86>
   1dbb6:	492d      	ldr	r1, [pc, #180]	; (1dc6c <usage_fault.isra.0+0x128>)
   1dbb8:	4b2d      	ldr	r3, [pc, #180]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1dbba:	4832      	ldr	r0, [pc, #200]	; (1dc84 <usage_fault.isra.0+0x140>)
   1dbbc:	1ac9      	subs	r1, r1, r3
   1dbbe:	08c9      	lsrs	r1, r1, #3
   1dbc0:	0189      	lsls	r1, r1, #6
   1dbc2:	f041 0101 	orr.w	r1, r1, #1
   1dbc6:	f003 fe5b 	bl	21880 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   1dbca:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1dbcc:	4b2a      	ldr	r3, [pc, #168]	; (1dc78 <usage_fault.isra.0+0x134>)
   1dbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dbd0:	0318      	lsls	r0, r3, #12
   1dbd2:	d50c      	bpl.n	1dbee <usage_fault.isra.0+0xaa>
		PR_FAULT_INFO("  No coprocessor instructions");
   1dbd4:	6823      	ldr	r3, [r4, #0]
   1dbd6:	0759      	lsls	r1, r3, #29
   1dbd8:	d009      	beq.n	1dbee <usage_fault.isra.0+0xaa>
   1dbda:	4924      	ldr	r1, [pc, #144]	; (1dc6c <usage_fault.isra.0+0x128>)
   1dbdc:	4b24      	ldr	r3, [pc, #144]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1dbde:	482a      	ldr	r0, [pc, #168]	; (1dc88 <usage_fault.isra.0+0x144>)
   1dbe0:	1ac9      	subs	r1, r1, r3
   1dbe2:	08c9      	lsrs	r1, r1, #3
   1dbe4:	0189      	lsls	r1, r1, #6
   1dbe6:	f041 0101 	orr.w	r1, r1, #1
   1dbea:	f003 fe49 	bl	21880 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1dbee:	4b22      	ldr	r3, [pc, #136]	; (1dc78 <usage_fault.isra.0+0x134>)
   1dbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dbf2:	035a      	lsls	r2, r3, #13
   1dbf4:	d50c      	bpl.n	1dc10 <usage_fault.isra.0+0xcc>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1dbf6:	6823      	ldr	r3, [r4, #0]
   1dbf8:	075b      	lsls	r3, r3, #29
   1dbfa:	d009      	beq.n	1dc10 <usage_fault.isra.0+0xcc>
   1dbfc:	491b      	ldr	r1, [pc, #108]	; (1dc6c <usage_fault.isra.0+0x128>)
   1dbfe:	4b1c      	ldr	r3, [pc, #112]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1dc00:	4822      	ldr	r0, [pc, #136]	; (1dc8c <usage_fault.isra.0+0x148>)
   1dc02:	1ac9      	subs	r1, r1, r3
   1dc04:	08c9      	lsrs	r1, r1, #3
   1dc06:	0189      	lsls	r1, r1, #6
   1dc08:	f041 0101 	orr.w	r1, r1, #1
   1dc0c:	f003 fe38 	bl	21880 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1dc10:	4b19      	ldr	r3, [pc, #100]	; (1dc78 <usage_fault.isra.0+0x134>)
   1dc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dc14:	0398      	lsls	r0, r3, #14
   1dc16:	d50c      	bpl.n	1dc32 <usage_fault.isra.0+0xee>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1dc18:	6823      	ldr	r3, [r4, #0]
   1dc1a:	0759      	lsls	r1, r3, #29
   1dc1c:	d009      	beq.n	1dc32 <usage_fault.isra.0+0xee>
   1dc1e:	4913      	ldr	r1, [pc, #76]	; (1dc6c <usage_fault.isra.0+0x128>)
   1dc20:	4b13      	ldr	r3, [pc, #76]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1dc22:	481b      	ldr	r0, [pc, #108]	; (1dc90 <usage_fault.isra.0+0x14c>)
   1dc24:	1ac9      	subs	r1, r1, r3
   1dc26:	08c9      	lsrs	r1, r1, #3
   1dc28:	0189      	lsls	r1, r1, #6
   1dc2a:	f041 0101 	orr.w	r1, r1, #1
   1dc2e:	f003 fe27 	bl	21880 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1dc32:	4b11      	ldr	r3, [pc, #68]	; (1dc78 <usage_fault.isra.0+0x134>)
   1dc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dc36:	03da      	lsls	r2, r3, #15
   1dc38:	d50c      	bpl.n	1dc54 <usage_fault.isra.0+0x110>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1dc3a:	6823      	ldr	r3, [r4, #0]
   1dc3c:	075b      	lsls	r3, r3, #29
   1dc3e:	d009      	beq.n	1dc54 <usage_fault.isra.0+0x110>
   1dc40:	490a      	ldr	r1, [pc, #40]	; (1dc6c <usage_fault.isra.0+0x128>)
   1dc42:	4b0b      	ldr	r3, [pc, #44]	; (1dc70 <usage_fault.isra.0+0x12c>)
   1dc44:	4813      	ldr	r0, [pc, #76]	; (1dc94 <usage_fault.isra.0+0x150>)
   1dc46:	1ac9      	subs	r1, r1, r3
   1dc48:	08c9      	lsrs	r1, r1, #3
   1dc4a:	0189      	lsls	r1, r1, #6
   1dc4c:	f041 0101 	orr.w	r1, r1, #1
   1dc50:	f003 fe16 	bl	21880 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1dc54:	4a08      	ldr	r2, [pc, #32]	; (1dc78 <usage_fault.isra.0+0x134>)

	return reason;
}
   1dc56:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1dc58:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1dc5a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1dc5e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1dc62:	6293      	str	r3, [r2, #40]	; 0x28
}
   1dc64:	bd38      	pop	{r3, r4, r5, pc}
   1dc66:	bf00      	nop
   1dc68:	2001014c 	.word	0x2001014c
   1dc6c:	00023fd4 	.word	0x00023fd4
   1dc70:	00023fa4 	.word	0x00023fa4
   1dc74:	000280c3 	.word	0x000280c3
   1dc78:	e000ed00 	.word	0xe000ed00
   1dc7c:	000280db 	.word	0x000280db
   1dc80:	000280ee 	.word	0x000280ee
   1dc84:	00028108 	.word	0x00028108
   1dc88:	00028132 	.word	0x00028132
   1dc8c:	00028150 	.word	0x00028150
   1dc90:	00028175 	.word	0x00028175
   1dc94:	0002818f 	.word	0x0002818f

0001dc98 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1dc98:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   1dc9a:	4c43      	ldr	r4, [pc, #268]	; (1dda8 <mem_manage_fault.isra.0+0x110>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1dc9c:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1dc9e:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   1dca0:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1dca2:	075b      	lsls	r3, r3, #29
   1dca4:	d009      	beq.n	1dcba <mem_manage_fault.isra.0+0x22>
   1dca6:	4941      	ldr	r1, [pc, #260]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dca8:	4b41      	ldr	r3, [pc, #260]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dcaa:	4842      	ldr	r0, [pc, #264]	; (1ddb4 <mem_manage_fault.isra.0+0x11c>)
   1dcac:	1ac9      	subs	r1, r1, r3
   1dcae:	08c9      	lsrs	r1, r1, #3
   1dcb0:	0189      	lsls	r1, r1, #6
   1dcb2:	f041 0101 	orr.w	r1, r1, #1
   1dcb6:	f003 fde3 	bl	21880 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1dcba:	4b3f      	ldr	r3, [pc, #252]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dcbe:	06d8      	lsls	r0, r3, #27
   1dcc0:	d50c      	bpl.n	1dcdc <mem_manage_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1dcc2:	6823      	ldr	r3, [r4, #0]
   1dcc4:	0759      	lsls	r1, r3, #29
   1dcc6:	d009      	beq.n	1dcdc <mem_manage_fault.isra.0+0x44>
   1dcc8:	4938      	ldr	r1, [pc, #224]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dcca:	4b39      	ldr	r3, [pc, #228]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dccc:	483b      	ldr	r0, [pc, #236]	; (1ddbc <mem_manage_fault.isra.0+0x124>)
   1dcce:	1ac9      	subs	r1, r1, r3
   1dcd0:	08c9      	lsrs	r1, r1, #3
   1dcd2:	0189      	lsls	r1, r1, #6
   1dcd4:	f041 0101 	orr.w	r1, r1, #1
   1dcd8:	f003 fdd2 	bl	21880 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1dcdc:	4b36      	ldr	r3, [pc, #216]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dce0:	071a      	lsls	r2, r3, #28
   1dce2:	d50c      	bpl.n	1dcfe <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
   1dce4:	6823      	ldr	r3, [r4, #0]
   1dce6:	075b      	lsls	r3, r3, #29
   1dce8:	d009      	beq.n	1dcfe <mem_manage_fault.isra.0+0x66>
   1dcea:	4930      	ldr	r1, [pc, #192]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dcec:	4b30      	ldr	r3, [pc, #192]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dcee:	4834      	ldr	r0, [pc, #208]	; (1ddc0 <mem_manage_fault.isra.0+0x128>)
   1dcf0:	1ac9      	subs	r1, r1, r3
   1dcf2:	08c9      	lsrs	r1, r1, #3
   1dcf4:	0189      	lsls	r1, r1, #6
   1dcf6:	f041 0101 	orr.w	r1, r1, #1
   1dcfa:	f003 fdc1 	bl	21880 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1dcfe:	4b2e      	ldr	r3, [pc, #184]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd02:	0798      	lsls	r0, r3, #30
   1dd04:	d524      	bpl.n	1dd50 <mem_manage_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Data Access Violation");
   1dd06:	6823      	ldr	r3, [r4, #0]
   1dd08:	0759      	lsls	r1, r3, #29
   1dd0a:	d009      	beq.n	1dd20 <mem_manage_fault.isra.0+0x88>
   1dd0c:	4927      	ldr	r1, [pc, #156]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dd0e:	4b28      	ldr	r3, [pc, #160]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dd10:	482c      	ldr	r0, [pc, #176]	; (1ddc4 <mem_manage_fault.isra.0+0x12c>)
   1dd12:	1ac9      	subs	r1, r1, r3
   1dd14:	08c9      	lsrs	r1, r1, #3
   1dd16:	0189      	lsls	r1, r1, #6
   1dd18:	f041 0101 	orr.w	r1, r1, #1
   1dd1c:	f003 fdb0 	bl	21880 <log_0>
		mmfar = SCB->MMFAR;
   1dd20:	4b25      	ldr	r3, [pc, #148]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd22:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1dd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd26:	061a      	lsls	r2, r3, #24
   1dd28:	d512      	bpl.n	1dd50 <mem_manage_fault.isra.0+0xb8>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1dd2a:	6823      	ldr	r3, [r4, #0]
   1dd2c:	075b      	lsls	r3, r3, #29
   1dd2e:	d009      	beq.n	1dd44 <mem_manage_fault.isra.0+0xac>
   1dd30:	4a1e      	ldr	r2, [pc, #120]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dd32:	4b1f      	ldr	r3, [pc, #124]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dd34:	4824      	ldr	r0, [pc, #144]	; (1ddc8 <mem_manage_fault.isra.0+0x130>)
   1dd36:	1ad2      	subs	r2, r2, r3
   1dd38:	08d2      	lsrs	r2, r2, #3
   1dd3a:	0192      	lsls	r2, r2, #6
   1dd3c:	f042 0201 	orr.w	r2, r2, #1
   1dd40:	f003 fdab 	bl	2189a <log_1>
			if (from_hard_fault) {
   1dd44:	b126      	cbz	r6, 1dd50 <mem_manage_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1dd46:	4a1c      	ldr	r2, [pc, #112]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd48:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1dd4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1dd4e:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1dd50:	4b19      	ldr	r3, [pc, #100]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd54:	07d8      	lsls	r0, r3, #31
   1dd56:	d50c      	bpl.n	1dd72 <mem_manage_fault.isra.0+0xda>
		PR_FAULT_INFO("  Instruction Access Violation");
   1dd58:	6823      	ldr	r3, [r4, #0]
   1dd5a:	0759      	lsls	r1, r3, #29
   1dd5c:	d009      	beq.n	1dd72 <mem_manage_fault.isra.0+0xda>
   1dd5e:	4914      	ldr	r1, [pc, #80]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dd60:	4b12      	ldr	r3, [pc, #72]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dd62:	481a      	ldr	r0, [pc, #104]	; (1ddcc <mem_manage_fault.isra.0+0x134>)
   1dd64:	1a5b      	subs	r3, r3, r1
   1dd66:	08db      	lsrs	r3, r3, #3
   1dd68:	019b      	lsls	r3, r3, #6
   1dd6a:	f043 0101 	orr.w	r1, r3, #1
   1dd6e:	f003 fd87 	bl	21880 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1dd72:	4b11      	ldr	r3, [pc, #68]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dd76:	069a      	lsls	r2, r3, #26
   1dd78:	d50c      	bpl.n	1dd94 <mem_manage_fault.isra.0+0xfc>
		PR_FAULT_INFO(
   1dd7a:	6823      	ldr	r3, [r4, #0]
   1dd7c:	075b      	lsls	r3, r3, #29
   1dd7e:	d009      	beq.n	1dd94 <mem_manage_fault.isra.0+0xfc>
   1dd80:	490b      	ldr	r1, [pc, #44]	; (1ddb0 <mem_manage_fault.isra.0+0x118>)
   1dd82:	4b0a      	ldr	r3, [pc, #40]	; (1ddac <mem_manage_fault.isra.0+0x114>)
   1dd84:	4812      	ldr	r0, [pc, #72]	; (1ddd0 <mem_manage_fault.isra.0+0x138>)
   1dd86:	1a5b      	subs	r3, r3, r1
   1dd88:	08db      	lsrs	r3, r3, #3
   1dd8a:	019b      	lsls	r3, r3, #6
   1dd8c:	f043 0101 	orr.w	r1, r3, #1
   1dd90:	f003 fd76 	bl	21880 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   1dd94:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1dd96:	4b08      	ldr	r3, [pc, #32]	; (1ddb8 <mem_manage_fault.isra.0+0x120>)
   1dd98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1dd9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1dd9c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   1dda0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1dda2:	7028      	strb	r0, [r5, #0]
}
   1dda4:	bd70      	pop	{r4, r5, r6, pc}
   1dda6:	bf00      	nop
   1dda8:	2001014c 	.word	0x2001014c
   1ddac:	00023fd4 	.word	0x00023fd4
   1ddb0:	00023fa4 	.word	0x00023fa4
   1ddb4:	000281ba 	.word	0x000281ba
   1ddb8:	e000ed00 	.word	0xe000ed00
   1ddbc:	000281d0 	.word	0x000281d0
   1ddc0:	00028203 	.word	0x00028203
   1ddc4:	00028216 	.word	0x00028216
   1ddc8:	0002822e 	.word	0x0002822e
   1ddcc:	00028244 	.word	0x00028244
   1ddd0:	00028263 	.word	0x00028263

0001ddd4 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1ddd4:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   1ddd6:	4c4a      	ldr	r4, [pc, #296]	; (1df00 <bus_fault.isra.0+0x12c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1ddd8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   1ddda:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1dddc:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   1ddde:	0759      	lsls	r1, r3, #29
   1dde0:	d009      	beq.n	1ddf6 <bus_fault.isra.0+0x22>
   1dde2:	4948      	ldr	r1, [pc, #288]	; (1df04 <bus_fault.isra.0+0x130>)
   1dde4:	4b48      	ldr	r3, [pc, #288]	; (1df08 <bus_fault.isra.0+0x134>)
   1dde6:	4849      	ldr	r0, [pc, #292]	; (1df0c <bus_fault.isra.0+0x138>)
   1dde8:	1ac9      	subs	r1, r1, r3
   1ddea:	08c9      	lsrs	r1, r1, #3
   1ddec:	0189      	lsls	r1, r1, #6
   1ddee:	f041 0101 	orr.w	r1, r1, #1
   1ddf2:	f003 fd45 	bl	21880 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1ddf6:	4b46      	ldr	r3, [pc, #280]	; (1df10 <bus_fault.isra.0+0x13c>)
   1ddf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ddfa:	04da      	lsls	r2, r3, #19
   1ddfc:	d50c      	bpl.n	1de18 <bus_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error");
   1ddfe:	6823      	ldr	r3, [r4, #0]
   1de00:	075b      	lsls	r3, r3, #29
   1de02:	d009      	beq.n	1de18 <bus_fault.isra.0+0x44>
   1de04:	493f      	ldr	r1, [pc, #252]	; (1df04 <bus_fault.isra.0+0x130>)
   1de06:	4b40      	ldr	r3, [pc, #256]	; (1df08 <bus_fault.isra.0+0x134>)
   1de08:	4842      	ldr	r0, [pc, #264]	; (1df14 <bus_fault.isra.0+0x140>)
   1de0a:	1ac9      	subs	r1, r1, r3
   1de0c:	08c9      	lsrs	r1, r1, #3
   1de0e:	0189      	lsls	r1, r1, #6
   1de10:	f041 0101 	orr.w	r1, r1, #1
   1de14:	f003 fd34 	bl	21880 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1de18:	4b3d      	ldr	r3, [pc, #244]	; (1df10 <bus_fault.isra.0+0x13c>)
   1de1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de1c:	0518      	lsls	r0, r3, #20
   1de1e:	d50c      	bpl.n	1de3a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
   1de20:	6823      	ldr	r3, [r4, #0]
   1de22:	0759      	lsls	r1, r3, #29
   1de24:	d009      	beq.n	1de3a <bus_fault.isra.0+0x66>
   1de26:	4937      	ldr	r1, [pc, #220]	; (1df04 <bus_fault.isra.0+0x130>)
   1de28:	4b37      	ldr	r3, [pc, #220]	; (1df08 <bus_fault.isra.0+0x134>)
   1de2a:	483b      	ldr	r0, [pc, #236]	; (1df18 <bus_fault.isra.0+0x144>)
   1de2c:	1ac9      	subs	r1, r1, r3
   1de2e:	08c9      	lsrs	r1, r1, #3
   1de30:	0189      	lsls	r1, r1, #6
   1de32:	f041 0101 	orr.w	r1, r1, #1
   1de36:	f003 fd23 	bl	21880 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1de3a:	4b35      	ldr	r3, [pc, #212]	; (1df10 <bus_fault.isra.0+0x13c>)
   1de3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de3e:	059a      	lsls	r2, r3, #22
   1de40:	d524      	bpl.n	1de8c <bus_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Precise data bus error");
   1de42:	6823      	ldr	r3, [r4, #0]
   1de44:	075b      	lsls	r3, r3, #29
   1de46:	d009      	beq.n	1de5c <bus_fault.isra.0+0x88>
   1de48:	492e      	ldr	r1, [pc, #184]	; (1df04 <bus_fault.isra.0+0x130>)
   1de4a:	4b2f      	ldr	r3, [pc, #188]	; (1df08 <bus_fault.isra.0+0x134>)
   1de4c:	4833      	ldr	r0, [pc, #204]	; (1df1c <bus_fault.isra.0+0x148>)
   1de4e:	1ac9      	subs	r1, r1, r3
   1de50:	08c9      	lsrs	r1, r1, #3
   1de52:	0189      	lsls	r1, r1, #6
   1de54:	f041 0101 	orr.w	r1, r1, #1
   1de58:	f003 fd12 	bl	21880 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   1de5c:	4b2c      	ldr	r3, [pc, #176]	; (1df10 <bus_fault.isra.0+0x13c>)
   1de5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1de60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de62:	0418      	lsls	r0, r3, #16
   1de64:	d512      	bpl.n	1de8c <bus_fault.isra.0+0xb8>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1de66:	6823      	ldr	r3, [r4, #0]
   1de68:	075a      	lsls	r2, r3, #29
   1de6a:	d009      	beq.n	1de80 <bus_fault.isra.0+0xac>
   1de6c:	4a25      	ldr	r2, [pc, #148]	; (1df04 <bus_fault.isra.0+0x130>)
   1de6e:	4b26      	ldr	r3, [pc, #152]	; (1df08 <bus_fault.isra.0+0x134>)
   1de70:	482b      	ldr	r0, [pc, #172]	; (1df20 <bus_fault.isra.0+0x14c>)
   1de72:	1ad2      	subs	r2, r2, r3
   1de74:	08d2      	lsrs	r2, r2, #3
   1de76:	0192      	lsls	r2, r2, #6
   1de78:	f042 0201 	orr.w	r2, r2, #1
   1de7c:	f003 fd0d 	bl	2189a <log_1>
			if (from_hard_fault) {
   1de80:	b126      	cbz	r6, 1de8c <bus_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1de82:	4a23      	ldr	r2, [pc, #140]	; (1df10 <bus_fault.isra.0+0x13c>)
   1de84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1de86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1de8a:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1de8c:	4b20      	ldr	r3, [pc, #128]	; (1df10 <bus_fault.isra.0+0x13c>)
   1de8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1de90:	055b      	lsls	r3, r3, #21
   1de92:	d50c      	bpl.n	1deae <bus_fault.isra.0+0xda>
		PR_FAULT_INFO("  Imprecise data bus error");
   1de94:	6823      	ldr	r3, [r4, #0]
   1de96:	075e      	lsls	r6, r3, #29
   1de98:	d009      	beq.n	1deae <bus_fault.isra.0+0xda>
   1de9a:	491a      	ldr	r1, [pc, #104]	; (1df04 <bus_fault.isra.0+0x130>)
   1de9c:	4b1a      	ldr	r3, [pc, #104]	; (1df08 <bus_fault.isra.0+0x134>)
   1de9e:	4821      	ldr	r0, [pc, #132]	; (1df24 <bus_fault.isra.0+0x150>)
   1dea0:	1ac9      	subs	r1, r1, r3
   1dea2:	08c9      	lsrs	r1, r1, #3
   1dea4:	0189      	lsls	r1, r1, #6
   1dea6:	f041 0101 	orr.w	r1, r1, #1
   1deaa:	f003 fce9 	bl	21880 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1deae:	4b18      	ldr	r3, [pc, #96]	; (1df10 <bus_fault.isra.0+0x13c>)
   1deb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1deb2:	05d0      	lsls	r0, r2, #23
   1deb4:	d514      	bpl.n	1dee0 <bus_fault.isra.0+0x10c>
		PR_FAULT_INFO("  Instruction bus error");
   1deb6:	6823      	ldr	r3, [r4, #0]
   1deb8:	0759      	lsls	r1, r3, #29
   1deba:	d009      	beq.n	1ded0 <bus_fault.isra.0+0xfc>
   1debc:	4912      	ldr	r1, [pc, #72]	; (1df08 <bus_fault.isra.0+0x134>)
   1debe:	4b11      	ldr	r3, [pc, #68]	; (1df04 <bus_fault.isra.0+0x130>)
   1dec0:	4819      	ldr	r0, [pc, #100]	; (1df28 <bus_fault.isra.0+0x154>)
   1dec2:	1a5b      	subs	r3, r3, r1
   1dec4:	08db      	lsrs	r3, r3, #3
   1dec6:	019b      	lsls	r3, r3, #6
   1dec8:	f043 0101 	orr.w	r1, r3, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1decc:	f003 fcd8 	bl	21880 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   1ded0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1ded2:	4a0f      	ldr	r2, [pc, #60]	; (1df10 <bus_fault.isra.0+0x13c>)
   1ded4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1ded6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1deda:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1dedc:	7028      	strb	r0, [r5, #0]
}
   1dede:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1dee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1dee2:	049a      	lsls	r2, r3, #18
   1dee4:	d5f4      	bpl.n	1ded0 <bus_fault.isra.0+0xfc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1dee6:	6823      	ldr	r3, [r4, #0]
   1dee8:	075b      	lsls	r3, r3, #29
   1deea:	d0f1      	beq.n	1ded0 <bus_fault.isra.0+0xfc>
   1deec:	4906      	ldr	r1, [pc, #24]	; (1df08 <bus_fault.isra.0+0x134>)
   1deee:	4b05      	ldr	r3, [pc, #20]	; (1df04 <bus_fault.isra.0+0x130>)
   1def0:	480e      	ldr	r0, [pc, #56]	; (1df2c <bus_fault.isra.0+0x158>)
   1def2:	1a5b      	subs	r3, r3, r1
   1def4:	08db      	lsrs	r3, r3, #3
   1def6:	019b      	lsls	r3, r3, #6
   1def8:	f043 0101 	orr.w	r1, r3, #1
   1defc:	e7e6      	b.n	1decc <bus_fault.isra.0+0xf8>
   1defe:	bf00      	nop
   1df00:	2001014c 	.word	0x2001014c
   1df04:	00023fd4 	.word	0x00023fd4
   1df08:	00023fa4 	.word	0x00023fa4
   1df0c:	00028292 	.word	0x00028292
   1df10:	e000ed00 	.word	0xe000ed00
   1df14:	000282a8 	.word	0x000282a8
   1df18:	00028203 	.word	0x00028203
   1df1c:	000282b9 	.word	0x000282b9
   1df20:	000282d2 	.word	0x000282d2
   1df24:	000282e7 	.word	0x000282e7
   1df28:	00028302 	.word	0x00028302
   1df2c:	00028263 	.word	0x00028263

0001df30 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1df30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1df34:	4b6d      	ldr	r3, [pc, #436]	; (1e0ec <z_arm_fault+0x1bc>)
{
   1df36:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1df38:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   1df3c:	4689      	mov	r9, r1
   1df3e:	4614      	mov	r4, r2
   1df40:	2500      	movs	r5, #0
   1df42:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1df44:	f3c8 0708 	ubfx	r7, r8, #0, #9
   1df48:	f385 8811 	msr	BASEPRI, r5
   1df4c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1df50:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1df54:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1df58:	d128      	bne.n	1dfac <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1df5a:	07d3      	lsls	r3, r2, #31
   1df5c:	d426      	bmi.n	1dfac <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1df5e:	0655      	lsls	r5, r2, #25
   1df60:	d403      	bmi.n	1df6a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1df62:	0724      	lsls	r4, r4, #28
   1df64:	d412      	bmi.n	1df8c <z_arm_fault+0x5c>
			*nested_exc = true;
   1df66:	2501      	movs	r5, #1
   1df68:	e012      	b.n	1df90 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1df6a:	4b61      	ldr	r3, [pc, #388]	; (1e0f0 <z_arm_fault+0x1c0>)
   1df6c:	681b      	ldr	r3, [r3, #0]
   1df6e:	0758      	lsls	r0, r3, #29
   1df70:	d009      	beq.n	1df86 <z_arm_fault+0x56>
   1df72:	4960      	ldr	r1, [pc, #384]	; (1e0f4 <z_arm_fault+0x1c4>)
   1df74:	4b60      	ldr	r3, [pc, #384]	; (1e0f8 <z_arm_fault+0x1c8>)
   1df76:	4861      	ldr	r0, [pc, #388]	; (1e0fc <z_arm_fault+0x1cc>)
   1df78:	1a5b      	subs	r3, r3, r1
   1df7a:	08db      	lsrs	r3, r3, #3
   1df7c:	019b      	lsls	r3, r3, #6
   1df7e:	f043 0101 	orr.w	r1, r3, #1
   1df82:	f003 fc7d 	bl	21880 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1df86:	f014 0504 	ands.w	r5, r4, #4
   1df8a:	d001      	beq.n	1df90 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   1df8c:	464e      	mov	r6, r9
	*nested_exc = false;
   1df8e:	2500      	movs	r5, #0
	*recoverable = false;
   1df90:	2300      	movs	r3, #0
   1df92:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1df96:	1efb      	subs	r3, r7, #3
   1df98:	2b09      	cmp	r3, #9
   1df9a:	f200 8089 	bhi.w	1e0b0 <z_arm_fault+0x180>
   1df9e:	e8df f003 	tbb	[pc, r3]
   1dfa2:	7007      	.short	0x7007
   1dfa4:	87876c74 	.word	0x87876c74
   1dfa8:	78878787 	.word	0x78878787
		return NULL;
   1dfac:	462e      	mov	r6, r5
   1dfae:	e7ef      	b.n	1df90 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
   1dfb0:	4f4f      	ldr	r7, [pc, #316]	; (1e0f0 <z_arm_fault+0x1c0>)
   1dfb2:	683b      	ldr	r3, [r7, #0]
   1dfb4:	0759      	lsls	r1, r3, #29
   1dfb6:	d009      	beq.n	1dfcc <z_arm_fault+0x9c>
   1dfb8:	494f      	ldr	r1, [pc, #316]	; (1e0f8 <z_arm_fault+0x1c8>)
   1dfba:	4b4e      	ldr	r3, [pc, #312]	; (1e0f4 <z_arm_fault+0x1c4>)
   1dfbc:	4850      	ldr	r0, [pc, #320]	; (1e100 <z_arm_fault+0x1d0>)
   1dfbe:	1ac9      	subs	r1, r1, r3
   1dfc0:	08c9      	lsrs	r1, r1, #3
   1dfc2:	0189      	lsls	r1, r1, #6
   1dfc4:	f041 0101 	orr.w	r1, r1, #1
   1dfc8:	f003 fc5a 	bl	21880 <log_0>
	*recoverable = false;
   1dfcc:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1dfce:	4b47      	ldr	r3, [pc, #284]	; (1e0ec <z_arm_fault+0x1bc>)
	*recoverable = false;
   1dfd0:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1dfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfd6:	0792      	lsls	r2, r2, #30
   1dfd8:	d528      	bpl.n	1e02c <z_arm_fault+0xfc>
		PR_EXC("  Bus fault on vector table read");
   1dfda:	683b      	ldr	r3, [r7, #0]
   1dfdc:	075f      	lsls	r7, r3, #29
   1dfde:	d101      	bne.n	1dfe4 <z_arm_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1dfe0:	2400      	movs	r4, #0
   1dfe2:	e009      	b.n	1dff8 <z_arm_fault+0xc8>
   1dfe4:	4944      	ldr	r1, [pc, #272]	; (1e0f8 <z_arm_fault+0x1c8>)
   1dfe6:	4b43      	ldr	r3, [pc, #268]	; (1e0f4 <z_arm_fault+0x1c4>)
		PR_EXC("  Bus fault on vector table read");
   1dfe8:	4846      	ldr	r0, [pc, #280]	; (1e104 <z_arm_fault+0x1d4>)
   1dfea:	1ac9      	subs	r1, r1, r3
   1dfec:	08c9      	lsrs	r1, r1, #3
   1dfee:	0189      	lsls	r1, r1, #6
   1dff0:	f041 0101 	orr.w	r1, r1, #1
   1dff4:	f003 fc44 	bl	21880 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1dff8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dffc:	b99b      	cbnz	r3, 1e026 <z_arm_fault+0xf6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1dffe:	2220      	movs	r2, #32
   1e000:	4631      	mov	r1, r6
   1e002:	a802      	add	r0, sp, #8
   1e004:	f005 f86b 	bl	230de <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1e008:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e00a:	2d00      	cmp	r5, #0
   1e00c:	d068      	beq.n	1e0e0 <z_arm_fault+0x1b0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1e00e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1e012:	b922      	cbnz	r2, 1e01e <z_arm_fault+0xee>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1e014:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1e018:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1e01c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1e01e:	4620      	mov	r0, r4
   1e020:	a902      	add	r1, sp, #8
   1e022:	f7ff fc6f 	bl	1d904 <z_arm_fatal_error>
}
   1e026:	b00b      	add	sp, #44	; 0x2c
   1e028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1e02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e02e:	0058      	lsls	r0, r3, #1
   1e030:	d5d6      	bpl.n	1dfe0 <z_arm_fault+0xb0>
		PR_EXC("  Fault escalation (see below)");
   1e032:	683b      	ldr	r3, [r7, #0]
   1e034:	0759      	lsls	r1, r3, #29
   1e036:	d009      	beq.n	1e04c <z_arm_fault+0x11c>
   1e038:	492f      	ldr	r1, [pc, #188]	; (1e0f8 <z_arm_fault+0x1c8>)
   1e03a:	4b2e      	ldr	r3, [pc, #184]	; (1e0f4 <z_arm_fault+0x1c4>)
   1e03c:	4832      	ldr	r0, [pc, #200]	; (1e108 <z_arm_fault+0x1d8>)
   1e03e:	1ac9      	subs	r1, r1, r3
   1e040:	08c9      	lsrs	r1, r1, #3
   1e042:	0189      	lsls	r1, r1, #6
   1e044:	f041 0101 	orr.w	r1, r1, #1
   1e048:	f003 fc1a 	bl	21880 <log_0>
		if (SCB_MMFSR != 0) {
   1e04c:	4b2f      	ldr	r3, [pc, #188]	; (1e10c <z_arm_fault+0x1dc>)
   1e04e:	781b      	ldrb	r3, [r3, #0]
   1e050:	b12b      	cbz	r3, 1e05e <z_arm_fault+0x12e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1e052:	2001      	movs	r0, #1
   1e054:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1e058:	f7ff fe1e 	bl	1dc98 <mem_manage_fault.isra.0>
   1e05c:	e00f      	b.n	1e07e <z_arm_fault+0x14e>
		} else if (SCB_BFSR != 0) {
   1e05e:	4b2c      	ldr	r3, [pc, #176]	; (1e110 <z_arm_fault+0x1e0>)
   1e060:	781b      	ldrb	r3, [r3, #0]
   1e062:	b12b      	cbz	r3, 1e070 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   1e064:	2001      	movs	r0, #1
   1e066:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   1e06a:	f7ff feb3 	bl	1ddd4 <bus_fault.isra.0>
   1e06e:	e006      	b.n	1e07e <z_arm_fault+0x14e>
		} else if (SCB_UFSR != 0) {
   1e070:	4b28      	ldr	r3, [pc, #160]	; (1e114 <z_arm_fault+0x1e4>)
   1e072:	881b      	ldrh	r3, [r3, #0]
   1e074:	b29b      	uxth	r3, r3
   1e076:	2b00      	cmp	r3, #0
   1e078:	d0b2      	beq.n	1dfe0 <z_arm_fault+0xb0>
			reason = usage_fault(esf);
   1e07a:	f7ff fd63 	bl	1db44 <usage_fault.isra.0>
   1e07e:	4604      	mov	r4, r0
   1e080:	e7ba      	b.n	1dff8 <z_arm_fault+0xc8>
		reason = mem_manage_fault(esf, 0, recoverable);
   1e082:	2000      	movs	r0, #0
   1e084:	f10d 0107 	add.w	r1, sp, #7
   1e088:	e7e6      	b.n	1e058 <z_arm_fault+0x128>
		reason = bus_fault(esf, 0, recoverable);
   1e08a:	2000      	movs	r0, #0
   1e08c:	f10d 0107 	add.w	r1, sp, #7
   1e090:	e7eb      	b.n	1e06a <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   1e092:	4b17      	ldr	r3, [pc, #92]	; (1e0f0 <z_arm_fault+0x1c0>)
   1e094:	681b      	ldr	r3, [r3, #0]
   1e096:	075a      	lsls	r2, r3, #29
   1e098:	d0a2      	beq.n	1dfe0 <z_arm_fault+0xb0>
   1e09a:	4b16      	ldr	r3, [pc, #88]	; (1e0f4 <z_arm_fault+0x1c4>)
   1e09c:	4916      	ldr	r1, [pc, #88]	; (1e0f8 <z_arm_fault+0x1c8>)
   1e09e:	481e      	ldr	r0, [pc, #120]	; (1e118 <z_arm_fault+0x1e8>)
   1e0a0:	1ac9      	subs	r1, r1, r3
   1e0a2:	08c9      	lsrs	r1, r1, #3
   1e0a4:	0189      	lsls	r1, r1, #6
   1e0a6:	f041 0101 	orr.w	r1, r1, #1
   1e0aa:	f003 fbe9 	bl	21880 <log_0>
   1e0ae:	e797      	b.n	1dfe0 <z_arm_fault+0xb0>
	PR_FAULT_INFO("***** %s %d) *****",
   1e0b0:	4b0f      	ldr	r3, [pc, #60]	; (1e0f0 <z_arm_fault+0x1c0>)
   1e0b2:	681b      	ldr	r3, [r3, #0]
   1e0b4:	075b      	lsls	r3, r3, #29
   1e0b6:	d093      	beq.n	1dfe0 <z_arm_fault+0xb0>
   1e0b8:	4a0e      	ldr	r2, [pc, #56]	; (1e0f4 <z_arm_fault+0x1c4>)
   1e0ba:	4b0f      	ldr	r3, [pc, #60]	; (1e0f8 <z_arm_fault+0x1c8>)
   1e0bc:	4817      	ldr	r0, [pc, #92]	; (1e11c <z_arm_fault+0x1ec>)
   1e0be:	1a9b      	subs	r3, r3, r2
   1e0c0:	08db      	lsrs	r3, r3, #3
   1e0c2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1e0c6:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1e0ca:	4915      	ldr	r1, [pc, #84]	; (1e120 <z_arm_fault+0x1f0>)
   1e0cc:	f043 0301 	orr.w	r3, r3, #1
   1e0d0:	bf18      	it	ne
   1e0d2:	4601      	movne	r1, r0
   1e0d4:	f1a7 0210 	sub.w	r2, r7, #16
   1e0d8:	4812      	ldr	r0, [pc, #72]	; (1e124 <z_arm_fault+0x1f4>)
   1e0da:	f003 fbf2 	bl	218c2 <log_2>
   1e0de:	e77f      	b.n	1dfe0 <z_arm_fault+0xb0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1e0e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1e0e4:	f023 0301 	bic.w	r3, r3, #1
   1e0e8:	e798      	b.n	1e01c <z_arm_fault+0xec>
   1e0ea:	bf00      	nop
   1e0ec:	e000ed00 	.word	0xe000ed00
   1e0f0:	2001014c 	.word	0x2001014c
   1e0f4:	00023fa4 	.word	0x00023fa4
   1e0f8:	00023fd4 	.word	0x00023fd4
   1e0fc:	0002831a 	.word	0x0002831a
   1e100:	0002833d 	.word	0x0002833d
   1e104:	00028354 	.word	0x00028354
   1e108:	00028375 	.word	0x00028375
   1e10c:	e000ed28 	.word	0xe000ed28
   1e110:	e000ed29 	.word	0xe000ed29
   1e114:	e000ed2a 	.word	0xe000ed2a
   1e118:	00028394 	.word	0x00028394
   1e11c:	000283df 	.word	0x000283df
   1e120:	000283ca 	.word	0x000283ca
   1e124:	000283f8 	.word	0x000283f8

0001e128 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1e128:	4b04      	ldr	r3, [pc, #16]	; (1e13c <z_arm_fault_init+0x14>)
   1e12a:	695a      	ldr	r2, [r3, #20]
   1e12c:	f042 0210 	orr.w	r2, r2, #16
   1e130:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1e132:	695a      	ldr	r2, [r3, #20]
   1e134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1e138:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1e13a:	4770      	bx	lr
   1e13c:	e000ed00 	.word	0xe000ed00

0001e140 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1e140:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e144:	4905      	ldr	r1, [pc, #20]	; (1e15c <sys_arch_reboot+0x1c>)
   1e146:	4b06      	ldr	r3, [pc, #24]	; (1e160 <sys_arch_reboot+0x20>)
   1e148:	68ca      	ldr	r2, [r1, #12]
   1e14a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e14e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e150:	60cb      	str	r3, [r1, #12]
   1e152:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1e156:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e158:	e7fd      	b.n	1e156 <sys_arch_reboot+0x16>
   1e15a:	bf00      	nop
   1e15c:	e000ed00 	.word	0xe000ed00
   1e160:	05fa0004 	.word	0x05fa0004

0001e164 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1e164:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e166:	2120      	movs	r1, #32
   1e168:	4803      	ldr	r0, [pc, #12]	; (1e178 <z_arm_interrupt_init+0x14>)
   1e16a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1e16c:	3301      	adds	r3, #1
   1e16e:	2b41      	cmp	r3, #65	; 0x41
   1e170:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1e174:	d1f9      	bne.n	1e16a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1e176:	4770      	bx	lr
   1e178:	e000e100 	.word	0xe000e100

0001e17c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   1e17c:	b508      	push	{r3, lr}
	if (_current == thread) {
   1e17e:	4b0e      	ldr	r3, [pc, #56]	; (1e1b8 <z_impl_k_thread_abort+0x3c>)
   1e180:	689b      	ldr	r3, [r3, #8]
   1e182:	4283      	cmp	r3, r0
   1e184:	d107      	bne.n	1e196 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e186:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1e18a:	b193      	cbz	r3, 1e1b2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1e18c:	4a0b      	ldr	r2, [pc, #44]	; (1e1bc <z_impl_k_thread_abort+0x40>)
   1e18e:	6853      	ldr	r3, [r2, #4]
   1e190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1e194:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   1e196:	f001 fe15 	bl	1fdc4 <z_thread_single_abort>
	__asm__ volatile(
   1e19a:	f04f 0320 	mov.w	r3, #32
   1e19e:	f3ef 8011 	mrs	r0, BASEPRI
   1e1a2:	f383 8811 	msr	BASEPRI, r3
   1e1a6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   1e1aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e1ae:	f005 ba5f 	b.w	23670 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   1e1b2:	f002 f98f 	bl	204d4 <z_self_abort>
   1e1b6:	bf00      	nop
   1e1b8:	20010bbc 	.word	0x20010bbc
   1e1bc:	e000ed00 	.word	0xe000ed00

0001e1c0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1e1c0:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1e1c2:	4b0e      	ldr	r3, [pc, #56]	; (1e1fc <z_arm_configure_static_mpu_regions+0x3c>)
{
   1e1c4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1e1c6:	9302      	str	r3, [sp, #8]
   1e1c8:	4b0d      	ldr	r3, [pc, #52]	; (1e200 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1e1ca:	4c0e      	ldr	r4, [pc, #56]	; (1e204 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   1e1cc:	9303      	str	r3, [sp, #12]
   1e1ce:	4b0e      	ldr	r3, [pc, #56]	; (1e208 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1e1d0:	4a0e      	ldr	r2, [pc, #56]	; (1e20c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1e1d2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1e1d4:	ab02      	add	r3, sp, #8
   1e1d6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1e1d8:	a801      	add	r0, sp, #4
   1e1da:	4623      	mov	r3, r4
   1e1dc:	2101      	movs	r1, #1
   1e1de:	f000 f947 	bl	1e470 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   1e1e2:	2300      	movs	r3, #0
   1e1e4:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1e1e6:	4b0a      	ldr	r3, [pc, #40]	; (1e210 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1e1e8:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1e1ea:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1e1ec:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   1e1ee:	9305      	str	r3, [sp, #20]
   1e1f0:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1e1f2:	f000 f947 	bl	1e484 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1e1f6:	b008      	add	sp, #32
   1e1f8:	bd10      	pop	{r4, pc}
   1e1fa:	bf00      	nop
   1e1fc:	20010000 	.word	0x20010000
   1e200:	00000000 	.word	0x00000000
   1e204:	20040000 	.word	0x20040000
   1e208:	00010006 	.word	0x00010006
   1e20c:	20010000 	.word	0x20010000
   1e210:	200101f8 	.word	0x200101f8

0001e214 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1e214:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1e216:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   1e218:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1e21a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1e21e:	f004 031f 	and.w	r3, r4, #31
   1e222:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1e224:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1e226:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1e228:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1e22c:	4904      	ldr	r1, [pc, #16]	; (1e240 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   1e22e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   1e232:	f043 0301 	orr.w	r3, r3, #1
   1e236:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   1e238:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   1e23a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   1e23c:	bd10      	pop	{r4, pc}
   1e23e:	bf00      	nop
   1e240:	e000ed90 	.word	0xe000ed90

0001e244 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1e244:	280f      	cmp	r0, #15
{
   1e246:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   1e248:	d911      	bls.n	1e26e <region_allocate_and_init+0x2a>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1e24a:	4b0a      	ldr	r3, [pc, #40]	; (1e274 <region_allocate_and_init+0x30>)
   1e24c:	681b      	ldr	r3, [r3, #0]
   1e24e:	075b      	lsls	r3, r3, #29
   1e250:	d00a      	beq.n	1e268 <region_allocate_and_init+0x24>
   1e252:	4a09      	ldr	r2, [pc, #36]	; (1e278 <region_allocate_and_init+0x34>)
   1e254:	4b09      	ldr	r3, [pc, #36]	; (1e27c <region_allocate_and_init+0x38>)
   1e256:	4601      	mov	r1, r0
   1e258:	1ad2      	subs	r2, r2, r3
   1e25a:	08d2      	lsrs	r2, r2, #3
   1e25c:	0192      	lsls	r2, r2, #6
   1e25e:	4808      	ldr	r0, [pc, #32]	; (1e280 <region_allocate_and_init+0x3c>)
   1e260:	f042 0201 	orr.w	r2, r2, #1
   1e264:	f003 fb19 	bl	2189a <log_1>
		return -EINVAL;
   1e268:	f06f 0015 	mvn.w	r0, #21
   1e26c:	e001      	b.n	1e272 <region_allocate_and_init+0x2e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1e26e:	f7ff ffd1 	bl	1e214 <region_init>

	return index;
}
   1e272:	bd10      	pop	{r4, pc}
   1e274:	20010148 	.word	0x20010148
   1e278:	00023fcc 	.word	0x00023fcc
   1e27c:	00023fa4 	.word	0x00023fa4
   1e280:	0002840f 	.word	0x0002840f

0001e284 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e288:	4680      	mov	r8, r0
   1e28a:	4689      	mov	r9, r1
   1e28c:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1e28e:	2700      	movs	r7, #0
	MPU->RNR = index;
   1e290:	4d55      	ldr	r5, [pc, #340]	; (1e3e8 <mpu_configure_regions_and_partition.constprop.0+0x164>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1e292:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1e294:	454f      	cmp	r7, r9
   1e296:	da32      	bge.n	1e2fe <mpu_configure_regions_and_partition.constprop.0+0x7a>
		if (regions[i]->size == 0U) {
   1e298:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   1e29c:	f8d3 a004 	ldr.w	sl, [r3, #4]
   1e2a0:	f1ba 0f00 	cmp.w	sl, #0
   1e2a4:	d057      	beq.n	1e356 <mpu_configure_regions_and_partition.constprop.0+0xd2>
		&&
   1e2a6:	f1ba 0f1f 	cmp.w	sl, #31
   1e2aa:	d922      	bls.n	1e2f2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
		&&
   1e2ac:	f01a 0f1f 	tst.w	sl, #31
   1e2b0:	d11f      	bne.n	1e2f2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
		((part->start &
   1e2b2:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   1e2b6:	f01b 0f1f 	tst.w	fp, #31
   1e2ba:	d11a      	bne.n	1e2f2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1e2bc:	4658      	mov	r0, fp
   1e2be:	f004 fdfb 	bl	22eb8 <arm_cmse_mpu_region_get>
   1e2c2:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1e2c4:	eb0a 000b 	add.w	r0, sl, fp
   1e2c8:	3801      	subs	r0, #1
   1e2ca:	f004 fdf5 	bl	22eb8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1e2ce:	4286      	cmp	r6, r0
   1e2d0:	d025      	beq.n	1e31e <mpu_configure_regions_and_partition.constprop.0+0x9a>
	return -EINVAL;
   1e2d2:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1e2d6:	4b45      	ldr	r3, [pc, #276]	; (1e3ec <mpu_configure_regions_and_partition.constprop.0+0x168>)
   1e2d8:	681b      	ldr	r3, [r3, #0]
   1e2da:	075b      	lsls	r3, r3, #29
   1e2dc:	d00d      	beq.n	1e2fa <mpu_configure_regions_and_partition.constprop.0+0x76>
   1e2de:	4a44      	ldr	r2, [pc, #272]	; (1e3f0 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1e2e0:	4b44      	ldr	r3, [pc, #272]	; (1e3f4 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   1e2e2:	4631      	mov	r1, r6
   1e2e4:	1ad2      	subs	r2, r2, r3
   1e2e6:	08d2      	lsrs	r2, r2, #3
   1e2e8:	0192      	lsls	r2, r2, #6
   1e2ea:	4843      	ldr	r0, [pc, #268]	; (1e3f8 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   1e2ec:	f042 0201 	orr.w	r2, r2, #1
   1e2f0:	e012      	b.n	1e318 <mpu_configure_regions_and_partition.constprop.0+0x94>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1e2f2:	4b3e      	ldr	r3, [pc, #248]	; (1e3ec <mpu_configure_regions_and_partition.constprop.0+0x168>)
   1e2f4:	681b      	ldr	r3, [r3, #0]
   1e2f6:	075a      	lsls	r2, r3, #29
   1e2f8:	d105      	bne.n	1e306 <mpu_configure_regions_and_partition.constprop.0+0x82>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   1e2fa:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   1e2fe:	4620      	mov	r0, r4
   1e300:	b005      	add	sp, #20
   1e302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
   1e306:	4639      	mov	r1, r7
   1e308:	4a39      	ldr	r2, [pc, #228]	; (1e3f0 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   1e30a:	4b3a      	ldr	r3, [pc, #232]	; (1e3f4 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   1e30c:	483b      	ldr	r0, [pc, #236]	; (1e3fc <mpu_configure_regions_and_partition.constprop.0+0x178>)
   1e30e:	1ad2      	subs	r2, r2, r3
   1e310:	08d2      	lsrs	r2, r2, #3
   1e312:	0192      	lsls	r2, r2, #6
   1e314:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   1e318:	f003 fabf 	bl	2189a <log_1>
   1e31c:	e7ed      	b.n	1e2fa <mpu_configure_regions_and_partition.constprop.0+0x76>
		if ((u_reg_index == -EINVAL) ||
   1e31e:	f116 0f16 	cmn.w	r6, #22
   1e322:	d0d8      	beq.n	1e2d6 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   1e324:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   1e326:	42b3      	cmp	r3, r6
   1e328:	dbd5      	blt.n	1e2d6 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   1e32a:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1e32c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   1e32e:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1e330:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1e332:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   1e336:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1e33a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1e33e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1e342:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1e344:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1e346:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   1e34a:	d116      	bne.n	1e37a <mpu_configure_regions_and_partition.constprop.0+0xf6>
   1e34c:	45d3      	cmp	fp, sl
   1e34e:	d104      	bne.n	1e35a <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, regions[i]);
   1e350:	b2f0      	uxtb	r0, r6
   1e352:	f004 fd98 	bl	22e86 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1e356:	3701      	adds	r7, #1
   1e358:	e79c      	b.n	1e294 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   1e35a:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1e35c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   1e35e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1e362:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1e366:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1e368:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   1e36a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   1e36c:	f004 fd8b 	bl	22e86 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1e370:	f110 0f16 	cmn.w	r0, #22
   1e374:	d0c1      	beq.n	1e2fa <mpu_configure_regions_and_partition.constprop.0+0x76>
			reg_index++;
   1e376:	1c44      	adds	r4, r0, #1
   1e378:	e7ed      	b.n	1e356 <mpu_configure_regions_and_partition.constprop.0+0xd2>
	MPU->RNR = index;
   1e37a:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1e37c:	692a      	ldr	r2, [r5, #16]
   1e37e:	3b01      	subs	r3, #1
   1e380:	f023 031f 	bic.w	r3, r3, #31
   1e384:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   1e388:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   1e38a:	45d3      	cmp	fp, sl
   1e38c:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1e38e:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   1e390:	d0ec      	beq.n	1e36c <mpu_configure_regions_and_partition.constprop.0+0xe8>
				mpu_configure_region(reg_index, regions[i]);
   1e392:	f004 fd78 	bl	22e86 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1e396:	f110 0f16 	cmn.w	r0, #22
   1e39a:	d0ae      	beq.n	1e2fa <mpu_configure_regions_and_partition.constprop.0+0x76>
	MPU->RNR = index;
   1e39c:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   1e39e:	68ea      	ldr	r2, [r5, #12]
   1e3a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1e3a4:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   1e3a8:	f362 0304 	bfi	r3, r2, #0, #5
   1e3ac:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1e3b0:	692b      	ldr	r3, [r5, #16]
   1e3b2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1e3b6:	085b      	lsrs	r3, r3, #1
   1e3b8:	f363 1247 	bfi	r2, r3, #5, #3
   1e3bc:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   1e3c0:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   1e3c4:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   1e3c6:	e9d2 3200 	ldrd	r3, r2, [r2]
   1e3ca:	4413      	add	r3, r2
   1e3cc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   1e3ce:	f023 031f 	bic.w	r3, r3, #31
   1e3d2:	445b      	add	r3, fp
   1e3d4:	eba3 030a 	sub.w	r3, r3, sl
   1e3d8:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   1e3dc:	4669      	mov	r1, sp
   1e3de:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   1e3e0:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   1e3e2:	f7ff ff2f 	bl	1e244 <region_allocate_and_init>
   1e3e6:	e7c3      	b.n	1e370 <mpu_configure_regions_and_partition.constprop.0+0xec>
   1e3e8:	e000ed90 	.word	0xe000ed90
   1e3ec:	20010148 	.word	0x20010148
   1e3f0:	00023fcc 	.word	0x00023fcc
   1e3f4:	00023fa4 	.word	0x00023fa4
   1e3f8:	00028458 	.word	0x00028458
   1e3fc:	00028435 	.word	0x00028435

0001e400 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1e400:	2205      	movs	r2, #5
   1e402:	4b03      	ldr	r3, [pc, #12]	; (1e410 <arm_core_mpu_enable+0x10>)
   1e404:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1e406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e40a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1e40e:	4770      	bx	lr
   1e410:	e000ed90 	.word	0xe000ed90

0001e414 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   1e414:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1e418:	2200      	movs	r2, #0
   1e41a:	4b01      	ldr	r3, [pc, #4]	; (1e420 <arm_core_mpu_disable+0xc>)
   1e41c:	605a      	str	r2, [r3, #4]
}
   1e41e:	4770      	bx	lr
   1e420:	e000ed90 	.word	0xe000ed90

0001e424 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   1e424:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1e426:	4c0e      	ldr	r4, [pc, #56]	; (1e460 <arm_mpu_init+0x3c>)
   1e428:	6825      	ldr	r5, [r4, #0]
   1e42a:	2d10      	cmp	r5, #16
   1e42c:	d814      	bhi.n	1e458 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1e42e:	f7ff fff1 	bl	1e414 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1e432:	2000      	movs	r0, #0
	MPU->MAIR0 =
   1e434:	4b0b      	ldr	r3, [pc, #44]	; (1e464 <arm_mpu_init+0x40>)
   1e436:	4a0c      	ldr	r2, [pc, #48]	; (1e468 <arm_mpu_init+0x44>)
   1e438:	631a      	str	r2, [r3, #48]	; 0x30
   1e43a:	4285      	cmp	r5, r0
   1e43c:	d105      	bne.n	1e44a <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1e43e:	4b0b      	ldr	r3, [pc, #44]	; (1e46c <arm_mpu_init+0x48>)
   1e440:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1e442:	f7ff ffdd 	bl	1e400 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1e446:	2000      	movs	r0, #0
}
   1e448:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1e44a:	6861      	ldr	r1, [r4, #4]
   1e44c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1e450:	f7ff fee0 	bl	1e214 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1e454:	3001      	adds	r0, #1
   1e456:	e7f0      	b.n	1e43a <arm_mpu_init+0x16>
		return -1;
   1e458:	f04f 30ff 	mov.w	r0, #4294967295
   1e45c:	e7f4      	b.n	1e448 <arm_mpu_init+0x24>
   1e45e:	bf00      	nop
   1e460:	000268b4 	.word	0x000268b4
   1e464:	e000ed90 	.word	0xe000ed90
   1e468:	0044ffaa 	.word	0x0044ffaa
   1e46c:	2001ec7d 	.word	0x2001ec7d

0001e470 <arm_core_mpu_configure_static_mpu_regions>:
{
   1e470:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1e472:	4c03      	ldr	r4, [pc, #12]	; (1e480 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1e474:	7822      	ldrb	r2, [r4, #0]
   1e476:	f7ff ff05 	bl	1e284 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1e47a:	7020      	strb	r0, [r4, #0]
}
   1e47c:	bd10      	pop	{r4, pc}
   1e47e:	bf00      	nop
   1e480:	2001ec7d 	.word	0x2001ec7d

0001e484 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1e484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e488:	4d26      	ldr	r5, [pc, #152]	; (1e524 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   1e48a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1e48c:	4606      	mov	r6, r0
   1e48e:	f04f 0800 	mov.w	r8, #0
   1e492:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1e494:	4f24      	ldr	r7, [pc, #144]	; (1e528 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1e496:	45d0      	cmp	r8, sl
   1e498:	da1b      	bge.n	1e4d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1e49a:	f8d6 9004 	ldr.w	r9, [r6, #4]
   1e49e:	f1b9 0f00 	cmp.w	r9, #0
   1e4a2:	d039      	beq.n	1e518 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1e4a4:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1e4a6:	4608      	mov	r0, r1
   1e4a8:	9101      	str	r1, [sp, #4]
   1e4aa:	f004 fd05 	bl	22eb8 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1e4ae:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1e4b0:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1e4b2:	eb09 0001 	add.w	r0, r9, r1
   1e4b6:	3801      	subs	r0, #1
   1e4b8:	f004 fcfe 	bl	22eb8 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1e4bc:	4284      	cmp	r4, r0
   1e4be:	f04f 0214 	mov.w	r2, #20
   1e4c2:	4b1a      	ldr	r3, [pc, #104]	; (1e52c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   1e4c4:	d008      	beq.n	1e4d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1e4c6:	f06f 0315 	mvn.w	r3, #21
   1e4ca:	fb02 f808 	mul.w	r8, r2, r8
   1e4ce:	f84b 3008 	str.w	r3, [fp, r8]
}
   1e4d2:	b003      	add	sp, #12
   1e4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1e4d8:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   1e4dc:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1e4de:	d0f8      	beq.n	1e4d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1e4e0:	7819      	ldrb	r1, [r3, #0]
   1e4e2:	42a1      	cmp	r1, r4
   1e4e4:	ddf5      	ble.n	1e4d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   1e4e6:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   1e4ea:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   1e4ec:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1e4ee:	68fc      	ldr	r4, [r7, #12]
   1e4f0:	f100 0108 	add.w	r1, r0, #8
   1e4f4:	7b00      	ldrb	r0, [r0, #12]
   1e4f6:	f364 0004 	bfi	r0, r4, #0, #5
   1e4fa:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   1e4fc:	6938      	ldr	r0, [r7, #16]
   1e4fe:	790c      	ldrb	r4, [r1, #4]
   1e500:	0840      	lsrs	r0, r0, #1
   1e502:	f360 1447 	bfi	r4, r0, #5, #3
   1e506:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   1e508:	68f9      	ldr	r1, [r7, #12]
   1e50a:	f021 011f 	bic.w	r1, r1, #31
   1e50e:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1e510:	6939      	ldr	r1, [r7, #16]
   1e512:	f021 011f 	bic.w	r1, r1, #31
   1e516:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1e518:	f108 0801 	add.w	r8, r8, #1
   1e51c:	3514      	adds	r5, #20
   1e51e:	360c      	adds	r6, #12
   1e520:	e7b9      	b.n	1e496 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1e522:	bf00      	nop
   1e524:	20010b7c 	.word	0x20010b7c
   1e528:	e000ed90 	.word	0xe000ed90
   1e52c:	2001ec7d 	.word	0x2001ec7d

0001e530 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1e530:	4b01      	ldr	r3, [pc, #4]	; (1e538 <__stdout_hook_install+0x8>)
   1e532:	6018      	str	r0, [r3, #0]
}
   1e534:	4770      	bx	lr
   1e536:	bf00      	nop
   1e538:	2001007c 	.word	0x2001007c

0001e53c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   1e53c:	3902      	subs	r1, #2
   1e53e:	2901      	cmp	r1, #1
   1e540:	d802      	bhi.n	1e548 <z_impl_zephyr_fputc+0xc>
   1e542:	4b03      	ldr	r3, [pc, #12]	; (1e550 <z_impl_zephyr_fputc+0x14>)
   1e544:	681b      	ldr	r3, [r3, #0]
   1e546:	4718      	bx	r3
}
   1e548:	f04f 30ff 	mov.w	r0, #4294967295
   1e54c:	4770      	bx	lr
   1e54e:	bf00      	nop
   1e550:	2001007c 	.word	0x2001007c

0001e554 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   1e554:	b40e      	push	{r1, r2, r3}
   1e556:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1e558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   1e55c:	ab05      	add	r3, sp, #20
   1e55e:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   1e562:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1e564:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   1e566:	4806      	ldr	r0, [pc, #24]	; (1e580 <sprintf+0x2c>)
   1e568:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   1e56a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   1e56c:	f7fb fdce 	bl	1a10c <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   1e570:	2200      	movs	r2, #0
   1e572:	9b02      	ldr	r3, [sp, #8]
   1e574:	701a      	strb	r2, [r3, #0]
	return r;
}
   1e576:	b004      	add	sp, #16
   1e578:	f85d eb04 	ldr.w	lr, [sp], #4
   1e57c:	b003      	add	sp, #12
   1e57e:	4770      	bx	lr
   1e580:	00023185 	.word	0x00023185

0001e584 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   1e584:	b40f      	push	{r0, r1, r2, r3}
   1e586:	b507      	push	{r0, r1, r2, lr}
   1e588:	ab04      	add	r3, sp, #16
   1e58a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   1e58e:	2102      	movs	r1, #2
   1e590:	4804      	ldr	r0, [pc, #16]	; (1e5a4 <printf+0x20>)
	va_start(vargs, format);
   1e592:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   1e594:	f7fb fdba 	bl	1a10c <cbvprintf>
	va_end(vargs);

	return r;
}
   1e598:	b003      	add	sp, #12
   1e59a:	f85d eb04 	ldr.w	lr, [sp], #4
   1e59e:	b004      	add	sp, #16
   1e5a0:	4770      	bx	lr
   1e5a2:	bf00      	nop
   1e5a4:	00023181 	.word	0x00023181

0001e5a8 <gmtime_r>:
 * due to time zone, leap seconds, or a different epoch must be
 * applied to @p time before invoking this function.
 */
struct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,
		    struct tm *_MLIBC_RESTRICT tp)
{
   1e5a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	time_t z = *timep;
   1e5ac:	e9d0 6700 	ldrd	r6, r7, [r0]
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1e5b0:	2e00      	cmp	r6, #0
   1e5b2:	f177 0300 	sbcs.w	r3, r7, #0
{
   1e5b6:	468a      	mov	sl, r1
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1e5b8:	f280 80a8 	bge.w	1e70c <gmtime_r+0x164>
   1e5bc:	2300      	movs	r3, #0
   1e5be:	4863      	ldr	r0, [pc, #396]	; (1e74c <gmtime_r+0x1a4>)
   1e5c0:	4a63      	ldr	r2, [pc, #396]	; (1e750 <gmtime_r+0x1a8>)
   1e5c2:	1830      	adds	r0, r6, r0
   1e5c4:	f147 31ff 	adc.w	r1, r7, #4294967295
   1e5c8:	f7ed fe3a 	bl	c240 <__aeabi_ldivmod>
	unsigned int rem = z - days * 86400;
   1e5cc:	4b61      	ldr	r3, [pc, #388]	; (1e754 <gmtime_r+0x1ac>)
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1e5ce:	4604      	mov	r4, r0
	unsigned int rem = z - days * 86400;
   1e5d0:	fb03 6600 	mla	r6, r3, r0, r6
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1e5d4:	460d      	mov	r5, r1

	*tp = (struct tm){ 0 };
   1e5d6:	2224      	movs	r2, #36	; 0x24
   1e5d8:	2100      	movs	r1, #0
   1e5da:	4650      	mov	r0, sl
   1e5dc:	f004 fdaa 	bl	23134 <memset>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   1e5e0:	f06f 0203 	mvn.w	r2, #3
   1e5e4:	f04f 33ff 	mov.w	r3, #4294967295
   1e5e8:	4294      	cmp	r4, r2
   1e5ea:	eb75 0303 	sbcs.w	r3, r5, r3
   1e5ee:	f04f 0207 	mov.w	r2, #7
   1e5f2:	f04f 0300 	mov.w	r3, #0
   1e5f6:	f2c0 808e 	blt.w	1e716 <gmtime_r+0x16e>
   1e5fa:	1d20      	adds	r0, r4, #4
   1e5fc:	f145 0100 	adc.w	r1, r5, #0
   1e600:	f7ed fe1e 	bl	c240 <__aeabi_ldivmod>
	z += 719468;
   1e604:	4b54      	ldr	r3, [pc, #336]	; (1e758 <gmtime_r+0x1b0>)
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   1e606:	f8ca 2018 	str.w	r2, [sl, #24]
	z += 719468;
   1e60a:	eb14 0803 	adds.w	r8, r4, r3
   1e60e:	f04f 0300 	mov.w	r3, #0
   1e612:	eb45 0903 	adc.w	r9, r5, r3
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   1e616:	f1b8 0f00 	cmp.w	r8, #0
   1e61a:	f179 0300 	sbcs.w	r3, r9, #0
   1e61e:	f280 8081 	bge.w	1e724 <gmtime_r+0x17c>
   1e622:	2100      	movs	r1, #0
   1e624:	2300      	movs	r3, #0
   1e626:	484d      	ldr	r0, [pc, #308]	; (1e75c <gmtime_r+0x1b4>)
   1e628:	4a4d      	ldr	r2, [pc, #308]	; (1e760 <gmtime_r+0x1b8>)
   1e62a:	1820      	adds	r0, r4, r0
   1e62c:	eb45 0101 	adc.w	r1, r5, r1
   1e630:	f7ed fe06 	bl	c240 <__aeabi_ldivmod>
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   1e634:	f648 62ac 	movw	r2, #36524	; 0x8eac
   1e638:	f240 55b4 	movw	r5, #1460	; 0x5b4
	unsigned int doe = (z - era * (bigint_type)146097);
   1e63c:	4b49      	ldr	r3, [pc, #292]	; (1e764 <gmtime_r+0x1bc>)
	bigint_type y = (time_t)yoe + era * 400;
   1e63e:	f44f 7cc8 	mov.w	ip, #400	; 0x190
	unsigned int doe = (z - era * (bigint_type)146097);
   1e642:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   1e646:	fbb8 f2f2 	udiv	r2, r8, r2
   1e64a:	fbb8 f3f5 	udiv	r3, r8, r5
   1e64e:	4442      	add	r2, r8
   1e650:	1ad2      	subs	r2, r2, r3
   1e652:	4b45      	ldr	r3, [pc, #276]	; (1e768 <gmtime_r+0x1c0>)
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   1e654:	460f      	mov	r7, r1
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   1e656:	fbb8 f3f3 	udiv	r3, r8, r3
   1e65a:	1ad2      	subs	r2, r2, r3
   1e65c:	f240 136d 	movw	r3, #365	; 0x16d
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   1e660:	f04f 0e64 	mov.w	lr, #100	; 0x64
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   1e664:	fbb2 f4f3 	udiv	r4, r2, r3
	bigint_type y = (time_t)yoe + era * 400;
   1e668:	fba0 010c 	umull	r0, r1, r0, ip
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   1e66c:	fbb2 f5f5 	udiv	r5, r2, r5
	bigint_type y = (time_t)yoe + era * 400;
   1e670:	fb0c 1107 	mla	r1, ip, r7, r1
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   1e674:	fbb4 f7fe 	udiv	r7, r4, lr
	bigint_type y = (time_t)yoe + era * 400;
   1e678:	1900      	adds	r0, r0, r4
   1e67a:	f141 0100 	adc.w	r1, r1, #0
   1e67e:	e9cd 0100 	strd	r0, r1, [sp]
	unsigned int mp = (5U * doy + 2U) / 153U;
   1e682:	2199      	movs	r1, #153	; 0x99
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   1e684:	1b7d      	subs	r5, r7, r5
   1e686:	44a8      	add	r8, r5
   1e688:	fb03 8314 	mls	r3, r3, r4, r8
	unsigned int mp = (5U * doy + 2U) / 153U;
   1e68c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1e690:	f10c 0c02 	add.w	ip, ip, #2
   1e694:	fbbc f5f1 	udiv	r5, ip, r1
	unsigned int d = doy - (153U * mp + 2U) / 5U + 1U;
   1e698:	f04f 0905 	mov.w	r9, #5
   1e69c:	4369      	muls	r1, r5
   1e69e:	3102      	adds	r1, #2
   1e6a0:	fbb1 f1f9 	udiv	r1, r1, r9
   1e6a4:	f103 0801 	add.w	r8, r3, #1
   1e6a8:	eba8 0101 	sub.w	r1, r8, r1
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   1e6ac:	f240 58f9 	movw	r8, #1529	; 0x5f9
   1e6b0:	45c4      	cmp	ip, r8
   1e6b2:	bf94      	ite	ls
   1e6b4:	f04f 0c03 	movls.w	ip, #3
   1e6b8:	f06f 0c08 	mvnhi.w	ip, #8
	tp->tm_year = y + (m <= 2) - 1900;
   1e6bc:	9800      	ldr	r0, [sp, #0]
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   1e6be:	4465      	add	r5, ip
	tp->tm_year = y + (m <= 2) - 1900;
   1e6c0:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   1e6c4:	2d02      	cmp	r5, #2
   1e6c6:	bf98      	it	ls
   1e6c8:	3001      	addls	r0, #1
	tp->tm_mon = m - 1;
   1e6ca:	3d01      	subs	r5, #1
	if (doy >= 306U) {
   1e6cc:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
	tp->tm_mday = d;
   1e6d0:	e9ca 1503 	strd	r1, r5, [sl, #12]
	tp->tm_year = y + (m <= 2) - 1900;
   1e6d4:	f8ca 0014 	str.w	r0, [sl, #20]
	if (doy >= 306U) {
   1e6d8:	d329      	bcc.n	1e72e <gmtime_r+0x186>
		tp->tm_yday = doy - 306U;
   1e6da:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132

	time_civil_from_days(days, tp);

	tp->tm_hour = rem / 60U / 60U;
   1e6de:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   1e6e2:	f8ca 301c 	str.w	r3, [sl, #28]
	tp->tm_hour = rem / 60U / 60U;
   1e6e6:	fbb6 f3f2 	udiv	r3, r6, r2
	rem -= tp->tm_hour * 60 * 60;
   1e6ea:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
   1e6ee:	223c      	movs	r2, #60	; 0x3c
	tp->tm_hour = rem / 60U / 60U;
   1e6f0:	f8ca 3008 	str.w	r3, [sl, #8]
	tp->tm_min = rem / 60;
   1e6f4:	fbb6 f3f2 	udiv	r3, r6, r2
	tp->tm_sec = rem - tp->tm_min * 60;

	return tp;
}
   1e6f8:	4650      	mov	r0, sl
	tp->tm_sec = rem - tp->tm_min * 60;
   1e6fa:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
   1e6fe:	f8ca 3004 	str.w	r3, [sl, #4]
	tp->tm_sec = rem - tp->tm_min * 60;
   1e702:	f8ca 6000 	str.w	r6, [sl]
}
   1e706:	b002      	add	sp, #8
   1e708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1e70c:	2300      	movs	r3, #0
   1e70e:	4630      	mov	r0, r6
   1e710:	4639      	mov	r1, r7
   1e712:	4a0f      	ldr	r2, [pc, #60]	; (1e750 <gmtime_r+0x1a8>)
   1e714:	e758      	b.n	1e5c8 <gmtime_r+0x20>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   1e716:	1d60      	adds	r0, r4, #5
   1e718:	f145 0100 	adc.w	r1, r5, #0
   1e71c:	f7ed fd90 	bl	c240 <__aeabi_ldivmod>
   1e720:	3206      	adds	r2, #6
   1e722:	e76f      	b.n	1e604 <gmtime_r+0x5c>
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   1e724:	2300      	movs	r3, #0
   1e726:	4640      	mov	r0, r8
   1e728:	4649      	mov	r1, r9
   1e72a:	4a0d      	ldr	r2, [pc, #52]	; (1e760 <gmtime_r+0x1b8>)
   1e72c:	e780      	b.n	1e630 <gmtime_r+0x88>
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   1e72e:	07a1      	lsls	r1, r4, #30
   1e730:	d102      	bne.n	1e738 <gmtime_r+0x190>
   1e732:	fb0e 4417 	mls	r4, lr, r7, r4
   1e736:	b93c      	cbnz	r4, 1e748 <gmtime_r+0x1a0>
   1e738:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
   1e73c:	bf8c      	ite	hi
   1e73e:	2200      	movhi	r2, #0
   1e740:	2201      	movls	r2, #1
   1e742:	333b      	adds	r3, #59	; 0x3b
   1e744:	4413      	add	r3, r2
   1e746:	e7ca      	b.n	1e6de <gmtime_r+0x136>
   1e748:	2201      	movs	r2, #1
   1e74a:	e7fa      	b.n	1e742 <gmtime_r+0x19a>
   1e74c:	fffeae81 	.word	0xfffeae81
   1e750:	00015180 	.word	0x00015180
   1e754:	fffeae80 	.word	0xfffeae80
   1e758:	000afa6c 	.word	0x000afa6c
   1e75c:	0008bfbc 	.word	0x0008bfbc
   1e760:	00023ab1 	.word	0x00023ab1
   1e764:	fffdc54f 	.word	0xfffdc54f
   1e768:	00023ab0 	.word	0x00023ab0

0001e76c <z_impl_clock_gettime>:
	switch (clock_id) {
   1e76c:	2801      	cmp	r0, #1
{
   1e76e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e772:	460c      	mov	r4, r1
	switch (clock_id) {
   1e774:	d009      	beq.n	1e78a <z_impl_clock_gettime+0x1e>
   1e776:	2804      	cmp	r0, #4
   1e778:	d03e      	beq.n	1e7f8 <z_impl_clock_gettime+0x8c>
   1e77a:	f000 fddf 	bl	1f33c <z_impl_z_errno>
		errno = EINVAL;
   1e77e:	2316      	movs	r3, #22
   1e780:	6003      	str	r3, [r0, #0]
   1e782:	f04f 30ff 	mov.w	r0, #4294967295
}
   1e786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		base = rt_clock_base;
   1e78a:	4b1d      	ldr	r3, [pc, #116]	; (1e800 <z_impl_clock_gettime+0x94>)
   1e78c:	689d      	ldr	r5, [r3, #8]
   1e78e:	e9d3 6700 	ldrd	r6, r7, [r3]
	return z_impl_k_uptime_ticks();
   1e792:	f005 f89d 	bl	238d0 <z_impl_k_uptime_ticks>
   1e796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e79a:	460a      	mov	r2, r1
   1e79c:	fba0 0103 	umull	r0, r1, r0, r3
   1e7a0:	fb03 1102 	mla	r1, r3, r2, r1
   1e7a4:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   1e7a8:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1e7ac:	ea4f 39d1 	mov.w	r9, r1, lsr #15
	ts->tv_sec = (int32_t) (elapsed_msecs / MSEC_PER_SEC);
   1e7b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e7b4:	2300      	movs	r3, #0
   1e7b6:	4640      	mov	r0, r8
   1e7b8:	4649      	mov	r1, r9
   1e7ba:	f7ed fd91 	bl	c2e0 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
   1e7be:	1836      	adds	r6, r6, r0
   1e7c0:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	ts->tv_nsec = (int32_t) ((elapsed_msecs % MSEC_PER_SEC) *
   1e7c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e7c8:	2300      	movs	r3, #0
   1e7ca:	4640      	mov	r0, r8
   1e7cc:	4649      	mov	r1, r9
	ts->tv_sec += base.tv_sec;
   1e7ce:	e9c4 6700 	strd	r6, r7, [r4]
	ts->tv_nsec = (int32_t) ((elapsed_msecs % MSEC_PER_SEC) *
   1e7d2:	f7ed fd85 	bl	c2e0 <__aeabi_uldivmod>
	ts->tv_nsec += base.tv_nsec;
   1e7d6:	4b0b      	ldr	r3, [pc, #44]	; (1e804 <z_impl_clock_gettime+0x98>)
   1e7d8:	fb03 5202 	mla	r2, r3, r2, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1e7dc:	4b0a      	ldr	r3, [pc, #40]	; (1e808 <z_impl_clock_gettime+0x9c>)
	ts->tv_nsec += base.tv_nsec;
   1e7de:	60a2      	str	r2, [r4, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   1e7e0:	429a      	cmp	r2, r3
   1e7e2:	d907      	bls.n	1e7f4 <z_impl_clock_gettime+0x88>
		ts->tv_sec++;
   1e7e4:	1c71      	adds	r1, r6, #1
   1e7e6:	f147 0300 	adc.w	r3, r7, #0
   1e7ea:	e9c4 1300 	strd	r1, r3, [r4]
		ts->tv_nsec -= NSEC_PER_SEC;
   1e7ee:	4b07      	ldr	r3, [pc, #28]	; (1e80c <z_impl_clock_gettime+0xa0>)
   1e7f0:	4413      	add	r3, r2
   1e7f2:	60a3      	str	r3, [r4, #8]
	return 0;
   1e7f4:	2000      	movs	r0, #0
   1e7f6:	e7c6      	b.n	1e786 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   1e7f8:	2500      	movs	r5, #0
   1e7fa:	2600      	movs	r6, #0
   1e7fc:	2700      	movs	r7, #0
   1e7fe:	e7c8      	b.n	1e792 <z_impl_clock_gettime+0x26>
   1e800:	200105f0 	.word	0x200105f0
   1e804:	000f4240 	.word	0x000f4240
   1e808:	3b9ac9ff 	.word	0x3b9ac9ff
   1e80c:	c4653600 	.word	0xc4653600

0001e810 <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1e810:	f000 021f 	and.w	r2, r0, #31
   1e814:	4805      	ldr	r0, [pc, #20]	; (1e82c <nrf_gpio_cfg_sense_set+0x1c>)
   1e816:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1e81a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1e81e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1e822:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1e826:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1e82a:	4770      	bx	lr
   1e82c:	40842500 	.word	0x40842500

0001e830 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1e830:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1e832:	4b09      	ldr	r3, [pc, #36]	; (1e858 <gpio_nrfx_init+0x28>)
   1e834:	781a      	ldrb	r2, [r3, #0]
   1e836:	b96a      	cbnz	r2, 1e854 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1e838:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e83a:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   1e83c:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1e83e:	2105      	movs	r1, #5
   1e840:	f7ff f812 	bl	1d868 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1e844:	2031      	movs	r0, #49	; 0x31
   1e846:	f7fe fff1 	bl	1d82c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1e84a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e84e:	4b03      	ldr	r3, [pc, #12]	; (1e85c <gpio_nrfx_init+0x2c>)
   1e850:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1e854:	2000      	movs	r0, #0
   1e856:	bd08      	pop	{r3, pc}
   1e858:	2001ec7e 	.word	0x2001ec7e
   1e85c:	40031000 	.word	0x40031000

0001e860 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e860:	4b28      	ldr	r3, [pc, #160]	; (1e904 <gpio_nrfx_config+0xa4>)
{
   1e862:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e864:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e866:	4828      	ldr	r0, [pc, #160]	; (1e908 <gpio_nrfx_config+0xa8>)
   1e868:	4013      	ands	r3, r2
   1e86a:	4283      	cmp	r3, r0
   1e86c:	d03b      	beq.n	1e8e6 <gpio_nrfx_config+0x86>
   1e86e:	d80d      	bhi.n	1e88c <gpio_nrfx_config+0x2c>
   1e870:	2b06      	cmp	r3, #6
   1e872:	d015      	beq.n	1e8a0 <gpio_nrfx_config+0x40>
   1e874:	d805      	bhi.n	1e882 <gpio_nrfx_config+0x22>
   1e876:	b19b      	cbz	r3, 1e8a0 <gpio_nrfx_config+0x40>
   1e878:	2b02      	cmp	r3, #2
   1e87a:	d036      	beq.n	1e8ea <gpio_nrfx_config+0x8a>
   1e87c:	f06f 0015 	mvn.w	r0, #21
   1e880:	e030      	b.n	1e8e4 <gpio_nrfx_config+0x84>
   1e882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e886:	d1f9      	bne.n	1e87c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1e888:	2301      	movs	r3, #1
   1e88a:	e009      	b.n	1e8a0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1e88c:	481f      	ldr	r0, [pc, #124]	; (1e90c <gpio_nrfx_config+0xac>)
   1e88e:	4283      	cmp	r3, r0
   1e890:	d02d      	beq.n	1e8ee <gpio_nrfx_config+0x8e>
   1e892:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1e896:	d02c      	beq.n	1e8f2 <gpio_nrfx_config+0x92>
   1e898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1e89c:	d1ee      	bne.n	1e87c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1e89e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1e8a0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   1e8a2:	bf4c      	ite	mi
   1e8a4:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   1e8a6:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e8aa:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1e8ae:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1e8b2:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1e8b6:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1e8ba:	d006      	beq.n	1e8ca <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e8bc:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e8c0:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1e8c2:	d018      	beq.n	1e8f6 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1e8c4:	2201      	movs	r2, #1
   1e8c6:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1e8c8:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e8ca:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   1e8ce:	2000      	movs	r0, #0
   1e8d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   1e8d4:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e8d8:	4a0d      	ldr	r2, [pc, #52]	; (1e910 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1e8da:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e8de:	3180      	adds	r1, #128	; 0x80
   1e8e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1e8e4:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1e8e6:	2307      	movs	r3, #7
   1e8e8:	e7da      	b.n	1e8a0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1e8ea:	2304      	movs	r3, #4
   1e8ec:	e7d8      	b.n	1e8a0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1e8ee:	2305      	movs	r3, #5
   1e8f0:	e7d6      	b.n	1e8a0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1e8f2:	2303      	movs	r3, #3
   1e8f4:	e7d4      	b.n	1e8a0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1e8f6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1e8f8:	bf42      	ittt	mi
   1e8fa:	2201      	movmi	r2, #1
   1e8fc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1e8fe:	60f2      	strmi	r2, [r6, #12]
}
   1e900:	e7e3      	b.n	1e8ca <gpio_nrfx_config+0x6a>
   1e902:	bf00      	nop
   1e904:	00f00006 	.word	0x00f00006
   1e908:	00100006 	.word	0x00100006
   1e90c:	00400002 	.word	0x00400002
   1e910:	40842500 	.word	0x40842500

0001e914 <gpio_nrfx_pin_interrupt_configure>:
{
   1e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e918:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e91a:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1e91c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1e920:	7a08      	ldrb	r0, [r1, #8]
   1e922:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1e926:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e92a:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   1e92e:	d10a      	bne.n	1e946 <gpio_nrfx_pin_interrupt_configure+0x32>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e930:	486e      	ldr	r0, [pc, #440]	; (1eaec <gpio_nrfx_pin_interrupt_configure+0x1d8>)
    *p_pin = pin_number & 0x1F;
   1e932:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1e936:	3180      	adds	r1, #128	; 0x80
   1e938:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1e93c:	07c8      	lsls	r0, r1, #31
   1e93e:	d508      	bpl.n	1e952 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
   1e940:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e944:	e0c2      	b.n	1eacc <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1e946:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e94a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1e94e:	f000 80ae 	beq.w	1eaae <gpio_nrfx_pin_interrupt_configure+0x19a>
   1e952:	2101      	movs	r1, #1
   1e954:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e958:	40a9      	lsls	r1, r5
   1e95a:	4301      	orrs	r1, r0
   1e95c:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e960:	2101      	movs	r1, #1
   1e962:	f8d8 0014 	ldr.w	r0, [r8, #20]
   1e966:	40a9      	lsls	r1, r5
   1e968:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1e96c:	f8d8 2018 	ldr.w	r2, [r8, #24]
   1e970:	bf0c      	ite	eq
   1e972:	4308      	orreq	r0, r1
   1e974:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e976:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1e97a:	bf0c      	ite	eq
   1e97c:	430a      	orreq	r2, r1
   1e97e:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1e984:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1e988:	f8c8 2018 	str.w	r2, [r8, #24]
   1e98c:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1e990:	4e57      	ldr	r6, [pc, #348]	; (1eaf0 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e992:	bf0c      	ite	eq
   1e994:	4311      	orreq	r1, r2
   1e996:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1e99a:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1e99e:	f8c8 1010 	str.w	r1, [r8, #16]
   1e9a2:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   1e9a6:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1e9a8:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1e9ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1e9b0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1e9b4:	428f      	cmp	r7, r1
   1e9b6:	d17f      	bne.n	1eab8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   1e9b8:	fa22 f103 	lsr.w	r1, r2, r3
   1e9bc:	07c9      	lsls	r1, r1, #31
   1e9be:	d57b      	bpl.n	1eab8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   1e9c0:	2201      	movs	r2, #1
   1e9c2:	409a      	lsls	r2, r3
   1e9c4:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e9c6:	494b      	ldr	r1, [pc, #300]	; (1eaf4 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1e9c8:	e8d1 4fef 	ldaex	r4, [r1]
   1e9cc:	4004      	ands	r4, r0
   1e9ce:	e8c1 4fec 	stlex	ip, r4, [r1]
   1e9d2:	f1bc 0f00 	cmp.w	ip, #0
   1e9d6:	d1f7      	bne.n	1e9c8 <gpio_nrfx_pin_interrupt_configure+0xb4>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1e9d8:	009b      	lsls	r3, r3, #2
   1e9da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e9de:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1e9e2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1e9e6:	f021 0101 	bic.w	r1, r1, #1
   1e9ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1e9ee:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e9f2:	2100      	movs	r1, #0
   1e9f4:	4638      	mov	r0, r7
   1e9f6:	f7ff ff0b 	bl	1e810 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1e9fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e9fe:	40eb      	lsrs	r3, r5
   1ea00:	f013 0301 	ands.w	r3, r3, #1
   1ea04:	d051      	beq.n	1eaaa <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   1ea06:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ea0a:	40eb      	lsrs	r3, r5
   1ea0c:	f013 0401 	ands.w	r4, r3, #1
   1ea10:	d05e      	beq.n	1ead0 <gpio_nrfx_pin_interrupt_configure+0x1bc>
			if (data->double_edge & BIT(pin)) {
   1ea12:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1ea16:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   1ea18:	40eb      	lsrs	r3, r5
   1ea1a:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1ea1c:	bf48      	it	mi
   1ea1e:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1ea20:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1ea24:	bf5f      	itttt	pl
   1ea26:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   1ea2a:	fa21 f505 	lsrpl.w	r5, r1, r5
   1ea2e:	f005 0501 	andpl.w	r5, r5, #1
   1ea32:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ea36:	492f      	ldr	r1, [pc, #188]	; (1eaf4 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1ea38:	bf58      	it	pl
   1ea3a:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1ea3c:	fa0c f402 	lsl.w	r4, ip, r2
   1ea40:	e8d1 0fef 	ldaex	r0, [r1]
   1ea44:	ea40 0304 	orr.w	r3, r0, r4
   1ea48:	e8c1 3fee 	stlex	lr, r3, [r1]
   1ea4c:	f1be 0f00 	cmp.w	lr, #0
   1ea50:	d1f6      	bne.n	1ea40 <gpio_nrfx_pin_interrupt_configure+0x12c>
		if ((prev & BIT(channel)) == 0) {
   1ea52:	40d0      	lsrs	r0, r2
   1ea54:	f010 0301 	ands.w	r3, r0, #1
   1ea58:	d133      	bne.n	1eac2 <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1ea5a:	0091      	lsls	r1, r2, #2
   1ea5c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1ea60:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   1ea64:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   1ea68:	3240      	adds	r2, #64	; 0x40
   1ea6a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1ea6e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1ea72:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ea76:	023f      	lsls	r7, r7, #8
   1ea78:	0092      	lsls	r2, r2, #2
   1ea7a:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   1ea7e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   1ea82:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ea84:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   1ea88:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ea8c:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1ea90:	4307      	orrs	r7, r0
   1ea92:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ea96:	6013      	str	r3, [r2, #0]
   1ea98:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ea9a:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   1ea9e:	f042 0201 	orr.w	r2, r2, #1
   1eaa2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1eaa6:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   1eaaa:	4618      	mov	r0, r3
   1eaac:	e00e      	b.n	1eacc <gpio_nrfx_pin_interrupt_configure+0x1b8>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1eaae:	2001      	movs	r0, #1
   1eab0:	40a8      	lsls	r0, r5
   1eab2:	ea21 0100 	bic.w	r1, r1, r0
   1eab6:	e751      	b.n	1e95c <gpio_nrfx_pin_interrupt_configure+0x48>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1eab8:	3301      	adds	r3, #1
   1eaba:	2b08      	cmp	r3, #8
   1eabc:	f47f af74 	bne.w	1e9a8 <gpio_nrfx_pin_interrupt_configure+0x94>
   1eac0:	e797      	b.n	1e9f2 <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1eac2:	3201      	adds	r2, #1
   1eac4:	2a08      	cmp	r2, #8
   1eac6:	d1b9      	bne.n	1ea3c <gpio_nrfx_pin_interrupt_configure+0x128>
	return -ENODEV;
   1eac8:	f06f 0012 	mvn.w	r0, #18
}
   1eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ead0:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ead4:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ead6:	40e9      	lsrs	r1, r5
   1ead8:	f001 0101 	and.w	r1, r1, #1
   1eadc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1eae0:	b2c9      	uxtb	r1, r1
   1eae2:	f7ff fe95 	bl	1e810 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1eae6:	4620      	mov	r0, r4
   1eae8:	e7f0      	b.n	1eacc <gpio_nrfx_pin_interrupt_configure+0x1b8>
   1eaea:	bf00      	nop
   1eaec:	40842500 	.word	0x40842500
   1eaf0:	40031000 	.word	0x40031000
   1eaf4:	20010bac 	.word	0x20010bac

0001eaf8 <gpiote_event_handler>:
{
   1eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eafc:	4f3f      	ldr	r7, [pc, #252]	; (1ebfc <gpiote_event_handler+0x104>)
   1eafe:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   1eb00:	2e00      	cmp	r6, #0
   1eb02:	d04f      	beq.n	1eba4 <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   1eb04:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   1eb08:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   1eb0c:	4b3c      	ldr	r3, [pc, #240]	; (1ec00 <gpiote_event_handler+0x108>)
   1eb0e:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1eb10:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1eb14:	430a      	orrs	r2, r1
   1eb16:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   1eb1a:	4a3a      	ldr	r2, [pc, #232]	; (1ec04 <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1eb1c:	691b      	ldr	r3, [r3, #16]
   1eb1e:	6914      	ldr	r4, [r2, #16]
   1eb20:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   1eb22:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   1eb26:	bb75      	cbnz	r5, 1eb86 <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eb28:	603d      	str	r5, [r7, #0]
   1eb2a:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1eb2c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1eb2e:	2501      	movs	r5, #1
   1eb30:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1eb32:	4835      	ldr	r0, [pc, #212]	; (1ec08 <gpiote_event_handler+0x110>)
   1eb34:	4935      	ldr	r1, [pc, #212]	; (1ec0c <gpiote_event_handler+0x114>)
   1eb36:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1eb3a:	fa05 fc03 	lsl.w	ip, r5, r3
   1eb3e:	ea1c 0f02 	tst.w	ip, r2
   1eb42:	d00f      	beq.n	1eb64 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1eb44:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1eb48:	b162      	cbz	r2, 1eb64 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eb4a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1eb4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eb52:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eb56:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1eb5a:	fa05 f202 	lsl.w	r2, r5, r2
   1eb5e:	4314      	orrs	r4, r2
   1eb60:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1eb64:	3301      	adds	r3, #1
   1eb66:	2b08      	cmp	r3, #8
   1eb68:	d1e5      	bne.n	1eb36 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   1eb6a:	b9ec      	cbnz	r4, 1eba8 <gpiote_event_handler+0xb0>
	if (port_event) {
   1eb6c:	b14e      	cbz	r6, 1eb82 <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   1eb6e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1eb70:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   1eb72:	4d23      	ldr	r5, [pc, #140]	; (1ec00 <gpiote_event_handler+0x108>)
   1eb74:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1eb76:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   1eb7a:	430a      	orrs	r2, r1
   1eb7c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   1eb80:	bb54      	cbnz	r4, 1ebd8 <gpiote_event_handler+0xe0>
}
   1eb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   1eb86:	ea15 0f08 	tst.w	r5, r8
   1eb8a:	d006      	beq.n	1eb9a <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1eb8c:	2100      	movs	r1, #0
   1eb8e:	f009 001f 	and.w	r0, r9, #31
   1eb92:	f7ff fe3d 	bl	1e810 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1eb96:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   1eb9a:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1eb9e:	ea4f 0848 	mov.w	r8, r8, lsl #1
   1eba2:	e7c0      	b.n	1eb26 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1eba4:	4634      	mov	r4, r6
   1eba6:	e7c1      	b.n	1eb2c <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1eba8:	4b15      	ldr	r3, [pc, #84]	; (1ec00 <gpiote_event_handler+0x108>)
   1ebaa:	6859      	ldr	r1, [r3, #4]
   1ebac:	2900      	cmp	r1, #0
   1ebae:	d0dd      	beq.n	1eb6c <gpiote_event_handler+0x74>
	return node->next;
   1ebb0:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ebb2:	4f17      	ldr	r7, [pc, #92]	; (1ec10 <gpiote_event_handler+0x118>)
   1ebb4:	2d00      	cmp	r5, #0
   1ebb6:	bf38      	it	cc
   1ebb8:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   1ebba:	688a      	ldr	r2, [r1, #8]
   1ebbc:	4022      	ands	r2, r4
   1ebbe:	d002      	beq.n	1ebc6 <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   1ebc0:	4638      	mov	r0, r7
   1ebc2:	684b      	ldr	r3, [r1, #4]
   1ebc4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ebc6:	2d00      	cmp	r5, #0
   1ebc8:	d0d0      	beq.n	1eb6c <gpiote_event_handler+0x74>
   1ebca:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ebcc:	4629      	mov	r1, r5
   1ebce:	2b00      	cmp	r3, #0
   1ebd0:	bf38      	it	cc
   1ebd2:	2300      	movcc	r3, #0
   1ebd4:	461d      	mov	r5, r3
   1ebd6:	e7f0      	b.n	1ebba <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   1ebd8:	4226      	tst	r6, r4
   1ebda:	d00c      	beq.n	1ebf6 <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ebdc:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ebde:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1ebe2:	40f9      	lsrs	r1, r7
   1ebe4:	f001 0101 	and.w	r1, r1, #1
   1ebe8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1ebec:	b2c9      	uxtb	r1, r1
   1ebee:	f7ff fe0f 	bl	1e810 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1ebf2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1ebf6:	3701      	adds	r7, #1
		bit <<= 1;
   1ebf8:	0076      	lsls	r6, r6, #1
   1ebfa:	e7c1      	b.n	1eb80 <gpiote_event_handler+0x88>
   1ebfc:	4003117c 	.word	0x4003117c
   1ec00:	20010b90 	.word	0x20010b90
   1ec04:	40842500 	.word	0x40842500
   1ec08:	40031000 	.word	0x40031000
   1ec0c:	40031100 	.word	0x40031100
   1ec10:	20010120 	.word	0x20010120

0001ec14 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1ec16:	794b      	ldrb	r3, [r1, #5]
   1ec18:	2b01      	cmp	r3, #1
   1ec1a:	d029      	beq.n	1ec70 <uarte_nrfx_configure+0x5c>
   1ec1c:	2b03      	cmp	r3, #3
   1ec1e:	d124      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1ec20:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1ec22:	798b      	ldrb	r3, [r1, #6]
   1ec24:	2b03      	cmp	r3, #3
   1ec26:	d120      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1ec28:	79cc      	ldrb	r4, [r1, #7]
   1ec2a:	b124      	cbz	r4, 1ec36 <uarte_nrfx_configure+0x22>
   1ec2c:	2c01      	cmp	r4, #1
   1ec2e:	d11c      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1ec30:	6843      	ldr	r3, [r0, #4]
   1ec32:	791b      	ldrb	r3, [r3, #4]
   1ec34:	b1cb      	cbz	r3, 1ec6a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1ec36:	790a      	ldrb	r2, [r1, #4]
   1ec38:	b112      	cbz	r2, 1ec40 <uarte_nrfx_configure+0x2c>
   1ec3a:	2a02      	cmp	r2, #2
   1ec3c:	d115      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1ec3e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1ec40:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1ec42:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1ec44:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1ec48:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1ec4a:	d065      	beq.n	1ed18 <uarte_nrfx_configure+0x104>
   1ec4c:	d82d      	bhi.n	1ecaa <uarte_nrfx_configure+0x96>
   1ec4e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1ec52:	d064      	beq.n	1ed1e <uarte_nrfx_configure+0x10a>
   1ec54:	d816      	bhi.n	1ec84 <uarte_nrfx_configure+0x70>
   1ec56:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1ec5a:	d062      	beq.n	1ed22 <uarte_nrfx_configure+0x10e>
   1ec5c:	d80a      	bhi.n	1ec74 <uarte_nrfx_configure+0x60>
   1ec5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1ec62:	d061      	beq.n	1ed28 <uarte_nrfx_configure+0x114>
   1ec64:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1ec68:	d061      	beq.n	1ed2e <uarte_nrfx_configure+0x11a>
   1ec6a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ec6e:	e052      	b.n	1ed16 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1ec70:	2600      	movs	r6, #0
   1ec72:	e7d6      	b.n	1ec22 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1ec74:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1ec78:	d05c      	beq.n	1ed34 <uarte_nrfx_configure+0x120>
   1ec7a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1ec7e:	d1f4      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1ec80:	4b37      	ldr	r3, [pc, #220]	; (1ed60 <uarte_nrfx_configure+0x14c>)
   1ec82:	e03c      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ec84:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1ec88:	d057      	beq.n	1ed3a <uarte_nrfx_configure+0x126>
   1ec8a:	d807      	bhi.n	1ec9c <uarte_nrfx_configure+0x88>
   1ec8c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1ec90:	d055      	beq.n	1ed3e <uarte_nrfx_configure+0x12a>
   1ec92:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1ec96:	d1e8      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1ec98:	4b32      	ldr	r3, [pc, #200]	; (1ed64 <uarte_nrfx_configure+0x150>)
   1ec9a:	e030      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ec9c:	f647 2712 	movw	r7, #31250	; 0x7a12
   1eca0:	42bb      	cmp	r3, r7
   1eca2:	d1e2      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1eca4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1eca8:	e029      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecaa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1ecae:	d048      	beq.n	1ed42 <uarte_nrfx_configure+0x12e>
   1ecb0:	d813      	bhi.n	1ecda <uarte_nrfx_configure+0xc6>
   1ecb2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1ecb6:	d047      	beq.n	1ed48 <uarte_nrfx_configure+0x134>
   1ecb8:	d809      	bhi.n	1ecce <uarte_nrfx_configure+0xba>
   1ecba:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1ecbe:	42bb      	cmp	r3, r7
   1ecc0:	d044      	beq.n	1ed4c <uarte_nrfx_configure+0x138>
   1ecc2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1ecc6:	d1d0      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1ecc8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1eccc:	e017      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecce:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1ecd2:	d1ca      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1ecd4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1ecd8:	e011      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecda:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1ecde:	d038      	beq.n	1ed52 <uarte_nrfx_configure+0x13e>
   1ece0:	d808      	bhi.n	1ecf4 <uarte_nrfx_configure+0xe0>
   1ece2:	4f21      	ldr	r7, [pc, #132]	; (1ed68 <uarte_nrfx_configure+0x154>)
   1ece4:	42bb      	cmp	r3, r7
   1ece6:	d037      	beq.n	1ed58 <uarte_nrfx_configure+0x144>
   1ece8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1ecec:	d1bd      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1ecee:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1ecf2:	e004      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ecf4:	4f1d      	ldr	r7, [pc, #116]	; (1ed6c <uarte_nrfx_configure+0x158>)
   1ecf6:	42bb      	cmp	r3, r7
   1ecf8:	d1b7      	bne.n	1ec6a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1ecfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1ecfe:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1ed02:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1ed04:	4334      	orrs	r4, r6
   1ed06:	4322      	orrs	r2, r4
   1ed08:	3304      	adds	r3, #4
   1ed0a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1ed0c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1ed10:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1ed14:	2000      	movs	r0, #0
}
   1ed16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1ed18:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1ed1c:	e7ef      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1ed1e:	4b14      	ldr	r3, [pc, #80]	; (1ed70 <uarte_nrfx_configure+0x15c>)
   1ed20:	e7ed      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1ed22:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1ed26:	e7ea      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1ed28:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1ed2c:	e7e7      	b.n	1ecfe <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1ed2e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1ed32:	e7e4      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1ed34:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1ed38:	e7e1      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1ed3a:	4b0e      	ldr	r3, [pc, #56]	; (1ed74 <uarte_nrfx_configure+0x160>)
   1ed3c:	e7df      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1ed3e:	4b0e      	ldr	r3, [pc, #56]	; (1ed78 <uarte_nrfx_configure+0x164>)
   1ed40:	e7dd      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1ed42:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1ed46:	e7da      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1ed48:	4b0c      	ldr	r3, [pc, #48]	; (1ed7c <uarte_nrfx_configure+0x168>)
   1ed4a:	e7d8      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1ed4c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1ed50:	e7d5      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1ed52:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ed56:	e7d2      	b.n	1ecfe <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1ed58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ed5c:	e7cf      	b.n	1ecfe <uarte_nrfx_configure+0xea>
   1ed5e:	bf00      	nop
   1ed60:	0013b000 	.word	0x0013b000
   1ed64:	004ea000 	.word	0x004ea000
   1ed68:	0003d090 	.word	0x0003d090
   1ed6c:	000f4240 	.word	0x000f4240
   1ed70:	00275000 	.word	0x00275000
   1ed74:	0075c000 	.word	0x0075c000
   1ed78:	003af000 	.word	0x003af000
   1ed7c:	013a9000 	.word	0x013a9000

0001ed80 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1ed80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed84:	4606      	mov	r6, r0
   1ed86:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ed88:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ed8a:	f004 fd33 	bl	237f4 <k_is_in_isr>
   1ed8e:	b9b8      	cbnz	r0, 1edc0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1ed90:	4b28      	ldr	r3, [pc, #160]	; (1ee34 <uarte_nrfx_poll_out+0xb4>)
   1ed92:	781b      	ldrb	r3, [r3, #0]
   1ed94:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1ed98:	6872      	ldr	r2, [r6, #4]
   1ed9a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1ed9c:	b193      	cbz	r3, 1edc4 <uarte_nrfx_poll_out+0x44>
   1ed9e:	f04f 0320 	mov.w	r3, #32
   1eda2:	f3ef 8411 	mrs	r4, BASEPRI
   1eda6:	f383 8811 	msr	BASEPRI, r3
   1edaa:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1edae:	4630      	mov	r0, r6
   1edb0:	f004 fa8e 	bl	232d0 <is_tx_ready>
   1edb4:	bb38      	cbnz	r0, 1ee06 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1edb6:	f384 8811 	msr	BASEPRI, r4
   1edba:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1edbe:	e7ee      	b.n	1ed9e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1edc0:	2301      	movs	r3, #1
   1edc2:	e7e9      	b.n	1ed98 <uarte_nrfx_poll_out+0x18>
   1edc4:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1edc6:	4630      	mov	r0, r6
   1edc8:	f004 fa82 	bl	232d0 <is_tx_ready>
   1edcc:	b970      	cbnz	r0, 1edec <uarte_nrfx_poll_out+0x6c>
   1edce:	2001      	movs	r0, #1
   1edd0:	f004 fb6a 	bl	234a8 <nrfx_busy_wait>
   1edd4:	3c01      	subs	r4, #1
   1edd6:	d1f6      	bne.n	1edc6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1edd8:	2100      	movs	r1, #0
   1edda:	2021      	movs	r0, #33	; 0x21
   1eddc:	f001 f998 	bl	20110 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ede0:	e7f0      	b.n	1edc4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1ede2:	f384 8811 	msr	BASEPRI, r4
   1ede6:	f3bf 8f6f 	isb	sy
}
   1edea:	e7f5      	b.n	1edd8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1edec:	f04f 0320 	mov.w	r3, #32
   1edf0:	f3ef 8411 	mrs	r4, BASEPRI
   1edf4:	f383 8811 	msr	BASEPRI, r3
   1edf8:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   1edfc:	4630      	mov	r0, r6
   1edfe:	f004 fa67 	bl	232d0 <is_tx_ready>
   1ee02:	2800      	cmp	r0, #0
   1ee04:	d0ed      	beq.n	1ede2 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1ee06:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee08:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1ee0a:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ee0e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ee12:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ee16:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1ee1a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1ee1e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1ee22:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee26:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1ee28:	f384 8811 	msr	BASEPRI, r4
   1ee2c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee34:	2001ecbf 	.word	0x2001ecbf

0001ee38 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ee38:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   1ee3c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1ee3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1ee42:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1ee44:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1ee46:	460f      	mov	r7, r1
   1ee48:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
   1ee4c:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1ee4e:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   1ee50:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ee52:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   1ee54:	4b44      	ldr	r3, [pc, #272]	; (1ef68 <uarte_instance_init.isra.0+0x130>)
    *p_pin = pin_number & 0x1F;
   1ee56:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ee5a:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   1ee5c:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ee5e:	2103      	movs	r1, #3
   1ee60:	3280      	adds	r2, #128	; 0x80
   1ee62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1ee66:	687a      	ldr	r2, [r7, #4]
   1ee68:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   1ee6a:	bf1e      	ittt	ne
   1ee6c:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ee70:	3180      	addne	r1, #128	; 0x80
   1ee72:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1ee76:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
   1ee78:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1ee7c:	1c48      	adds	r0, r1, #1
   1ee7e:	bf18      	it	ne
   1ee80:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
   1ee82:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   1ee86:	bf1e      	ittt	ne
   1ee88:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ee8c:	3280      	addne	r2, #128	; 0x80
   1ee8e:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1ee92:	68f8      	ldr	r0, [r7, #12]
   1ee94:	1c42      	adds	r2, r0, #1
   1ee96:	d00c      	beq.n	1eeb2 <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1ee98:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1ee9c:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1eea0:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   1eea4:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eea8:	f04f 0c03 	mov.w	ip, #3
   1eeac:	3280      	adds	r2, #128	; 0x80
   1eeae:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1eeb2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1eeb6:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1eeba:	68e9      	ldr	r1, [r5, #12]
   1eebc:	4628      	mov	r0, r5
   1eebe:	3104      	adds	r1, #4
   1eec0:	f7ff fea8 	bl	1ec14 <uarte_nrfx_configure>
	if (err) {
   1eec4:	4680      	mov	r8, r0
   1eec6:	2800      	cmp	r0, #0
   1eec8:	d14a      	bne.n	1ef60 <uarte_instance_init.isra.0+0x128>

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1eeca:	686b      	ldr	r3, [r5, #4]
   1eecc:	799b      	ldrb	r3, [r3, #6]
   1eece:	b323      	cbz	r3, 1ef1a <uarte_instance_init.isra.0+0xe2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1eed0:	f106 0012 	add.w	r0, r6, #18
   1eed4:	f000 f9ae 	bl	1f234 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1eed8:	4b24      	ldr	r3, [pc, #144]	; (1ef6c <uarte_instance_init.isra.0+0x134>)
   1eeda:	4298      	cmp	r0, r3
   1eedc:	d010      	beq.n	1ef00 <uarte_instance_init.isra.0+0xc8>
		LOG_ERR("Failed to allocate PPI Channel");
   1eede:	4b24      	ldr	r3, [pc, #144]	; (1ef70 <uarte_instance_init.isra.0+0x138>)
   1eee0:	681b      	ldr	r3, [r3, #0]
   1eee2:	075b      	lsls	r3, r3, #29
   1eee4:	d009      	beq.n	1eefa <uarte_instance_init.isra.0+0xc2>
   1eee6:	4923      	ldr	r1, [pc, #140]	; (1ef74 <uarte_instance_init.isra.0+0x13c>)
   1eee8:	4b23      	ldr	r3, [pc, #140]	; (1ef78 <uarte_instance_init.isra.0+0x140>)
   1eeea:	4824      	ldr	r0, [pc, #144]	; (1ef7c <uarte_instance_init.isra.0+0x144>)
   1eeec:	1ac9      	subs	r1, r1, r3
   1eeee:	08c9      	lsrs	r1, r1, #3
   1eef0:	0189      	lsls	r1, r1, #6
   1eef2:	f041 0101 	orr.w	r1, r1, #1
   1eef6:	f002 fcc3 	bl	21880 <log_0>
		return -EIO;
   1eefa:	f06f 0804 	mvn.w	r8, #4
   1eefe:	e02f      	b.n	1ef60 <uarte_instance_init.isra.0+0x128>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1ef00:	7cb3      	ldrb	r3, [r6, #18]
   1ef02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1ef06:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1ef0a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1ef0e:	2301      	movs	r3, #1
   1ef10:	7cb2      	ldrb	r2, [r6, #18]
   1ef12:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1ef14:	4a1a      	ldr	r2, [pc, #104]	; (1ef80 <uarte_instance_init.isra.0+0x148>)
   1ef16:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ef1a:	2308      	movs	r3, #8
   1ef1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1ef20:	687b      	ldr	r3, [r7, #4]
   1ef22:	3301      	adds	r3, #1
   1ef24:	d00c      	beq.n	1ef40 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ef26:	2300      	movs	r3, #0
   1ef28:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ef2c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1ef30:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1ef34:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1ef38:	2301      	movs	r3, #1
   1ef3a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef3e:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   1ef40:	686b      	ldr	r3, [r5, #4]
   1ef42:	799b      	ldrb	r3, [r3, #6]
   1ef44:	b91b      	cbnz	r3, 1ef4e <uarte_instance_init.isra.0+0x116>
    p_reg->INTENSET = mask;
   1ef46:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ef4a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1ef4e:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1ef50:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ef52:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ef56:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ef5a:	2301      	movs	r3, #1
   1ef5c:	60a3      	str	r3, [r4, #8]
   1ef5e:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1ef60:	4640      	mov	r0, r8
   1ef62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef66:	bf00      	nop
   1ef68:	40842500 	.word	0x40842500
   1ef6c:	0bad0000 	.word	0x0bad0000
   1ef70:	20010160 	.word	0x20010160
   1ef74:	00023ffc 	.word	0x00023ffc
   1ef78:	00023fa4 	.word	0x00023fa4
   1ef7c:	00028491 	.word	0x00028491
   1ef80:	40017000 	.word	0x40017000

0001ef84 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1ef84:	b530      	push	{r4, r5, lr}
   1ef86:	b085      	sub	sp, #20
   1ef88:	466c      	mov	r4, sp
   1ef8a:	4605      	mov	r5, r0
   1ef8c:	4b08      	ldr	r3, [pc, #32]	; (1efb0 <uarte_0_init+0x2c>)
   1ef8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ef90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1ef94:	2200      	movs	r2, #0
   1ef96:	2101      	movs	r1, #1
   1ef98:	2008      	movs	r0, #8
   1ef9a:	f7fe fc65 	bl	1d868 <z_arm_irq_priority_set>
   1ef9e:	2008      	movs	r0, #8
   1efa0:	f7fe fc44 	bl	1d82c <arch_irq_enable>
   1efa4:	4621      	mov	r1, r4
   1efa6:	4628      	mov	r0, r5
   1efa8:	f7ff ff46 	bl	1ee38 <uarte_instance_init.isra.0>
   1efac:	b005      	add	sp, #20
   1efae:	bd30      	pop	{r4, r5, pc}
   1efb0:	000240d0 	.word	0x000240d0

0001efb4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1efb4:	b530      	push	{r4, r5, lr}
   1efb6:	b085      	sub	sp, #20
   1efb8:	466c      	mov	r4, sp
   1efba:	4605      	mov	r5, r0
   1efbc:	4b08      	ldr	r3, [pc, #32]	; (1efe0 <uarte_1_init+0x2c>)
   1efbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1efc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1efc4:	2200      	movs	r2, #0
   1efc6:	2101      	movs	r1, #1
   1efc8:	2009      	movs	r0, #9
   1efca:	f7fe fc4d 	bl	1d868 <z_arm_irq_priority_set>
   1efce:	2009      	movs	r0, #9
   1efd0:	f7fe fc2c 	bl	1d82c <arch_irq_enable>
   1efd4:	4621      	mov	r1, r4
   1efd6:	4628      	mov	r0, r5
   1efd8:	f7ff ff2e 	bl	1ee38 <uarte_instance_init.isra.0>
   1efdc:	b005      	add	sp, #20
   1efde:	bd30      	pop	{r4, r5, pc}
   1efe0:	000240e0 	.word	0x000240e0

0001efe4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1efe4:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1efe6:	f7fb fdb3 	bl	1ab50 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   1efea:	4b08      	ldr	r3, [pc, #32]	; (1f00c <k_sys_fatal_error_handler+0x28>)
   1efec:	681b      	ldr	r3, [r3, #0]
   1efee:	075b      	lsls	r3, r3, #29
   1eff0:	d009      	beq.n	1f006 <k_sys_fatal_error_handler+0x22>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1eff2:	4907      	ldr	r1, [pc, #28]	; (1f010 <k_sys_fatal_error_handler+0x2c>)
   1eff4:	4b07      	ldr	r3, [pc, #28]	; (1f014 <k_sys_fatal_error_handler+0x30>)
   1eff6:	4808      	ldr	r0, [pc, #32]	; (1f018 <k_sys_fatal_error_handler+0x34>)
   1eff8:	1ac9      	subs	r1, r1, r3
   1effa:	08c9      	lsrs	r1, r1, #3
   1effc:	0189      	lsls	r1, r1, #6
   1effe:	f041 0101 	orr.w	r1, r1, #1
   1f002:	f002 fc3d 	bl	21880 <log_0>
	sys_arch_reboot(0);
   1f006:	2000      	movs	r0, #0
   1f008:	f7ff f89a 	bl	1e140 <sys_arch_reboot>

	CODE_UNREACHABLE;
   1f00c:	20010140 	.word	0x20010140
   1f010:	00023fbc 	.word	0x00023fbc
   1f014:	00023fa4 	.word	0x00023fa4
   1f018:	000284c7 	.word	0x000284c7

0001f01c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   1f01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1f020:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1f022:	4c21      	ldr	r4, [pc, #132]	; (1f0a8 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1f024:	4e21      	ldr	r6, [pc, #132]	; (1f0ac <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1f026:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   1f02a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1f0b4 <check_ext_api_requests+0x98>
{
   1f02e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1f030:	45a8      	cmp	r8, r5
   1f032:	d803      	bhi.n	1f03c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1f034:	2000      	movs	r0, #0
   1f036:	b005      	add	sp, #20
   1f038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1f03c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f03e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1f042:	681f      	ldr	r7, [r3, #0]
   1f044:	ab01      	add	r3, sp, #4
   1f046:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1f04a:	220c      	movs	r2, #12
   1f04c:	4619      	mov	r1, r3
   1f04e:	4638      	mov	r0, r7
   1f050:	f004 f81e 	bl	23090 <memcmp>
   1f054:	b990      	cbnz	r0, 1f07c <check_ext_api_requests+0x60>
   1f056:	b18f      	cbz	r7, 1f07c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1f058:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   1f05a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1f05c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1f05e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1f060:	4291      	cmp	r1, r2
   1f062:	d10b      	bne.n	1f07c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1f064:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1f066:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   1f068:	4291      	cmp	r1, r2
   1f06a:	d807      	bhi.n	1f07c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   1f06c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1f06e:	4291      	cmp	r1, r2
   1f070:	d904      	bls.n	1f07c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1f072:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1f074:	695b      	ldr	r3, [r3, #20]
   1f076:	ea32 0303 	bics.w	r3, r2, r3
   1f07a:	d00a      	beq.n	1f092 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   1f07c:	6a27      	ldr	r7, [r4, #32]
   1f07e:	b167      	cbz	r7, 1f09a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1f080:	480b      	ldr	r0, [pc, #44]	; (1f0b0 <check_ext_api_requests+0x94>)
   1f082:	f002 f81a 	bl	210ba <printk>
			k_panic();
   1f086:	4040      	eors	r0, r0
   1f088:	f380 8811 	msr	BASEPRI, r0
   1f08c:	f04f 0004 	mov.w	r0, #4
   1f090:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1f092:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1f094:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1f096:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1f098:	e7ca      	b.n	1f030 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   1f09a:	4648      	mov	r0, r9
   1f09c:	f002 f80d 	bl	210ba <printk>
			*ext_api_req->ext_api = NULL;
   1f0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f0a2:	601f      	str	r7, [r3, #0]
   1f0a4:	e7f5      	b.n	1f092 <check_ext_api_requests+0x76>
   1f0a6:	bf00      	nop
   1f0a8:	0000c23c 	.word	0x0000c23c
   1f0ac:	000240f0 	.word	0x000240f0
   1f0b0:	000284e4 	.word	0x000284e4
   1f0b4:	0002850d 	.word	0x0002850d

0001f0b8 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   1f0b8:	4b01      	ldr	r3, [pc, #4]	; (1f0c0 <SystemInit+0x8>)
   1f0ba:	4a02      	ldr	r2, [pc, #8]	; (1f0c4 <SystemInit+0xc>)
   1f0bc:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   1f0be:	4770      	bx	lr
   1f0c0:	200100d0 	.word	0x200100d0
   1f0c4:	03d09000 	.word	0x03d09000

0001f0c8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1f0c8:	4b04      	ldr	r3, [pc, #16]	; (1f0dc <nrfx_clock_init+0x14>)
   1f0ca:	791a      	ldrb	r2, [r3, #4]
   1f0cc:	b922      	cbnz	r2, 1f0d8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1f0ce:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1f0d0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1f0d2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f0d4:	4802      	ldr	r0, [pc, #8]	; (1f0e0 <nrfx_clock_init+0x18>)
   1f0d6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1f0d8:	4802      	ldr	r0, [pc, #8]	; (1f0e4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f0da:	4770      	bx	lr
   1f0dc:	20010bb0 	.word	0x20010bb0
   1f0e0:	0bad0000 	.word	0x0bad0000
   1f0e4:	0bad000c 	.word	0x0bad000c

0001f0e8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f0e8:	b110      	cbz	r0, 1f0f0 <nrfx_clock_start+0x8>
   1f0ea:	2801      	cmp	r0, #1
   1f0ec:	d01e      	beq.n	1f12c <nrfx_clock_start+0x44>
   1f0ee:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f0f0:	4b13      	ldr	r3, [pc, #76]	; (1f140 <nrfx_clock_start+0x58>)
   1f0f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f0f6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1f0fa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1f0fe:	4619      	mov	r1, r3
   1f100:	d010      	beq.n	1f124 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1f102:	f002 0203 	and.w	r2, r2, #3
   1f106:	2a02      	cmp	r2, #2
   1f108:	d10c      	bne.n	1f124 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f10a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f10e:	2200      	movs	r2, #0
   1f110:	4b0c      	ldr	r3, [pc, #48]	; (1f144 <nrfx_clock_start+0x5c>)
   1f112:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   1f114:	2202      	movs	r2, #2
   1f116:	681b      	ldr	r3, [r3, #0]
   1f118:	4b09      	ldr	r3, [pc, #36]	; (1f140 <nrfx_clock_start+0x58>)
   1f11a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f11e:	2201      	movs	r2, #1
   1f120:	609a      	str	r2, [r3, #8]
}
   1f122:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f124:	2301      	movs	r3, #1
   1f126:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1f12a:	e7f0      	b.n	1f10e <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f12c:	2200      	movs	r2, #0
   1f12e:	4b06      	ldr	r3, [pc, #24]	; (1f148 <nrfx_clock_start+0x60>)
   1f130:	601a      	str	r2, [r3, #0]
   1f132:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1f134:	4b02      	ldr	r3, [pc, #8]	; (1f140 <nrfx_clock_start+0x58>)
   1f136:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f13a:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1f13c:	4770      	bx	lr
   1f13e:	bf00      	nop
   1f140:	40005000 	.word	0x40005000
   1f144:	40005104 	.word	0x40005104
   1f148:	40005100 	.word	0x40005100

0001f14c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f14c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1f14e:	b110      	cbz	r0, 1f156 <nrfx_clock_stop+0xa>
   1f150:	2801      	cmp	r0, #1
   1f152:	d016      	beq.n	1f182 <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1f154:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1f156:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f158:	2101      	movs	r1, #1
   1f15a:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   1f15e:	4c16      	ldr	r4, [pc, #88]	; (1f1b8 <nrfx_clock_stop+0x6c>)
   1f160:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f164:	4a15      	ldr	r2, [pc, #84]	; (1f1bc <nrfx_clock_stop+0x70>)
   1f166:	6010      	str	r0, [r2, #0]
   1f168:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f16a:	4a15      	ldr	r2, [pc, #84]	; (1f1c0 <nrfx_clock_stop+0x74>)
   1f16c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f16e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1f172:	03db      	lsls	r3, r3, #15
   1f174:	d5ee      	bpl.n	1f154 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1f176:	2001      	movs	r0, #1
   1f178:	f004 f996 	bl	234a8 <nrfx_busy_wait>
   1f17c:	3d01      	subs	r5, #1
   1f17e:	d1f6      	bne.n	1f16e <nrfx_clock_stop+0x22>
   1f180:	e7e8      	b.n	1f154 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f182:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f184:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f188:	4b0e      	ldr	r3, [pc, #56]	; (1f1c4 <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   1f18a:	4c0b      	ldr	r4, [pc, #44]	; (1f1b8 <nrfx_clock_stop+0x6c>)
   1f18c:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f190:	601a      	str	r2, [r3, #0]
   1f192:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f194:	4b0c      	ldr	r3, [pc, #48]	; (1f1c8 <nrfx_clock_stop+0x7c>)
   1f196:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f198:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f19c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f1a0:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f1a4:	03d2      	lsls	r2, r2, #15
   1f1a6:	d5d5      	bpl.n	1f154 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1f1a8:	2b00      	cmp	r3, #0
   1f1aa:	d0d3      	beq.n	1f154 <nrfx_clock_stop+0x8>
   1f1ac:	2001      	movs	r0, #1
   1f1ae:	f004 f97b 	bl	234a8 <nrfx_busy_wait>
   1f1b2:	3d01      	subs	r5, #1
   1f1b4:	d1f0      	bne.n	1f198 <nrfx_clock_stop+0x4c>
   1f1b6:	e7cd      	b.n	1f154 <nrfx_clock_stop+0x8>
   1f1b8:	40005000 	.word	0x40005000
   1f1bc:	40005104 	.word	0x40005104
   1f1c0:	4000500c 	.word	0x4000500c
   1f1c4:	40005100 	.word	0x40005100
   1f1c8:	40005004 	.word	0x40005004

0001f1cc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f1cc:	4b15      	ldr	r3, [pc, #84]	; (1f224 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1f1ce:	b510      	push	{r4, lr}
   1f1d0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1f1d2:	b14a      	cbz	r2, 1f1e8 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1d4:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   1f1d6:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1d8:	6018      	str	r0, [r3, #0]
   1f1da:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1f1dc:	4b12      	ldr	r3, [pc, #72]	; (1f228 <nrfx_power_clock_irq_handler+0x5c>)
   1f1de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f1e2:	4b12      	ldr	r3, [pc, #72]	; (1f22c <nrfx_power_clock_irq_handler+0x60>)
   1f1e4:	681b      	ldr	r3, [r3, #0]
   1f1e6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f1e8:	4b11      	ldr	r3, [pc, #68]	; (1f230 <nrfx_power_clock_irq_handler+0x64>)
   1f1ea:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1f1ec:	b182      	cbz	r2, 1f210 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1ee:	2200      	movs	r2, #0
   1f1f0:	601a      	str	r2, [r3, #0]
   1f1f2:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f1f4:	4b0c      	ldr	r3, [pc, #48]	; (1f228 <nrfx_power_clock_irq_handler+0x5c>)
   1f1f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f1fa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1f1fe:	f002 0203 	and.w	r2, r2, #3
   1f202:	2a01      	cmp	r2, #1
   1f204:	f04f 0102 	mov.w	r1, #2
   1f208:	d103      	bne.n	1f212 <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f20a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f20e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1f210:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1f212:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f216:	4b05      	ldr	r3, [pc, #20]	; (1f22c <nrfx_power_clock_irq_handler+0x60>)
   1f218:	2001      	movs	r0, #1
}
   1f21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f21e:	681b      	ldr	r3, [r3, #0]
   1f220:	4718      	bx	r3
   1f222:	bf00      	nop
   1f224:	40005100 	.word	0x40005100
   1f228:	40005000 	.word	0x40005000
   1f22c:	20010bb0 	.word	0x20010bb0
   1f230:	40005104 	.word	0x40005104

0001f234 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1f234:	4a0b      	ldr	r2, [pc, #44]	; (1f264 <nrfx_dppi_channel_alloc+0x30>)
{
   1f236:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1f238:	6816      	ldr	r6, [r2, #0]
   1f23a:	43f1      	mvns	r1, r6
   1f23c:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   1f23e:	b171      	cbz	r1, 1f25e <nrfx_dppi_channel_alloc+0x2a>
   1f240:	2500      	movs	r5, #0
   1f242:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1f244:	fa21 f304 	lsr.w	r3, r1, r4
   1f248:	07db      	lsls	r3, r3, #31
   1f24a:	f105 0501 	add.w	r5, r5, #1
   1f24e:	d5f8      	bpl.n	1f242 <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   1f250:	2301      	movs	r3, #1
   1f252:	40a3      	lsls	r3, r4
   1f254:	4333      	orrs	r3, r6
    *p_channel = channel;
   1f256:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   1f258:	4803      	ldr	r0, [pc, #12]	; (1f268 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   1f25a:	6013      	str	r3, [r2, #0]
}
   1f25c:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1f25e:	4803      	ldr	r0, [pc, #12]	; (1f26c <nrfx_dppi_channel_alloc+0x38>)
   1f260:	e7fc      	b.n	1f25c <nrfx_dppi_channel_alloc+0x28>
   1f262:	bf00      	nop
   1f264:	20010bb8 	.word	0x20010bb8
   1f268:	0bad0000 	.word	0x0bad0000
   1f26c:	0bad0002 	.word	0x0bad0002

0001f270 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f272:	4b10      	ldr	r3, [pc, #64]	; (1f2b4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1f274:	4f10      	ldr	r7, [pc, #64]	; (1f2b8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f276:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f27a:	3001      	adds	r0, #1
   1f27c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f280:	42ae      	cmp	r6, r5
   1f282:	d800      	bhi.n	1f286 <z_sys_init_run_level+0x16>
		}
	}
}
   1f284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1f286:	e9d5 3400 	ldrd	r3, r4, [r5]
   1f28a:	4620      	mov	r0, r4
   1f28c:	4798      	blx	r3
   1f28e:	b170      	cbz	r0, 1f2ae <z_sys_init_run_level+0x3e>
   1f290:	b16c      	cbz	r4, 1f2ae <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f292:	2301      	movs	r3, #1
				(dev - __device_start));
   1f294:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f296:	4a09      	ldr	r2, [pc, #36]	; (1f2bc <z_sys_init_run_level+0x4c>)
   1f298:	1124      	asrs	r4, r4, #4
   1f29a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1f29c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f2a0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f2a4:	fa03 f404 	lsl.w	r4, r3, r4
   1f2a8:	4304      	orrs	r4, r0
   1f2aa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2ae:	3508      	adds	r5, #8
   1f2b0:	e7e6      	b.n	1f280 <z_sys_init_run_level+0x10>
   1f2b2:	bf00      	nop
   1f2b4:	00026968 	.word	0x00026968
   1f2b8:	200100e0 	.word	0x200100e0
   1f2bc:	20010130 	.word	0x20010130

0001f2c0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1f2c0:	4b08      	ldr	r3, [pc, #32]	; (1f2e4 <z_device_ready+0x24>)
   1f2c2:	1ac0      	subs	r0, r0, r3
   1f2c4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f2c6:	4b08      	ldr	r3, [pc, #32]	; (1f2e8 <z_device_ready+0x28>)
   1f2c8:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   1f2ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1f2ce:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f2d0:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   1f2d4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1f2d8:	4210      	tst	r0, r2
}
   1f2da:	bf0c      	ite	eq
   1f2dc:	4618      	moveq	r0, r3
   1f2de:	2000      	movne	r0, #0
   1f2e0:	4770      	bx	lr
   1f2e2:	bf00      	nop
   1f2e4:	200100e0 	.word	0x200100e0
   1f2e8:	20010130 	.word	0x20010130

0001f2ec <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1f2ec:	4911      	ldr	r1, [pc, #68]	; (1f334 <z_impl_device_get_binding+0x48>)
{
   1f2ee:	b570      	push	{r4, r5, r6, lr}
   1f2f0:	4605      	mov	r5, r0
   1f2f2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1f2f4:	4c10      	ldr	r4, [pc, #64]	; (1f338 <z_impl_device_get_binding+0x4c>)
   1f2f6:	428c      	cmp	r4, r1
   1f2f8:	d104      	bne.n	1f304 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f2fa:	4c0f      	ldr	r4, [pc, #60]	; (1f338 <z_impl_device_get_binding+0x4c>)
   1f2fc:	42b4      	cmp	r4, r6
   1f2fe:	d10a      	bne.n	1f316 <z_impl_device_get_binding+0x2a>
	return NULL;
   1f300:	2400      	movs	r4, #0
   1f302:	e014      	b.n	1f32e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f304:	4620      	mov	r0, r4
   1f306:	f7ff ffdb 	bl	1f2c0 <z_device_ready>
   1f30a:	b110      	cbz	r0, 1f312 <z_impl_device_get_binding+0x26>
   1f30c:	6823      	ldr	r3, [r4, #0]
   1f30e:	42ab      	cmp	r3, r5
   1f310:	d00d      	beq.n	1f32e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f312:	3410      	adds	r4, #16
   1f314:	e7ef      	b.n	1f2f6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f316:	4620      	mov	r0, r4
   1f318:	f7ff ffd2 	bl	1f2c0 <z_device_ready>
   1f31c:	b908      	cbnz	r0, 1f322 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f31e:	3410      	adds	r4, #16
   1f320:	e7ec      	b.n	1f2fc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f322:	4628      	mov	r0, r5
   1f324:	6821      	ldr	r1, [r4, #0]
   1f326:	f003 fe98 	bl	2305a <strcmp>
   1f32a:	2800      	cmp	r0, #0
   1f32c:	d1f7      	bne.n	1f31e <z_impl_device_get_binding+0x32>
}
   1f32e:	4620      	mov	r0, r4
   1f330:	bd70      	pop	{r4, r5, r6, pc}
   1f332:	bf00      	nop
   1f334:	20010130 	.word	0x20010130
   1f338:	200100e0 	.word	0x200100e0

0001f33c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f33c:	4b01      	ldr	r3, [pc, #4]	; (1f344 <z_impl_z_errno+0x8>)
   1f33e:	6898      	ldr	r0, [r3, #8]
}
   1f340:	309c      	adds	r0, #156	; 0x9c
   1f342:	4770      	bx	lr
   1f344:	20010bbc 	.word	0x20010bbc

0001f348 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f34c:	4606      	mov	r6, r0
   1f34e:	460f      	mov	r7, r1
	__asm__ volatile(
   1f350:	f04f 0320 	mov.w	r3, #32
   1f354:	f3ef 8811 	mrs	r8, BASEPRI
   1f358:	f383 8811 	msr	BASEPRI, r3
   1f35c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f360:	f000 fef6 	bl	20150 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f364:	4c2e      	ldr	r4, [pc, #184]	; (1f420 <z_fatal_error+0xd8>)
   1f366:	4605      	mov	r5, r0
   1f368:	6823      	ldr	r3, [r4, #0]
   1f36a:	0759      	lsls	r1, r3, #29
   1f36c:	d054      	beq.n	1f418 <z_fatal_error+0xd0>
   1f36e:	4a2d      	ldr	r2, [pc, #180]	; (1f424 <z_fatal_error+0xdc>)
   1f370:	4b2d      	ldr	r3, [pc, #180]	; (1f428 <z_fatal_error+0xe0>)
   1f372:	2e04      	cmp	r6, #4
   1f374:	eba3 0302 	sub.w	r3, r3, r2
   1f378:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   1f37c:	bf98      	it	ls
   1f37e:	4a2b      	ldrls	r2, [pc, #172]	; (1f42c <z_fatal_error+0xe4>)
   1f380:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1f384:	f043 0301 	orr.w	r3, r3, #1
	switch (reason) {
   1f388:	bf94      	ite	ls
   1f38a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f38e:	4a28      	ldrhi	r2, [pc, #160]	; (1f430 <z_fatal_error+0xe8>)
   1f390:	f8ad 3000 	strh.w	r3, [sp]
   1f394:	4631      	mov	r1, r6
   1f396:	2300      	movs	r3, #0
   1f398:	4826      	ldr	r0, [pc, #152]	; (1f434 <z_fatal_error+0xec>)
   1f39a:	f002 faab 	bl	218f4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f39e:	b187      	cbz	r7, 1f3c2 <z_fatal_error+0x7a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f3a0:	69fb      	ldr	r3, [r7, #28]
   1f3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f3a6:	b163      	cbz	r3, 1f3c2 <z_fatal_error+0x7a>
		LOG_ERR("Fault during interrupt handling\n");
   1f3a8:	6823      	ldr	r3, [r4, #0]
   1f3aa:	075a      	lsls	r2, r3, #29
   1f3ac:	d01d      	beq.n	1f3ea <z_fatal_error+0xa2>
   1f3ae:	491e      	ldr	r1, [pc, #120]	; (1f428 <z_fatal_error+0xe0>)
   1f3b0:	4b1c      	ldr	r3, [pc, #112]	; (1f424 <z_fatal_error+0xdc>)
   1f3b2:	4821      	ldr	r0, [pc, #132]	; (1f438 <z_fatal_error+0xf0>)
   1f3b4:	1ac9      	subs	r1, r1, r3
   1f3b6:	08c9      	lsrs	r1, r1, #3
   1f3b8:	0189      	lsls	r1, r1, #6
   1f3ba:	f041 0101 	orr.w	r1, r1, #1
   1f3be:	f002 fa5f 	bl	21880 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f3c2:	6823      	ldr	r3, [r4, #0]
   1f3c4:	075b      	lsls	r3, r3, #29
   1f3c6:	d010      	beq.n	1f3ea <z_fatal_error+0xa2>
   1f3c8:	4c17      	ldr	r4, [pc, #92]	; (1f428 <z_fatal_error+0xe0>)
   1f3ca:	4b16      	ldr	r3, [pc, #88]	; (1f424 <z_fatal_error+0xdc>)
   1f3cc:	1ae4      	subs	r4, r4, r3
   1f3ce:	08e4      	lsrs	r4, r4, #3
   1f3d0:	01a4      	lsls	r4, r4, #6
   1f3d2:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f3d6:	b9b5      	cbnz	r5, 1f406 <z_fatal_error+0xbe>
		thread_name = "unknown";
   1f3d8:	4818      	ldr	r0, [pc, #96]	; (1f43c <z_fatal_error+0xf4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f3da:	f7fb fa29 	bl	1a830 <log_strdup>
   1f3de:	4623      	mov	r3, r4
   1f3e0:	4602      	mov	r2, r0
   1f3e2:	4629      	mov	r1, r5
   1f3e4:	4816      	ldr	r0, [pc, #88]	; (1f440 <z_fatal_error+0xf8>)
   1f3e6:	f002 fa6c 	bl	218c2 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f3ea:	4639      	mov	r1, r7
   1f3ec:	4630      	mov	r0, r6
   1f3ee:	f7ff fdf9 	bl	1efe4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f3f2:	f388 8811 	msr	BASEPRI, r8
   1f3f6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f3fa:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f3fc:	b002      	add	sp, #8
   1f3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f402:	f7fe bebb 	b.w	1e17c <z_impl_k_thread_abort>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f406:	4628      	mov	r0, r5
   1f408:	f004 f9fe 	bl	23808 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f40c:	2800      	cmp	r0, #0
   1f40e:	d0e3      	beq.n	1f3d8 <z_fatal_error+0x90>
   1f410:	7803      	ldrb	r3, [r0, #0]
   1f412:	2b00      	cmp	r3, #0
   1f414:	d0e0      	beq.n	1f3d8 <z_fatal_error+0x90>
   1f416:	e7e0      	b.n	1f3da <z_fatal_error+0x92>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f418:	2f00      	cmp	r7, #0
   1f41a:	d1c1      	bne.n	1f3a0 <z_fatal_error+0x58>
   1f41c:	e7e5      	b.n	1f3ea <z_fatal_error+0xa2>
   1f41e:	bf00      	nop
   1f420:	2001014c 	.word	0x2001014c
   1f424:	00023fa4 	.word	0x00023fa4
   1f428:	00023fd4 	.word	0x00023fd4
   1f42c:	00026980 	.word	0x00026980
   1f430:	00028540 	.word	0x00028540
   1f434:	00028556 	.word	0x00028556
   1f438:	0002857e 	.word	0x0002857e
   1f43c:	0002854e 	.word	0x0002854e
   1f440:	0002859f 	.word	0x0002859f

0001f444 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f446:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   1f448:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   1f44a:	4e1b      	ldr	r6, [pc, #108]	; (1f4b8 <idle+0x74>)
	__asm__ volatile(
   1f44c:	f04f 0220 	mov.w	r2, #32
   1f450:	f3ef 8311 	mrs	r3, BASEPRI
   1f454:	f382 8811 	msr	BASEPRI, r2
   1f458:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f45c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f45e:	b188      	cbz	r0, 1f484 <idle+0x40>
			cpu->pending_abort = NULL;
   1f460:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1f462:	f383 8811 	msr	BASEPRI, r3
   1f466:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   1f46a:	f000 fcab 	bl	1fdc4 <z_thread_single_abort>
	__asm__ volatile(
   1f46e:	f04f 0320 	mov.w	r3, #32
   1f472:	f3ef 8011 	mrs	r0, BASEPRI
   1f476:	f383 8811 	msr	BASEPRI, r3
   1f47a:	f3bf 8f6f 	isb	sy
   1f47e:	f004 f8f7 	bl	23670 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1f482:	e7e3      	b.n	1f44c <idle+0x8>
	__asm__ volatile(
   1f484:	f383 8811 	msr	BASEPRI, r3
   1f488:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1f48c:	f04f 0220 	mov.w	r2, #32
   1f490:	f3ef 8311 	mrs	r3, BASEPRI
   1f494:	f382 8811 	msr	BASEPRI, r2
   1f498:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1f49c:	f004 f9ea 	bl	23874 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f4a0:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   1f4a2:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f4a4:	2802      	cmp	r0, #2
   1f4a6:	bfd8      	it	le
   1f4a8:	4608      	movle	r0, r1
   1f4aa:	f004 f9f3 	bl	23894 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1f4ae:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   1f4b0:	f7fe fad6 	bl	1da60 <arch_cpu_idle>
}
   1f4b4:	e7ca      	b.n	1f44c <idle+0x8>
   1f4b6:	bf00      	nop
   1f4b8:	20010bbc 	.word	0x20010bbc

0001f4bc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f4bc:	4802      	ldr	r0, [pc, #8]	; (1f4c8 <z_bss_zero+0xc>)
   1f4be:	4a03      	ldr	r2, [pc, #12]	; (1f4cc <z_bss_zero+0x10>)
   1f4c0:	2100      	movs	r1, #0
   1f4c2:	1a12      	subs	r2, r2, r0
   1f4c4:	f003 be36 	b.w	23134 <memset>
   1f4c8:	200101f8 	.word	0x200101f8
   1f4cc:	2001ecc0 	.word	0x2001ecc0

0001f4d0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1f4d0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1f4d2:	4806      	ldr	r0, [pc, #24]	; (1f4ec <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1f4d4:	4a06      	ldr	r2, [pc, #24]	; (1f4f0 <z_data_copy+0x20>)
   1f4d6:	4907      	ldr	r1, [pc, #28]	; (1f4f4 <z_data_copy+0x24>)
   1f4d8:	1a12      	subs	r2, r2, r0
   1f4da:	f003 fe00 	bl	230de <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1f4de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1f4e2:	4a05      	ldr	r2, [pc, #20]	; (1f4f8 <z_data_copy+0x28>)
   1f4e4:	4905      	ldr	r1, [pc, #20]	; (1f4fc <z_data_copy+0x2c>)
   1f4e6:	4806      	ldr	r0, [pc, #24]	; (1f500 <z_data_copy+0x30>)
   1f4e8:	f003 bdf9 	b.w	230de <memcpy>
   1f4ec:	20010000 	.word	0x20010000
   1f4f0:	200101f4 	.word	0x200101f4
   1f4f4:	00028650 	.word	0x00028650
   1f4f8:	00000000 	.word	0x00000000
   1f4fc:	00028650 	.word	0x00028650
   1f500:	20010000 	.word	0x20010000

0001f504 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1f504:	2201      	movs	r2, #1
{
   1f506:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1f508:	4b08      	ldr	r3, [pc, #32]	; (1f52c <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f50a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f50c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f50e:	f7ff feaf 	bl	1f270 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f512:	2003      	movs	r0, #3
   1f514:	f7ff feac 	bl	1f270 <z_sys_init_run_level>

	z_init_static_threads();
   1f518:	f000 ff7e 	bl	20418 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f51c:	f001 faa4 	bl	20a68 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f520:	4a03      	ldr	r2, [pc, #12]	; (1f530 <bg_thread_main+0x2c>)
   1f522:	7b13      	ldrb	r3, [r2, #12]
   1f524:	f023 0301 	bic.w	r3, r3, #1
   1f528:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f52a:	bd08      	pop	{r3, pc}
   1f52c:	2001ecbf 	.word	0x2001ecbf
   1f530:	200106b8 	.word	0x200106b8

0001f534 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f534:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f538:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f53a:	f7fb f83d 	bl	1a5b8 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1f53e:	4b39      	ldr	r3, [pc, #228]	; (1f624 <z_cstart+0xf0>)
	uint32_t msp =
   1f540:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f544:	f38a 8808 	msr	MSP, sl
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1f548:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f54c:	2400      	movs	r4, #0
   1f54e:	23e0      	movs	r3, #224	; 0xe0
   1f550:	4d35      	ldr	r5, [pc, #212]	; (1f628 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f552:	4e36      	ldr	r6, [pc, #216]	; (1f62c <z_cstart+0xf8>)
   1f554:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f558:	77ec      	strb	r4, [r5, #31]
   1f55a:	762c      	strb	r4, [r5, #24]
   1f55c:	766c      	strb	r4, [r5, #25]
   1f55e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f560:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f562:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1f64c <z_cstart+0x118>
   1f566:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f56a:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f56c:	f7fe fddc 	bl	1e128 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f570:	f7fe fa70 	bl	1da54 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f574:	f04f 33ff 	mov.w	r3, #4294967295
   1f578:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f57a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f57c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f580:	4d2b      	ldr	r5, [pc, #172]	; (1f630 <z_cstart+0xfc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f582:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
   1f586:	ab08      	add	r3, sp, #32
   1f588:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f58a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f58c:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
   1f590:	f7ff fe6e 	bl	1f270 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f594:	2001      	movs	r0, #1
   1f596:	f7ff fe6b 	bl	1f270 <z_sys_init_run_level>
	z_sched_init();
   1f59a:	f000 fd5f 	bl	2005c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f59e:	4b25      	ldr	r3, [pc, #148]	; (1f634 <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
   1f5a0:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5a2:	9305      	str	r3, [sp, #20]
   1f5a4:	2301      	movs	r3, #1
   1f5a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1f5aa:	4923      	ldr	r1, [pc, #140]	; (1f638 <z_cstart+0x104>)
   1f5ac:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f5b0:	4630      	mov	r0, r6
   1f5b2:	464b      	mov	r3, r9
   1f5b4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f5b8:	9400      	str	r4, [sp, #0]
   1f5ba:	f000 fea1 	bl	20300 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f5be:	7b73      	ldrb	r3, [r6, #13]
   1f5c0:	4680      	mov	r8, r0
   1f5c2:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f5c6:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
   1f5c8:	f10d 0b18 	add.w	fp, sp, #24
   1f5cc:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   1f5ce:	f004 f891 	bl	236f4 <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
   1f5d2:	4623      	mov	r3, r4
   1f5d4:	2108      	movs	r1, #8
   1f5d6:	4a19      	ldr	r2, [pc, #100]	; (1f63c <z_cstart+0x108>)
   1f5d8:	4658      	mov	r0, fp
   1f5da:	f001 fd7b 	bl	210d4 <snprintk>
	z_setup_new_thread(thread, stack,
   1f5de:	230f      	movs	r3, #15
   1f5e0:	2201      	movs	r2, #1
   1f5e2:	4f17      	ldr	r7, [pc, #92]	; (1f640 <z_cstart+0x10c>)
   1f5e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1f5e8:	4916      	ldr	r1, [pc, #88]	; (1f644 <z_cstart+0x110>)
   1f5ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f5ee:	4b16      	ldr	r3, [pc, #88]	; (1f648 <z_cstart+0x114>)
   1f5f0:	4638      	mov	r0, r7
   1f5f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f5f6:	f8cd b014 	str.w	fp, [sp, #20]
   1f5fa:	9500      	str	r5, [sp, #0]
   1f5fc:	f000 fe80 	bl	20300 <z_setup_new_thread>
   1f600:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f602:	464a      	mov	r2, r9
   1f604:	f023 0304 	bic.w	r3, r3, #4
   1f608:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f60a:	f105 031c 	add.w	r3, r5, #28
   1f60e:	4641      	mov	r1, r8
   1f610:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   1f612:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f616:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   1f618:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1f61a:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f61e:	f7fe f955 	bl	1d8cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f622:	bf00      	nop
   1f624:	2002c100 	.word	0x2002c100
   1f628:	e000ed00 	.word	0xe000ed00
   1f62c:	200106b8 	.word	0x200106b8
   1f630:	20010bbc 	.word	0x20010bbc
   1f634:	00028601 	.word	0x00028601
   1f638:	2002afc0 	.word	0x2002afc0
   1f63c:	00028606 	.word	0x00028606
   1f640:	20010600 	.word	0x20010600
   1f644:	2002bfc0 	.word	0x2002bfc0
   1f648:	0001f445 	.word	0x0001f445
   1f64c:	0001f505 	.word	0x0001f505

0001f650 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f650:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f652:	4b0e      	ldr	r3, [pc, #56]	; (1f68c <init_mem_slab_module+0x3c>)
   1f654:	4c0e      	ldr	r4, [pc, #56]	; (1f690 <init_mem_slab_module+0x40>)
   1f656:	42a3      	cmp	r3, r4
   1f658:	d301      	bcc.n	1f65e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f65a:	2000      	movs	r0, #0
	return rc;
}
   1f65c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f65e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f662:	ea41 0200 	orr.w	r2, r1, r0
   1f666:	f012 0203 	ands.w	r2, r2, #3
   1f66a:	d10b      	bne.n	1f684 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f66c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f66e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f670:	42aa      	cmp	r2, r5
   1f672:	d101      	bne.n	1f678 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f674:	331c      	adds	r3, #28
   1f676:	e7ee      	b.n	1f656 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f678:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f67a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1f67c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1f67e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f680:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f682:	e7f5      	b.n	1f670 <init_mem_slab_module+0x20>
		return -EINVAL;
   1f684:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f688:	e7e8      	b.n	1f65c <init_mem_slab_module+0xc>
   1f68a:	bf00      	nop
   1f68c:	200101a0 	.word	0x200101a0
   1f690:	200101a0 	.word	0x200101a0

0001f694 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f694:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1f696:	460c      	mov	r4, r1
   1f698:	4616      	mov	r6, r2
   1f69a:	461f      	mov	r7, r3
   1f69c:	f04f 0320 	mov.w	r3, #32
   1f6a0:	f3ef 8111 	mrs	r1, BASEPRI
   1f6a4:	f383 8811 	msr	BASEPRI, r3
   1f6a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f6ac:	6943      	ldr	r3, [r0, #20]
   1f6ae:	b15b      	cbz	r3, 1f6c8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1f6b0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f6b2:	681b      	ldr	r3, [r3, #0]
   1f6b4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f6b6:	6983      	ldr	r3, [r0, #24]
   1f6b8:	3301      	adds	r3, #1
   1f6ba:	6183      	str	r3, [r0, #24]
		result = 0;
   1f6bc:	2000      	movs	r0, #0
	__asm__ volatile(
   1f6be:	f381 8811 	msr	BASEPRI, r1
   1f6c2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f6c6:	e011      	b.n	1f6ec <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f6c8:	ea56 0207 	orrs.w	r2, r6, r7
   1f6cc:	d103      	bne.n	1f6d6 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1f6ce:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1f6d2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1f6d4:	e7f3      	b.n	1f6be <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f6d6:	4602      	mov	r2, r0
   1f6d8:	e9cd 6700 	strd	r6, r7, [sp]
   1f6dc:	4804      	ldr	r0, [pc, #16]	; (1f6f0 <k_mem_slab_alloc+0x5c>)
   1f6de:	f000 fc37 	bl	1ff50 <z_pend_curr>
		if (result == 0) {
   1f6e2:	b918      	cbnz	r0, 1f6ec <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1f6e4:	4b03      	ldr	r3, [pc, #12]	; (1f6f4 <k_mem_slab_alloc+0x60>)
   1f6e6:	689b      	ldr	r3, [r3, #8]
   1f6e8:	695b      	ldr	r3, [r3, #20]
   1f6ea:	6023      	str	r3, [r4, #0]
}
   1f6ec:	b002      	add	sp, #8
   1f6ee:	bdd0      	pop	{r4, r6, r7, pc}
   1f6f0:	2001ecc0 	.word	0x2001ecc0
   1f6f4:	20010bbc 	.word	0x20010bbc

0001f6f8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f6f8:	b570      	push	{r4, r5, r6, lr}
   1f6fa:	4604      	mov	r4, r0
   1f6fc:	460d      	mov	r5, r1
	__asm__ volatile(
   1f6fe:	f04f 0320 	mov.w	r3, #32
   1f702:	f3ef 8611 	mrs	r6, BASEPRI
   1f706:	f383 8811 	msr	BASEPRI, r3
   1f70a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f70e:	f004 f84c 	bl	237aa <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1f712:	b160      	cbz	r0, 1f72e <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f714:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f716:	682a      	ldr	r2, [r5, #0]
   1f718:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f71c:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   1f71e:	f003 ffe9 	bl	236f4 <z_ready_thread>
		z_reschedule(&lock, key);
   1f722:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1f724:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1f728:	4807      	ldr	r0, [pc, #28]	; (1f748 <k_mem_slab_free+0x50>)
   1f72a:	f000 b9c5 	b.w	1fab8 <z_reschedule>
		**(char ***)mem = slab->free_list;
   1f72e:	682b      	ldr	r3, [r5, #0]
   1f730:	6962      	ldr	r2, [r4, #20]
   1f732:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1f734:	682b      	ldr	r3, [r5, #0]
   1f736:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1f738:	69a3      	ldr	r3, [r4, #24]
   1f73a:	3b01      	subs	r3, #1
   1f73c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f73e:	f386 8811 	msr	BASEPRI, r6
   1f742:	f3bf 8f6f 	isb	sy
}
   1f746:	bd70      	pop	{r4, r5, r6, pc}
   1f748:	2001ecc0 	.word	0x2001ecc0

0001f74c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1f74c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1f750:	4604      	mov	r4, r0
   1f752:	468a      	mov	sl, r1
   1f754:	4616      	mov	r6, r2
   1f756:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1f758:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   1f75c:	f04f 0320 	mov.w	r3, #32
   1f760:	f3ef 8811 	mrs	r8, BASEPRI
   1f764:	f383 8811 	msr	BASEPRI, r3
   1f768:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   1f76c:	6a02      	ldr	r2, [r0, #32]
   1f76e:	68c3      	ldr	r3, [r0, #12]
   1f770:	429a      	cmp	r2, r3
   1f772:	d22b      	bcs.n	1f7cc <z_impl_k_msgq_put+0x80>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f774:	f004 f819 	bl	237aa <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1f778:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   1f77a:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1f77c:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1f77e:	b180      	cbz	r0, 1f7a2 <z_impl_k_msgq_put+0x56>
   1f780:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   1f782:	6940      	ldr	r0, [r0, #20]
   1f784:	f003 fcab 	bl	230de <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1f788:	4628      	mov	r0, r5
   1f78a:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   1f78e:	f003 ffb1 	bl	236f4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1f792:	4648      	mov	r0, r9
   1f794:	4641      	mov	r1, r8
   1f796:	f000 f98f 	bl	1fab8 <z_reschedule>
			return 0;
   1f79a:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f79c:	b002      	add	sp, #8
   1f79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1f7a2:	69e0      	ldr	r0, [r4, #28]
   1f7a4:	f003 fc9b 	bl	230de <memcpy>
		result = 0;
   1f7a8:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   1f7aa:	69e3      	ldr	r3, [r4, #28]
   1f7ac:	68a2      	ldr	r2, [r4, #8]
   1f7ae:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1f7b0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1f7b2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1f7b4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1f7b6:	bf04      	itt	eq
   1f7b8:	6923      	ldreq	r3, [r4, #16]
   1f7ba:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1f7bc:	6a23      	ldr	r3, [r4, #32]
   1f7be:	3301      	adds	r3, #1
   1f7c0:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   1f7c2:	f388 8811 	msr	BASEPRI, r8
   1f7c6:	f3bf 8f6f 	isb	sy
	return result;
   1f7ca:	e7e7      	b.n	1f79c <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f7cc:	ea56 0307 	orrs.w	r3, r6, r7
   1f7d0:	d00a      	beq.n	1f7e8 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = (void *) data;
   1f7d2:	4b07      	ldr	r3, [pc, #28]	; (1f7f0 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7d4:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   1f7d6:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7d8:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   1f7da:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f7dc:	4641      	mov	r1, r8
   1f7de:	e9cd 6700 	strd	r6, r7, [sp]
   1f7e2:	f000 fbb5 	bl	1ff50 <z_pend_curr>
   1f7e6:	e7d9      	b.n	1f79c <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   1f7e8:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1f7ec:	e7e9      	b.n	1f7c2 <z_impl_k_msgq_put+0x76>
   1f7ee:	bf00      	nop
   1f7f0:	20010bbc 	.word	0x20010bbc

0001f7f4 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1f7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f7f8:	4604      	mov	r4, r0
   1f7fa:	4616      	mov	r6, r2
   1f7fc:	4608      	mov	r0, r1
   1f7fe:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1f800:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   1f804:	f04f 0320 	mov.w	r3, #32
   1f808:	f3ef 8811 	mrs	r8, BASEPRI
   1f80c:	f383 8811 	msr	BASEPRI, r3
   1f810:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   1f814:	6a23      	ldr	r3, [r4, #32]
   1f816:	2b00      	cmp	r3, #0
   1f818:	d034      	beq.n	1f884 <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1f81a:	68a2      	ldr	r2, [r4, #8]
   1f81c:	69a1      	ldr	r1, [r4, #24]
   1f81e:	f003 fc5e 	bl	230de <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1f822:	69a3      	ldr	r3, [r4, #24]
   1f824:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f826:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   1f828:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1f82a:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1f82c:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1f82e:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1f830:	bf04      	itt	eq
   1f832:	6923      	ldreq	r3, [r4, #16]
   1f834:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   1f836:	6a23      	ldr	r3, [r4, #32]
   1f838:	3b01      	subs	r3, #1
   1f83a:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1f83c:	f003 ffb5 	bl	237aa <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1f840:	4605      	mov	r5, r0
   1f842:	2800      	cmp	r0, #0
   1f844:	d02e      	beq.n	1f8a4 <z_impl_k_msgq_get+0xb0>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1f846:	6941      	ldr	r1, [r0, #20]
   1f848:	68a2      	ldr	r2, [r4, #8]
   1f84a:	69e0      	ldr	r0, [r4, #28]
   1f84c:	f003 fc47 	bl	230de <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1f850:	69e3      	ldr	r3, [r4, #28]
   1f852:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1f854:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   1f856:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1f858:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1f85a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1f85c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1f85e:	bf04      	itt	eq
   1f860:	6923      	ldreq	r3, [r4, #16]
   1f862:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1f864:	6a23      	ldr	r3, [r4, #32]
   1f866:	3301      	adds	r3, #1
   1f868:	6223      	str	r3, [r4, #32]
   1f86a:	2400      	movs	r4, #0
   1f86c:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
			z_ready_thread(pending_thread);
   1f870:	f003 ff40 	bl	236f4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1f874:	4648      	mov	r0, r9
   1f876:	4641      	mov	r1, r8
   1f878:	f000 f91e 	bl	1fab8 <z_reschedule>
			return 0;
   1f87c:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1f87e:	b003      	add	sp, #12
   1f880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f884:	ea56 0307 	orrs.w	r3, r6, r7
   1f888:	d00a      	beq.n	1f8a0 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
   1f88a:	4b09      	ldr	r3, [pc, #36]	; (1f8b0 <z_impl_k_msgq_get+0xbc>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f88c:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   1f88e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f890:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   1f892:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1f894:	4641      	mov	r1, r8
   1f896:	e9cd 6700 	strd	r6, r7, [sp]
   1f89a:	f000 fb59 	bl	1ff50 <z_pend_curr>
   1f89e:	e7ee      	b.n	1f87e <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
   1f8a0:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   1f8a4:	f388 8811 	msr	BASEPRI, r8
   1f8a8:	f3bf 8f6f 	isb	sy
	return result;
   1f8ac:	e7e7      	b.n	1f87e <z_impl_k_msgq_get+0x8a>
   1f8ae:	bf00      	nop
   1f8b0:	20010bbc 	.word	0x20010bbc

0001f8b4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f8b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f8b8:	4604      	mov	r4, r0
   1f8ba:	4616      	mov	r6, r2
   1f8bc:	461f      	mov	r7, r3
	__asm__ volatile(
   1f8be:	f04f 0320 	mov.w	r3, #32
   1f8c2:	f3ef 8811 	mrs	r8, BASEPRI
   1f8c6:	f383 8811 	msr	BASEPRI, r3
   1f8ca:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f8ce:	68c3      	ldr	r3, [r0, #12]
   1f8d0:	4a32      	ldr	r2, [pc, #200]	; (1f99c <z_impl_k_mutex_lock+0xe8>)
   1f8d2:	b16b      	cbz	r3, 1f8f0 <z_impl_k_mutex_lock+0x3c>
   1f8d4:	6880      	ldr	r0, [r0, #8]
   1f8d6:	6891      	ldr	r1, [r2, #8]
   1f8d8:	4288      	cmp	r0, r1
   1f8da:	d019      	beq.n	1f910 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f8dc:	ea56 0307 	orrs.w	r3, r6, r7
   1f8e0:	d118      	bne.n	1f914 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f8e2:	f388 8811 	msr	BASEPRI, r8
   1f8e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f8ea:	f06f 000f 	mvn.w	r0, #15
   1f8ee:	e00c      	b.n	1f90a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1f8f0:	6891      	ldr	r1, [r2, #8]
   1f8f2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1f8f6:	3301      	adds	r3, #1
   1f8f8:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f8fa:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f8fc:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1f8fe:	60a3      	str	r3, [r4, #8]
   1f900:	f388 8811 	msr	BASEPRI, r8
   1f904:	f3bf 8f6f 	isb	sy
		return 0;
   1f908:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1f90a:	b002      	add	sp, #8
   1f90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f910:	6921      	ldr	r1, [r4, #16]
   1f912:	e7f0      	b.n	1f8f6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f914:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f918:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f91c:	4299      	cmp	r1, r3
   1f91e:	bfa8      	it	ge
   1f920:	4619      	movge	r1, r3
   1f922:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f926:	428b      	cmp	r3, r1
   1f928:	dd2c      	ble.n	1f984 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1f92a:	f000 fb53 	bl	1ffd4 <z_set_prio>
   1f92e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f930:	4622      	mov	r2, r4
   1f932:	4641      	mov	r1, r8
   1f934:	e9cd 6700 	strd	r6, r7, [sp]
   1f938:	4819      	ldr	r0, [pc, #100]	; (1f9a0 <z_impl_k_mutex_lock+0xec>)
   1f93a:	f000 fb09 	bl	1ff50 <z_pend_curr>
	if (got_mutex == 0) {
   1f93e:	2800      	cmp	r0, #0
   1f940:	d0e3      	beq.n	1f90a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1f942:	f04f 0320 	mov.w	r3, #32
   1f946:	f3ef 8611 	mrs	r6, BASEPRI
   1f94a:	f383 8811 	msr	BASEPRI, r3
   1f94e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f952:	6823      	ldr	r3, [r4, #0]
   1f954:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f956:	429c      	cmp	r4, r3
   1f958:	d007      	beq.n	1f96a <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f95a:	b133      	cbz	r3, 1f96a <z_impl_k_mutex_lock+0xb6>
   1f95c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f960:	4299      	cmp	r1, r3
   1f962:	bfa8      	it	ge
   1f964:	4619      	movge	r1, r3
   1f966:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f96a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f96c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f970:	4299      	cmp	r1, r3
   1f972:	d109      	bne.n	1f988 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1f974:	b16d      	cbz	r5, 1f992 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f976:	4631      	mov	r1, r6
   1f978:	4809      	ldr	r0, [pc, #36]	; (1f9a0 <z_impl_k_mutex_lock+0xec>)
   1f97a:	f000 f89d 	bl	1fab8 <z_reschedule>
	return -EAGAIN;
   1f97e:	f06f 000a 	mvn.w	r0, #10
   1f982:	e7c2      	b.n	1f90a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1f984:	2500      	movs	r5, #0
   1f986:	e7d3      	b.n	1f930 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1f988:	f000 fb24 	bl	1ffd4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f98c:	2800      	cmp	r0, #0
   1f98e:	d1f2      	bne.n	1f976 <z_impl_k_mutex_lock+0xc2>
   1f990:	e7f0      	b.n	1f974 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1f992:	f386 8811 	msr	BASEPRI, r6
   1f996:	f3bf 8f6f 	isb	sy
   1f99a:	e7f0      	b.n	1f97e <z_impl_k_mutex_lock+0xca>
   1f99c:	20010bbc 	.word	0x20010bbc
   1f9a0:	2001ecc0 	.word	0x2001ecc0

0001f9a4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f9a4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1f9a6:	6883      	ldr	r3, [r0, #8]
{
   1f9a8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	d037      	beq.n	1fa1e <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f9ae:	4a1f      	ldr	r2, [pc, #124]	; (1fa2c <z_impl_k_mutex_unlock+0x88>)
   1f9b0:	6892      	ldr	r2, [r2, #8]
   1f9b2:	4293      	cmp	r3, r2
   1f9b4:	d136      	bne.n	1fa24 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1f9b6:	7bda      	ldrb	r2, [r3, #15]
   1f9b8:	3a01      	subs	r2, #1
   1f9ba:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1f9bc:	68c3      	ldr	r3, [r0, #12]
   1f9be:	2b01      	cmp	r3, #1
   1f9c0:	d005      	beq.n	1f9ce <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f9c2:	3b01      	subs	r3, #1
   1f9c4:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1f9c6:	f000 f8db 	bl	1fb80 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1f9ca:	2000      	movs	r0, #0
}
   1f9cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f9ce:	f04f 0320 	mov.w	r3, #32
   1f9d2:	f3ef 8511 	mrs	r5, BASEPRI
   1f9d6:	f383 8811 	msr	BASEPRI, r3
   1f9da:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f9de:	6901      	ldr	r1, [r0, #16]
   1f9e0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f9e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f9e6:	4299      	cmp	r1, r3
   1f9e8:	d001      	beq.n	1f9ee <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1f9ea:	f000 faf3 	bl	1ffd4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f9ee:	4620      	mov	r0, r4
   1f9f0:	f003 fedb 	bl	237aa <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f9f4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f9f6:	b160      	cbz	r0, 1fa12 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f9f8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f9fc:	6122      	str	r2, [r4, #16]
   1f9fe:	2200      	movs	r2, #0
   1fa00:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
		z_ready_thread(new_owner);
   1fa04:	f003 fe76 	bl	236f4 <z_ready_thread>
		z_reschedule(&lock, key);
   1fa08:	4629      	mov	r1, r5
   1fa0a:	4809      	ldr	r0, [pc, #36]	; (1fa30 <z_impl_k_mutex_unlock+0x8c>)
   1fa0c:	f000 f854 	bl	1fab8 <z_reschedule>
   1fa10:	e7d9      	b.n	1f9c6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1fa12:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1fa14:	f385 8811 	msr	BASEPRI, r5
   1fa18:	f3bf 8f6f 	isb	sy
   1fa1c:	e7d3      	b.n	1f9c6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1fa1e:	f06f 0015 	mvn.w	r0, #21
   1fa22:	e7d3      	b.n	1f9cc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1fa24:	f04f 30ff 	mov.w	r0, #4294967295
   1fa28:	e7d0      	b.n	1f9cc <z_impl_k_mutex_unlock+0x28>
   1fa2a:	bf00      	nop
   1fa2c:	20010bbc 	.word	0x20010bbc
   1fa30:	2001ecc0 	.word	0x2001ecc0

0001fa34 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1fa34:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1fa36:	4c08      	ldr	r4, [pc, #32]	; (1fa58 <z_reset_time_slice+0x24>)
   1fa38:	6823      	ldr	r3, [r4, #0]
   1fa3a:	b15b      	cbz	r3, 1fa54 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fa3c:	f7fd fea6 	bl	1d78c <z_clock_elapsed>
   1fa40:	4603      	mov	r3, r0
   1fa42:	6820      	ldr	r0, [r4, #0]
   1fa44:	4a05      	ldr	r2, [pc, #20]	; (1fa5c <z_reset_time_slice+0x28>)
   1fa46:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   1fa48:	2100      	movs	r1, #0
	}
}
   1fa4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fa4e:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1fa50:	f003 bf20 	b.w	23894 <z_set_timeout_expiry>
}
   1fa54:	bd10      	pop	{r4, pc}
   1fa56:	bf00      	nop
   1fa58:	20010bfc 	.word	0x20010bfc
   1fa5c:	20010bbc 	.word	0x20010bbc

0001fa60 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1fa60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fa62:	4605      	mov	r5, r0
   1fa64:	460c      	mov	r4, r1
	__asm__ volatile(
   1fa66:	f04f 0320 	mov.w	r3, #32
   1fa6a:	f3ef 8611 	mrs	r6, BASEPRI
   1fa6e:	f383 8811 	msr	BASEPRI, r3
   1fa72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1fa76:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1fa78:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1fa7c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fa80:	2100      	movs	r1, #0
   1fa82:	4b0a      	ldr	r3, [pc, #40]	; (1faac <k_sched_time_slice_set+0x4c>)
   1fa84:	fbe7 0105 	umlal	r0, r1, r7, r5
   1fa88:	615a      	str	r2, [r3, #20]
   1fa8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fa8e:	2300      	movs	r3, #0
   1fa90:	f7ec fc26 	bl	c2e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1fa94:	4b06      	ldr	r3, [pc, #24]	; (1fab0 <k_sched_time_slice_set+0x50>)
   1fa96:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1fa98:	4b06      	ldr	r3, [pc, #24]	; (1fab4 <k_sched_time_slice_set+0x54>)
   1fa9a:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1fa9c:	f7ff ffca 	bl	1fa34 <z_reset_time_slice>
	__asm__ volatile(
   1faa0:	f386 8811 	msr	BASEPRI, r6
   1faa4:	f3bf 8f6f 	isb	sy
	}
}
   1faa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1faaa:	bf00      	nop
   1faac:	20010bbc 	.word	0x20010bbc
   1fab0:	20010bfc 	.word	0x20010bfc
   1fab4:	20010bf8 	.word	0x20010bf8

0001fab8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fab8:	b949      	cbnz	r1, 1face <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1faba:	f3ef 8005 	mrs	r0, IPSR
   1fabe:	b930      	cbnz	r0, 1face <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1fac0:	4b05      	ldr	r3, [pc, #20]	; (1fad8 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1fac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fac4:	689b      	ldr	r3, [r3, #8]
   1fac6:	429a      	cmp	r2, r3
   1fac8:	d001      	beq.n	1face <z_reschedule+0x16>
	ret = arch_swap(key);
   1faca:	f7fd be93 	b.w	1d7f4 <arch_swap>
   1face:	f381 8811 	msr	BASEPRI, r1
   1fad2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1fad6:	4770      	bx	lr
   1fad8:	20010bbc 	.word	0x20010bbc

0001fadc <k_sched_lock>:
	__asm__ volatile(
   1fadc:	f04f 0320 	mov.w	r3, #32
   1fae0:	f3ef 8111 	mrs	r1, BASEPRI
   1fae4:	f383 8811 	msr	BASEPRI, r3
   1fae8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1faec:	4b04      	ldr	r3, [pc, #16]	; (1fb00 <k_sched_lock+0x24>)
   1faee:	689a      	ldr	r2, [r3, #8]
   1faf0:	7bd3      	ldrb	r3, [r2, #15]
   1faf2:	3b01      	subs	r3, #1
   1faf4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1faf6:	f381 8811 	msr	BASEPRI, r1
   1fafa:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1fafe:	4770      	bx	lr
   1fb00:	20010bbc 	.word	0x20010bbc

0001fb04 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1fb04:	4b09      	ldr	r3, [pc, #36]	; (1fb2c <z_priq_dumb_remove+0x28>)
   1fb06:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1fb0a:	4282      	cmp	r2, r0
   1fb0c:	d105      	bne.n	1fb1a <z_priq_dumb_remove+0x16>
   1fb0e:	689b      	ldr	r3, [r3, #8]
   1fb10:	428b      	cmp	r3, r1
   1fb12:	d102      	bne.n	1fb1a <z_priq_dumb_remove+0x16>
   1fb14:	7b4b      	ldrb	r3, [r1, #13]
   1fb16:	06db      	lsls	r3, r3, #27
   1fb18:	d106      	bne.n	1fb28 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1fb1a:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fb1e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fb20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fb22:	2300      	movs	r3, #0
	node->prev = NULL;
   1fb24:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1fb28:	4770      	bx	lr
   1fb2a:	bf00      	nop
   1fb2c:	20010bbc 	.word	0x20010bbc

0001fb30 <update_cache>:
{
   1fb30:	b538      	push	{r3, r4, r5, lr}
   1fb32:	4c12      	ldr	r4, [pc, #72]	; (1fb7c <update_cache+0x4c>)
   1fb34:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1fb36:	6923      	ldr	r3, [r4, #16]
   1fb38:	68a2      	ldr	r2, [r4, #8]
   1fb3a:	b10b      	cbz	r3, 1fb40 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1fb3c:	68e5      	ldr	r5, [r4, #12]
   1fb3e:	e00c      	b.n	1fb5a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fb40:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1fb44:	f003 fdcc 	bl	236e0 <z_priq_dumb_best>
   1fb48:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fb4a:	7b53      	ldrb	r3, [r2, #13]
   1fb4c:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1fb4e:	bf44      	itt	mi
   1fb50:	f043 0308 	orrmi.w	r3, r3, #8
   1fb54:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1fb56:	2d00      	cmp	r5, #0
   1fb58:	d0f0      	beq.n	1fb3c <update_cache+0xc>
	if (preempt_ok != 0) {
   1fb5a:	b949      	cbnz	r1, 1fb70 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1fb5c:	7b53      	ldrb	r3, [r2, #13]
   1fb5e:	06db      	lsls	r3, r3, #27
   1fb60:	d106      	bne.n	1fb70 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fb62:	69ab      	ldr	r3, [r5, #24]
   1fb64:	b923      	cbnz	r3, 1fb70 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fb66:	89d3      	ldrh	r3, [r2, #14]
   1fb68:	2b7f      	cmp	r3, #127	; 0x7f
   1fb6a:	d901      	bls.n	1fb70 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1fb6c:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1fb6e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1fb70:	4295      	cmp	r5, r2
   1fb72:	d001      	beq.n	1fb78 <update_cache+0x48>
			z_reset_time_slice();
   1fb74:	f7ff ff5e 	bl	1fa34 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1fb78:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1fb7a:	e7f8      	b.n	1fb6e <update_cache+0x3e>
   1fb7c:	20010bbc 	.word	0x20010bbc

0001fb80 <k_sched_unlock>:
{
   1fb80:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fb82:	f04f 0320 	mov.w	r3, #32
   1fb86:	f3ef 8411 	mrs	r4, BASEPRI
   1fb8a:	f383 8811 	msr	BASEPRI, r3
   1fb8e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1fb92:	4b08      	ldr	r3, [pc, #32]	; (1fbb4 <k_sched_unlock+0x34>)
		update_cache(0);
   1fb94:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1fb96:	689a      	ldr	r2, [r3, #8]
   1fb98:	7bd3      	ldrb	r3, [r2, #15]
   1fb9a:	3301      	adds	r3, #1
   1fb9c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1fb9e:	f7ff ffc7 	bl	1fb30 <update_cache>
	__asm__ volatile(
   1fba2:	f384 8811 	msr	BASEPRI, r4
   1fba6:	f3bf 8f6f 	isb	sy
}
   1fbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1fbae:	f003 bd6b 	b.w	23688 <z_reschedule_unlocked>
   1fbb2:	bf00      	nop
   1fbb4:	20010bbc 	.word	0x20010bbc

0001fbb8 <ready_thread>:
{
   1fbb8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fbba:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1fbbe:	7b43      	ldrb	r3, [r0, #13]
   1fbc0:	2a00      	cmp	r2, #0
   1fbc2:	db2c      	blt.n	1fc1e <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fbc4:	06db      	lsls	r3, r3, #27
   1fbc6:	d12a      	bne.n	1fc1e <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1fbc8:	6983      	ldr	r3, [r0, #24]
   1fbca:	bb43      	cbnz	r3, 1fc1e <ready_thread+0x66>
	return list->head == list;
   1fbcc:	4a15      	ldr	r2, [pc, #84]	; (1fc24 <ready_thread+0x6c>)
   1fbce:	4611      	mov	r1, r2
   1fbd0:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbd4:	428c      	cmp	r4, r1
   1fbd6:	bf18      	it	ne
   1fbd8:	4623      	movne	r3, r4
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	bf38      	it	cc
   1fbde:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fbe0:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fbe2:	b1b3      	cbz	r3, 1fc12 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fbe4:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fbe8:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fbec:	42ae      	cmp	r6, r5
   1fbee:	db03      	blt.n	1fbf8 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1fbf0:	42a3      	cmp	r3, r4
   1fbf2:	d00e      	beq.n	1fc12 <ready_thread+0x5a>
   1fbf4:	681b      	ldr	r3, [r3, #0]
   1fbf6:	e7f4      	b.n	1fbe2 <ready_thread+0x2a>
	node->prev = successor->prev;
   1fbf8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fbfa:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1fbfe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fc00:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1fc02:	7b43      	ldrb	r3, [r0, #13]
   1fc04:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fc08:	7343      	strb	r3, [r0, #13]
}
   1fc0a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1fc0c:	2000      	movs	r0, #0
   1fc0e:	f7ff bf8f 	b.w	1fb30 <update_cache>
	node->prev = list->tail;
   1fc12:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1fc16:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fc18:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1fc1a:	6310      	str	r0, [r2, #48]	; 0x30
}
   1fc1c:	e7f1      	b.n	1fc02 <ready_thread+0x4a>
}
   1fc1e:	bc70      	pop	{r4, r5, r6}
   1fc20:	4770      	bx	lr
   1fc22:	bf00      	nop
   1fc24:	20010bbc 	.word	0x20010bbc

0001fc28 <z_sched_start>:
{
   1fc28:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fc2a:	f04f 0220 	mov.w	r2, #32
   1fc2e:	f3ef 8411 	mrs	r4, BASEPRI
   1fc32:	f382 8811 	msr	BASEPRI, r2
   1fc36:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1fc3a:	7b42      	ldrb	r2, [r0, #13]
   1fc3c:	0751      	lsls	r1, r2, #29
   1fc3e:	d404      	bmi.n	1fc4a <z_sched_start+0x22>
	__asm__ volatile(
   1fc40:	f384 8811 	msr	BASEPRI, r4
   1fc44:	f3bf 8f6f 	isb	sy
}
   1fc48:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fc4a:	f022 0204 	bic.w	r2, r2, #4
   1fc4e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1fc50:	f7ff ffb2 	bl	1fbb8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1fc54:	4621      	mov	r1, r4
}
   1fc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1fc5a:	4801      	ldr	r0, [pc, #4]	; (1fc60 <z_sched_start+0x38>)
   1fc5c:	f7ff bf2c 	b.w	1fab8 <z_reschedule>
   1fc60:	2001ecc0 	.word	0x2001ecc0

0001fc64 <move_thread_to_end_of_prio_q>:
{
   1fc64:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fc66:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1fc6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fc6c:	2b00      	cmp	r3, #0
   1fc6e:	da02      	bge.n	1fc76 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fc70:	4817      	ldr	r0, [pc, #92]	; (1fcd0 <move_thread_to_end_of_prio_q+0x6c>)
   1fc72:	f7ff ff47 	bl	1fb04 <z_priq_dumb_remove>
	return list->head == list;
   1fc76:	4a17      	ldr	r2, [pc, #92]	; (1fcd4 <move_thread_to_end_of_prio_q+0x70>)
   1fc78:	4610      	mov	r0, r2
   1fc7a:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fc7e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc80:	4283      	cmp	r3, r0
   1fc82:	bf08      	it	eq
   1fc84:	2300      	moveq	r3, #0
   1fc86:	2b00      	cmp	r3, #0
   1fc88:	bf38      	it	cc
   1fc8a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fc8c:	b1d3      	cbz	r3, 1fcc4 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fc8e:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1fc92:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fc96:	42ae      	cmp	r6, r5
   1fc98:	db03      	blt.n	1fca2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1fc9a:	42a3      	cmp	r3, r4
   1fc9c:	d012      	beq.n	1fcc4 <move_thread_to_end_of_prio_q+0x60>
   1fc9e:	681b      	ldr	r3, [r3, #0]
   1fca0:	e7f4      	b.n	1fc8c <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1fca2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1fca4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1fca8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fcaa:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1fcac:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1fcae:	6890      	ldr	r0, [r2, #8]
   1fcb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fcb4:	734b      	strb	r3, [r1, #13]
   1fcb6:	1a43      	subs	r3, r0, r1
   1fcb8:	4258      	negs	r0, r3
   1fcba:	4158      	adcs	r0, r3
}
   1fcbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fcc0:	f7ff bf36 	b.w	1fb30 <update_cache>
	node->prev = list->tail;
   1fcc4:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1fcc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fcca:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1fccc:	6311      	str	r1, [r2, #48]	; 0x30
}
   1fcce:	e7ed      	b.n	1fcac <move_thread_to_end_of_prio_q+0x48>
   1fcd0:	20010be8 	.word	0x20010be8
   1fcd4:	20010bbc 	.word	0x20010bbc

0001fcd8 <z_time_slice>:
{
   1fcd8:	4601      	mov	r1, r0
   1fcda:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   1fcdc:	f04f 0320 	mov.w	r3, #32
   1fce0:	f3ef 8411 	mrs	r4, BASEPRI
   1fce4:	f383 8811 	msr	BASEPRI, r3
   1fce8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fcec:	4b16      	ldr	r3, [pc, #88]	; (1fd48 <z_time_slice+0x70>)
   1fcee:	4a17      	ldr	r2, [pc, #92]	; (1fd4c <z_time_slice+0x74>)
   1fcf0:	6898      	ldr	r0, [r3, #8]
   1fcf2:	6815      	ldr	r5, [r2, #0]
   1fcf4:	42a8      	cmp	r0, r5
   1fcf6:	461d      	mov	r5, r3
   1fcf8:	d106      	bne.n	1fd08 <z_time_slice+0x30>
			z_reset_time_slice();
   1fcfa:	f7ff fe9b 	bl	1fa34 <z_reset_time_slice>
	__asm__ volatile(
   1fcfe:	f384 8811 	msr	BASEPRI, r4
   1fd02:	f3bf 8f6f 	isb	sy
}
   1fd06:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1fd08:	2600      	movs	r6, #0
   1fd0a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1fd0c:	4a10      	ldr	r2, [pc, #64]	; (1fd50 <z_time_slice+0x78>)
   1fd0e:	6812      	ldr	r2, [r2, #0]
   1fd10:	b1ba      	cbz	r2, 1fd42 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fd12:	89c2      	ldrh	r2, [r0, #14]
   1fd14:	2a7f      	cmp	r2, #127	; 0x7f
   1fd16:	d814      	bhi.n	1fd42 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1fd18:	7b42      	ldrb	r2, [r0, #13]
   1fd1a:	06d2      	lsls	r2, r2, #27
   1fd1c:	d111      	bne.n	1fd42 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fd1e:	4a0d      	ldr	r2, [pc, #52]	; (1fd54 <z_time_slice+0x7c>)
   1fd20:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fd24:	6812      	ldr	r2, [r2, #0]
   1fd26:	4296      	cmp	r6, r2
   1fd28:	db0b      	blt.n	1fd42 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fd2a:	4a0b      	ldr	r2, [pc, #44]	; (1fd58 <z_time_slice+0x80>)
   1fd2c:	4290      	cmp	r0, r2
   1fd2e:	d008      	beq.n	1fd42 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1fd30:	695a      	ldr	r2, [r3, #20]
   1fd32:	428a      	cmp	r2, r1
   1fd34:	dc02      	bgt.n	1fd3c <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1fd36:	f7ff ff95 	bl	1fc64 <move_thread_to_end_of_prio_q>
   1fd3a:	e7de      	b.n	1fcfa <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1fd3c:	1a52      	subs	r2, r2, r1
   1fd3e:	615a      	str	r2, [r3, #20]
   1fd40:	e7dd      	b.n	1fcfe <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1fd42:	2300      	movs	r3, #0
   1fd44:	616b      	str	r3, [r5, #20]
   1fd46:	e7da      	b.n	1fcfe <z_time_slice+0x26>
   1fd48:	20010bbc 	.word	0x20010bbc
   1fd4c:	20010bf4 	.word	0x20010bf4
   1fd50:	20010bfc 	.word	0x20010bfc
   1fd54:	20010bf8 	.word	0x20010bf8
   1fd58:	20010600 	.word	0x20010600

0001fd5c <z_impl_k_thread_suspend>:
{
   1fd5c:	b570      	push	{r4, r5, r6, lr}
   1fd5e:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1fd60:	3018      	adds	r0, #24
   1fd62:	f003 fd61 	bl	23828 <z_abort_timeout>
	__asm__ volatile(
   1fd66:	f04f 0320 	mov.w	r3, #32
   1fd6a:	f3ef 8611 	mrs	r6, BASEPRI
   1fd6e:	f383 8811 	msr	BASEPRI, r3
   1fd72:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1fd76:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1fd7a:	2b00      	cmp	r3, #0
   1fd7c:	da07      	bge.n	1fd8e <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fd7e:	4621      	mov	r1, r4
   1fd80:	480e      	ldr	r0, [pc, #56]	; (1fdbc <z_impl_k_thread_suspend+0x60>)
   1fd82:	f7ff febf 	bl	1fb04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fd86:	7b63      	ldrb	r3, [r4, #13]
   1fd88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fd8c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1fd8e:	4d0c      	ldr	r5, [pc, #48]	; (1fdc0 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fd90:	7b63      	ldrb	r3, [r4, #13]
   1fd92:	68a8      	ldr	r0, [r5, #8]
   1fd94:	f043 0310 	orr.w	r3, r3, #16
   1fd98:	7363      	strb	r3, [r4, #13]
   1fd9a:	1b03      	subs	r3, r0, r4
   1fd9c:	4258      	negs	r0, r3
   1fd9e:	4158      	adcs	r0, r3
   1fda0:	f7ff fec6 	bl	1fb30 <update_cache>
	__asm__ volatile(
   1fda4:	f386 8811 	msr	BASEPRI, r6
   1fda8:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1fdac:	68ab      	ldr	r3, [r5, #8]
   1fdae:	42a3      	cmp	r3, r4
   1fdb0:	d103      	bne.n	1fdba <z_impl_k_thread_suspend+0x5e>
}
   1fdb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1fdb6:	f003 bc67 	b.w	23688 <z_reschedule_unlocked>
}
   1fdba:	bd70      	pop	{r4, r5, r6, pc}
   1fdbc:	20010be8 	.word	0x20010be8
   1fdc0:	20010bbc 	.word	0x20010bbc

0001fdc4 <z_thread_single_abort>:
{
   1fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdc8:	4604      	mov	r4, r0
	__asm__ volatile(
   1fdca:	f04f 0320 	mov.w	r3, #32
   1fdce:	f3ef 8211 	mrs	r2, BASEPRI
   1fdd2:	f383 8811 	msr	BASEPRI, r3
   1fdd6:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1fdda:	7b43      	ldrb	r3, [r0, #13]
   1fddc:	f013 0f28 	tst.w	r3, #40	; 0x28
   1fde0:	d005      	beq.n	1fdee <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1fde2:	f382 8811 	msr	BASEPRI, r2
   1fde6:	f3bf 8f6f 	isb	sy
}
   1fdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1fdee:	f043 0320 	orr.w	r3, r3, #32
   1fdf2:	7343      	strb	r3, [r0, #13]
   1fdf4:	f382 8811 	msr	BASEPRI, r2
   1fdf8:	f3bf 8f6f 	isb	sy
   1fdfc:	3018      	adds	r0, #24
   1fdfe:	f003 fd13 	bl	23828 <z_abort_timeout>
	__asm__ volatile(
   1fe02:	f04f 0320 	mov.w	r3, #32
   1fe06:	f3ef 8611 	mrs	r6, BASEPRI
   1fe0a:	f383 8811 	msr	BASEPRI, r3
   1fe0e:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fe12:	7b63      	ldrb	r3, [r4, #13]
   1fe14:	06d8      	lsls	r0, r3, #27
   1fe16:	d116      	bne.n	1fe46 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1fe18:	69a2      	ldr	r2, [r4, #24]
   1fe1a:	b9a2      	cbnz	r2, 1fe46 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1fe1c:	0619      	lsls	r1, r3, #24
   1fe1e:	d507      	bpl.n	1fe30 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1fe20:	4621      	mov	r1, r4
   1fe22:	4828      	ldr	r0, [pc, #160]	; (1fec4 <z_thread_single_abort+0x100>)
   1fe24:	f7ff fe6e 	bl	1fb04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fe28:	7b63      	ldrb	r3, [r4, #13]
   1fe2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fe2e:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1fe30:	4b25      	ldr	r3, [pc, #148]	; (1fec8 <z_thread_single_abort+0x104>)
   1fe32:	6898      	ldr	r0, [r3, #8]
   1fe34:	1b02      	subs	r2, r0, r4
   1fe36:	4250      	negs	r0, r2
   1fe38:	4150      	adcs	r0, r2
   1fe3a:	f7ff fe79 	bl	1fb30 <update_cache>
			waiter->base.pended_on = NULL;
   1fe3e:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1fe40:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1fe44:	e01e      	b.n	1fe84 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1fe46:	079b      	lsls	r3, r3, #30
   1fe48:	d5f9      	bpl.n	1fe3e <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1fe4a:	4621      	mov	r1, r4
   1fe4c:	68a0      	ldr	r0, [r4, #8]
   1fe4e:	f7ff fe59 	bl	1fb04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fe52:	7b63      	ldrb	r3, [r4, #13]
   1fe54:	f023 0302 	bic.w	r3, r3, #2
   1fe58:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1fe5a:	2300      	movs	r3, #0
   1fe5c:	60a3      	str	r3, [r4, #8]
   1fe5e:	e7ee      	b.n	1fe3e <z_thread_single_abort+0x7a>
   1fe60:	f105 0018 	add.w	r0, r5, #24
   1fe64:	f003 fce0 	bl	23828 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1fe68:	68a8      	ldr	r0, [r5, #8]
   1fe6a:	4629      	mov	r1, r5
   1fe6c:	f7ff fe4a 	bl	1fb04 <z_priq_dumb_remove>
   1fe70:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1fe72:	4628      	mov	r0, r5
   1fe74:	f023 0302 	bic.w	r3, r3, #2
   1fe78:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1fe7a:	60af      	str	r7, [r5, #8]
   1fe7c:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
			ready_thread(waiter);
   1fe80:	f7ff fe9a 	bl	1fbb8 <ready_thread>
	return list->head == list;
   1fe84:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe86:	4545      	cmp	r5, r8
   1fe88:	d001      	beq.n	1fe8e <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1fe8a:	2d00      	cmp	r5, #0
   1fe8c:	d1e8      	bne.n	1fe60 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1fe8e:	4b0e      	ldr	r3, [pc, #56]	; (1fec8 <z_thread_single_abort+0x104>)
   1fe90:	689a      	ldr	r2, [r3, #8]
   1fe92:	4b0e      	ldr	r3, [pc, #56]	; (1fecc <z_thread_single_abort+0x108>)
   1fe94:	429a      	cmp	r2, r3
   1fe96:	d102      	bne.n	1fe9e <z_thread_single_abort+0xda>
			update_cache(1);
   1fe98:	2001      	movs	r0, #1
   1fe9a:	f7ff fe49 	bl	1fb30 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1fe9e:	7b63      	ldrb	r3, [r4, #13]
		z_thread_monitor_exit(thread);
   1fea0:	4620      	mov	r0, r4
		thread->base.thread_state |= _THREAD_DEAD;
   1fea2:	f043 0308 	orr.w	r3, r3, #8
   1fea6:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1fea8:	6e25      	ldr	r5, [r4, #96]	; 0x60
		z_thread_monitor_exit(thread);
   1feaa:	f000 f9c1 	bl	20230 <z_thread_monitor_exit>
	__asm__ volatile(
   1feae:	f386 8811 	msr	BASEPRI, r6
   1feb2:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1feb6:	2d00      	cmp	r5, #0
   1feb8:	d097      	beq.n	1fdea <z_thread_single_abort+0x26>
		fn_abort(thread);
   1feba:	4620      	mov	r0, r4
   1febc:	462b      	mov	r3, r5
}
   1febe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1fec2:	4718      	bx	r3
   1fec4:	20010be8 	.word	0x20010be8
   1fec8:	20010bbc 	.word	0x20010bbc
   1fecc:	20010600 	.word	0x20010600

0001fed0 <unready_thread>:
{
   1fed0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1fed2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1fed6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fed8:	2b00      	cmp	r3, #0
   1feda:	da06      	bge.n	1feea <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fedc:	4807      	ldr	r0, [pc, #28]	; (1fefc <unready_thread+0x2c>)
   1fede:	f7ff fe11 	bl	1fb04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fee2:	7b4b      	ldrb	r3, [r1, #13]
   1fee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fee8:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1feea:	4b05      	ldr	r3, [pc, #20]	; (1ff00 <unready_thread+0x30>)
   1feec:	6898      	ldr	r0, [r3, #8]
   1feee:	1a43      	subs	r3, r0, r1
   1fef0:	4258      	negs	r0, r3
   1fef2:	4158      	adcs	r0, r3
}
   1fef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1fef8:	f7ff be1a 	b.w	1fb30 <update_cache>
   1fefc:	20010be8 	.word	0x20010be8
   1ff00:	20010bbc 	.word	0x20010bbc

0001ff04 <pend>:
{
   1ff04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff08:	4606      	mov	r6, r0
   1ff0a:	4614      	mov	r4, r2
   1ff0c:	461d      	mov	r5, r3
	__asm__ volatile(
   1ff0e:	f04f 0320 	mov.w	r3, #32
   1ff12:	f3ef 8711 	mrs	r7, BASEPRI
   1ff16:	f383 8811 	msr	BASEPRI, r3
   1ff1a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ff1e:	f003 fc19 	bl	23754 <add_to_waitq_locked>
	__asm__ volatile(
   1ff22:	f387 8811 	msr	BASEPRI, r7
   1ff26:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ff2a:	1c6b      	adds	r3, r5, #1
   1ff2c:	bf08      	it	eq
   1ff2e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1ff32:	d008      	beq.n	1ff46 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1ff34:	4622      	mov	r2, r4
   1ff36:	462b      	mov	r3, r5
   1ff38:	f106 0018 	add.w	r0, r6, #24
   1ff3c:	4903      	ldr	r1, [pc, #12]	; (1ff4c <pend+0x48>)
}
   1ff3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ff42:	f000 bb55 	b.w	205f0 <z_add_timeout>
   1ff46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff4a:	bf00      	nop
   1ff4c:	00023715 	.word	0x00023715

0001ff50 <z_pend_curr>:
{
   1ff50:	b510      	push	{r4, lr}
   1ff52:	460c      	mov	r4, r1
	pending_current = _current;
   1ff54:	4b06      	ldr	r3, [pc, #24]	; (1ff70 <z_pend_curr+0x20>)
{
   1ff56:	4611      	mov	r1, r2
	pending_current = _current;
   1ff58:	6898      	ldr	r0, [r3, #8]
   1ff5a:	4b06      	ldr	r3, [pc, #24]	; (1ff74 <z_pend_curr+0x24>)
   1ff5c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1ff5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ff62:	f7ff ffcf 	bl	1ff04 <pend>
   1ff66:	4620      	mov	r0, r4
}
   1ff68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ff6c:	f7fd bc42 	b.w	1d7f4 <arch_swap>
   1ff70:	20010bbc 	.word	0x20010bbc
   1ff74:	20010bf4 	.word	0x20010bf4

0001ff78 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1ff78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff7a:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1ff7c:	f003 fca4 	bl	238c8 <z_tick_get_32>
   1ff80:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1ff82:	f04f 0320 	mov.w	r3, #32
   1ff86:	f3ef 8711 	mrs	r7, BASEPRI
   1ff8a:	f383 8811 	msr	BASEPRI, r3
   1ff8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1ff92:	4e0d      	ldr	r6, [pc, #52]	; (1ffc8 <z_tick_sleep.part.0+0x50>)
   1ff94:	4b0d      	ldr	r3, [pc, #52]	; (1ffcc <z_tick_sleep.part.0+0x54>)
   1ff96:	68b0      	ldr	r0, [r6, #8]
   1ff98:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1ff9a:	f7ff ff99 	bl	1fed0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1ff9e:	68b0      	ldr	r0, [r6, #8]
   1ffa0:	490b      	ldr	r1, [pc, #44]	; (1ffd0 <z_tick_sleep.part.0+0x58>)
   1ffa2:	462a      	mov	r2, r5
   1ffa4:	17eb      	asrs	r3, r5, #31
   1ffa6:	3018      	adds	r0, #24
   1ffa8:	f000 fb22 	bl	205f0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1ffac:	68b2      	ldr	r2, [r6, #8]
   1ffae:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ffb0:	7b53      	ldrb	r3, [r2, #13]
   1ffb2:	f043 0310 	orr.w	r3, r3, #16
   1ffb6:	7353      	strb	r3, [r2, #13]
   1ffb8:	f7fd fc1c 	bl	1d7f4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1ffbc:	f003 fc84 	bl	238c8 <z_tick_get_32>
   1ffc0:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1ffc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1ffc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ffc8:	20010bbc 	.word	0x20010bbc
   1ffcc:	20010bf4 	.word	0x20010bf4
   1ffd0:	00023715 	.word	0x00023715

0001ffd4 <z_set_prio>:
{
   1ffd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffd8:	4604      	mov	r4, r0
   1ffda:	f04f 0320 	mov.w	r3, #32
   1ffde:	f3ef 8811 	mrs	r8, BASEPRI
   1ffe2:	f383 8811 	msr	BASEPRI, r3
   1ffe6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ffea:	7b43      	ldrb	r3, [r0, #13]
   1ffec:	b24e      	sxtb	r6, r1
   1ffee:	06db      	lsls	r3, r3, #27
   1fff0:	d12e      	bne.n	20050 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1fff2:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1fff4:	bb65      	cbnz	r5, 20050 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fff6:	4f18      	ldr	r7, [pc, #96]	; (20058 <z_set_prio+0x84>)
   1fff8:	4621      	mov	r1, r4
   1fffa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1fffe:	f7ff fd81 	bl	1fb04 <z_priq_dumb_remove>
	return list->head == list;
   20002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20006:	4283      	cmp	r3, r0
   20008:	bf18      	it	ne
   2000a:	461d      	movne	r5, r3
   2000c:	2d00      	cmp	r5, #0
   2000e:	bf38      	it	cc
   20010:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   20012:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20014:	b1b5      	cbz	r5, 20044 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   20016:	f995 100e 	ldrsb.w	r1, [r5, #14]
   2001a:	42b1      	cmp	r1, r6
   2001c:	dc03      	bgt.n	20026 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   2001e:	42aa      	cmp	r2, r5
   20020:	d010      	beq.n	20044 <z_set_prio+0x70>
   20022:	682d      	ldr	r5, [r5, #0]
   20024:	e7f6      	b.n	20014 <z_set_prio+0x40>
	node->prev = successor->prev;
   20026:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   20028:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   2002c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2002e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   20030:	2001      	movs	r0, #1
   20032:	f7ff fd7d 	bl	1fb30 <update_cache>
   20036:	2001      	movs	r0, #1
	__asm__ volatile(
   20038:	f388 8811 	msr	BASEPRI, r8
   2003c:	f3bf 8f6f 	isb	sy
}
   20040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   20044:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   20048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2004a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2004c:	633c      	str	r4, [r7, #48]	; 0x30
}
   2004e:	e7ef      	b.n	20030 <z_set_prio+0x5c>
			thread->base.prio = prio;
   20050:	2000      	movs	r0, #0
   20052:	73a6      	strb	r6, [r4, #14]
   20054:	e7f0      	b.n	20038 <z_set_prio+0x64>
   20056:	bf00      	nop
   20058:	20010bbc 	.word	0x20010bbc

0002005c <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2005c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2005e:	4b04      	ldr	r3, [pc, #16]	; (20070 <z_sched_init+0x14>)
   20060:	4608      	mov	r0, r1
   20062:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   20066:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   2006a:	f7ff bcf9 	b.w	1fa60 <k_sched_time_slice_set>
   2006e:	bf00      	nop
   20070:	20010bbc 	.word	0x20010bbc

00020074 <z_impl_k_yield>:
{
   20074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   20076:	4c24      	ldr	r4, [pc, #144]	; (20108 <z_impl_k_yield+0x94>)
   20078:	4b24      	ldr	r3, [pc, #144]	; (2010c <z_impl_k_yield+0x98>)
   2007a:	68a2      	ldr	r2, [r4, #8]
   2007c:	429a      	cmp	r2, r3
   2007e:	d030      	beq.n	200e2 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   20080:	f04f 0320 	mov.w	r3, #32
   20084:	f3ef 8511 	mrs	r5, BASEPRI
   20088:	f383 8811 	msr	BASEPRI, r3
   2008c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   20090:	68a1      	ldr	r1, [r4, #8]
   20092:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   20096:	f7ff fd35 	bl	1fb04 <z_priq_dumb_remove>
	return list->head == list;
   2009a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2009c:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2009e:	4283      	cmp	r3, r0
   200a0:	bf08      	it	eq
   200a2:	2300      	moveq	r3, #0
   200a4:	2b00      	cmp	r3, #0
   200a6:	bf38      	it	cc
   200a8:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   200aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   200ac:	b32b      	cbz	r3, 200fa <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   200ae:	f992 700e 	ldrsb.w	r7, [r2, #14]
   200b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   200b6:	42b7      	cmp	r7, r6
   200b8:	db03      	blt.n	200c2 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   200ba:	428b      	cmp	r3, r1
   200bc:	d01d      	beq.n	200fa <z_impl_k_yield+0x86>
   200be:	681b      	ldr	r3, [r3, #0]
   200c0:	e7f4      	b.n	200ac <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   200c2:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   200c4:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   200c8:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   200ca:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   200cc:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   200ce:	2001      	movs	r0, #1
   200d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   200d4:	7353      	strb	r3, [r2, #13]
   200d6:	f7ff fd2b 	bl	1fb30 <update_cache>
	__asm__ volatile(
   200da:	f385 8811 	msr	BASEPRI, r5
   200de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   200e2:	f04f 0320 	mov.w	r3, #32
   200e6:	f3ef 8011 	mrs	r0, BASEPRI
   200ea:	f383 8811 	msr	BASEPRI, r3
   200ee:	f3bf 8f6f 	isb	sy
}
   200f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   200f6:	f7fd bb7d 	b.w	1d7f4 <arch_swap>
	node->prev = list->tail;
   200fa:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   200fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20100:	601a      	str	r2, [r3, #0]
	list->tail = node;
   20102:	6322      	str	r2, [r4, #48]	; 0x30
}
   20104:	e7e2      	b.n	200cc <z_impl_k_yield+0x58>
   20106:	bf00      	nop
   20108:	20010bbc 	.word	0x20010bbc
   2010c:	20010600 	.word	0x20010600

00020110 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   20110:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20112:	3301      	adds	r3, #1
   20114:	bf08      	it	eq
   20116:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2011a:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2011c:	d106      	bne.n	2012c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2011e:	4b0b      	ldr	r3, [pc, #44]	; (2014c <z_impl_k_sleep+0x3c>)
   20120:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20122:	f7ff fe1b 	bl	1fd5c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   20126:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   2012a:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   2012c:	4604      	mov	r4, r0
	if (ticks == 0) {
   2012e:	b948      	cbnz	r0, 20144 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   20130:	f7ff ffa0 	bl	20074 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   20134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20138:	fb84 3400 	smull	r3, r4, r4, r0
   2013c:	0bd8      	lsrs	r0, r3, #15
   2013e:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   20142:	e7f2      	b.n	2012a <z_impl_k_sleep+0x1a>
   20144:	f7ff ff18 	bl	1ff78 <z_tick_sleep.part.0>
   20148:	4604      	mov	r4, r0
   2014a:	e7f3      	b.n	20134 <z_impl_k_sleep+0x24>
   2014c:	20010bbc 	.word	0x20010bbc

00020150 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20150:	4b01      	ldr	r3, [pc, #4]	; (20158 <z_impl_k_current_get+0x8>)
   20152:	6898      	ldr	r0, [r3, #8]
   20154:	4770      	bx	lr
   20156:	bf00      	nop
   20158:	20010bbc 	.word	0x20010bbc

0002015c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2015c:	b538      	push	{r3, r4, r5, lr}
   2015e:	4604      	mov	r4, r0
   20160:	f04f 0320 	mov.w	r3, #32
   20164:	f3ef 8511 	mrs	r5, BASEPRI
   20168:	f383 8811 	msr	BASEPRI, r3
   2016c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   20170:	f003 fb1b 	bl	237aa <z_unpend_first_thread>

	if (thread != NULL) {
   20174:	b150      	cbz	r0, 2018c <z_impl_k_sem_give+0x30>
   20176:	2200      	movs	r2, #0
   20178:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2017c:	f003 faba 	bl	236f4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20180:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   20182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20186:	4807      	ldr	r0, [pc, #28]	; (201a4 <z_impl_k_sem_give+0x48>)
   20188:	f7ff bc96 	b.w	1fab8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2018c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20190:	429a      	cmp	r2, r3
   20192:	bf18      	it	ne
   20194:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20196:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20198:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2019a:	f104 0010 	add.w	r0, r4, #16
   2019e:	f003 fd30 	bl	23c02 <z_handle_obj_poll_events>
}
   201a2:	e7ed      	b.n	20180 <z_impl_k_sem_give+0x24>
   201a4:	2001ecc0 	.word	0x2001ecc0

000201a8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   201a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   201aa:	4614      	mov	r4, r2
   201ac:	461d      	mov	r5, r3
   201ae:	f04f 0320 	mov.w	r3, #32
   201b2:	f3ef 8111 	mrs	r1, BASEPRI
   201b6:	f383 8811 	msr	BASEPRI, r3
   201ba:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   201be:	6883      	ldr	r3, [r0, #8]
   201c0:	b143      	cbz	r3, 201d4 <z_impl_k_sem_take+0x2c>
		sem->count--;
   201c2:	3b01      	subs	r3, #1
   201c4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   201c6:	f381 8811 	msr	BASEPRI, r1
   201ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   201ce:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   201d0:	b003      	add	sp, #12
   201d2:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   201d4:	ea54 0305 	orrs.w	r3, r4, r5
   201d8:	d106      	bne.n	201e8 <z_impl_k_sem_take+0x40>
   201da:	f381 8811 	msr	BASEPRI, r1
   201de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   201e2:	f06f 000f 	mvn.w	r0, #15
   201e6:	e7f3      	b.n	201d0 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   201e8:	4602      	mov	r2, r0
   201ea:	e9cd 4500 	strd	r4, r5, [sp]
   201ee:	4802      	ldr	r0, [pc, #8]	; (201f8 <z_impl_k_sem_take+0x50>)
   201f0:	f7ff feae 	bl	1ff50 <z_pend_curr>
	return ret;
   201f4:	e7ec      	b.n	201d0 <z_impl_k_sem_take+0x28>
   201f6:	bf00      	nop
   201f8:	2001ecc0 	.word	0x2001ecc0

000201fc <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   201fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201fe:	4605      	mov	r5, r0
   20200:	460e      	mov	r6, r1
	__asm__ volatile(
   20202:	f04f 0320 	mov.w	r3, #32
   20206:	f3ef 8711 	mrs	r7, BASEPRI
   2020a:	f383 8811 	msr	BASEPRI, r3
   2020e:	f3bf 8f6f 	isb	sy
	 * modified by the user_cb either directly or indirectly.
	 * The indirect ways are through calling k_thread_create and
	 * k_thread_abort from user_cb.
	 */
	key = k_spin_lock(&z_thread_monitor_lock);
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   20212:	4b06      	ldr	r3, [pc, #24]	; (2022c <k_thread_foreach+0x30>)
   20214:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   20216:	b924      	cbnz	r4, 20222 <k_thread_foreach+0x26>
	__asm__ volatile(
   20218:	f387 8811 	msr	BASEPRI, r7
   2021c:	f3bf 8f6f 	isb	sy
		user_cb(thread, user_data);
	}
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   20220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   20222:	4620      	mov	r0, r4
   20224:	4631      	mov	r1, r6
   20226:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   20228:	6fa4      	ldr	r4, [r4, #120]	; 0x78
   2022a:	e7f4      	b.n	20216 <k_thread_foreach+0x1a>
   2022c:	20010bbc 	.word	0x20010bbc

00020230 <z_thread_monitor_exit>:
	__asm__ volatile(
   20230:	f04f 0320 	mov.w	r3, #32
   20234:	f3ef 8111 	mrs	r1, BASEPRI
   20238:	f383 8811 	msr	BASEPRI, r3
   2023c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   20240:	4a09      	ldr	r2, [pc, #36]	; (20268 <z_thread_monitor_exit+0x38>)
   20242:	6b53      	ldr	r3, [r2, #52]	; 0x34
   20244:	4283      	cmp	r3, r0
   20246:	d107      	bne.n	20258 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   20248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   2024a:	6353      	str	r3, [r2, #52]	; 0x34
	__asm__ volatile(
   2024c:	f381 8811 	msr	BASEPRI, r1
   20250:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   20254:	4770      	bx	lr
   20256:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   20258:	2b00      	cmp	r3, #0
   2025a:	d0f7      	beq.n	2024c <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   2025c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
		while ((prev_thread != NULL) &&
   2025e:	4282      	cmp	r2, r0
   20260:	d1f9      	bne.n	20256 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   20262:	6f82      	ldr	r2, [r0, #120]	; 0x78
   20264:	679a      	str	r2, [r3, #120]	; 0x78
   20266:	e7f1      	b.n	2024c <z_thread_monitor_exit+0x1c>
   20268:	20010bbc 	.word	0x20010bbc

0002026c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   2026c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   2026e:	4604      	mov	r4, r0
   20270:	b908      	cbnz	r0, 20276 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   20272:	4b05      	ldr	r3, [pc, #20]	; (20288 <z_impl_k_thread_name_set+0x1c>)
   20274:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   20276:	2220      	movs	r2, #32
   20278:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   2027c:	f002 fec5 	bl	2300a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   20280:	2000      	movs	r0, #0
   20282:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   20286:	bd10      	pop	{r4, pc}
   20288:	20010bbc 	.word	0x20010bbc

0002028c <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   2028c:	7b43      	ldrb	r3, [r0, #13]
   2028e:	2b10      	cmp	r3, #16
   20290:	d80e      	bhi.n	202b0 <k_thread_state_str+0x24>
   20292:	2b10      	cmp	r3, #16
   20294:	d81c      	bhi.n	202d0 <k_thread_state_str+0x44>
   20296:	e8df f003 	tbb	[pc, r3]
   2029a:	091d      	.short	0x091d
   2029c:	1b151b13 	.word	0x1b151b13
   202a0:	1b171b1b 	.word	0x1b171b1b
   202a4:	1b1b1b1b 	.word	0x1b1b1b1b
   202a8:	1b1b      	.short	0x1b1b
   202aa:	19          	.byte	0x19
   202ab:	00          	.byte	0x00
   202ac:	480b      	ldr	r0, [pc, #44]	; (202dc <k_thread_state_str+0x50>)
   202ae:	4770      	bx	lr
   202b0:	2b20      	cmp	r3, #32
   202b2:	d011      	beq.n	202d8 <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
   202b4:	4a0a      	ldr	r2, [pc, #40]	; (202e0 <k_thread_state_str+0x54>)
   202b6:	480b      	ldr	r0, [pc, #44]	; (202e4 <k_thread_state_str+0x58>)
   202b8:	2b80      	cmp	r3, #128	; 0x80
   202ba:	bf08      	it	eq
   202bc:	4610      	moveq	r0, r2
   202be:	4770      	bx	lr
		return "pending";
   202c0:	4809      	ldr	r0, [pc, #36]	; (202e8 <k_thread_state_str+0x5c>)
   202c2:	4770      	bx	lr
		return "prestart";
   202c4:	4809      	ldr	r0, [pc, #36]	; (202ec <k_thread_state_str+0x60>)
   202c6:	4770      	bx	lr
		return "dead";
   202c8:	4809      	ldr	r0, [pc, #36]	; (202f0 <k_thread_state_str+0x64>)
   202ca:	4770      	bx	lr
		return "suspended";
   202cc:	4809      	ldr	r0, [pc, #36]	; (202f4 <k_thread_state_str+0x68>)
   202ce:	4770      	bx	lr
		break;
	}
	return "unknown";
   202d0:	4804      	ldr	r0, [pc, #16]	; (202e4 <k_thread_state_str+0x58>)
   202d2:	4770      	bx	lr
		return "";
   202d4:	4808      	ldr	r0, [pc, #32]	; (202f8 <k_thread_state_str+0x6c>)
   202d6:	4770      	bx	lr
		return "aborting";
   202d8:	4808      	ldr	r0, [pc, #32]	; (202fc <k_thread_state_str+0x70>)
}
   202da:	4770      	bx	lr
   202dc:	00028633 	.word	0x00028633
   202e0:	00028642 	.word	0x00028642
   202e4:	0002854e 	.word	0x0002854e
   202e8:	00028613 	.word	0x00028613
   202ec:	0002861b 	.word	0x0002861b
   202f0:	00028624 	.word	0x00028624
   202f4:	00028629 	.word	0x00028629
   202f8:	0002745e 	.word	0x0002745e
   202fc:	00028639 	.word	0x00028639

00020300 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20304:	460e      	mov	r6, r1
   20306:	b085      	sub	sp, #20
	sys_dlist_init(&w->waitq);
   20308:	f100 0130 	add.w	r1, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   2030c:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   20310:	9912      	ldr	r1, [sp, #72]	; 0x48
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   20312:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   20314:	7301      	strb	r1, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   20316:	2104      	movs	r1, #4
{
   20318:	4604      	mov	r4, r0
   2031a:	4699      	mov	r9, r3
	thread_base->thread_state = (uint8_t)initial_state;
   2031c:	7341      	strb	r1, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2031e:	3207      	adds	r2, #7
	thread_base->prio = priority;
   20320:	9911      	ldr	r1, [sp, #68]	; 0x44
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20322:	f022 0a07 	bic.w	sl, r2, #7
	memset(stack_buf_start, 0xaa, stack_buf_size);
   20326:	4652      	mov	r2, sl
	node->prev = NULL;
   20328:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
   2032c:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   2032e:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
   20330:	21aa      	movs	r1, #170	; 0xaa
   20332:	4630      	mov	r0, r6
{
   20334:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   20338:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   2033a:	f002 fefb 	bl	23134 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2033e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	stack_ptr = (char *)stack + stack_obj_size;
   20340:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20344:	9302      	str	r3, [sp, #8]
   20346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20348:	4642      	mov	r2, r8
   2034a:	e9cd b300 	strd	fp, r3, [sp]
   2034e:	4631      	mov	r1, r6
   20350:	464b      	mov	r3, r9
   20352:	4620      	mov	r0, r4
	new_thread->stack_info.size = stack_buf_size;
   20354:	e9c4 6a28 	strd	r6, sl, [r4, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   20358:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2035c:	f7fd fa9a 	bl	1d894 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   20360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->fn_abort = NULL;
   20362:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	new_thread->entry.parameter2 = p2;
   20366:	6723      	str	r3, [r4, #112]	; 0x70
	new_thread->entry.parameter3 = p3;
   20368:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->entry.parameter1 = p1;
   2036a:	e9c4 9b1a 	strd	r9, fp, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   2036e:	6763      	str	r3, [r4, #116]	; 0x74
	__asm__ volatile(
   20370:	f04f 0320 	mov.w	r3, #32
   20374:	f3ef 8211 	mrs	r2, BASEPRI
   20378:	f383 8811 	msr	BASEPRI, r3
   2037c:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   20380:	4e0e      	ldr	r6, [pc, #56]	; (203bc <z_setup_new_thread+0xbc>)
   20382:	6b71      	ldr	r1, [r6, #52]	; 0x34
	_kernel.threads = new_thread;
   20384:	6374      	str	r4, [r6, #52]	; 0x34
	new_thread->next_thread = _kernel.threads;
   20386:	67a1      	str	r1, [r4, #120]	; 0x78
	__asm__ volatile(
   20388:	f382 8811 	msr	BASEPRI, r2
   2038c:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   20390:	b18f      	cbz	r7, 203b6 <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
   20392:	221f      	movs	r2, #31
   20394:	4639      	mov	r1, r7
   20396:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   2039a:	f002 fe36 	bl	2300a <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2039e:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
	if (!_current) {
   203a2:	68b3      	ldr	r3, [r6, #8]
   203a4:	b10b      	cbz	r3, 203aa <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
   203a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
   203aa:	4640      	mov	r0, r8
   203ac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   203b0:	b005      	add	sp, #20
   203b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   203b6:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
   203ba:	e7f2      	b.n	203a2 <z_setup_new_thread+0xa2>
   203bc:	20010bbc 	.word	0x20010bbc

000203c0 <z_impl_k_thread_create>:
{
   203c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   203c2:	2500      	movs	r5, #0
{
   203c4:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   203c6:	9505      	str	r5, [sp, #20]
   203c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   203ca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   203ce:	9504      	str	r5, [sp, #16]
   203d0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   203d2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   203d4:	9503      	str	r5, [sp, #12]
   203d6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   203d8:	9502      	str	r5, [sp, #8]
   203da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   203dc:	9501      	str	r5, [sp, #4]
   203de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   203e0:	9500      	str	r5, [sp, #0]
   203e2:	f7ff ff8d 	bl	20300 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   203e6:	1c7b      	adds	r3, r7, #1
   203e8:	bf08      	it	eq
   203ea:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   203ee:	d005      	beq.n	203fc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   203f0:	ea56 0307 	orrs.w	r3, r6, r7
   203f4:	d105      	bne.n	20402 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   203f6:	4620      	mov	r0, r4
   203f8:	f7ff fc16 	bl	1fc28 <z_sched_start>
}
   203fc:	4620      	mov	r0, r4
   203fe:	b007      	add	sp, #28
   20400:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   20402:	4632      	mov	r2, r6
   20404:	463b      	mov	r3, r7
   20406:	4903      	ldr	r1, [pc, #12]	; (20414 <z_impl_k_thread_create+0x54>)
   20408:	f104 0018 	add.w	r0, r4, #24
   2040c:	f000 f8f0 	bl	205f0 <z_add_timeout>
   20410:	e7f4      	b.n	203fc <z_impl_k_thread_create+0x3c>
   20412:	bf00      	nop
   20414:	00023715 	.word	0x00023715

00020418 <z_init_static_threads>:
{
   20418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2041c:	4e2a      	ldr	r6, [pc, #168]	; (204c8 <z_init_static_threads+0xb0>)
   2041e:	4d2b      	ldr	r5, [pc, #172]	; (204cc <z_init_static_threads+0xb4>)
   20420:	46b0      	mov	r8, r6
{
   20422:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   20424:	42b5      	cmp	r5, r6
   20426:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2042a:	d310      	bcc.n	2044e <z_init_static_threads+0x36>
	k_sched_lock();
   2042c:	f7ff fb56 	bl	1fadc <k_sched_lock>
   20430:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   20434:	f240 36e7 	movw	r6, #999	; 0x3e7
   20438:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   2043a:	4c24      	ldr	r4, [pc, #144]	; (204cc <z_init_static_threads+0xb4>)
   2043c:	f8df a090 	ldr.w	sl, [pc, #144]	; 204d0 <z_init_static_threads+0xb8>
   20440:	4544      	cmp	r4, r8
   20442:	d321      	bcc.n	20488 <z_init_static_threads+0x70>
}
   20444:	b006      	add	sp, #24
   20446:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   2044a:	f7ff bb99 	b.w	1fb80 <k_sched_unlock>
		z_setup_new_thread(
   2044e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20452:	9305      	str	r3, [sp, #20]
   20454:	f854 3c10 	ldr.w	r3, [r4, #-16]
   20458:	9304      	str	r3, [sp, #16]
   2045a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2045e:	9303      	str	r3, [sp, #12]
   20460:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20464:	9302      	str	r3, [sp, #8]
   20466:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2046a:	9301      	str	r3, [sp, #4]
   2046c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20470:	9300      	str	r3, [sp, #0]
   20472:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   20476:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2047a:	f7ff ff41 	bl	20300 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2047e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20482:	65dd      	str	r5, [r3, #92]	; 0x5c
   20484:	4625      	mov	r5, r4
   20486:	e7cd      	b.n	20424 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20488:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2048a:	1c5a      	adds	r2, r3, #1
   2048c:	d00d      	beq.n	204aa <z_init_static_threads+0x92>
   2048e:	4630      	mov	r0, r6
   20490:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   20492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20496:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2049a:	42b9      	cmp	r1, r7
   2049c:	bf08      	it	eq
   2049e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   204a0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   204a2:	d104      	bne.n	204ae <z_init_static_threads+0x96>
	z_sched_start(thread);
   204a4:	4628      	mov	r0, r5
   204a6:	f7ff fbbf 	bl	1fc28 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   204aa:	3430      	adds	r4, #48	; 0x30
   204ac:	e7c8      	b.n	20440 <z_init_static_threads+0x28>
   204ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   204b2:	2300      	movs	r3, #0
   204b4:	f7eb ff14 	bl	c2e0 <__aeabi_uldivmod>
   204b8:	4602      	mov	r2, r0
   204ba:	460b      	mov	r3, r1
   204bc:	f105 0018 	add.w	r0, r5, #24
   204c0:	4651      	mov	r1, sl
   204c2:	f000 f895 	bl	205f0 <z_add_timeout>
   204c6:	e7f0      	b.n	204aa <z_init_static_threads+0x92>
   204c8:	20010164 	.word	0x20010164
   204cc:	20010164 	.word	0x20010164
   204d0:	00023715 	.word	0x00023715

000204d4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   204d4:	b508      	push	{r3, lr}
	__asm__ volatile(
   204d6:	f04f 0320 	mov.w	r3, #32
   204da:	f3ef 8411 	mrs	r4, BASEPRI
   204de:	f383 8811 	msr	BASEPRI, r3
   204e2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   204e6:	4b04      	ldr	r3, [pc, #16]	; (204f8 <z_self_abort+0x24>)
   204e8:	6898      	ldr	r0, [r3, #8]
   204ea:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   204ec:	f7ff fc36 	bl	1fd5c <z_impl_k_thread_suspend>
   204f0:	4620      	mov	r0, r4
   204f2:	f7fd f97f 	bl	1d7f4 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   204f6:	bf00      	nop
   204f8:	20010bbc 	.word	0x20010bbc

000204fc <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   204fc:	4800      	ldr	r0, [pc, #0]	; (20500 <sys_kernel_version_get+0x4>)
   204fe:	4770      	bx	lr
   20500:	02046300 	.word	0x02046300

00020504 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   20504:	4b03      	ldr	r3, [pc, #12]	; (20514 <elapsed+0x10>)
   20506:	681b      	ldr	r3, [r3, #0]
   20508:	b90b      	cbnz	r3, 2050e <elapsed+0xa>
   2050a:	f7fd b93f 	b.w	1d78c <z_clock_elapsed>
}
   2050e:	2000      	movs	r0, #0
   20510:	4770      	bx	lr
   20512:	bf00      	nop
   20514:	20010c00 	.word	0x20010c00

00020518 <remove_timeout>:
{
   20518:	b530      	push	{r4, r5, lr}
   2051a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2051c:	b168      	cbz	r0, 2053a <remove_timeout+0x22>
   2051e:	4a0a      	ldr	r2, [pc, #40]	; (20548 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   20520:	6852      	ldr	r2, [r2, #4]
   20522:	4290      	cmp	r0, r2
   20524:	d009      	beq.n	2053a <remove_timeout+0x22>
	if (next(t) != NULL) {
   20526:	b143      	cbz	r3, 2053a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20528:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2052c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   20530:	1912      	adds	r2, r2, r4
   20532:	eb45 0101 	adc.w	r1, r5, r1
   20536:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2053a:	6842      	ldr	r2, [r0, #4]
   2053c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2053e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20540:	2300      	movs	r3, #0
	node->prev = NULL;
   20542:	e9c0 3300 	strd	r3, r3, [r0]
}
   20546:	bd30      	pop	{r4, r5, pc}
   20548:	200100d4 	.word	0x200100d4

0002054c <next_timeout>:

static int32_t next_timeout(void)
{
   2054c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2054e:	4b13      	ldr	r3, [pc, #76]	; (2059c <next_timeout+0x50>)
   20550:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20552:	429c      	cmp	r4, r3
   20554:	bf08      	it	eq
   20556:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20558:	f7ff ffd4 	bl	20504 <elapsed>
   2055c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2055e:	b1bc      	cbz	r4, 20590 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20560:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   20564:	1b40      	subs	r0, r0, r5
   20566:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2056a:	2801      	cmp	r0, #1
   2056c:	f171 0300 	sbcs.w	r3, r1, #0
   20570:	db11      	blt.n	20596 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   20572:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20576:	2300      	movs	r3, #0
   20578:	4282      	cmp	r2, r0
   2057a:	eb73 0401 	sbcs.w	r4, r3, r1
   2057e:	da00      	bge.n	20582 <next_timeout+0x36>
   20580:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20582:	4b07      	ldr	r3, [pc, #28]	; (205a0 <next_timeout+0x54>)
   20584:	695b      	ldr	r3, [r3, #20]
   20586:	b113      	cbz	r3, 2058e <next_timeout+0x42>
   20588:	4298      	cmp	r0, r3
   2058a:	bfa8      	it	ge
   2058c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2058e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   20590:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20594:	e7f5      	b.n	20582 <next_timeout+0x36>
   20596:	2000      	movs	r0, #0
   20598:	e7f3      	b.n	20582 <next_timeout+0x36>
   2059a:	bf00      	nop
   2059c:	200100d4 	.word	0x200100d4
   205a0:	20010bbc 	.word	0x20010bbc

000205a4 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   205a4:	6803      	ldr	r3, [r0, #0]
{
   205a6:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   205a8:	b1eb      	cbz	r3, 205e6 <timeout_rem+0x42>
	return list->head == list;
   205aa:	4a10      	ldr	r2, [pc, #64]	; (205ec <timeout_rem+0x48>)
   205ac:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205ae:	4293      	cmp	r3, r2
   205b0:	d016      	beq.n	205e0 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   205b2:	2400      	movs	r4, #0
   205b4:	2500      	movs	r5, #0
   205b6:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   205b8:	b93b      	cbnz	r3, 205ca <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   205ba:	f7ff ffa3 	bl	20504 <elapsed>
   205be:	1a24      	subs	r4, r4, r0
   205c0:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   205c4:	4620      	mov	r0, r4
   205c6:	4629      	mov	r1, r5
   205c8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   205ca:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   205ce:	18a4      	adds	r4, r4, r2
   205d0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   205d4:	4283      	cmp	r3, r0
   205d6:	d0f0      	beq.n	205ba <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   205d8:	428b      	cmp	r3, r1
   205da:	d0ee      	beq.n	205ba <timeout_rem+0x16>
   205dc:	681b      	ldr	r3, [r3, #0]
   205de:	e7eb      	b.n	205b8 <timeout_rem+0x14>
   205e0:	2400      	movs	r4, #0
   205e2:	2500      	movs	r5, #0
   205e4:	e7e9      	b.n	205ba <timeout_rem+0x16>
		return 0;
   205e6:	2400      	movs	r4, #0
   205e8:	2500      	movs	r5, #0
   205ea:	e7eb      	b.n	205c4 <timeout_rem+0x20>
   205ec:	200100d4 	.word	0x200100d4

000205f0 <z_add_timeout>:
{
   205f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205f4:	9101      	str	r1, [sp, #4]
   205f6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   205f8:	1c4b      	adds	r3, r1, #1
   205fa:	bf08      	it	eq
   205fc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   20600:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20602:	d06b      	beq.n	206dc <z_add_timeout+0xec>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20604:	f06f 0301 	mvn.w	r3, #1
   20608:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   2060c:	1c54      	adds	r4, r2, #1
   2060e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20612:	ebb3 0804 	subs.w	r8, r3, r4
   20616:	eb6b 0905 	sbc.w	r9, fp, r5
   2061a:	f1b8 0f00 	cmp.w	r8, #0
   2061e:	f179 0300 	sbcs.w	r3, r9, #0
   20622:	db0f      	blt.n	20644 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20624:	f7ff ff6e 	bl	20504 <elapsed>
   20628:	f06f 0301 	mvn.w	r3, #1
   2062c:	4a32      	ldr	r2, [pc, #200]	; (206f8 <z_add_timeout+0x108>)
   2062e:	e9d2 1c00 	ldrd	r1, ip, [r2]
   20632:	1a5b      	subs	r3, r3, r1
   20634:	eb6b 020c 	sbc.w	r2, fp, ip
   20638:	1b1e      	subs	r6, r3, r4
   2063a:	eb62 0705 	sbc.w	r7, r2, r5
   2063e:	1a34      	subs	r4, r6, r0
   20640:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   20644:	9b01      	ldr	r3, [sp, #4]
   20646:	f8ca 3008 	str.w	r3, [sl, #8]
   2064a:	f04f 0320 	mov.w	r3, #32
   2064e:	f3ef 8611 	mrs	r6, BASEPRI
   20652:	f383 8811 	msr	BASEPRI, r3
   20656:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   2065a:	f7ff ff53 	bl	20504 <elapsed>
	ticks = MAX(1, ticks);
   2065e:	2c01      	cmp	r4, #1
   20660:	f175 0300 	sbcs.w	r3, r5, #0
   20664:	bfbc      	itt	lt
   20666:	2401      	movlt	r4, #1
   20668:	2500      	movlt	r5, #0
	return list->head == list;
   2066a:	4b24      	ldr	r3, [pc, #144]	; (206fc <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   2066c:	1824      	adds	r4, r4, r0
   2066e:	681a      	ldr	r2, [r3, #0]
   20670:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20674:	429a      	cmp	r2, r3
   20676:	e9ca 4504 	strd	r4, r5, [sl, #16]
   2067a:	d001      	beq.n	20680 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2067c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   2067e:	b952      	cbnz	r2, 20696 <z_add_timeout+0xa6>
	node->prev = list->tail;
   20680:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20682:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   20686:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   2068a:	685a      	ldr	r2, [r3, #4]
   2068c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20690:	f8c3 a004 	str.w	sl, [r3, #4]
}
   20694:	e014      	b.n	206c0 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   20696:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   2069a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   2069e:	4544      	cmp	r4, r8
   206a0:	eb75 0109 	sbcs.w	r1, r5, r9
   206a4:	da1d      	bge.n	206e2 <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   206a6:	ebb8 0004 	subs.w	r0, r8, r4
   206aa:	eb69 0105 	sbc.w	r1, r9, r5
   206ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   206b2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   206b4:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   206b8:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   206bc:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   206c0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206c2:	429a      	cmp	r2, r3
   206c4:	d006      	beq.n	206d4 <z_add_timeout+0xe4>
		if (to == first()) {
   206c6:	4592      	cmp	sl, r2
   206c8:	d104      	bne.n	206d4 <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   206ca:	f7ff ff3f 	bl	2054c <next_timeout>
   206ce:	2100      	movs	r1, #0
   206d0:	f7fc fff4 	bl	1d6bc <z_clock_set_timeout>
	__asm__ volatile(
   206d4:	f386 8811 	msr	BASEPRI, r6
   206d8:	f3bf 8f6f 	isb	sy
}
   206dc:	b003      	add	sp, #12
   206de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   206e2:	ebb4 0008 	subs.w	r0, r4, r8
   206e6:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   206ea:	42ba      	cmp	r2, r7
   206ec:	e9ca 0104 	strd	r0, r1, [sl, #16]
   206f0:	d0c6      	beq.n	20680 <z_add_timeout+0x90>
   206f2:	6812      	ldr	r2, [r2, #0]
   206f4:	e7c3      	b.n	2067e <z_add_timeout+0x8e>
   206f6:	bf00      	nop
   206f8:	20010770 	.word	0x20010770
   206fc:	200100d4 	.word	0x200100d4

00020700 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   20700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20704:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20706:	f7ff fae7 	bl	1fcd8 <z_time_slice>
	__asm__ volatile(
   2070a:	f04f 0320 	mov.w	r3, #32
   2070e:	f3ef 8411 	mrs	r4, BASEPRI
   20712:	f383 8811 	msr	BASEPRI, r3
   20716:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2071a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 207cc <z_clock_announce+0xcc>
   2071e:	4d2a      	ldr	r5, [pc, #168]	; (207c8 <z_clock_announce+0xc8>)
   20720:	4651      	mov	r1, sl
	return list->head == list;
   20722:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 207d0 <z_clock_announce+0xd0>
   20726:	602e      	str	r6, [r5, #0]
   20728:	f8d5 c000 	ldr.w	ip, [r5]
   2072c:	f8db 0000 	ldr.w	r0, [fp]
   20730:	4662      	mov	r2, ip
   20732:	e9da 8900 	ldrd	r8, r9, [sl]
   20736:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20738:	4558      	cmp	r0, fp
   2073a:	e9cd 2300 	strd	r2, r3, [sp]
   2073e:	d00d      	beq.n	2075c <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20740:	b160      	cbz	r0, 2075c <z_clock_announce+0x5c>
   20742:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   20746:	45b4      	cmp	ip, r6
   20748:	41bb      	sbcs	r3, r7
   2074a:	da1d      	bge.n	20788 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2074c:	9b00      	ldr	r3, [sp, #0]
   2074e:	ebb6 0c03 	subs.w	ip, r6, r3
   20752:	9b01      	ldr	r3, [sp, #4]
   20754:	eb67 0603 	sbc.w	r6, r7, r3
   20758:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2075c:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   2075e:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   20760:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   20762:	eb13 0208 	adds.w	r2, r3, r8
   20766:	9b01      	ldr	r3, [sp, #4]
   20768:	eb43 0309 	adc.w	r3, r3, r9
   2076c:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   20770:	f7ff feec 	bl	2054c <next_timeout>
   20774:	4631      	mov	r1, r6
   20776:	f7fc ffa1 	bl	1d6bc <z_clock_set_timeout>
	__asm__ volatile(
   2077a:	f384 8811 	msr	BASEPRI, r4
   2077e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20782:	b003      	add	sp, #12
   20784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   20788:	2200      	movs	r2, #0
   2078a:	2300      	movs	r3, #0
		curr_tick += dt;
   2078c:	eb18 0806 	adds.w	r8, r8, r6
   20790:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   20794:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   20798:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   2079c:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   207a0:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   207a2:	f7ff feb9 	bl	20518 <remove_timeout>
   207a6:	f384 8811 	msr	BASEPRI, r4
   207aa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   207ae:	6883      	ldr	r3, [r0, #8]
   207b0:	4798      	blx	r3
	__asm__ volatile(
   207b2:	f04f 0320 	mov.w	r3, #32
   207b6:	f3ef 8411 	mrs	r4, BASEPRI
   207ba:	f383 8811 	msr	BASEPRI, r3
   207be:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   207c2:	4902      	ldr	r1, [pc, #8]	; (207cc <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   207c4:	e7b0      	b.n	20728 <z_clock_announce+0x28>
   207c6:	bf00      	nop
   207c8:	20010c00 	.word	0x20010c00
   207cc:	20010770 	.word	0x20010770
   207d0:	200100d4 	.word	0x200100d4

000207d4 <z_tick_get>:

int64_t z_tick_get(void)
{
   207d4:	b510      	push	{r4, lr}
   207d6:	f04f 0320 	mov.w	r3, #32
   207da:	f3ef 8411 	mrs	r4, BASEPRI
   207de:	f383 8811 	msr	BASEPRI, r3
   207e2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   207e6:	f7fc ffd1 	bl	1d78c <z_clock_elapsed>
   207ea:	4b06      	ldr	r3, [pc, #24]	; (20804 <z_tick_get+0x30>)
   207ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   207f0:	1812      	adds	r2, r2, r0
   207f2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   207f6:	f384 8811 	msr	BASEPRI, r4
   207fa:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   207fe:	4610      	mov	r0, r2
   20800:	4619      	mov	r1, r3
   20802:	bd10      	pop	{r4, pc}
   20804:	20010770 	.word	0x20010770

00020808 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2080a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2080e:	1c56      	adds	r6, r2, #1
   20810:	f143 0700 	adc.w	r7, r3, #0
   20814:	2f00      	cmp	r7, #0
   20816:	bf08      	it	eq
   20818:	2e02      	cmpeq	r6, #2
{
   2081a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   2081c:	d302      	bcc.n	20824 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2081e:	490c      	ldr	r1, [pc, #48]	; (20850 <z_timer_expiration_handler+0x48>)
   20820:	f7ff fee6 	bl	205f0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20824:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20826:	3301      	adds	r3, #1
   20828:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2082a:	6a23      	ldr	r3, [r4, #32]
   2082c:	b10b      	cbz	r3, 20832 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2082e:	4620      	mov	r0, r4
   20830:	4798      	blx	r3
	return list->head == list;
   20832:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20836:	42a5      	cmp	r5, r4
   20838:	d009      	beq.n	2084e <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2083a:	b145      	cbz	r5, 2084e <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2083c:	4628      	mov	r0, r5
   2083e:	f002 ff07 	bl	23650 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   20842:	4628      	mov	r0, r5
   20844:	f002 ff56 	bl	236f4 <z_ready_thread>
   20848:	2300      	movs	r3, #0
   2084a:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4

	arch_thread_return_value_set(thread, 0);
}
   2084e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20850:	00020809 	.word	0x00020809

00020854 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20854:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   20858:	4619      	mov	r1, r3
   2085a:	4606      	mov	r6, r0
   2085c:	4610      	mov	r0, r2
   2085e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20862:	1c4c      	adds	r4, r1, #1
   20864:	bf08      	it	eq
   20866:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2086a:	4680      	mov	r8, r0
   2086c:	4689      	mov	r9, r1
   2086e:	d047      	beq.n	20900 <z_impl_k_timer_start+0xac>
   20870:	4614      	mov	r4, r2
   20872:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20874:	ea54 0305 	orrs.w	r3, r4, r5
   20878:	d016      	beq.n	208a8 <z_impl_k_timer_start+0x54>
   2087a:	f06f 0301 	mvn.w	r3, #1
   2087e:	ebb3 0a02 	subs.w	sl, r3, r2
   20882:	f04f 33ff 	mov.w	r3, #4294967295
   20886:	eb63 0b05 	sbc.w	fp, r3, r5
   2088a:	f1ba 0f00 	cmp.w	sl, #0
   2088e:	f17b 0300 	sbcs.w	r3, fp, #0
   20892:	da09      	bge.n	208a8 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   20894:	f112 34ff 	adds.w	r4, r2, #4294967295
   20898:	f145 35ff 	adc.w	r5, r5, #4294967295
   2089c:	2c01      	cmp	r4, #1
   2089e:	f175 0300 	sbcs.w	r3, r5, #0
   208a2:	bfbc      	itt	lt
   208a4:	2401      	movlt	r4, #1
   208a6:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   208a8:	f06f 0301 	mvn.w	r3, #1
   208ac:	1a1b      	subs	r3, r3, r0
   208ae:	9300      	str	r3, [sp, #0]
   208b0:	f04f 33ff 	mov.w	r3, #4294967295
   208b4:	eb63 0301 	sbc.w	r3, r3, r1
   208b8:	9301      	str	r3, [sp, #4]
   208ba:	e9dd 2300 	ldrd	r2, r3, [sp]
   208be:	2a00      	cmp	r2, #0
   208c0:	f173 0300 	sbcs.w	r3, r3, #0
   208c4:	da0c      	bge.n	208e0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   208c6:	f110 38ff 	adds.w	r8, r0, #4294967295
   208ca:	f141 39ff 	adc.w	r9, r1, #4294967295
   208ce:	f1b8 0f00 	cmp.w	r8, #0
   208d2:	f179 0300 	sbcs.w	r3, r9, #0
   208d6:	bfbc      	itt	lt
   208d8:	f04f 0800 	movlt.w	r8, #0
   208dc:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   208e0:	4630      	mov	r0, r6
   208e2:	f002 ffa1 	bl	23828 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   208e6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   208e8:	4642      	mov	r2, r8
	timer->status = 0U;
   208ea:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   208ec:	4630      	mov	r0, r6
   208ee:	464b      	mov	r3, r9
   208f0:	4905      	ldr	r1, [pc, #20]	; (20908 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   208f2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   208f6:	b002      	add	sp, #8
   208f8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   208fc:	f7ff be78 	b.w	205f0 <z_add_timeout>
}
   20900:	b002      	add	sp, #8
   20902:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   20906:	bf00      	nop
   20908:	00020809 	.word	0x00020809

0002090c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2090c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   20910:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20912:	4b2a      	ldr	r3, [pc, #168]	; (209bc <z_impl_k_poll+0xb0>)
{
   20914:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   20916:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   20918:	2301      	movs	r3, #1
   2091a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   2091e:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   20922:	ea52 0307 	orrs.w	r3, r2, r7
   20926:	bf0c      	ite	eq
   20928:	2301      	moveq	r3, #1
   2092a:	2300      	movne	r3, #0
   2092c:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   20930:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20932:	f003 f8f6 	bl	23b22 <register_events>
   20936:	4681      	mov	r9, r0
	__asm__ volatile(
   20938:	f04f 0320 	mov.w	r3, #32
   2093c:	f3ef 8a11 	mrs	sl, BASEPRI
   20940:	f383 8811 	msr	BASEPRI, r3
   20944:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20948:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   2094c:	b964      	cbnz	r4, 20968 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2094e:	4601      	mov	r1, r0
   20950:	4652      	mov	r2, sl
   20952:	4640      	mov	r0, r8
   20954:	f003 f815 	bl	23982 <clear_event_registrations>
	__asm__ volatile(
   20958:	f38a 8811 	msr	BASEPRI, sl
   2095c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20960:	4620      	mov	r0, r4
   20962:	b004      	add	sp, #16
   20964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20968:	2300      	movs	r3, #0
   2096a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2096e:	ea56 0307 	orrs.w	r3, r6, r7
   20972:	d106      	bne.n	20982 <z_impl_k_poll+0x76>
   20974:	f38a 8811 	msr	BASEPRI, sl
   20978:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2097c:	f06f 040a 	mvn.w	r4, #10
   20980:	e7ee      	b.n	20960 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20982:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20984:	4651      	mov	r1, sl
   20986:	e9cd 6700 	strd	r6, r7, [sp]
   2098a:	480d      	ldr	r0, [pc, #52]	; (209c0 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2098c:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20990:	f7ff fade 	bl	1ff50 <z_pend_curr>
   20994:	4604      	mov	r4, r0
	__asm__ volatile(
   20996:	f04f 0320 	mov.w	r3, #32
   2099a:	f3ef 8511 	mrs	r5, BASEPRI
   2099e:	f383 8811 	msr	BASEPRI, r3
   209a2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   209a6:	462a      	mov	r2, r5
   209a8:	4649      	mov	r1, r9
   209aa:	4640      	mov	r0, r8
   209ac:	f002 ffe9 	bl	23982 <clear_event_registrations>
	__asm__ volatile(
   209b0:	f385 8811 	msr	BASEPRI, r5
   209b4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   209b8:	e7d2      	b.n	20960 <z_impl_k_poll+0x54>
   209ba:	bf00      	nop
   209bc:	20010bbc 	.word	0x20010bbc
   209c0:	2001ecc0 	.word	0x2001ecc0

000209c4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   209c4:	b538      	push	{r3, r4, r5, lr}
   209c6:	4603      	mov	r3, r0
	__asm__ volatile(
   209c8:	f04f 0220 	mov.w	r2, #32
   209cc:	f3ef 8511 	mrs	r5, BASEPRI
   209d0:	f382 8811 	msr	BASEPRI, r2
   209d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   209d8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   209da:	2101      	movs	r1, #1
   209dc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   209de:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   209e0:	4283      	cmp	r3, r0
   209e2:	d106      	bne.n	209f2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   209e4:	f385 8811 	msr	BASEPRI, r5
   209e8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   209ec:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   209ee:	4620      	mov	r0, r4
   209f0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   209f2:	e9d0 3200 	ldrd	r3, r2, [r0]
   209f6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   209f8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   209fa:	2300      	movs	r3, #0
	node->prev = NULL;
   209fc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20a00:	f002 fffe 	bl	23a00 <signal_poll_event>
	z_reschedule(&lock, key);
   20a04:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20a06:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20a08:	4801      	ldr	r0, [pc, #4]	; (20a10 <z_impl_k_poll_signal_raise+0x4c>)
   20a0a:	f7ff f855 	bl	1fab8 <z_reschedule>
	return rc;
   20a0e:	e7ee      	b.n	209ee <z_impl_k_poll_signal_raise+0x2a>
   20a10:	2001ecc0 	.word	0x2001ecc0

00020a14 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   20a14:	b510      	push	{r4, lr}
   20a16:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   20a18:	f002 feec 	bl	237f4 <k_is_in_isr>
   20a1c:	b950      	cbnz	r0, 20a34 <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   20a1e:	4b07      	ldr	r3, [pc, #28]	; (20a3c <z_thread_malloc+0x28>)
   20a20:	689b      	ldr	r3, [r3, #8]
   20a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	}

	if (pool) {
   20a26:	b13b      	cbz	r3, 20a38 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   20a28:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   20a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   20a2e:	4618      	mov	r0, r3
   20a30:	f003 b8ff 	b.w	23c32 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   20a34:	4b02      	ldr	r3, [pc, #8]	; (20a40 <z_thread_malloc+0x2c>)
   20a36:	e7f7      	b.n	20a28 <z_thread_malloc+0x14>
}
   20a38:	bd10      	pop	{r4, pc}
   20a3a:	bf00      	nop
   20a3c:	20010bbc 	.word	0x20010bbc
   20a40:	200100dc 	.word	0x200100dc

00020a44 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   20a44:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20a46:	4c06      	ldr	r4, [pc, #24]	; (20a60 <statics_init+0x1c>)
   20a48:	4d06      	ldr	r5, [pc, #24]	; (20a64 <statics_init+0x20>)
   20a4a:	42ac      	cmp	r4, r5
   20a4c:	d301      	bcc.n	20a52 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   20a4e:	2000      	movs	r0, #0
   20a50:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20a52:	4620      	mov	r0, r4
   20a54:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   20a58:	f003 f903 	bl	23c62 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   20a5c:	3414      	adds	r4, #20
   20a5e:	e7f4      	b.n	20a4a <statics_init+0x6>
   20a60:	200101a0 	.word	0x200101a0
   20a64:	200101b4 	.word	0x200101b4

00020a68 <main>:
SHELL_CMD_ARG_REGISTER(benchmark, NULL, "Benchmark for key generation and signature proccess", cmd_benchmark, 1, 0);

void main(void)
{

}
   20a68:	4770      	bx	lr

00020a6a <string_cmp>:
	return strcmp((const char *)p_a, (const char *)p_b);
   20a6a:	f002 baf6 	b.w	2305a <strcmp>

00020a6e <swapfunc>:
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */

static inline void
swapfunc(char *a, char *b, size_t es)
{
   20a6e:	b510      	push	{r4, lr}
   20a70:	4402      	add	r2, r0
	char t;

	do {
		t = *a;
		*a++ = *b;
   20a72:	780c      	ldrb	r4, [r1, #0]
		t = *a;
   20a74:	7803      	ldrb	r3, [r0, #0]
		*a++ = *b;
   20a76:	f800 4b01 	strb.w	r4, [r0], #1
		*b++ = t;
	} while (--es > 0);
   20a7a:	4290      	cmp	r0, r2
		*b++ = t;
   20a7c:	f801 3b01 	strb.w	r3, [r1], #1
	} while (--es > 0);
   20a80:	d1f7      	bne.n	20a72 <swapfunc+0x4>
}
   20a82:	bd10      	pop	{r4, pc}

00020a84 <med3.isra.0>:
#else
#define	CMP(t, x, y) (cmp((x), (y)))
#endif

static inline char *
med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
   20a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20a86:	460f      	mov	r7, r1
   20a88:	4614      	mov	r4, r2
   20a8a:	4606      	mov	r6, r0
   20a8c:	461d      	mov	r5, r3
{
	return CMP(thunk, a, b) < 0 ?
   20a8e:	4798      	blx	r3
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   20a90:	2800      	cmp	r0, #0
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   20a92:	4621      	mov	r1, r4
   20a94:	4638      	mov	r0, r7
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   20a96:	da0c      	bge.n	20ab2 <med3.isra.0+0x2e>
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   20a98:	47a8      	blx	r5
   20a9a:	2800      	cmp	r0, #0
   20a9c:	da02      	bge.n	20aa4 <med3.isra.0+0x20>
   20a9e:	463c      	mov	r4, r7
}
   20aa0:	4620      	mov	r0, r4
   20aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   20aa4:	4621      	mov	r1, r4
   20aa6:	4630      	mov	r0, r6
   20aa8:	47a8      	blx	r5
   20aaa:	2800      	cmp	r0, #0
   20aac:	dbf8      	blt.n	20aa0 <med3.isra.0+0x1c>
   20aae:	4634      	mov	r4, r6
   20ab0:	e7f6      	b.n	20aa0 <med3.isra.0+0x1c>
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   20ab2:	47a8      	blx	r5
   20ab4:	2800      	cmp	r0, #0
   20ab6:	dcf2      	bgt.n	20a9e <med3.isra.0+0x1a>
   20ab8:	4621      	mov	r1, r4
   20aba:	4630      	mov	r0, r6
   20abc:	47a8      	blx	r5
   20abe:	2800      	cmp	r0, #0
   20ac0:	daee      	bge.n	20aa0 <med3.isra.0+0x1c>
   20ac2:	e7f4      	b.n	20aae <med3.isra.0+0x2a>

00020ac4 <qsort>:
void qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
#else
#define	thunk NULL
void qsort(void *a, size_t n, size_t es, cmp_t *cmp)
#endif
{
   20ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ac8:	4606      	mov	r6, r0
   20aca:	468b      	mov	fp, r1
   20acc:	4614      	mov	r4, r2
   20ace:	4698      	mov	r8, r3
   20ad0:	b085      	sub	sp, #20
	int cmp_result;
	int swap_cnt;

loop:
	swap_cnt = 0;
	if (n < 7) {
   20ad2:	1933      	adds	r3, r6, r4
   20ad4:	f1bb 0f06 	cmp.w	fp, #6
   20ad8:	9300      	str	r3, [sp, #0]
   20ada:	d81a      	bhi.n	20b12 <qsort+0x4e>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   20adc:	461f      	mov	r7, r3
   20ade:	fb04 6b0b 	mla	fp, r4, fp, r6
   20ae2:	45bb      	cmp	fp, r7
   20ae4:	d802      	bhi.n	20aec <qsort+0x28>
			/* qsort(a, d1 / es, es, cmp); */
			n = d1 / es;
			goto loop;
		}
	}
}
   20ae6:	b005      	add	sp, #20
   20ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20aec:	46b9      	mov	r9, r7
   20aee:	e00c      	b.n	20b0a <qsort+0x46>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   20af0:	eba9 0a04 	sub.w	sl, r9, r4
   20af4:	4649      	mov	r1, r9
   20af6:	4650      	mov	r0, sl
   20af8:	47c0      	blx	r8
   20afa:	2800      	cmp	r0, #0
   20afc:	dd07      	ble.n	20b0e <qsort+0x4a>
				swapfunc(pl, pl - es, es);
   20afe:	4648      	mov	r0, r9
   20b00:	4622      	mov	r2, r4
   20b02:	4651      	mov	r1, sl
   20b04:	f7ff ffb3 	bl	20a6e <swapfunc>
			     pl -= es) {
   20b08:	46d1      	mov	r9, sl
			for (pl = pm;
   20b0a:	454e      	cmp	r6, r9
   20b0c:	d3f0      	bcc.n	20af0 <qsort+0x2c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   20b0e:	4427      	add	r7, r4
   20b10:	e7e7      	b.n	20ae2 <qsort+0x1e>
	pm = (char *)a + (n / 2) * es;
   20b12:	ea4f 095b 	mov.w	r9, fp, lsr #1
   20b16:	f10b 35ff 	add.w	r5, fp, #4294967295
	if (n > 7) {
   20b1a:	f1bb 0f07 	cmp.w	fp, #7
	pm = (char *)a + (n / 2) * es;
   20b1e:	fb04 6909 	mla	r9, r4, r9, r6
	if (n > 7) {
   20b22:	fb04 6505 	mla	r5, r4, r5, r6
   20b26:	d027      	beq.n	20b78 <qsort+0xb4>
		if (n > 40) {
   20b28:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   20b2c:	d945      	bls.n	20bba <qsort+0xf6>
			size_t d = (n / 8) * es;
   20b2e:	ea4f 0adb 	mov.w	sl, fp, lsr #3
   20b32:	fb04 fa0a 	mul.w	sl, r4, sl
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   20b36:	4643      	mov	r3, r8
   20b38:	eb06 024a 	add.w	r2, r6, sl, lsl #1
   20b3c:	eb06 010a 	add.w	r1, r6, sl
   20b40:	4630      	mov	r0, r6
   20b42:	f7ff ff9f 	bl	20a84 <med3.isra.0>
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   20b46:	4649      	mov	r1, r9
   20b48:	eb09 020a 	add.w	r2, r9, sl
   20b4c:	4643      	mov	r3, r8
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   20b4e:	4607      	mov	r7, r0
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   20b50:	eba9 000a 	sub.w	r0, r9, sl
   20b54:	f7ff ff96 	bl	20a84 <med3.isra.0>
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   20b58:	462a      	mov	r2, r5
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   20b5a:	4681      	mov	r9, r0
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   20b5c:	4643      	mov	r3, r8
   20b5e:	eba5 010a 	sub.w	r1, r5, sl
   20b62:	eba5 004a 	sub.w	r0, r5, sl, lsl #1
   20b66:	f7ff ff8d 	bl	20a84 <med3.isra.0>
   20b6a:	4602      	mov	r2, r0
		pm = med3(pl, pm, pn, cmp, thunk);
   20b6c:	4649      	mov	r1, r9
   20b6e:	4643      	mov	r3, r8
   20b70:	4638      	mov	r0, r7
   20b72:	f7ff ff87 	bl	20a84 <med3.isra.0>
   20b76:	4681      	mov	r9, r0
	swapfunc(a, pm, es);
   20b78:	4622      	mov	r2, r4
   20b7a:	4649      	mov	r1, r9
	pa = pb = (char *)a + es;
   20b7c:	1937      	adds	r7, r6, r4
	swapfunc(a, pm, es);
   20b7e:	4630      	mov	r0, r6
   20b80:	f7ff ff75 	bl	20a6e <swapfunc>
	pc = pd = (char *)a + (n - 1) * es;
   20b84:	46b9      	mov	r9, r7
	swap_cnt = 0;
   20b86:	2200      	movs	r2, #0
	pa = pb = (char *)a + es;
   20b88:	e9cd 7500 	strd	r7, r5, [sp]
   20b8c:	4263      	negs	r3, r4
   20b8e:	9302      	str	r3, [sp, #8]
		while (pb <= pc && (cmp_result = CMP(thunk, pb, a)) <= 0) {
   20b90:	45a9      	cmp	r9, r5
   20b92:	d823      	bhi.n	20bdc <qsort+0x118>
   20b94:	4631      	mov	r1, r6
   20b96:	4648      	mov	r0, r9
   20b98:	9203      	str	r2, [sp, #12]
   20b9a:	47c0      	blx	r8
   20b9c:	2800      	cmp	r0, #0
   20b9e:	9a03      	ldr	r2, [sp, #12]
   20ba0:	dc24      	bgt.n	20bec <qsort+0x128>
			if (cmp_result == 0) {
   20ba2:	d108      	bne.n	20bb6 <qsort+0xf2>
				swapfunc(pa, pb, es);
   20ba4:	4622      	mov	r2, r4
   20ba6:	4649      	mov	r1, r9
   20ba8:	9800      	ldr	r0, [sp, #0]
   20baa:	f7ff ff60 	bl	20a6e <swapfunc>
				pa += es;
   20bae:	9b00      	ldr	r3, [sp, #0]
   20bb0:	4423      	add	r3, r4
   20bb2:	9300      	str	r3, [sp, #0]
				swap_cnt = 1;
   20bb4:	2201      	movs	r2, #1
			pb += es;
   20bb6:	44a1      	add	r9, r4
   20bb8:	e7ea      	b.n	20b90 <qsort+0xcc>
		pn = (char *)a + (n - 1) * es;
   20bba:	462a      	mov	r2, r5
   20bbc:	4637      	mov	r7, r6
   20bbe:	e7d5      	b.n	20b6c <qsort+0xa8>
			if (cmp_result == 0) {
   20bc0:	d109      	bne.n	20bd6 <qsort+0x112>
				swapfunc(pc, pd, es);
   20bc2:	4622      	mov	r2, r4
   20bc4:	4628      	mov	r0, r5
   20bc6:	9901      	ldr	r1, [sp, #4]
   20bc8:	f7ff ff51 	bl	20a6e <swapfunc>
				pd -= es;
   20bcc:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   20bd0:	4413      	add	r3, r2
				swap_cnt = 1;
   20bd2:	2201      	movs	r2, #1
				pd -= es;
   20bd4:	9301      	str	r3, [sp, #4]
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   20bd6:	45d1      	cmp	r9, sl
			pc -= es;
   20bd8:	4655      	mov	r5, sl
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   20bda:	d907      	bls.n	20bec <qsort+0x128>
	if (swap_cnt == 0) {  /* Switch to insertion sort */
   20bdc:	fb04 6a0b 	mla	sl, r4, fp, r6
   20be0:	bb32      	cbnz	r2, 20c30 <qsort+0x16c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   20be2:	45ba      	cmp	sl, r7
   20be4:	f67f af7f 	bls.w	20ae6 <qsort+0x22>
   20be8:	463d      	mov	r5, r7
   20bea:	e01d      	b.n	20c28 <qsort+0x164>
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   20bec:	4631      	mov	r1, r6
   20bee:	4628      	mov	r0, r5
   20bf0:	9203      	str	r2, [sp, #12]
   20bf2:	47c0      	blx	r8
   20bf4:	9b02      	ldr	r3, [sp, #8]
   20bf6:	2800      	cmp	r0, #0
   20bf8:	9a03      	ldr	r2, [sp, #12]
   20bfa:	eb05 0a03 	add.w	sl, r5, r3
   20bfe:	dadf      	bge.n	20bc0 <qsort+0xfc>
		swapfunc(pb, pc, es);
   20c00:	4629      	mov	r1, r5
   20c02:	4622      	mov	r2, r4
   20c04:	4648      	mov	r0, r9
   20c06:	f7ff ff32 	bl	20a6e <swapfunc>
		pc -= es;
   20c0a:	4655      	mov	r5, sl
	for (;;) {
   20c0c:	e7d2      	b.n	20bb4 <qsort+0xf0>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   20c0e:	eba5 0904 	sub.w	r9, r5, r4
   20c12:	4629      	mov	r1, r5
   20c14:	4648      	mov	r0, r9
   20c16:	47c0      	blx	r8
   20c18:	2800      	cmp	r0, #0
   20c1a:	dd07      	ble.n	20c2c <qsort+0x168>
				swapfunc(pl, pl - es, es);
   20c1c:	4628      	mov	r0, r5
   20c1e:	4622      	mov	r2, r4
   20c20:	4649      	mov	r1, r9
   20c22:	f7ff ff24 	bl	20a6e <swapfunc>
			     pl -= es) {
   20c26:	464d      	mov	r5, r9
			for (pl = pm;
   20c28:	42ae      	cmp	r6, r5
   20c2a:	d3f0      	bcc.n	20c0e <qsort+0x14a>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   20c2c:	4427      	add	r7, r4
   20c2e:	e7d8      	b.n	20be2 <qsort+0x11e>
	d1 = MIN(pa - (char *)a, pb - pa);
   20c30:	9b00      	ldr	r3, [sp, #0]
   20c32:	eba9 0b03 	sub.w	fp, r9, r3
   20c36:	1b9a      	subs	r2, r3, r6
   20c38:	455a      	cmp	r2, fp
   20c3a:	bfa8      	it	ge
   20c3c:	465a      	movge	r2, fp
	vecswap(a, pb - d1, d1);
   20c3e:	b122      	cbz	r2, 20c4a <qsort+0x186>
   20c40:	4630      	mov	r0, r6
   20c42:	eba9 0102 	sub.w	r1, r9, r2
   20c46:	f7ff ff12 	bl	20a6e <swapfunc>
	d1 = MIN(pd - pc, pn - pd - es);
   20c4a:	9b01      	ldr	r3, [sp, #4]
   20c4c:	ebaa 0203 	sub.w	r2, sl, r3
   20c50:	1b5d      	subs	r5, r3, r5
   20c52:	1b12      	subs	r2, r2, r4
   20c54:	42aa      	cmp	r2, r5
   20c56:	bf28      	it	cs
   20c58:	462a      	movcs	r2, r5
	vecswap(pb, pn - d1, d1);
   20c5a:	b122      	cbz	r2, 20c66 <qsort+0x1a2>
   20c5c:	4648      	mov	r0, r9
   20c5e:	ebaa 0102 	sub.w	r1, sl, r2
   20c62:	f7ff ff04 	bl	20a6e <swapfunc>
	if (d1 <= d2) {
   20c66:	455d      	cmp	r5, fp
   20c68:	d310      	bcc.n	20c8c <qsort+0x1c8>
		if (d1 > es) {
   20c6a:	455c      	cmp	r4, fp
   20c6c:	d206      	bcs.n	20c7c <qsort+0x1b8>
			qsort(a, d1 / es, es, cmp);
   20c6e:	4643      	mov	r3, r8
   20c70:	4622      	mov	r2, r4
   20c72:	fbbb f1f4 	udiv	r1, fp, r4
   20c76:	4630      	mov	r0, r6
   20c78:	f7ff ff24 	bl	20ac4 <qsort>
		if (d2 > es) {
   20c7c:	42a5      	cmp	r5, r4
   20c7e:	f67f af32 	bls.w	20ae6 <qsort+0x22>
			n = d2 / es;
   20c82:	fbb5 fbf4 	udiv	fp, r5, r4
			a = pn - d2;
   20c86:	ebaa 0605 	sub.w	r6, sl, r5
			goto loop;
   20c8a:	e722      	b.n	20ad2 <qsort+0xe>
		if (d2 > es) {
   20c8c:	42a5      	cmp	r5, r4
   20c8e:	d907      	bls.n	20ca0 <qsort+0x1dc>
			qsort(pn - d2, d2 / es, es, cmp);
   20c90:	4643      	mov	r3, r8
   20c92:	4622      	mov	r2, r4
   20c94:	fbb5 f1f4 	udiv	r1, r5, r4
   20c98:	ebaa 0005 	sub.w	r0, sl, r5
   20c9c:	f7ff ff12 	bl	20ac4 <qsort>
		if (d1 > es) {
   20ca0:	455c      	cmp	r4, fp
   20ca2:	f4bf af20 	bcs.w	20ae6 <qsort+0x22>
			n = d1 / es;
   20ca6:	fbbb fbf4 	udiv	fp, fp, r4
			goto loop;
   20caa:	e712      	b.n	20ad2 <qsort+0xe>

00020cac <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   20cac:	070b      	lsls	r3, r1, #28
   20cae:	d504      	bpl.n	20cba <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   20cb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   20cb4:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   20cb6:	bf98      	it	ls
   20cb8:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   20cba:	4770      	bx	lr

00020cbc <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   20cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc0:	b087      	sub	sp, #28
   20cc2:	468a      	mov	sl, r1
   20cc4:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   20cc6:	4605      	mov	r5, r0
{
   20cc8:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
   20cca:	b918      	cbnz	r0, 20cd4 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   20ccc:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   20cce:	b007      	add	sp, #28
   20cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   20cd4:	2900      	cmp	r1, #0
   20cd6:	d0f9      	beq.n	20ccc <fnmatchx+0x10>
    if (recursion-- == 0)
   20cd8:	9b02      	ldr	r3, [sp, #8]
   20cda:	2b00      	cmp	r3, #0
   20cdc:	f000 811a 	beq.w	20f14 <fnmatchx+0x258>
   20ce0:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
   20ce2:	f004 0304 	and.w	r3, r4, #4
   20ce6:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   20ce8:	46a8      	mov	r8, r5
   20cea:	4621      	mov	r1, r4
   20cec:	f818 0b01 	ldrb.w	r0, [r8], #1
   20cf0:	f7ff ffdc 	bl	20cac <foldcase>
   20cf4:	4603      	mov	r3, r0
   20cf6:	b2c0      	uxtb	r0, r0
   20cf8:	283f      	cmp	r0, #63	; 0x3f
   20cfa:	4606      	mov	r6, r0
   20cfc:	7817      	ldrb	r7, [r2, #0]
   20cfe:	d024      	beq.n	20d4a <fnmatchx+0x8e>
   20d00:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   20d04:	d10a      	bne.n	20d1c <fnmatchx+0x60>
   20d06:	b1c0      	cbz	r0, 20d3a <fnmatchx+0x7e>
   20d08:	282a      	cmp	r0, #42	; 0x2a
   20d0a:	d035      	beq.n	20d78 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   20d0c:	4621      	mov	r1, r4
   20d0e:	4638      	mov	r0, r7
   20d10:	3201      	adds	r2, #1
   20d12:	f7ff ffcb 	bl	20cac <foldcase>
   20d16:	4286      	cmp	r6, r0
   20d18:	d01e      	beq.n	20d58 <fnmatchx+0x9c>
   20d1a:	e7d7      	b.n	20ccc <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   20d1c:	285b      	cmp	r0, #91	; 0x5b
   20d1e:	d07b      	beq.n	20e18 <fnmatchx+0x15c>
   20d20:	285c      	cmp	r0, #92	; 0x5c
   20d22:	d1f3      	bne.n	20d0c <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   20d24:	07e3      	lsls	r3, r4, #31
   20d26:	d4f1      	bmi.n	20d0c <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   20d28:	7868      	ldrb	r0, [r5, #1]
   20d2a:	f7ff ffbf 	bl	20cac <foldcase>
   20d2e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   20d32:	bf18      	it	ne
   20d34:	f105 0802 	addne.w	r8, r5, #2
   20d38:	e7e8      	b.n	20d0c <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   20d3a:	06e4      	lsls	r4, r4, #27
   20d3c:	d501      	bpl.n	20d42 <fnmatchx+0x86>
   20d3e:	2f2f      	cmp	r7, #47	; 0x2f
   20d40:	d0c5      	beq.n	20cce <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   20d42:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   20d44:	bf18      	it	ne
   20d46:	2001      	movne	r0, #1
   20d48:	e7c1      	b.n	20cce <fnmatchx+0x12>
            if (*string == EOS)
   20d4a:	2f00      	cmp	r7, #0
   20d4c:	d0be      	beq.n	20ccc <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   20d4e:	2f2f      	cmp	r7, #47	; 0x2f
   20d50:	d104      	bne.n	20d5c <fnmatchx+0xa0>
   20d52:	07a1      	lsls	r1, r4, #30
   20d54:	d4ba      	bmi.n	20ccc <fnmatchx+0x10>
            ++string;
   20d56:	3201      	adds	r2, #1
            break;
   20d58:	4645      	mov	r5, r8
   20d5a:	e7c5      	b.n	20ce8 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   20d5c:	2f2e      	cmp	r7, #46	; 0x2e
   20d5e:	d1fa      	bne.n	20d56 <fnmatchx+0x9a>
   20d60:	9b04      	ldr	r3, [sp, #16]
   20d62:	2b00      	cmp	r3, #0
   20d64:	d0f7      	beq.n	20d56 <fnmatchx+0x9a>
   20d66:	4552      	cmp	r2, sl
   20d68:	d0b0      	beq.n	20ccc <fnmatchx+0x10>
                (string == stringstart ||
   20d6a:	07a3      	lsls	r3, r4, #30
   20d6c:	d5f3      	bpl.n	20d56 <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   20d6e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   20d72:	2b2f      	cmp	r3, #47	; 0x2f
   20d74:	d1ef      	bne.n	20d56 <fnmatchx+0x9a>
   20d76:	e7a9      	b.n	20ccc <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   20d78:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   20d7a:	f7ff ff97 	bl	20cac <foldcase>
   20d7e:	b2c1      	uxtb	r1, r0
            while (c == '*')
   20d80:	292a      	cmp	r1, #42	; 0x2a
   20d82:	d018      	beq.n	20db6 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   20d84:	2f2e      	cmp	r7, #46	; 0x2e
   20d86:	d109      	bne.n	20d9c <fnmatchx+0xe0>
   20d88:	9b04      	ldr	r3, [sp, #16]
   20d8a:	b13b      	cbz	r3, 20d9c <fnmatchx+0xe0>
   20d8c:	4552      	cmp	r2, sl
   20d8e:	d09d      	beq.n	20ccc <fnmatchx+0x10>
                (string == stringstart ||
   20d90:	07a7      	lsls	r7, r4, #30
   20d92:	d503      	bpl.n	20d9c <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   20d94:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   20d98:	2b2f      	cmp	r3, #47	; 0x2f
   20d9a:	d097      	beq.n	20ccc <fnmatchx+0x10>
            if (c == EOS) {
   20d9c:	b979      	cbnz	r1, 20dbe <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   20d9e:	f014 0002 	ands.w	r0, r4, #2
   20da2:	d094      	beq.n	20cce <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   20da4:	06e6      	lsls	r6, r4, #27
   20da6:	f100 80b7 	bmi.w	20f18 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   20daa:	212f      	movs	r1, #47	; 0x2f
   20dac:	4610      	mov	r0, r2
   20dae:	f002 f93f 	bl	23030 <strchr>
                        0 : FNM_NOMATCH;
   20db2:	3800      	subs	r0, #0
   20db4:	e7c6      	b.n	20d44 <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   20db6:	4621      	mov	r1, r4
   20db8:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   20dbc:	e7dd      	b.n	20d7a <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   20dbe:	292f      	cmp	r1, #47	; 0x2f
   20dc0:	d021      	beq.n	20e06 <fnmatchx+0x14a>
   20dc2:	4616      	mov	r6, r2
    if (recursion-- == 0)
   20dc4:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
   20dc6:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
   20dca:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
   20dcc:	f004 0a02 	and.w	sl, r4, #2
   20dd0:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   20dd2:	4621      	mov	r1, r4
   20dd4:	f89b 0000 	ldrb.w	r0, [fp]
   20dd8:	f7ff ff68 	bl	20cac <foldcase>
   20ddc:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   20de0:	f106 0601 	add.w	r6, r6, #1
   20de4:	f43f af72 	beq.w	20ccc <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   20de8:	463b      	mov	r3, r7
   20dea:	464a      	mov	r2, r9
   20dec:	4659      	mov	r1, fp
   20dee:	4640      	mov	r0, r8
   20df0:	f7ff ff64 	bl	20cbc <fnmatchx>
   20df4:	2801      	cmp	r0, #1
   20df6:	f47f af6a 	bne.w	20cce <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   20dfa:	2d2f      	cmp	r5, #47	; 0x2f
   20dfc:	d1e8      	bne.n	20dd0 <fnmatchx+0x114>
   20dfe:	f1ba 0f00 	cmp.w	sl, #0
   20e02:	d0e5      	beq.n	20dd0 <fnmatchx+0x114>
   20e04:	e762      	b.n	20ccc <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   20e06:	07a5      	lsls	r5, r4, #30
   20e08:	d5db      	bpl.n	20dc2 <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   20e0a:	4610      	mov	r0, r2
   20e0c:	f002 f910 	bl	23030 <strchr>
   20e10:	4602      	mov	r2, r0
   20e12:	2800      	cmp	r0, #0
   20e14:	d1a0      	bne.n	20d58 <fnmatchx+0x9c>
   20e16:	e759      	b.n	20ccc <fnmatchx+0x10>
            if (*string == EOS)
   20e18:	2f00      	cmp	r7, #0
   20e1a:	f43f af57 	beq.w	20ccc <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   20e1e:	2f2f      	cmp	r7, #47	; 0x2f
   20e20:	d102      	bne.n	20e28 <fnmatchx+0x16c>
   20e22:	07a0      	lsls	r0, r4, #30
   20e24:	f53f af52 	bmi.w	20ccc <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   20e28:	4621      	mov	r1, r4
   20e2a:	4638      	mov	r0, r7
   20e2c:	f7ff ff3e 	bl	20cac <foldcase>
   20e30:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   20e32:	f1b8 0f00 	cmp.w	r8, #0
   20e36:	f43f af49 	beq.w	20ccc <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   20e3a:	786b      	ldrb	r3, [r5, #1]
   20e3c:	2b21      	cmp	r3, #33	; 0x21
   20e3e:	d001      	beq.n	20e44 <fnmatchx+0x188>
   20e40:	2b5e      	cmp	r3, #94	; 0x5e
   20e42:	d126      	bne.n	20e92 <fnmatchx+0x1d6>
        ++pattern;
   20e44:	2301      	movs	r3, #1
   20e46:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   20e48:	9301      	str	r3, [sp, #4]
    need = 1;
   20e4a:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   20e4c:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   20e50:	ea04 0103 	and.w	r1, r4, r3
   20e54:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   20e56:	462e      	mov	r6, r5
   20e58:	4621      	mov	r1, r4
   20e5a:	f816 0b01 	ldrb.w	r0, [r6], #1
   20e5e:	9305      	str	r3, [sp, #20]
   20e60:	f7ff ff24 	bl	20cac <foldcase>
   20e64:	fa5f f980 	uxtb.w	r9, r0
   20e68:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   20e6c:	9b05      	ldr	r3, [sp, #20]
   20e6e:	d113      	bne.n	20e98 <fnmatchx+0x1dc>
   20e70:	bb2b      	cbnz	r3, 20ebe <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   20e72:	9b01      	ldr	r3, [sp, #4]
   20e74:	455b      	cmp	r3, fp
   20e76:	f43f af29 	beq.w	20ccc <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   20e7a:	2e00      	cmp	r6, #0
   20e7c:	f43f af26 	beq.w	20ccc <fnmatchx+0x10>
            if (r == (void *)-1) {
   20e80:	1c71      	adds	r1, r6, #1
   20e82:	d103      	bne.n	20e8c <fnmatchx+0x1d0>
                if (*string != '[')
   20e84:	2f5b      	cmp	r7, #91	; 0x5b
   20e86:	f47f af21 	bne.w	20ccc <fnmatchx+0x10>
   20e8a:	4646      	mov	r6, r8
            break;
   20e8c:	46b0      	mov	r8, r6
            ++string;
   20e8e:	3201      	adds	r2, #1
            break;
   20e90:	e762      	b.n	20d58 <fnmatchx+0x9c>
   20e92:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   20e94:	2300      	movs	r3, #0
   20e96:	e7d7      	b.n	20e48 <fnmatchx+0x18c>
        if (c == '/')
   20e98:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   20e9c:	d0f2      	beq.n	20e84 <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   20e9e:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   20ea2:	d108      	bne.n	20eb6 <fnmatchx+0x1fa>
   20ea4:	9b03      	ldr	r3, [sp, #12]
   20ea6:	b953      	cbnz	r3, 20ebe <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   20ea8:	4621      	mov	r1, r4
   20eaa:	7868      	ldrb	r0, [r5, #1]
   20eac:	f7ff fefe 	bl	20cac <foldcase>
   20eb0:	1cae      	adds	r6, r5, #2
   20eb2:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   20eb6:	f1b9 0f00 	cmp.w	r9, #0
   20eba:	f43f af07 	beq.w	20ccc <fnmatchx+0x10>
        if (*pattern == '-' 
   20ebe:	7833      	ldrb	r3, [r6, #0]
   20ec0:	2b2d      	cmp	r3, #45	; 0x2d
   20ec2:	d120      	bne.n	20f06 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   20ec4:	4621      	mov	r1, r4
   20ec6:	7870      	ldrb	r0, [r6, #1]
   20ec8:	f7ff fef0 	bl	20cac <foldcase>
   20ecc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   20ed0:	d019      	beq.n	20f06 <fnmatchx+0x24a>
   20ed2:	285d      	cmp	r0, #93	; 0x5d
   20ed4:	d017      	beq.n	20f06 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   20ed6:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   20ed8:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   20edc:	d10a      	bne.n	20ef4 <fnmatchx+0x238>
   20ede:	9b03      	ldr	r3, [sp, #12]
   20ee0:	b943      	cbnz	r3, 20ef4 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   20ee2:	78b0      	ldrb	r0, [r6, #2]
   20ee4:	f7ff fee2 	bl	20cac <foldcase>
            if (c2 == EOS)
   20ee8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   20eec:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   20ef0:	f43f aeec 	beq.w	20ccc <fnmatchx+0x10>
            if (c <= test && test <= c2)
   20ef4:	9b00      	ldr	r3, [sp, #0]
   20ef6:	454b      	cmp	r3, r9
   20ef8:	db03      	blt.n	20f02 <fnmatchx+0x246>
                ok = 1;
   20efa:	4283      	cmp	r3, r0
   20efc:	bfd8      	it	le
   20efe:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   20f02:	2300      	movs	r3, #0
   20f04:	e7a7      	b.n	20e56 <fnmatchx+0x19a>
        } else if (c == test)
   20f06:	9b00      	ldr	r3, [sp, #0]
   20f08:	4635      	mov	r5, r6
   20f0a:	454b      	cmp	r3, r9
   20f0c:	bf08      	it	eq
   20f0e:	f04f 0b01 	moveq.w	fp, #1
   20f12:	e7f6      	b.n	20f02 <fnmatchx+0x246>
        return FNM_NORES;
   20f14:	2003      	movs	r0, #3
   20f16:	e6da      	b.n	20cce <fnmatchx+0x12>
                return 0;
   20f18:	4608      	mov	r0, r1
   20f1a:	e6d8      	b.n	20cce <fnmatchx+0x12>

00020f1c <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   20f1c:	2340      	movs	r3, #64	; 0x40
   20f1e:	f7ff becd 	b.w	20cbc <fnmatchx>

00020f22 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   20f22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   20f26:	b2db      	uxtb	r3, r3
   20f28:	2b09      	cmp	r3, #9
   20f2a:	d802      	bhi.n	20f32 <char2hex+0x10>
		*x = c - '0';
   20f2c:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   20f2e:	2000      	movs	r0, #0
   20f30:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   20f32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   20f36:	2b05      	cmp	r3, #5
   20f38:	d802      	bhi.n	20f40 <char2hex+0x1e>
		*x = c - 'a' + 10;
   20f3a:	3857      	subs	r0, #87	; 0x57
   20f3c:	7008      	strb	r0, [r1, #0]
   20f3e:	e7f6      	b.n	20f2e <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   20f40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   20f44:	2b05      	cmp	r3, #5
   20f46:	d801      	bhi.n	20f4c <char2hex+0x2a>
		*x = c - 'A' + 10;
   20f48:	3837      	subs	r0, #55	; 0x37
   20f4a:	e7f7      	b.n	20f3c <char2hex+0x1a>
		return -EINVAL;
   20f4c:	f06f 0015 	mvn.w	r0, #21
}
   20f50:	4770      	bx	lr

00020f52 <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   20f52:	2809      	cmp	r0, #9
   20f54:	d803      	bhi.n	20f5e <hex2char+0xc>
		*c = x + '0';
   20f56:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   20f58:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   20f5a:	2000      	movs	r0, #0
   20f5c:	4770      	bx	lr
	} else  if (x <= 15) {
   20f5e:	280f      	cmp	r0, #15
   20f60:	d801      	bhi.n	20f66 <hex2char+0x14>
		*c = x - 10 + 'a';
   20f62:	3057      	adds	r0, #87	; 0x57
   20f64:	e7f8      	b.n	20f58 <hex2char+0x6>
		return -EINVAL;
   20f66:	f06f 0015 	mvn.w	r0, #21
}
   20f6a:	4770      	bx	lr

00020f6c <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   20f6c:	3301      	adds	r3, #1
   20f6e:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   20f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20f76:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   20f78:	ea4f 0641 	mov.w	r6, r1, lsl #1
   20f7c:	d203      	bcs.n	20f86 <bin2hex+0x1a>
		return 0;
   20f7e:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   20f80:	4630      	mov	r0, r6
   20f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20f86:	4603      	mov	r3, r0
   20f88:	1c55      	adds	r5, r2, #1
   20f8a:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   20f8c:	42bb      	cmp	r3, r7
   20f8e:	d103      	bne.n	20f98 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   20f90:	2300      	movs	r3, #0
   20f92:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   20f96:	e7f3      	b.n	20f80 <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   20f98:	7818      	ldrb	r0, [r3, #0]
   20f9a:	1e69      	subs	r1, r5, #1
   20f9c:	0900      	lsrs	r0, r0, #4
   20f9e:	4698      	mov	r8, r3
   20fa0:	f7ff ffd7 	bl	20f52 <hex2char>
   20fa4:	2800      	cmp	r0, #0
   20fa6:	dbea      	blt.n	20f7e <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   20fa8:	f898 0000 	ldrb.w	r0, [r8]
   20fac:	4629      	mov	r1, r5
   20fae:	f000 000f 	and.w	r0, r0, #15
   20fb2:	3301      	adds	r3, #1
   20fb4:	f7ff ffcd 	bl	20f52 <hex2char>
   20fb8:	2800      	cmp	r0, #0
   20fba:	f105 0502 	add.w	r5, r5, #2
   20fbe:	dae5      	bge.n	20f8c <bin2hex+0x20>
   20fc0:	e7dd      	b.n	20f7e <bin2hex+0x12>

00020fc2 <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   20fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20fc4:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   20fc6:	f001 0001 	and.w	r0, r1, #1
   20fca:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   20fce:	429d      	cmp	r5, r3
   20fd0:	ea4f 0651 	mov.w	r6, r1, lsr #1
   20fd4:	d903      	bls.n	20fde <hex2bin+0x1c>
		return 0;
   20fd6:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   20fd8:	4628      	mov	r0, r5
   20fda:	b003      	add	sp, #12
   20fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   20fde:	b158      	cbz	r0, 20ff8 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   20fe0:	7820      	ldrb	r0, [r4, #0]
   20fe2:	f10d 0107 	add.w	r1, sp, #7
   20fe6:	f7ff ff9c 	bl	20f22 <char2hex>
   20fea:	2800      	cmp	r0, #0
   20fec:	dbf3      	blt.n	20fd6 <hex2bin+0x14>
		buf[0] = dec;
   20fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   20ff2:	3401      	adds	r4, #1
		buf[0] = dec;
   20ff4:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   20ff8:	3401      	adds	r4, #1
   20ffa:	4416      	add	r6, r2
   20ffc:	42b2      	cmp	r2, r6
   20ffe:	d0eb      	beq.n	20fd8 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   21000:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   21004:	f10d 0107 	add.w	r1, sp, #7
   21008:	f7ff ff8b 	bl	20f22 <char2hex>
   2100c:	2800      	cmp	r0, #0
   2100e:	dbe2      	blt.n	20fd6 <hex2bin+0x14>
		buf[i] = dec << 4;
   21010:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   21014:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   21018:	011b      	lsls	r3, r3, #4
   2101a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2101c:	f814 0b02 	ldrb.w	r0, [r4], #2
   21020:	f7ff ff7f 	bl	20f22 <char2hex>
   21024:	2800      	cmp	r0, #0
   21026:	dbd6      	blt.n	20fd6 <hex2bin+0x14>
		buf[i] += dec;
   21028:	7813      	ldrb	r3, [r2, #0]
   2102a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2102e:	440b      	add	r3, r1
   21030:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   21034:	e7e2      	b.n	20ffc <hex2bin+0x3a>

00021036 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21036:	4603      	mov	r3, r0
   21038:	b140      	cbz	r0, 2104c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2103a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2103c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21040:	2a02      	cmp	r2, #2
   21042:	d006      	beq.n	21052 <sys_notify_validate+0x1c>
   21044:	2a03      	cmp	r2, #3
   21046:	d004      	beq.n	21052 <sys_notify_validate+0x1c>
   21048:	2a01      	cmp	r2, #1
   2104a:	d005      	beq.n	21058 <sys_notify_validate+0x22>
		return -EINVAL;
   2104c:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21050:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21052:	681a      	ldr	r2, [r3, #0]
   21054:	2a00      	cmp	r2, #0
   21056:	d0f9      	beq.n	2104c <sys_notify_validate+0x16>
		notify->result = 0;
   21058:	2000      	movs	r0, #0
   2105a:	6098      	str	r0, [r3, #8]
   2105c:	4770      	bx	lr

0002105e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2105e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   21060:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   21062:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   21066:	2a02      	cmp	r2, #2
{
   21068:	4603      	mov	r3, r0
	notify->result = res;
   2106a:	6081      	str	r1, [r0, #8]
	switch (method) {
   2106c:	d00a      	beq.n	21084 <sys_notify_finalize+0x26>
   2106e:	2a03      	cmp	r2, #3
   21070:	d10b      	bne.n	2108a <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21072:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21074:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21076:	2200      	movs	r2, #0
   21078:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2107a:	b108      	cbz	r0, 21080 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   2107c:	f7ff fca2 	bl	209c4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21080:	4620      	mov	r0, r4
   21082:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   21084:	2400      	movs	r4, #0
		sig = notify->method.signal;
   21086:	6800      	ldr	r0, [r0, #0]
		break;
   21088:	e7f5      	b.n	21076 <sys_notify_finalize+0x18>
	switch (method) {
   2108a:	2400      	movs	r4, #0
   2108c:	4620      	mov	r0, r4
   2108e:	e7f2      	b.n	21076 <sys_notify_finalize+0x18>

00021090 <arch_printk_char_out>:
}
   21090:	2000      	movs	r0, #0
   21092:	4770      	bx	lr

00021094 <str_out>:
{
   21094:	b530      	push	{r4, r5, lr}
   21096:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21098:	680c      	ldr	r4, [r1, #0]
   2109a:	1c55      	adds	r5, r2, #1
   2109c:	b114      	cbz	r4, 210a4 <str_out+0x10>
   2109e:	684b      	ldr	r3, [r1, #4]
   210a0:	4293      	cmp	r3, r2
   210a2:	dc01      	bgt.n	210a8 <str_out+0x14>
		ctx->count++;
   210a4:	608d      	str	r5, [r1, #8]
}
   210a6:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   210a8:	3b01      	subs	r3, #1
   210aa:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   210ac:	bf08      	it	eq
   210ae:	2200      	moveq	r2, #0
   210b0:	608d      	str	r5, [r1, #8]
   210b2:	bf0c      	ite	eq
   210b4:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   210b6:	54a0      	strbne	r0, [r4, r2]
   210b8:	e7f5      	b.n	210a6 <str_out+0x12>

000210ba <printk>:
{
   210ba:	b40f      	push	{r0, r1, r2, r3}
   210bc:	b507      	push	{r0, r1, r2, lr}
   210be:	a904      	add	r1, sp, #16
   210c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   210c4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   210c6:	f7f8 fd3f 	bl	19b48 <vprintk>
}
   210ca:	b003      	add	sp, #12
   210cc:	f85d eb04 	ldr.w	lr, [sp], #4
   210d0:	b004      	add	sp, #16
   210d2:	4770      	bx	lr

000210d4 <snprintk>:
{
   210d4:	b40c      	push	{r2, r3}
   210d6:	b507      	push	{r0, r1, r2, lr}
   210d8:	ab04      	add	r3, sp, #16
   210da:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   210de:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   210e0:	f7f8 fd40 	bl	19b64 <vsnprintk>
}
   210e4:	b003      	add	sp, #12
   210e6:	f85d eb04 	ldr.w	lr, [sp], #4
   210ea:	b002      	add	sp, #8
   210ec:	4770      	bx	lr

000210ee <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   210ee:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   210f0:	f013 0307 	ands.w	r3, r3, #7
   210f4:	d105      	bne.n	21102 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   210f6:	6803      	ldr	r3, [r0, #0]
   210f8:	2b00      	cmp	r3, #0
		evt = EVT_START;
   210fa:	bf0c      	ite	eq
   210fc:	2000      	moveq	r0, #0
   210fe:	2003      	movne	r0, #3
   21100:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21102:	2b02      	cmp	r3, #2
   21104:	d105      	bne.n	21112 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21106:	8b43      	ldrh	r3, [r0, #26]
   21108:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2110a:	bf14      	ite	ne
   2110c:	2000      	movne	r0, #0
   2110e:	2004      	moveq	r0, #4
   21110:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21112:	2b01      	cmp	r3, #1
   21114:	d105      	bne.n	21122 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21116:	6803      	ldr	r3, [r0, #0]
   21118:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2111a:	bf0c      	ite	eq
   2111c:	2000      	moveq	r0, #0
   2111e:	2005      	movne	r0, #5
   21120:	4770      	bx	lr
	int evt = EVT_NOP;
   21122:	2000      	movs	r0, #0
}
   21124:	4770      	bx	lr

00021126 <notify_one>:
{
   21126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2112a:	460d      	mov	r5, r1
   2112c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2112e:	4619      	mov	r1, r3
   21130:	1d28      	adds	r0, r5, #4
{
   21132:	4690      	mov	r8, r2
   21134:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21136:	f7ff ff92 	bl	2105e <sys_notify_finalize>
	if (cb) {
   2113a:	4604      	mov	r4, r0
   2113c:	b138      	cbz	r0, 2114e <notify_one+0x28>
		cb(mgr, cli, state, res);
   2113e:	4633      	mov	r3, r6
   21140:	4642      	mov	r2, r8
   21142:	4629      	mov	r1, r5
   21144:	4638      	mov	r0, r7
   21146:	46a4      	mov	ip, r4
}
   21148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2114c:	4760      	bx	ip
}
   2114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021152 <transition_complete>:
{
   21152:	b410      	push	{r4}
	__asm__ volatile(
   21154:	f04f 0420 	mov.w	r4, #32
   21158:	f3ef 8211 	mrs	r2, BASEPRI
   2115c:	f384 8811 	msr	BASEPRI, r4
   21160:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21164:	6141      	str	r1, [r0, #20]
}
   21166:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21168:	2101      	movs	r1, #1
   2116a:	f7f8 bd0f 	b.w	19b8c <process_event>

0002116e <validate_args>:
{
   2116e:	b510      	push	{r4, lr}
   21170:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21172:	b140      	cbz	r0, 21186 <validate_args+0x18>
   21174:	b139      	cbz	r1, 21186 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21176:	1d08      	adds	r0, r1, #4
   21178:	f7ff ff5d 	bl	21036 <sys_notify_validate>
	if ((rv == 0)
   2117c:	b928      	cbnz	r0, 2118a <validate_args+0x1c>
	    && ((cli->notify.flags
   2117e:	68a3      	ldr	r3, [r4, #8]
   21180:	f033 0303 	bics.w	r3, r3, #3
   21184:	d001      	beq.n	2118a <validate_args+0x1c>
		rv = -EINVAL;
   21186:	f06f 0015 	mvn.w	r0, #21
}
   2118a:	bd10      	pop	{r4, pc}

0002118c <onoff_manager_init>:
{
   2118c:	b538      	push	{r3, r4, r5, lr}
   2118e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21190:	4605      	mov	r5, r0
   21192:	b158      	cbz	r0, 211ac <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21194:	b151      	cbz	r1, 211ac <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21196:	680b      	ldr	r3, [r1, #0]
   21198:	b143      	cbz	r3, 211ac <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2119a:	684b      	ldr	r3, [r1, #4]
   2119c:	b133      	cbz	r3, 211ac <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2119e:	221c      	movs	r2, #28
   211a0:	2100      	movs	r1, #0
   211a2:	f001 ffc7 	bl	23134 <memset>
	return 0;
   211a6:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   211a8:	612c      	str	r4, [r5, #16]
}
   211aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   211ac:	f06f 0015 	mvn.w	r0, #21
   211b0:	e7fb      	b.n	211aa <onoff_manager_init+0x1e>

000211b2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   211b2:	b570      	push	{r4, r5, r6, lr}
   211b4:	4604      	mov	r4, r0
   211b6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   211b8:	f7ff ffd9 	bl	2116e <validate_args>

	if (rv < 0) {
   211bc:	1e05      	subs	r5, r0, #0
   211be:	db31      	blt.n	21224 <onoff_request+0x72>
   211c0:	f04f 0320 	mov.w	r3, #32
   211c4:	f3ef 8111 	mrs	r1, BASEPRI
   211c8:	f383 8811 	msr	BASEPRI, r3
   211cc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   211d0:	f64f 75ff 	movw	r5, #65535	; 0xffff
   211d4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   211d6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   211d8:	42ab      	cmp	r3, r5
   211da:	f000 0207 	and.w	r2, r0, #7
   211de:	d02e      	beq.n	2123e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   211e0:	2a02      	cmp	r2, #2
   211e2:	d10e      	bne.n	21202 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   211e4:	3301      	adds	r3, #1
   211e6:	8363      	strh	r3, [r4, #26]
	rv = state;
   211e8:	4615      	mov	r5, r2
		notify = true;
   211ea:	2301      	movs	r3, #1
	__asm__ volatile(
   211ec:	f381 8811 	msr	BASEPRI, r1
   211f0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   211f4:	b1b3      	cbz	r3, 21224 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   211f6:	2300      	movs	r3, #0
   211f8:	4631      	mov	r1, r6
   211fa:	4620      	mov	r0, r4
   211fc:	f7ff ff93 	bl	21126 <notify_one>
   21200:	e010      	b.n	21224 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   21202:	0783      	lsls	r3, r0, #30
   21204:	d001      	beq.n	2120a <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   21206:	2a06      	cmp	r2, #6
   21208:	d10e      	bne.n	21228 <onoff_request+0x76>
	parent->next = child;
   2120a:	2300      	movs	r3, #0
   2120c:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   2120e:	6863      	ldr	r3, [r4, #4]
   21210:	b993      	cbnz	r3, 21238 <onoff_request+0x86>
	list->head = node;
   21212:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   21216:	4615      	mov	r5, r2
   21218:	b962      	cbnz	r2, 21234 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2121a:	460a      	mov	r2, r1
   2121c:	4620      	mov	r0, r4
   2121e:	2102      	movs	r1, #2
   21220:	f7f8 fcb4 	bl	19b8c <process_event>
		}
	}

	return rv;
}
   21224:	4628      	mov	r0, r5
   21226:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   21228:	2a05      	cmp	r2, #5
   2122a:	bf0c      	ite	eq
   2122c:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   21230:	f06f 0504 	mvnne.w	r5, #4
   21234:	2300      	movs	r3, #0
   21236:	e7d9      	b.n	211ec <onoff_request+0x3a>
	parent->next = child;
   21238:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2123a:	6066      	str	r6, [r4, #4]
}
   2123c:	e7eb      	b.n	21216 <onoff_request+0x64>
		rv = -EAGAIN;
   2123e:	f06f 050a 	mvn.w	r5, #10
   21242:	e7f7      	b.n	21234 <onoff_request+0x82>

00021244 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21244:	4604      	mov	r4, r0
   21246:	b508      	push	{r3, lr}
   21248:	4608      	mov	r0, r1
   2124a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2124c:	461a      	mov	r2, r3
   2124e:	47a0      	blx	r4
	return z_impl_k_current_get();
   21250:	f7fe ff7e 	bl	20150 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   21254:	f7fc ff92 	bl	1e17c <z_impl_k_thread_abort>

00021258 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   21258:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   2125a:	f7f8 fd7d 	bl	19d58 <timeutil_timegm64>
   2125e:	4605      	mov	r5, r0
   21260:	460c      	mov	r4, r1
   21262:	f7fe f86b 	bl	1f33c <z_impl_z_errno>
	time_t rv = (time_t)time;

	errno = 0;
   21266:	2300      	movs	r3, #0
		|| (time > (int64_t)INT32_MAX))) {
		errno = ERANGE;
		rv = -1;
	}
	return rv;
}
   21268:	4621      	mov	r1, r4
	errno = 0;
   2126a:	6003      	str	r3, [r0, #0]
}
   2126c:	4628      	mov	r0, r5
   2126e:	bd38      	pop	{r3, r4, r5, pc}

00021270 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21270:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   21272:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2127a:	bf2c      	ite	cs
   2127c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   21280:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   21284:	4770      	bx	lr

00021286 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21286:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   2128a:	6880      	ldr	r0, [r0, #8]
   2128c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   21290:	bf2c      	ite	cs
   21292:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   21296:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2129a:	4770      	bx	lr

0002129c <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2129c:	2201      	movs	r2, #1
{
   2129e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   212a0:	f7ff ffe6 	bl	21270 <chunk_field>
}
   212a4:	0840      	lsrs	r0, r0, #1
   212a6:	bd08      	pop	{r3, pc}

000212a8 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   212a8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   212aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   212ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   212b2:	d308      	bcc.n	212c6 <set_chunk_used+0x1e>
		if (used) {
   212b4:	684b      	ldr	r3, [r1, #4]
   212b6:	b11a      	cbz	r2, 212c0 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   212b8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   212bc:	604b      	str	r3, [r1, #4]
   212be:	4770      	bx	lr
   212c0:	f023 0301 	bic.w	r3, r3, #1
   212c4:	e7fa      	b.n	212bc <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   212c6:	884b      	ldrh	r3, [r1, #2]
   212c8:	b11a      	cbz	r2, 212d2 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   212ca:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   212ce:	804b      	strh	r3, [r1, #2]
		}
	}
}
   212d0:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   212d2:	f023 0301 	bic.w	r3, r3, #1
   212d6:	e7fa      	b.n	212ce <set_chunk_used+0x26>

000212d8 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   212d8:	0053      	lsls	r3, r2, #1
   212da:	2201      	movs	r2, #1
   212dc:	f7ff bfd3 	b.w	21286 <chunk_set>

000212e0 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   212e0:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   212e2:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   212e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   212e8:	bf2c      	ite	cs
   212ea:	2002      	movcs	r0, #2
   212ec:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   212ee:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   212f0:	fab0 f080 	clz	r0, r0
}
   212f4:	f1c0 001f 	rsb	r0, r0, #31
   212f8:	4770      	bx	lr

000212fa <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   212fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   212fe:	4614      	mov	r4, r2
   21300:	460e      	mov	r6, r1
   21302:	4605      	mov	r5, r0
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	size_t sz0 = chunk_size(h, lc);
   21304:	f7ff ffca 	bl	2129c <chunk_size>
	size_t lsz = rc - lc;
   21308:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   2130c:	1b37      	subs	r7, r6, r4
   2130e:	4407      	add	r7, r0

	set_chunk_size(h, lc, lsz);
   21310:	4642      	mov	r2, r8
   21312:	4631      	mov	r1, r6
   21314:	4628      	mov	r0, r5
   21316:	f7ff ffdf 	bl	212d8 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2131a:	463a      	mov	r2, r7
   2131c:	4621      	mov	r1, r4
   2131e:	4628      	mov	r0, r5
   21320:	f7ff ffda 	bl	212d8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21324:	4643      	mov	r3, r8
   21326:	2200      	movs	r2, #0
   21328:	4621      	mov	r1, r4
   2132a:	4628      	mov	r0, r5
   2132c:	f7ff ffab 	bl	21286 <chunk_set>
	return c + chunk_size(h, c);
   21330:	4621      	mov	r1, r4
   21332:	4628      	mov	r0, r5
   21334:	f7ff ffb2 	bl	2129c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21338:	463b      	mov	r3, r7
   2133a:	1821      	adds	r1, r4, r0
   2133c:	2200      	movs	r2, #0
   2133e:	4628      	mov	r0, r5
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   21340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21344:	f7ff bf9f 	b.w	21286 <chunk_set>

00021348 <free_list_remove_bidx>:
{
   21348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2134c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2134e:	2203      	movs	r2, #3
   21350:	460e      	mov	r6, r1
   21352:	4604      	mov	r4, r0
   21354:	f7ff ff8c 	bl	21270 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   21358:	4286      	cmp	r6, r0
   2135a:	4605      	mov	r5, r0
   2135c:	f107 0804 	add.w	r8, r7, #4
   21360:	d10b      	bne.n	2137a <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   21362:	2301      	movs	r3, #1
   21364:	fa03 f707 	lsl.w	r7, r3, r7
   21368:	68e3      	ldr	r3, [r4, #12]
   2136a:	ea23 0307 	bic.w	r3, r3, r7
   2136e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   21370:	2300      	movs	r3, #0
   21372:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   21376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2137a:	4631      	mov	r1, r6
   2137c:	2202      	movs	r2, #2
   2137e:	4620      	mov	r0, r4
   21380:	f7ff ff76 	bl	21270 <chunk_field>
   21384:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   21386:	462b      	mov	r3, r5
   21388:	4601      	mov	r1, r0
   2138a:	2203      	movs	r2, #3
   2138c:	4620      	mov	r0, r4
		b->next = second;
   2138e:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   21392:	f7ff ff78 	bl	21286 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21396:	4633      	mov	r3, r6
   21398:	4629      	mov	r1, r5
   2139a:	4620      	mov	r0, r4
}
   2139c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   213a0:	2202      	movs	r2, #2
   213a2:	f7ff bf70 	b.w	21286 <chunk_set>

000213a6 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   213a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   213aa:	4604      	mov	r4, r0
   213ac:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   213ae:	f7ff ff97 	bl	212e0 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   213b2:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   213b4:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   213b6:	4620      	mov	r0, r4
   213b8:	f7ff ff92 	bl	212e0 <bucket_idx>
   213bc:	42a8      	cmp	r0, r5
   213be:	da03      	bge.n	213c8 <alloc_chunk+0x22>
		return 0;
   213c0:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   213c2:	4630      	mov	r0, r6
   213c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   213c8:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   213cc:	f8da 9010 	ldr.w	r9, [sl, #16]
   213d0:	f1b9 0f00 	cmp.w	r9, #0
   213d4:	d019      	beq.n	2140a <alloc_chunk+0x64>
   213d6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   213d8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   213dc:	4620      	mov	r0, r4
   213de:	4631      	mov	r1, r6
   213e0:	f7ff ff5c 	bl	2129c <chunk_size>
   213e4:	4540      	cmp	r0, r8
   213e6:	d305      	bcc.n	213f4 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   213e8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   213ea:	4631      	mov	r1, r6
   213ec:	4620      	mov	r0, r4
   213ee:	f7ff ffab 	bl	21348 <free_list_remove_bidx>
		return c;
   213f2:	e7e6      	b.n	213c2 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   213f4:	2203      	movs	r2, #3
   213f6:	4631      	mov	r1, r6
   213f8:	4620      	mov	r0, r4
   213fa:	f7ff ff39 	bl	21270 <chunk_field>
		} while (--i && b->next != first);
   213fe:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   21400:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   21404:	d001      	beq.n	2140a <alloc_chunk+0x64>
   21406:	4581      	cmp	r9, r0
   21408:	d1e6      	bne.n	213d8 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2140a:	f04f 32ff 	mov.w	r2, #4294967295
   2140e:	68e3      	ldr	r3, [r4, #12]
   21410:	3501      	adds	r5, #1
   21412:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   21414:	401a      	ands	r2, r3
   21416:	d0d3      	beq.n	213c0 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   21418:	fa92 f2a2 	rbit	r2, r2
   2141c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21420:	1d13      	adds	r3, r2, #4
   21422:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   21426:	e7e0      	b.n	213ea <alloc_chunk+0x44>

00021428 <free_list_add>:
{
   21428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2142c:	4604      	mov	r4, r0
   2142e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   21430:	f7ff ff34 	bl	2129c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   21434:	68a3      	ldr	r3, [r4, #8]
   21436:	4601      	mov	r1, r0
   21438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2143c:	d301      	bcc.n	21442 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2143e:	2801      	cmp	r0, #1
   21440:	d035      	beq.n	214ae <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21442:	4620      	mov	r0, r4
   21444:	f7ff ff4c 	bl	212e0 <bucket_idx>
	if (b->next == 0U) {
   21448:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2144c:	6916      	ldr	r6, [r2, #16]
   2144e:	b99e      	cbnz	r6, 21478 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   21450:	2301      	movs	r3, #1
   21452:	fa03 f000 	lsl.w	r0, r3, r0
   21456:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   21458:	4629      	mov	r1, r5
   2145a:	4303      	orrs	r3, r0
   2145c:	60e3      	str	r3, [r4, #12]
   2145e:	4620      	mov	r0, r4
		b->next = c;
   21460:	6115      	str	r5, [r2, #16]
   21462:	462b      	mov	r3, r5
   21464:	2202      	movs	r2, #2
   21466:	f7ff ff0e 	bl	21286 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2146a:	2203      	movs	r2, #3
   2146c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2146e:	4620      	mov	r0, r4
}
   21470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21474:	f7ff bf07 	b.w	21286 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   21478:	2202      	movs	r2, #2
   2147a:	4631      	mov	r1, r6
   2147c:	4620      	mov	r0, r4
   2147e:	f7ff fef7 	bl	21270 <chunk_field>
   21482:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   21484:	4603      	mov	r3, r0
   21486:	2202      	movs	r2, #2
   21488:	4629      	mov	r1, r5
   2148a:	4620      	mov	r0, r4
   2148c:	f7ff fefb 	bl	21286 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21490:	4633      	mov	r3, r6
   21492:	2203      	movs	r2, #3
   21494:	4629      	mov	r1, r5
   21496:	4620      	mov	r0, r4
   21498:	f7ff fef5 	bl	21286 <chunk_set>
   2149c:	2203      	movs	r2, #3
   2149e:	4639      	mov	r1, r7
   214a0:	462b      	mov	r3, r5
   214a2:	4620      	mov	r0, r4
   214a4:	f7ff feef 	bl	21286 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   214a8:	2202      	movs	r2, #2
   214aa:	4631      	mov	r1, r6
   214ac:	e7df      	b.n	2146e <free_list_add+0x46>
   214ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000214b2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   214b2:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   214b4:	b909      	cbnz	r1, 214ba <sys_heap_alloc+0x8>
		return NULL;
   214b6:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   214b8:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   214ba:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   214bc:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   214be:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   214c0:	4628      	mov	r0, r5
   214c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   214c6:	bf2c      	ite	cs
   214c8:	2208      	movcs	r2, #8
   214ca:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   214cc:	4414      	add	r4, r2
   214ce:	08e4      	lsrs	r4, r4, #3
   214d0:	4621      	mov	r1, r4
   214d2:	f7ff ff68 	bl	213a6 <alloc_chunk>
	if (c == 0U) {
   214d6:	4606      	mov	r6, r0
   214d8:	2800      	cmp	r0, #0
   214da:	d0ec      	beq.n	214b6 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   214dc:	4601      	mov	r1, r0
   214de:	4628      	mov	r0, r5
   214e0:	f7ff fedc 	bl	2129c <chunk_size>
   214e4:	42a0      	cmp	r0, r4
   214e6:	d909      	bls.n	214fc <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   214e8:	4434      	add	r4, r6
   214ea:	4631      	mov	r1, r6
   214ec:	4628      	mov	r0, r5
   214ee:	4622      	mov	r2, r4
   214f0:	f7ff ff03 	bl	212fa <split_chunks>
		free_list_add(h, c + chunk_sz);
   214f4:	4621      	mov	r1, r4
   214f6:	4628      	mov	r0, r5
   214f8:	f7ff ff96 	bl	21428 <free_list_add>
	set_chunk_used(h, c, true);
   214fc:	4628      	mov	r0, r5
   214fe:	2201      	movs	r2, #1
   21500:	4631      	mov	r1, r6
   21502:	f7ff fed1 	bl	212a8 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   21506:	68ab      	ldr	r3, [r5, #8]
   21508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2150c:	bf2c      	ite	cs
   2150e:	2008      	movcs	r0, #8
   21510:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21512:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   21516:	4428      	add	r0, r5
	return chunk_mem(h, c);
   21518:	e7ce      	b.n	214b8 <sys_heap_alloc+0x6>

0002151a <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   2151a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2151e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21520:	bf2c      	ite	cs
   21522:	2508      	movcs	r5, #8
   21524:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   21526:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   21528:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   2152a:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2152c:	1dcc      	adds	r4, r1, #7
   2152e:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   21532:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   21534:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   21538:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2153a:	440d      	add	r5, r1
   2153c:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   21540:	1b2d      	subs	r5, r5, r4
   21542:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   21544:	4629      	mov	r1, r5
   21546:	4620      	mov	r0, r4
	h->len = buf_sz;
   21548:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   2154a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   2154c:	f7ff fec8 	bl	212e0 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21550:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   21552:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   21554:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21556:	361b      	adds	r6, #27
   21558:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   2155a:	f104 0210 	add.w	r2, r4, #16
   2155e:	428b      	cmp	r3, r1
   21560:	db29      	blt.n	215b6 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   21562:	4632      	mov	r2, r6
   21564:	4620      	mov	r0, r4
   21566:	2100      	movs	r1, #0
   21568:	f7ff feb6 	bl	212d8 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2156c:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   2156e:	4620      	mov	r0, r4
   21570:	2201      	movs	r2, #1
   21572:	2100      	movs	r1, #0
   21574:	f7ff fe98 	bl	212a8 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   21578:	463a      	mov	r2, r7
   2157a:	4631      	mov	r1, r6
   2157c:	f7ff feac 	bl	212d8 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21580:	4633      	mov	r3, r6
   21582:	4631      	mov	r1, r6
   21584:	4620      	mov	r0, r4
   21586:	2200      	movs	r2, #0
   21588:	f7ff fe7d 	bl	21286 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   2158c:	4629      	mov	r1, r5
   2158e:	4620      	mov	r0, r4
   21590:	2200      	movs	r2, #0
   21592:	f7ff fea1 	bl	212d8 <set_chunk_size>
   21596:	463b      	mov	r3, r7
   21598:	4629      	mov	r1, r5
   2159a:	4620      	mov	r0, r4
   2159c:	2200      	movs	r2, #0
   2159e:	f7ff fe72 	bl	21286 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   215a2:	4629      	mov	r1, r5
   215a4:	4620      	mov	r0, r4
   215a6:	2201      	movs	r2, #1
   215a8:	f7ff fe7e 	bl	212a8 <set_chunk_used>

	free_list_add(h, chunk0_size);
   215ac:	4631      	mov	r1, r6
}
   215ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   215b2:	f7ff bf39 	b.w	21428 <free_list_add>
		h->buckets[i].next = 0;
   215b6:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   215ba:	3301      	adds	r3, #1
   215bc:	e7cf      	b.n	2155e <sys_heap_init+0x44>

000215be <encode_uint>:
{
   215be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215c2:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   215c4:	78d3      	ldrb	r3, [r2, #3]
{
   215c6:	4614      	mov	r4, r2
	switch (specifier) {
   215c8:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   215ca:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   215ce:	4606      	mov	r6, r0
   215d0:	460f      	mov	r7, r1
   215d2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   215d4:	d02d      	beq.n	21632 <encode_uint+0x74>
   215d6:	d828      	bhi.n	2162a <encode_uint+0x6c>
		return 16;
   215d8:	2b58      	cmp	r3, #88	; 0x58
   215da:	bf14      	ite	ne
   215dc:	250a      	movne	r5, #10
   215de:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   215e0:	46aa      	mov	sl, r5
   215e2:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   215e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   215ea:	4652      	mov	r2, sl
   215ec:	465b      	mov	r3, fp
   215ee:	4630      	mov	r0, r6
   215f0:	4639      	mov	r1, r7
   215f2:	f7ea fe75 	bl	c2e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   215f6:	2a09      	cmp	r2, #9
   215f8:	b2d3      	uxtb	r3, r2
   215fa:	d81f      	bhi.n	2163c <encode_uint+0x7e>
   215fc:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   215fe:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21600:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   21602:	bf08      	it	eq
   21604:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   21606:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   2160a:	d301      	bcc.n	21610 <encode_uint+0x52>
   2160c:	45c8      	cmp	r8, r9
   2160e:	d812      	bhi.n	21636 <encode_uint+0x78>
	if (conv->flag_hash) {
   21610:	7823      	ldrb	r3, [r4, #0]
   21612:	069b      	lsls	r3, r3, #26
   21614:	d505      	bpl.n	21622 <encode_uint+0x64>
		if (radix == 8) {
   21616:	2d08      	cmp	r5, #8
   21618:	d116      	bne.n	21648 <encode_uint+0x8a>
			conv->altform_0 = true;
   2161a:	78a3      	ldrb	r3, [r4, #2]
   2161c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   21620:	70a3      	strb	r3, [r4, #2]
}
   21622:	4640      	mov	r0, r8
   21624:	b003      	add	sp, #12
   21626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2162a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   2162e:	2b70      	cmp	r3, #112	; 0x70
   21630:	e7d3      	b.n	215da <encode_uint+0x1c>
	switch (specifier) {
   21632:	2508      	movs	r5, #8
   21634:	e7d4      	b.n	215e0 <encode_uint+0x22>
		value /= radix;
   21636:	4606      	mov	r6, r0
   21638:	460f      	mov	r7, r1
   2163a:	e7d6      	b.n	215ea <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2163c:	9a01      	ldr	r2, [sp, #4]
   2163e:	2a19      	cmp	r2, #25
   21640:	bf94      	ite	ls
   21642:	3337      	addls	r3, #55	; 0x37
   21644:	3357      	addhi	r3, #87	; 0x57
   21646:	e7da      	b.n	215fe <encode_uint+0x40>
		} else if (radix == 16) {
   21648:	2d10      	cmp	r5, #16
   2164a:	d1ea      	bne.n	21622 <encode_uint+0x64>
			conv->altform_0c = true;
   2164c:	78a3      	ldrb	r3, [r4, #2]
   2164e:	f043 0310 	orr.w	r3, r3, #16
   21652:	e7e5      	b.n	21620 <encode_uint+0x62>

00021654 <outs>:
{
   21654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21658:	4607      	mov	r7, r0
   2165a:	4688      	mov	r8, r1
   2165c:	4615      	mov	r5, r2
   2165e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21660:	4614      	mov	r4, r2
   21662:	42b4      	cmp	r4, r6
   21664:	eba4 0005 	sub.w	r0, r4, r5
   21668:	d302      	bcc.n	21670 <outs+0x1c>
   2166a:	b93e      	cbnz	r6, 2167c <outs+0x28>
   2166c:	7823      	ldrb	r3, [r4, #0]
   2166e:	b12b      	cbz	r3, 2167c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   21670:	4641      	mov	r1, r8
   21672:	f814 0b01 	ldrb.w	r0, [r4], #1
   21676:	47b8      	blx	r7
		if (rc < 0) {
   21678:	2800      	cmp	r0, #0
   2167a:	daf2      	bge.n	21662 <outs+0xe>
}
   2167c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021680 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   21680:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   21684:	4770      	bx	lr

00021686 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   21686:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   21688:	6985      	ldr	r5, [r0, #24]
{
   2168a:	4604      	mov	r4, r0
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   2168c:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2168e:	6907      	ldr	r7, [r0, #16]
   21690:	b185      	cbz	r5, 216b4 <ring_buf_put_claim+0x2e>
   21692:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   21694:	6823      	ldr	r3, [r4, #0]
   21696:	443b      	add	r3, r7
   21698:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   2169a:	4290      	cmp	r0, r2
   2169c:	bf28      	it	cs
   2169e:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   216a0:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   216a2:	42b8      	cmp	r0, r7
   216a4:	bf28      	it	cs
   216a6:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   216a8:	6963      	ldr	r3, [r4, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   216aa:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   216ac:	441d      	add	r5, r3
   216ae:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   216b0:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   216b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   216b4:	fbb6 f5f7 	udiv	r5, r6, r7
   216b8:	fb07 6515 	mls	r5, r7, r5, r6
   216bc:	e7ea      	b.n	21694 <ring_buf_put_claim+0xe>

000216be <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   216be:	6843      	ldr	r3, [r0, #4]
   216c0:	6902      	ldr	r2, [r0, #16]
   216c2:	4419      	add	r1, r3
   216c4:	6803      	ldr	r3, [r0, #0]
   216c6:	4413      	add	r3, r2
   216c8:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   216ca:	bf9a      	itte	ls
   216cc:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   216d0:	2000      	movls	r0, #0
		return -EINVAL;
   216d2:	f06f 0015 	mvnhi.w	r0, #21
}
   216d6:	4770      	bx	lr

000216d8 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   216d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   216dc:	4680      	mov	r8, r0
   216de:	460e      	mov	r6, r1
   216e0:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   216e2:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   216e4:	462a      	mov	r2, r5
   216e6:	a901      	add	r1, sp, #4
   216e8:	4640      	mov	r0, r8
   216ea:	f7ff ffcc 	bl	21686 <ring_buf_put_claim>
   216ee:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   216f0:	4602      	mov	r2, r0
   216f2:	4631      	mov	r1, r6
   216f4:	9801      	ldr	r0, [sp, #4]
   216f6:	f001 fcf2 	bl	230de <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   216fa:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   216fc:	4427      	add	r7, r4
		data += partial_size;
   216fe:	4426      	add	r6, r4
	} while (size && partial_size);
   21700:	d001      	beq.n	21706 <ring_buf_put+0x2e>
   21702:	2c00      	cmp	r4, #0
   21704:	d1ee      	bne.n	216e4 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   21706:	4639      	mov	r1, r7
   21708:	4640      	mov	r0, r8
   2170a:	f7ff ffd8 	bl	216be <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   2170e:	4638      	mov	r0, r7
   21710:	b002      	add	sp, #8
   21712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021716 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   21716:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   21718:	6985      	ldr	r5, [r0, #24]
{
   2171a:	4604      	mov	r4, r0
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   2171c:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2171e:	6903      	ldr	r3, [r0, #16]
   21720:	b185      	cbz	r5, 21744 <ring_buf_get_claim+0x2e>
   21722:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   21724:	6867      	ldr	r7, [r4, #4]
   21726:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   21728:	4290      	cmp	r0, r2
   2172a:	bf28      	it	cs
   2172c:	4610      	movcs	r0, r2
   2172e:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
   21730:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   21732:	42b8      	cmp	r0, r7
   21734:	bf28      	it	cs
   21736:	4638      	movcs	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
   21738:	6963      	ldr	r3, [r4, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   2173a:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   2173c:	441d      	add	r5, r3
   2173e:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   21740:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
   21742:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   21744:	fbb6 f5f3 	udiv	r5, r6, r3
   21748:	fb03 6515 	mls	r5, r3, r5, r6
   2174c:	e7ea      	b.n	21724 <ring_buf_get_claim+0xe>

0002174e <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   2174e:	6803      	ldr	r3, [r0, #0]
{
   21750:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   21752:	4419      	add	r1, r3
   21754:	6843      	ldr	r3, [r0, #4]
{
   21756:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   21758:	4299      	cmp	r1, r3
   2175a:	d824      	bhi.n	217a6 <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   2175c:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   2175e:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   21760:	f7ff ff8e 	bl	21680 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   21764:	6823      	ldr	r3, [r4, #0]
   21766:	4298      	cmp	r0, r3
   21768:	d81b      	bhi.n	217a2 <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   2176a:	6923      	ldr	r3, [r4, #16]
   2176c:	fbb0 f0f3 	udiv	r0, r0, r3
   21770:	4358      	muls	r0, r3
	__asm__ volatile(
   21772:	f04f 0320 	mov.w	r3, #32
   21776:	f3ef 8211 	mrs	r2, BASEPRI
   2177a:	f383 8811 	msr	BASEPRI, r3
   2177e:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   21782:	6863      	ldr	r3, [r4, #4]
   21784:	1a1b      	subs	r3, r3, r0
   21786:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   21788:	6823      	ldr	r3, [r4, #0]
   2178a:	1a1b      	subs	r3, r3, r0
   2178c:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   2178e:	68e3      	ldr	r3, [r4, #12]
   21790:	1a1b      	subs	r3, r3, r0
   21792:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   21794:	68a3      	ldr	r3, [r4, #8]
   21796:	1a18      	subs	r0, r3, r0
   21798:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   2179a:	f382 8811 	msr	BASEPRI, r2
   2179e:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   217a2:	2000      	movs	r0, #0
   217a4:	e001      	b.n	217aa <ring_buf_get_finish+0x5c>
		return -EINVAL;
   217a6:	f06f 0015 	mvn.w	r0, #21
}
   217aa:	bd10      	pop	{r4, pc}

000217ac <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   217ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   217b0:	4680      	mov	r8, r0
   217b2:	460e      	mov	r6, r1
   217b4:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   217b6:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   217b8:	462a      	mov	r2, r5
   217ba:	a901      	add	r1, sp, #4
   217bc:	4640      	mov	r0, r8
   217be:	f7ff ffaa 	bl	21716 <ring_buf_get_claim>
   217c2:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
   217c4:	4602      	mov	r2, r0
   217c6:	9901      	ldr	r1, [sp, #4]
   217c8:	4630      	mov	r0, r6
   217ca:	f001 fc88 	bl	230de <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   217ce:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   217d0:	4427      	add	r7, r4
		data += partial_size;
   217d2:	4426      	add	r6, r4
	} while (size && partial_size);
   217d4:	d001      	beq.n	217da <ring_buf_get+0x2e>
   217d6:	2c00      	cmp	r4, #0
   217d8:	d1ee      	bne.n	217b8 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   217da:	4639      	mov	r1, r7
   217dc:	4640      	mov	r0, r8
   217de:	f7ff ffb6 	bl	2174e <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   217e2:	4638      	mov	r0, r7
   217e4:	b002      	add	sp, #8
   217e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000217ea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   217ea:	4770      	bx	lr

000217ec <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   217ec:	f7fd bc64 	b.w	1f0b8 <SystemInit>

000217f0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   217f0:	2300      	movs	r3, #0
	list->head = NULL;
   217f2:	e9c0 3300 	strd	r3, r3, [r0]
}
   217f6:	4770      	bx	lr

000217f8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   217f8:	6803      	ldr	r3, [r0, #0]
   217fa:	b923      	cbnz	r3, 21806 <log_list_add_tail+0xe>
		list->head = msg;
   217fc:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   217fe:	2300      	movs	r3, #0
	list->tail = msg;
   21800:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   21802:	600b      	str	r3, [r1, #0]
}
   21804:	4770      	bx	lr
		list->tail->next = msg;
   21806:	6843      	ldr	r3, [r0, #4]
   21808:	6019      	str	r1, [r3, #0]
   2180a:	e7f8      	b.n	217fe <log_list_add_tail+0x6>

0002180c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2180c:	6800      	ldr	r0, [r0, #0]
   2180e:	4770      	bx	lr

00021810 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   21810:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   21812:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   21814:	b108      	cbz	r0, 2181a <log_list_head_get+0xa>
		list->head = list->head->next;
   21816:	6802      	ldr	r2, [r0, #0]
   21818:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   2181a:	4770      	bx	lr

0002181c <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   2181c:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2181e:	f7f9 f9f3 	bl	1ac08 <log_msg_chunk_alloc>

	if (msg != NULL) {
   21822:	b118      	cbz	r0, 2182c <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   21824:	2301      	movs	r3, #1
   21826:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21828:	2300      	movs	r3, #0
   2182a:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2182c:	bd08      	pop	{r3, pc}

0002182e <k_cycle_get_32_wrapper>:
   2182e:	f7fb bfc7 	b.w	1d7c0 <z_timer_cycle_get_32>

00021832 <dummy_timestamp>:
   21832:	2000      	movs	r0, #0
   21834:	4770      	bx	lr

00021836 <z_log_get_s_mask>:
{
   21836:	b5f0      	push	{r4, r5, r6, r7, lr}
   21838:	4605      	mov	r5, r0
	uint32_t mask = 0;
   2183a:	2000      	movs	r0, #0
				mask |= BIT(arg);
   2183c:	2701      	movs	r7, #1
	uint32_t arg = 0;
   2183e:	4603      	mov	r3, r0
	bool arm = false;
   21840:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   21842:	f815 4b01 	ldrb.w	r4, [r5], #1
   21846:	b10c      	cbz	r4, 2184c <z_log_get_s_mask+0x16>
   21848:	428b      	cmp	r3, r1
   2184a:	d300      	bcc.n	2184e <z_log_get_s_mask+0x18>
}
   2184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   2184e:	2c25      	cmp	r4, #37	; 0x25
   21850:	d102      	bne.n	21858 <z_log_get_s_mask+0x22>
			arm = !arm;
   21852:	f082 0201 	eor.w	r2, r2, #1
   21856:	e7f4      	b.n	21842 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   21858:	2a00      	cmp	r2, #0
   2185a:	d0f2      	beq.n	21842 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2185c:	f044 0620 	orr.w	r6, r4, #32
   21860:	3e61      	subs	r6, #97	; 0x61
   21862:	2e19      	cmp	r6, #25
   21864:	d8ed      	bhi.n	21842 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   21866:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   21868:	bf04      	itt	eq
   2186a:	fa07 f203 	lsleq.w	r2, r7, r3
   2186e:	4310      	orreq	r0, r2
			arg++;
   21870:	3301      	adds	r3, #1
			arm = false;
   21872:	2200      	movs	r2, #0
   21874:	e7e5      	b.n	21842 <z_log_get_s_mask+0xc>

00021876 <log_backend_disable>:
	backend->cb->active = false;
   21876:	2100      	movs	r1, #0
   21878:	6843      	ldr	r3, [r0, #4]
   2187a:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   2187c:	f7f8 bf64 	b.w	1a748 <backend_filter_set>

00021880 <log_0>:
{
   21880:	b538      	push	{r3, r4, r5, lr}
   21882:	4605      	mov	r5, r0
   21884:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   21886:	f7ff ffc9 	bl	2181c <z_log_msg_std_alloc>

	if (msg != NULL) {
   2188a:	b128      	cbz	r0, 21898 <log_0+0x18>
		msg_finalize(msg, src_level);
   2188c:	4621      	mov	r1, r4
		msg->str = str;
   2188e:	6105      	str	r5, [r0, #16]
}
   21890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   21894:	f7f9 b8da 	b.w	1aa4c <msg_finalize>
}
   21898:	bd38      	pop	{r3, r4, r5, pc}

0002189a <log_1>:
{
   2189a:	b570      	push	{r4, r5, r6, lr}
   2189c:	4606      	mov	r6, r0
   2189e:	460d      	mov	r5, r1
   218a0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   218a2:	f7ff ffbb 	bl	2181c <z_log_msg_std_alloc>

	if (msg != NULL) {
   218a6:	b158      	cbz	r0, 218c0 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   218a8:	2101      	movs	r1, #1
   218aa:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   218ac:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   218ae:	f361 1207 	bfi	r2, r1, #4, #4
   218b2:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   218b4:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   218b6:	6145      	str	r5, [r0, #20]
}
   218b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   218bc:	f7f9 b8c6 	b.w	1aa4c <msg_finalize>
}
   218c0:	bd70      	pop	{r4, r5, r6, pc}

000218c2 <log_2>:
{
   218c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   218c6:	4680      	mov	r8, r0
   218c8:	460f      	mov	r7, r1
   218ca:	4616      	mov	r6, r2
   218cc:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   218ce:	f7ff ffa5 	bl	2181c <z_log_msg_std_alloc>

	if (msg != NULL) {
   218d2:	b168      	cbz	r0, 218f0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   218d4:	2202      	movs	r2, #2
   218d6:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   218d8:	4629      	mov	r1, r5
   218da:	f362 1307 	bfi	r3, r2, #4, #4
   218de:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   218e0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   218e4:	f8c0 8010 	str.w	r8, [r0, #16]
}
   218e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   218ec:	f7f9 b8ae 	b.w	1aa4c <msg_finalize>
}
   218f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000218f4 <log_3>:
{
   218f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   218f8:	4680      	mov	r8, r0
   218fa:	460f      	mov	r7, r1
   218fc:	4616      	mov	r6, r2
   218fe:	461d      	mov	r5, r3
   21900:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21904:	f7ff ff8a 	bl	2181c <z_log_msg_std_alloc>

	if (msg != NULL) {
   21908:	b170      	cbz	r0, 21928 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2190a:	2203      	movs	r2, #3
   2190c:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2190e:	4649      	mov	r1, r9
   21910:	f362 1307 	bfi	r3, r2, #4, #4
   21914:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   21916:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   2191a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   2191e:	61c5      	str	r5, [r0, #28]
}
   21920:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   21924:	f7f9 b892 	b.w	1aa4c <msg_finalize>
}
   21928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002192c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2192c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21930:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21932:	8903      	ldrh	r3, [r0, #8]
{
   21934:	460e      	mov	r6, r1
   21936:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   21938:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   2193c:	42a2      	cmp	r2, r4
{
   2193e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   21942:	d803      	bhi.n	2194c <log_msg_hexdump_data_op+0x20>
		*length = 0;
   21944:	2300      	movs	r3, #0
   21946:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   21948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2194c:	680b      	ldr	r3, [r1, #0]
   2194e:	4423      	add	r3, r4
   21950:	4293      	cmp	r3, r2
		*length = available_len - offset;
   21952:	bf84      	itt	hi
   21954:	1b13      	subhi	r3, r2, r4
   21956:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21958:	2a0c      	cmp	r2, #12
	req_len = *length;
   2195a:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2195e:	d92a      	bls.n	219b6 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   21960:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   21962:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   21966:	d82d      	bhi.n	219c4 <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21968:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   2196a:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2196c:	454a      	cmp	r2, r9
   2196e:	bf28      	it	cs
   21970:	464a      	movcs	r2, r9
   21972:	4420      	add	r0, r4
   21974:	4615      	mov	r5, r2
		if (put_op) {
   21976:	b317      	cbz	r7, 219be <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   21978:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   2197a:	f001 fbb0 	bl	230de <memcpy>
		req_len -= cpy_len;
   2197e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   21982:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   21984:	f1b9 0f00 	cmp.w	r9, #0
   21988:	d0de      	beq.n	21948 <log_msg_hexdump_data_op+0x1c>
   2198a:	f1b8 0f00 	cmp.w	r8, #0
   2198e:	d0db      	beq.n	21948 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   21990:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   21994:	454d      	cmp	r5, r9
   21996:	bf28      	it	cs
   21998:	464d      	movcs	r5, r9
		if (put_op) {
   2199a:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   2199c:	462a      	mov	r2, r5
   2199e:	4440      	add	r0, r8
		if (put_op) {
   219a0:	b1bf      	cbz	r7, 219d2 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   219a2:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   219a4:	f001 fb9b 	bl	230de <memcpy>
		offset = 0;
   219a8:	2400      	movs	r4, #0
		cont = cont->next;
   219aa:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   219ae:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   219b2:	442e      	add	r6, r5
   219b4:	e7e6      	b.n	21984 <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   219b6:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   219ba:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   219bc:	e7d6      	b.n	2196c <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   219be:	4601      	mov	r1, r0
   219c0:	4630      	mov	r0, r6
   219c2:	e7da      	b.n	2197a <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   219c4:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   219c6:	2c1b      	cmp	r4, #27
   219c8:	d9dc      	bls.n	21984 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   219ca:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   219ce:	3c1c      	subs	r4, #28
   219d0:	e7f9      	b.n	219c6 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   219d2:	4601      	mov	r1, r0
   219d4:	4630      	mov	r0, r6
   219d6:	e7e5      	b.n	219a4 <log_msg_hexdump_data_op+0x78>

000219d8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   219d8:	3004      	adds	r0, #4
   219da:	e8d0 3fef 	ldaex	r3, [r0]
   219de:	3301      	adds	r3, #1
   219e0:	e8c0 3fe2 	stlex	r2, r3, [r0]
   219e4:	2a00      	cmp	r2, #0
   219e6:	d1f8      	bne.n	219da <log_msg_get+0x2>
}
   219e8:	4770      	bx	lr

000219ea <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   219ea:	7a40      	ldrb	r0, [r0, #9]
}
   219ec:	0900      	lsrs	r0, r0, #4
   219ee:	4770      	bx	lr

000219f0 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   219f0:	7a43      	ldrb	r3, [r0, #9]
   219f2:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   219f6:	ea4f 1213 	mov.w	r2, r3, lsr #4
   219fa:	d216      	bcs.n	21a2a <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   219fc:	2a03      	cmp	r2, #3
   219fe:	d803      	bhi.n	21a08 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   21a00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   21a04:	6948      	ldr	r0, [r1, #20]
   21a06:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   21a08:	2901      	cmp	r1, #1
   21a0a:	d803      	bhi.n	21a14 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   21a0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   21a10:	6988      	ldr	r0, [r1, #24]
   21a12:	4770      	bx	lr
	cont = msg->payload.ext.next;
   21a14:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   21a16:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   21a18:	2906      	cmp	r1, #6
   21a1a:	d803      	bhi.n	21a24 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   21a1c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21a20:	6848      	ldr	r0, [r1, #4]
   21a22:	4770      	bx	lr
		cont = cont->next;
   21a24:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   21a26:	3907      	subs	r1, #7
		cont = cont->next;
   21a28:	e7f6      	b.n	21a18 <log_msg_arg_get+0x28>
		return 0;
   21a2a:	2000      	movs	r0, #0
}
   21a2c:	4770      	bx	lr

00021a2e <log_msg_put>:
{
   21a2e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21a30:	1d02      	adds	r2, r0, #4
   21a32:	e8d2 1fef 	ldaex	r1, [r2]
   21a36:	3901      	subs	r1, #1
   21a38:	e8c2 1fec 	stlex	ip, r1, [r2]
   21a3c:	f1bc 0f00 	cmp.w	ip, #0
   21a40:	d1f7      	bne.n	21a32 <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   21a42:	685b      	ldr	r3, [r3, #4]
   21a44:	b90b      	cbnz	r3, 21a4a <log_msg_put+0x1c>
		msg_free(msg);
   21a46:	f7f9 b8f3 	b.w	1ac30 <msg_free>
}
   21a4a:	4770      	bx	lr

00021a4c <log_msg_str_get>:
}
   21a4c:	6900      	ldr	r0, [r0, #16]
   21a4e:	4770      	bx	lr

00021a50 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   21a50:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   21a52:	2400      	movs	r4, #0
   21a54:	9400      	str	r4, [sp, #0]
   21a56:	f7ff ff69 	bl	2192c <log_msg_hexdump_data_op>
}
   21a5a:	b002      	add	sp, #8
   21a5c:	bd10      	pop	{r4, pc}

00021a5e <buffer_write>:
{
   21a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21a60:	4606      	mov	r6, r0
   21a62:	460d      	mov	r5, r1
   21a64:	4614      	mov	r4, r2
   21a66:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   21a68:	4621      	mov	r1, r4
   21a6a:	4628      	mov	r0, r5
   21a6c:	463a      	mov	r2, r7
   21a6e:	47b0      	blx	r6
	} while (len != 0);
   21a70:	1a24      	subs	r4, r4, r0
		buf += processed;
   21a72:	4405      	add	r5, r0
	} while (len != 0);
   21a74:	d1f8      	bne.n	21a68 <buffer_write+0xa>
}
   21a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021a78 <std_print>:
{
   21a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21a7c:	b08e      	sub	sp, #56	; 0x38
   21a7e:	af0e      	add	r7, sp, #56	; 0x38
   21a80:	4680      	mov	r8, r0
   21a82:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   21a84:	f7ff ffe2 	bl	21a4c <log_msg_str_get>
   21a88:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   21a8a:	4640      	mov	r0, r8
   21a8c:	f7ff ffad 	bl	219ea <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   21a90:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   21a94:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   21a96:	0083      	lsls	r3, r0, #2
   21a98:	3307      	adds	r3, #7
   21a9a:	f023 0307 	bic.w	r3, r3, #7
   21a9e:	ebad 0d03 	sub.w	sp, sp, r3
   21aa2:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   21aa4:	45d1      	cmp	r9, sl
   21aa6:	d116      	bne.n	21ad6 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   21aa8:	4640      	mov	r0, r8
   21aaa:	f7ff ff9e 	bl	219ea <log_msg_nargs_get>
   21aae:	280f      	cmp	r0, #15
   21ab0:	d81e      	bhi.n	21af0 <std_print+0x78>
   21ab2:	e8df f010 	tbh	[pc, r0, lsl #1]
   21ab6:	0019      	.short	0x0019
   21ab8:	00260020 	.word	0x00260020
   21abc:	0036002d 	.word	0x0036002d
   21ac0:	004e0041 	.word	0x004e0041
   21ac4:	006e005d 	.word	0x006e005d
   21ac8:	00960081 	.word	0x00960081
   21acc:	00c600ad 	.word	0x00c600ad
   21ad0:	00fe00e1 	.word	0x00fe00e1
   21ad4:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   21ad6:	4649      	mov	r1, r9
   21ad8:	4640      	mov	r0, r8
   21ada:	f7ff ff89 	bl	219f0 <log_msg_arg_get>
   21ade:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   21ae2:	f109 0901 	add.w	r9, r9, #1
   21ae6:	e7dd      	b.n	21aa4 <std_print+0x2c>
		print_formatted(log_output, str);
   21ae8:	4631      	mov	r1, r6
   21aea:	4628      	mov	r0, r5
   21aec:	f7f9 f8de 	bl	1acac <print_formatted>
}
   21af0:	46bd      	mov	sp, r7
   21af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   21af6:	4631      	mov	r1, r6
   21af8:	4628      	mov	r0, r5
   21afa:	6822      	ldr	r2, [r4, #0]
   21afc:	f7f9 f8d6 	bl	1acac <print_formatted>
		break;
   21b00:	e7f6      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   21b02:	4631      	mov	r1, r6
   21b04:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b08:	4628      	mov	r0, r5
   21b0a:	f7f9 f8cf 	bl	1acac <print_formatted>
		break;
   21b0e:	e7ef      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   21b10:	68a3      	ldr	r3, [r4, #8]
   21b12:	4631      	mov	r1, r6
   21b14:	9300      	str	r3, [sp, #0]
   21b16:	4628      	mov	r0, r5
   21b18:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b1c:	f7f9 f8c6 	bl	1acac <print_formatted>
		break;
   21b20:	e7e6      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21b22:	68e3      	ldr	r3, [r4, #12]
   21b24:	4631      	mov	r1, r6
   21b26:	9301      	str	r3, [sp, #4]
   21b28:	68a3      	ldr	r3, [r4, #8]
   21b2a:	4628      	mov	r0, r5
   21b2c:	9300      	str	r3, [sp, #0]
   21b2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b32:	f7f9 f8bb 	bl	1acac <print_formatted>
		break;
   21b36:	e7db      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21b38:	6923      	ldr	r3, [r4, #16]
   21b3a:	4631      	mov	r1, r6
   21b3c:	9302      	str	r3, [sp, #8]
   21b3e:	68e3      	ldr	r3, [r4, #12]
   21b40:	4628      	mov	r0, r5
   21b42:	9301      	str	r3, [sp, #4]
   21b44:	68a3      	ldr	r3, [r4, #8]
   21b46:	9300      	str	r3, [sp, #0]
   21b48:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b4c:	f7f9 f8ae 	bl	1acac <print_formatted>
		break;
   21b50:	e7ce      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21b52:	6963      	ldr	r3, [r4, #20]
   21b54:	4631      	mov	r1, r6
   21b56:	9303      	str	r3, [sp, #12]
   21b58:	6923      	ldr	r3, [r4, #16]
   21b5a:	4628      	mov	r0, r5
   21b5c:	9302      	str	r3, [sp, #8]
   21b5e:	68e3      	ldr	r3, [r4, #12]
   21b60:	9301      	str	r3, [sp, #4]
   21b62:	68a3      	ldr	r3, [r4, #8]
   21b64:	9300      	str	r3, [sp, #0]
   21b66:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b6a:	f7f9 f89f 	bl	1acac <print_formatted>
		break;
   21b6e:	e7bf      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21b70:	69a3      	ldr	r3, [r4, #24]
   21b72:	4631      	mov	r1, r6
   21b74:	9304      	str	r3, [sp, #16]
   21b76:	6963      	ldr	r3, [r4, #20]
   21b78:	4628      	mov	r0, r5
   21b7a:	9303      	str	r3, [sp, #12]
   21b7c:	6923      	ldr	r3, [r4, #16]
   21b7e:	9302      	str	r3, [sp, #8]
   21b80:	68e3      	ldr	r3, [r4, #12]
   21b82:	9301      	str	r3, [sp, #4]
   21b84:	68a3      	ldr	r3, [r4, #8]
   21b86:	9300      	str	r3, [sp, #0]
   21b88:	e9d4 2300 	ldrd	r2, r3, [r4]
   21b8c:	f7f9 f88e 	bl	1acac <print_formatted>
		break;
   21b90:	e7ae      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21b92:	69e3      	ldr	r3, [r4, #28]
   21b94:	4631      	mov	r1, r6
   21b96:	9305      	str	r3, [sp, #20]
   21b98:	69a3      	ldr	r3, [r4, #24]
   21b9a:	4628      	mov	r0, r5
   21b9c:	9304      	str	r3, [sp, #16]
   21b9e:	6963      	ldr	r3, [r4, #20]
   21ba0:	9303      	str	r3, [sp, #12]
   21ba2:	6923      	ldr	r3, [r4, #16]
   21ba4:	9302      	str	r3, [sp, #8]
   21ba6:	68e3      	ldr	r3, [r4, #12]
   21ba8:	9301      	str	r3, [sp, #4]
   21baa:	68a3      	ldr	r3, [r4, #8]
   21bac:	9300      	str	r3, [sp, #0]
   21bae:	e9d4 2300 	ldrd	r2, r3, [r4]
   21bb2:	f7f9 f87b 	bl	1acac <print_formatted>
		break;
   21bb6:	e79b      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21bb8:	6a23      	ldr	r3, [r4, #32]
   21bba:	4631      	mov	r1, r6
   21bbc:	9306      	str	r3, [sp, #24]
   21bbe:	69e3      	ldr	r3, [r4, #28]
   21bc0:	4628      	mov	r0, r5
   21bc2:	9305      	str	r3, [sp, #20]
   21bc4:	69a3      	ldr	r3, [r4, #24]
   21bc6:	9304      	str	r3, [sp, #16]
   21bc8:	6963      	ldr	r3, [r4, #20]
   21bca:	9303      	str	r3, [sp, #12]
   21bcc:	6923      	ldr	r3, [r4, #16]
   21bce:	9302      	str	r3, [sp, #8]
   21bd0:	68e3      	ldr	r3, [r4, #12]
   21bd2:	9301      	str	r3, [sp, #4]
   21bd4:	68a3      	ldr	r3, [r4, #8]
   21bd6:	9300      	str	r3, [sp, #0]
   21bd8:	e9d4 2300 	ldrd	r2, r3, [r4]
   21bdc:	f7f9 f866 	bl	1acac <print_formatted>
		break;
   21be0:	e786      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21be4:	4631      	mov	r1, r6
   21be6:	9307      	str	r3, [sp, #28]
   21be8:	6a23      	ldr	r3, [r4, #32]
   21bea:	4628      	mov	r0, r5
   21bec:	9306      	str	r3, [sp, #24]
   21bee:	69e3      	ldr	r3, [r4, #28]
   21bf0:	9305      	str	r3, [sp, #20]
   21bf2:	69a3      	ldr	r3, [r4, #24]
   21bf4:	9304      	str	r3, [sp, #16]
   21bf6:	6963      	ldr	r3, [r4, #20]
   21bf8:	9303      	str	r3, [sp, #12]
   21bfa:	6923      	ldr	r3, [r4, #16]
   21bfc:	9302      	str	r3, [sp, #8]
   21bfe:	68e3      	ldr	r3, [r4, #12]
   21c00:	9301      	str	r3, [sp, #4]
   21c02:	68a3      	ldr	r3, [r4, #8]
   21c04:	9300      	str	r3, [sp, #0]
   21c06:	e9d4 2300 	ldrd	r2, r3, [r4]
   21c0a:	f7f9 f84f 	bl	1acac <print_formatted>
		break;
   21c0e:	e76f      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c12:	4631      	mov	r1, r6
   21c14:	9308      	str	r3, [sp, #32]
   21c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c18:	4628      	mov	r0, r5
   21c1a:	9307      	str	r3, [sp, #28]
   21c1c:	6a23      	ldr	r3, [r4, #32]
   21c1e:	9306      	str	r3, [sp, #24]
   21c20:	69e3      	ldr	r3, [r4, #28]
   21c22:	9305      	str	r3, [sp, #20]
   21c24:	69a3      	ldr	r3, [r4, #24]
   21c26:	9304      	str	r3, [sp, #16]
   21c28:	6963      	ldr	r3, [r4, #20]
   21c2a:	9303      	str	r3, [sp, #12]
   21c2c:	6923      	ldr	r3, [r4, #16]
   21c2e:	9302      	str	r3, [sp, #8]
   21c30:	68e3      	ldr	r3, [r4, #12]
   21c32:	9301      	str	r3, [sp, #4]
   21c34:	68a3      	ldr	r3, [r4, #8]
   21c36:	9300      	str	r3, [sp, #0]
   21c38:	e9d4 2300 	ldrd	r2, r3, [r4]
   21c3c:	f7f9 f836 	bl	1acac <print_formatted>
		break;
   21c40:	e756      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21c42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21c44:	4631      	mov	r1, r6
   21c46:	9309      	str	r3, [sp, #36]	; 0x24
   21c48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c4a:	4628      	mov	r0, r5
   21c4c:	9308      	str	r3, [sp, #32]
   21c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c50:	9307      	str	r3, [sp, #28]
   21c52:	6a23      	ldr	r3, [r4, #32]
   21c54:	9306      	str	r3, [sp, #24]
   21c56:	69e3      	ldr	r3, [r4, #28]
   21c58:	9305      	str	r3, [sp, #20]
   21c5a:	69a3      	ldr	r3, [r4, #24]
   21c5c:	9304      	str	r3, [sp, #16]
   21c5e:	6963      	ldr	r3, [r4, #20]
   21c60:	9303      	str	r3, [sp, #12]
   21c62:	6923      	ldr	r3, [r4, #16]
   21c64:	9302      	str	r3, [sp, #8]
   21c66:	68e3      	ldr	r3, [r4, #12]
   21c68:	9301      	str	r3, [sp, #4]
   21c6a:	68a3      	ldr	r3, [r4, #8]
   21c6c:	9300      	str	r3, [sp, #0]
   21c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
   21c72:	f7f9 f81b 	bl	1acac <print_formatted>
		break;
   21c76:	e73b      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21c7a:	4631      	mov	r1, r6
   21c7c:	930a      	str	r3, [sp, #40]	; 0x28
   21c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21c80:	4628      	mov	r0, r5
   21c82:	9309      	str	r3, [sp, #36]	; 0x24
   21c84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c86:	9308      	str	r3, [sp, #32]
   21c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21c8a:	9307      	str	r3, [sp, #28]
   21c8c:	6a23      	ldr	r3, [r4, #32]
   21c8e:	9306      	str	r3, [sp, #24]
   21c90:	69e3      	ldr	r3, [r4, #28]
   21c92:	9305      	str	r3, [sp, #20]
   21c94:	69a3      	ldr	r3, [r4, #24]
   21c96:	9304      	str	r3, [sp, #16]
   21c98:	6963      	ldr	r3, [r4, #20]
   21c9a:	9303      	str	r3, [sp, #12]
   21c9c:	6923      	ldr	r3, [r4, #16]
   21c9e:	9302      	str	r3, [sp, #8]
   21ca0:	68e3      	ldr	r3, [r4, #12]
   21ca2:	9301      	str	r3, [sp, #4]
   21ca4:	68a3      	ldr	r3, [r4, #8]
   21ca6:	9300      	str	r3, [sp, #0]
   21ca8:	e9d4 2300 	ldrd	r2, r3, [r4]
   21cac:	f7f8 fffe 	bl	1acac <print_formatted>
		break;
   21cb0:	e71e      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21cb4:	4631      	mov	r1, r6
   21cb6:	930b      	str	r3, [sp, #44]	; 0x2c
   21cb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21cba:	4628      	mov	r0, r5
   21cbc:	930a      	str	r3, [sp, #40]	; 0x28
   21cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21cc0:	9309      	str	r3, [sp, #36]	; 0x24
   21cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21cc4:	9308      	str	r3, [sp, #32]
   21cc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21cc8:	9307      	str	r3, [sp, #28]
   21cca:	6a23      	ldr	r3, [r4, #32]
   21ccc:	9306      	str	r3, [sp, #24]
   21cce:	69e3      	ldr	r3, [r4, #28]
   21cd0:	9305      	str	r3, [sp, #20]
   21cd2:	69a3      	ldr	r3, [r4, #24]
   21cd4:	9304      	str	r3, [sp, #16]
   21cd6:	6963      	ldr	r3, [r4, #20]
   21cd8:	9303      	str	r3, [sp, #12]
   21cda:	6923      	ldr	r3, [r4, #16]
   21cdc:	9302      	str	r3, [sp, #8]
   21cde:	68e3      	ldr	r3, [r4, #12]
   21ce0:	9301      	str	r3, [sp, #4]
   21ce2:	68a3      	ldr	r3, [r4, #8]
   21ce4:	9300      	str	r3, [sp, #0]
   21ce6:	e9d4 2300 	ldrd	r2, r3, [r4]
   21cea:	f7f8 ffdf 	bl	1acac <print_formatted>
		break;
   21cee:	e6ff      	b.n	21af0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   21cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   21cf2:	4631      	mov	r1, r6
   21cf4:	930c      	str	r3, [sp, #48]	; 0x30
   21cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21cf8:	4628      	mov	r0, r5
   21cfa:	930b      	str	r3, [sp, #44]	; 0x2c
   21cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21cfe:	930a      	str	r3, [sp, #40]	; 0x28
   21d00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   21d02:	9309      	str	r3, [sp, #36]	; 0x24
   21d04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21d06:	9308      	str	r3, [sp, #32]
   21d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21d0a:	9307      	str	r3, [sp, #28]
   21d0c:	6a23      	ldr	r3, [r4, #32]
   21d0e:	9306      	str	r3, [sp, #24]
   21d10:	69e3      	ldr	r3, [r4, #28]
   21d12:	9305      	str	r3, [sp, #20]
   21d14:	69a3      	ldr	r3, [r4, #24]
   21d16:	9304      	str	r3, [sp, #16]
   21d18:	6963      	ldr	r3, [r4, #20]
   21d1a:	9303      	str	r3, [sp, #12]
   21d1c:	6923      	ldr	r3, [r4, #16]
   21d1e:	9302      	str	r3, [sp, #8]
   21d20:	68e3      	ldr	r3, [r4, #12]
   21d22:	9301      	str	r3, [sp, #4]
   21d24:	68a3      	ldr	r3, [r4, #8]
   21d26:	9300      	str	r3, [sp, #0]
   21d28:	e9d4 2300 	ldrd	r2, r3, [r4]
   21d2c:	f7f8 ffbe 	bl	1acac <print_formatted>
}
   21d30:	e6de      	b.n	21af0 <std_print+0x78>

00021d32 <log_output_flush>:
		     log_output->control_block->offset,
   21d32:	6842      	ldr	r2, [r0, #4]
{
   21d34:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   21d36:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   21d3a:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   21d3c:	6881      	ldr	r1, [r0, #8]
   21d3e:	6800      	ldr	r0, [r0, #0]
   21d40:	f7ff fe8d 	bl	21a5e <buffer_write>
	log_output->control_block->offset = 0;
   21d44:	2200      	movs	r2, #0
   21d46:	6863      	ldr	r3, [r4, #4]
   21d48:	601a      	str	r2, [r3, #0]
}
   21d4a:	bd10      	pop	{r4, pc}

00021d4c <out_func>:
{
   21d4c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   21d4e:	684b      	ldr	r3, [r1, #4]
{
   21d50:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   21d52:	681a      	ldr	r2, [r3, #0]
   21d54:	68cb      	ldr	r3, [r1, #12]
{
   21d56:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   21d58:	429a      	cmp	r2, r3
   21d5a:	d102      	bne.n	21d62 <out_func+0x16>
		log_output_flush(out_ctx);
   21d5c:	4608      	mov	r0, r1
   21d5e:	f7ff ffe8 	bl	21d32 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21d62:	6863      	ldr	r3, [r4, #4]
   21d64:	e8d3 2fef 	ldaex	r2, [r3]
   21d68:	1c51      	adds	r1, r2, #1
   21d6a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   21d6e:	2800      	cmp	r0, #0
   21d70:	d1f8      	bne.n	21d64 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   21d72:	68a3      	ldr	r3, [r4, #8]
}
   21d74:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   21d76:	549d      	strb	r5, [r3, r2]
}
   21d78:	bd38      	pop	{r3, r4, r5, pc}

00021d7a <log_halt>:
   21d7a:	2000      	movs	r0, #0
   21d7c:	684b      	ldr	r3, [r1, #4]
   21d7e:	7158      	strb	r0, [r3, #5]
}
   21d80:	4770      	bx	lr

00021d82 <log_go>:
	backend->cb->active = true;
   21d82:	2201      	movs	r2, #1
   21d84:	684b      	ldr	r3, [r1, #4]
}
   21d86:	2000      	movs	r0, #0
   21d88:	715a      	strb	r2, [r3, #5]
   21d8a:	4770      	bx	lr

00021d8c <cmd_log_self_halt>:
{
   21d8c:	b510      	push	{r4, lr}
   21d8e:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   21d90:	f7f9 fa94 	bl	1b2bc <shell_state_precheck>
   21d94:	b120      	cbz	r0, 21da0 <cmd_log_self_halt+0x14>
	backend->cb->active = false;
   21d96:	2200      	movs	r2, #0
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   21d98:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   21d9a:	681b      	ldr	r3, [r3, #0]
   21d9c:	685b      	ldr	r3, [r3, #4]
   21d9e:	715a      	strb	r2, [r3, #5]
}
   21da0:	2000      	movs	r0, #0
   21da2:	bd10      	pop	{r4, pc}

00021da4 <cmd_log_self_go>:
{
   21da4:	b510      	push	{r4, lr}
   21da6:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   21da8:	f7f9 fa88 	bl	1b2bc <shell_state_precheck>
   21dac:	b120      	cbz	r0, 21db8 <cmd_log_self_go+0x14>
	backend->cb->active = true;
   21dae:	2201      	movs	r2, #1
	return log_go(shell, shell->log_backend->backend, argc, argv);
   21db0:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   21db2:	681b      	ldr	r3, [r3, #0]
   21db4:	685b      	ldr	r3, [r3, #4]
   21db6:	715a      	strb	r2, [r3, #5]
}
   21db8:	2000      	movs	r0, #0
   21dba:	bd10      	pop	{r4, pc}

00021dbc <cmd_log_self_status>:
{
   21dbc:	b570      	push	{r4, r5, r6, lr}
   21dbe:	4604      	mov	r4, r0
   21dc0:	460d      	mov	r5, r1
   21dc2:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   21dc4:	f7f9 fa7a 	bl	1b2bc <shell_state_precheck>
   21dc8:	b130      	cbz	r0, 21dd8 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   21dca:	69e1      	ldr	r1, [r4, #28]
   21dcc:	4633      	mov	r3, r6
   21dce:	462a      	mov	r2, r5
   21dd0:	4620      	mov	r0, r4
   21dd2:	6809      	ldr	r1, [r1, #0]
   21dd4:	f7f9 f9b0 	bl	1b138 <log_status>
}
   21dd8:	2000      	movs	r0, #0
   21dda:	bd70      	pop	{r4, r5, r6, pc}

00021ddc <cmd_log_self_enable>:
{
   21ddc:	b570      	push	{r4, r5, r6, lr}
   21dde:	4604      	mov	r4, r0
   21de0:	460d      	mov	r5, r1
   21de2:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   21de4:	f7f9 fa6a 	bl	1b2bc <shell_state_precheck>
   21de8:	b140      	cbz	r0, 21dfc <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   21dea:	69e1      	ldr	r1, [r4, #28]
   21dec:	4633      	mov	r3, r6
   21dee:	462a      	mov	r2, r5
   21df0:	4620      	mov	r0, r4
}
   21df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   21df6:	6809      	ldr	r1, [r1, #0]
   21df8:	f7f9 bad8 	b.w	1b3ac <log_enable>
}
   21dfc:	bd70      	pop	{r4, r5, r6, pc}

00021dfe <log_disable>:
{
   21dfe:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   21e00:	2400      	movs	r4, #0
   21e02:	3304      	adds	r3, #4
   21e04:	9400      	str	r4, [sp, #0]
   21e06:	3a01      	subs	r2, #1
   21e08:	f7f9 fa68 	bl	1b2dc <filters_set>
}
   21e0c:	4620      	mov	r0, r4
   21e0e:	b002      	add	sp, #8
   21e10:	bd10      	pop	{r4, pc}

00021e12 <cmd_log_self_disable>:
{
   21e12:	b570      	push	{r4, r5, r6, lr}
   21e14:	4604      	mov	r4, r0
   21e16:	460d      	mov	r5, r1
   21e18:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   21e1a:	f7f9 fa4f 	bl	1b2bc <shell_state_precheck>
   21e1e:	b140      	cbz	r0, 21e32 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   21e20:	69e1      	ldr	r1, [r4, #28]
   21e22:	4633      	mov	r3, r6
   21e24:	462a      	mov	r2, r5
   21e26:	4620      	mov	r0, r4
}
   21e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   21e2c:	6809      	ldr	r1, [r1, #0]
   21e2e:	f7ff bfe6 	b.w	21dfe <log_disable>
}
   21e32:	bd70      	pop	{r4, r5, r6, pc}

00021e34 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   21e34:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_WARM);
   21e36:	2000      	movs	r0, #0
   21e38:	f7fb f974 	bl	1d124 <sys_reboot>
	return 0;
}
   21e3c:	2000      	movs	r0, #0
   21e3e:	bd08      	pop	{r3, pc}

00021e40 <cmd_kernel_reboot_cold>:

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   21e40:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_COLD);
   21e42:	2001      	movs	r0, #1
   21e44:	f7fb f96e 	bl	1d124 <sys_reboot>
	return 0;
}
   21e48:	2000      	movs	r0, #0
   21e4a:	bd08      	pop	{r3, pc}

00021e4c <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   21e4c:	b510      	push	{r4, lr}
   21e4e:	4604      	mov	r4, r0
   21e50:	b08e      	sub	sp, #56	; 0x38
   21e52:	2001      	movs	r0, #1
   21e54:	4669      	mov	r1, sp
   21e56:	f7fc fc89 	bl	1e76c <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   21e5a:	a905      	add	r1, sp, #20
   21e5c:	4668      	mov	r0, sp
   21e5e:	f7fc fba3 	bl	1e5a8 <gmtime_r>

	date_print(shell, &tm);
   21e62:	4620      	mov	r0, r4
   21e64:	a905      	add	r1, sp, #20
   21e66:	f7f9 fc87 	bl	1b778 <date_print>

	return 0;
}
   21e6a:	2000      	movs	r0, #0
   21e6c:	b00e      	add	sp, #56	; 0x38
   21e6e:	bd10      	pop	{r4, pc}

00021e70 <shell_signal_handle>:
{
   21e70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   21e72:	6885      	ldr	r5, [r0, #8]
   21e74:	0109      	lsls	r1, r1, #4
   21e76:	f501 7117 	add.w	r1, r1, #604	; 0x25c
{
   21e7a:	4604      	mov	r4, r0
   21e7c:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   21e7e:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(signal, signaled, result);
   21e80:	4669      	mov	r1, sp
   21e82:	4628      	mov	r0, r5
   21e84:	aa01      	add	r2, sp, #4
   21e86:	f001 fecf 	bl	23c28 <z_impl_k_poll_signal_check>
	if (set) {
   21e8a:	9b00      	ldr	r3, [sp, #0]
   21e8c:	b11b      	cbz	r3, 21e96 <shell_signal_handle+0x26>
	signal->signaled = 0U;
   21e8e:	2300      	movs	r3, #0
		handler(shell);
   21e90:	4620      	mov	r0, r4
   21e92:	60ab      	str	r3, [r5, #8]
   21e94:	47b0      	blx	r6
}
   21e96:	b002      	add	sp, #8
   21e98:	bd70      	pop	{r4, r5, r6, pc}

00021e9a <kill_handler>:
{
   21e9a:	b538      	push	{r3, r4, r5, lr}
	if (flag_processing_get(shell)) {
   21e9c:	6883      	ldr	r3, [r0, #8]
{
   21e9e:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.processing == 1;
   21ea0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
	if (flag_processing_get(shell)) {
   21ea4:	071b      	lsls	r3, r3, #28
   21ea6:	d40d      	bmi.n	21ec4 <kill_handler+0x2a>
		shell_log_backend_disable(shell->log_backend);
   21ea8:	69c0      	ldr	r0, [r0, #28]
   21eaa:	f000 fe79 	bl	22ba0 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   21eae:	6860      	ldr	r0, [r4, #4]
   21eb0:	6803      	ldr	r3, [r0, #0]
   21eb2:	685b      	ldr	r3, [r3, #4]
   21eb4:	4798      	blx	r3
	if (err != 0) {
   21eb6:	4605      	mov	r5, r0
   21eb8:	b920      	cbnz	r0, 21ec4 <kill_handler+0x2a>
	shell_history_purge(shell->history);
   21eba:	68e0      	ldr	r0, [r4, #12]
   21ebc:	f000 fd30 	bl	22920 <shell_history_purge>
	shell->ctx->state = state;
   21ec0:	68a3      	ldr	r3, [r4, #8]
   21ec2:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
   21ec4:	f7fe f944 	bl	20150 <z_impl_k_current_get>
}
   21ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   21ecc:	f7fc b956 	b.w	1e17c <z_impl_k_thread_abort>

00021ed0 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   21ed0:	f7fd bd68 	b.w	1f9a4 <z_impl_k_mutex_unlock>

00021ed4 <shell_strlen>:
{
   21ed4:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   21ed6:	b110      	cbz	r0, 21ede <shell_strlen+0xa>
   21ed8:	f001 f8b8 	bl	2304c <strlen>
   21edc:	b280      	uxth	r0, r0
}
   21ede:	bd08      	pop	{r3, pc}

00021ee0 <shell_raw_fprintf>:
{
   21ee0:	b40e      	push	{r1, r2, r3}
   21ee2:	b503      	push	{r0, r1, lr}
   21ee4:	aa03      	add	r2, sp, #12
   21ee6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   21eea:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   21eec:	f7fa fbe4 	bl	1c6b8 <shell_fprintf_fmt>
}
   21ef0:	b002      	add	sp, #8
   21ef2:	f85d eb04 	ldr.w	lr, [sp], #4
   21ef6:	b003      	add	sp, #12
   21ef8:	4770      	bx	lr

00021efa <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   21efa:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   21efc:	b920      	cbnz	r0, 21f08 <transport_evt_handler+0xe>
   21efe:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	return z_impl_k_poll_signal_raise(signal, result);
   21f02:	2100      	movs	r1, #0
   21f04:	f7fe bd5e 	b.w	209c4 <z_impl_k_poll_signal_raise>
   21f08:	f503 7023 	add.w	r0, r3, #652	; 0x28c
   21f0c:	e7f9      	b.n	21f02 <transport_evt_handler+0x8>

00021f0e <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   21f0e:	f7fd bcd1 	b.w	1f8b4 <z_impl_k_mutex_lock>

00021f12 <shell_log_process>:
	int signaled = 0;
   21f12:	2300      	movs	r3, #0
{
   21f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21f16:	4604      	mov	r4, r0
	int signaled = 0;
   21f18:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
   21f1a:	4620      	mov	r0, r4
   21f1c:	f000 fb32 	bl	22584 <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
   21f20:	69e0      	ldr	r0, [r4, #28]
   21f22:	f000 fe4d 	bl	22bc0 <shell_log_backend_process>
   21f26:	4605      	mov	r5, r0
		shell_print_prompt_and_cmd(shell);
   21f28:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   21f2a:	68a6      	ldr	r6, [r4, #8]
		shell_print_prompt_and_cmd(shell);
   21f2c:	f7fa fd66 	bl	1c9fc <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   21f30:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
   21f32:	f506 7617 	add.w	r6, r6, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
   21f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   21f38:	b123      	cbz	r3, 21f44 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   21f3a:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   21f3e:	2100      	movs	r1, #0
   21f40:	f7fe f8e6 	bl	20110 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(signal, signaled, result);
   21f44:	4669      	mov	r1, sp
   21f46:	4630      	mov	r0, r6
   21f48:	aa01      	add	r2, sp, #4
   21f4a:	f001 fe6d 	bl	23c28 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   21f4e:	b115      	cbz	r5, 21f56 <shell_log_process+0x44>
   21f50:	9b00      	ldr	r3, [sp, #0]
   21f52:	2b00      	cmp	r3, #0
   21f54:	d0e1      	beq.n	21f1a <shell_log_process+0x8>
}
   21f56:	b002      	add	sp, #8
   21f58:	bd70      	pop	{r4, r5, r6, pc}

00021f5a <shell_vfprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, va_list args)
{
   21f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->ctx);
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	/* Sending a message to a non-active shell leads to a dead lock. */
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   21f5e:	6880      	ldr	r0, [r0, #8]
{
   21f60:	461f      	mov	r7, r3
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   21f62:	7903      	ldrb	r3, [r0, #4]
{
   21f64:	460d      	mov	r5, r1
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   21f66:	2b02      	cmp	r3, #2
{
   21f68:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   21f6a:	d006      	beq.n	21f7a <shell_vfprintf+0x20>
	shell->ctx->internal.flags.print_noinit = val ? 1 : 0;
   21f6c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   21f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   21f74:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	if (!flag_cmd_ctx_get(shell)) {
		shell_print_prompt_and_cmd(shell);
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
}
   21f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   21f7a:	f04f 32ff 	mov.w	r2, #4294967295
   21f7e:	f04f 33ff 	mov.w	r3, #4294967295
   21f82:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   21f86:	f7ff ffc2 	bl	21f0e <k_mutex_lock.constprop.0>
	if (!flag_cmd_ctx_get(shell)) {
   21f8a:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1;
   21f8c:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   21f90:	061a      	lsls	r2, r3, #24
   21f92:	d402      	bmi.n	21f9a <shell_vfprintf+0x40>
		shell_cmd_line_erase(shell);
   21f94:	4620      	mov	r0, r4
   21f96:	f000 faf5 	bl	22584 <shell_cmd_line_erase>
	shell_internal_vfprintf(shell, color, fmt, args);
   21f9a:	463b      	mov	r3, r7
   21f9c:	4632      	mov	r2, r6
   21f9e:	4629      	mov	r1, r5
   21fa0:	4620      	mov	r0, r4
   21fa2:	f000 fb40 	bl	22626 <shell_internal_vfprintf>
	if (!flag_cmd_ctx_get(shell)) {
   21fa6:	68a3      	ldr	r3, [r4, #8]
   21fa8:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   21fac:	061b      	lsls	r3, r3, #24
   21fae:	d402      	bmi.n	21fb6 <shell_vfprintf+0x5c>
		shell_print_prompt_and_cmd(shell);
   21fb0:	4620      	mov	r0, r4
   21fb2:	f7fa fd23 	bl	1c9fc <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   21fb6:	6960      	ldr	r0, [r4, #20]
   21fb8:	f000 f829 	bl	2200e <shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   21fbc:	68a0      	ldr	r0, [r4, #8]
}
   21fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   21fc2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   21fc6:	f7ff bf83 	b.w	21ed0 <k_mutex_unlock>

00021fca <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
   21fca:	b40c      	push	{r2, r3}
   21fcc:	b507      	push	{r0, r1, r2, lr}
   21fce:	ab04      	add	r3, sp, #16
   21fd0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;

	va_start(args, fmt);
   21fd4:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   21fd6:	f7ff ffc0 	bl	21f5a <shell_vfprintf>
	va_end(args);
}
   21fda:	b003      	add	sp, #12
   21fdc:	f85d eb04 	ldr.w	lr, [sp], #4
   21fe0:	b002      	add	sp, #8
   21fe2:	4770      	bx	lr

00021fe4 <shell_help>:

	return 0;
}

void shell_help(const struct shell *shell)
{
   21fe4:	b510      	push	{r4, lr}
   21fe6:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   21fe8:	6880      	ldr	r0, [r0, #8]
   21fea:	f04f 32ff 	mov.w	r2, #4294967295
   21fee:	f04f 33ff 	mov.w	r3, #4294967295
   21ff2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   21ff6:	f7ff ff8a 	bl	21f0e <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   21ffa:	4620      	mov	r0, r4
   21ffc:	f7f9 fcba 	bl	1b974 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   22000:	68a0      	ldr	r0, [r4, #8]
}
   22002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   22006:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   2200a:	f7ff bf61 	b.w	21ed0 <k_mutex_unlock>

0002200e <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   2200e:	6902      	ldr	r2, [r0, #16]
{
   22010:	b510      	push	{r4, lr}
   22012:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   22014:	6883      	ldr	r3, [r0, #8]
   22016:	6812      	ldr	r2, [r2, #0]
   22018:	6801      	ldr	r1, [r0, #0]
   2201a:	68c0      	ldr	r0, [r0, #12]
   2201c:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   2201e:	2200      	movs	r2, #0
   22020:	6923      	ldr	r3, [r4, #16]
   22022:	601a      	str	r2, [r3, #0]
}
   22024:	bd10      	pop	{r4, pc}

00022026 <out_func>:
{
   22026:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   22028:	68cb      	ldr	r3, [r1, #12]
{
   2202a:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2202c:	7c1b      	ldrb	r3, [r3, #16]
{
   2202e:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   22030:	2b02      	cmp	r3, #2
   22032:	d104      	bne.n	2203e <out_func+0x18>
   22034:	280a      	cmp	r0, #10
   22036:	d102      	bne.n	2203e <out_func+0x18>
		(void)out_func('\r', ctx);
   22038:	200d      	movs	r0, #13
   2203a:	f7ff fff4 	bl	22026 <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   2203e:	6923      	ldr	r3, [r4, #16]
   22040:	6822      	ldr	r2, [r4, #0]
   22042:	681b      	ldr	r3, [r3, #0]
   22044:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   22046:	6922      	ldr	r2, [r4, #16]
   22048:	6813      	ldr	r3, [r2, #0]
   2204a:	3301      	adds	r3, #1
   2204c:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   2204e:	6862      	ldr	r2, [r4, #4]
   22050:	4293      	cmp	r3, r2
   22052:	d102      	bne.n	2205a <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
   22054:	4620      	mov	r0, r4
   22056:	f7ff ffda 	bl	2200e <shell_fprintf_buffer_flush>
}
   2205a:	2000      	movs	r0, #0
   2205c:	bd38      	pop	{r3, r4, r5, pc}

0002205e <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2205e:	2820      	cmp	r0, #32
   22060:	d005      	beq.n	2206e <isspace+0x10>
   22062:	3809      	subs	r0, #9
   22064:	2804      	cmp	r0, #4
   22066:	bf8c      	ite	hi
   22068:	2000      	movhi	r0, #0
   2206a:	2001      	movls	r0, #1
   2206c:	4770      	bx	lr
   2206e:	2001      	movs	r0, #1
}
   22070:	4770      	bx	lr

00022072 <shell_strlen>:
{
   22072:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   22074:	b110      	cbz	r0, 2207c <shell_strlen+0xa>
   22076:	f000 ffe9 	bl	2304c <strlen>
   2207a:	b280      	uxth	r0, r0
}
   2207c:	bd08      	pop	{r3, pc}

0002207e <column_span_with_buffer_offsets_get>:
{
   2207e:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   22080:	7b04      	ldrb	r4, [r0, #12]
   22082:	8943      	ldrh	r3, [r0, #10]
   22084:	4422      	add	r2, r4
   22086:	4421      	add	r1, r4
   22088:	fbb2 f0f3 	udiv	r0, r2, r3
   2208c:	fbb1 f4f3 	udiv	r4, r1, r3
   22090:	fb03 2010 	mls	r0, r3, r0, r2
   22094:	fb03 1114 	mls	r1, r3, r4, r1
}
   22098:	1a40      	subs	r0, r0, r1
   2209a:	bd10      	pop	{r4, pc}

0002209c <row_span_with_buffer_offsets_get>:
{
   2209c:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   2209e:	7b04      	ldrb	r4, [r0, #12]
   220a0:	8943      	ldrh	r3, [r0, #10]
   220a2:	4421      	add	r1, r4
   220a4:	1910      	adds	r0, r2, r4
   220a6:	fbb0 f0f3 	udiv	r0, r0, r3
   220aa:	fbb1 f1f3 	udiv	r1, r1, r3
}
   220ae:	1a40      	subs	r0, r0, r1
   220b0:	bd10      	pop	{r4, pc}

000220b2 <shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   220b2:	7b03      	ldrb	r3, [r0, #12]
{
   220b4:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   220b6:	8944      	ldrh	r4, [r0, #10]
   220b8:	4419      	add	r1, r3
   220ba:	fbb1 f5f4 	udiv	r5, r1, r4
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   220be:	441a      	add	r2, r3
   220c0:	fbb2 f3f4 	udiv	r3, r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   220c4:	fb04 1115 	mls	r1, r4, r5, r1
   220c8:	3101      	adds	r1, #1
   220ca:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   220cc:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   220ce:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   220d2:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   220d4:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   220d6:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   220d8:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   220da:	8043      	strh	r3, [r0, #2]
}
   220dc:	bd30      	pop	{r4, r5, pc}

000220de <shell_make_argv>:
{
   220de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   220e2:	2500      	movs	r5, #0
{
   220e4:	4606      	mov	r6, r0
   220e6:	460f      	mov	r7, r1
   220e8:	4614      	mov	r4, r2
   220ea:	4698      	mov	r8, r3
	*argc = 0;
   220ec:	6005      	str	r5, [r0, #0]
		c = *cmd;
   220ee:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   220f0:	2800      	cmp	r0, #0
   220f2:	f000 80b5 	beq.w	22260 <shell_make_argv+0x182>
		if (isspace((int) c)) {
   220f6:	f7ff ffb2 	bl	2205e <isspace>
   220fa:	b118      	cbz	r0, 22104 <shell_make_argv+0x26>
			*cmd++ = '\0';
   220fc:	2300      	movs	r3, #0
   220fe:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   22102:	e7f4      	b.n	220ee <shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   22104:	6832      	ldr	r2, [r6, #0]
   22106:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   22108:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   2210a:	6033      	str	r3, [r6, #0]
   2210c:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   22110:	f000 80a6 	beq.w	22260 <shell_make_argv+0x182>
	char quote = 0;
   22114:	4605      	mov	r5, r0
		c = *cmd;
   22116:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   2211a:	f1b9 0f00 	cmp.w	r9, #0
   2211e:	d0e6      	beq.n	220ee <shell_make_argv+0x10>
		if (!quote) {
   22120:	2d00      	cmp	r5, #0
   22122:	f040 8089 	bne.w	22238 <shell_make_argv+0x15a>
			switch (c) {
   22126:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   2212a:	d006      	beq.n	2213a <shell_make_argv+0x5c>
   2212c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   22130:	f000 808a 	beq.w	22248 <shell_make_argv+0x16a>
   22134:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   22138:	d176      	bne.n	22228 <shell_make_argv+0x14a>
						shell_strlen(cmd));
   2213a:	4620      	mov	r0, r4
   2213c:	f7ff ff99 	bl	22072 <shell_strlen>
				memmove(cmd, cmd + 1,
   22140:	1c61      	adds	r1, r4, #1
						shell_strlen(cmd));
   22142:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   22144:	4620      	mov	r0, r4
   22146:	f000 ffb3 	bl	230b0 <memmove>
				continue;
   2214a:	464d      	mov	r5, r9
   2214c:	e7e3      	b.n	22116 <shell_make_argv+0x38>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
   2214e:	4620      	mov	r0, r4
   22150:	f7ff ff8f 	bl	22072 <shell_strlen>
   22154:	1c61      	adds	r1, r4, #1
   22156:	4602      	mov	r2, r0
   22158:	4620      	mov	r0, r4
   2215a:	f000 ffa9 	bl	230b0 <memmove>
			quote = 0;
   2215e:	2500      	movs	r5, #0
			continue;
   22160:	e7d9      	b.n	22116 <shell_make_argv+0x38>
			if (t == '0') {
   22162:	2930      	cmp	r1, #48	; 0x30
   22164:	d125      	bne.n	221b2 <shell_make_argv+0xd4>
   22166:	2302      	movs	r3, #2
				uint8_t v = 0U;
   22168:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   2216c:	5ce1      	ldrb	r1, [r4, r3]
   2216e:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
   22172:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   22176:	b2d0      	uxtb	r0, r2
   22178:	2807      	cmp	r0, #7
   2217a:	d817      	bhi.n	221ac <shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
   2217c:	3301      	adds	r3, #1
   2217e:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   22182:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   22184:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   22188:	d1f0      	bne.n	2216c <shell_make_argv+0x8e>
   2218a:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
   2218c:	4620      	mov	r0, r4
   2218e:	f7ff ff70 	bl	22072 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   22192:	f109 3bff 	add.w	fp, r9, #4294967295
   22196:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
   22198:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   2219a:	4659      	mov	r1, fp
   2219c:	4620      	mov	r0, r4
   2219e:	eba2 0209 	sub.w	r2, r2, r9
   221a2:	f000 ff85 	bl	230b0 <memmove>
					*cmd++ = v;
   221a6:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   221aa:	e7b4      	b.n	22116 <shell_make_argv+0x38>
				if (i > 2) {
   221ac:	f1b9 0f02 	cmp.w	r9, #2
   221b0:	d1ec      	bne.n	2218c <shell_make_argv+0xae>
			if (t == 'x') {
   221b2:	2978      	cmp	r1, #120	; 0x78
   221b4:	d13e      	bne.n	22234 <shell_make_argv+0x156>
   221b6:	2302      	movs	r3, #2
				uint8_t v = 0U;
   221b8:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   221bc:	5ce2      	ldrb	r2, [r4, r3]
   221be:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
   221c0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   221c4:	fa5f fc81 	uxtb.w	ip, r1
   221c8:	f1bc 0f09 	cmp.w	ip, #9
   221cc:	d819      	bhi.n	22202 <shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   221ce:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   221d2:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   221d4:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   221d8:	d111      	bne.n	221fe <shell_make_argv+0x120>
   221da:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
   221de:	4620      	mov	r0, r4
   221e0:	f7ff ff47 	bl	22072 <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   221e4:	f10b 3aff 	add.w	sl, fp, #4294967295
   221e8:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
   221ea:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   221ec:	4651      	mov	r1, sl
   221ee:	4620      	mov	r0, r4
   221f0:	eba2 020b 	sub.w	r2, r2, fp
   221f4:	f000 ff5c 	bl	230b0 <memmove>
					*cmd++ = v;
   221f8:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   221fc:	e78b      	b.n	22116 <shell_make_argv+0x38>
   221fe:	2303      	movs	r3, #3
   22200:	e7dc      	b.n	221bc <shell_make_argv+0xde>
					} else if ((t >= 'a') &&
   22202:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   22206:	2905      	cmp	r1, #5
   22208:	d803      	bhi.n	22212 <shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   2220a:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   2220c:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   22210:	e7df      	b.n	221d2 <shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
   22212:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   22216:	2905      	cmp	r1, #5
   22218:	d801      	bhi.n	2221e <shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   2221a:	3a37      	subs	r2, #55	; 0x37
   2221c:	e7f6      	b.n	2220c <shell_make_argv+0x12e>
				if (i > 2) {
   2221e:	2802      	cmp	r0, #2
   22220:	d008      	beq.n	22234 <shell_make_argv+0x156>
   22222:	f04f 0b03 	mov.w	fp, #3
   22226:	e7da      	b.n	221de <shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
   22228:	4648      	mov	r0, r9
   2222a:	f7ff ff18 	bl	2205e <isspace>
   2222e:	2800      	cmp	r0, #0
   22230:	f47f af5d 	bne.w	220ee <shell_make_argv+0x10>
		cmd += 1;
   22234:	3401      	adds	r4, #1
   22236:	e76e      	b.n	22116 <shell_make_argv+0x38>
		if (quote == c) {
   22238:	45a9      	cmp	r9, r5
   2223a:	d088      	beq.n	2214e <shell_make_argv+0x70>
		if (quote && c == '\\') {
   2223c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   22240:	d1f8      	bne.n	22234 <shell_make_argv+0x156>
   22242:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   22244:	428d      	cmp	r5, r1
   22246:	d18c      	bne.n	22162 <shell_make_argv+0x84>
						shell_strlen(cmd));
   22248:	4620      	mov	r0, r4
   2224a:	f7ff ff12 	bl	22072 <shell_strlen>
				memmove(cmd, cmd + 1,
   2224e:	f104 0901 	add.w	r9, r4, #1
						shell_strlen(cmd));
   22252:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   22254:	4649      	mov	r1, r9
   22256:	4620      	mov	r0, r4
   22258:	f000 ff2a 	bl	230b0 <memmove>
				cmd += 1;
   2225c:	464c      	mov	r4, r9
				continue;
   2225e:	e75a      	b.n	22116 <shell_make_argv+0x38>
}
   22260:	4628      	mov	r0, r5
   22262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022266 <shell_pattern_remove>:
{
   22266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22268:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   2226a:	4611      	mov	r1, r2
{
   2226c:	4615      	mov	r5, r2
   2226e:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   22270:	f000 fea1 	bl	22fb6 <strstr>
   22274:	4604      	mov	r4, r0
	uint16_t pattern_len = shell_strlen(pattern);
   22276:	4628      	mov	r0, r5
   22278:	f7ff fefb 	bl	22072 <shell_strlen>
   2227c:	4605      	mov	r5, r0
	if (!pattern_addr) {
   2227e:	b1c4      	cbz	r4, 222b2 <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   22280:	42a7      	cmp	r7, r4
   22282:	d207      	bcs.n	22294 <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   22284:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   22288:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   2228a:	bf02      	ittt	eq
   2228c:	3501      	addeq	r5, #1
   2228e:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   22290:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   22294:	4620      	mov	r0, r4
   22296:	f7ff feec 	bl	22072 <shell_strlen>
	*buff_len -= pattern_len;
   2229a:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2229c:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   2229e:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   222a0:	3201      	adds	r2, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   222a2:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
   222a4:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   222a6:	1961      	adds	r1, r4, r5
   222a8:	b292      	uxth	r2, r2
}
   222aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   222ae:	f000 beff 	b.w	230b0 <memmove>
}
   222b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000222b4 <shell_find_cmd>:
 */
const struct shell_static_entry *shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   222b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   222b8:	4605      	mov	r5, r0
   222ba:	4688      	mov	r8, r1
   222bc:	4617      	mov	r7, r2
	const struct shell_static_entry *entry;
	size_t idx = 0;
   222be:	2600      	movs	r6, #0

	while ((entry = shell_cmd_get(parent, idx++, dloc)) != NULL) {
   222c0:	4631      	mov	r1, r6
   222c2:	463a      	mov	r2, r7
   222c4:	4628      	mov	r0, r5
   222c6:	f7fa fa0b 	bl	1c6e0 <shell_cmd_get>
   222ca:	3601      	adds	r6, #1
   222cc:	4604      	mov	r4, r0
   222ce:	b128      	cbz	r0, 222dc <shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   222d0:	4640      	mov	r0, r8
   222d2:	6821      	ldr	r1, [r4, #0]
   222d4:	f000 fec1 	bl	2305a <strcmp>
   222d8:	2800      	cmp	r0, #0
   222da:	d1f1      	bne.n	222c0 <shell_find_cmd+0xc>
			return entry;
		}
	};

	return NULL;
}
   222dc:	4620      	mov	r0, r4
   222de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000222e2 <shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   222e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222e6:	461c      	mov	r4, r3
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
   222e8:	2300      	movs	r3, #0
{
   222ea:	460f      	mov	r7, r1
   222ec:	4616      	mov	r6, r2
   222ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
   222f2:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = SHELL_CMD_ROOT_LVL;
   222f6:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   222f8:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (shell_wildcard_character_exist(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   222fa:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   222fc:	42bb      	cmp	r3, r7
   222fe:	d21b      	bcs.n	22338 <shell_get_last_command+0x56>
			if (shell_wildcard_character_exist(argv[*match_arg])) {
   22300:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   22304:	f000 fcc4 	bl	22c90 <shell_wildcard_character_exist>
   22308:	6823      	ldr	r3, [r4, #0]
   2230a:	4682      	mov	sl, r0
   2230c:	b118      	cbz	r0, 22316 <shell_get_last_command+0x34>
				(*match_arg)++;
   2230e:	3301      	adds	r3, #1
				continue;
   22310:	4628      	mov	r0, r5
				(*match_arg)++;
   22312:	6023      	str	r3, [r4, #0]
				continue;
   22314:	e7f0      	b.n	222f8 <shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = shell_find_cmd(entry, argv[*match_arg], dloc);
   22316:	4642      	mov	r2, r8
   22318:	4628      	mov	r0, r5
   2231a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   2231e:	f7ff ffc9 	bl	222b4 <shell_find_cmd>
		if (entry) {
   22322:	b148      	cbz	r0, 22338 <shell_get_last_command+0x56>
			(*match_arg)++;
   22324:	6823      	ldr	r3, [r4, #0]
   22326:	1c5a      	adds	r2, r3, #1
   22328:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   2232a:	f1b9 0f00 	cmp.w	r9, #0
   2232e:	d0e3      	beq.n	222f8 <shell_get_last_command+0x16>
   22330:	4580      	cmp	r8, r0
   22332:	d1e1      	bne.n	222f8 <shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
   22334:	4655      	mov	r5, sl
			(*match_arg)--;
   22336:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
   22338:	4628      	mov	r0, r5
   2233a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002233e <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
   2233e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22342:	4606      	mov	r6, r0
	uint16_t len = shell_strlen(str);
   22344:	f7ff fe95 	bl	22072 <shell_strlen>
   22348:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   2234a:	bb56      	cbnz	r6, 223a2 <shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   2234c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   22350:	b14c      	cbz	r4, 22366 <shell_spaces_trim+0x28>
						len - j + 1);
   22352:	1c6a      	adds	r2, r5, #1
   22354:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
   22356:	3701      	adds	r7, #1
   22358:	1ad2      	subs	r2, r2, r3
   2235a:	19f0      	adds	r0, r6, r7
					len -= shift;
   2235c:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
   2235e:	f000 fea7 	bl	230b0 <memmove>
					shift = 0U;
   22362:	464c      	mov	r4, r9
					len -= shift;
   22364:	b2ad      	uxth	r5, r5
	for (uint16_t i = 0; i < len - 1; i++) {
   22366:	f108 0801 	add.w	r8, r8, #1
   2236a:	fa1f f388 	uxth.w	r3, r8
   2236e:	1e6a      	subs	r2, r5, #1
   22370:	4293      	cmp	r3, r2
   22372:	461f      	mov	r7, r3
   22374:	daea      	bge.n	2234c <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   22376:	5df0      	ldrb	r0, [r6, r7]
   22378:	f7ff fe71 	bl	2205e <isspace>
   2237c:	2800      	cmp	r0, #0
   2237e:	d0f2      	beq.n	22366 <shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   22380:	3301      	adds	r3, #1
   22382:	b29b      	uxth	r3, r3
   22384:	b29a      	uxth	r2, r3
   22386:	4295      	cmp	r5, r2
   22388:	d9ed      	bls.n	22366 <shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   2238a:	5cf0      	ldrb	r0, [r6, r3]
   2238c:	18f1      	adds	r1, r6, r3
   2238e:	f7ff fe66 	bl	2205e <isspace>
   22392:	4681      	mov	r9, r0
   22394:	1c5a      	adds	r2, r3, #1
   22396:	2800      	cmp	r0, #0
   22398:	d0da      	beq.n	22350 <shell_spaces_trim+0x12>
					shift++;
   2239a:	3401      	adds	r4, #1
   2239c:	4613      	mov	r3, r2
   2239e:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
   223a0:	e7f0      	b.n	22384 <shell_spaces_trim+0x46>
   223a2:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
   223a6:	4644      	mov	r4, r8
   223a8:	e7df      	b.n	2236a <shell_spaces_trim+0x2c>

000223aa <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
   223aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   223ac:	6884      	ldr	r4, [r0, #8]
{
   223ae:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   223b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   223b4:	b953      	cbnz	r3, 223cc <shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   223b6:	68ab      	ldr	r3, [r5, #8]
   223b8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   223ba:	869a      	strh	r2, [r3, #52]	; 0x34
}
   223bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   223be:	3a01      	subs	r2, #1
   223c0:	b292      	uxth	r2, r2
   223c2:	8662      	strh	r2, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
   223c4:	b922      	cbnz	r2, 223d0 <shell_cmd_trim+0x26>
			buff[0] = '\0';
   223c6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			return;
   223ca:	e7f4      	b.n	223b6 <shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   223cc:	f104 0638 	add.w	r6, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
   223d0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   223d2:	18b3      	adds	r3, r6, r2
   223d4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   223d8:	f7ff fe41 	bl	2205e <isspace>
   223dc:	4603      	mov	r3, r0
   223de:	2800      	cmp	r0, #0
   223e0:	d1ed      	bne.n	223be <shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   223e2:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   223e4:	b29f      	uxth	r7, r3
   223e6:	5df0      	ldrb	r0, [r6, r7]
   223e8:	fa16 f183 	uxtah	r1, r6, r3
   223ec:	f7ff fe37 	bl	2205e <isspace>
   223f0:	3301      	adds	r3, #1
   223f2:	2800      	cmp	r0, #0
   223f4:	d1f6      	bne.n	223e4 <shell_cmd_trim+0x3a>
	if (--i > 0) {
   223f6:	2f00      	cmp	r7, #0
   223f8:	d0dd      	beq.n	223b6 <shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   223fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   223fc:	4630      	mov	r0, r6
   223fe:	3301      	adds	r3, #1
   22400:	1bda      	subs	r2, r3, r7
   22402:	f000 fe55 	bl	230b0 <memmove>
		*buff_len = *buff_len - i;
   22406:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   22408:	1bdb      	subs	r3, r3, r7
   2240a:	8663      	strh	r3, [r4, #50]	; 0x32
   2240c:	e7d3      	b.n	223b6 <shell_cmd_trim+0xc>

0002240e <shell_raw_fprintf>:
{
   2240e:	b40e      	push	{r1, r2, r3}
   22410:	b503      	push	{r0, r1, lr}
   22412:	aa03      	add	r2, sp, #12
   22414:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22418:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   2241a:	f7fa f94d 	bl	1c6b8 <shell_fprintf_fmt>
}
   2241e:	b002      	add	sp, #8
   22420:	f85d eb04 	ldr.w	lr, [sp], #4
   22424:	b003      	add	sp, #12
   22426:	4770      	bx	lr

00022428 <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   22428:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   2242a:	b538      	push	{r3, r4, r5, lr}
   2242c:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   2242e:	6810      	ldr	r0, [r2, #0]
   22430:	8e55      	ldrh	r5, [r2, #50]	; 0x32
	return str == NULL ? 0U : (uint16_t)strlen(str);
   22432:	b110      	cbz	r0, 2243a <full_line_cmd.isra.0+0x12>
   22434:	f000 fe0a 	bl	2304c <strlen>
   22438:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2243a:	6822      	ldr	r2, [r4, #0]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   2243c:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2243e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   22440:	fbb3 f0f2 	udiv	r0, r3, r2
   22444:	fb02 3010 	mls	r0, r2, r0, r3
}
   22448:	fab0 f080 	clz	r0, r0
   2244c:	0940      	lsrs	r0, r0, #5
   2244e:	bd38      	pop	{r3, r4, r5, pc}

00022450 <shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   22450:	6882      	ldr	r2, [r0, #8]
{
   22452:	b538      	push	{r3, r4, r5, lr}
   22454:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   22456:	6810      	ldr	r0, [r2, #0]
   22458:	8e95      	ldrh	r5, [r2, #52]	; 0x34
   2245a:	b110      	cbz	r0, 22462 <shell_cursor_in_empty_line+0x12>
   2245c:	f000 fdf6 	bl	2304c <strlen>
   22460:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   22462:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   22464:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   22466:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   22468:	fbb3 f0f2 	udiv	r0, r3, r2
   2246c:	fb02 3010 	mls	r0, r2, r0, r3
}
   22470:	fab0 f080 	clz	r0, r0
   22474:	0940      	lsrs	r0, r0, #5
   22476:	bd38      	pop	{r3, r4, r5, pc}

00022478 <shell_op_cursor_move>:
{
   22478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2247a:	4604      	mov	r4, r0
   2247c:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   2247e:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   22480:	8e81      	ldrh	r1, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   22482:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   22484:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   22486:	440d      	add	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   22488:	f7ff fe13 	bl	220b2 <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   2248c:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2248e:	b2ad      	uxth	r5, r5
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   22490:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   22492:	462a      	mov	r2, r5
   22494:	3020      	adds	r0, #32
   22496:	f7ff fe01 	bl	2209c <row_span_with_buffer_offsets_get>
   2249a:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
   2249c:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
   2249e:	462a      	mov	r2, r5
   224a0:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   224a2:	3020      	adds	r0, #32
   224a4:	f7ff fdeb 	bl	2207e <column_span_with_buffer_offsets_get>
   224a8:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
   224aa:	4279      	negs	r1, r7
   224ac:	4620      	mov	r0, r4
   224ae:	f7fa f945 	bl	1c73c <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
   224b2:	4631      	mov	r1, r6
   224b4:	4620      	mov	r0, r4
   224b6:	f7fa f951 	bl	1c75c <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   224ba:	68a3      	ldr	r3, [r4, #8]
   224bc:	869d      	strh	r5, [r3, #52]	; 0x34
}
   224be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000224c0 <shell_op_cursor_word_move>:
{
   224c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   224c4:	1e0c      	subs	r4, r1, #0
{
   224c6:	4606      	mov	r6, r0
	if (val < 0) {
   224c8:	da32      	bge.n	22530 <shell_op_cursor_word_move+0x70>
		sign = -1;
   224ca:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
   224ce:	4264      	negs	r4, r4
   224d0:	b224      	sxth	r4, r4
		sign = -1;
   224d2:	b2af      	uxth	r7, r5
   224d4:	e022      	b.n	2251c <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   224d6:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
   224d8:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   224da:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
   224de:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
   224e2:	f103 0838 	add.w	r8, r3, #56	; 0x38
   224e6:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   224e8:	eba3 010e 	sub.w	r1, r3, lr
   224ec:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   224ee:	b90b      	cbnz	r3, 224f4 <shell_op_cursor_word_move+0x34>
   224f0:	1c6a      	adds	r2, r5, #1
   224f2:	d010      	beq.n	22516 <shell_op_cursor_word_move+0x56>
   224f4:	4599      	cmp	r9, r3
   224f6:	d101      	bne.n	224fc <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   224f8:	2d01      	cmp	r5, #1
   224fa:	d00c      	beq.n	22516 <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   224fc:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22500:	f042 0c20 	orr.w	ip, r2, #32
   22504:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   22508:	f1bc 0f19 	cmp.w	ip, #25
   2250c:	d90c      	bls.n	22528 <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2250e:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   22510:	2a09      	cmp	r2, #9
   22512:	d909      	bls.n	22528 <shell_op_cursor_word_move+0x68>
			if (found) {
   22514:	b148      	cbz	r0, 2252a <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
   22516:	4630      	mov	r0, r6
   22518:	f7ff ffae 	bl	22478 <shell_op_cursor_move>
	while (val--) {
   2251c:	3c01      	subs	r4, #1
   2251e:	b224      	sxth	r4, r4
   22520:	1c63      	adds	r3, r4, #1
   22522:	d1d8      	bne.n	224d6 <shell_op_cursor_word_move+0x16>
}
   22524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   22528:	2001      	movs	r0, #1
	while (1) {
   2252a:	443b      	add	r3, r7
   2252c:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   2252e:	e7db      	b.n	224e8 <shell_op_cursor_word_move+0x28>
		sign = 1;
   22530:	2501      	movs	r5, #1
   22532:	e7ce      	b.n	224d2 <shell_op_cursor_word_move+0x12>

00022534 <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   22534:	6883      	ldr	r3, [r0, #8]
   22536:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   22538:	4249      	negs	r1, r1
   2253a:	b209      	sxth	r1, r1
   2253c:	f7ff bf9c 	b.w	22478 <shell_op_cursor_move>

00022540 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   22540:	6883      	ldr	r3, [r0, #8]
   22542:	8e59      	ldrh	r1, [r3, #50]	; 0x32
   22544:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   22546:	1ac9      	subs	r1, r1, r3
   22548:	b209      	sxth	r1, r1
   2254a:	f7ff bf95 	b.w	22478 <shell_op_cursor_move>

0002254e <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   2254e:	6883      	ldr	r3, [r0, #8]
   22550:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   22552:	b11b      	cbz	r3, 2255c <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
   22554:	f04f 31ff 	mov.w	r1, #4294967295
   22558:	f7ff bf8e 	b.w	22478 <shell_op_cursor_move>
}
   2255c:	4770      	bx	lr

0002255e <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   2255e:	6883      	ldr	r3, [r0, #8]
   22560:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   22562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   22564:	429a      	cmp	r2, r3
   22566:	d202      	bcs.n	2256e <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
   22568:	2101      	movs	r1, #1
   2256a:	f7ff bf85 	b.w	22478 <shell_op_cursor_move>
}
   2256e:	4770      	bx	lr

00022570 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   22570:	6883      	ldr	r3, [r0, #8]
   22572:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   22574:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   22576:	4413      	add	r3, r2
   22578:	2200      	movs	r2, #0
   2257a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
   2257e:	6940      	ldr	r0, [r0, #20]
   22580:	f7fa b8d4 	b.w	1c72c <clear_eos.isra.0>

00022584 <shell_cmd_line_erase>:
{
   22584:	b510      	push	{r4, lr}
   22586:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   22588:	6880      	ldr	r0, [r0, #8]
   2258a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   2258c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   2258e:	3020      	adds	r0, #32
   22590:	f7ff fd8f 	bl	220b2 <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   22594:	68a3      	ldr	r3, [r4, #8]
	shell_op_cursor_horiz_move(shell,
   22596:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   22598:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
   2259a:	f1c1 0101 	rsb	r1, r1, #1
   2259e:	f7fa f8dd 	bl	1c75c <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   225a2:	68a3      	ldr	r3, [r4, #8]
   225a4:	4620      	mov	r0, r4
   225a6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   225a8:	3901      	subs	r1, #1
   225aa:	f7fa f8c7 	bl	1c73c <shell_op_cursor_vert_move>
	clear_eos(shell);
   225ae:	6960      	ldr	r0, [r4, #20]
}
   225b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
   225b4:	f7fa b8ba 	b.w	1c72c <clear_eos.isra.0>

000225b8 <shell_write>:
{
   225b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   225bc:	4605      	mov	r5, r0
   225be:	4688      	mov	r8, r1
   225c0:	4614      	mov	r4, r2
	size_t offset = 0;
   225c2:	2700      	movs	r7, #0
	while (length) {
   225c4:	b914      	cbnz	r4, 225cc <shell_write+0x14>
}
   225c6:	b002      	add	sp, #8
   225c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   225cc:	6868      	ldr	r0, [r5, #4]
   225ce:	4622      	mov	r2, r4
   225d0:	6803      	ldr	r3, [r0, #0]
   225d2:	eb08 0107 	add.w	r1, r8, r7
   225d6:	68de      	ldr	r6, [r3, #12]
   225d8:	ab01      	add	r3, sp, #4
   225da:	47b0      	blx	r6
		offset += tmp_cnt;
   225dc:	9e01      	ldr	r6, [sp, #4]
   225de:	4437      	add	r7, r6
		length -= tmp_cnt;
   225e0:	1ba4      	subs	r4, r4, r6
		if (tmp_cnt == 0 &&
   225e2:	2e00      	cmp	r6, #0
   225e4:	d1ee      	bne.n	225c4 <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   225e6:	68a8      	ldr	r0, [r5, #8]
   225e8:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
   225ea:	2b03      	cmp	r3, #3
   225ec:	d0ea      	beq.n	225c4 <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   225ee:	2b02      	cmp	r3, #2
   225f0:	d80c      	bhi.n	2260c <shell_write+0x54>
	return z_impl_k_poll(events, num_events, timeout);
   225f2:	f04f 32ff 	mov.w	r2, #4294967295
   225f6:	f04f 33ff 	mov.w	r3, #4294967295
   225fa:	2101      	movs	r1, #1
   225fc:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   22600:	f7fe f984 	bl	2090c <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   22604:	68ab      	ldr	r3, [r5, #8]
   22606:	f8c3 6294 	str.w	r6, [r3, #660]	; 0x294
   2260a:	e7db      	b.n	225c4 <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1;
   2260c:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
   22610:	06db      	lsls	r3, r3, #27
   22612:	d5fb      	bpl.n	2260c <shell_write+0x54>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   22614:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   22618:	f36f 1304 	bfc	r3, #4, #1
   2261c:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
}
   22620:	e7d0      	b.n	225c4 <shell_write+0xc>

00022622 <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
   22622:	f7ff bfc9 	b.w	225b8 <shell_write>

00022626 <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
   22626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22628:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
   2262a:	6881      	ldr	r1, [r0, #8]
{
   2262c:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
   2262e:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
{
   22632:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   22634:	079b      	lsls	r3, r3, #30
{
   22636:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   22638:	d517      	bpl.n	2266a <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
   2263a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   2263e:	42bb      	cmp	r3, r7
   22640:	d013      	beq.n	2266a <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   22642:	2202      	movs	r2, #2
   22644:	312e      	adds	r1, #46	; 0x2e
   22646:	a801      	add	r0, sp, #4
   22648:	f000 fd49 	bl	230de <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
   2264c:	4639      	mov	r1, r7
   2264e:	4620      	mov	r0, r4
   22650:	f7fa f8da 	bl	1c808 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   22654:	4629      	mov	r1, r5
   22656:	6960      	ldr	r0, [r4, #20]
   22658:	4632      	mov	r2, r6
   2265a:	f7fa f82d 	bl	1c6b8 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
   2265e:	4620      	mov	r0, r4
   22660:	a901      	add	r1, sp, #4
   22662:	f7fa f8f5 	bl	1c850 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   22666:	b003      	add	sp, #12
   22668:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   2266a:	4632      	mov	r2, r6
   2266c:	4629      	mov	r1, r5
   2266e:	6960      	ldr	r0, [r4, #20]
   22670:	f7fa f822 	bl	1c6b8 <shell_fprintf_fmt>
}
   22674:	e7f7      	b.n	22666 <shell_internal_vfprintf+0x40>

00022676 <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   22676:	b40c      	push	{r2, r3}
   22678:	b507      	push	{r0, r1, r2, lr}
   2267a:	ab04      	add	r3, sp, #16
   2267c:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
   22680:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   22682:	f7ff ffd0 	bl	22626 <shell_internal_vfprintf>
	va_end(args);
}
   22686:	b003      	add	sp, #12
   22688:	f85d eb04 	ldr.w	lr, [sp], #4
   2268c:	b002      	add	sp, #8
   2268e:	4770      	bx	lr

00022690 <data_insert>:
{
   22690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22694:	6886      	ldr	r6, [r0, #8]
{
   22696:	4607      	mov	r7, r0
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   22698:	8e75      	ldrh	r5, [r6, #50]	; 0x32
{
   2269a:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   2269c:	18ab      	adds	r3, r5, r2
   2269e:	2bff      	cmp	r3, #255	; 0xff
{
   226a0:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   226a2:	dc1f      	bgt.n	226e4 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   226a4:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   226a6:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   226a8:	3338      	adds	r3, #56	; 0x38
   226aa:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   226ac:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   226ae:	462a      	mov	r2, r5
   226b0:	4631      	mov	r1, r6
   226b2:	1930      	adds	r0, r6, r4
   226b4:	f000 fcfc 	bl	230b0 <memmove>
	memcpy(curr_pos, data, len);
   226b8:	4622      	mov	r2, r4
   226ba:	4641      	mov	r1, r8
   226bc:	4630      	mov	r0, r6
   226be:	f000 fd0e 	bl	230de <memcpy>
	shell->ctx->cmd_buff_len += len;
   226c2:	68ba      	ldr	r2, [r7, #8]
   226c4:	8e53      	ldrh	r3, [r2, #50]	; 0x32
   226c6:	4423      	add	r3, r4
   226c8:	b29b      	uxth	r3, r3
   226ca:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   226cc:	4413      	add	r3, r2
   226ce:	2200      	movs	r2, #0
   226d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   226d4:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1;
   226d6:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
   226da:	0749      	lsls	r1, r1, #29
   226dc:	d404      	bmi.n	226e8 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   226de:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   226e0:	4414      	add	r4, r2
   226e2:	869c      	strh	r4, [r3, #52]	; 0x34
}
   226e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   226e8:	4629      	mov	r1, r5
   226ea:	4638      	mov	r0, r7
}
   226ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   226f0:	f7fa b928 	b.w	1c944 <reprint_from_cursor>

000226f4 <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   226f4:	f7ff bfcc 	b.w	22690 <data_insert>

000226f8 <shell_op_char_delete>:
{
   226f8:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   226fa:	6883      	ldr	r3, [r0, #8]
{
   226fc:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   226fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
   22700:	8e98      	ldrh	r0, [r3, #52]	; 0x34
   22702:	1a24      	subs	r4, r4, r0
   22704:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   22706:	b18c      	cbz	r4, 2272c <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   22708:	3038      	adds	r0, #56	; 0x38
   2270a:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   2270c:	4622      	mov	r2, r4
   2270e:	1c41      	adds	r1, r0, #1
   22710:	f000 fcce 	bl	230b0 <memmove>
	--shell->ctx->cmd_buff_len;
   22714:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
   22716:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   22718:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   2271a:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
   2271c:	3b01      	subs	r3, #1
   2271e:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   22720:	b289      	uxth	r1, r1
   22722:	2201      	movs	r2, #1
}
   22724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   22728:	f7fa b90c 	b.w	1c944 <reprint_from_cursor>
}
   2272c:	bd38      	pop	{r3, r4, r5, pc}

0002272e <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   2272e:	6883      	ldr	r3, [r0, #8]
{
   22730:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   22732:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
   22734:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   22736:	b152      	cbz	r2, 2274e <shell_op_char_backspace+0x20>
   22738:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   2273a:	b143      	cbz	r3, 2274e <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
   2273c:	f04f 31ff 	mov.w	r1, #4294967295
   22740:	f7ff fe9a 	bl	22478 <shell_op_cursor_move>
	shell_op_char_delete(shell);
   22744:	4620      	mov	r0, r4
}
   22746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
   2274a:	f7ff bfd5 	b.w	226f8 <shell_op_char_delete>
}
   2274e:	bd10      	pop	{r4, pc}

00022750 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   22750:	6883      	ldr	r3, [r0, #8]
   22752:	6a1b      	ldr	r3, [r3, #32]
   22754:	b103      	cbz	r3, 22758 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   22756:	4718      	bx	r3
}
   22758:	4770      	bx	lr

0002275a <uninit>:
{
   2275a:	b508      	push	{r3, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   2275c:	6843      	ldr	r3, [r0, #4]
   2275e:	681b      	ldr	r3, [r3, #0]
   22760:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   22762:	6883      	ldr	r3, [r0, #8]
   22764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   22766:	b103      	cbz	r3, 2276a <uninit+0x10>
		api->irq_rx_disable(dev);
   22768:	4798      	blx	r3
}
   2276a:	2000      	movs	r0, #0
   2276c:	bd08      	pop	{r3, pc}

0002276e <read>:
{
   2276e:	b510      	push	{r4, lr}
   22770:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   22772:	6843      	ldr	r3, [r0, #4]
   22774:	68d8      	ldr	r0, [r3, #12]
   22776:	f7ff f819 	bl	217ac <ring_buf_get>
   2277a:	6020      	str	r0, [r4, #0]
}
   2277c:	2000      	movs	r0, #0
   2277e:	bd10      	pop	{r4, pc}

00022780 <write>:
{
   22780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   22784:	6845      	ldr	r5, [r0, #4]
{
   22786:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   22788:	682b      	ldr	r3, [r5, #0]
{
   2278a:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   2278c:	7c1b      	ldrb	r3, [r3, #16]
{
   2278e:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   22790:	b153      	cbz	r3, 227a8 <write+0x28>
   22792:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   22796:	4544      	cmp	r4, r8
   22798:	682b      	ldr	r3, [r5, #0]
   2279a:	d11c      	bne.n	227d6 <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   2279c:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   227a0:	2001      	movs	r0, #1
		*cnt = length;
   227a2:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   227a4:	4790      	blx	r2
   227a6:	e013      	b.n	227d0 <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   227a8:	68a8      	ldr	r0, [r5, #8]
   227aa:	f7fe ff95 	bl	216d8 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   227ae:	2101      	movs	r1, #1
   227b0:	682b      	ldr	r3, [r5, #0]
   227b2:	6030      	str	r0, [r6, #0]
   227b4:	330c      	adds	r3, #12
   227b6:	e8d3 2fef 	ldaex	r2, [r3]
   227ba:	e8c3 1fe0 	stlex	r0, r1, [r3]
   227be:	2800      	cmp	r0, #0
   227c0:	d1f9      	bne.n	227b6 <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   227c2:	b92a      	cbnz	r2, 227d0 <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   227c4:	682b      	ldr	r3, [r5, #0]
   227c6:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
   227c8:	6883      	ldr	r3, [r0, #8]
   227ca:	69db      	ldr	r3, [r3, #28]
   227cc:	b103      	cbz	r3, 227d0 <write+0x50>
		api->irq_tx_enable(dev);
   227ce:	4798      	blx	r3
}
   227d0:	2000      	movs	r0, #0
   227d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   227d6:	6818      	ldr	r0, [r3, #0]
   227d8:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   227dc:	6883      	ldr	r3, [r0, #8]
   227de:	685b      	ldr	r3, [r3, #4]
   227e0:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   227e2:	e7d8      	b.n	22796 <write+0x16>

000227e4 <enable>:
{
   227e4:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   227e6:	6843      	ldr	r3, [r0, #4]
   227e8:	681b      	ldr	r3, [r3, #0]
   227ea:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   227ec:	b111      	cbz	r1, 227f4 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   227ee:	6818      	ldr	r0, [r3, #0]
   227f0:	f7ff ffae 	bl	22750 <z_impl_uart_irq_tx_disable>
}
   227f4:	2000      	movs	r0, #0
   227f6:	bd08      	pop	{r3, pc}

000227f8 <shell_raw_fprintf>:
{
   227f8:	b40e      	push	{r1, r2, r3}
   227fa:	b503      	push	{r0, r1, lr}
   227fc:	aa03      	add	r2, sp, #12
   227fe:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22802:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   22804:	f7f9 ff58 	bl	1c6b8 <shell_fprintf_fmt>
}
   22808:	b002      	add	sp, #8
   2280a:	f85d eb04 	ldr.w	lr, [sp], #4
   2280e:	b003      	add	sp, #12
   22810:	4770      	bx	lr

00022812 <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
   22812:	6883      	ldr	r3, [r0, #8]
}
   22814:	2000      	movs	r0, #0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   22816:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   2281a:	f36f 1245 	bfc	r2, #5, #1
   2281e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   22822:	4770      	bx	lr

00022824 <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
   22824:	6882      	ldr	r2, [r0, #8]
}
   22826:	2000      	movs	r0, #0
   22828:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   2282c:	f043 0320 	orr.w	r3, r3, #32
   22830:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   22834:	4770      	bx	lr

00022836 <cmd_colors_off>:
	flag_use_colors_set(shell, false);
   22836:	6883      	ldr	r3, [r0, #8]
}
   22838:	2000      	movs	r0, #0
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   2283a:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   2283e:	f36f 0241 	bfc	r2, #1, #1
   22842:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   22846:	4770      	bx	lr

00022848 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
   22848:	6882      	ldr	r2, [r0, #8]
}
   2284a:	2000      	movs	r0, #0
   2284c:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   22850:	f043 0302 	orr.w	r3, r3, #2
   22854:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   22858:	4770      	bx	lr

0002285a <cmd_echo_off>:
	flag_echo_set(shell, false);
   2285a:	6883      	ldr	r3, [r0, #8]
}
   2285c:	2000      	movs	r0, #0
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   2285e:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   22862:	f36f 0282 	bfc	r2, #2, #1
   22866:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   2286a:	4770      	bx	lr

0002286c <cmd_echo_on>:
	flag_echo_set(shell, true);
   2286c:	6882      	ldr	r2, [r0, #8]
}
   2286e:	2000      	movs	r0, #0
   22870:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   22874:	f043 0304 	orr.w	r3, r3, #4
   22878:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   2287c:	4770      	bx	lr

0002287e <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   2287e:	6983      	ldr	r3, [r0, #24]
   22880:	2000      	movs	r0, #0
   22882:	6018      	str	r0, [r3, #0]
}
   22884:	4770      	bx	lr

00022886 <shell_raw_fprintf>:
{
   22886:	b40e      	push	{r1, r2, r3}
   22888:	b503      	push	{r0, r1, lr}
   2288a:	aa03      	add	r2, sp, #12
   2288c:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   22890:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   22892:	f7f9 ff11 	bl	1c6b8 <shell_fprintf_fmt>
}
   22896:	b002      	add	sp, #8
   22898:	f85d eb04 	ldr.w	lr, [sp], #4
   2289c:	b003      	add	sp, #12
   2289e:	4770      	bx	lr

000228a0 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   228a0:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   228a2:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   228a4:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
   228a6:	e9d3 2100 	ldrd	r2, r1, [r3]
   228aa:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   228ac:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   228ae:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
   228b0:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
   228b2:	e9c3 2200 	strd	r2, r2, [r3]
   228b6:	895b      	ldrh	r3, [r3, #10]
   228b8:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   228ba:	310c      	adds	r1, #12
   228bc:	f7fe ff47 	bl	2174e <ring_buf_get_finish>

	return true;
}
   228c0:	2001      	movs	r0, #1
   228c2:	bd08      	pop	{r3, pc}

000228c4 <shell_history_mode_exit>:
	history->current = NULL;
   228c4:	2300      	movs	r3, #0
   228c6:	60c3      	str	r3, [r0, #12]
}
   228c8:	4770      	bx	lr

000228ca <shell_history_get>:
{
   228ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228cc:	461f      	mov	r7, r3
	return list->head == list;
   228ce:	4603      	mov	r3, r0
   228d0:	f853 4f04 	ldr.w	r4, [r3, #4]!
   228d4:	4616      	mov	r6, r2
	if (sys_dlist_is_empty(&history->list)) {
   228d6:	429c      	cmp	r4, r3
   228d8:	d102      	bne.n	228e0 <shell_history_get+0x16>
		*len = 0U;
   228da:	2000      	movs	r0, #0
   228dc:	8038      	strh	r0, [r7, #0]
}
   228de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   228e0:	68c5      	ldr	r5, [r0, #12]
   228e2:	b9b1      	cbnz	r1, 22912 <shell_history_get+0x48>
		if (history->current == NULL) {
   228e4:	2d00      	cmp	r5, #0
   228e6:	d0f8      	beq.n	228da <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   228e8:	42ac      	cmp	r4, r5
   228ea:	d102      	bne.n	228f2 <shell_history_get+0x28>
	history->current = l_item;
   228ec:	2300      	movs	r3, #0
   228ee:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   228f0:	e7f3      	b.n	228da <shell_history_get+0x10>
   228f2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   228f4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   228f6:	2c00      	cmp	r4, #0
   228f8:	d0ef      	beq.n	228da <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   228fa:	8922      	ldrh	r2, [r4, #8]
   228fc:	4630      	mov	r0, r6
   228fe:	f104 010c 	add.w	r1, r4, #12
   22902:	f000 fbec 	bl	230de <memcpy>
		dst[*len] = '\0';
   22906:	2200      	movs	r2, #0
		*len = h_item->len;
   22908:	8923      	ldrh	r3, [r4, #8]
		return true;
   2290a:	2001      	movs	r0, #1
		*len = h_item->len;
   2290c:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   2290e:	54f2      	strb	r2, [r6, r3]
		return true;
   22910:	e7e5      	b.n	228de <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   22912:	2d00      	cmp	r5, #0
   22914:	d0ee      	beq.n	228f4 <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   22916:	6883      	ldr	r3, [r0, #8]
   22918:	42ab      	cmp	r3, r5
   2291a:	d0e7      	beq.n	228ec <shell_history_get+0x22>
   2291c:	682c      	ldr	r4, [r5, #0]
   2291e:	e7e9      	b.n	228f4 <shell_history_get+0x2a>

00022920 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
   22920:	b538      	push	{r3, r4, r5, lr}
   22922:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   22924:	1d05      	adds	r5, r0, #4
   22926:	6863      	ldr	r3, [r4, #4]
   22928:	42ab      	cmp	r3, r5
   2292a:	d004      	beq.n	22936 <shell_history_purge+0x16>
   2292c:	4620      	mov	r0, r4
   2292e:	f7ff ffb7 	bl	228a0 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   22932:	2800      	cmp	r0, #0
   22934:	d1f7      	bne.n	22926 <shell_history_purge+0x6>
	}
}
   22936:	bd38      	pop	{r3, r4, r5, pc}

00022938 <shell_history_put>:

void shell_history_put(struct shell_history *history, uint8_t *line, size_t len)
{
   22938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   2293c:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   2293e:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   22942:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   22946:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   22948:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   2294c:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   2294e:	429d      	cmp	r5, r3
{
   22950:	4604      	mov	r4, r0
   22952:	468a      	mov	sl, r1
   22954:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   22956:	d841      	bhi.n	229dc <shell_history_put+0xa4>
	history->current = NULL;
   22958:	2300      	movs	r3, #0
   2295a:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
   2295c:	2a00      	cmp	r2, #0
   2295e:	d03d      	beq.n	229dc <shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   22960:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   22964:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22966:	4581      	cmp	r9, r0
   22968:	d12d      	bne.n	229c6 <shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   2296a:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   2296c:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   22970:	462a      	mov	r2, r5
   22972:	6820      	ldr	r0, [r4, #0]
   22974:	a901      	add	r1, sp, #4
   22976:	f7fe fe86 	bl	21686 <ring_buf_put_claim>
		if (claim_len < total_len) {
   2297a:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   2297c:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   2297e:	d930      	bls.n	229e2 <shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   22980:	462a      	mov	r2, r5
   22982:	6820      	ldr	r0, [r4, #0]
   22984:	a901      	add	r1, sp, #4
   22986:	f7fe fe7e 	bl	21686 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   2298a:	4285      	cmp	r5, r0
   2298c:	d12a      	bne.n	229e4 <shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   2298e:	4631      	mov	r1, r6
   22990:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
   22992:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
   22994:	f7fe fe93 	bl	216be <ring_buf_put_finish>
				padding += claim_len;
   22998:	462e      	mov	r6, r5
   2299a:	fa1f f888 	uxth.w	r8, r8
			add_to_head(history, h_item, line, len, padding);
   2299e:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   229a0:	4651      	mov	r1, sl
   229a2:	463a      	mov	r2, r7
	item->len = len;
   229a4:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   229a6:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   229aa:	f105 000c 	add.w	r0, r5, #12
   229ae:	f000 fb96 	bl	230de <memcpy>
	node->next = list->head;
   229b2:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   229b4:	4631      	mov	r1, r6
	node->prev = list;
   229b6:	e9c5 3900 	strd	r3, r9, [r5]
   229ba:	6820      	ldr	r0, [r4, #0]
	list->head->prev = node;
   229bc:	605d      	str	r5, [r3, #4]
	list->head = node;
   229be:	6065      	str	r5, [r4, #4]
   229c0:	f7fe fe7d 	bl	216be <ring_buf_put_finish>
			break;
   229c4:	e00a      	b.n	229dc <shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   229c6:	9001      	str	r0, [sp, #4]
	if (l_item &&
   229c8:	2800      	cmp	r0, #0
   229ca:	d0cf      	beq.n	2296c <shell_history_put+0x34>
	   (h_item->len == len) &&
   229cc:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   229ce:	4293      	cmp	r3, r2
   229d0:	d1cc      	bne.n	2296c <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   229d2:	300c      	adds	r0, #12
   229d4:	f000 fb5c 	bl	23090 <memcmp>
	   (h_item->len == len) &&
   229d8:	2800      	cmp	r0, #0
   229da:	d1c7      	bne.n	2296c <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   229dc:	b003      	add	sp, #12
   229de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   229e2:	d0dc      	beq.n	2299e <shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   229e4:	2100      	movs	r1, #0
   229e6:	6820      	ldr	r0, [r4, #0]
   229e8:	f7fe fe69 	bl	216be <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   229ec:	6863      	ldr	r3, [r4, #4]
   229ee:	4599      	cmp	r9, r3
   229f0:	d108      	bne.n	22a04 <shell_history_put+0xcc>
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
   229f2:	2208      	movs	r2, #8
			ring_buf_reset(history->ring_buf);
   229f4:	6820      	ldr	r0, [r4, #0]
   229f6:	2100      	movs	r1, #0
	buf->tail = 0;
   229f8:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   229fc:	4410      	add	r0, r2
   229fe:	f000 fb99 	bl	23134 <memset>
}
   22a02:	e7b5      	b.n	22970 <shell_history_put+0x38>
   22a04:	4620      	mov	r0, r4
   22a06:	f7ff ff4b 	bl	228a0 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   22a0a:	2800      	cmp	r0, #0
   22a0c:	d1b0      	bne.n	22970 <shell_history_put+0x38>
   22a0e:	e7f0      	b.n	229f2 <shell_history_put+0xba>

00022a10 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   22a10:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   22a12:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   22a16:	2300      	movs	r3, #0
   22a18:	60c3      	str	r3, [r0, #12]
}
   22a1a:	4770      	bx	lr

00022a1c <msg_from_fifo.isra.0>:
	backend->control_block->dropped_cnt = 0;
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
	}
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   22a1c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   22a1e:	2200      	movs	r2, #0
   22a20:	2300      	movs	r3, #0
   22a22:	4669      	mov	r1, sp
   22a24:	f7fc fee6 	bl	1f7f4 <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
   22a28:	b918      	cbnz	r0, 22a32 <msg_from_fifo.isra.0+0x16>
   22a2a:	9800      	ldr	r0, [sp, #0]
}
   22a2c:	b003      	add	sp, #12
   22a2e:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   22a32:	2000      	movs	r0, #0
   22a34:	e7fa      	b.n	22a2c <msg_from_fifo.isra.0+0x10>

00022a36 <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   22a36:	6843      	ldr	r3, [r0, #4]
   22a38:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22a3a:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   22a3e:	e8d3 0fef 	ldaex	r0, [r3]
   22a42:	4408      	add	r0, r1
   22a44:	e8c3 0fec 	stlex	ip, r0, [r3]
   22a48:	f1bc 0f00 	cmp.w	ip, #0
   22a4c:	d1f7      	bne.n	22a3e <dropped+0x8>
   22a4e:	68d3      	ldr	r3, [r2, #12]
   22a50:	e8d3 2fef 	ldaex	r2, [r3]
   22a54:	440a      	add	r2, r1
   22a56:	e8c3 2fe0 	stlex	r0, r2, [r3]
   22a5a:	2800      	cmp	r0, #0
   22a5c:	d1f8      	bne.n	22a50 <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   22a5e:	4770      	bx	lr

00022a60 <put>:
{
   22a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   22a62:	6843      	ldr	r3, [r0, #4]
{
   22a64:	b087      	sub	sp, #28
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   22a66:	681c      	ldr	r4, [r3, #0]
	log_msg_get(msg);
   22a68:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
   22a6a:	68a3      	ldr	r3, [r4, #8]
{
   22a6c:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
   22a6e:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	log_msg_get(msg);
   22a72:	f7fe ffb1 	bl	219d8 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   22a76:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
   22a78:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   22a7c:	68db      	ldr	r3, [r3, #12]
   22a7e:	791b      	ldrb	r3, [r3, #4]
   22a80:	2b01      	cmp	r3, #1
   22a82:	d005      	beq.n	22a90 <put+0x30>
   22a84:	2b03      	cmp	r3, #3
   22a86:	d065      	beq.n	22b54 <put+0xf4>
		log_msg_put(msg);
   22a88:	4628      	mov	r0, r5
   22a8a:	f7fe ffd0 	bl	21a2e <log_msg_put>
}
   22a8e:	e05f      	b.n	22b50 <put+0xf0>
	struct shell_log_backend_msg t_msg = {
   22a90:	e9cd 5501 	strd	r5, r5, [sp, #4]
	return z_impl_k_uptime_ticks();
   22a94:	f000 ff1c 	bl	238d0 <z_impl_k_uptime_ticks>
   22a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22a9c:	460a      	mov	r2, r1
   22a9e:	fba0 0103 	umull	r0, r1, r0, r3
   22aa2:	fb03 1102 	mla	r1, r3, r2, r1
   22aa6:	0bc3      	lsrs	r3, r0, #15
   22aa8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   22aac:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22ab0:	f240 30e7 	movw	r0, #999	; 0x3e7
   22ab4:	2100      	movs	r1, #0
	return (uint32_t)k_uptime_get();
   22ab6:	9303      	str	r3, [sp, #12]
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   22ab8:	69e3      	ldr	r3, [r4, #28]
   22aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22abe:	691f      	ldr	r7, [r3, #16]
   22ac0:	685d      	ldr	r5, [r3, #4]
   22ac2:	fbe6 0107 	umlal	r0, r1, r6, r7
   22ac6:	2300      	movs	r3, #0
   22ac8:	f7e9 fc0a 	bl	c2e0 <__aeabi_uldivmod>
   22acc:	4602      	mov	r2, r0
   22ace:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   22ad0:	4628      	mov	r0, r5
   22ad2:	a902      	add	r1, sp, #8
   22ad4:	f7fc fe3a 	bl	1f74c <z_impl_k_msgq_put>
	switch (err) {
   22ad8:	f110 0f50 	cmn.w	r0, #80	; 0x50
   22adc:	d001      	beq.n	22ae2 <put+0x82>
   22ade:	300b      	adds	r0, #11
   22ae0:	d130      	bne.n	22b44 <put+0xe4>
	struct k_msgq *msgq = shell->log_backend->msgq;
   22ae2:	69e3      	ldr	r3, [r4, #28]
   22ae4:	685e      	ldr	r6, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   22ae6:	691f      	ldr	r7, [r3, #16]
	return z_impl_k_uptime_ticks();
   22ae8:	f000 fef2 	bl	238d0 <z_impl_k_uptime_ticks>
   22aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22af0:	460a      	mov	r2, r1
   22af2:	fba0 0103 	umull	r0, r1, r0, r3
   22af6:	fb03 1102 	mla	r1, r3, r2, r1
   22afa:	0bc5      	lsrs	r5, r0, #15
   22afc:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   22b00:	4630      	mov	r0, r6
   22b02:	a904      	add	r1, sp, #16
   22b04:	f000 fcfa 	bl	234fc <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   22b08:	b9a8      	cbnz	r0, 22b36 <put+0xd6>
   22b0a:	9b05      	ldr	r3, [sp, #20]
   22b0c:	1aeb      	subs	r3, r5, r3
   22b0e:	429f      	cmp	r7, r3
   22b10:	d211      	bcs.n	22b36 <put+0xd6>
	return z_impl_k_msgq_get(msgq, data, timeout);
   22b12:	2300      	movs	r3, #0
   22b14:	2200      	movs	r2, #0
   22b16:	a904      	add	r1, sp, #16
   22b18:	4630      	mov	r0, r6
   22b1a:	f7fc fe6b 	bl	1f7f4 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   22b1e:	9804      	ldr	r0, [sp, #16]
   22b20:	f7fe ff85 	bl	21a2e <log_msg_put>
   22b24:	69a3      	ldr	r3, [r4, #24]
   22b26:	e8d3 2fef 	ldaex	r2, [r3]
   22b2a:	3201      	adds	r2, #1
   22b2c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   22b30:	2900      	cmp	r1, #0
   22b32:	d0e5      	beq.n	22b00 <put+0xa0>
   22b34:	e7f7      	b.n	22b26 <put+0xc6>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
   22b36:	69e3      	ldr	r3, [r4, #28]
   22b38:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
   22b3a:	2200      	movs	r2, #0
   22b3c:	2300      	movs	r3, #0
   22b3e:	a901      	add	r1, sp, #4
   22b40:	f7fc fe04 	bl	1f74c <z_impl_k_msgq_put>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   22b44:	68a0      	ldr	r0, [r4, #8]
   22b46:	f500 701b 	add.w	r0, r0, #620	; 0x26c
	return z_impl_k_poll_signal_raise(signal, result);
   22b4a:	2100      	movs	r1, #0
   22b4c:	f7fd ff3a 	bl	209c4 <z_impl_k_poll_signal_raise>
}
   22b50:	b007      	add	sp, #28
   22b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_cmd_line_erase(shell);
   22b54:	4620      	mov	r0, r4
   22b56:	f7ff fd15 	bl	22584 <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   22b5a:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   22b5c:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   22b5e:	bf0c      	ite	eq
   22b60:	220e      	moveq	r2, #14
   22b62:	220f      	movne	r2, #15
   22b64:	4629      	mov	r1, r5
   22b66:	6898      	ldr	r0, [r3, #8]
   22b68:	f7f8 f9cc 	bl	1af04 <log_output_msg_process>
	log_msg_put(msg);
   22b6c:	e78c      	b.n	22a88 <put+0x28>

00022b6e <shell_log_backend_output_func>:
{
   22b6e:	4613      	mov	r3, r2
   22b70:	b510      	push	{r4, lr}
   22b72:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
   22b74:	460a      	mov	r2, r1
   22b76:	4601      	mov	r1, r0
   22b78:	4618      	mov	r0, r3
   22b7a:	f7ff fd52 	bl	22622 <shell_print_stream>
}
   22b7e:	4620      	mov	r0, r4
   22b80:	bd10      	pop	{r4, pc}

00022b82 <shell_log_backend_enable>:
{
   22b82:	b538      	push	{r3, r4, r5, lr}
   22b84:	4604      	mov	r4, r0
   22b86:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   22b88:	6800      	ldr	r0, [r0, #0]
   22b8a:	f7f7 fdf5 	bl	1a778 <log_backend_enable>
	backend->control_block->dropped_cnt = 0;
   22b8e:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
   22b90:	68a3      	ldr	r3, [r4, #8]
   22b92:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   22b94:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
   22b96:	68e3      	ldr	r3, [r4, #12]
   22b98:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   22b9a:	2201      	movs	r2, #1
   22b9c:	711a      	strb	r2, [r3, #4]
}
   22b9e:	bd38      	pop	{r3, r4, r5, pc}

00022ba0 <shell_log_backend_disable>:
{
   22ba0:	b510      	push	{r4, lr}
   22ba2:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
   22ba4:	6860      	ldr	r0, [r4, #4]
   22ba6:	f7ff ff39 	bl	22a1c <msg_from_fifo.isra.0>
   22baa:	b930      	cbnz	r0, 22bba <shell_log_backend_disable+0x1a>
	log_backend_disable(backend->backend);
   22bac:	6820      	ldr	r0, [r4, #0]
   22bae:	f7fe fe62 	bl	21876 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   22bb2:	2202      	movs	r2, #2
   22bb4:	68e3      	ldr	r3, [r4, #12]
   22bb6:	711a      	strb	r2, [r3, #4]
}
   22bb8:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   22bba:	f7fe ff38 	bl	21a2e <log_msg_put>
   22bbe:	e7f1      	b.n	22ba4 <shell_log_backend_disable+0x4>

00022bc0 <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   22bc0:	6803      	ldr	r3, [r0, #0]
{
   22bc2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
   22bc6:	685b      	ldr	r3, [r3, #4]
{
   22bc8:	4605      	mov	r5, r0
	const struct shell *shell =
   22bca:	681f      	ldr	r7, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
   22bcc:	6840      	ldr	r0, [r0, #4]
			shell->ctx->internal.flags.use_colors;
   22bce:	68bb      	ldr	r3, [r7, #8]
   22bd0:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	struct log_msg *msg = msg_from_fifo(backend);
   22bd4:	f7ff ff22 	bl	22a1c <msg_from_fifo.isra.0>
			shell->ctx->internal.flags.use_colors;
   22bd8:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (!msg) {
   22bdc:	4604      	mov	r4, r0
   22bde:	b358      	cbz	r0, 22c38 <shell_log_backend_process+0x78>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22be0:	2200      	movs	r2, #0
   22be2:	68eb      	ldr	r3, [r5, #12]
   22be4:	e8d3 8fef 	ldaex	r8, [r3]
   22be8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   22bec:	2900      	cmp	r1, #0
   22bee:	d1f9      	bne.n	22be4 <shell_log_backend_process+0x24>
	if (dropped) {
   22bf0:	f1b8 0f00 	cmp.w	r8, #0
   22bf4:	d013      	beq.n	22c1e <shell_log_backend_process+0x5e>
		if (colors) {
   22bf6:	b14e      	cbz	r6, 22c0c <shell_log_backend_process+0x4c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   22bf8:	68b9      	ldr	r1, [r7, #8]
   22bfa:	2202      	movs	r2, #2
   22bfc:	312e      	adds	r1, #46	; 0x2e
   22bfe:	a801      	add	r0, sp, #4
   22c00:	f000 fa6d 	bl	230de <memcpy>
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   22c04:	2102      	movs	r1, #2
   22c06:	4638      	mov	r0, r7
   22c08:	f7f9 fdfe 	bl	1c808 <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   22c0c:	4641      	mov	r1, r8
   22c0e:	68a8      	ldr	r0, [r5, #8]
   22c10:	f7f8 f9f4 	bl	1affc <log_output_dropped_process>
		if (colors) {
   22c14:	b11e      	cbz	r6, 22c1e <shell_log_backend_process+0x5e>
			shell_vt100_colors_restore(shell, &col);
   22c16:	4638      	mov	r0, r7
   22c18:	a901      	add	r1, sp, #4
   22c1a:	f7f9 fe19 	bl	1c850 <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
   22c1e:	69fb      	ldr	r3, [r7, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   22c20:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   22c22:	6898      	ldr	r0, [r3, #8]
   22c24:	bf0c      	ite	eq
   22c26:	220e      	moveq	r2, #14
   22c28:	220f      	movne	r2, #15
   22c2a:	4621      	mov	r1, r4
   22c2c:	f7f8 f96a 	bl	1af04 <log_output_msg_process>
	log_msg_put(msg);
   22c30:	4620      	mov	r0, r4
   22c32:	f7fe fefc 	bl	21a2e <log_msg_put>
	return true;
   22c36:	2001      	movs	r0, #1
}
   22c38:	b002      	add	sp, #8
   22c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022c3e <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   22c3e:	6843      	ldr	r3, [r0, #4]
{
   22c40:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   22c42:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   22c44:	2101      	movs	r1, #1
   22c46:	6860      	ldr	r0, [r4, #4]
   22c48:	6803      	ldr	r3, [r0, #0]
   22c4a:	689b      	ldr	r3, [r3, #8]
   22c4c:	4798      	blx	r3
	if (err == 0) {
   22c4e:	b9d0      	cbnz	r0, 22c86 <panic+0x48>
		shell->log_backend->control_block->state =
   22c50:	2203      	movs	r2, #3
   22c52:	69e3      	ldr	r3, [r4, #28]
   22c54:	68db      	ldr	r3, [r3, #12]
   22c56:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   22c58:	68a0      	ldr	r0, [r4, #8]
   22c5a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   22c5c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   22c5e:	3020      	adds	r0, #32
   22c60:	f7ff fa27 	bl	220b2 <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
   22c64:	f04f 31ff 	mov.w	r1, #4294967295
   22c68:	4620      	mov	r0, r4
   22c6a:	f7f9 fd67 	bl	1c73c <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   22c6e:	68a3      	ldr	r3, [r4, #8]
		shell_op_cursor_horiz_move(shell,
   22c70:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
   22c72:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
   22c74:	4249      	negs	r1, r1
   22c76:	f7f9 fd71 	bl	1c75c <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
   22c7a:	69e0      	ldr	r0, [r4, #28]
   22c7c:	f7ff ffa0 	bl	22bc0 <shell_log_backend_process>
   22c80:	2800      	cmp	r0, #0
   22c82:	d1fa      	bne.n	22c7a <panic+0x3c>
}
   22c84:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
   22c86:	69e0      	ldr	r0, [r4, #28]
}
   22c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
   22c8c:	f7ff bf88 	b.w	22ba0 <shell_log_backend_disable>

00022c90 <shell_wildcard_character_exist>:
{
   22c90:	b510      	push	{r4, lr}
   22c92:	4604      	mov	r4, r0
   22c94:	b908      	cbnz	r0, 22c9a <shell_wildcard_character_exist+0xa>
	return false;
   22c96:	2000      	movs	r0, #0
}
   22c98:	bd10      	pop	{r4, pc}
   22c9a:	f000 f9d7 	bl	2304c <strlen>
	for (size_t i = 0; i < str_len; i++) {
   22c9e:	2300      	movs	r3, #0
   22ca0:	b280      	uxth	r0, r0
   22ca2:	4283      	cmp	r3, r0
   22ca4:	d2f7      	bcs.n	22c96 <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   22ca6:	5ce2      	ldrb	r2, [r4, r3]
   22ca8:	2a3f      	cmp	r2, #63	; 0x3f
   22caa:	d003      	beq.n	22cb4 <shell_wildcard_character_exist+0x24>
   22cac:	2a2a      	cmp	r2, #42	; 0x2a
   22cae:	d001      	beq.n	22cb4 <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
   22cb0:	3301      	adds	r3, #1
   22cb2:	e7f6      	b.n	22ca2 <shell_wildcard_character_exist+0x12>
			return true;
   22cb4:	2001      	movs	r0, #1
   22cb6:	e7ef      	b.n	22c98 <shell_wildcard_character_exist+0x8>

00022cb8 <shell_wildcard_prepare>:
{
   22cb8:	b510      	push	{r4, lr}
   22cba:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   22cbc:	6880      	ldr	r0, [r0, #8]
   22cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
   22cc2:	2100      	movs	r1, #0
   22cc4:	f500 709c 	add.w	r0, r0, #312	; 0x138
   22cc8:	f000 fa34 	bl	23134 <memset>
	memcpy(shell->ctx->temp_buff,
   22ccc:	68a0      	ldr	r0, [r4, #8]
   22cce:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   22cd0:	f100 0138 	add.w	r1, r0, #56	; 0x38
   22cd4:	f500 709c 	add.w	r0, r0, #312	; 0x138
   22cd8:	f000 fa01 	bl	230de <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
   22cdc:	68a0      	ldr	r0, [r4, #8]
   22cde:	f500 709c 	add.w	r0, r0, #312	; 0x138
   22ce2:	f7ff fb2c 	bl	2233e <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
   22ce6:	68a3      	ldr	r3, [r4, #8]
   22ce8:	f513 709c 	adds.w	r0, r3, #312	; 0x138
   22cec:	d006      	beq.n	22cfc <shell_wildcard_prepare+0x44>
   22cee:	f000 f9ad 	bl	2304c <strlen>
   22cf2:	b283      	uxth	r3, r0
   22cf4:	68a2      	ldr	r2, [r4, #8]
   22cf6:	3301      	adds	r3, #1
   22cf8:	86d3      	strh	r3, [r2, #54]	; 0x36
}
   22cfa:	bd10      	pop	{r4, pc}
   22cfc:	4603      	mov	r3, r0
   22cfe:	e7f9      	b.n	22cf4 <shell_wildcard_prepare+0x3c>

00022d00 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
   22d00:	b510      	push	{r4, lr}
   22d02:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   22d04:	6880      	ldr	r0, [r0, #8]
   22d06:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
   22d08:	f500 719c 	add.w	r1, r0, #312	; 0x138
   22d0c:	3038      	adds	r0, #56	; 0x38
   22d0e:	f000 f9e6 	bl	230de <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   22d12:	68a3      	ldr	r3, [r4, #8]
   22d14:	8eda      	ldrh	r2, [r3, #54]	; 0x36
   22d16:	865a      	strh	r2, [r3, #50]	; 0x32
}
   22d18:	bd10      	pop	{r4, pc}

00022d1a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22d1a:	b2cb      	uxtb	r3, r1
   22d1c:	210c      	movs	r1, #12
   22d1e:	68c2      	ldr	r2, [r0, #12]
   22d20:	fb03 2101 	mla	r1, r3, r1, r2
   22d24:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   22d26:	f000 0007 	and.w	r0, r0, #7
   22d2a:	4770      	bx	lr

00022d2c <set_off_state>:
	__asm__ volatile(
   22d2c:	f04f 0320 	mov.w	r3, #32
   22d30:	f3ef 8211 	mrs	r2, BASEPRI
   22d34:	f383 8811 	msr	BASEPRI, r3
   22d38:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22d3c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   22d3e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   22d42:	d001      	beq.n	22d48 <set_off_state+0x1c>
   22d44:	428b      	cmp	r3, r1
   22d46:	d107      	bne.n	22d58 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22d48:	2301      	movs	r3, #1
   22d4a:	6003      	str	r3, [r0, #0]
	int err = 0;
   22d4c:	2000      	movs	r0, #0
	__asm__ volatile(
   22d4e:	f382 8811 	msr	BASEPRI, r2
   22d52:	f3bf 8f6f 	isb	sy
}
   22d56:	4770      	bx	lr
		err = -EPERM;
   22d58:	f04f 30ff 	mov.w	r0, #4294967295
   22d5c:	e7f7      	b.n	22d4e <set_off_state+0x22>

00022d5e <set_starting_state>:
{
   22d5e:	b510      	push	{r4, lr}
	__asm__ volatile(
   22d60:	f04f 0320 	mov.w	r3, #32
   22d64:	f3ef 8211 	mrs	r2, BASEPRI
   22d68:	f383 8811 	msr	BASEPRI, r3
   22d6c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22d70:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22d72:	f003 0407 	and.w	r4, r3, #7
   22d76:	2c01      	cmp	r4, #1
   22d78:	d106      	bne.n	22d88 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22d7a:	6001      	str	r1, [r0, #0]
	int err = 0;
   22d7c:	2000      	movs	r0, #0
	__asm__ volatile(
   22d7e:	f382 8811 	msr	BASEPRI, r2
   22d82:	f3bf 8f6f 	isb	sy
}
   22d86:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22d88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   22d8c:	428b      	cmp	r3, r1
		err = -EALREADY;
   22d8e:	bf14      	ite	ne
   22d90:	f04f 30ff 	movne.w	r0, #4294967295
   22d94:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   22d98:	e7f1      	b.n	22d7e <set_starting_state+0x20>

00022d9a <set_on_state>:
	__asm__ volatile(
   22d9a:	f04f 0320 	mov.w	r3, #32
   22d9e:	f3ef 8211 	mrs	r2, BASEPRI
   22da2:	f383 8811 	msr	BASEPRI, r3
   22da6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22daa:	6803      	ldr	r3, [r0, #0]
   22dac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22db0:	f043 0302 	orr.w	r3, r3, #2
   22db4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22db6:	f382 8811 	msr	BASEPRI, r2
   22dba:	f3bf 8f6f 	isb	sy
}
   22dbe:	4770      	bx	lr

00022dc0 <onoff_started_callback>:
{
   22dc0:	b410      	push	{r4}
	notify(mgr, 0);
   22dc2:	241c      	movs	r4, #28
	return &data->mgr[type];
   22dc4:	68c0      	ldr	r0, [r0, #12]
   22dc6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22dc8:	fb03 0004 	mla	r0, r3, r4, r0
   22dcc:	2100      	movs	r1, #0
}
   22dce:	bc10      	pop	{r4}
	notify(mgr, 0);
   22dd0:	4710      	bx	r2

00022dd2 <blocking_start_callback>:
{
   22dd2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22dd4:	f7fd b9c2 	b.w	2015c <z_impl_k_sem_give>

00022dd8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22dd8:	2000      	movs	r0, #0
   22dda:	f7fc b9b7 	b.w	1f14c <nrfx_clock_stop>

00022dde <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22dde:	2000      	movs	r0, #0
   22de0:	f7fc b982 	b.w	1f0e8 <nrfx_clock_start>

00022de4 <api_stop>:
{
   22de4:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   22de6:	240c      	movs	r4, #12
   22de8:	b2c9      	uxtb	r1, r1
   22dea:	434c      	muls	r4, r1
{
   22dec:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   22dee:	68c0      	ldr	r0, [r0, #12]
   22df0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   22df4:	2180      	movs	r1, #128	; 0x80
   22df6:	4418      	add	r0, r3
   22df8:	f7ff ff98 	bl	22d2c <set_off_state>
	if (err < 0) {
   22dfc:	2800      	cmp	r0, #0
   22dfe:	db04      	blt.n	22e0a <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   22e00:	6869      	ldr	r1, [r5, #4]
   22e02:	440c      	add	r4, r1
   22e04:	6863      	ldr	r3, [r4, #4]
   22e06:	4798      	blx	r3
	return 0;
   22e08:	2000      	movs	r0, #0
}
   22e0a:	bd38      	pop	{r3, r4, r5, pc}

00022e0c <api_start>:
{
   22e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   22e10:	240c      	movs	r4, #12
   22e12:	b2c9      	uxtb	r1, r1
   22e14:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   22e16:	68c5      	ldr	r5, [r0, #12]
{
   22e18:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   22e1a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   22e1e:	2180      	movs	r1, #128	; 0x80
   22e20:	4428      	add	r0, r5
{
   22e22:	4690      	mov	r8, r2
   22e24:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   22e26:	f7ff ff9a 	bl	22d5e <set_starting_state>
	if (err < 0) {
   22e2a:	2800      	cmp	r0, #0
   22e2c:	db06      	blt.n	22e3c <api_start+0x30>
	subdata->cb = cb;
   22e2e:	4425      	add	r5, r4
	subdata->user_data = user_data;
   22e30:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   22e34:	6873      	ldr	r3, [r6, #4]
   22e36:	591b      	ldr	r3, [r3, r4]
   22e38:	4798      	blx	r3
	return 0;
   22e3a:	2000      	movs	r0, #0
}
   22e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022e40 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   22e40:	4770      	bx	lr

00022e42 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22e42:	4770      	bx	lr

00022e44 <sys_clock_disable>:
   22e44:	4770      	bx	lr

00022e46 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   22e46:	b510      	push	{r4, lr}
   22e48:	b40f      	push	{r0, r1, r2, r3}
   22e4a:	f7fc fe47 	bl	1fadc <k_sched_lock>
   22e4e:	bc0f      	pop	{r0, r1, r2, r3}
   22e50:	f7e5 f8ca 	bl	7fe8 <spm_request_random_number_nse>
   22e54:	b40f      	push	{r0, r1, r2, r3}
   22e56:	f7fc fe93 	bl	1fb80 <k_sched_unlock>
   22e5a:	bc0f      	pop	{r0, r1, r2, r3}
   22e5c:	bd10      	pop	{r4, pc}

00022e5e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22e5e:	2100      	movs	r1, #0
   22e60:	2001      	movs	r0, #1
   22e62:	f7fa bd4f 	b.w	1d904 <z_arm_fatal_error>

00022e66 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22e66:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   22e6a:	f383 880b 	msr	PSPLIM, r3
}
   22e6e:	4770      	bx	lr

00022e70 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22e70:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22e72:	6800      	ldr	r0, [r0, #0]
   22e74:	f7fa bd46 	b.w	1d904 <z_arm_fatal_error>

00022e78 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   22e78:	b508      	push	{r3, lr}
	handler();
   22e7a:	f7fa fe09 	bl	1da90 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22e7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   22e82:	f7fa be51 	b.w	1db28 <z_arm_exc_exit>

00022e86 <mpu_configure_region>:
{
   22e86:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   22e88:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   22e8a:	680c      	ldr	r4, [r1, #0]
{
   22e8c:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   22e8e:	890a      	ldrh	r2, [r1, #8]
   22e90:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   22e92:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22e94:	3b01      	subs	r3, #1
   22e96:	f024 041f 	bic.w	r4, r4, #31
   22e9a:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   22e9c:	f002 021f 	and.w	r2, r2, #31
   22ea0:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22ea4:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   22ea8:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   22eaa:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   22eae:	9303      	str	r3, [sp, #12]
   22eb0:	f7fb f9c8 	bl	1e244 <region_allocate_and_init>
}
   22eb4:	b005      	add	sp, #20
   22eb6:	bd30      	pop	{r4, r5, pc}

00022eb8 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   22eb8:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   22ebc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   22ec0:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   22ec2:	bf08      	it	eq
   22ec4:	f06f 0015 	mvneq.w	r0, #21
   22ec8:	4770      	bx	lr

00022eca <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   22eca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22ece:	4684      	mov	ip, r0
   22ed0:	4688      	mov	r8, r1
	register const char *s = nptr;
   22ed2:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   22ed4:	460c      	mov	r4, r1
   22ed6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   22eda:	2b20      	cmp	r3, #32
   22edc:	d033      	beq.n	22f46 <strtol+0x7c>
   22ede:	f1a3 0009 	sub.w	r0, r3, #9
   22ee2:	2804      	cmp	r0, #4
   22ee4:	d92f      	bls.n	22f46 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   22ee6:	2b2d      	cmp	r3, #45	; 0x2d
   22ee8:	d12f      	bne.n	22f4a <strtol+0x80>
		neg = 1;
		c = *s++;
   22eea:	784b      	ldrb	r3, [r1, #1]
   22eec:	1c8c      	adds	r4, r1, #2
		neg = 1;
   22eee:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   22ef0:	2a00      	cmp	r2, #0
   22ef2:	d05c      	beq.n	22fae <strtol+0xe4>
   22ef4:	2a10      	cmp	r2, #16
   22ef6:	d109      	bne.n	22f0c <strtol+0x42>
   22ef8:	2b30      	cmp	r3, #48	; 0x30
   22efa:	d107      	bne.n	22f0c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   22efc:	7823      	ldrb	r3, [r4, #0]
   22efe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   22f02:	2b58      	cmp	r3, #88	; 0x58
   22f04:	d14e      	bne.n	22fa4 <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   22f06:	2210      	movs	r2, #16
		c = s[1];
   22f08:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   22f0a:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   22f0c:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   22f0e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   22f12:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   22f14:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   22f18:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   22f1a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   22f1e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   22f22:	2d09      	cmp	r5, #9
   22f24:	d817      	bhi.n	22f56 <strtol+0x8c>
			c -= '0';
   22f26:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   22f28:	429a      	cmp	r2, r3
   22f2a:	dd24      	ble.n	22f76 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   22f2c:	1c75      	adds	r5, r6, #1
   22f2e:	d007      	beq.n	22f40 <strtol+0x76>
   22f30:	4570      	cmp	r0, lr
   22f32:	d81d      	bhi.n	22f70 <strtol+0xa6>
   22f34:	d101      	bne.n	22f3a <strtol+0x70>
   22f36:	454b      	cmp	r3, r9
   22f38:	dc1a      	bgt.n	22f70 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   22f3a:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   22f3c:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   22f40:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   22f44:	e7eb      	b.n	22f1e <strtol+0x54>
{
   22f46:	4621      	mov	r1, r4
   22f48:	e7c4      	b.n	22ed4 <strtol+0xa>
	} else if (c == '+') {
   22f4a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   22f4c:	bf04      	itt	eq
   22f4e:	784b      	ldrbeq	r3, [r1, #1]
   22f50:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   22f52:	2100      	movs	r1, #0
   22f54:	e7cc      	b.n	22ef0 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22f56:	f043 0520 	orr.w	r5, r3, #32
   22f5a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   22f5c:	2d19      	cmp	r5, #25
   22f5e:	d80a      	bhi.n	22f76 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22f60:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   22f64:	2d1a      	cmp	r5, #26
   22f66:	bf34      	ite	cc
   22f68:	2537      	movcc	r5, #55	; 0x37
   22f6a:	2557      	movcs	r5, #87	; 0x57
   22f6c:	1b5b      	subs	r3, r3, r5
   22f6e:	e7db      	b.n	22f28 <strtol+0x5e>
			any = -1;
   22f70:	f04f 36ff 	mov.w	r6, #4294967295
   22f74:	e7e4      	b.n	22f40 <strtol+0x76>
		}
	}

	if (any < 0) {
   22f76:	1c73      	adds	r3, r6, #1
   22f78:	d109      	bne.n	22f8e <strtol+0xc4>
   22f7a:	f7fc f9df 	bl	1f33c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   22f7e:	2326      	movs	r3, #38	; 0x26
   22f80:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   22f82:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   22f84:	f1b8 0f00 	cmp.w	r8, #0
   22f88:	d107      	bne.n	22f9a <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   22f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   22f8e:	b101      	cbz	r1, 22f92 <strtol+0xc8>
		acc = -acc;
   22f90:	4240      	negs	r0, r0
	if (endptr != NULL) {
   22f92:	f1b8 0f00 	cmp.w	r8, #0
   22f96:	d0f8      	beq.n	22f8a <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   22f98:	b10e      	cbz	r6, 22f9e <strtol+0xd4>
   22f9a:	f104 3cff 	add.w	ip, r4, #4294967295
   22f9e:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   22fa2:	e7f2      	b.n	22f8a <strtol+0xc0>
	if (base == 0) {
   22fa4:	2330      	movs	r3, #48	; 0x30
   22fa6:	2a00      	cmp	r2, #0
   22fa8:	d1b0      	bne.n	22f0c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   22faa:	2208      	movs	r2, #8
   22fac:	e7ae      	b.n	22f0c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   22fae:	2b30      	cmp	r3, #48	; 0x30
   22fb0:	d0a4      	beq.n	22efc <strtol+0x32>
		base = c == '0' ? 8 : 10;
   22fb2:	220a      	movs	r2, #10
   22fb4:	e7aa      	b.n	22f0c <strtol+0x42>

00022fb6 <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   22fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   22fba:	f891 8000 	ldrb.w	r8, [r1]
{
   22fbe:	4605      	mov	r5, r0
	if (c != 0) {
   22fc0:	f1b8 0f00 	cmp.w	r8, #0
   22fc4:	d010      	beq.n	22fe8 <strstr+0x32>
	c = *find++;
   22fc6:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   22fc8:	4620      	mov	r0, r4
   22fca:	f000 f83f 	bl	2304c <strlen>
   22fce:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   22fd0:	462e      	mov	r6, r5
   22fd2:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   22fd6:	b163      	cbz	r3, 22ff2 <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   22fd8:	4598      	cmp	r8, r3
   22fda:	d108      	bne.n	22fee <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   22fdc:	463a      	mov	r2, r7
   22fde:	4621      	mov	r1, r4
   22fe0:	4630      	mov	r0, r6
   22fe2:	f000 f846 	bl	23072 <strncmp>
   22fe6:	b910      	cbnz	r0, 22fee <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   22fe8:	4628      	mov	r0, r5
   22fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   22fee:	4635      	mov	r5, r6
   22ff0:	e7ee      	b.n	22fd0 <strstr+0x1a>
					return NULL;
   22ff2:	461d      	mov	r5, r3
   22ff4:	e7f8      	b.n	22fe8 <strstr+0x32>

00022ff6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   22ff6:	4603      	mov	r3, r0
   22ff8:	3901      	subs	r1, #1
   22ffa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   22ffe:	b90a      	cbnz	r2, 23004 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   23000:	701a      	strb	r2, [r3, #0]

	return dest;
}
   23002:	4770      	bx	lr
		*d = *s;
   23004:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   23008:	e7f7      	b.n	22ffa <strcpy+0x4>

0002300a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2300a:	b570      	push	{r4, r5, r6, lr}
   2300c:	4605      	mov	r5, r0
   2300e:	3901      	subs	r1, #1
   23010:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   23012:	b142      	cbz	r2, 23026 <strncpy+0x1c>
   23014:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   23018:	1e56      	subs	r6, r2, #1
   2301a:	b92b      	cbnz	r3, 23028 <strncpy+0x1e>
   2301c:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   2301e:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   23022:	42a2      	cmp	r2, r4
   23024:	d1fb      	bne.n	2301e <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   23026:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   23028:	4632      	mov	r2, r6
		*d = *s;
   2302a:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2302e:	e7ef      	b.n	23010 <strncpy+0x6>

00023030 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   23030:	4603      	mov	r3, r0
   23032:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   23034:	781a      	ldrb	r2, [r3, #0]
   23036:	4618      	mov	r0, r3
   23038:	428a      	cmp	r2, r1
   2303a:	f103 0301 	add.w	r3, r3, #1
   2303e:	d004      	beq.n	2304a <strchr+0x1a>
   23040:	2a00      	cmp	r2, #0
   23042:	d1f7      	bne.n	23034 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   23044:	2900      	cmp	r1, #0
   23046:	bf18      	it	ne
   23048:	2000      	movne	r0, #0
}
   2304a:	4770      	bx	lr

0002304c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2304c:	4603      	mov	r3, r0
	size_t n = 0;
   2304e:	2000      	movs	r0, #0

	while (*s != '\0') {
   23050:	5c1a      	ldrb	r2, [r3, r0]
   23052:	b902      	cbnz	r2, 23056 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   23054:	4770      	bx	lr
		n++;
   23056:	3001      	adds	r0, #1
   23058:	e7fa      	b.n	23050 <strlen+0x4>

0002305a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2305a:	1e43      	subs	r3, r0, #1
   2305c:	3901      	subs	r1, #1
   2305e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   23062:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   23066:	4282      	cmp	r2, r0
   23068:	d101      	bne.n	2306e <strcmp+0x14>
   2306a:	2a00      	cmp	r2, #0
   2306c:	d1f7      	bne.n	2305e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2306e:	1a10      	subs	r0, r2, r0
   23070:	4770      	bx	lr

00023072 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   23072:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   23074:	2400      	movs	r4, #0
   23076:	42a2      	cmp	r2, r4
   23078:	d008      	beq.n	2308c <strncmp+0x1a>
   2307a:	5d03      	ldrb	r3, [r0, r4]
   2307c:	5d0d      	ldrb	r5, [r1, r4]
   2307e:	42ab      	cmp	r3, r5
   23080:	d102      	bne.n	23088 <strncmp+0x16>
   23082:	3401      	adds	r4, #1
   23084:	2b00      	cmp	r3, #0
   23086:	d1f6      	bne.n	23076 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   23088:	1b58      	subs	r0, r3, r5
   2308a:	e000      	b.n	2308e <strncmp+0x1c>
   2308c:	2000      	movs	r0, #0
}
   2308e:	bd30      	pop	{r4, r5, pc}

00023090 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   23090:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   23092:	b15a      	cbz	r2, 230ac <memcmp+0x1c>
   23094:	3901      	subs	r1, #1
   23096:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   23098:	f810 2b01 	ldrb.w	r2, [r0], #1
   2309c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   230a0:	42a0      	cmp	r0, r4
   230a2:	d001      	beq.n	230a8 <memcmp+0x18>
   230a4:	429a      	cmp	r2, r3
   230a6:	d0f7      	beq.n	23098 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   230a8:	1ad0      	subs	r0, r2, r3
}
   230aa:	bd10      	pop	{r4, pc}
		return 0;
   230ac:	4610      	mov	r0, r2
   230ae:	e7fc      	b.n	230aa <memcmp+0x1a>

000230b0 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   230b0:	1a43      	subs	r3, r0, r1
   230b2:	4293      	cmp	r3, r2
{
   230b4:	b510      	push	{r4, lr}
   230b6:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   230ba:	d308      	bcc.n	230ce <memmove+0x1e>
	char *dest = d;
   230bc:	4602      	mov	r2, r0
   230be:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   230c0:	429a      	cmp	r2, r3
   230c2:	d00b      	beq.n	230dc <memmove+0x2c>
			*dest = *src;
   230c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   230c8:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   230cc:	e7f8      	b.n	230c0 <memmove+0x10>
   230ce:	440a      	add	r2, r1
			dest[n] = src[n];
   230d0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   230d4:	428a      	cmp	r2, r1
			dest[n] = src[n];
   230d6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   230da:	d1f9      	bne.n	230d0 <memmove+0x20>
		}
	}

	return d;
}
   230dc:	bd10      	pop	{r4, pc}

000230de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   230de:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   230e0:	ea81 0400 	eor.w	r4, r1, r0
   230e4:	07a5      	lsls	r5, r4, #30
   230e6:	4603      	mov	r3, r0
   230e8:	d00b      	beq.n	23102 <memcpy+0x24>
   230ea:	3b01      	subs	r3, #1
   230ec:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   230ee:	4291      	cmp	r1, r2
   230f0:	d11b      	bne.n	2312a <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   230f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   230f4:	2a00      	cmp	r2, #0
   230f6:	d0fc      	beq.n	230f2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   230f8:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   230fc:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   230fe:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   23102:	079c      	lsls	r4, r3, #30
   23104:	d1f6      	bne.n	230f4 <memcpy+0x16>
   23106:	f022 0403 	bic.w	r4, r2, #3
   2310a:	1f1d      	subs	r5, r3, #4
   2310c:	0896      	lsrs	r6, r2, #2
   2310e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   23110:	42b9      	cmp	r1, r7
   23112:	d105      	bne.n	23120 <memcpy+0x42>
   23114:	f06f 0503 	mvn.w	r5, #3
   23118:	4423      	add	r3, r4
   2311a:	fb05 2206 	mla	r2, r5, r6, r2
   2311e:	e7e4      	b.n	230ea <memcpy+0xc>
			*(d_word++) = *(s_word++);
   23120:	f851 cb04 	ldr.w	ip, [r1], #4
   23124:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   23128:	e7f2      	b.n	23110 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   2312a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2312e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   23132:	e7dc      	b.n	230ee <memcpy+0x10>

00023134 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   23134:	4603      	mov	r3, r0
{
   23136:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   23138:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   2313a:	079c      	lsls	r4, r3, #30
   2313c:	d111      	bne.n	23162 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   2313e:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   23142:	f022 0603 	bic.w	r6, r2, #3
   23146:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2314a:	441e      	add	r6, r3
   2314c:	0894      	lsrs	r4, r2, #2
   2314e:	42b3      	cmp	r3, r6
   23150:	d10d      	bne.n	2316e <memset+0x3a>
   23152:	f06f 0503 	mvn.w	r5, #3
   23156:	fb05 2204 	mla	r2, r5, r4, r2
   2315a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   2315c:	4293      	cmp	r3, r2
   2315e:	d109      	bne.n	23174 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   23160:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   23162:	2a00      	cmp	r2, #0
   23164:	d0fc      	beq.n	23160 <memset+0x2c>
		*(d_byte++) = c_byte;
   23166:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2316a:	3a01      	subs	r2, #1
   2316c:	e7e5      	b.n	2313a <memset+0x6>
		*(d_word++) = c_word;
   2316e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   23172:	e7ec      	b.n	2314e <memset+0x1a>
		*(d_byte++) = c_byte;
   23174:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   23178:	e7f0      	b.n	2315c <memset+0x28>

0002317a <_stdout_hook_default>:
}
   2317a:	f04f 30ff 	mov.w	r0, #4294967295
   2317e:	4770      	bx	lr

00023180 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   23180:	f7fb b9dc 	b.w	1e53c <z_impl_zephyr_fputc>

00023184 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   23184:	684b      	ldr	r3, [r1, #4]
   23186:	2b01      	cmp	r3, #1
   23188:	dd07      	ble.n	2319a <sprintf_out+0x16>
		*(p->ptr) = c;
   2318a:	680b      	ldr	r3, [r1, #0]
   2318c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   2318e:	680b      	ldr	r3, [r1, #0]
   23190:	3301      	adds	r3, #1
   23192:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   23194:	684b      	ldr	r3, [r1, #4]
   23196:	3b01      	subs	r3, #1
   23198:	604b      	str	r3, [r1, #4]
}
   2319a:	2000      	movs	r0, #0
   2319c:	4770      	bx	lr

0002319e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2319e:	6843      	ldr	r3, [r0, #4]
}
   231a0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   231a4:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   231a6:	600b      	str	r3, [r1, #0]
}
   231a8:	4770      	bx	lr

000231aa <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231aa:	6843      	ldr	r3, [r0, #4]
   231ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   231ae:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   231b0:	4042      	eors	r2, r0
   231b2:	400a      	ands	r2, r1
   231b4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   231b6:	605a      	str	r2, [r3, #4]
}
   231b8:	2000      	movs	r0, #0
   231ba:	4770      	bx	lr

000231bc <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231bc:	6843      	ldr	r3, [r0, #4]
}
   231be:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   231c2:	6099      	str	r1, [r3, #8]
}
   231c4:	4770      	bx	lr

000231c6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231c6:	6843      	ldr	r3, [r0, #4]
}
   231c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   231cc:	60d9      	str	r1, [r3, #12]
}
   231ce:	4770      	bx	lr

000231d0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231d0:	6843      	ldr	r3, [r0, #4]
}
   231d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   231d4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   231d6:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   231d8:	404b      	eors	r3, r1
    p_reg->OUT = value;
   231da:	6053      	str	r3, [r2, #4]
}
   231dc:	4770      	bx	lr

000231de <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   231de:	68c3      	ldr	r3, [r0, #12]
{
   231e0:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   231e2:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   231e4:	b158      	cbz	r0, 231fe <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   231e6:	2400      	movs	r4, #0
   231e8:	4281      	cmp	r1, r0
   231ea:	d113      	bne.n	23214 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   231ec:	6808      	ldr	r0, [r1, #0]
   231ee:	b95c      	cbnz	r4, 23208 <gpio_nrfx_manage_callback+0x2a>
   231f0:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   231f2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   231f4:	42a1      	cmp	r1, r4
   231f6:	d100      	bne.n	231fa <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   231f8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   231fa:	2000      	movs	r0, #0
   231fc:	6008      	str	r0, [r1, #0]
	if (set) {
   231fe:	b972      	cbnz	r2, 2321e <gpio_nrfx_manage_callback+0x40>
	return 0;
   23200:	2000      	movs	r0, #0
}
   23202:	bd30      	pop	{r4, r5, pc}
   23204:	4628      	mov	r0, r5
   23206:	e7ef      	b.n	231e8 <gpio_nrfx_manage_callback+0xa>
   23208:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2320a:	6898      	ldr	r0, [r3, #8]
   2320c:	4281      	cmp	r1, r0
	list->tail = node;
   2320e:	bf08      	it	eq
   23210:	609c      	streq	r4, [r3, #8]
}
   23212:	e7f2      	b.n	231fa <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23214:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23216:	4604      	mov	r4, r0
   23218:	2d00      	cmp	r5, #0
   2321a:	d1f3      	bne.n	23204 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2321c:	b13a      	cbz	r2, 2322e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2321e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   23220:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   23222:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   23224:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23226:	2800      	cmp	r0, #0
   23228:	d1ea      	bne.n	23200 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2322a:	6099      	str	r1, [r3, #8]
}
   2322c:	e7e9      	b.n	23202 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2322e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   23232:	e7e6      	b.n	23202 <gpio_nrfx_manage_callback+0x24>

00023234 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   23234:	6843      	ldr	r3, [r0, #4]
{
   23236:	b410      	push	{r4}
	return config->uarte_regs;
   23238:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2323a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2323e:	05d2      	lsls	r2, r2, #23
   23240:	d518      	bpl.n	23274 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23242:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   23246:	b1aa      	cbz	r2, 23274 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   23248:	f04f 0120 	mov.w	r1, #32
   2324c:	f3ef 8211 	mrs	r2, BASEPRI
   23250:	f381 8811 	msr	BASEPRI, r1
   23254:	f3bf 8f6f 	isb	sy
   23258:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2325c:	b131      	cbz	r1, 2326c <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2325e:	2100      	movs	r1, #0
   23260:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   23264:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23268:	2101      	movs	r1, #1
   2326a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2326c:	f382 8811 	msr	BASEPRI, r2
   23270:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   23274:	68c2      	ldr	r2, [r0, #12]
   23276:	68d2      	ldr	r2, [r2, #12]
   23278:	b15a      	cbz	r2, 23292 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2327a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2327e:	b151      	cbz	r1, 23296 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   23280:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   23282:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   23284:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   23286:	b134      	cbz	r4, 23296 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   23288:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2328c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   23290:	7391      	strb	r1, [r2, #14]
}
   23292:	bc10      	pop	{r4}
   23294:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23296:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2329a:	b121      	cbz	r1, 232a6 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2329c:	2100      	movs	r1, #0
   2329e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   232a2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   232a6:	6813      	ldr	r3, [r2, #0]
   232a8:	2b00      	cmp	r3, #0
   232aa:	d0f2      	beq.n	23292 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   232ac:	6851      	ldr	r1, [r2, #4]
}
   232ae:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   232b0:	4718      	bx	r3

000232b2 <uarte_nrfx_config_get>:
{
   232b2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   232b4:	68c2      	ldr	r2, [r0, #12]
   232b6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   232ba:	e883 0003 	stmia.w	r3, {r0, r1}
}
   232be:	2000      	movs	r0, #0
   232c0:	4770      	bx	lr

000232c2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   232c2:	6843      	ldr	r3, [r0, #4]
   232c4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   232c6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   232ca:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   232ce:	4770      	bx	lr

000232d0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   232d0:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   232d2:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   232d4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   232d8:	b938      	cbnz	r0, 232ea <is_tx_ready+0x1a>
   232da:	7992      	ldrb	r2, [r2, #6]
   232dc:	b932      	cbnz	r2, 232ec <is_tx_ready+0x1c>
   232de:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   232e2:	3800      	subs	r0, #0
   232e4:	bf18      	it	ne
   232e6:	2001      	movne	r0, #1
   232e8:	4770      	bx	lr
   232ea:	2001      	movs	r0, #1
}
   232ec:	4770      	bx	lr

000232ee <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   232ee:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   232f0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   232f2:	681b      	ldr	r3, [r3, #0]
   232f4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   232f8:	b148      	cbz	r0, 2330e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   232fa:	2000      	movs	r0, #0
	*c = data->rx_data;
   232fc:	7c52      	ldrb	r2, [r2, #17]
   232fe:	700a      	strb	r2, [r1, #0]
   23300:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   23304:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23308:	2201      	movs	r2, #1
   2330a:	601a      	str	r2, [r3, #0]
	return 0;
   2330c:	4770      	bx	lr
		return -1;
   2330e:	f04f 30ff 	mov.w	r0, #4294967295
}
   23312:	4770      	bx	lr

00023314 <uarte_nrfx_fifo_fill>:
{
   23314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   23316:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   23318:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   2331a:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   2331c:	68f3      	ldr	r3, [r6, #12]
   2331e:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23320:	3310      	adds	r3, #16
   23322:	4294      	cmp	r4, r2
   23324:	bfa8      	it	ge
   23326:	4614      	movge	r4, r2
   23328:	2201      	movs	r2, #1
   2332a:	e8d3 7fef 	ldaex	r7, [r3]
   2332e:	2f00      	cmp	r7, #0
   23330:	d104      	bne.n	2333c <uarte_nrfx_fifo_fill+0x28>
   23332:	e8c3 2fec 	stlex	ip, r2, [r3]
   23336:	f1bc 0f00 	cmp.w	ip, #0
   2333a:	d1f6      	bne.n	2332a <uarte_nrfx_fifo_fill+0x16>
   2333c:	bf0c      	ite	eq
   2333e:	4613      	moveq	r3, r2
   23340:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   23342:	d01c      	beq.n	2337e <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   23344:	461c      	mov	r4, r3
}
   23346:	4620      	mov	r0, r4
   23348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2334a:	68f2      	ldr	r2, [r6, #12]
   2334c:	5ccf      	ldrb	r7, [r1, r3]
   2334e:	6892      	ldr	r2, [r2, #8]
   23350:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   23352:	3301      	adds	r3, #1
   23354:	42a3      	cmp	r3, r4
   23356:	dbf8      	blt.n	2334a <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   23358:	f04f 0320 	mov.w	r3, #32
   2335c:	f3ef 8111 	mrs	r1, BASEPRI
   23360:	f383 8811 	msr	BASEPRI, r3
   23364:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   23368:	f7ff ffb2 	bl	232d0 <is_tx_ready>
   2336c:	68f3      	ldr	r3, [r6, #12]
   2336e:	b940      	cbnz	r0, 23382 <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   23370:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   23372:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   23374:	f381 8811 	msr	BASEPRI, r1
   23378:	f3bf 8f6f 	isb	sy
	return len;
   2337c:	e7e3      	b.n	23346 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   2337e:	2300      	movs	r3, #0
   23380:	e7e8      	b.n	23354 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23382:	689b      	ldr	r3, [r3, #8]
   23384:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23388:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   2338a:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2338e:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   23392:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   23396:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   2339a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2339e:	2301      	movs	r3, #1
   233a0:	60ab      	str	r3, [r5, #8]
}
   233a2:	e7e7      	b.n	23374 <uarte_nrfx_fifo_fill+0x60>

000233a4 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   233a4:	6843      	ldr	r3, [r0, #4]
{
   233a6:	4602      	mov	r2, r0
	return config->uarte_regs;
   233a8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   233aa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   233ae:	b148      	cbz	r0, 233c4 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233b0:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   233b2:	68d2      	ldr	r2, [r2, #12]
   233b4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   233b8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233bc:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   233be:	7c52      	ldrb	r2, [r2, #17]
   233c0:	700a      	strb	r2, [r1, #0]
   233c2:	6018      	str	r0, [r3, #0]
}
   233c4:	4770      	bx	lr

000233c6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   233c6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   233c8:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   233ca:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   233cc:	f04f 0020 	mov.w	r0, #32
   233d0:	f3ef 8311 	mrs	r3, BASEPRI
   233d4:	f380 8811 	msr	BASEPRI, r0
   233d8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   233dc:	2000      	movs	r0, #0
   233de:	68c9      	ldr	r1, [r1, #12]
   233e0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   233e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   233e6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   233ea:	f383 8811 	msr	BASEPRI, r3
   233ee:	f3bf 8f6f 	isb	sy
}
   233f2:	4770      	bx	lr

000233f4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   233f4:	2201      	movs	r2, #1
   233f6:	68c3      	ldr	r3, [r0, #12]
   233f8:	68db      	ldr	r3, [r3, #12]
   233fa:	739a      	strb	r2, [r3, #14]
}
   233fc:	4770      	bx	lr

000233fe <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   233fe:	68c3      	ldr	r3, [r0, #12]
   23400:	68db      	ldr	r3, [r3, #12]
   23402:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   23404:	b94b      	cbnz	r3, 2341a <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   23406:	6843      	ldr	r3, [r0, #4]
   23408:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2340a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return !data->int_driven->disable_tx_irq &&
   2340e:	b128      	cbz	r0, 2341c <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   23410:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   23414:	f3c0 5080 	ubfx	r0, r0, #22, #1
   23418:	4770      	bx	lr
   2341a:	2000      	movs	r0, #0
}
   2341c:	4770      	bx	lr

0002341e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2341e:	6843      	ldr	r3, [r0, #4]
   23420:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23422:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   23426:	3800      	subs	r0, #0
   23428:	bf18      	it	ne
   2342a:	2001      	movne	r0, #1
   2342c:	4770      	bx	lr

0002342e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   2342e:	2210      	movs	r2, #16
	return config->uarte_regs;
   23430:	6843      	ldr	r3, [r0, #4]
   23432:	681b      	ldr	r3, [r3, #0]
   23434:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23438:	4770      	bx	lr

0002343a <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   2343a:	2210      	movs	r2, #16
	return config->uarte_regs;
   2343c:	6843      	ldr	r3, [r0, #4]
   2343e:	681b      	ldr	r3, [r3, #0]
   23440:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23444:	4770      	bx	lr

00023446 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   23446:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   2344a:	6843      	ldr	r3, [r0, #4]
   2344c:	681b      	ldr	r3, [r3, #0]
   2344e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23452:	4770      	bx	lr

00023454 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   23454:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   23458:	6843      	ldr	r3, [r0, #4]
   2345a:	681b      	ldr	r3, [r3, #0]
   2345c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23460:	4770      	bx	lr

00023462 <uarte_nrfx_irq_update>:
}
   23462:	2001      	movs	r0, #1
   23464:	4770      	bx	lr

00023466 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   23466:	68c3      	ldr	r3, [r0, #12]
   23468:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2346a:	e9c3 1200 	strd	r1, r2, [r3]
}
   2346e:	4770      	bx	lr

00023470 <uarte_nrfx_irq_is_pending>:
{
   23470:	b508      	push	{r3, lr}
	return config->uarte_regs;
   23472:	6843      	ldr	r3, [r0, #4]
{
   23474:	4602      	mov	r2, r0
	return config->uarte_regs;
   23476:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   23478:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   2347c:	025b      	lsls	r3, r3, #9
   2347e:	d405      	bmi.n	2348c <uarte_nrfx_irq_is_pending+0x1c>
   23480:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   23484:	f010 0010 	ands.w	r0, r0, #16
   23488:	d106      	bne.n	23498 <uarte_nrfx_irq_is_pending+0x28>
}
   2348a:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2348c:	f7ff ffb7 	bl	233fe <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   23490:	2800      	cmp	r0, #0
   23492:	d0f5      	beq.n	23480 <uarte_nrfx_irq_is_pending+0x10>
		||
   23494:	2001      	movs	r0, #1
   23496:	e7f8      	b.n	2348a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   23498:	4610      	mov	r0, r2
   2349a:	f7ff ffc0 	bl	2341e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2349e:	3800      	subs	r0, #0
   234a0:	bf18      	it	ne
   234a2:	2001      	movne	r0, #1
   234a4:	e7f1      	b.n	2348a <uarte_nrfx_irq_is_pending+0x1a>

000234a6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   234a6:	4700      	bx	r0

000234a8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   234a8:	f000 b9aa 	b.w	23800 <z_impl_k_busy_wait>

000234ac <nrfx_clock_enable>:
{
   234ac:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   234ae:	2005      	movs	r0, #5
   234b0:	f7fa f9cc 	bl	1d84c <arch_irq_is_enabled>
   234b4:	b920      	cbnz	r0, 234c0 <nrfx_clock_enable+0x14>
}
   234b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   234ba:	2005      	movs	r0, #5
   234bc:	f7fa b9b6 	b.w	1d82c <arch_irq_enable>
   234c0:	bd08      	pop	{r3, pc}

000234c2 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   234c2:	f7ff bcbe 	b.w	22e42 <z_clock_idle_exit>

000234c6 <k_mem_slab_init>:
{
   234c6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   234c8:	2400      	movs	r4, #0
   234ca:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   234cc:	ea41 0402 	orr.w	r4, r1, r2
   234d0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   234d4:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   234d8:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   234da:	d10c      	bne.n	234f6 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   234dc:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   234de:	42a3      	cmp	r3, r4
   234e0:	d103      	bne.n	234ea <k_mem_slab_init+0x24>
   234e2:	e9c0 0000 	strd	r0, r0, [r0]
}
   234e6:	2000      	movs	r0, #0
}
   234e8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   234ea:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   234ec:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   234ee:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   234f0:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   234f2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   234f4:	e7f3      	b.n	234de <k_mem_slab_init+0x18>
		return -EINVAL;
   234f6:	f06f 0015 	mvn.w	r0, #21
	return rc;
   234fa:	e7f5      	b.n	234e8 <k_mem_slab_init+0x22>

000234fc <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   234fc:	4603      	mov	r3, r0
   234fe:	b510      	push	{r4, lr}
   23500:	4608      	mov	r0, r1
	__asm__ volatile(
   23502:	f04f 0220 	mov.w	r2, #32
   23506:	f3ef 8411 	mrs	r4, BASEPRI
   2350a:	f382 8811 	msr	BASEPRI, r2
   2350e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0) {
   23512:	6a1a      	ldr	r2, [r3, #32]
   23514:	b14a      	cbz	r2, 2352a <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   23516:	689a      	ldr	r2, [r3, #8]
   23518:	6999      	ldr	r1, [r3, #24]
   2351a:	f7ff fde0 	bl	230de <memcpy>
		result = 0;
   2351e:	2000      	movs	r0, #0
	__asm__ volatile(
   23520:	f384 8811 	msr	BASEPRI, r4
   23524:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   23528:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   2352a:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   2352e:	e7f7      	b.n	23520 <z_impl_k_msgq_peek+0x24>

00023530 <z_impl_k_mutex_init>:
{
   23530:	4603      	mov	r3, r0
	mutex->owner = NULL;
   23532:	2000      	movs	r0, #0
   23534:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   23538:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   2353c:	4770      	bx	lr

0002353e <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   2353e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23542:	4699      	mov	r9, r3
   23544:	4604      	mov	r4, r0
   23546:	460d      	mov	r5, r1
   23548:	4690      	mov	r8, r2
   2354a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2354e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23552:	f04f 0220 	mov.w	r2, #32
   23556:	f3ef 8711 	mrs	r7, BASEPRI
   2355a:	f382 8811 	msr	BASEPRI, r2
   2355e:	f3bf 8f6f 	isb	sy

	if (is_append) {
   23562:	b103      	cbz	r3, 23566 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   23564:	6845      	ldr	r5, [r0, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   23566:	4630      	mov	r0, r6
   23568:	f000 f91f 	bl	237aa <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   2356c:	b160      	cbz	r0, 23588 <queue_insert+0x4a>
   2356e:	2400      	movs	r4, #0
   23570:	f8c0 8014 	str.w	r8, [r0, #20]
   23574:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
	z_ready_thread(thread);
   23578:	f000 f8bc 	bl	236f4 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2357c:	4630      	mov	r0, r6
   2357e:	4639      	mov	r1, r7
   23580:	f7fc fa9a 	bl	1fab8 <z_reschedule>
	return 0;
   23584:	2000      	movs	r0, #0
   23586:	e00c      	b.n	235a2 <queue_insert+0x64>
	if (alloc) {
   23588:	f1b9 0f00 	cmp.w	r9, #0
   2358c:	d01b      	beq.n	235c6 <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   2358e:	2008      	movs	r0, #8
   23590:	f7fd fa40 	bl	20a14 <z_thread_malloc>
		if (anode == NULL) {
   23594:	b938      	cbnz	r0, 235a6 <queue_insert+0x68>
	__asm__ volatile(
   23596:	f387 8811 	msr	BASEPRI, r7
   2359a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2359e:	f06f 000b 	mvn.w	r0, #11
}
   235a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   235a6:	2301      	movs	r3, #1
		anode->data = data;
   235a8:	f8c0 8004 	str.w	r8, [r0, #4]
   235ac:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   235ae:	6803      	ldr	r3, [r0, #0]
   235b0:	f003 0203 	and.w	r2, r3, #3
   235b4:	b95d      	cbnz	r5, 235ce <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   235b6:	6823      	ldr	r3, [r4, #0]
   235b8:	4313      	orrs	r3, r2
   235ba:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   235bc:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   235be:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   235c0:	b973      	cbnz	r3, 235e0 <queue_insert+0xa2>
	list->tail = node;
   235c2:	6060      	str	r0, [r4, #4]
}
   235c4:	e00c      	b.n	235e0 <queue_insert+0xa2>
}
   235c6:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   235c8:	f8c8 9000 	str.w	r9, [r8]
}
   235cc:	e7ef      	b.n	235ae <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   235ce:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   235d0:	f033 0303 	bics.w	r3, r3, #3
   235d4:	d110      	bne.n	235f8 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   235d6:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   235d8:	6862      	ldr	r2, [r4, #4]
   235da:	b93a      	cbnz	r2, 235ec <queue_insert+0xae>
	list->head = node;
   235dc:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   235e0:	2104      	movs	r1, #4
   235e2:	f104 0010 	add.w	r0, r4, #16
   235e6:	f000 fb0c 	bl	23c02 <z_handle_obj_poll_events>
   235ea:	e7c7      	b.n	2357c <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   235ec:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   235ee:	f003 0303 	and.w	r3, r3, #3
   235f2:	4303      	orrs	r3, r0
   235f4:	6013      	str	r3, [r2, #0]
   235f6:	e7e4      	b.n	235c2 <queue_insert+0x84>
   235f8:	4313      	orrs	r3, r2
   235fa:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   235fc:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   235fe:	f003 0303 	and.w	r3, r3, #3
   23602:	4303      	orrs	r3, r0
   23604:	602b      	str	r3, [r5, #0]
}
   23606:	e7eb      	b.n	235e0 <queue_insert+0xa2>

00023608 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false, true);
   23608:	2301      	movs	r3, #1
{
   2360a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2360c:	9300      	str	r3, [sp, #0]
   2360e:	2300      	movs	r3, #0
{
   23610:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   23612:	4619      	mov	r1, r3
   23614:	f7ff ff93 	bl	2353e <queue_insert>
}
   23618:	b003      	add	sp, #12
   2361a:	f85d fb04 	ldr.w	pc, [sp], #4

0002361e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2361e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   23622:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   23626:	4298      	cmp	r0, r3
   23628:	bfac      	ite	ge
   2362a:	2000      	movge	r0, #0
   2362c:	2001      	movlt	r0, #1
   2362e:	4770      	bx	lr

00023630 <z_find_first_thread_to_unpend>:
{
   23630:	b510      	push	{r4, lr}
	__asm__ volatile(
   23632:	f04f 0320 	mov.w	r3, #32
   23636:	f3ef 8411 	mrs	r4, BASEPRI
   2363a:	f383 8811 	msr	BASEPRI, r3
   2363e:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   23642:	f000 f84d 	bl	236e0 <z_priq_dumb_best>
	__asm__ volatile(
   23646:	f384 8811 	msr	BASEPRI, r4
   2364a:	f3bf 8f6f 	isb	sy
}
   2364e:	bd10      	pop	{r4, pc}

00023650 <z_unpend_thread_no_timeout>:
{
   23650:	b510      	push	{r4, lr}
	__asm__ volatile(
   23652:	f04f 0320 	mov.w	r3, #32
   23656:	f3ef 8411 	mrs	r4, BASEPRI
   2365a:	f383 8811 	msr	BASEPRI, r3
   2365e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   23662:	f000 f81b 	bl	2369c <unpend_thread_no_timeout>
	__asm__ volatile(
   23666:	f384 8811 	msr	BASEPRI, r4
   2366a:	f3bf 8f6f 	isb	sy
}
   2366e:	bd10      	pop	{r4, pc}

00023670 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23670:	4603      	mov	r3, r0
   23672:	b920      	cbnz	r0, 2367e <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23674:	f3ef 8205 	mrs	r2, IPSR
   23678:	b90a      	cbnz	r2, 2367e <z_reschedule_irqlock+0xe>
   2367a:	f7fa b8bb 	b.w	1d7f4 <arch_swap>
   2367e:	f383 8811 	msr	BASEPRI, r3
   23682:	f3bf 8f6f 	isb	sy
}
   23686:	4770      	bx	lr

00023688 <z_reschedule_unlocked>:
	__asm__ volatile(
   23688:	f04f 0320 	mov.w	r3, #32
   2368c:	f3ef 8011 	mrs	r0, BASEPRI
   23690:	f383 8811 	msr	BASEPRI, r3
   23694:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   23698:	f7ff bfea 	b.w	23670 <z_reschedule_irqlock>

0002369c <unpend_thread_no_timeout>:
{
   2369c:	4601      	mov	r1, r0
   2369e:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   236a0:	6880      	ldr	r0, [r0, #8]
   236a2:	f7fc fa2f 	bl	1fb04 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   236a6:	7b4b      	ldrb	r3, [r1, #13]
   236a8:	f023 0302 	bic.w	r3, r3, #2
   236ac:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   236ae:	2300      	movs	r3, #0
   236b0:	608b      	str	r3, [r1, #8]
}
   236b2:	bd08      	pop	{r3, pc}

000236b4 <z_unpend_thread>:
{
   236b4:	b538      	push	{r3, r4, r5, lr}
   236b6:	4604      	mov	r4, r0
   236b8:	f04f 0320 	mov.w	r3, #32
   236bc:	f3ef 8511 	mrs	r5, BASEPRI
   236c0:	f383 8811 	msr	BASEPRI, r3
   236c4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   236c8:	f7ff ffe8 	bl	2369c <unpend_thread_no_timeout>
	__asm__ volatile(
   236cc:	f385 8811 	msr	BASEPRI, r5
   236d0:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   236d4:	f104 0018 	add.w	r0, r4, #24
}
   236d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   236dc:	f000 b8a4 	b.w	23828 <z_abort_timeout>

000236e0 <z_priq_dumb_best>:
{
   236e0:	4603      	mov	r3, r0
	return list->head == list;
   236e2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236e4:	4283      	cmp	r3, r0
   236e6:	d003      	beq.n	236f0 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   236e8:	2800      	cmp	r0, #0
   236ea:	bf38      	it	cc
   236ec:	2000      	movcc	r0, #0
   236ee:	4770      	bx	lr
	struct k_thread *thread = NULL;
   236f0:	2000      	movs	r0, #0
}
   236f2:	4770      	bx	lr

000236f4 <z_ready_thread>:
{
   236f4:	b510      	push	{r4, lr}
	__asm__ volatile(
   236f6:	f04f 0320 	mov.w	r3, #32
   236fa:	f3ef 8411 	mrs	r4, BASEPRI
   236fe:	f383 8811 	msr	BASEPRI, r3
   23702:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   23706:	f7fc fa57 	bl	1fbb8 <ready_thread>
	__asm__ volatile(
   2370a:	f384 8811 	msr	BASEPRI, r4
   2370e:	f3bf 8f6f 	isb	sy
}
   23712:	bd10      	pop	{r4, pc}

00023714 <z_thread_timeout>:
{
   23714:	b570      	push	{r4, r5, r6, lr}
   23716:	4604      	mov	r4, r0
	__asm__ volatile(
   23718:	f04f 0320 	mov.w	r3, #32
   2371c:	f3ef 8611 	mrs	r6, BASEPRI
   23720:	f383 8811 	msr	BASEPRI, r3
   23724:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   23728:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2372c:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   23730:	b113      	cbz	r3, 23738 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   23732:	4628      	mov	r0, r5
   23734:	f7ff ffb2 	bl	2369c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   23738:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   2373c:	4628      	mov	r0, r5
   2373e:	f023 0314 	bic.w	r3, r3, #20
   23742:	f804 3c0b 	strb.w	r3, [r4, #-11]
   23746:	f7fc fa37 	bl	1fbb8 <ready_thread>
	__asm__ volatile(
   2374a:	f386 8811 	msr	BASEPRI, r6
   2374e:	f3bf 8f6f 	isb	sy
}
   23752:	bd70      	pop	{r4, r5, r6, pc}

00023754 <add_to_waitq_locked>:
{
   23754:	b538      	push	{r3, r4, r5, lr}
   23756:	4604      	mov	r4, r0
   23758:	460d      	mov	r5, r1
	unready_thread(thread);
   2375a:	f7fc fbb9 	bl	1fed0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2375e:	7b63      	ldrb	r3, [r4, #13]
   23760:	f043 0302 	orr.w	r3, r3, #2
   23764:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   23766:	b1c5      	cbz	r5, 2379a <add_to_waitq_locked+0x46>
	return list->head == list;
   23768:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2376a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2376c:	429d      	cmp	r5, r3
   2376e:	bf08      	it	eq
   23770:	2300      	moveq	r3, #0
   23772:	2b00      	cmp	r3, #0
   23774:	bf38      	it	cc
   23776:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23778:	b183      	cbz	r3, 2379c <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   2377a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2377e:	f993 200e 	ldrsb.w	r2, [r3, #14]
   23782:	4291      	cmp	r1, r2
   23784:	db04      	blt.n	23790 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   23786:	686a      	ldr	r2, [r5, #4]
   23788:	429a      	cmp	r2, r3
   2378a:	d007      	beq.n	2379c <add_to_waitq_locked+0x48>
   2378c:	681b      	ldr	r3, [r3, #0]
   2378e:	e7f3      	b.n	23778 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   23790:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23792:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23796:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23798:	605c      	str	r4, [r3, #4]
}
   2379a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2379c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2379e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   237a0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   237a2:	686b      	ldr	r3, [r5, #4]
   237a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   237a6:	606c      	str	r4, [r5, #4]
   237a8:	e7f7      	b.n	2379a <add_to_waitq_locked+0x46>

000237aa <z_unpend_first_thread>:
{
   237aa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   237ac:	f04f 0320 	mov.w	r3, #32
   237b0:	f3ef 8211 	mrs	r2, BASEPRI
   237b4:	f383 8811 	msr	BASEPRI, r3
   237b8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   237bc:	f7ff ff90 	bl	236e0 <z_priq_dumb_best>
   237c0:	4604      	mov	r4, r0
	__asm__ volatile(
   237c2:	f382 8811 	msr	BASEPRI, r2
   237c6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   237ca:	b188      	cbz	r0, 237f0 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   237cc:	f04f 0320 	mov.w	r3, #32
   237d0:	f3ef 8511 	mrs	r5, BASEPRI
   237d4:	f383 8811 	msr	BASEPRI, r3
   237d8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   237dc:	f7ff ff5e 	bl	2369c <unpend_thread_no_timeout>
	__asm__ volatile(
   237e0:	f385 8811 	msr	BASEPRI, r5
   237e4:	f3bf 8f6f 	isb	sy
   237e8:	f104 0018 	add.w	r0, r4, #24
   237ec:	f000 f81c 	bl	23828 <z_abort_timeout>
}
   237f0:	4620      	mov	r0, r4
   237f2:	bd38      	pop	{r3, r4, r5, pc}

000237f4 <k_is_in_isr>:
   237f4:	f3ef 8005 	mrs	r0, IPSR
}
   237f8:	3800      	subs	r0, #0
   237fa:	bf18      	it	ne
   237fc:	2001      	movne	r0, #1
   237fe:	4770      	bx	lr

00023800 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   23800:	b108      	cbz	r0, 23806 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   23802:	f7f6 be9b 	b.w	1a53c <arch_busy_wait>
}
   23806:	4770      	bx	lr

00023808 <k_thread_name_get>:
}
   23808:	307c      	adds	r0, #124	; 0x7c
   2380a:	4770      	bx	lr

0002380c <z_impl_k_thread_stack_space_get>:
int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
   2380c:	2300      	movs	r3, #0
{
   2380e:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   23810:	e9d0 4228 	ldrd	r4, r2, [r0, #160]	; 0xa0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   23814:	4293      	cmp	r3, r2
   23816:	d102      	bne.n	2381e <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
   23818:	2000      	movs	r0, #0
	*unused_ptr = unused;
   2381a:	600b      	str	r3, [r1, #0]
}
   2381c:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   2381e:	5ce0      	ldrb	r0, [r4, r3]
   23820:	28aa      	cmp	r0, #170	; 0xaa
   23822:	d1f9      	bne.n	23818 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   23824:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   23826:	e7f5      	b.n	23814 <z_impl_k_thread_stack_space_get+0x8>

00023828 <z_abort_timeout>:
{
   23828:	b510      	push	{r4, lr}
	__asm__ volatile(
   2382a:	f04f 0220 	mov.w	r2, #32
   2382e:	f3ef 8411 	mrs	r4, BASEPRI
   23832:	f382 8811 	msr	BASEPRI, r2
   23836:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2383a:	6803      	ldr	r3, [r0, #0]
   2383c:	b13b      	cbz	r3, 2384e <z_abort_timeout+0x26>
			remove_timeout(to);
   2383e:	f7fc fe6b 	bl	20518 <remove_timeout>
			ret = 0;
   23842:	2000      	movs	r0, #0
	__asm__ volatile(
   23844:	f384 8811 	msr	BASEPRI, r4
   23848:	f3bf 8f6f 	isb	sy
}
   2384c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2384e:	f06f 0015 	mvn.w	r0, #21
   23852:	e7f7      	b.n	23844 <z_abort_timeout+0x1c>

00023854 <z_timeout_remaining>:
{
   23854:	b510      	push	{r4, lr}
	__asm__ volatile(
   23856:	f04f 0320 	mov.w	r3, #32
   2385a:	f3ef 8411 	mrs	r4, BASEPRI
   2385e:	f383 8811 	msr	BASEPRI, r3
   23862:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   23866:	f7fc fe9d 	bl	205a4 <timeout_rem>
	__asm__ volatile(
   2386a:	f384 8811 	msr	BASEPRI, r4
   2386e:	f3bf 8f6f 	isb	sy
}
   23872:	bd10      	pop	{r4, pc}

00023874 <z_get_next_timeout_expiry>:
{
   23874:	b510      	push	{r4, lr}
	__asm__ volatile(
   23876:	f04f 0320 	mov.w	r3, #32
   2387a:	f3ef 8411 	mrs	r4, BASEPRI
   2387e:	f383 8811 	msr	BASEPRI, r3
   23882:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   23886:	f7fc fe61 	bl	2054c <next_timeout>
	__asm__ volatile(
   2388a:	f384 8811 	msr	BASEPRI, r4
   2388e:	f3bf 8f6f 	isb	sy
}
   23892:	bd10      	pop	{r4, pc}

00023894 <z_set_timeout_expiry>:
{
   23894:	b570      	push	{r4, r5, r6, lr}
   23896:	4604      	mov	r4, r0
   23898:	460d      	mov	r5, r1
	__asm__ volatile(
   2389a:	f04f 0320 	mov.w	r3, #32
   2389e:	f3ef 8611 	mrs	r6, BASEPRI
   238a2:	f383 8811 	msr	BASEPRI, r3
   238a6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   238aa:	f7fc fe4f 	bl	2054c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   238ae:	2801      	cmp	r0, #1
   238b0:	dd05      	ble.n	238be <z_set_timeout_expiry+0x2a>
   238b2:	42a0      	cmp	r0, r4
   238b4:	dd03      	ble.n	238be <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   238b6:	4629      	mov	r1, r5
   238b8:	4620      	mov	r0, r4
   238ba:	f7f9 feff 	bl	1d6bc <z_clock_set_timeout>
	__asm__ volatile(
   238be:	f386 8811 	msr	BASEPRI, r6
   238c2:	f3bf 8f6f 	isb	sy
}
   238c6:	bd70      	pop	{r4, r5, r6, pc}

000238c8 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   238c8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   238ca:	f7fc ff83 	bl	207d4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   238ce:	bd08      	pop	{r3, pc}

000238d0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   238d0:	f7fc bf80 	b.w	207d4 <z_tick_get>

000238d4 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   238d4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   238d6:	1c4b      	adds	r3, r1, #1
   238d8:	bf08      	it	eq
   238da:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   238de:	4604      	mov	r4, r0
   238e0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   238e2:	d013      	beq.n	2390c <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   238e4:	ea54 0105 	orrs.w	r1, r4, r5
   238e8:	d103      	bne.n	238f2 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   238ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   238ee:	f7fc bf71 	b.w	207d4 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   238f2:	f06f 0101 	mvn.w	r1, #1
   238f6:	1a0a      	subs	r2, r1, r0
   238f8:	f04f 31ff 	mov.w	r1, #4294967295
   238fc:	eb61 0305 	sbc.w	r3, r1, r5
   23900:	2a00      	cmp	r2, #0
   23902:	f173 0100 	sbcs.w	r1, r3, #0
   23906:	db02      	blt.n	2390e <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   23908:	4610      	mov	r0, r2
   2390a:	4619      	mov	r1, r3
}
   2390c:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2390e:	f7fc ff61 	bl	207d4 <z_tick_get>
   23912:	2c01      	cmp	r4, #1
   23914:	f175 0300 	sbcs.w	r3, r5, #0
   23918:	bfbc      	itt	lt
   2391a:	2401      	movlt	r4, #1
   2391c:	2500      	movlt	r5, #0
   2391e:	1820      	adds	r0, r4, r0
   23920:	eb45 0101 	adc.w	r1, r5, r1
   23924:	e7f2      	b.n	2390c <z_timeout_end_calc+0x38>

00023926 <k_timer_init>:
	timer->status = 0U;
   23926:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   23928:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   2392c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   23930:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   23934:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   23938:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2393a:	6343      	str	r3, [r0, #52]	; 0x34
}
   2393c:	4770      	bx	lr

0002393e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2393e:	b510      	push	{r4, lr}
   23940:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   23942:	f7ff ff71 	bl	23828 <z_abort_timeout>

	if (inactive) {
   23946:	b9d8      	cbnz	r0, 23980 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   23948:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2394a:	b10b      	cbz	r3, 23950 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2394c:	4620      	mov	r0, r4
   2394e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   23950:	f104 0018 	add.w	r0, r4, #24
   23954:	2100      	movs	r1, #0
   23956:	f7ff fe6b 	bl	23630 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2395a:	4604      	mov	r4, r0
   2395c:	b180      	cbz	r0, 23980 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2395e:	f7ff fe77 	bl	23650 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   23962:	4620      	mov	r0, r4
   23964:	f7ff fec6 	bl	236f4 <z_ready_thread>
	__asm__ volatile(
   23968:	f04f 0320 	mov.w	r3, #32
   2396c:	f3ef 8011 	mrs	r0, BASEPRI
   23970:	f383 8811 	msr	BASEPRI, r3
   23974:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   23978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2397c:	f7ff be78 	b.w	23670 <z_reschedule_irqlock>
   23980:	bd10      	pop	{r4, pc}

00023982 <clear_event_registrations>:
	while (num_events--) {
   23982:	2314      	movs	r3, #20
{
   23984:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   23986:	2400      	movs	r4, #0
   23988:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   2398c:	4281      	cmp	r1, r0
   2398e:	d100      	bne.n	23992 <clear_event_registrations+0x10>
}
   23990:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   23992:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   23996:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2399a:	f003 030f 	and.w	r3, r3, #15
   2399e:	2b02      	cmp	r3, #2
   239a0:	d80a      	bhi.n	239b8 <clear_event_registrations+0x36>
   239a2:	b15b      	cbz	r3, 239bc <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   239a4:	f851 3c14 	ldr.w	r3, [r1, #-20]
   239a8:	b143      	cbz	r3, 239bc <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   239aa:	f851 5c10 	ldr.w	r5, [r1, #-16]
   239ae:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   239b0:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   239b2:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   239b6:	e001      	b.n	239bc <clear_event_registrations+0x3a>
	switch (event->type) {
   239b8:	2b04      	cmp	r3, #4
   239ba:	d0f3      	beq.n	239a4 <clear_event_registrations+0x22>
	__asm__ volatile(
   239bc:	f382 8811 	msr	BASEPRI, r2
   239c0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   239c4:	f04f 0320 	mov.w	r3, #32
   239c8:	f3ef 8211 	mrs	r2, BASEPRI
   239cc:	f383 8811 	msr	BASEPRI, r3
   239d0:	f3bf 8f6f 	isb	sy
   239d4:	3914      	subs	r1, #20
   239d6:	e7d9      	b.n	2398c <clear_event_registrations+0xa>

000239d8 <k_work_submit_to_queue>:
{
   239d8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   239da:	f101 0308 	add.w	r3, r1, #8
   239de:	e8d3 2fef 	ldaex	r2, [r3]
   239e2:	f042 0c01 	orr.w	ip, r2, #1
   239e6:	e8c3 cfee 	stlex	lr, ip, [r3]
   239ea:	f1be 0f00 	cmp.w	lr, #0
   239ee:	d1f6      	bne.n	239de <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   239f0:	07d3      	lsls	r3, r2, #31
   239f2:	d403      	bmi.n	239fc <k_work_submit_to_queue+0x24>
}
   239f4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   239f8:	f7ff be06 	b.w	23608 <k_queue_append>
}
   239fc:	f85d fb04 	ldr.w	pc, [sp], #4

00023a00 <signal_poll_event>:
{
   23a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   23a04:	6884      	ldr	r4, [r0, #8]
{
   23a06:	4605      	mov	r5, r0
   23a08:	460e      	mov	r6, r1
	if (poller) {
   23a0a:	b144      	cbz	r4, 23a1e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   23a0c:	7863      	ldrb	r3, [r4, #1]
   23a0e:	2b01      	cmp	r3, #1
   23a10:	d138      	bne.n	23a84 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   23a12:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   23a16:	f013 0302 	ands.w	r3, r3, #2
   23a1a:	d10a      	bne.n	23a32 <signal_poll_event+0x32>
		poller->is_polling = false;
   23a1c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   23a1e:	2000      	movs	r0, #0
	event->state |= state;
   23a20:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   23a22:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   23a24:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23a28:	430e      	orrs	r6, r1
   23a2a:	f366 3310 	bfi	r3, r6, #12, #5
   23a2e:	60eb      	str	r3, [r5, #12]
	return retcode;
   23a30:	e00d      	b.n	23a4e <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   23a32:	f04f 31ff 	mov.w	r1, #4294967295
   23a36:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   23a3a:	f06f 0001 	mvn.w	r0, #1
   23a3e:	428b      	cmp	r3, r1
   23a40:	bf08      	it	eq
   23a42:	4282      	cmpeq	r2, r0
   23a44:	d105      	bne.n	23a52 <signal_poll_event+0x52>
		poller->is_polling = false;
   23a46:	2300      	movs	r3, #0
		return -EAGAIN;
   23a48:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   23a4c:	7023      	strb	r3, [r4, #0]
}
   23a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23a52:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   23a56:	4640      	mov	r0, r8
   23a58:	f7ff fe2c 	bl	236b4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   23a5c:	2e08      	cmp	r6, #8
   23a5e:	bf0c      	ite	eq
   23a60:	f06f 0303 	mvneq.w	r3, #3
   23a64:	2300      	movne	r3, #0
   23a66:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23a68:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   23a6c:	06db      	lsls	r3, r3, #27
   23a6e:	d102      	bne.n	23a76 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   23a70:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   23a74:	b10f      	cbz	r7, 23a7a <signal_poll_event+0x7a>
		poller->is_polling = false;
   23a76:	2300      	movs	r3, #0
   23a78:	e7d0      	b.n	23a1c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   23a7a:	4640      	mov	r0, r8
   23a7c:	f7ff fe3a 	bl	236f4 <z_ready_thread>
		poller->is_polling = false;
   23a80:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   23a82:	e7cc      	b.n	23a1e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   23a84:	2b02      	cmp	r3, #2
   23a86:	d1f6      	bne.n	23a76 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   23a88:	7823      	ldrb	r3, [r4, #0]
   23a8a:	2b00      	cmp	r3, #0
   23a8c:	d0c7      	beq.n	23a1e <signal_poll_event+0x1e>
   23a8e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   23a92:	2f00      	cmp	r7, #0
   23a94:	d0f4      	beq.n	23a80 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   23a96:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   23a9a:	f1a4 0910 	sub.w	r9, r4, #16
   23a9e:	f104 0010 	add.w	r0, r4, #16
   23aa2:	f7ff fec1 	bl	23828 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   23aa6:	4649      	mov	r1, r9
   23aa8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   23aaa:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   23aae:	f7ff ff93 	bl	239d8 <k_work_submit_to_queue>
		poller->is_polling = false;
   23ab2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   23ab6:	e7b2      	b.n	23a1e <signal_poll_event+0x1e>

00023ab8 <add_event>:
{
   23ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23aba:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   23abc:	e9d0 2300 	ldrd	r2, r3, [r0]
   23ac0:	4290      	cmp	r0, r2
   23ac2:	4604      	mov	r4, r0
   23ac4:	460d      	mov	r5, r1
   23ac6:	d106      	bne.n	23ad6 <add_event+0x1e>
	node->prev = list->tail;
   23ac8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   23aca:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   23acc:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   23ace:	6863      	ldr	r3, [r4, #4]
   23ad0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   23ad2:	6065      	str	r5, [r4, #4]
}
   23ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   23ad6:	2b00      	cmp	r3, #0
   23ad8:	d0f6      	beq.n	23ac8 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   23ada:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23adc:	b100      	cbz	r0, 23ae0 <add_event+0x28>
   23ade:	3864      	subs	r0, #100	; 0x64
   23ae0:	b107      	cbz	r7, 23ae4 <add_event+0x2c>
   23ae2:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   23ae4:	4639      	mov	r1, r7
   23ae6:	f7ff fd9a 	bl	2361e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   23aea:	2800      	cmp	r0, #0
   23aec:	d1ec      	bne.n	23ac8 <add_event+0x10>
	return list->head == list;
   23aee:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23af0:	42b4      	cmp	r4, r6
   23af2:	d0e9      	beq.n	23ac8 <add_event+0x10>
   23af4:	2e00      	cmp	r6, #0
   23af6:	bf38      	it	cc
   23af8:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23afa:	2e00      	cmp	r6, #0
   23afc:	d0e4      	beq.n	23ac8 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   23afe:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   23b00:	b101      	cbz	r1, 23b04 <add_event+0x4c>
   23b02:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   23b04:	4638      	mov	r0, r7
   23b06:	f7ff fd8a 	bl	2361e <z_is_t1_higher_prio_than_t2>
   23b0a:	b128      	cbz	r0, 23b18 <add_event+0x60>
	node->prev = successor->prev;
   23b0c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   23b0e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   23b12:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   23b14:	6075      	str	r5, [r6, #4]
			return;
   23b16:	e7dd      	b.n	23ad4 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   23b18:	6863      	ldr	r3, [r4, #4]
   23b1a:	42b3      	cmp	r3, r6
   23b1c:	d0d4      	beq.n	23ac8 <add_event+0x10>
   23b1e:	6836      	ldr	r6, [r6, #0]
   23b20:	e7eb      	b.n	23afa <add_event+0x42>

00023b22 <register_events>:
{
   23b22:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   23b26:	f04f 0a00 	mov.w	sl, #0
{
   23b2a:	460e      	mov	r6, r1
   23b2c:	4614      	mov	r4, r2
   23b2e:	461f      	mov	r7, r3
   23b30:	4683      	mov	fp, r0
	int events_registered = 0;
   23b32:	4655      	mov	r5, sl
	event->poller = NULL;
   23b34:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   23b36:	45b2      	cmp	sl, r6
   23b38:	db02      	blt.n	23b40 <register_events+0x1e>
}
   23b3a:	4628      	mov	r0, r5
   23b3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b40:	f04f 0320 	mov.w	r3, #32
   23b44:	f3ef 8911 	mrs	r9, BASEPRI
   23b48:	f383 8811 	msr	BASEPRI, r3
   23b4c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   23b50:	f89b 200d 	ldrb.w	r2, [fp, #13]
   23b54:	f002 020f 	and.w	r2, r2, #15
   23b58:	2a02      	cmp	r2, #2
   23b5a:	d006      	beq.n	23b6a <register_events+0x48>
   23b5c:	2a04      	cmp	r2, #4
   23b5e:	d008      	beq.n	23b72 <register_events+0x50>
   23b60:	2a01      	cmp	r2, #1
   23b62:	d120      	bne.n	23ba6 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   23b64:	f8db 3010 	ldr.w	r3, [fp, #16]
   23b68:	e001      	b.n	23b6e <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   23b6a:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   23b6e:	689b      	ldr	r3, [r3, #8]
   23b70:	e002      	b.n	23b78 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   23b72:	f8db 3010 	ldr.w	r3, [fp, #16]
   23b76:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   23b78:	b1ab      	cbz	r3, 23ba6 <register_events+0x84>
	event->state |= state;
   23b7a:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   23b7e:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   23b82:	f3c3 3104 	ubfx	r1, r3, #12, #5
   23b86:	430a      	orrs	r2, r1
   23b88:	f362 3310 	bfi	r3, r2, #12, #5
   23b8c:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   23b90:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   23b94:	f389 8811 	msr	BASEPRI, r9
   23b98:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23b9c:	f10a 0a01 	add.w	sl, sl, #1
   23ba0:	f10b 0b14 	add.w	fp, fp, #20
   23ba4:	e7c7      	b.n	23b36 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   23ba6:	2f00      	cmp	r7, #0
   23ba8:	d1f4      	bne.n	23b94 <register_events+0x72>
   23baa:	7823      	ldrb	r3, [r4, #0]
   23bac:	2b00      	cmp	r3, #0
   23bae:	d0f1      	beq.n	23b94 <register_events+0x72>
	switch (event->type) {
   23bb0:	f89b 300d 	ldrb.w	r3, [fp, #13]
   23bb4:	f003 030f 	and.w	r3, r3, #15
   23bb8:	2b02      	cmp	r3, #2
   23bba:	d008      	beq.n	23bce <register_events+0xac>
   23bbc:	2b04      	cmp	r3, #4
   23bbe:	d006      	beq.n	23bce <register_events+0xac>
   23bc0:	2b01      	cmp	r3, #1
   23bc2:	d10b      	bne.n	23bdc <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   23bc4:	4622      	mov	r2, r4
   23bc6:	4659      	mov	r1, fp
   23bc8:	f8db 0010 	ldr.w	r0, [fp, #16]
   23bcc:	e004      	b.n	23bd8 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   23bce:	4622      	mov	r2, r4
   23bd0:	4659      	mov	r1, fp
   23bd2:	f8db 0010 	ldr.w	r0, [fp, #16]
   23bd6:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   23bd8:	f7ff ff6e 	bl	23ab8 <add_event>
	event->poller = poller;
   23bdc:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   23be0:	3501      	adds	r5, #1
   23be2:	e7d7      	b.n	23b94 <register_events+0x72>

00023be4 <k_poll_event_init>:
{
   23be4:	b510      	push	{r4, lr}
	event->poller = NULL;
   23be6:	2400      	movs	r4, #0
	event->type = type;
   23be8:	0452      	lsls	r2, r2, #17
   23bea:	0209      	lsls	r1, r1, #8
   23bec:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   23bf0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   23bf4:	430a      	orrs	r2, r1
   23bf6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   23bf8:	6084      	str	r4, [r0, #8]
	event->type = type;
   23bfa:	430a      	orrs	r2, r1
	event->obj = obj;
   23bfc:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   23c00:	bd10      	pop	{r4, pc}

00023c02 <z_handle_obj_poll_events>:
{
   23c02:	4603      	mov	r3, r0
	return list->head == list;
   23c04:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   23c06:	4283      	cmp	r3, r0
   23c08:	d008      	beq.n	23c1c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   23c0a:	e9d0 3200 	ldrd	r3, r2, [r0]
   23c0e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23c10:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23c12:	2300      	movs	r3, #0
	node->prev = NULL;
   23c14:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   23c18:	f7ff bef2 	b.w	23a00 <signal_poll_event>
}
   23c1c:	4770      	bx	lr

00023c1e <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
   23c1e:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   23c20:	e9c0 0000 	strd	r0, r0, [r0]
   23c24:	6083      	str	r3, [r0, #8]
}
   23c26:	4770      	bx	lr

00023c28 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
   23c28:	6883      	ldr	r3, [r0, #8]
   23c2a:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   23c2c:	68c3      	ldr	r3, [r0, #12]
   23c2e:	6013      	str	r3, [r2, #0]
}
   23c30:	4770      	bx	lr

00023c32 <k_mem_pool_malloc>:
{
   23c32:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23c34:	2408      	movs	r4, #8
   23c36:	190a      	adds	r2, r1, r4
   23c38:	d208      	bcs.n	23c4c <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   23c3a:	2600      	movs	r6, #0
   23c3c:	2700      	movs	r7, #0
   23c3e:	eb0d 0104 	add.w	r1, sp, r4
   23c42:	e9cd 6700 	strd	r6, r7, [sp]
   23c46:	f000 f857 	bl	23cf8 <k_mem_pool_alloc>
   23c4a:	b110      	cbz	r0, 23c52 <k_mem_pool_malloc+0x20>
		return NULL;
   23c4c:	2000      	movs	r0, #0
}
   23c4e:	b004      	add	sp, #16
   23c50:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   23c52:	4622      	mov	r2, r4
   23c54:	9802      	ldr	r0, [sp, #8]
   23c56:	a902      	add	r1, sp, #8
   23c58:	f7ff fa41 	bl	230de <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   23c5c:	9802      	ldr	r0, [sp, #8]
   23c5e:	3008      	adds	r0, #8
   23c60:	e7f5      	b.n	23c4e <k_mem_pool_malloc+0x1c>

00023c62 <k_heap_init>:
{
   23c62:	b410      	push	{r4}
   23c64:	f100 040c 	add.w	r4, r0, #12
   23c68:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   23c6c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   23c6e:	f7fd bc54 	b.w	2151a <sys_heap_init>

00023c72 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   23c72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c76:	4604      	mov	r4, r0
   23c78:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   23c7a:	4610      	mov	r0, r2
   23c7c:	4619      	mov	r1, r3
{
   23c7e:	b085      	sub	sp, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   23c80:	f7ff fe28 	bl	238d4 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23c84:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   23c88:	4605      	mov	r5, r0
   23c8a:	460f      	mov	r7, r1
	__asm__ volatile(
   23c8c:	f04f 0220 	mov.w	r2, #32
   23c90:	f3ef 8311 	mrs	r3, BASEPRI
   23c94:	f382 8811 	msr	BASEPRI, r2
   23c98:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23c9c:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   23ca0:	4631      	mov	r1, r6
   23ca2:	4620      	mov	r0, r4
   23ca4:	9303      	str	r3, [sp, #12]
   23ca6:	f7fd fc04 	bl	214b2 <sys_heap_alloc>
   23caa:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   23cac:	f7fc fd92 	bl	207d4 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   23cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23cb4:	b13a      	cbz	r2, 23cc6 <k_heap_alloc+0x54>
	__asm__ volatile(
   23cb6:	f383 8811 	msr	BASEPRI, r3
   23cba:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23cbe:	4610      	mov	r0, r2
   23cc0:	b005      	add	sp, #20
   23cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   23cc6:	ebb5 0800 	subs.w	r8, r5, r0
   23cca:	eb67 0901 	sbc.w	r9, r7, r1
   23cce:	f1b8 0f01 	cmp.w	r8, #1
   23cd2:	f179 0100 	sbcs.w	r1, r9, #0
   23cd6:	dbee      	blt.n	23cb6 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23cd8:	465a      	mov	r2, fp
   23cda:	4619      	mov	r1, r3
   23cdc:	4650      	mov	r0, sl
   23cde:	e9cd 8900 	strd	r8, r9, [sp]
   23ce2:	f7fc f935 	bl	1ff50 <z_pend_curr>
	__asm__ volatile(
   23ce6:	f04f 0220 	mov.w	r2, #32
   23cea:	f3ef 8311 	mrs	r3, BASEPRI
   23cee:	f382 8811 	msr	BASEPRI, r2
   23cf2:	f3bf 8f6f 	isb	sy
   23cf6:	e7d3      	b.n	23ca0 <k_heap_alloc+0x2e>

00023cf8 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   23cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cfa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   23cfe:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   23d00:	6800      	ldr	r0, [r0, #0]
{
   23d02:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   23d04:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   23d06:	4632      	mov	r2, r6
   23d08:	463b      	mov	r3, r7
   23d0a:	4621      	mov	r1, r4
   23d0c:	f7ff ffb1 	bl	23c72 <k_heap_alloc>
   23d10:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   23d12:	b144      	cbz	r4, 23d26 <k_mem_pool_alloc+0x2e>
   23d14:	b938      	cbnz	r0, 23d26 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   23d16:	ea56 0307 	orrs.w	r3, r6, r7
   23d1a:	bf0c      	ite	eq
   23d1c:	f06f 000b 	mvneq.w	r0, #11
   23d20:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   23d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   23d26:	2000      	movs	r0, #0
   23d28:	e7fc      	b.n	23d24 <k_mem_pool_alloc+0x2c>

00023d2a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   23d2a:	4770      	bx	lr
