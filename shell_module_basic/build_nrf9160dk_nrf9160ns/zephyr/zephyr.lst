
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_start>:
    c000:	2002bfc0 	.word	0x2002bfc0
    c004:	00012ea1 	.word	0x00012ea1
    c008:	0001b041 	.word	0x0001b041
    c00c:	00012edd 	.word	0x00012edd
    c010:	00012edd 	.word	0x00012edd
    c014:	00012edd 	.word	0x00012edd
    c018:	00012edd 	.word	0x00012edd
    c01c:	00012edd 	.word	0x00012edd
	...
    c02c:	00012dfd 	.word	0x00012dfd
    c030:	00012edd 	.word	0x00012edd
    c034:	00000000 	.word	0x00000000
    c038:	00012da1 	.word	0x00012da1
    c03c:	0001b009 	.word	0x0001b009

0000c040 <_irq_vector_table>:
    c040:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c050:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c060:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c070:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c080:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c090:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0a0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0b0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0c0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0d0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0e0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c0f0:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c100:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c110:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c120:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c130:	00012e61 00012e61 00012e61 00012e61     a...a...a...a...
    c140:	00012e61                                a...

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00013cfc 00000001 0000c000 0000c000     .<..............
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_ldivmod>:
    c240:	b97b      	cbnz	r3, c262 <__aeabi_ldivmod+0x22>
    c242:	b972      	cbnz	r2, c262 <__aeabi_ldivmod+0x22>
    c244:	2900      	cmp	r1, #0
    c246:	bfbe      	ittt	lt
    c248:	2000      	movlt	r0, #0
    c24a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    c24e:	e006      	blt.n	c25e <__aeabi_ldivmod+0x1e>
    c250:	bf08      	it	eq
    c252:	2800      	cmpeq	r0, #0
    c254:	bf1c      	itt	ne
    c256:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    c25a:	f04f 30ff 	movne.w	r0, #4294967295
    c25e:	f000 b9bb 	b.w	c5d8 <__aeabi_idiv0>
    c262:	f1ad 0c08 	sub.w	ip, sp, #8
    c266:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c26a:	2900      	cmp	r1, #0
    c26c:	db09      	blt.n	c282 <__aeabi_ldivmod+0x42>
    c26e:	2b00      	cmp	r3, #0
    c270:	db1a      	blt.n	c2a8 <__aeabi_ldivmod+0x68>
    c272:	f000 f84d 	bl	c310 <__udivmoddi4>
    c276:	f8dd e004 	ldr.w	lr, [sp, #4]
    c27a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c27e:	b004      	add	sp, #16
    c280:	4770      	bx	lr
    c282:	4240      	negs	r0, r0
    c284:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c288:	2b00      	cmp	r3, #0
    c28a:	db1b      	blt.n	c2c4 <__aeabi_ldivmod+0x84>
    c28c:	f000 f840 	bl	c310 <__udivmoddi4>
    c290:	f8dd e004 	ldr.w	lr, [sp, #4]
    c294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c298:	b004      	add	sp, #16
    c29a:	4240      	negs	r0, r0
    c29c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2a0:	4252      	negs	r2, r2
    c2a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2a6:	4770      	bx	lr
    c2a8:	4252      	negs	r2, r2
    c2aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2ae:	f000 f82f 	bl	c310 <__udivmoddi4>
    c2b2:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2ba:	b004      	add	sp, #16
    c2bc:	4240      	negs	r0, r0
    c2be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2c2:	4770      	bx	lr
    c2c4:	4252      	negs	r2, r2
    c2c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2ca:	f000 f821 	bl	c310 <__udivmoddi4>
    c2ce:	f8dd e004 	ldr.w	lr, [sp, #4]
    c2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c2d6:	b004      	add	sp, #16
    c2d8:	4252      	negs	r2, r2
    c2da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2de:	4770      	bx	lr

0000c2e0 <__aeabi_uldivmod>:
    c2e0:	b953      	cbnz	r3, c2f8 <__aeabi_uldivmod+0x18>
    c2e2:	b94a      	cbnz	r2, c2f8 <__aeabi_uldivmod+0x18>
    c2e4:	2900      	cmp	r1, #0
    c2e6:	bf08      	it	eq
    c2e8:	2800      	cmpeq	r0, #0
    c2ea:	bf1c      	itt	ne
    c2ec:	f04f 31ff 	movne.w	r1, #4294967295
    c2f0:	f04f 30ff 	movne.w	r0, #4294967295
    c2f4:	f000 b970 	b.w	c5d8 <__aeabi_idiv0>
    c2f8:	f1ad 0c08 	sub.w	ip, sp, #8
    c2fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c300:	f000 f806 	bl	c310 <__udivmoddi4>
    c304:	f8dd e004 	ldr.w	lr, [sp, #4]
    c308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c30c:	b004      	add	sp, #16
    c30e:	4770      	bx	lr

0000c310 <__udivmoddi4>:
    c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c314:	9e08      	ldr	r6, [sp, #32]
    c316:	460d      	mov	r5, r1
    c318:	4604      	mov	r4, r0
    c31a:	468a      	mov	sl, r1
    c31c:	2b00      	cmp	r3, #0
    c31e:	d17f      	bne.n	c420 <__udivmoddi4+0x110>
    c320:	428a      	cmp	r2, r1
    c322:	4617      	mov	r7, r2
    c324:	d941      	bls.n	c3aa <__udivmoddi4+0x9a>
    c326:	fab2 f282 	clz	r2, r2
    c32a:	b14a      	cbz	r2, c340 <__udivmoddi4+0x30>
    c32c:	f1c2 0120 	rsb	r1, r2, #32
    c330:	fa05 f302 	lsl.w	r3, r5, r2
    c334:	4097      	lsls	r7, r2
    c336:	4094      	lsls	r4, r2
    c338:	fa20 f101 	lsr.w	r1, r0, r1
    c33c:	ea41 0a03 	orr.w	sl, r1, r3
    c340:	ea4f 4817 	mov.w	r8, r7, lsr #16
    c344:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    c348:	fa1f f987 	uxth.w	r9, r7
    c34c:	fbba fef8 	udiv	lr, sl, r8
    c350:	fb08 a31e 	mls	r3, r8, lr, sl
    c354:	fb0e f109 	mul.w	r1, lr, r9
    c358:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c35c:	4299      	cmp	r1, r3
    c35e:	d906      	bls.n	c36e <__udivmoddi4+0x5e>
    c360:	18fb      	adds	r3, r7, r3
    c362:	d202      	bcs.n	c36a <__udivmoddi4+0x5a>
    c364:	4299      	cmp	r1, r3
    c366:	f200 8124 	bhi.w	c5b2 <__udivmoddi4+0x2a2>
    c36a:	f10e 3eff 	add.w	lr, lr, #4294967295
    c36e:	1a59      	subs	r1, r3, r1
    c370:	b2a3      	uxth	r3, r4
    c372:	fbb1 f0f8 	udiv	r0, r1, r8
    c376:	fb08 1110 	mls	r1, r8, r0, r1
    c37a:	fb00 f909 	mul.w	r9, r0, r9
    c37e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c382:	45a1      	cmp	r9, r4
    c384:	d905      	bls.n	c392 <__udivmoddi4+0x82>
    c386:	193c      	adds	r4, r7, r4
    c388:	d202      	bcs.n	c390 <__udivmoddi4+0x80>
    c38a:	45a1      	cmp	r9, r4
    c38c:	f200 810e 	bhi.w	c5ac <__udivmoddi4+0x29c>
    c390:	3801      	subs	r0, #1
    c392:	eba4 0409 	sub.w	r4, r4, r9
    c396:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    c39a:	2100      	movs	r1, #0
    c39c:	b11e      	cbz	r6, c3a6 <__udivmoddi4+0x96>
    c39e:	40d4      	lsrs	r4, r2
    c3a0:	2300      	movs	r3, #0
    c3a2:	e9c6 4300 	strd	r4, r3, [r6]
    c3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c3aa:	b902      	cbnz	r2, c3ae <__udivmoddi4+0x9e>
    c3ac:	deff      	udf	#255	; 0xff
    c3ae:	fab2 f282 	clz	r2, r2
    c3b2:	2a00      	cmp	r2, #0
    c3b4:	d14f      	bne.n	c456 <__udivmoddi4+0x146>
    c3b6:	1bcb      	subs	r3, r1, r7
    c3b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c3bc:	fa1f f887 	uxth.w	r8, r7
    c3c0:	2101      	movs	r1, #1
    c3c2:	0c25      	lsrs	r5, r4, #16
    c3c4:	fbb3 fcfe 	udiv	ip, r3, lr
    c3c8:	fb0e 301c 	mls	r0, lr, ip, r3
    c3cc:	462b      	mov	r3, r5
    c3ce:	fb08 f90c 	mul.w	r9, r8, ip
    c3d2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    c3d6:	45a9      	cmp	r9, r5
    c3d8:	d90a      	bls.n	c3f0 <__udivmoddi4+0xe0>
    c3da:	197d      	adds	r5, r7, r5
    c3dc:	bf2c      	ite	cs
    c3de:	2301      	movcs	r3, #1
    c3e0:	2300      	movcc	r3, #0
    c3e2:	45a9      	cmp	r9, r5
    c3e4:	d902      	bls.n	c3ec <__udivmoddi4+0xdc>
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	f000 80d9 	beq.w	c59e <__udivmoddi4+0x28e>
    c3ec:	f10c 3cff 	add.w	ip, ip, #4294967295
    c3f0:	eba5 0509 	sub.w	r5, r5, r9
    c3f4:	b2a3      	uxth	r3, r4
    c3f6:	fbb5 f0fe 	udiv	r0, r5, lr
    c3fa:	fb0e 5510 	mls	r5, lr, r0, r5
    c3fe:	fb08 f800 	mul.w	r8, r8, r0
    c402:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    c406:	45a0      	cmp	r8, r4
    c408:	d905      	bls.n	c416 <__udivmoddi4+0x106>
    c40a:	193c      	adds	r4, r7, r4
    c40c:	d202      	bcs.n	c414 <__udivmoddi4+0x104>
    c40e:	45a0      	cmp	r8, r4
    c410:	f200 80c9 	bhi.w	c5a6 <__udivmoddi4+0x296>
    c414:	3801      	subs	r0, #1
    c416:	eba4 0408 	sub.w	r4, r4, r8
    c41a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c41e:	e7bd      	b.n	c39c <__udivmoddi4+0x8c>
    c420:	428b      	cmp	r3, r1
    c422:	d908      	bls.n	c436 <__udivmoddi4+0x126>
    c424:	2e00      	cmp	r6, #0
    c426:	f000 80b1 	beq.w	c58c <__udivmoddi4+0x27c>
    c42a:	2100      	movs	r1, #0
    c42c:	e9c6 0500 	strd	r0, r5, [r6]
    c430:	4608      	mov	r0, r1
    c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c436:	fab3 f183 	clz	r1, r3
    c43a:	2900      	cmp	r1, #0
    c43c:	d146      	bne.n	c4cc <__udivmoddi4+0x1bc>
    c43e:	42ab      	cmp	r3, r5
    c440:	f0c0 80a7 	bcc.w	c592 <__udivmoddi4+0x282>
    c444:	4282      	cmp	r2, r0
    c446:	f240 80a4 	bls.w	c592 <__udivmoddi4+0x282>
    c44a:	4608      	mov	r0, r1
    c44c:	2e00      	cmp	r6, #0
    c44e:	d0aa      	beq.n	c3a6 <__udivmoddi4+0x96>
    c450:	e9c6 4a00 	strd	r4, sl, [r6]
    c454:	e7a7      	b.n	c3a6 <__udivmoddi4+0x96>
    c456:	f1c2 0020 	rsb	r0, r2, #32
    c45a:	4097      	lsls	r7, r2
    c45c:	fa01 f302 	lsl.w	r3, r1, r2
    c460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    c464:	40c1      	lsrs	r1, r0
    c466:	fa24 f500 	lsr.w	r5, r4, r0
    c46a:	fa1f f887 	uxth.w	r8, r7
    c46e:	4094      	lsls	r4, r2
    c470:	431d      	orrs	r5, r3
    c472:	fbb1 f0fe 	udiv	r0, r1, lr
    c476:	0c2b      	lsrs	r3, r5, #16
    c478:	fb0e 1110 	mls	r1, lr, r0, r1
    c47c:	fb00 fc08 	mul.w	ip, r0, r8
    c480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c484:	459c      	cmp	ip, r3
    c486:	d909      	bls.n	c49c <__udivmoddi4+0x18c>
    c488:	18fb      	adds	r3, r7, r3
    c48a:	bf2c      	ite	cs
    c48c:	2101      	movcs	r1, #1
    c48e:	2100      	movcc	r1, #0
    c490:	459c      	cmp	ip, r3
    c492:	d902      	bls.n	c49a <__udivmoddi4+0x18a>
    c494:	2900      	cmp	r1, #0
    c496:	f000 8095 	beq.w	c5c4 <__udivmoddi4+0x2b4>
    c49a:	3801      	subs	r0, #1
    c49c:	eba3 030c 	sub.w	r3, r3, ip
    c4a0:	b2ad      	uxth	r5, r5
    c4a2:	fbb3 f1fe 	udiv	r1, r3, lr
    c4a6:	fb0e 3311 	mls	r3, lr, r1, r3
    c4aa:	fb01 fc08 	mul.w	ip, r1, r8
    c4ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    c4b2:	45ac      	cmp	ip, r5
    c4b4:	d905      	bls.n	c4c2 <__udivmoddi4+0x1b2>
    c4b6:	197d      	adds	r5, r7, r5
    c4b8:	d202      	bcs.n	c4c0 <__udivmoddi4+0x1b0>
    c4ba:	45ac      	cmp	ip, r5
    c4bc:	f200 8089 	bhi.w	c5d2 <__udivmoddi4+0x2c2>
    c4c0:	3901      	subs	r1, #1
    c4c2:	eba5 030c 	sub.w	r3, r5, ip
    c4c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c4ca:	e77a      	b.n	c3c2 <__udivmoddi4+0xb2>
    c4cc:	f1c1 0420 	rsb	r4, r1, #32
    c4d0:	408b      	lsls	r3, r1
    c4d2:	fa02 f701 	lsl.w	r7, r2, r1
    c4d6:	fa05 fc01 	lsl.w	ip, r5, r1
    c4da:	40e2      	lsrs	r2, r4
    c4dc:	fa20 f804 	lsr.w	r8, r0, r4
    c4e0:	40e5      	lsrs	r5, r4
    c4e2:	fa00 fe01 	lsl.w	lr, r0, r1
    c4e6:	4313      	orrs	r3, r2
    c4e8:	ea48 020c 	orr.w	r2, r8, ip
    c4ec:	ea4f 4813 	mov.w	r8, r3, lsr #16
    c4f0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    c4f4:	fa1f f983 	uxth.w	r9, r3
    c4f8:	fbb5 faf8 	udiv	sl, r5, r8
    c4fc:	fb08 551a 	mls	r5, r8, sl, r5
    c500:	fb0a f009 	mul.w	r0, sl, r9
    c504:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
    c508:	4560      	cmp	r0, ip
    c50a:	d90a      	bls.n	c522 <__udivmoddi4+0x212>
    c50c:	eb13 0c0c 	adds.w	ip, r3, ip
    c510:	bf2c      	ite	cs
    c512:	2501      	movcs	r5, #1
    c514:	2500      	movcc	r5, #0
    c516:	4560      	cmp	r0, ip
    c518:	d901      	bls.n	c51e <__udivmoddi4+0x20e>
    c51a:	2d00      	cmp	r5, #0
    c51c:	d055      	beq.n	c5ca <__udivmoddi4+0x2ba>
    c51e:	f10a 3aff 	add.w	sl, sl, #4294967295
    c522:	ebac 0c00 	sub.w	ip, ip, r0
    c526:	b292      	uxth	r2, r2
    c528:	fbbc f0f8 	udiv	r0, ip, r8
    c52c:	fb08 cc10 	mls	ip, r8, r0, ip
    c530:	fb00 f909 	mul.w	r9, r0, r9
    c534:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
    c538:	45e1      	cmp	r9, ip
    c53a:	d905      	bls.n	c548 <__udivmoddi4+0x238>
    c53c:	eb13 0c0c 	adds.w	ip, r3, ip
    c540:	d201      	bcs.n	c546 <__udivmoddi4+0x236>
    c542:	45e1      	cmp	r9, ip
    c544:	d83b      	bhi.n	c5be <__udivmoddi4+0x2ae>
    c546:	3801      	subs	r0, #1
    c548:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c54c:	ebac 0c09 	sub.w	ip, ip, r9
    c550:	fba0 8907 	umull	r8, r9, r0, r7
    c554:	45cc      	cmp	ip, r9
    c556:	4645      	mov	r5, r8
    c558:	464a      	mov	r2, r9
    c55a:	d302      	bcc.n	c562 <__udivmoddi4+0x252>
    c55c:	d106      	bne.n	c56c <__udivmoddi4+0x25c>
    c55e:	45c6      	cmp	lr, r8
    c560:	d204      	bcs.n	c56c <__udivmoddi4+0x25c>
    c562:	3801      	subs	r0, #1
    c564:	ebb8 0507 	subs.w	r5, r8, r7
    c568:	eb69 0203 	sbc.w	r2, r9, r3
    c56c:	b32e      	cbz	r6, c5ba <__udivmoddi4+0x2aa>
    c56e:	ebbe 0305 	subs.w	r3, lr, r5
    c572:	eb6c 0c02 	sbc.w	ip, ip, r2
    c576:	fa23 f201 	lsr.w	r2, r3, r1
    c57a:	fa0c f404 	lsl.w	r4, ip, r4
    c57e:	fa2c f301 	lsr.w	r3, ip, r1
    c582:	2100      	movs	r1, #0
    c584:	4314      	orrs	r4, r2
    c586:	e9c6 4300 	strd	r4, r3, [r6]
    c58a:	e70c      	b.n	c3a6 <__udivmoddi4+0x96>
    c58c:	4631      	mov	r1, r6
    c58e:	4630      	mov	r0, r6
    c590:	e709      	b.n	c3a6 <__udivmoddi4+0x96>
    c592:	1a84      	subs	r4, r0, r2
    c594:	eb65 0303 	sbc.w	r3, r5, r3
    c598:	2001      	movs	r0, #1
    c59a:	469a      	mov	sl, r3
    c59c:	e756      	b.n	c44c <__udivmoddi4+0x13c>
    c59e:	f1ac 0c02 	sub.w	ip, ip, #2
    c5a2:	443d      	add	r5, r7
    c5a4:	e724      	b.n	c3f0 <__udivmoddi4+0xe0>
    c5a6:	3802      	subs	r0, #2
    c5a8:	443c      	add	r4, r7
    c5aa:	e734      	b.n	c416 <__udivmoddi4+0x106>
    c5ac:	3802      	subs	r0, #2
    c5ae:	443c      	add	r4, r7
    c5b0:	e6ef      	b.n	c392 <__udivmoddi4+0x82>
    c5b2:	f1ae 0e02 	sub.w	lr, lr, #2
    c5b6:	443b      	add	r3, r7
    c5b8:	e6d9      	b.n	c36e <__udivmoddi4+0x5e>
    c5ba:	4631      	mov	r1, r6
    c5bc:	e6f3      	b.n	c3a6 <__udivmoddi4+0x96>
    c5be:	3802      	subs	r0, #2
    c5c0:	449c      	add	ip, r3
    c5c2:	e7c1      	b.n	c548 <__udivmoddi4+0x238>
    c5c4:	3802      	subs	r0, #2
    c5c6:	443b      	add	r3, r7
    c5c8:	e768      	b.n	c49c <__udivmoddi4+0x18c>
    c5ca:	f1aa 0a02 	sub.w	sl, sl, #2
    c5ce:	449c      	add	ip, r3
    c5d0:	e7a7      	b.n	c522 <__udivmoddi4+0x212>
    c5d2:	3902      	subs	r1, #2
    c5d4:	443d      	add	r5, r7
    c5d6:	e774      	b.n	c4c2 <__udivmoddi4+0x1b2>

0000c5d8 <__aeabi_idiv0>:
    c5d8:	4770      	bx	lr
    c5da:	bf00      	nop
    c5dc:	0000      	movs	r0, r0
	...

0000c5e0 <clock_settime>:
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;

	if (clock_id != CLOCK_REALTIME) {
    c5e0:	2801      	cmp	r0, #1
{
    c5e2:	b570      	push	{r4, r5, r6, lr}
    c5e4:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
    c5e6:	d006      	beq.n	c5f6 <clock_settime+0x16>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    c5e8:	f008 f88c 	bl	14704 <z_impl_z_errno>
		errno = EINVAL;
    c5ec:	2316      	movs	r3, #22
    c5ee:	6003      	str	r3, [r0, #0]
		return -1;
    c5f0:	f04f 30ff 	mov.w	r0, #4294967295
	base.tv_nsec = delta % NSEC_PER_SEC;

	rt_clock_base = base;

	return 0;
}
    c5f4:	bd70      	pop	{r4, r5, r6, pc}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    c5f6:	f00f fa4f 	bl	1ba98 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
    c5fa:	4b1b      	ldr	r3, [pc, #108]	; (c668 <clock_settime+0x88>)
    c5fc:	6834      	ldr	r4, [r6, #0]
    c5fe:	460a      	mov	r2, r1
    c600:	fba4 4503 	umull	r4, r5, r4, r3
    c604:	6871      	ldr	r1, [r6, #4]
    c606:	fb03 5501 	mla	r5, r3, r1, r5
    c60a:	68b3      	ldr	r3, [r6, #8]
    c60c:	18e4      	adds	r4, r4, r3
    c60e:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    c612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c616:	fba0 0103 	umull	r0, r1, r0, r3
    c61a:	fb03 1102 	mla	r1, r3, r2, r1
    c61e:	0bc2      	lsrs	r2, r0, #15
    c620:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
    c624:	0bc8      	lsrs	r0, r1, #15
		- elapsed_msecs * USEC_PER_MSEC * NSEC_PER_USEC;
    c626:	4911      	ldr	r1, [pc, #68]	; (c66c <clock_settime+0x8c>)
    c628:	fba2 2301 	umull	r2, r3, r2, r1
    c62c:	fb01 3300 	mla	r3, r1, r0, r3
    c630:	1aa6      	subs	r6, r4, r2
    c632:	eb65 0503 	sbc.w	r5, r5, r3
	base.tv_sec = delta / NSEC_PER_SEC;
    c636:	4630      	mov	r0, r6
    c638:	a309      	add	r3, pc, #36	; (adr r3, c660 <clock_settime+0x80>)
    c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
    c63e:	4629      	mov	r1, r5
    c640:	f7ff fdfe 	bl	c240 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
    c644:	a306      	add	r3, pc, #24	; (adr r3, c660 <clock_settime+0x80>)
    c646:	e9d3 2300 	ldrd	r2, r3, [r3]
	rt_clock_base = base;
    c64a:	4c09      	ldr	r4, [pc, #36]	; (c670 <clock_settime+0x90>)
    c64c:	e9c4 0100 	strd	r0, r1, [r4]
	base.tv_nsec = delta % NSEC_PER_SEC;
    c650:	4630      	mov	r0, r6
    c652:	4629      	mov	r1, r5
    c654:	f7ff fdf4 	bl	c240 <__aeabi_ldivmod>
	return 0;
    c658:	2000      	movs	r0, #0
	base.tv_nsec = delta % NSEC_PER_SEC;
    c65a:	60a2      	str	r2, [r4, #8]
	return 0;
    c65c:	e7ca      	b.n	c5f4 <clock_settime+0x14>
    c65e:	bf00      	nop
    c660:	3b9aca00 	.word	0x3b9aca00
    c664:	00000000 	.word	0x00000000
    c668:	3b9aca00 	.word	0x3b9aca00
    c66c:	000f4240 	.word	0x000f4240
    c670:	200103b0 	.word	0x200103b0

0000c674 <cmd_public_key>:
	return 0;
}


static int cmd_public_key(const struct shell *shell, size_t argc, char **argv)
{
    c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

        printf("Public key: \n");
        
        printf("0x");
        int cont = keys_counter - 1;
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
    c676:	2460      	movs	r4, #96	; 0x60
        printf("Public key: \n");
    c678:	480d      	ldr	r0, [pc, #52]	; (c6b0 <cmd_public_key+0x3c>)
    c67a:	f007 f967 	bl	1394c <printf>
        printf("0x");
    c67e:	480d      	ldr	r0, [pc, #52]	; (c6b4 <cmd_public_key+0x40>)
    c680:	f007 f964 	bl	1394c <printf>
        int cont = keys_counter - 1;
    c684:	4b0c      	ldr	r3, [pc, #48]	; (c6b8 <cmd_public_key+0x44>)
          printf("%c", public_keys_hex_store[i]);
    c686:	4e0d      	ldr	r6, [pc, #52]	; (c6bc <cmd_public_key+0x48>)
        int cont = keys_counter - 1;
    c688:	681b      	ldr	r3, [r3, #0]
          printf("%c", public_keys_hex_store[i]);
    c68a:	4f0d      	ldr	r7, [pc, #52]	; (c6c0 <cmd_public_key+0x4c>)
        int cont = keys_counter - 1;
    c68c:	3b01      	subs	r3, #1
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
    c68e:	435c      	muls	r4, r3
    c690:	f104 0560 	add.w	r5, r4, #96	; 0x60
    c694:	42a5      	cmp	r5, r4
    c696:	dc04      	bgt.n	c6a2 <cmd_public_key+0x2e>
        }
        printf("\n");
    c698:	480a      	ldr	r0, [pc, #40]	; (c6c4 <cmd_public_key+0x50>)
    c69a:	f007 f957 	bl	1394c <printf>

	return 0;
}
    c69e:	2000      	movs	r0, #0
    c6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          printf("%c", public_keys_hex_store[i]);
    c6a2:	5d31      	ldrb	r1, [r6, r4]
    c6a4:	4638      	mov	r0, r7
    c6a6:	f007 f951 	bl	1394c <printf>
        for(int i = 96 * cont; i < 96 * cont + 96; i++) {
    c6aa:	3401      	adds	r4, #1
    c6ac:	e7f2      	b.n	c694 <cmd_public_key+0x20>
    c6ae:	bf00      	nop
    c6b0:	0001dddc 	.word	0x0001dddc
    c6b4:	0001ddea 	.word	0x0001ddea
    c6b8:	20010658 	.word	0x20010658
    c6bc:	2001e460 	.word	0x2001e460
    c6c0:	0001ecf7 	.word	0x0001ecf7
    c6c4:	0001e915 	.word	0x0001e915

0000c6c8 <cmd_get_keys>:

	return 0;
}

static int cmd_get_keys(const struct shell *shell, size_t argc, char **argv)
{
    c6c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        int j = 0;
        int cont = keys_counter - 1;
        int counter = keys_counter;
        
        printf("{'keys':['");
        for(int i = 0; i < 96 * cont + 96; i++){
    c6cc:	2400      	movs	r4, #0
    c6ce:	2760      	movs	r7, #96	; 0x60
        int cont = keys_counter - 1;
    c6d0:	4b12      	ldr	r3, [pc, #72]	; (c71c <cmd_get_keys+0x54>)
        printf("{'keys':['");
    c6d2:	4813      	ldr	r0, [pc, #76]	; (c720 <cmd_get_keys+0x58>)
        int cont = keys_counter - 1;
    c6d4:	681e      	ldr	r6, [r3, #0]
        int j = 0;
    c6d6:	4625      	mov	r5, r4
        printf("{'keys':['");
    c6d8:	f007 f938 	bl	1394c <printf>
        for(int i = 0; i < 96 * cont + 96; i++){
    c6dc:	4377      	muls	r7, r6
    c6de:	f8df 8044 	ldr.w	r8, [pc, #68]	; c724 <cmd_get_keys+0x5c>
            printf("%c", public_keys_hex_store[i]);
    c6e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; c728 <cmd_get_keys+0x60>
            j++;
            if (j == 96){
                if(counter > 1) {
                    printf("'\n'");
                } else {
                    printf("']}\n");
    c6e6:	f8df a044 	ldr.w	sl, [pc, #68]	; c72c <cmd_get_keys+0x64>
                    printf("'\n'");
    c6ea:	f8df b044 	ldr.w	fp, [pc, #68]	; c730 <cmd_get_keys+0x68>
        for(int i = 0; i < 96 * cont + 96; i++){
    c6ee:	42a7      	cmp	r7, r4
    c6f0:	dc02      	bgt.n	c6f8 <cmd_get_keys+0x30>
                counter--;
            }           
        }

	return 0;
}
    c6f2:	2000      	movs	r0, #0
    c6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            printf("%c", public_keys_hex_store[i]);
    c6f8:	4648      	mov	r0, r9
    c6fa:	f818 1b01 	ldrb.w	r1, [r8], #1
            j++;
    c6fe:	3501      	adds	r5, #1
            printf("%c", public_keys_hex_store[i]);
    c700:	f007 f924 	bl	1394c <printf>
            if (j == 96){
    c704:	2d60      	cmp	r5, #96	; 0x60
    c706:	d107      	bne.n	c718 <cmd_get_keys+0x50>
                if(counter > 1) {
    c708:	2e01      	cmp	r6, #1
                    printf("'\n'");
    c70a:	bfcc      	ite	gt
    c70c:	4658      	movgt	r0, fp
                    printf("']}\n");
    c70e:	4650      	movle	r0, sl
    c710:	f007 f91c 	bl	1394c <printf>
                j = 0;
    c714:	2500      	movs	r5, #0
                counter--;
    c716:	3e01      	subs	r6, #1
        for(int i = 0; i < 96 * cont + 96; i++){
    c718:	3401      	adds	r4, #1
    c71a:	e7e8      	b.n	c6ee <cmd_get_keys+0x26>
    c71c:	20010658 	.word	0x20010658
    c720:	0001dded 	.word	0x0001dded
    c724:	2001e460 	.word	0x2001e460
    c728:	0001ecf7 	.word	0x0001ecf7
    c72c:	0001ddfc 	.word	0x0001ddfc
    c730:	0001ddf8 	.word	0x0001ddf8

0000c734 <k_timer_remaining_get.constprop.0>:
 *
 * @param timer     Address of timer.
 *
 * @return Remaining time (in milliseconds).
 */
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
    c734:	b508      	push	{r3, lr}
	return z_timeout_remaining(&timer->timeout);
    c736:	4805      	ldr	r0, [pc, #20]	; (c74c <k_timer_remaining_get.constprop.0+0x18>)
    c738:	f00f f970 	bl	1ba1c <z_timeout_remaining>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    c73c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c740:	fba0 2302 	umull	r2, r3, r0, r2
    c744:	0bd0      	lsrs	r0, r2, #15
{
	return k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));
}
    c746:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    c74a:	bd08      	pop	{r3, pc}
    c74c:	20010168 	.word	0x20010168

0000c750 <sha256_init>:
    h[6] = 0x1f83d9abU;
    h[7] = 0x5be0cd19U;
}

static void sha256_init(SHA256_CTX *ctx)
{
    c750:	4602      	mov	r2, r0
    c752:	b508      	push	{r3, lr}
    h[1] = 0xbb67ae85U;
    c754:	4910      	ldr	r1, [pc, #64]	; (c798 <sha256_init+0x48>)
    c756:	4b11      	ldr	r3, [pc, #68]	; (c79c <sha256_init+0x4c>)
    h[5] = 0x9b05688cU;
    c758:	f8df c054 	ldr.w	ip, [pc, #84]	; c7b0 <sha256_init+0x60>
    h[1] = 0xbb67ae85U;
    c75c:	e9c0 1300 	strd	r1, r3, [r0]
    h[3] = 0xa54ff53aU;
    c760:	480f      	ldr	r0, [pc, #60]	; (c7a0 <sha256_init+0x50>)
    c762:	4b10      	ldr	r3, [pc, #64]	; (c7a4 <sha256_init+0x54>)
    sha256_init_h(ctx->h);
    ctx->N = 0;
    c764:	2100      	movs	r1, #0
    h[3] = 0xa54ff53aU;
    c766:	e9c2 0302 	strd	r0, r3, [r2, #8]
    ctx->N = 0;
    c76a:	2000      	movs	r0, #0
    h[5] = 0x9b05688cU;
    c76c:	4b0e      	ldr	r3, [pc, #56]	; (c7a8 <sha256_init+0x58>)
    ctx->N = 0;
    c76e:	e9c2 0108 	strd	r0, r1, [r2, #32]
    h[5] = 0x9b05688cU;
    c772:	e9c2 c304 	strd	ip, r3, [r2, #16]
    h[6] = 0x1f83d9abU;
    c776:	4b0d      	ldr	r3, [pc, #52]	; (c7ac <sha256_init+0x5c>)
    vec_zero(ctx->buf, sizeof(ctx->buf));
    c778:	2140      	movs	r1, #64	; 0x40
    h[6] = 0x1f83d9abU;
    c77a:	6193      	str	r3, [r2, #24]
    h[7] = 0x5be0cd19U;
    c77c:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    c780:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    c784:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    c788:	61d3      	str	r3, [r2, #28]
    vec_zero(ctx->buf, sizeof(ctx->buf));
    c78a:	f102 0028 	add.w	r0, r2, #40	; 0x28
    c78e:	f009 fb98 	bl	15ec2 <vec_zero>
    ctx->off = 0;
    c792:	2300      	movs	r3, #0
    c794:	6693      	str	r3, [r2, #104]	; 0x68
}
    c796:	bd08      	pop	{r3, pc}
    c798:	6a09e667 	.word	0x6a09e667
    c79c:	bb67ae85 	.word	0xbb67ae85
    c7a0:	3c6ef372 	.word	0x3c6ef372
    c7a4:	a54ff53a 	.word	0xa54ff53a
    c7a8:	9b05688c 	.word	0x9b05688c
    c7ac:	1f83d9ab 	.word	0x1f83d9ab
    c7b0:	510e527f 	.word	0x510e527f

0000c7b4 <mul_fp>:

static inline void div_by_2_fp(vec384 ret, const vec384 a)
{   div_by_2_mod_384(ret, a, BLS12_381_P);   }

static inline void mul_fp(vec384 ret, const vec384 a, const vec384 b)
{   mul_mont_384(ret, a, b, BLS12_381_P, p0);   }
    c7b4:	b507      	push	{r0, r1, r2, lr}
    c7b6:	4b04      	ldr	r3, [pc, #16]	; (c7c8 <mul_fp+0x14>)
    c7b8:	9300      	str	r3, [sp, #0]
    c7ba:	4b04      	ldr	r3, [pc, #16]	; (c7cc <mul_fp+0x18>)
    c7bc:	f00a faf3 	bl	16da6 <mul_mont_384>
    c7c0:	b003      	add	sp, #12
    c7c2:	f85d fb04 	ldr.w	pc, [sp], #4
    c7c6:	bf00      	nop
    c7c8:	fffcfffd 	.word	0xfffcfffd
    c7cc:	0001c538 	.word	0x0001c538

0000c7d0 <sigma>:
    TO_LIMB_T(0x03f97d6e83d050d2), TO_LIMB_T(0x18f0206554638741)
};

static void sigma(POINTonE1 *out, const POINTonE1 *in)
{
    vec_copy(out->X, in->X, 2*sizeof(out->X));
    c7d0:	2260      	movs	r2, #96	; 0x60
{
    c7d2:	b538      	push	{r3, r4, r5, lr}
    vec_copy(out->X, in->X, 2*sizeof(out->X));
    c7d4:	f009 fb69 	bl	15eaa <vec_copy>
    mul_fp(out->Z, in->Z, beta);
}
    c7d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mul_fp(out->Z, in->Z, beta);
    c7dc:	4a02      	ldr	r2, [pc, #8]	; (c7e8 <sigma+0x18>)
    c7de:	3160      	adds	r1, #96	; 0x60
    c7e0:	3060      	adds	r0, #96	; 0x60
    c7e2:	f7ff bfe7 	b.w	c7b4 <mul_fp>
    c7e6:	bf00      	nop
    c7e8:	0001cb10 	.word	0x0001cb10

0000c7ec <sqr_fp>:

static inline void sqr_fp(vec384 ret, const vec384 a)
{   sqr_mont_384(ret, a, BLS12_381_P, p0);   }
    c7ec:	4b01      	ldr	r3, [pc, #4]	; (c7f4 <sqr_fp+0x8>)
    c7ee:	4a02      	ldr	r2, [pc, #8]	; (c7f8 <sqr_fp+0xc>)
    c7f0:	f00a bb00 	b.w	16df4 <sqr_mont_384>
    c7f4:	fffcfffd 	.word	0xfffcfffd
    c7f8:	0001c538 	.word	0x0001c538

0000c7fc <exp_mont_384.constprop.0>:
#include "vect.h"

/*
 * |out| = |inp|^|pow|, small footprint, public exponent
 */
static void exp_mont_384(vec384 out, const vec384 inp, const byte *pow,
    c7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c800:	b08f      	sub	sp, #60	; 0x3c
    c802:	461c      	mov	r4, r3
    c804:	4605      	mov	r5, r0
    c806:	4617      	mov	r7, r2
                         size_t pow_bits, const vec384 p, limb_t n0)
{
#if 1
    vec384 ret;

    vec_copy(ret, inp, sizeof(ret));  /* ret = inp^1 */
    c808:	a802      	add	r0, sp, #8
    c80a:	2230      	movs	r2, #48	; 0x30
static void exp_mont_384(vec384 out, const vec384 inp, const byte *pow,
    c80c:	460e      	mov	r6, r1
    vec_copy(ret, inp, sizeof(ret));  /* ret = inp^1 */
    c80e:	f009 fb4c 	bl	15eaa <vec_copy>
    --pow_bits; /* most significant bit is set, skip over */
    while (pow_bits--) {
        sqr_mont_384(ret, ret, p, n0);
    c812:	f8df 9048 	ldr.w	r9, [pc, #72]	; c85c <exp_mont_384.constprop.0+0x60>
    c816:	f8df 8048 	ldr.w	r8, [pc, #72]	; c860 <exp_mont_384.constprop.0+0x64>
    --pow_bits; /* most significant bit is set, skip over */
    c81a:	3c01      	subs	r4, #1
    while (pow_bits--) {
    c81c:	3c01      	subs	r4, #1
    c81e:	d207      	bcs.n	c830 <exp_mont_384.constprop.0+0x34>
        if (is_bit_set(pow, pow_bits))
            mul_mont_384(ret, ret, inp, p, n0);
    }
    vec_copy(out, ret, sizeof(ret));  /* out = ret */
    c820:	2230      	movs	r2, #48	; 0x30
    c822:	4628      	mov	r0, r5
    c824:	a902      	add	r1, sp, #8
    c826:	f009 fb40 	bl	15eaa <vec_copy>
        sqr_mont_384(sqr, sqr, sqr, p, n0);
        if (is_bit_set(pow, i))
            mul_mont_384(out, out, sqr, p, n0);
    }
#endif
}
    c82a:	b00f      	add	sp, #60	; 0x3c
    c82c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sqr_mont_384(ret, ret, p, n0);
    c830:	a902      	add	r1, sp, #8
    c832:	4642      	mov	r2, r8
    c834:	4b09      	ldr	r3, [pc, #36]	; (c85c <exp_mont_384.constprop.0+0x60>)
    c836:	4608      	mov	r0, r1
    c838:	f00a fadc 	bl	16df4 <sqr_mont_384>
#  endif
# endif
#endif

static inline bool_t is_bit_set(const byte *v, size_t i)
{   return (v[i/8] >> (i%8)) & 1;   }
    c83c:	08e3      	lsrs	r3, r4, #3
    c83e:	5cfb      	ldrb	r3, [r7, r3]
    c840:	f004 0207 	and.w	r2, r4, #7
    c844:	4113      	asrs	r3, r2
        if (is_bit_set(pow, pow_bits))
    c846:	07db      	lsls	r3, r3, #31
    c848:	d5e8      	bpl.n	c81c <exp_mont_384.constprop.0+0x20>
            mul_mont_384(ret, ret, inp, p, n0);
    c84a:	a902      	add	r1, sp, #8
    c84c:	4643      	mov	r3, r8
    c84e:	4632      	mov	r2, r6
    c850:	4608      	mov	r0, r1
    c852:	f8cd 9000 	str.w	r9, [sp]
    c856:	f00a faa6 	bl	16da6 <mul_mont_384>
    c85a:	e7df      	b.n	c81c <exp_mont_384.constprop.0+0x20>
    c85c:	fffcfffd 	.word	0xfffcfffd
    c860:	0001c538 	.word	0x0001c538

0000c864 <recip_sqrt_fp>:
# undef sqr
# undef mul
#endif

static bool_t recip_sqrt_fp(vec384 out, const vec384 inp)
{
    c864:	b530      	push	{r4, r5, lr}
    c866:	460c      	mov	r4, r1
    c868:	b099      	sub	sp, #100	; 0x64
    exp_mont_384(out, inp, BLS_12_381_P_minus_3_div_4, 379, BLS12_381_P, p0);
    c86a:	f240 137b 	movw	r3, #379	; 0x17b
{
    c86e:	4605      	mov	r5, r0
    exp_mont_384(out, inp, BLS_12_381_P_minus_3_div_4, 379, BLS12_381_P, p0);
    c870:	4a0d      	ldr	r2, [pc, #52]	; (c8a8 <recip_sqrt_fp+0x44>)
    c872:	4668      	mov	r0, sp
    c874:	f7ff ffc2 	bl	c7fc <exp_mont_384.constprop.0>
    vec384 t0, t1;
    bool_t ret;

    recip_sqrt_fp_3mod4(t0, inp);

    mul_fp(t1, t0, inp);
    c878:	4622      	mov	r2, r4
    c87a:	4669      	mov	r1, sp
    c87c:	a80c      	add	r0, sp, #48	; 0x30
    c87e:	f7ff ff99 	bl	c7b4 <mul_fp>
    sqr_fp(t1, t1);
    c882:	a90c      	add	r1, sp, #48	; 0x30
    c884:	4608      	mov	r0, r1
    c886:	f7ff ffb1 	bl	c7ec <sqr_fp>
    ret = vec_is_equal(t1, inp, sizeof(t1));
    c88a:	2230      	movs	r2, #48	; 0x30
    c88c:	4621      	mov	r1, r4
    c88e:	eb0d 0002 	add.w	r0, sp, r2
    c892:	f009 faf8 	bl	15e86 <vec_is_equal>
    c896:	4604      	mov	r4, r0
    vec_copy(out, t0, sizeof(t0));
    c898:	2230      	movs	r2, #48	; 0x30
    c89a:	4628      	mov	r0, r5
    c89c:	4669      	mov	r1, sp
    c89e:	f009 fb04 	bl	15eaa <vec_copy>

    return ret;
}
    c8a2:	4620      	mov	r0, r4
    c8a4:	b019      	add	sp, #100	; 0x64
    c8a6:	bd30      	pop	{r4, r5, pc}
    c8a8:	0001e0d7 	.word	0x0001e0d7

0000c8ac <flt_reciprocal_fp>:
        TO_BYTES(0xb9feffffffffaaa9), TO_BYTES(0x1eabfffeb153ffff),
        TO_BYTES(0x6730d2a0f6b0f624), TO_BYTES(0x64774b84f38512bf),
        TO_BYTES(0x4b1ba7b6434bacd7), TO_BYTES(0x1a0111ea397fe69a)
    };

    exp_mont_384(out, inp, BLS12_381_P_minus_2, 381, BLS12_381_P, p0);
    c8ac:	f240 137d 	movw	r3, #381	; 0x17d
    c8b0:	4a01      	ldr	r2, [pc, #4]	; (c8b8 <flt_reciprocal_fp+0xc>)
    c8b2:	f7ff bfa3 	b.w	c7fc <exp_mont_384.constprop.0>
    c8b6:	bf00      	nop
    c8b8:	0001e0a7 	.word	0x0001e0a7

0000c8bc <add_fp>:
{   add_mod_384(ret, a, b, BLS12_381_P);   }
    c8bc:	4b01      	ldr	r3, [pc, #4]	; (c8c4 <add_fp+0x8>)
    c8be:	f00a baa3 	b.w	16e08 <add_mod_384>
    c8c2:	bf00      	nop
    c8c4:	0001c538 	.word	0x0001c538

0000c8c8 <sub_fp>:
{   sub_mod_384(ret, a, b, BLS12_381_P);   }
    c8c8:	4b01      	ldr	r3, [pc, #4]	; (c8d0 <sub_fp+0x8>)
    c8ca:	f00a baa4 	b.w	16e16 <sub_mod_384>
    c8ce:	bf00      	nop
    c8d0:	0001c538 	.word	0x0001c538

0000c8d4 <POINTonE1_dadd>:
POINT_DADD_IMPL(POINTonE1, 384, fp)
    c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8d8:	460c      	mov	r4, r1
    c8da:	4615      	mov	r5, r2
    c8dc:	b0f1      	sub	sp, #452	; 0x1c4
    c8de:	460a      	mov	r2, r1
    c8e0:	4607      	mov	r7, r0
    c8e2:	a864      	add	r0, sp, #400	; 0x190
    c8e4:	469b      	mov	fp, r3
    c8e6:	f7ff ffe9 	bl	c8bc <add_fp>
    c8ea:	4621      	mov	r1, r4
    c8ec:	a858      	add	r0, sp, #352	; 0x160
    c8ee:	f7ff ff7d 	bl	c7ec <sqr_fp>
{   mul_by_3_mod_384(ret, a, BLS12_381_P);   }
    c8f2:	a958      	add	r1, sp, #352	; 0x160
    c8f4:	4608      	mov	r0, r1
    c8f6:	4a5f      	ldr	r2, [pc, #380]	; (ca74 <POINTonE1_dadd+0x1a0>)
    c8f8:	f104 0830 	add.w	r8, r4, #48	; 0x30
    c8fc:	f00a fb47 	bl	16f8e <mul_by_3_mod_384>
    c900:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    c904:	4642      	mov	r2, r8
    c906:	4641      	mov	r1, r8
    c908:	a84c      	add	r0, sp, #304	; 0x130
    c90a:	f7ff ffd7 	bl	c8bc <add_fp>
    c90e:	2130      	movs	r1, #48	; 0x30
    c910:	4650      	mov	r0, sl
    c912:	f009 faab 	bl	15e6c <vec_is_zero>
    c916:	f104 0660 	add.w	r6, r4, #96	; 0x60
    c91a:	4651      	mov	r1, sl
    c91c:	4681      	mov	r9, r0
    c91e:	a804      	add	r0, sp, #16
    c920:	f7ff ff64 	bl	c7ec <sqr_fp>
    c924:	4652      	mov	r2, sl
    c926:	4631      	mov	r1, r6
    c928:	a81c      	add	r0, sp, #112	; 0x70
    c92a:	f7ff ff43 	bl	c7b4 <mul_fp>
    c92e:	2130      	movs	r1, #48	; 0x30
    c930:	4630      	mov	r0, r6
    c932:	f009 fa9b 	bl	15e6c <vec_is_zero>
    c936:	4631      	mov	r1, r6
    c938:	9003      	str	r0, [sp, #12]
    c93a:	a828      	add	r0, sp, #160	; 0xa0
    c93c:	f7ff ff56 	bl	c7ec <sqr_fp>
    c940:	f1bb 0f00 	cmp.w	fp, #0
    c944:	d00d      	beq.n	c962 <POINTonE1_dadd+0x8e>
    c946:	a928      	add	r1, sp, #160	; 0xa0
    c948:	a810      	add	r0, sp, #64	; 0x40
    c94a:	f7ff ff4f 	bl	c7ec <sqr_fp>
    c94e:	a910      	add	r1, sp, #64	; 0x40
    c950:	4608      	mov	r0, r1
    c952:	465a      	mov	r2, fp
    c954:	f7ff ff2e 	bl	c7b4 <mul_fp>
    c958:	a958      	add	r1, sp, #352	; 0x160
    c95a:	4608      	mov	r0, r1
    c95c:	aa10      	add	r2, sp, #64	; 0x40
    c95e:	f7ff ffad 	bl	c8bc <add_fp>
    c962:	4652      	mov	r2, sl
    c964:	4641      	mov	r1, r8
    c966:	a810      	add	r0, sp, #64	; 0x40
    c968:	f7ff ff24 	bl	c7b4 <mul_fp>
    c96c:	a910      	add	r1, sp, #64	; 0x40
    c96e:	4608      	mov	r0, r1
    c970:	aa04      	add	r2, sp, #16
    c972:	f7ff ff1f 	bl	c7b4 <mul_fp>
    c976:	4632      	mov	r2, r6
    c978:	f105 0130 	add.w	r1, r5, #48	; 0x30
    c97c:	a834      	add	r0, sp, #208	; 0xd0
    c97e:	f7ff ff19 	bl	c7b4 <mul_fp>
    c982:	a934      	add	r1, sp, #208	; 0xd0
    c984:	4608      	mov	r0, r1
    c986:	aa28      	add	r2, sp, #160	; 0xa0
    c988:	f7ff ff14 	bl	c7b4 <mul_fp>
    c98c:	a934      	add	r1, sp, #208	; 0xd0
    c98e:	4608      	mov	r0, r1
    c990:	aa10      	add	r2, sp, #64	; 0x40
    c992:	f7ff ff99 	bl	c8c8 <sub_fp>
    c996:	a904      	add	r1, sp, #16
    c998:	4622      	mov	r2, r4
    c99a:	4608      	mov	r0, r1
    c99c:	f7ff ff0a 	bl	c7b4 <mul_fp>
    c9a0:	a928      	add	r1, sp, #160	; 0xa0
    c9a2:	462a      	mov	r2, r5
    c9a4:	4608      	mov	r0, r1
    c9a6:	f7ff ff05 	bl	c7b4 <mul_fp>
    c9aa:	aa04      	add	r2, sp, #16
    c9ac:	a928      	add	r1, sp, #160	; 0xa0
    c9ae:	a840      	add	r0, sp, #256	; 0x100
    c9b0:	f7ff ff84 	bl	c8bc <add_fp>
    c9b4:	a928      	add	r1, sp, #160	; 0xa0
    c9b6:	aa04      	add	r2, sp, #16
    c9b8:	4608      	mov	r0, r1
    c9ba:	f7ff ff85 	bl	c8c8 <sub_fp>
    c9be:	2160      	movs	r1, #96	; 0x60
    c9c0:	a828      	add	r0, sp, #160	; 0xa0
    c9c2:	f009 fa53 	bl	15e6c <vec_is_zero>
    c9c6:	4606      	mov	r6, r0
    c9c8:	aa04      	add	r2, sp, #16
    c9ca:	4621      	mov	r1, r4
    c9cc:	9000      	str	r0, [sp, #0]
    c9ce:	2390      	movs	r3, #144	; 0x90
    c9d0:	4610      	mov	r0, r2
    c9d2:	f009 fa34 	bl	15e3e <vec_select>
    c9d6:	aa28      	add	r2, sp, #160	; 0xa0
    c9d8:	2390      	movs	r3, #144	; 0x90
    c9da:	4610      	mov	r0, r2
    c9dc:	a94c      	add	r1, sp, #304	; 0x130
    c9de:	9600      	str	r6, [sp, #0]
    c9e0:	f009 fa2d 	bl	15e3e <vec_select>
    c9e4:	a91c      	add	r1, sp, #112	; 0x70
    c9e6:	aa28      	add	r2, sp, #160	; 0xa0
    c9e8:	4608      	mov	r0, r1
    c9ea:	f7ff fee3 	bl	c7b4 <mul_fp>
    c9ee:	a928      	add	r1, sp, #160	; 0xa0
    c9f0:	a84c      	add	r0, sp, #304	; 0x130
    c9f2:	f7ff fefb 	bl	c7ec <sqr_fp>
    c9f6:	aa28      	add	r2, sp, #160	; 0xa0
    c9f8:	a94c      	add	r1, sp, #304	; 0x130
    c9fa:	a858      	add	r0, sp, #352	; 0x160
    c9fc:	f7ff feda 	bl	c7b4 <mul_fp>
    ca00:	a958      	add	r1, sp, #352	; 0x160
    ca02:	4608      	mov	r0, r1
    ca04:	aa10      	add	r2, sp, #64	; 0x40
    ca06:	f7ff fed5 	bl	c7b4 <mul_fp>
    ca0a:	aa04      	add	r2, sp, #16
    ca0c:	a94c      	add	r1, sp, #304	; 0x130
    ca0e:	a810      	add	r0, sp, #64	; 0x40
    ca10:	f7ff fed0 	bl	c7b4 <mul_fp>
    ca14:	a94c      	add	r1, sp, #304	; 0x130
    ca16:	aa40      	add	r2, sp, #256	; 0x100
    ca18:	4608      	mov	r0, r1
    ca1a:	f7ff fecb 	bl	c7b4 <mul_fp>
    ca1e:	a934      	add	r1, sp, #208	; 0xd0
    ca20:	a804      	add	r0, sp, #16
    ca22:	f7ff fee3 	bl	c7ec <sqr_fp>
    ca26:	a904      	add	r1, sp, #16
    ca28:	4608      	mov	r0, r1
    ca2a:	aa4c      	add	r2, sp, #304	; 0x130
    ca2c:	f7ff ff4c 	bl	c8c8 <sub_fp>
    ca30:	a910      	add	r1, sp, #64	; 0x40
    ca32:	4608      	mov	r0, r1
    ca34:	aa04      	add	r2, sp, #16
    ca36:	f7ff ff47 	bl	c8c8 <sub_fp>
    ca3a:	a910      	add	r1, sp, #64	; 0x40
    ca3c:	4608      	mov	r0, r1
    ca3e:	aa34      	add	r2, sp, #208	; 0xd0
    ca40:	f7ff feb8 	bl	c7b4 <mul_fp>
    ca44:	a910      	add	r1, sp, #64	; 0x40
    ca46:	4608      	mov	r0, r1
    ca48:	aa58      	add	r2, sp, #352	; 0x160
    ca4a:	f7ff ff3d 	bl	c8c8 <sub_fp>
    ca4e:	aa04      	add	r2, sp, #16
    ca50:	4621      	mov	r1, r4
    ca52:	4610      	mov	r0, r2
    ca54:	2390      	movs	r3, #144	; 0x90
    ca56:	f8cd 9000 	str.w	r9, [sp]
    ca5a:	f009 f9f0 	bl	15e3e <vec_select>
    ca5e:	9b03      	ldr	r3, [sp, #12]
    ca60:	4629      	mov	r1, r5
    ca62:	9300      	str	r3, [sp, #0]
    ca64:	4638      	mov	r0, r7
    ca66:	2390      	movs	r3, #144	; 0x90
    ca68:	aa04      	add	r2, sp, #16
    ca6a:	f009 f9e8 	bl	15e3e <vec_select>
    ca6e:	b071      	add	sp, #452	; 0x1c4
    ca70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca74:	0001c538 	.word	0x0001c538

0000ca78 <cneg_fp>:

static inline void cneg_fp(vec384 ret, const vec384 a, bool_t flag)
{   cneg_mod_384(ret, a, flag, BLS12_381_P);   }
    ca78:	4b01      	ldr	r3, [pc, #4]	; (ca80 <cneg_fp+0x8>)
    ca7a:	f00a ba92 	b.w	16fa2 <cneg_mod_384>
    ca7e:	bf00      	nop
    ca80:	0001c538 	.word	0x0001c538

0000ca84 <cneg_fp2>:

static inline void sqr_fp2(vec384x ret, const vec384x a)
{   sqr_mont_384x(ret, a, BLS12_381_P, p0);   }

static inline void cneg_fp2(vec384x ret, const vec384x a, bool_t flag)
{
    ca84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca88:	4604      	mov	r4, r0
    ca8a:	460d      	mov	r5, r1
    ca8c:	4616      	mov	r6, r2
    cneg_mod_384(ret[0], a[0], flag, BLS12_381_P);
    ca8e:	4f07      	ldr	r7, [pc, #28]	; (caac <cneg_fp2+0x28>)
    ca90:	463b      	mov	r3, r7
    ca92:	f00a fa86 	bl	16fa2 <cneg_mod_384>
    cneg_mod_384(ret[1], a[1], flag, BLS12_381_P);
    ca96:	463b      	mov	r3, r7
    ca98:	4632      	mov	r2, r6
    ca9a:	f105 0130 	add.w	r1, r5, #48	; 0x30
    ca9e:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    caa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cneg_mod_384(ret[1], a[1], flag, BLS12_381_P);
    caa6:	f00a ba7c 	b.w	16fa2 <cneg_mod_384>
    caaa:	bf00      	nop
    caac:	0001c538 	.word	0x0001c538

0000cab0 <from_fp>:
{   from_mont_384(ret, a, BLS12_381_P, p0);   }
    cab0:	4b01      	ldr	r3, [pc, #4]	; (cab8 <from_fp+0x8>)
    cab2:	4a02      	ldr	r2, [pc, #8]	; (cabc <from_fp+0xc>)
    cab4:	f00a bb3c 	b.w	17130 <from_mont_384>
    cab8:	fffcfffd 	.word	0xfffcfffd
    cabc:	0001c538 	.word	0x0001c538

0000cac0 <POINTonE1_affine_Compress_BE>:
{
    cac0:	b530      	push	{r4, r5, lr}
    cac2:	4605      	mov	r5, r0
    cac4:	460c      	mov	r4, r1
    cac6:	b08d      	sub	sp, #52	; 0x34
    from_fp(temp, in->X);
    cac8:	4668      	mov	r0, sp
    caca:	f7ff fff1 	bl	cab0 <from_fp>
    be_bytes_from_limbs(out, temp, sizeof(temp));
    cace:	4669      	mov	r1, sp
    cad0:	4628      	mov	r0, r5
    cad2:	2230      	movs	r2, #48	; 0x30
    cad4:	f009 fa0c 	bl	15ef0 <be_bytes_from_limbs>
    return sgn0_pty_mont_384(in->Y, BLS12_381_P, p0);
    cad8:	4a03      	ldr	r2, [pc, #12]	; (cae8 <POINTonE1_affine_Compress_BE+0x28>)
    cada:	4904      	ldr	r1, [pc, #16]	; (caec <POINTonE1_affine_Compress_BE+0x2c>)
    cadc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    cae0:	f00a fb45 	bl	1716e <sgn0_pty_mont_384>
}
    cae4:	b00d      	add	sp, #52	; 0x34
    cae6:	bd30      	pop	{r4, r5, pc}
    cae8:	fffcfffd 	.word	0xfffcfffd
    caec:	0001c538 	.word	0x0001c538

0000caf0 <POINTonE2_affine_Compress_BE>:
void blst_p2_serialize(unsigned char out[192], const POINTonE2 *in)
{   POINTonE2_Serialize(out, in);   }

static limb_t POINTonE2_affine_Compress_BE(unsigned char out[96],
                                           const POINTonE2_affine *in)
{
    caf0:	b530      	push	{r4, r5, lr}
    caf2:	4605      	mov	r5, r0
    caf4:	460c      	mov	r4, r1
    caf6:	b08d      	sub	sp, #52	; 0x34
    vec384 temp;

    from_fp(temp, in->X[1]);
    caf8:	4668      	mov	r0, sp
    cafa:	3130      	adds	r1, #48	; 0x30
    cafc:	f7ff ffd8 	bl	cab0 <from_fp>
    be_bytes_from_limbs(out, temp, sizeof(temp));
    cb00:	2230      	movs	r2, #48	; 0x30
    cb02:	4669      	mov	r1, sp
    cb04:	4628      	mov	r0, r5
    cb06:	f009 f9f3 	bl	15ef0 <be_bytes_from_limbs>
    from_fp(temp, in->X[0]);
    cb0a:	4621      	mov	r1, r4
    cb0c:	4668      	mov	r0, sp
    cb0e:	f7ff ffcf 	bl	cab0 <from_fp>
    be_bytes_from_limbs(out + 48, temp, sizeof(temp));
    cb12:	2230      	movs	r2, #48	; 0x30
    cb14:	4669      	mov	r1, sp
    cb16:	18a8      	adds	r0, r5, r2
    cb18:	f009 f9ea 	bl	15ef0 <be_bytes_from_limbs>

    return sgn0_pty_mont_384x(in->Y, BLS12_381_P, p0);
    cb1c:	4a03      	ldr	r2, [pc, #12]	; (cb2c <POINTonE2_affine_Compress_BE+0x3c>)
    cb1e:	4904      	ldr	r1, [pc, #16]	; (cb30 <POINTonE2_affine_Compress_BE+0x40>)
    cb20:	f104 0060 	add.w	r0, r4, #96	; 0x60
    cb24:	f00a fb5e 	bl	171e4 <sgn0_pty_mont_384x>
}
    cb28:	b00d      	add	sp, #52	; 0x34
    cb2a:	bd30      	pop	{r4, r5, pc}
    cb2c:	fffcfffd 	.word	0xfffcfffd
    cb30:	0001c538 	.word	0x0001c538

0000cb34 <mul_fp2>:
{   mul_mont_384x(ret, a, b, BLS12_381_P, p0);   }
    cb34:	b507      	push	{r0, r1, r2, lr}
    cb36:	4b04      	ldr	r3, [pc, #16]	; (cb48 <mul_fp2+0x14>)
    cb38:	9300      	str	r3, [sp, #0]
    cb3a:	4b04      	ldr	r3, [pc, #16]	; (cb4c <mul_fp2+0x18>)
    cb3c:	f00a fb6d 	bl	1721a <mul_mont_384x>
    cb40:	b003      	add	sp, #12
    cb42:	f85d fb04 	ldr.w	pc, [sp], #4
    cb46:	bf00      	nop
    cb48:	fffcfffd 	.word	0xfffcfffd
    cb4c:	0001c538 	.word	0x0001c538

0000cb50 <psi>:
POINT_LADDER_POST_IMPL_A0(POINTonE2, 384x, fp2, onE2)
POINT_MULT_SCALAR_LADDER_IMPL(POINTonE2)
#endif

static void psi(POINTonE2 *out, const POINTonE2 *in)
{
    cb50:	b510      	push	{r4, lr}
        TO_LIMB_T(0x7bcfa7a25aa30fda), TO_LIMB_T(0xdc17dec12a927e7c),
        TO_LIMB_T(0x2f088dd86b4ebef1), TO_LIMB_T(0xd1ca2087da74d4a7),
        TO_LIMB_T(0x2da2596696cebc1d), TO_LIMB_T(0x0e2b7eedbbfd87d2) },
    };

    vec_copy(out, in, sizeof(*out));
    cb52:	f44f 7290 	mov.w	r2, #288	; 0x120
{
    cb56:	4604      	mov	r4, r0
    vec_copy(out, in, sizeof(*out));
    cb58:	f009 f9a7 	bl	15eaa <vec_copy>
    cneg_fp(out->X[1], out->X[1], 1);   mul_fp2(out->X, out->X, frobenius_x);
    cb5c:	f100 0130 	add.w	r1, r0, #48	; 0x30
    cb60:	4608      	mov	r0, r1
    cb62:	2201      	movs	r2, #1
    cb64:	f7ff ff88 	bl	ca78 <cneg_fp>
    cb68:	4621      	mov	r1, r4
    cb6a:	4620      	mov	r0, r4
    cb6c:	4a0b      	ldr	r2, [pc, #44]	; (cb9c <psi+0x4c>)
    cb6e:	f7ff ffe1 	bl	cb34 <mul_fp2>
    cneg_fp(out->Y[1], out->Y[1], 1);   mul_fp2(out->Y, out->Y, frobenius_y);
    cb72:	f104 0190 	add.w	r1, r4, #144	; 0x90
    cb76:	4608      	mov	r0, r1
    cb78:	2201      	movs	r2, #1
    cb7a:	f7ff ff7d 	bl	ca78 <cneg_fp>
    cb7e:	f104 0160 	add.w	r1, r4, #96	; 0x60
    cb82:	4608      	mov	r0, r1
    cb84:	4a06      	ldr	r2, [pc, #24]	; (cba0 <psi+0x50>)
    cb86:	f7ff ffd5 	bl	cb34 <mul_fp2>
    cneg_fp(out->Z[1], out->Z[1], 1);
    cb8a:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    cb8e:	2201      	movs	r2, #1
}
    cb90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cneg_fp(out->Z[1], out->Z[1], 1);
    cb94:	4608      	mov	r0, r1
    cb96:	f7ff bf6f 	b.w	ca78 <cneg_fp>
    cb9a:	bf00      	nop
    cb9c:	0001ce10 	.word	0x0001ce10
    cba0:	0001ce70 	.word	0x0001ce70

0000cba4 <frobenius_map_fp6>:
    vec_copy(ret[0], a[0], sizeof(ret[0]));
    cneg_fp(ret[1], a[1], n & 1);
}

static void frobenius_map_fp6(vec384fp6 ret, const vec384fp6 a, size_t n)
{
    cba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cba8:	4605      	mov	r5, r0
    cbaa:	460e      	mov	r6, r1
    cbac:	4614      	mov	r4, r2
          TO_LIMB_T(0x07e83a49a2e99d69), TO_LIMB_T(0xeca8f3318332bb7a),
          TO_LIMB_T(0xef148d1ea0f4c069), TO_LIMB_T(0x040ab3263eff0206)   }
    };

    frobenius_map_fp2(ret[0], a[0], n);
    frobenius_map_fp2(ret[1], a[1], n);
    cbae:	f105 0860 	add.w	r8, r5, #96	; 0x60
    frobenius_map_fp2(ret[0], a[0], n);
    cbb2:	f00a fa47 	bl	17044 <frobenius_map_fp2>
    frobenius_map_fp2(ret[2], a[2], n);
    cbb6:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
    frobenius_map_fp2(ret[1], a[1], n);
    cbba:	4622      	mov	r2, r4
    cbbc:	4640      	mov	r0, r8
    cbbe:	f106 0160 	add.w	r1, r6, #96	; 0x60
    cbc2:	f00a fa3f 	bl	17044 <frobenius_map_fp2>
    frobenius_map_fp2(ret[2], a[2], n);
    cbc6:	4622      	mov	r2, r4
    cbc8:	4638      	mov	r0, r7
    cbca:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
    cbce:	f00a fa39 	bl	17044 <frobenius_map_fp2>
    --n;    /* implied ONE_MONT_P at index 0 */
    mul_fp2(ret[1], ret[1], coeffs1[n]);
    cbd2:	2260      	movs	r2, #96	; 0x60
    cbd4:	4b0c      	ldr	r3, [pc, #48]	; (cc08 <frobenius_map_fp6+0x64>)
    --n;    /* implied ONE_MONT_P at index 0 */
    cbd6:	3c01      	subs	r4, #1
    mul_fp2(ret[1], ret[1], coeffs1[n]);
    cbd8:	fb02 3204 	mla	r2, r2, r4, r3
    cbdc:	4641      	mov	r1, r8
    cbde:	4640      	mov	r0, r8
    cbe0:	f7ff ffa8 	bl	cb34 <mul_fp2>
    mul_fp(ret[2][0], ret[2][0], coeffs2[n]);
    cbe4:	2330      	movs	r3, #48	; 0x30
    cbe6:	4a09      	ldr	r2, [pc, #36]	; (cc0c <frobenius_map_fp6+0x68>)
    cbe8:	4639      	mov	r1, r7
    cbea:	fb03 2404 	mla	r4, r3, r4, r2
    cbee:	4638      	mov	r0, r7
    cbf0:	4622      	mov	r2, r4
    cbf2:	f7ff fddf 	bl	c7b4 <mul_fp>
    mul_fp(ret[2][1], ret[2][1], coeffs2[n]);
    cbf6:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
    cbfa:	4622      	mov	r2, r4
}
    cbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    mul_fp(ret[2][1], ret[2][1], coeffs2[n]);
    cc00:	4608      	mov	r0, r1
    cc02:	f7ff bdd7 	b.w	c7b4 <mul_fp>
    cc06:	bf00      	nop
    cc08:	0001cc60 	.word	0x0001cc60
    cc0c:	0001cd80 	.word	0x0001cd80

0000cc10 <frobenius_map_fp12>:

static void frobenius_map_fp12(vec384fp12 ret, const vec384fp12 a, size_t n)
{
    cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc12:	4605      	mov	r5, r0
    cc14:	460e      	mov	r6, r1
    cc16:	4614      	mov	r4, r2
          TO_LIMB_T(0x2f088dd86b4ebef1), TO_LIMB_T(0xd1ca2087da74d4a7),
          TO_LIMB_T(0x2da2596696cebc1d), TO_LIMB_T(0x0e2b7eedbbfd87d2) } },
    };

    frobenius_map_fp6(ret[0], a[0], n);
    frobenius_map_fp6(ret[1], a[1], n);
    cc18:	f505 7790 	add.w	r7, r5, #288	; 0x120
    frobenius_map_fp6(ret[0], a[0], n);
    cc1c:	f7ff ffc2 	bl	cba4 <frobenius_map_fp6>
    frobenius_map_fp6(ret[1], a[1], n);
    cc20:	4622      	mov	r2, r4
    cc22:	4638      	mov	r0, r7
    cc24:	f506 7190 	add.w	r1, r6, #288	; 0x120
    cc28:	f7ff ffbc 	bl	cba4 <frobenius_map_fp6>
    --n;    /* implied ONE_MONT_P at index 0 */
    mul_fp2(ret[1][0], ret[1][0], coeffs[n]);
    cc2c:	2360      	movs	r3, #96	; 0x60
    cc2e:	4a0b      	ldr	r2, [pc, #44]	; (cc5c <frobenius_map_fp12+0x4c>)
    --n;    /* implied ONE_MONT_P at index 0 */
    cc30:	3c01      	subs	r4, #1
    mul_fp2(ret[1][0], ret[1][0], coeffs[n]);
    cc32:	fb03 2404 	mla	r4, r3, r4, r2
    cc36:	4639      	mov	r1, r7
    cc38:	4622      	mov	r2, r4
    cc3a:	4638      	mov	r0, r7
    cc3c:	f7ff ff7a 	bl	cb34 <mul_fp2>
    mul_fp2(ret[1][1], ret[1][1], coeffs[n]);
    cc40:	f505 71c0 	add.w	r1, r5, #384	; 0x180
    cc44:	4622      	mov	r2, r4
    cc46:	4608      	mov	r0, r1
    cc48:	f7ff ff74 	bl	cb34 <mul_fp2>
    mul_fp2(ret[1][2], ret[1][2], coeffs[n]);
    cc4c:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
    cc50:	4622      	mov	r2, r4
}
    cc52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    mul_fp2(ret[1][2], ret[1][2], coeffs[n]);
    cc56:	4608      	mov	r0, r1
    cc58:	f7ff bf6c 	b.w	cb34 <mul_fp2>
    cc5c:	0001cb40 	.word	0x0001cb40

0000cc60 <reciprocal_fp>:
    mul_fp(out[1], inp[1], t1);
    neg_fp(out[1], out[1]);
}

static void reciprocal_fp(vec384 out, const vec384 inp)
{
    cc60:	b570      	push	{r4, r5, r6, lr}
    cc62:	460d      	mov	r5, r1
    cc64:	b09a      	sub	sp, #104	; 0x68
    };
#endif
    union { vec768 x; vec384 r[2]; } temp;

    ct_inverse_mod_383(temp.x, inp, BLS12_381_P, Px8);
    redc_mont_384(temp.r[0], temp.x, BLS12_381_P, p0);
    cc66:	4e16      	ldr	r6, [pc, #88]	; (ccc0 <reciprocal_fp+0x60>)
    ct_inverse_mod_383(temp.x, inp, BLS12_381_P, Px8);
    cc68:	4b16      	ldr	r3, [pc, #88]	; (ccc4 <reciprocal_fp+0x64>)
    cc6a:	4a17      	ldr	r2, [pc, #92]	; (ccc8 <reciprocal_fp+0x68>)
{
    cc6c:	4604      	mov	r4, r0
    ct_inverse_mod_383(temp.x, inp, BLS12_381_P, Px8);
    cc6e:	a802      	add	r0, sp, #8
    cc70:	f00a fb2f 	bl	172d2 <ct_inverse_mod_384>
    redc_mont_384(temp.r[0], temp.x, BLS12_381_P, p0);
    cc74:	a902      	add	r1, sp, #8
    cc76:	4608      	mov	r0, r1
    cc78:	4633      	mov	r3, r6
    cc7a:	4a13      	ldr	r2, [pc, #76]	; (ccc8 <reciprocal_fp+0x68>)
    cc7c:	f00a fa66 	bl	1714c <redc_mont_384>
    mul_mont_384(temp.r[0], temp.r[0], RRx4, BLS12_381_P, p0);
    cc80:	a902      	add	r1, sp, #8
    cc82:	4608      	mov	r0, r1
    cc84:	4b10      	ldr	r3, [pc, #64]	; (ccc8 <reciprocal_fp+0x68>)
    cc86:	4a11      	ldr	r2, [pc, #68]	; (cccc <reciprocal_fp+0x6c>)
    cc88:	9600      	str	r6, [sp, #0]
    cc8a:	f00a f88c 	bl	16da6 <mul_mont_384>

#ifndef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
    /* sign goes straight to flt_reciprocal */
    mul_mont_384(temp.r[1], temp.r[0], inp, BLS12_381_P, p0);
    cc8e:	462a      	mov	r2, r5
    cc90:	a902      	add	r1, sp, #8
    cc92:	a80e      	add	r0, sp, #56	; 0x38
    cc94:	4b0c      	ldr	r3, [pc, #48]	; (ccc8 <reciprocal_fp+0x68>)
    cc96:	9600      	str	r6, [sp, #0]
    cc98:	f00a f885 	bl	16da6 <mul_mont_384>
    if (vec_is_equal(temp.r[1],  BLS12_381_Rx.p, sizeof(vec384)))
    cc9c:	2230      	movs	r2, #48	; 0x30
    cc9e:	490c      	ldr	r1, [pc, #48]	; (ccd0 <reciprocal_fp+0x70>)
    cca0:	a80e      	add	r0, sp, #56	; 0x38
    cca2:	f009 f8f0 	bl	15e86 <vec_is_equal>
    cca6:	b130      	cbz	r0, ccb6 <reciprocal_fp+0x56>
        vec_copy(out, temp.r[0], sizeof(vec384));
    cca8:	2230      	movs	r2, #48	; 0x30
    ccaa:	4620      	mov	r0, r4
    ccac:	a902      	add	r1, sp, #8
    ccae:	f009 f8fc 	bl	15eaa <vec_copy>
        flt_reciprocal_fp(out, inp);
#else
    vec_copy(out, temp.r[0], sizeof(vec384));
#endif
#undef RRx4
}
    ccb2:	b01a      	add	sp, #104	; 0x68
    ccb4:	bd70      	pop	{r4, r5, r6, pc}
        flt_reciprocal_fp(out, inp);
    ccb6:	4629      	mov	r1, r5
    ccb8:	4620      	mov	r0, r4
    ccba:	f7ff fdf7 	bl	c8ac <flt_reciprocal_fp>
}
    ccbe:	e7f8      	b.n	ccb2 <reciprocal_fp+0x52>
    ccc0:	fffcfffd 	.word	0xfffcfffd
    ccc4:	0001c9a8 	.word	0x0001c9a8
    ccc8:	0001c538 	.word	0x0001c538
    cccc:	0001c568 	.word	0x0001c568
    ccd0:	0001c5c8 	.word	0x0001c5c8

0000ccd4 <POINTonE1_from_Jacobian>:
{
    ccd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    limb_t inf = vec_is_zero(in->Z, sizeof(in->Z));
    ccd6:	f101 0660 	add.w	r6, r1, #96	; 0x60
{
    ccda:	b09b      	sub	sp, #108	; 0x6c
    ccdc:	4604      	mov	r4, r0
    ccde:	460d      	mov	r5, r1
    limb_t inf = vec_is_zero(in->Z, sizeof(in->Z));
    cce0:	4630      	mov	r0, r6
    cce2:	2130      	movs	r1, #48	; 0x30
    cce4:	f009 f8c2 	bl	15e6c <vec_is_zero>
    cce8:	4607      	mov	r7, r0
    reciprocal_fp(Z, in->Z);                            /* 1/Z   */
    ccea:	4631      	mov	r1, r6
    ccec:	a802      	add	r0, sp, #8
    ccee:	f7ff ffb7 	bl	cc60 <reciprocal_fp>
    sqr_fp(ZZ, Z);
    ccf2:	a902      	add	r1, sp, #8
    ccf4:	a80e      	add	r0, sp, #56	; 0x38
    ccf6:	f7ff fd79 	bl	c7ec <sqr_fp>
    mul_fp(out->X, in->X, ZZ);                          /* X = X/Z^2 */
    ccfa:	4629      	mov	r1, r5
    ccfc:	4620      	mov	r0, r4
    ccfe:	aa0e      	add	r2, sp, #56	; 0x38
    cd00:	f7ff fd58 	bl	c7b4 <mul_fp>
    mul_fp(ZZ, ZZ, Z);
    cd04:	a90e      	add	r1, sp, #56	; 0x38
    cd06:	4608      	mov	r0, r1
    cd08:	aa02      	add	r2, sp, #8
    cd0a:	f7ff fd53 	bl	c7b4 <mul_fp>
    mul_fp(out->Y, in->Y, ZZ);                          /* Y = Y/Z^3 */
    cd0e:	aa0e      	add	r2, sp, #56	; 0x38
    cd10:	f105 0130 	add.w	r1, r5, #48	; 0x30
    cd14:	f104 0030 	add.w	r0, r4, #48	; 0x30
    cd18:	f7ff fd4c 	bl	c7b4 <mul_fp>
    vec_select(out->Z, in->Z, BLS12_381_G1.Z,
    cd1c:	2330      	movs	r3, #48	; 0x30
    cd1e:	4631      	mov	r1, r6
    cd20:	4a03      	ldr	r2, [pc, #12]	; (cd30 <POINTonE1_from_Jacobian+0x5c>)
    cd22:	9700      	str	r7, [sp, #0]
    cd24:	f104 0060 	add.w	r0, r4, #96	; 0x60
    cd28:	f009 f889 	bl	15e3e <vec_select>
}
    cd2c:	b01b      	add	sp, #108	; 0x6c
    cd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd30:	0001c3e8 	.word	0x0001c3e8

0000cd34 <POINTonE1_to_affine>:
{
    cd34:	b530      	push	{r4, r5, lr}
    cd36:	460c      	mov	r4, r1
    cd38:	4605      	mov	r5, r0
    cd3a:	b0a5      	sub	sp, #148	; 0x94
    if (!vec_is_equal(in->Z, BLS12_381_Rx.p, sizeof(in->Z))) {
    cd3c:	2230      	movs	r2, #48	; 0x30
    cd3e:	4909      	ldr	r1, [pc, #36]	; (cd64 <POINTonE1_to_affine+0x30>)
    cd40:	f104 0060 	add.w	r0, r4, #96	; 0x60
    cd44:	f009 f89f 	bl	15e86 <vec_is_equal>
    cd48:	b920      	cbnz	r0, cd54 <POINTonE1_to_affine+0x20>
        POINTonE1_from_Jacobian(&p, in);
    cd4a:	4621      	mov	r1, r4
    cd4c:	4668      	mov	r0, sp
    cd4e:	f7ff ffc1 	bl	ccd4 <POINTonE1_from_Jacobian>
        in = &p;
    cd52:	466c      	mov	r4, sp
    vec_copy(out, in, sizeof(*out));
    cd54:	2260      	movs	r2, #96	; 0x60
    cd56:	4621      	mov	r1, r4
    cd58:	4628      	mov	r0, r5
    cd5a:	f009 f8a6 	bl	15eaa <vec_copy>
}
    cd5e:	b025      	add	sp, #148	; 0x94
    cd60:	bd30      	pop	{r4, r5, pc}
    cd62:	bf00      	nop
    cd64:	0001c5c8 	.word	0x0001c5c8

0000cd68 <blst_p1_compress>:
{
    cd68:	b570      	push	{r4, r5, r6, lr}
    if (vec_is_zero(in->Z, sizeof(in->Z))) {
    cd6a:	f101 0660 	add.w	r6, r1, #96	; 0x60
{
    cd6e:	4604      	mov	r4, r0
    cd70:	460d      	mov	r5, r1
    cd72:	b0a4      	sub	sp, #144	; 0x90
    if (vec_is_zero(in->Z, sizeof(in->Z))) {
    cd74:	2130      	movs	r1, #48	; 0x30
    cd76:	4630      	mov	r0, r6
    cd78:	f009 f878 	bl	15e6c <vec_is_zero>
    cd7c:	b138      	cbz	r0, cd8e <blst_p1_compress+0x26>
        bytes_zero(out, 48);
    cd7e:	2130      	movs	r1, #48	; 0x30
    cd80:	4620      	mov	r0, r4
    cd82:	f009 f855 	bl	15e30 <bytes_zero>
        out[0] = 0xc0;    /* compressed and infinitiy bits */
    cd86:	23c0      	movs	r3, #192	; 0xc0
        out[0] |= (unsigned char)(0x80 | ((sign & 2) << 4));
    cd88:	7023      	strb	r3, [r4, #0]
}
    cd8a:	b024      	add	sp, #144	; 0x90
    cd8c:	bd70      	pop	{r4, r5, r6, pc}
    if (!vec_is_equal(in->Z, BLS12_381_Rx.p, sizeof(in->Z))) {
    cd8e:	2230      	movs	r2, #48	; 0x30
    cd90:	4630      	mov	r0, r6
    cd92:	490a      	ldr	r1, [pc, #40]	; (cdbc <blst_p1_compress+0x54>)
    cd94:	f009 f877 	bl	15e86 <vec_is_equal>
    cd98:	b920      	cbnz	r0, cda4 <blst_p1_compress+0x3c>
        POINTonE1_from_Jacobian(&p, in);
    cd9a:	4629      	mov	r1, r5
    cd9c:	4668      	mov	r0, sp
    cd9e:	f7ff ff99 	bl	ccd4 <POINTonE1_from_Jacobian>
        in = &p;
    cda2:	466d      	mov	r5, sp
    return POINTonE1_affine_Compress_BE(out, (const POINTonE1_affine *)in);
    cda4:	4629      	mov	r1, r5
    cda6:	4620      	mov	r0, r4
    cda8:	f7ff fe8a 	bl	cac0 <POINTonE1_affine_Compress_BE>
        out[0] |= (unsigned char)(0x80 | ((sign & 2) << 4));
    cdac:	0103      	lsls	r3, r0, #4
    cdae:	7820      	ldrb	r0, [r4, #0]
    cdb0:	f003 0320 	and.w	r3, r3, #32
    cdb4:	4303      	orrs	r3, r0
    cdb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cdba:	e7e5      	b.n	cd88 <blst_p1_compress+0x20>
    cdbc:	0001c5c8 	.word	0x0001c5c8

0000cdc0 <div_by_zz>:

/*
 * Divide 255-bit |val| by z^2 yielding 128-bit quotient and remainder in place.
 */
static void div_by_zz(limb_t val[])
{
    cdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    limb_t d_lo, d_hi;

    d_lo = zz[zz_len - 2];
    d_hi = zz[zz_len - 1];
    for (loop = zz_len, zz_len--; loop--;) {
        limb_t q = div_3_limbs(val + loop + zz_len, d_lo, d_hi);
    cdc4:	4e0c      	ldr	r6, [pc, #48]	; (cdf8 <div_by_zz+0x38>)
    cdc6:	4f0d      	ldr	r7, [pc, #52]	; (cdfc <div_by_zz+0x3c>)
        (void)quot_rem_128(val + loop, zz, q);
    cdc8:	f8df 8034 	ldr.w	r8, [pc, #52]	; ce00 <div_by_zz+0x40>
    cdcc:	f100 0518 	add.w	r5, r0, #24
    cdd0:	f100 0408 	add.w	r4, r0, #8
    for (loop = zz_len, zz_len--; loop--;) {
    cdd4:	42a5      	cmp	r5, r4
    cdd6:	d101      	bne.n	cddc <div_by_zz+0x1c>
    }
    /* remainder is in low half of val[], quotient is in high */
}
    cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        limb_t q = div_3_limbs(val + loop + zz_len, d_lo, d_hi);
    cddc:	4632      	mov	r2, r6
    cdde:	4639      	mov	r1, r7
    cde0:	4628      	mov	r0, r5
    cde2:	f00a faa5 	bl	17330 <div_3_limbs>
        (void)quot_rem_128(val + loop, zz, q);
    cde6:	4641      	mov	r1, r8
        limb_t q = div_3_limbs(val + loop + zz_len, d_lo, d_hi);
    cde8:	4602      	mov	r2, r0
        (void)quot_rem_128(val + loop, zz, q);
    cdea:	f1a5 000c 	sub.w	r0, r5, #12
    cdee:	f00a fadc 	bl	173aa <quot_rem_128>
    cdf2:	3d04      	subs	r5, #4
    cdf4:	e7ee      	b.n	cdd4 <div_by_zz+0x14>
    cdf6:	bf00      	nop
    cdf8:	ac45a401 	.word	0xac45a401
    cdfc:	0001a402 	.word	0x0001a402
    ce00:	0001d5f8 	.word	0x0001d5f8

0000ce04 <div_by_z>:

/*
 * Divide 128-bit |val| by z yielding 64-bit quotient and remainder in place.
 */
static void div_by_z(limb_t val[])
{
    ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    limb_t d_lo, d_hi;

    d_lo = (sizeof(z) == sizeof(limb_t)) ? 0 : z[z_len - 2];
    d_hi = z[z_len - 1];
    for (loop = z_len, z_len--; loop--;) {
        limb_t q = div_3_limbs(val + loop + z_len, d_lo, d_hi);
    ce06:	4f0e      	ldr	r7, [pc, #56]	; (ce40 <div_by_z+0x3c>)
{
    ce08:	4604      	mov	r4, r0
        limb_t q = div_3_limbs(val + loop + z_len, d_lo, d_hi);
    ce0a:	463a      	mov	r2, r7
    ce0c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ce10:	3008      	adds	r0, #8
    ce12:	f00a fa8d 	bl	17330 <div_3_limbs>
        (void)quot_rem_64(val + loop, z, q);
    ce16:	4d0b      	ldr	r5, [pc, #44]	; (ce44 <div_by_z+0x40>)
    ce18:	1d26      	adds	r6, r4, #4
        limb_t q = div_3_limbs(val + loop + z_len, d_lo, d_hi);
    ce1a:	4602      	mov	r2, r0
        (void)quot_rem_64(val + loop, z, q);
    ce1c:	4629      	mov	r1, r5
    ce1e:	4630      	mov	r0, r6
    ce20:	f00a fac6 	bl	173b0 <quot_rem_64>
        limb_t q = div_3_limbs(val + loop + z_len, d_lo, d_hi);
    ce24:	463a      	mov	r2, r7
    ce26:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    ce2a:	4630      	mov	r0, r6
    ce2c:	f00a fa80 	bl	17330 <div_3_limbs>
        (void)quot_rem_64(val + loop, z, q);
    ce30:	4629      	mov	r1, r5
        limb_t q = div_3_limbs(val + loop + z_len, d_lo, d_hi);
    ce32:	4602      	mov	r2, r0
        (void)quot_rem_64(val + loop, z, q);
    ce34:	4620      	mov	r0, r4
    }
    /* remainder is in low half of val[], quotient is in high */
}
    ce36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        (void)quot_rem_64(val + loop, z, q);
    ce3a:	f00a bab9 	b.w	173b0 <quot_rem_64>
    ce3e:	bf00      	nop
    ce40:	d2010000 	.word	0xd2010000
    ce44:	0001d5f0 	.word	0x0001d5f0

0000ce48 <blst_sha256_block_data_order>:
#define Ch(x,y,z)	(((x) & (y)) ^ ((~(x)) & (z)))
#define Maj(x,y,z)	(((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))

void blst_sha256_block_data_order(unsigned int *v, const void *inp,
                                                   size_t blocks)
{
    ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int X[16], l, a, b, c, d, e, f, g, h, s0, s1, T1, T2;
    const unsigned char *data = inp;
    size_t round;

    a = v[0];
    b = v[1];
    ce4c:	e9d0 7300 	ldrd	r7, r3, [r0]
    c = v[2];
    d = v[3];
    ce50:	e9d0 5e02 	ldrd	r5, lr, [r0, #8]
{
    ce54:	b097      	sub	sp, #92	; 0x5c
    ce56:	e9cd 1202 	strd	r1, r2, [sp, #8]
    e = v[4];
    f = v[5];
    ce5a:	e9d0 4204 	ldrd	r4, r2, [r0, #16]
    g = v[6];
    ce5e:	6981      	ldr	r1, [r0, #24]
    h = v[7];
    ce60:	f8d0 801c 	ldr.w	r8, [r0, #28]
    g = v[6];
    ce64:	9101      	str	r1, [sp, #4]

    while (blocks--) {
    ce66:	9903      	ldr	r1, [sp, #12]
    ce68:	3901      	subs	r1, #1
    ce6a:	9103      	str	r1, [sp, #12]
    ce6c:	3101      	adds	r1, #1
    ce6e:	d102      	bne.n	ce76 <blst_sha256_block_data_order+0x2e>
        e += v[4]; v[4] = e;
        f += v[5]; v[5] = f;
        g += v[6]; v[6] = g;
        h += v[7]; v[7] = h;
    }
}
    ce70:	b017      	add	sp, #92	; 0x5c
    ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (blocks--) {
    ce76:	4621      	mov	r1, r4
    ce78:	469c      	mov	ip, r3
    ce7a:	463c      	mov	r4, r7
    ce7c:	2700      	movs	r7, #0
    ce7e:	f8df 9194 	ldr.w	r9, [pc, #404]	; d014 <blst_sha256_block_data_order+0x1cc>
    ce82:	9200      	str	r2, [sp, #0]
            l |= (unsigned int)data[2] << 8;
    ce84:	9b02      	ldr	r3, [sp, #8]
            T1 = X[round] = l;
    ce86:	aa06      	add	r2, sp, #24
    ce88:	59db      	ldr	r3, [r3, r7]
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    ce8a:	9e00      	ldr	r6, [sp, #0]
    ce8c:	ba1b      	rev	r3, r3
            T1 = X[round] = l;
    ce8e:	51d3      	str	r3, [r2, r7]
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    ce90:	f859 2b04 	ldr.w	r2, [r9], #4
    ce94:	ea01 0a06 	and.w	sl, r1, r6
    ce98:	441a      	add	r2, r3
    ce9a:	ea4f 23f1 	mov.w	r3, r1, ror #11
    ce9e:	ea83 13b1 	eor.w	r3, r3, r1, ror #6
    cea2:	ea83 6371 	eor.w	r3, r3, r1, ror #25
    cea6:	4413      	add	r3, r2
    cea8:	9a01      	ldr	r2, [sp, #4]
    ceaa:	3704      	adds	r7, #4
    ceac:	ea22 0201 	bic.w	r2, r2, r1
    ceb0:	ea82 020a 	eor.w	r2, r2, sl
    ceb4:	4413      	add	r3, r2
            T2 = Sigma0(a) + Maj(a, b, c);
    ceb6:	ea4f 3a74 	mov.w	sl, r4, ror #13
    ceba:	ea8c 0205 	eor.w	r2, ip, r5
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    cebe:	4498      	add	r8, r3
            T2 = Sigma0(a) + Maj(a, b, c);
    cec0:	4022      	ands	r2, r4
    cec2:	ea8a 0ab4 	eor.w	sl, sl, r4, ror #2
    cec6:	ea0c 0305 	and.w	r3, ip, r5
    ceca:	4053      	eors	r3, r2
    cecc:	ea8a 5ab4 	eor.w	sl, sl, r4, ror #22
    ced0:	4453      	add	r3, sl
        for (round = 0; round < 16; round++) {
    ced2:	2f40      	cmp	r7, #64	; 0x40
            e = d + T1;
    ced4:	eb08 020e 	add.w	r2, r8, lr
            a = T1 + T2;
    ced8:	4443      	add	r3, r8
        for (round = 0; round < 16; round++) {
    ceda:	46ae      	mov	lr, r5
    cedc:	f8dd 8004 	ldr.w	r8, [sp, #4]
    cee0:	f040 8086 	bne.w	cff0 <blst_sha256_block_data_order+0x1a8>
    cee4:	f04f 0a10 	mov.w	sl, #16
    cee8:	9f02      	ldr	r7, [sp, #8]
    ceea:	4e49      	ldr	r6, [pc, #292]	; (d010 <blst_sha256_block_data_order+0x1c8>)
    ceec:	3740      	adds	r7, #64	; 0x40
    ceee:	9702      	str	r7, [sp, #8]
    cef0:	9604      	str	r6, [sp, #16]
            s0 = X[(round + 1) & 0x0f];
    cef2:	4657      	mov	r7, sl
    cef4:	f10a 0a01 	add.w	sl, sl, #1
    cef8:	ae16      	add	r6, sp, #88	; 0x58
    cefa:	f00a 0e0f 	and.w	lr, sl, #15
    cefe:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    cf02:	f85e bc40 	ldr.w	fp, [lr, #-64]
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf06:	f007 090f 	and.w	r9, r7, #15
            s0 = sigma0(s0);
    cf0a:	ea4f 4ebb 	mov.w	lr, fp, ror #18
    cf0e:	ea8e 16fb 	eor.w	r6, lr, fp, ror #7
            s1 = X[(round + 14) & 0x0f];
    cf12:	f107 0e0e 	add.w	lr, r7, #14
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf16:	3709      	adds	r7, #9
            s0 = sigma0(s0);
    cf18:	9605      	str	r6, [sp, #20]
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf1a:	f007 070f 	and.w	r7, r7, #15
            s1 = X[(round + 14) & 0x0f];
    cf1e:	ae16      	add	r6, sp, #88	; 0x58
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf20:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    cf24:	eb06 0787 	add.w	r7, r6, r7, lsl #2
            s1 = X[(round + 14) & 0x0f];
    cf28:	f00e 0e0f 	and.w	lr, lr, #15
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf2c:	f857 7c40 	ldr.w	r7, [r7, #-64]
            s1 = X[(round + 14) & 0x0f];
    cf30:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf34:	f859 6c40 	ldr.w	r6, [r9, #-64]
            s1 = X[(round + 14) & 0x0f];
    cf38:	f85e ec40 	ldr.w	lr, [lr, #-64]
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf3c:	4437      	add	r7, r6
            s0 = sigma0(s0);
    cf3e:	9e05      	ldr	r6, [sp, #20]
            s1 = sigma1(s1);
    cf40:	ea4f 48fe 	mov.w	r8, lr, ror #19
            s0 = sigma0(s0);
    cf44:	ea86 0bdb 	eor.w	fp, r6, fp, lsr #3
            s1 = sigma1(s1);
    cf48:	ea88 487e 	eor.w	r8, r8, lr, ror #17
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    cf4c:	9e04      	ldr	r6, [sp, #16]
            s1 = sigma1(s1);
    cf4e:	ea88 289e 	eor.w	r8, r8, lr, lsr #10
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf52:	445f      	add	r7, fp
    cf54:	4447      	add	r7, r8
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    cf56:	f856 8b04 	ldr.w	r8, [r6], #4
            T1 = X[round & 0xf] += s0 + s1 + X[(round + 9) & 0xf];
    cf5a:	f849 7c40 	str.w	r7, [r9, #-64]
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    cf5e:	9604      	str	r6, [sp, #16]
    cf60:	9e00      	ldr	r6, [sp, #0]
    cf62:	ea4f 29f2 	mov.w	r9, r2, ror #11
    cf66:	ea26 0e02 	bic.w	lr, r6, r2
    cf6a:	ea02 0b01 	and.w	fp, r2, r1
    cf6e:	ea89 19b2 	eor.w	r9, r9, r2, ror #6
    cf72:	ea8e 0e0b 	eor.w	lr, lr, fp
    cf76:	ea89 6972 	eor.w	r9, r9, r2, ror #25
    cf7a:	44ce      	add	lr, r9
    cf7c:	9e01      	ldr	r6, [sp, #4]
    cf7e:	44c6      	add	lr, r8
    cf80:	4477      	add	r7, lr
            T2 = Sigma0(a) + Maj(a, b, c);
    cf82:	ea84 0b0c 	eor.w	fp, r4, ip
    cf86:	ea4f 3e73 	mov.w	lr, r3, ror #13
            T1 += h + Sigma1(e) + Ch(e, f, g) + K256[round];
    cf8a:	443e      	add	r6, r7
            T2 = Sigma0(a) + Maj(a, b, c);
    cf8c:	ea0b 0b03 	and.w	fp, fp, r3
    cf90:	ea8e 0eb3 	eor.w	lr, lr, r3, ror #2
    cf94:	ea04 070c 	and.w	r7, r4, ip
    cf98:	ea8b 0707 	eor.w	r7, fp, r7
    cf9c:	ea8e 5eb3 	eor.w	lr, lr, r3, ror #22
    cfa0:	4477      	add	r7, lr
            e = d + T1;
    cfa2:	eb06 0b05 	add.w	fp, r6, r5
            a = T1 + T2;
    cfa6:	4437      	add	r7, r6
        for (; round < 64; round++) {
    cfa8:	9e00      	ldr	r6, [sp, #0]
    cfaa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
    cfae:	4665      	mov	r5, ip
    cfb0:	9601      	str	r6, [sp, #4]
    cfb2:	d125      	bne.n	d000 <blst_sha256_block_data_order+0x1b8>
        a += v[0]; v[0] = a;
    cfb4:	6805      	ldr	r5, [r0, #0]
        f += v[5]; v[5] = f;
    cfb6:	6946      	ldr	r6, [r0, #20]
        a += v[0]; v[0] = a;
    cfb8:	442f      	add	r7, r5
        b += v[1]; v[1] = b;
    cfba:	6845      	ldr	r5, [r0, #4]
        f += v[5]; v[5] = f;
    cfbc:	4432      	add	r2, r6
        b += v[1]; v[1] = b;
    cfbe:	442b      	add	r3, r5
        c += v[2]; v[2] = c;
    cfc0:	6885      	ldr	r5, [r0, #8]
        g += v[6]; v[6] = g;
    cfc2:	6986      	ldr	r6, [r0, #24]
        c += v[2]; v[2] = c;
    cfc4:	4425      	add	r5, r4
        d += v[3]; v[3] = d;
    cfc6:	68c4      	ldr	r4, [r0, #12]
        g += v[6]; v[6] = g;
    cfc8:	1871      	adds	r1, r6, r1
        d += v[3]; v[3] = d;
    cfca:	eb0c 0e04 	add.w	lr, ip, r4
        h += v[7]; v[7] = h;
    cfce:	9e00      	ldr	r6, [sp, #0]
        e += v[4]; v[4] = e;
    cfd0:	6904      	ldr	r4, [r0, #16]
        g += v[6]; v[6] = g;
    cfd2:	9101      	str	r1, [sp, #4]
    cfd4:	6181      	str	r1, [r0, #24]
        h += v[7]; v[7] = h;
    cfd6:	69c1      	ldr	r1, [r0, #28]
        e += v[4]; v[4] = e;
    cfd8:	445c      	add	r4, fp
        h += v[7]; v[7] = h;
    cfda:	440e      	add	r6, r1
    cfdc:	46b0      	mov	r8, r6
        a += v[0]; v[0] = a;
    cfde:	6007      	str	r7, [r0, #0]
        b += v[1]; v[1] = b;
    cfe0:	6043      	str	r3, [r0, #4]
        c += v[2]; v[2] = c;
    cfe2:	6085      	str	r5, [r0, #8]
        d += v[3]; v[3] = d;
    cfe4:	f8c0 e00c 	str.w	lr, [r0, #12]
        e += v[4]; v[4] = e;
    cfe8:	6104      	str	r4, [r0, #16]
        f += v[5]; v[5] = f;
    cfea:	6142      	str	r2, [r0, #20]
        h += v[7]; v[7] = h;
    cfec:	61c6      	str	r6, [r0, #28]
    cfee:	e73a      	b.n	ce66 <blst_sha256_block_data_order+0x1e>
    cff0:	9d00      	ldr	r5, [sp, #0]
    cff2:	e9cd 1500 	strd	r1, r5, [sp]
    cff6:	4665      	mov	r5, ip
            e = d + T1;
    cff8:	4611      	mov	r1, r2
    cffa:	46a4      	mov	ip, r4
            a = T1 + T2;
    cffc:	461c      	mov	r4, r3
    cffe:	e741      	b.n	ce84 <blst_sha256_block_data_order+0x3c>
    d000:	46a4      	mov	ip, r4
    d002:	9100      	str	r1, [sp, #0]
    d004:	461c      	mov	r4, r3
    d006:	4611      	mov	r1, r2
            a = T1 + T2;
    d008:	463b      	mov	r3, r7
            e = d + T1;
    d00a:	465a      	mov	r2, fp
    d00c:	e771      	b.n	cef2 <blst_sha256_block_data_order+0xaa>
    d00e:	bf00      	nop
    d010:	0001c8e8 	.word	0x0001c8e8
    d014:	0001c8a8 	.word	0x0001c8a8

0000d018 <hash_to_field>:
 */
static void hash_to_field(vec384 elems[], size_t nelems,
                          const unsigned char *aug, size_t aug_len,
                          const unsigned char *msg, size_t msg_len,
                          const unsigned char *DST, size_t DST_len)
{
    d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d01c:	b0ff      	sub	sp, #508	; 0x1fc
    d01e:	4681      	mov	r9, r0
    d020:	af02      	add	r7, sp, #8
    size_t L = sizeof(vec384) + 128/8;  /* ceil((ceil(log2(p)) + k) / 8) */
    size_t len_in_bytes = L * nelems;   /* divisible by 64, hurray!      */
    d022:	0188      	lsls	r0, r1, #6
    d024:	61f8      	str	r0, [r7, #28]
#if !defined(__STDC_VERSION__) || __STDC_VERSION__<199901
    limb_t *pseudo_random = alloca(len_in_bytes);
#else
    limb_t pseudo_random[len_in_bytes/sizeof(limb_t)];
    d026:	4668      	mov	r0, sp
{
    d028:	e9d7 6588 	ldrd	r6, r5, [r7, #544]	; 0x220
    limb_t pseudo_random[len_in_bytes/sizeof(limb_t)];
    d02c:	eba0 1181 	sub.w	r1, r0, r1, lsl #6
#endif
    unsigned char *bytes;
    vec768 elem;

    aug_len = aug!=NULL ? aug_len : 0;
    d030:	f1b2 0800 	subs.w	r8, r2, #0
    limb_t pseudo_random[len_in_bytes/sizeof(limb_t)];
    d034:	468d      	mov	sp, r1
    aug_len = aug!=NULL ? aug_len : 0;
    d036:	bf08      	it	eq
    d038:	2300      	moveq	r3, #0
    limb_t pseudo_random[len_in_bytes/sizeof(limb_t)];
    d03a:	f10d 0b08 	add.w	fp, sp, #8
    aug_len = aug!=NULL ? aug_len : 0;
    d03e:	61bb      	str	r3, [r7, #24]
    DST_len = DST!=NULL ? DST_len : 0;
    d040:	2e00      	cmp	r6, #0
    d042:	f000 80ea 	beq.w	d21a <hash_to_field+0x202>
    if (DST_len > 255) {
    d046:	2dff      	cmp	r5, #255	; 0xff
    d048:	d917      	bls.n	d07a <hash_to_field+0x62>
        sha256_init(&ctx);
    d04a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d04e:	f7ff fb7f 	bl	c750 <sha256_init>
        sha256_update(&ctx, "H2C-OVERSIZE-DST-", 17);
    d052:	2211      	movs	r2, #17
    d054:	4999      	ldr	r1, [pc, #612]	; (d2bc <hash_to_field+0x2a4>)
    d056:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d05a:	f00a fa20 	bl	1749e <sha256_update>
        sha256_update(&ctx, DST, DST_len);
    d05e:	462a      	mov	r2, r5
    d060:	4631      	mov	r1, r6
    d062:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d066:	f00a fa1a 	bl	1749e <sha256_update>
        DST = b_0.c, DST_len = 32;
    d06a:	2520      	movs	r5, #32
        sha256_final(b_0.c, &ctx);
    d06c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d070:	f107 0020 	add.w	r0, r7, #32
    d074:	f00a f9bd 	bl	173f2 <sha256_final>
        DST = b_0.c, DST_len = 32;
    d078:	197e      	adds	r6, r7, r5
    b_i_blocks = ((33 + DST_len + 1 + 9) + 63) & -64;
    d07a:	f105 046a 	add.w	r4, r5, #106	; 0x6a
    d07e:	f024 023f 	bic.w	r2, r4, #63	; 0x3f
    vec_zero(b_i.c + b_i_blocks - 64, 64);
    d082:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
    d086:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
    d08a:	4418      	add	r0, r3
    d08c:	2140      	movs	r1, #64	; 0x40
    d08e:	f008 ff18 	bl	15ec2 <vec_zero>
    for (i = 0; i < DST_len; i++)
    d092:	f107 03d1 	add.w	r3, r7, #209	; 0xd1
    d096:	4619      	mov	r1, r3
    d098:	1970      	adds	r0, r6, r5
    d09a:	4286      	cmp	r6, r0
    d09c:	f040 80bf 	bne.w	d21e <hash_to_field+0x206>
    p[i++] = 0x80;
    d0a0:	2080      	movs	r0, #128	; 0x80
    p[i+6] = p[i+5] = p[i+4] = p[i+3] = p[i+2] = p[i+1] = p[i+0] = 0;
    d0a2:	2600      	movs	r6, #0
    p[i++] = 0x80;
    d0a4:	f107 03d2 	add.w	r3, r7, #210	; 0xd2
    p[i++] = (unsigned char)DST_len;
    d0a8:	554d      	strb	r5, [r1, r5]
    p[i++] = 0x80;
    d0aa:	5558      	strb	r0, [r3, r5]
    p[i+6] = p[i+5] = p[i+4] = p[i+3] = p[i+2] = p[i+1] = p[i+0] = 0;
    d0ac:	f107 03d3 	add.w	r3, r7, #211	; 0xd3
    d0b0:	555e      	strb	r6, [r3, r5]
    d0b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
    d0b6:	555e      	strb	r6, [r3, r5]
    d0b8:	f105 0a04 	add.w	sl, r5, #4
    d0bc:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
    d0c0:	f801 600a 	strb.w	r6, [r1, sl]
    d0c4:	555e      	strb	r6, [r3, r5]
    d0c6:	f107 03d7 	add.w	r3, r7, #215	; 0xd7
    d0ca:	555e      	strb	r6, [r3, r5]
    d0cc:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
    d0d0:	555e      	strb	r6, [r3, r5]
    d0d2:	f107 03d9 	add.w	r3, r7, #217	; 0xd9
    d0d6:	555e      	strb	r6, [r3, r5]
    p = b_i.c + b_i_blocks;
    d0d8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
    b_i_bits = (33 + DST_len + 1) * 8;
    d0dc:	3522      	adds	r5, #34	; 0x22
    p = b_i.c + b_i_blocks;
    d0de:	440a      	add	r2, r1
    b_i_bits = (33 + DST_len + 1) * 8;
    d0e0:	00eb      	lsls	r3, r5, #3
    p[-2] = (unsigned char)(b_i_bits >> 8);
    d0e2:	f3c5 1557 	ubfx	r5, r5, #5, #24
    d0e6:	f802 5c02 	strb.w	r5, [r2, #-2]
    p[-1] = (unsigned char)(b_i_bits);
    d0ea:	f802 3c01 	strb.w	r3, [r2, #-1]
    ctx->h[1] = 0x17b9b469U;
    d0ee:	4a74      	ldr	r2, [pc, #464]	; (d2c0 <hash_to_field+0x2a8>)
    d0f0:	4b74      	ldr	r3, [pc, #464]	; (d2c4 <hash_to_field+0x2ac>)
    ctx->h[7] = 0x1837a9d8U;
    d0f2:	4975      	ldr	r1, [pc, #468]	; (d2c8 <hash_to_field+0x2b0>)
    ctx->h[1] = 0x17b9b469U;
    d0f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    ctx->h[2] = 0x62335799U;
    d0f8:	4b74      	ldr	r3, [pc, #464]	; (d2cc <hash_to_field+0x2b4>)
    ctx->N = 64;
    d0fa:	2240      	movs	r2, #64	; 0x40
    ctx->h[2] = 0x62335799U;
    d0fc:	64bb      	str	r3, [r7, #72]	; 0x48
    ctx->h[3] = 0x779fbecaU;
    d0fe:	f103 53ab 	add.w	r3, r3, #358612992	; 0x15600000
    d102:	f503 2346 	add.w	r3, r3, #811008	; 0xc6000
    d106:	f203 7331 	addw	r3, r3, #1841	; 0x731
    d10a:	64fb      	str	r3, [r7, #76]	; 0x4c
    ctx->h[4] = 0x8ce5d491U;
    d10c:	4b70      	ldr	r3, [pc, #448]	; (d2d0 <hash_to_field+0x2b8>)
    vec_zero(ctx->buf, sizeof(ctx->buf));
    d10e:	f107 0068 	add.w	r0, r7, #104	; 0x68
    ctx->h[4] = 0x8ce5d491U;
    d112:	653b      	str	r3, [r7, #80]	; 0x50
    ctx->h[5] = 0xc0d26243U;
    d114:	f103 534f 	add.w	r3, r3, #868220928	; 0x33c00000
    d118:	f503 1332 	add.w	r3, r3, #2916352	; 0x2c8000
    d11c:	f603 53b2 	addw	r3, r3, #3506	; 0xdb2
    d120:	657b      	str	r3, [r7, #84]	; 0x54
    ctx->h[7] = 0x1837a9d8U;
    d122:	4b6c      	ldr	r3, [pc, #432]	; (d2d4 <hash_to_field+0x2bc>)
    h[7] = 0x5be0cd19U;
    d124:	4d6c      	ldr	r5, [pc, #432]	; (d2d8 <hash_to_field+0x2c0>)
    d126:	e9c7 1316 	strd	r1, r3, [r7, #88]	; 0x58
    ctx->N = 64;
    d12a:	2300      	movs	r3, #0
    vec_zero(ctx->buf, sizeof(ctx->buf));
    d12c:	2140      	movs	r1, #64	; 0x40
    ctx->N = 64;
    d12e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    vec_zero(ctx->buf, sizeof(ctx->buf));
    d132:	f008 fec6 	bl	15ec2 <vec_zero>
    sha256_update(&ctx, aug, aug_len);              /* | aug | */
    d136:	4641      	mov	r1, r8
    d138:	69ba      	ldr	r2, [r7, #24]
    d13a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    ctx->off = 0;
    d13e:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
    sha256_update(&ctx, aug, aug_len);              /* | aug | */
    d142:	f00a f9ac 	bl	1749e <sha256_update>
    sha256_update(&ctx, msg, msg_len);              /* | msg | */
    d146:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	; 0x218
    d14a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d14e:	f00a f9a6 	bl	1749e <sha256_update>
    b_i.c[30] = (unsigned char)(len_in_bytes >> 8);
    d152:	69fb      	ldr	r3, [r7, #28]
    sha256_update(&ctx, b_i.c + 30, 3 + DST_len + 1);
    d154:	4652      	mov	r2, sl
    b_i.c[30] = (unsigned char)(len_in_bytes >> 8);
    d156:	ba5b      	rev16	r3, r3
    sha256_update(&ctx, b_i.c + 30, 3 + DST_len + 1);
    d158:	f107 01ce 	add.w	r1, r7, #206	; 0xce
    d15c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    b_i.c[30] = (unsigned char)(len_in_bytes >> 8);
    d160:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
    b_i.c[32] = 0;
    d164:	f887 60d0 	strb.w	r6, [r7, #208]	; 0xd0
    sha256_update(&ctx, b_i.c + 30, 3 + DST_len + 1);
    d168:	f00a f999 	bl	1749e <sha256_update>
    sha256_final(b_0.c, &ctx);
    d16c:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d170:	f107 0020 	add.w	r0, r7, #32
    d174:	f00a f93d 	bl	173f2 <sha256_final>
    vec_copy(b_i.c, b_0.c, 32);
    d178:	2220      	movs	r2, #32
    h[1] = 0xbb67ae85U;
    d17a:	4858      	ldr	r0, [pc, #352]	; (d2dc <hash_to_field+0x2c4>)
    d17c:	4b58      	ldr	r3, [pc, #352]	; (d2e0 <hash_to_field+0x2c8>)
    h[3] = 0xa54ff53aU;
    d17e:	f8df a178 	ldr.w	sl, [pc, #376]	; d2f8 <hash_to_field+0x2e0>
    h[1] = 0xbb67ae85U;
    d182:	e9c7 0310 	strd	r0, r3, [r7, #64]	; 0x40
    h[3] = 0xa54ff53aU;
    d186:	4b57      	ldr	r3, [pc, #348]	; (d2e4 <hash_to_field+0x2cc>)
    h[5] = 0x9b05688cU;
    d188:	f8df 8170 	ldr.w	r8, [pc, #368]	; d2fc <hash_to_field+0x2e4>
    h[3] = 0xa54ff53aU;
    d18c:	e9c7 a312 	strd	sl, r3, [r7, #72]	; 0x48
    h[5] = 0x9b05688cU;
    d190:	4e55      	ldr	r6, [pc, #340]	; (d2e8 <hash_to_field+0x2d0>)
    h[7] = 0x5be0cd19U;
    d192:	4b56      	ldr	r3, [pc, #344]	; (d2ec <hash_to_field+0x2d4>)
    d194:	18b9      	adds	r1, r7, r2
    d196:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
    d19a:	e9c7 5316 	strd	r5, r3, [r7, #88]	; 0x58
    h[5] = 0x9b05688cU;
    d19e:	e9c7 8614 	strd	r8, r6, [r7, #80]	; 0x50
    d1a2:	f008 fe82 	bl	15eaa <vec_copy>
    sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d1a6:	09a3      	lsrs	r3, r4, #6
    while (--len_in_bytes) {
    d1a8:	465c      	mov	r4, fp
    ++b_i.c[32];
    d1aa:	f897 20d0 	ldrb.w	r2, [r7, #208]	; 0xd0
    sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d1ae:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
    ++b_i.c[32];
    d1b2:	3201      	adds	r2, #1
    d1b4:	f887 20d0 	strb.w	r2, [r7, #208]	; 0xd0
    sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d1b8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d1bc:	461a      	mov	r2, r3
    d1be:	61bb      	str	r3, [r7, #24]
    d1c0:	f7ff fe42 	bl	ce48 <blst_sha256_block_data_order>
    sha256_emit(bytes, ctx.h);
    d1c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d1c8:	4658      	mov	r0, fp
    d1ca:	f00a f8fd 	bl	173c8 <blst_sha256_emit>
    while (--len_in_bytes) {
    d1ce:	69fb      	ldr	r3, [r7, #28]
    d1d0:	f8df c108 	ldr.w	ip, [pc, #264]	; d2dc <hash_to_field+0x2c4>
    d1d4:	f1a3 0120 	sub.w	r1, r3, #32
    d1d8:	eb0b 0301 	add.w	r3, fp, r1
    d1dc:	617b      	str	r3, [r7, #20]
    d1de:	4b40      	ldr	r3, [pc, #256]	; (d2e0 <hash_to_field+0x2c8>)
    d1e0:	f8df e100 	ldr.w	lr, [pc, #256]	; d2e4 <hash_to_field+0x2cc>
    d1e4:	e9c7 3c03 	strd	r3, ip, [r7, #12]
    d1e8:	4b40      	ldr	r3, [pc, #256]	; (d2ec <hash_to_field+0x2d4>)
    d1ea:	e9c7 3e01 	strd	r3, lr, [r7, #4]
    d1ee:	697b      	ldr	r3, [r7, #20]
    d1f0:	42a3      	cmp	r3, r4
    d1f2:	d119      	bne.n	d228 <hash_to_field+0x210>

    expand_message_xmd((unsigned char *)pseudo_random, len_in_bytes,
                       aug, aug_len, msg, msg_len, DST, DST_len);

    vec_zero(elem, sizeof(elem));
    d1f4:	2160      	movs	r1, #96	; 0x60
    d1f6:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
    d1fa:	f008 fe62 	bl	15ec2 <vec_zero>
    bytes = (unsigned char *)pseudo_random;
    while (nelems--) {
    d1fe:	69fb      	ldr	r3, [r7, #28]
        limbs_from_be_bytes(elem, bytes, L);
        bytes += L;
        /*
         * L-bytes block % P, output is in Montgomery domain...
         */
        redc_mont_384(elems[0], elem, BLS12_381_P, p0);
    d200:	4e3b      	ldr	r6, [pc, #236]	; (d2f0 <hash_to_field+0x2d8>)
    d202:	445b      	add	r3, fp
    d204:	461c      	mov	r4, r3
    d206:	4d3b      	ldr	r5, [pc, #236]	; (d2f4 <hash_to_field+0x2dc>)
        mul_mont_384(elems[0], elems[0], BLS12_381_RRRR, BLS12_381_P, p0);
    d208:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d300 <hash_to_field+0x2e8>
    while (nelems--) {
    d20c:	45a3      	cmp	fp, r4
    d20e:	d13b      	bne.n	d288 <hash_to_field+0x270>
        elems++;
    }
}
    d210:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
    d214:	46bd      	mov	sp, r7
    d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DST_len = DST!=NULL ? DST_len : 0;
    d21a:	4635      	mov	r5, r6
    d21c:	e72d      	b.n	d07a <hash_to_field+0x62>
        p[i] = DST[i];
    d21e:	f816 cb01 	ldrb.w	ip, [r6], #1
    d222:	f803 cb01 	strb.w	ip, [r3], #1
    for (i = 0; i < DST_len; i++)
    d226:	e738      	b.n	d09a <hash_to_field+0x82>
    h[0] = 0x6a09e667U;
    d228:	693b      	ldr	r3, [r7, #16]
    h[6] = 0x1f83d9abU;
    d22a:	e9c7 6515 	strd	r6, r5, [r7, #84]	; 0x54
    h[0] = 0x6a09e667U;
    d22e:	643b      	str	r3, [r7, #64]	; 0x40
    h[1] = 0xbb67ae85U;
    d230:	68fb      	ldr	r3, [r7, #12]
    d232:	f107 0c20 	add.w	ip, r7, #32
    h[2] = 0x3c6ef372U;
    d236:	e9c7 3a11 	strd	r3, sl, [r7, #68]	; 0x44
    h[3] = 0xa54ff53aU;
    d23a:	68bb      	ldr	r3, [r7, #8]
    d23c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
    h[4] = 0x510e527fU;
    d240:	e9c7 3813 	strd	r3, r8, [r7, #76]	; 0x4c
    h[7] = 0x5be0cd19U;
    d244:	687b      	ldr	r3, [r7, #4]
    for (i = 0; i < num; i++)
    d246:	f104 0e1c 	add.w	lr, r4, #28
    d24a:	65fb      	str	r3, [r7, #92]	; 0x5c
    d24c:	1f23      	subs	r3, r4, #4
        rp[i] = ap[i] ^ bp[i];
    d24e:	f853 1f04 	ldr.w	r1, [r3, #4]!
    d252:	f85c 2b04 	ldr.w	r2, [ip], #4
    for (i = 0; i < num; i++)
    d256:	4573      	cmp	r3, lr
        rp[i] = ap[i] ^ bp[i];
    d258:	ea81 0102 	eor.w	r1, r1, r2
    d25c:	f840 1b04 	str.w	r1, [r0], #4
    for (i = 0; i < num; i++)
    d260:	d1f5      	bne.n	d24e <hash_to_field+0x236>
        ++b_i.c[32];
    d262:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
        sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d266:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
        ++b_i.c[32];
    d26a:	3301      	adds	r3, #1
        sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d26c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d270:	69ba      	ldr	r2, [r7, #24]
        bytes += 32;
    d272:	3420      	adds	r4, #32
        ++b_i.c[32];
    d274:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
        sha256_block_data_order(ctx.h, b_i.c, b_i_blocks / 64);
    d278:	f7ff fde6 	bl	ce48 <blst_sha256_block_data_order>
        sha256_emit(bytes, ctx.h);
    d27c:	4620      	mov	r0, r4
    d27e:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d282:	f00a f8a1 	bl	173c8 <blst_sha256_emit>
    d286:	e7b2      	b.n	d1ee <hash_to_field+0x1d6>
        limbs_from_be_bytes(elem, bytes, L);
    d288:	4659      	mov	r1, fp
    d28a:	2240      	movs	r2, #64	; 0x40
    d28c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
    d290:	f008 fe21 	bl	15ed6 <limbs_from_be_bytes>
        redc_mont_384(elems[0], elem, BLS12_381_P, p0);
    d294:	4648      	mov	r0, r9
    d296:	462a      	mov	r2, r5
    d298:	4b15      	ldr	r3, [pc, #84]	; (d2f0 <hash_to_field+0x2d8>)
    d29a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
    d29e:	f009 ff55 	bl	1714c <redc_mont_384>
        mul_mont_384(elems[0], elems[0], BLS12_381_RRRR, BLS12_381_P, p0);
    d2a2:	4649      	mov	r1, r9
    d2a4:	4648      	mov	r0, r9
    d2a6:	462b      	mov	r3, r5
    d2a8:	4642      	mov	r2, r8
    d2aa:	9600      	str	r6, [sp, #0]
    d2ac:	f009 fd7b 	bl	16da6 <mul_mont_384>
        bytes += L;
    d2b0:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
        elems++;
    d2b4:	f109 0930 	add.w	r9, r9, #48	; 0x30
    d2b8:	e7a8      	b.n	d20c <hash_to_field+0x1f4>
    d2ba:	bf00      	nop
    d2bc:	0001de01 	.word	0x0001de01
    d2c0:	da5698be 	.word	0xda5698be
    d2c4:	17b9b469 	.word	0x17b9b469
    d2c8:	bafef9ea 	.word	0xbafef9ea
    d2cc:	62335799 	.word	0x62335799
    d2d0:	8ce5d491 	.word	0x8ce5d491
    d2d4:	1837a9d8 	.word	0x1837a9d8
    d2d8:	1f83d9ab 	.word	0x1f83d9ab
    d2dc:	6a09e667 	.word	0x6a09e667
    d2e0:	bb67ae85 	.word	0xbb67ae85
    d2e4:	a54ff53a 	.word	0xa54ff53a
    d2e8:	9b05688c 	.word	0x9b05688c
    d2ec:	5be0cd19 	.word	0x5be0cd19
    d2f0:	fffcfffd 	.word	0xfffcfffd
    d2f4:	0001c538 	.word	0x0001c538
    d2f8:	3c6ef372 	.word	0x3c6ef372
    d2fc:	510e527f 	.word	0x510e527f
    d300:	0001c598 	.word	0x0001c598

0000d304 <HMAC_init>:
    unsigned int h_opad[8];
    union { limb_t l[64/sizeof(limb_t)]; unsigned char c[64]; } tail;
} HMAC_SHA256_CTX;

static void HMAC_init(HMAC_SHA256_CTX *ctx, const void *K, size_t K_len)
{
    d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d308:	4604      	mov	r4, r0
    size_t i;

    if (K == NULL) {            /* reuse h_ipad and h_opad */
    d30a:	460e      	mov	r6, r1
    d30c:	f100 0870 	add.w	r8, r0, #112	; 0x70
    d310:	b969      	cbnz	r1, d32e <HMAC_init+0x2a>
        sha256_hcopy(ctx->ctx.h, ctx->h_ipad);
    d312:	4641      	mov	r1, r8
    d314:	f00a f84f 	bl	173b6 <blst_sha256_hcopy>
        ctx->ctx.N = 64;
    d318:	2240      	movs	r2, #64	; 0x40
    d31a:	2300      	movs	r3, #0
        vec_zero(ctx->ctx.buf, sizeof(ctx->ctx.buf));
    d31c:	2140      	movs	r1, #64	; 0x40
        ctx->ctx.N = 64;
    d31e:	e9c0 2308 	strd	r2, r3, [r0, #32]
        vec_zero(ctx->ctx.buf, sizeof(ctx->ctx.buf));
    d322:	3028      	adds	r0, #40	; 0x28
    d324:	f008 fdcd 	bl	15ec2 <vec_zero>
        ctx->ctx.off = 0;
    d328:	66a6      	str	r6, [r4, #104]	; 0x68

    vec_zero(ctx->tail.c, sizeof(ctx->tail));
    ctx->tail.c[32] = 0x80;
    ctx->tail.c[62] = 3;        /* (64+32)*8 in big endian */
    ctx->tail.c[63] = 0;
}
    d32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    vec_zero(ctx->tail.c, sizeof(ctx->tail));
    d32e:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
    d332:	2140      	movs	r1, #64	; 0x40
    d334:	4628      	mov	r0, r5
    d336:	f008 fdc4 	bl	15ec2 <vec_zero>
        sha256_bcopy(ctx->tail.c, K, K_len);
    d33a:	4631      	mov	r1, r6
    d33c:	4628      	mov	r0, r5
    d33e:	f00a f8a5 	bl	1748c <blst_sha256_bcopy>
    for (i = 0; i < 64/sizeof(limb_t); i++)
    d342:	462e      	mov	r6, r5
        sha256_bcopy(ctx->tail.c, K, K_len);
    d344:	462b      	mov	r3, r5
    d346:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
        ctx->tail.l[i] ^= (limb_t)0x3636363636363636;
    d34a:	681a      	ldr	r2, [r3, #0]
    d34c:	f082 3236 	eor.w	r2, r2, #909522486	; 0x36363636
    d350:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < 64/sizeof(limb_t); i++)
    d354:	42bb      	cmp	r3, r7
    d356:	d1f8      	bne.n	d34a <HMAC_init+0x46>
    sha256_init(&ctx->ctx);
    d358:	4620      	mov	r0, r4
    d35a:	f7ff f9f9 	bl	c750 <sha256_init>
    sha256_update(&ctx->ctx, ctx->tail.c, 64);
    d35e:	4629      	mov	r1, r5
    d360:	4620      	mov	r0, r4
    d362:	2240      	movs	r2, #64	; 0x40
    d364:	f00a f89b 	bl	1749e <sha256_update>
    sha256_hcopy(ctx->h_ipad, ctx->ctx.h);
    d368:	4621      	mov	r1, r4
    d36a:	4640      	mov	r0, r8
    d36c:	f00a f823 	bl	173b6 <blst_sha256_hcopy>
        ctx->tail.l[i] ^= (limb_t)(0x3636363636363636 ^ 0x5c5c5c5c5c5c5c5c);
    d370:	6833      	ldr	r3, [r6, #0]
    d372:	f083 336a 	eor.w	r3, r3, #1785358954	; 0x6a6a6a6a
    d376:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < 64/sizeof(limb_t); i++)
    d37a:	42be      	cmp	r6, r7
    d37c:	d1f8      	bne.n	d370 <HMAC_init+0x6c>
    h[1] = 0xbb67ae85U;
    d37e:	4a14      	ldr	r2, [pc, #80]	; (d3d0 <HMAC_init+0xcc>)
    d380:	4b14      	ldr	r3, [pc, #80]	; (d3d4 <HMAC_init+0xd0>)
    h[3] = 0xa54ff53aU;
    d382:	4915      	ldr	r1, [pc, #84]	; (d3d8 <HMAC_init+0xd4>)
    h[1] = 0xbb67ae85U;
    d384:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    h[3] = 0xa54ff53aU;
    d388:	4b14      	ldr	r3, [pc, #80]	; (d3dc <HMAC_init+0xd8>)
    h[5] = 0x9b05688cU;
    d38a:	4815      	ldr	r0, [pc, #84]	; (d3e0 <HMAC_init+0xdc>)
    h[3] = 0xa54ff53aU;
    d38c:	e9c4 1326 	strd	r1, r3, [r4, #152]	; 0x98
    h[5] = 0x9b05688cU;
    d390:	4b14      	ldr	r3, [pc, #80]	; (d3e4 <HMAC_init+0xe0>)
    sha256_block_data_order(ctx->h_opad, ctx->tail.c, 1);
    d392:	2201      	movs	r2, #1
    d394:	e9c4 0328 	strd	r0, r3, [r4, #160]	; 0xa0
    h[6] = 0x1f83d9abU;
    d398:	4b13      	ldr	r3, [pc, #76]	; (d3e8 <HMAC_init+0xe4>)
    d39a:	4629      	mov	r1, r5
    d39c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
    h[7] = 0x5be0cd19U;
    d3a0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d3a4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d3a8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d3ac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    d3b0:	f104 0090 	add.w	r0, r4, #144	; 0x90
    d3b4:	f7ff fd48 	bl	ce48 <blst_sha256_block_data_order>
    vec_zero(ctx->tail.c, sizeof(ctx->tail));
    d3b8:	2140      	movs	r1, #64	; 0x40
    d3ba:	4628      	mov	r0, r5
    d3bc:	f008 fd81 	bl	15ec2 <vec_zero>
    ctx->tail.c[32] = 0x80;
    d3c0:	2380      	movs	r3, #128	; 0x80
    d3c2:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
    ctx->tail.c[62] = 3;        /* (64+32)*8 in big endian */
    d3c6:	2303      	movs	r3, #3
    d3c8:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
    d3cc:	e7ad      	b.n	d32a <HMAC_init+0x26>
    d3ce:	bf00      	nop
    d3d0:	6a09e667 	.word	0x6a09e667
    d3d4:	bb67ae85 	.word	0xbb67ae85
    d3d8:	3c6ef372 	.word	0x3c6ef372
    d3dc:	a54ff53a 	.word	0xa54ff53a
    d3e0:	510e527f 	.word	0x510e527f
    d3e4:	9b05688c 	.word	0x9b05688c
    d3e8:	1f83d9ab 	.word	0x1f83d9ab

0000d3ec <blst_keygen>:
}

#ifndef __BLST_HKDF_TESTMODE__
void blst_keygen(pow256 SK, const void *IKM, size_t IKM_len,
                            const void *info, size_t info_len)
{
    d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3f0:	4680      	mov	r8, r0
    d3f2:	b0f3      	sub	sp, #460	; 0x1cc
    d3f4:	af02      	add	r7, sp, #8
    d3f6:	e9c7 3204 	strd	r3, r2, [r7, #16]
    struct {
        HMAC_SHA256_CTX ctx;
        unsigned char PRK[32], OKM[48];
        vec512 key;
    } scratch;
    unsigned char salt[32] = "BLS-SIG-KEYGEN-SALT-";
    d3fa:	4b73      	ldr	r3, [pc, #460]	; (d5c8 <blst_keygen+0x1dc>)
{
    d3fc:	f8d7 41e8 	ldr.w	r4, [r7, #488]	; 0x1e8
    d400:	60b9      	str	r1, [r7, #8]
    unsigned char salt[32] = "BLS-SIG-KEYGEN-SALT-";
    d402:	f107 0220 	add.w	r2, r7, #32
    d406:	f103 0610 	add.w	r6, r3, #16
    d40a:	4615      	mov	r5, r2
    d40c:	6818      	ldr	r0, [r3, #0]
    d40e:	6859      	ldr	r1, [r3, #4]
    d410:	3308      	adds	r3, #8
    d412:	c503      	stmia	r5!, {r0, r1}
    d414:	42b3      	cmp	r3, r6
    d416:	462a      	mov	r2, r5
    d418:	d1f7      	bne.n	d40a <blst_keygen+0x1e>
    d41a:	6818      	ldr	r0, [r3, #0]
    d41c:	791b      	ldrb	r3, [r3, #4]
    d41e:	6028      	str	r0, [r5, #0]
    d420:	712b      	strb	r3, [r5, #4]
    d422:	2300      	movs	r3, #0
    d424:	f8c7 3039 	str.w	r3, [r7, #57]	; 0x39
    d428:	f8c7 3035 	str.w	r3, [r7, #53]	; 0x35
    d42c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t salt_len = 20;

    if (IKM_len < 32) {
    d42e:	697b      	ldr	r3, [r7, #20]
    d430:	2b1f      	cmp	r3, #31
    d432:	d808      	bhi.n	d446 <blst_keygen+0x5a>
        vec_zero(SK, sizeof(pow256));
    d434:	2120      	movs	r1, #32
    d436:	4640      	mov	r0, r8

    /*
     * scrub the stack just in case next callee inadvertently flashes
     * a fragment across application boundary...
     */
    vec_zero(&scratch, sizeof(scratch));
    d438:	f008 fd43 	bl	15ec2 <vec_zero>
}
    d43c:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
    d440:	46bd      	mov	sp, r7
    d442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    info_len = info==NULL ? 0 : info_len;
    d446:	693b      	ldr	r3, [r7, #16]
    size_t salt_len = 20;
    d448:	2514      	movs	r5, #20
    info_len = info==NULL ? 0 : info_len;
    d44a:	2b00      	cmp	r3, #0
    d44c:	bf08      	it	eq
    d44e:	2400      	moveq	r4, #0
    unsigned char info_prime[info_len + 2 + 1];
    d450:	f104 030a 	add.w	r3, r4, #10
    d454:	f023 0307 	bic.w	r3, r3, #7
        redc_mont_256(scratch.key, scratch.key, BLS12_381_r, r0);
    d458:	f8df 9174 	ldr.w	r9, [pc, #372]	; d5d0 <blst_keygen+0x1e4>
    unsigned char info_prime[info_len + 2 + 1];
    d45c:	607b      	str	r3, [r7, #4]
        sha256_init(&scratch.ctx.ctx);
    d45e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d462:	f7ff f975 	bl	c750 <sha256_init>
        sha256_update(&scratch.ctx.ctx, salt, salt_len);
    d466:	462a      	mov	r2, r5
    d468:	f107 0120 	add.w	r1, r7, #32
    d46c:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d470:	f00a f815 	bl	1749e <sha256_update>
        sha256_final(salt, &scratch.ctx.ctx);
    d474:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d478:	f107 0020 	add.w	r0, r7, #32
    d47c:	f009 ffb9 	bl	173f2 <sha256_final>
    HMAC_init(ctx, salt != NULL ? salt : zero, salt_len);
    d480:	2220      	movs	r2, #32
    unsigned char zero[1] = { 0 };
    d482:	2300      	movs	r3, #0
    HMAC_init(ctx, salt != NULL ? salt : zero, salt_len);
    d484:	18b9      	adds	r1, r7, r2
    d486:	f107 0040 	add.w	r0, r7, #64	; 0x40
    unsigned char zero[1] = { 0 };
    d48a:	773b      	strb	r3, [r7, #28]
    HMAC_init(ctx, salt != NULL ? salt : zero, salt_len);
    d48c:	f7ff ff3a 	bl	d304 <HMAC_init>
{   sha256_update(&ctx->ctx, inp, len);   }
    d490:	697a      	ldr	r2, [r7, #20]
    d492:	68b9      	ldr	r1, [r7, #8]
    d494:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d498:	f00a f801 	bl	1749e <sha256_update>
    d49c:	2201      	movs	r2, #1
    d49e:	f107 011c 	add.w	r1, r7, #28
    d4a2:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d4a6:	f009 fffa 	bl	1749e <sha256_update>
    HMAC_final(PRK, ctx);
    d4aa:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d4ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
    d4b2:	f009 ffd4 	bl	1745e <HMAC_final>
    unsigned char info_prime[info_len + 2 + 1];
    d4b6:	687b      	ldr	r3, [r7, #4]
{
    d4b8:	f8c7 d00c 	str.w	sp, [r7, #12]
    HMAC_init(ctx, PRK, 32);
    d4bc:	2220      	movs	r2, #32
    unsigned char info_prime[info_len + 2 + 1];
    d4be:	ebad 0d03 	sub.w	sp, sp, r3
    HMAC_init(ctx, PRK, 32);
    d4c2:	f507 7198 	add.w	r1, r7, #304	; 0x130
    d4c6:	f107 0040 	add.w	r0, r7, #64	; 0x40
    unsigned char info_prime[info_len + 2 + 1];
    d4ca:	f104 0b03 	add.w	fp, r4, #3
    d4ce:	ad02      	add	r5, sp, #8
    HMAC_init(ctx, PRK, 32);
    d4d0:	f7ff ff18 	bl	d304 <HMAC_init>
    if (info_len != 0)
    d4d4:	b124      	cbz	r4, d4e0 <blst_keygen+0xf4>
        sha256_bcopy(info_prime, info, info_len);
    d4d6:	4622      	mov	r2, r4
    d4d8:	4628      	mov	r0, r5
    d4da:	6939      	ldr	r1, [r7, #16]
    d4dc:	f009 ffd6 	bl	1748c <blst_sha256_bcopy>
    info_prime[info_len + 0] = (unsigned char)(L >> 8);
    d4e0:	2300      	movs	r3, #0
    info_prime[info_len + 1] = (unsigned char)(L);
    d4e2:	f04f 0a30 	mov.w	sl, #48	; 0x30
    d4e6:	192a      	adds	r2, r5, r4
    info_prime[info_len + 0] = (unsigned char)(L >> 8);
    d4e8:	552b      	strb	r3, [r5, r4]
    info_prime[info_len + 1] = (unsigned char)(L);
    d4ea:	f882 a001 	strb.w	sl, [r2, #1]
    info_prime[info_len] = 1;   /* counter */
    d4ee:	2201      	movs	r2, #1
    info_len += 2;
    d4f0:	1ca6      	adds	r6, r4, #2
{   sha256_update(&ctx->ctx, inp, len);   }
    d4f2:	4629      	mov	r1, r5
    info_prime[info_len] = 1;   /* counter */
    d4f4:	55aa      	strb	r2, [r5, r6]
{   sha256_update(&ctx->ctx, inp, len);   }
    d4f6:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d4fa:	465a      	mov	r2, fp
    d4fc:	f009 ffcf 	bl	1749e <sha256_update>
    HMAC_final(ctx->tail.c, ctx);
    d500:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d504:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    d508:	f009 ffa9 	bl	1745e <HMAC_final>
        sha256_hcopy((unsigned int *)OKM, (const unsigned int *)ctx->tail.c);
    d50c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    d510:	f507 70a8 	add.w	r0, r7, #336	; 0x150
    d514:	f009 ff4f 	bl	173b6 <blst_sha256_hcopy>
        HMAC_init(ctx, NULL, 0);
    d518:	2300      	movs	r3, #0
        ++info_prime[info_len]; /* counter */
    d51a:	5daa      	ldrb	r2, [r5, r6]
        HMAC_init(ctx, NULL, 0);
    d51c:	4619      	mov	r1, r3
        ++info_prime[info_len]; /* counter */
    d51e:	3201      	adds	r2, #1
    d520:	55aa      	strb	r2, [r5, r6]
        HMAC_init(ctx, NULL, 0);
    d522:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d526:	461a      	mov	r2, r3
    d528:	f7ff feec 	bl	d304 <HMAC_init>
{   sha256_update(&ctx->ctx, inp, len);   }
    d52c:	2220      	movs	r2, #32
    d52e:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    d532:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d536:	f009 ffb2 	bl	1749e <sha256_update>
    d53a:	465a      	mov	r2, fp
    d53c:	4629      	mov	r1, r5
    d53e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d542:	f009 ffac 	bl	1749e <sha256_update>
        HMAC_final(ctx->tail.c, ctx);
    d546:	f107 0140 	add.w	r1, r7, #64	; 0x40
    d54a:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
    d54e:	f009 ff86 	bl	1745e <HMAC_final>
    sha256_bcopy(OKM, ctx->tail.c, L);
    d552:	2210      	movs	r2, #16
    d554:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
    d558:	f507 70b8 	add.w	r0, r7, #368	; 0x170
    d55c:	f009 ff96 	bl	1748c <blst_sha256_bcopy>
        vec_zero(scratch.key, sizeof(scratch.key));
    d560:	2140      	movs	r1, #64	; 0x40
    d562:	f8d7 d00c 	ldr.w	sp, [r7, #12]
    d566:	f507 70c0 	add.w	r0, r7, #384	; 0x180
    d56a:	f008 fcaa 	bl	15ec2 <vec_zero>
        limbs_from_be_bytes(scratch.key, scratch.OKM, sizeof(scratch.OKM));
    d56e:	4652      	mov	r2, sl
    d570:	f507 71a8 	add.w	r1, r7, #336	; 0x150
    d574:	f507 70c0 	add.w	r0, r7, #384	; 0x180
    d578:	f008 fcad 	bl	15ed6 <limbs_from_be_bytes>
        redc_mont_256(scratch.key, scratch.key, BLS12_381_r, r0);
    d57c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
    d580:	4608      	mov	r0, r1
    d582:	f04f 33ff 	mov.w	r3, #4294967295
    d586:	464a      	mov	r2, r9
    d588:	f009 fdd9 	bl	1713e <redc_mont_256>
        mul_mont_sparse_256(scratch.key, scratch.key, BLS12_381_rRR,
    d58c:	f04f 33ff 	mov.w	r3, #4294967295
    d590:	f507 71c0 	add.w	r1, r7, #384	; 0x180
    d594:	4608      	mov	r0, r1
    d596:	4a0d      	ldr	r2, [pc, #52]	; (d5cc <blst_keygen+0x1e0>)
    d598:	9300      	str	r3, [sp, #0]
    d59a:	464b      	mov	r3, r9
    d59c:	f009 fbfa 	bl	16d94 <mul_mont_sparse_256>
    } while (vec_is_zero(scratch.key, sizeof(vec256)));
    d5a0:	2120      	movs	r1, #32
    d5a2:	f507 70c0 	add.w	r0, r7, #384	; 0x180
    d5a6:	f008 fc61 	bl	15e6c <vec_is_zero>
        salt_len = sizeof(salt);
    d5aa:	2520      	movs	r5, #32
    } while (vec_is_zero(scratch.key, sizeof(vec256)));
    d5ac:	2800      	cmp	r0, #0
    d5ae:	f47f af56 	bne.w	d45e <blst_keygen+0x72>
    le_bytes_from_limbs(SK, scratch.key, sizeof(pow256));
    d5b2:	4640      	mov	r0, r8
    d5b4:	f507 71c0 	add.w	r1, r7, #384	; 0x180
    d5b8:	462a      	mov	r2, r5
    d5ba:	f008 fcb3 	bl	15f24 <le_bytes_from_limbs>
    vec_zero(&scratch, sizeof(scratch));
    d5be:	f44f 71c0 	mov.w	r1, #384	; 0x180
    d5c2:	f107 0040 	add.w	r0, r7, #64	; 0x40
    d5c6:	e737      	b.n	d438 <blst_keygen+0x4c>
    d5c8:	0001c2d8 	.word	0x0001c2d8
    d5cc:	0001c828 	.word	0x0001c828
    d5d0:	0001c808 	.word	0x0001c808

0000d5d4 <POINTonE1_double>:
POINT_DOUBLE_IMPL_A0(POINTonE1, 384, fp)
    d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5d8:	460d      	mov	r5, r1
    d5da:	4604      	mov	r4, r0
    d5dc:	b0a4      	sub	sp, #144	; 0x90
    d5de:	f105 0830 	add.w	r8, r5, #48	; 0x30
    d5e2:	4668      	mov	r0, sp
    d5e4:	f7ff f902 	bl	c7ec <sqr_fp>
    d5e8:	4641      	mov	r1, r8
    d5ea:	a80c      	add	r0, sp, #48	; 0x30
    d5ec:	f7ff f8fe 	bl	c7ec <sqr_fp>
    d5f0:	a90c      	add	r1, sp, #48	; 0x30
    d5f2:	a818      	add	r0, sp, #96	; 0x60
    d5f4:	f7ff f8fa 	bl	c7ec <sqr_fp>
    d5f8:	a90c      	add	r1, sp, #48	; 0x30
    d5fa:	462a      	mov	r2, r5
    d5fc:	4608      	mov	r0, r1
    d5fe:	f7ff f95d 	bl	c8bc <add_fp>
    d602:	a90c      	add	r1, sp, #48	; 0x30
    d604:	4608      	mov	r0, r1
    d606:	f7ff f8f1 	bl	c7ec <sqr_fp>
    d60a:	a90c      	add	r1, sp, #48	; 0x30
    d60c:	466a      	mov	r2, sp
    d60e:	4608      	mov	r0, r1
    d610:	f7ff f95a 	bl	c8c8 <sub_fp>
    d614:	a90c      	add	r1, sp, #48	; 0x30
    d616:	4608      	mov	r0, r1
    d618:	aa18      	add	r2, sp, #96	; 0x60
    d61a:	f7ff f955 	bl	c8c8 <sub_fp>
{   mul_by_3_mod_384(ret, a, BLS12_381_P);   }
    d61e:	4e1f      	ldr	r6, [pc, #124]	; (d69c <POINTonE1_double+0xc8>)
    d620:	aa0c      	add	r2, sp, #48	; 0x30
    d622:	4611      	mov	r1, r2
    d624:	4610      	mov	r0, r2
    d626:	f7ff f949 	bl	c8bc <add_fp>
    d62a:	4632      	mov	r2, r6
    d62c:	4669      	mov	r1, sp
    d62e:	4668      	mov	r0, sp
    d630:	f009 fcad 	bl	16f8e <mul_by_3_mod_384>
    d634:	4669      	mov	r1, sp
    d636:	4620      	mov	r0, r4
    d638:	f7ff f8d8 	bl	c7ec <sqr_fp>
    d63c:	4621      	mov	r1, r4
    d63e:	4620      	mov	r0, r4
    d640:	aa0c      	add	r2, sp, #48	; 0x30
    d642:	f7ff f941 	bl	c8c8 <sub_fp>
    d646:	4621      	mov	r1, r4
    d648:	4620      	mov	r0, r4
    d64a:	aa0c      	add	r2, sp, #48	; 0x30
    d64c:	f7ff f93c 	bl	c8c8 <sub_fp>
    d650:	f104 0760 	add.w	r7, r4, #96	; 0x60
    d654:	f105 0260 	add.w	r2, r5, #96	; 0x60
    d658:	4611      	mov	r1, r2
    d65a:	4638      	mov	r0, r7
    d65c:	f7ff f92e 	bl	c8bc <add_fp>
    d660:	4642      	mov	r2, r8
    d662:	4639      	mov	r1, r7
    d664:	4638      	mov	r0, r7
    d666:	f7ff f8a5 	bl	c7b4 <mul_fp>
{   mul_by_8_mod_384(ret, a, BLS12_381_P);   }
    d66a:	a918      	add	r1, sp, #96	; 0x60
    d66c:	f104 0530 	add.w	r5, r4, #48	; 0x30
    d670:	4632      	mov	r2, r6
    d672:	4608      	mov	r0, r1
    d674:	f009 ff59 	bl	1752a <mul_by_8_mod_384>
    d678:	4622      	mov	r2, r4
    d67a:	4628      	mov	r0, r5
    d67c:	a90c      	add	r1, sp, #48	; 0x30
    d67e:	f7ff f923 	bl	c8c8 <sub_fp>
    d682:	466a      	mov	r2, sp
    d684:	4629      	mov	r1, r5
    d686:	4628      	mov	r0, r5
    d688:	f7ff f894 	bl	c7b4 <mul_fp>
    d68c:	4629      	mov	r1, r5
    d68e:	4628      	mov	r0, r5
    d690:	aa18      	add	r2, sp, #96	; 0x60
    d692:	f7ff f919 	bl	c8c8 <sub_fp>
    d696:	b024      	add	sp, #144	; 0x90
    d698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d69c:	0001c538 	.word	0x0001c538

0000d6a0 <POINTonE1_in_G1>:
#endif

static void sigma(POINTonE1 *out, const POINTonE1 *in);

static bool_t POINTonE1_in_G1(const POINTonE1 *P)
{
    d6a0:	b530      	push	{r4, r5, lr}
    d6a2:	4604      	mov	r4, r0
    d6a4:	b0ed      	sub	sp, #436	; 0x1b4
    POINTonE1 t0, t1, t2;

    /* Bowe, S., "Faster subgroup checks for BLS12-381"                   */
    sigma(&t0, P);                        /* σ(P)                         */
    d6a6:	4601      	mov	r1, r0
    d6a8:	4668      	mov	r0, sp
    d6aa:	f7ff f891 	bl	c7d0 <sigma>
    sigma(&t1, &t0);                      /* σ²(P)                        */
    d6ae:	4669      	mov	r1, sp
    d6b0:	a824      	add	r0, sp, #144	; 0x90
    d6b2:	f7ff f88d 	bl	c7d0 <sigma>

    POINTonE1_double(&t0, &t0);           /* 2σ(P)                        */
    d6b6:	4669      	mov	r1, sp
    d6b8:	4668      	mov	r0, sp
    d6ba:	f7ff ff8b 	bl	d5d4 <POINTonE1_double>
    POINTonE1_dadd(&t2, &t1, P, NULL);    /* P +  σ²(P)                   */
    d6be:	4622      	mov	r2, r4
    size_t n = 126-1;
    d6c0:	247d      	movs	r4, #125	; 0x7d
    POINTonE1_dadd(&t2, &t1, P, NULL);    /* P +  σ²(P)                   */
    d6c2:	2300      	movs	r3, #0
    d6c4:	a924      	add	r1, sp, #144	; 0x90
    d6c6:	a848      	add	r0, sp, #288	; 0x120
    d6c8:	f7ff f904 	bl	c8d4 <POINTonE1_dadd>
    POINTonE1_cneg(&t2, 1);               /* - P - σ²(P)                  */
    d6cc:	2101      	movs	r1, #1
    d6ce:	a848      	add	r0, sp, #288	; 0x120
    d6d0:	f009 fc6e 	bl	16fb0 <POINTonE1_cneg>
    POINTonE1_dadd(&t2, &t2, &t0, NULL);  /* 2σ(P) - P - σ²(P)            */
    d6d4:	a948      	add	r1, sp, #288	; 0x120
    d6d6:	4608      	mov	r0, r1
    d6d8:	2300      	movs	r3, #0
    d6da:	466a      	mov	r2, sp
    d6dc:	4d13      	ldr	r5, [pc, #76]	; (d72c <POINTonE1_in_G1+0x8c>)
    d6de:	f7ff f8f9 	bl	c8d4 <POINTonE1_dadd>
    const POINTonE1 *dblin = in;
    d6e2:	a948      	add	r1, sp, #288	; 0x120
    while(n--) {
    d6e4:	3c01      	subs	r4, #1
    d6e6:	d20f      	bcs.n	d708 <POINTonE1_in_G1+0x68>
    POINTonE1_times_zz_minus_1_div_by_3(  &t0, &t2);
    POINTonE1_cneg(&t1, 1);
    d6e8:	a824      	add	r0, sp, #144	; 0x90
    d6ea:	2101      	movs	r1, #1
    d6ec:	f009 fc60 	bl	16fb0 <POINTonE1_cneg>
    POINTonE1_dadd(&t0, &t0, &t1, NULL);  /* [(z²-1)/3](2σ(P) - P - σ²(P)) */
    d6f0:	4669      	mov	r1, sp
    d6f2:	2300      	movs	r3, #0
    d6f4:	4608      	mov	r0, r1
    d6f6:	aa24      	add	r2, sp, #144	; 0x90
    d6f8:	f7ff f8ec 	bl	c8d4 <POINTonE1_dadd>
                                          /* - σ²(P) */
    return vec_is_zero(t0.Z, sizeof(t0.Z));
    d6fc:	2130      	movs	r1, #48	; 0x30
    d6fe:	a818      	add	r0, sp, #96	; 0x60
    d700:	f008 fbb4 	bl	15e6c <vec_is_zero>
}
    d704:	b06d      	add	sp, #436	; 0x1b4
    d706:	bd30      	pop	{r4, r5, pc}
        POINTonE1_double(out, dblin);   dblin = out;
    d708:	4668      	mov	r0, sp
    d70a:	f7ff ff63 	bl	d5d4 <POINTonE1_double>
    d70e:	08e3      	lsrs	r3, r4, #3
    d710:	5ceb      	ldrb	r3, [r5, r3]
    d712:	f004 0207 	and.w	r2, r4, #7
    d716:	4113      	asrs	r3, r2
        if (is_bit_set(zz_minus_1_div_by_3, n))
    d718:	07db      	lsls	r3, r3, #31
    d71a:	d505      	bpl.n	d728 <POINTonE1_in_G1+0x88>
            POINTonE1_dadd(out, out, in, NULL);
    d71c:	2300      	movs	r3, #0
    d71e:	4669      	mov	r1, sp
    d720:	4668      	mov	r0, sp
    d722:	aa48      	add	r2, sp, #288	; 0x120
    d724:	f7ff f8d6 	bl	c8d4 <POINTonE1_dadd>
{
    d728:	4669      	mov	r1, sp
    d72a:	e7db      	b.n	d6e4 <POINTonE1_in_G1+0x44>
    d72c:	0001e107 	.word	0x0001e107

0000d730 <POINTonE1_mult_glv>:

/* Gallant-Lambert-Vanstone, ~24-30% faster than POINTonE1_mult_w5 */
static void POINTonE1_mult_glv(POINTonE1 *out, const POINTonE1 *in,
                               const pow256 SK)
{
    d730:	b5f0      	push	{r4, r5, r6, r7, lr}
    d732:	460e      	mov	r6, r1
    d734:	4604      	mov	r4, r0
    d736:	b0b1      	sub	sp, #196	; 0xc4
    union { vec256 l; pow256 s; } val;

    /* SK/z^2 [in constant time] */

    limbs_from_le_bytes(val.l, SK, 32);
    d738:	ad04      	add	r5, sp, #16
{
    d73a:	4611      	mov	r1, r2
    limbs_from_le_bytes(val.l, SK, 32);
    d73c:	4628      	mov	r0, r5
    d73e:	2220      	movs	r2, #32
    d740:	f008 fbe4 	bl	15f0c <limbs_from_le_bytes>
    div_by_zz(val.l);
    d744:	f7ff fb3c 	bl	cdc0 <div_by_zz>
    {
        const POINTonE1 *points[2];
        const byte *scalars[2];
        POINTonE1 in_sigma[1];

        sigma(in_sigma, in);
    d748:	af0c      	add	r7, sp, #48	; 0x30
    le_bytes_from_limbs(val.s, val.l, 32);
    d74a:	2220      	movs	r2, #32
    d74c:	4629      	mov	r1, r5
    d74e:	4628      	mov	r0, r5
    d750:	f008 fbe8 	bl	15f24 <le_bytes_from_limbs>
        sigma(in_sigma, in);
    d754:	4631      	mov	r1, r6
    d756:	4638      	mov	r0, r7
    d758:	f7ff f83a 	bl	c7d0 <sigma>
        POINTonE1_cneg(in_sigma, 1);
    d75c:	4638      	mov	r0, r7
    d75e:	2101      	movs	r1, #1
    d760:	f009 fc26 	bl	16fb0 <POINTonE1_cneg>
        points[0] = in,         scalars[0] = val.s + 16;
    d764:	ab08      	add	r3, sp, #32
        points[1] = in_sigma,   scalars[1] = val.s;
        POINTonE1s_mult_w4(out, points, 2, scalars, 128, NULL);
    d766:	aa02      	add	r2, sp, #8
    d768:	4669      	mov	r1, sp
    d76a:	4620      	mov	r0, r4
        points[0] = in,         scalars[0] = val.s + 16;
    d76c:	9600      	str	r6, [sp, #0]
        POINTonE1_cneg(out, 1);
        mul_fp(out->Z, out->Z, beta);
    d76e:	4e0d      	ldr	r6, [pc, #52]	; (d7a4 <POINTonE1_mult_glv+0x74>)
        points[1] = in_sigma,   scalars[1] = val.s;
    d770:	e9cd 7301 	strd	r7, r3, [sp, #4]
    d774:	9503      	str	r5, [sp, #12]
        POINTonE1s_mult_w4(out, points, 2, scalars, 128, NULL);
    d776:	f009 ff6e 	bl	17656 <POINTonE1s_mult_w4.constprop.0>
        POINTonE1_cneg(out, 1);
    d77a:	4620      	mov	r0, r4
    d77c:	2101      	movs	r1, #1
        mul_fp(out->Z, out->Z, beta);
    d77e:	3460      	adds	r4, #96	; 0x60
        POINTonE1_cneg(out, 1);
    d780:	f009 fc16 	bl	16fb0 <POINTonE1_cneg>
        mul_fp(out->Z, out->Z, beta);
    d784:	4632      	mov	r2, r6
    d786:	4621      	mov	r1, r4
    d788:	4620      	mov	r0, r4
    d78a:	f7ff f813 	bl	c7b4 <mul_fp>
        mul_fp(out->Z, out->Z, beta);
    d78e:	4632      	mov	r2, r6
    d790:	4621      	mov	r1, r4
    d792:	4620      	mov	r0, r4
    d794:	f7ff f80e 	bl	c7b4 <mul_fp>
    }

    vec_zero(val.l, sizeof(val));   /* scrub the copy of SK */
    d798:	2120      	movs	r1, #32
    d79a:	4628      	mov	r0, r5
    d79c:	f008 fb91 	bl	15ec2 <vec_zero>
}
    d7a0:	b031      	add	sp, #196	; 0xc4
    d7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7a4:	0001cb10 	.word	0x0001cb10

0000d7a8 <POINTonE1_sign>:

static void POINTonE1_sign(POINTonE1 *out, const POINTonE1 *in, const pow256 SK)
{
    d7a8:	b570      	push	{r4, r5, r6, lr}
    d7aa:	4604      	mov	r4, r0
    d7ac:	b09a      	sub	sp, #104	; 0x68
    limb_t inf;

    POINTonE1_mult_glv(out, in, SK);

    /* convert to affine to remove possible bias in out->Z */
    inf = vec_is_zero(out->Z, sizeof(out->Z));
    d7ae:	f104 0560 	add.w	r5, r4, #96	; 0x60
    POINTonE1_mult_glv(out, in, SK);
    d7b2:	f7ff ffbd 	bl	d730 <POINTonE1_mult_glv>
    inf = vec_is_zero(out->Z, sizeof(out->Z));
    d7b6:	2130      	movs	r1, #48	; 0x30
    d7b8:	4628      	mov	r0, r5
    d7ba:	f008 fb57 	bl	15e6c <vec_is_zero>
    d7be:	4606      	mov	r6, r0
#ifndef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
    flt_reciprocal_fp(Z, out->Z);                       /* 1/Z   */
    d7c0:	4629      	mov	r1, r5
    d7c2:	a802      	add	r0, sp, #8
    d7c4:	f7ff f872 	bl	c8ac <flt_reciprocal_fp>
#else
    reciprocal_fp(Z, out->Z);                           /* 1/Z   */
#endif

    sqr_fp(ZZ, Z);
    d7c8:	a902      	add	r1, sp, #8
    d7ca:	a80e      	add	r0, sp, #56	; 0x38
    d7cc:	f7ff f80e 	bl	c7ec <sqr_fp>
    mul_fp(out->X, out->X, ZZ);                         /* X = X/Z^2 */
    d7d0:	4621      	mov	r1, r4
    d7d2:	4620      	mov	r0, r4
    d7d4:	aa0e      	add	r2, sp, #56	; 0x38
    d7d6:	f7fe ffed 	bl	c7b4 <mul_fp>

    mul_fp(ZZ, ZZ, Z);
    d7da:	a90e      	add	r1, sp, #56	; 0x38
    d7dc:	4608      	mov	r0, r1
    d7de:	aa02      	add	r2, sp, #8
    d7e0:	f7fe ffe8 	bl	c7b4 <mul_fp>
    mul_fp(out->Y, out->Y, ZZ);                         /* Y = Y/Z^3 */
    d7e4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    d7e8:	4608      	mov	r0, r1
    d7ea:	aa0e      	add	r2, sp, #56	; 0x38
    d7ec:	f7fe ffe2 	bl	c7b4 <mul_fp>

    vec_select(out->Z, out->Z, BLS12_381_G1.Z, sizeof(BLS12_381_G1.Z),
    d7f0:	2330      	movs	r3, #48	; 0x30
    d7f2:	4629      	mov	r1, r5
    d7f4:	4628      	mov	r0, r5
    d7f6:	4a03      	ldr	r2, [pc, #12]	; (d804 <POINTonE1_sign+0x5c>)
    d7f8:	9600      	str	r6, [sp, #0]
    d7fa:	f008 fb20 	bl	15e3e <vec_select>
                       inf);                            /* Z = inf ? 0 : 1 */
}
    d7fe:	b01a      	add	sp, #104	; 0x68
    d800:	bd70      	pop	{r4, r5, r6, pc}
    d802:	bf00      	nop
    d804:	0001c3e8 	.word	0x0001c3e8

0000d808 <blst_sk_to_pk_in_g1>:

void blst_sk_to_pk_in_g1(POINTonE1 *out, const pow256 SK)
{   POINTonE1_sign(out, &BLS12_381_G1, SK);   }
    d808:	460a      	mov	r2, r1
    d80a:	4901      	ldr	r1, [pc, #4]	; (d810 <blst_sk_to_pk_in_g1+0x8>)
    d80c:	f7ff bfcc 	b.w	d7a8 <POINTonE1_sign>
    d810:	0001c388 	.word	0x0001c388

0000d814 <mul_by_3_fp2>:
{   mul_by_3_mod_384x(ret, a, BLS12_381_P);   }
    d814:	4a01      	ldr	r2, [pc, #4]	; (d81c <mul_by_3_fp2+0x8>)
    d816:	f009 bfba 	b.w	1778e <mul_by_3_mod_384x>
    d81a:	bf00      	nop
    d81c:	0001c538 	.word	0x0001c538

0000d820 <mul_by_u_plus_1_fp2>:
{   mul_by_1_plus_i_mod_384x(ret, a, BLS12_381_P);   }
    d820:	4a01      	ldr	r2, [pc, #4]	; (d828 <mul_by_u_plus_1_fp2+0x8>)
    d822:	f009 bfd0 	b.w	177c6 <mul_by_1_plus_i_mod_384x>
    d826:	bf00      	nop
    d828:	0001c538 	.word	0x0001c538

0000d82c <add_fp2>:
{   add_mod_384x(ret, a, b, BLS12_381_P);   }
    d82c:	4b01      	ldr	r3, [pc, #4]	; (d834 <add_fp2+0x8>)
    d82e:	f009 bfe3 	b.w	177f8 <add_mod_384x>
    d832:	bf00      	nop
    d834:	0001c538 	.word	0x0001c538

0000d838 <sub_fp2>:
{   sub_mod_384x(ret, a, b, BLS12_381_P);   }
    d838:	4b01      	ldr	r3, [pc, #4]	; (d840 <sub_fp2+0x8>)
    d83a:	f00a b820 	b.w	1787e <sub_mod_384x>
    d83e:	bf00      	nop
    d840:	0001c538 	.word	0x0001c538

0000d844 <sqr_fp2>:
{   sqr_mont_384x(ret, a, BLS12_381_P, p0);   }
    d844:	4b01      	ldr	r3, [pc, #4]	; (d84c <sqr_fp2+0x8>)
    d846:	4a02      	ldr	r2, [pc, #8]	; (d850 <sqr_fp2+0xc>)
    d848:	f00a ba09 	b.w	17c5e <sqr_mont_384x>
    d84c:	fffcfffd 	.word	0xfffcfffd
    d850:	0001c538 	.word	0x0001c538

0000d854 <POINTonE2_from_Jacobian>:
{
    d854:	b5f0      	push	{r4, r5, r6, r7, lr}
    limb_t inf = vec_is_zero(in->Z, sizeof(in->Z));
    d856:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
{
    d85a:	b0b3      	sub	sp, #204	; 0xcc
    d85c:	4604      	mov	r4, r0
    d85e:	460d      	mov	r5, r1
    limb_t inf = vec_is_zero(in->Z, sizeof(in->Z));
    d860:	4630      	mov	r0, r6
    d862:	2160      	movs	r1, #96	; 0x60
    d864:	f008 fb02 	bl	15e6c <vec_is_zero>
    d868:	4607      	mov	r7, r0
    reciprocal_fp2(Z, in->Z);                           /* 1/Z */
    d86a:	4631      	mov	r1, r6
    d86c:	a802      	add	r0, sp, #8
    d86e:	f009 fd37 	bl	172e0 <reciprocal_fp2>
    sqr_fp2(ZZ, Z);
    d872:	a902      	add	r1, sp, #8
    d874:	a81a      	add	r0, sp, #104	; 0x68
    d876:	f7ff ffe5 	bl	d844 <sqr_fp2>
    mul_fp2(out->X, in->X, ZZ);                         /* X = X/Z^2 */
    d87a:	4629      	mov	r1, r5
    d87c:	4620      	mov	r0, r4
    d87e:	aa1a      	add	r2, sp, #104	; 0x68
    d880:	f7ff f958 	bl	cb34 <mul_fp2>
    mul_fp2(ZZ, ZZ, Z);
    d884:	a91a      	add	r1, sp, #104	; 0x68
    d886:	4608      	mov	r0, r1
    d888:	aa02      	add	r2, sp, #8
    d88a:	f7ff f953 	bl	cb34 <mul_fp2>
    mul_fp2(out->Y, in->Y, ZZ);                         /* Y = Y/Z^3 */
    d88e:	aa1a      	add	r2, sp, #104	; 0x68
    d890:	f105 0160 	add.w	r1, r5, #96	; 0x60
    d894:	f104 0060 	add.w	r0, r4, #96	; 0x60
    d898:	f7ff f94c 	bl	cb34 <mul_fp2>
    vec_select(out->Z, in->Z, BLS12_381_G2.Z,
    d89c:	2360      	movs	r3, #96	; 0x60
    d89e:	4631      	mov	r1, r6
    d8a0:	4a03      	ldr	r2, [pc, #12]	; (d8b0 <POINTonE2_from_Jacobian+0x5c>)
    d8a2:	9700      	str	r7, [sp, #0]
    d8a4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d8a8:	f008 fac9 	bl	15e3e <vec_select>
}
    d8ac:	b033      	add	sp, #204	; 0xcc
    d8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8b0:	0001c4d8 	.word	0x0001c4d8

0000d8b4 <POINTonE2_to_affine>:
{
    d8b4:	b530      	push	{r4, r5, lr}
    d8b6:	460c      	mov	r4, r1
    d8b8:	4605      	mov	r5, r0
    d8ba:	b0c9      	sub	sp, #292	; 0x124
    if (!vec_is_equal(in->Z, BLS12_381_Rx.p2, sizeof(in->Z))) {
    d8bc:	2260      	movs	r2, #96	; 0x60
    d8be:	4909      	ldr	r1, [pc, #36]	; (d8e4 <POINTonE2_to_affine+0x30>)
    d8c0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d8c4:	f008 fadf 	bl	15e86 <vec_is_equal>
    d8c8:	b920      	cbnz	r0, d8d4 <POINTonE2_to_affine+0x20>
        POINTonE2_from_Jacobian(&p, in);
    d8ca:	4621      	mov	r1, r4
    d8cc:	4668      	mov	r0, sp
    d8ce:	f7ff ffc1 	bl	d854 <POINTonE2_from_Jacobian>
        in = &p;
    d8d2:	466c      	mov	r4, sp
    vec_copy(out, in, sizeof(*out));
    d8d4:	22c0      	movs	r2, #192	; 0xc0
    d8d6:	4621      	mov	r1, r4
    d8d8:	4628      	mov	r0, r5
    d8da:	f008 fae6 	bl	15eaa <vec_copy>
}
    d8de:	b049      	add	sp, #292	; 0x124
    d8e0:	bd30      	pop	{r4, r5, pc}
    d8e2:	bf00      	nop
    d8e4:	0001c5c8 	.word	0x0001c5c8

0000d8e8 <POINTonE2_Compress_BE>:
{
    d8e8:	b530      	push	{r4, r5, lr}
    d8ea:	460c      	mov	r4, r1
    d8ec:	4605      	mov	r5, r0
    d8ee:	b0c9      	sub	sp, #292	; 0x124
    if (!vec_is_equal(in->Z, BLS12_381_Rx.p, sizeof(in->Z))) {
    d8f0:	2260      	movs	r2, #96	; 0x60
    d8f2:	4908      	ldr	r1, [pc, #32]	; (d914 <POINTonE2_Compress_BE+0x2c>)
    d8f4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    d8f8:	f008 fac5 	bl	15e86 <vec_is_equal>
    d8fc:	b920      	cbnz	r0, d908 <POINTonE2_Compress_BE+0x20>
        POINTonE2_from_Jacobian(&p, in);
    d8fe:	4621      	mov	r1, r4
    d900:	4668      	mov	r0, sp
    d902:	f7ff ffa7 	bl	d854 <POINTonE2_from_Jacobian>
        in = &p;
    d906:	466c      	mov	r4, sp
    return POINTonE2_affine_Compress_BE(out, (const POINTonE2_affine *)in);
    d908:	4621      	mov	r1, r4
    d90a:	4628      	mov	r0, r5
    d90c:	f7ff f8f0 	bl	caf0 <POINTonE2_affine_Compress_BE>
}
    d910:	b049      	add	sp, #292	; 0x124
    d912:	bd30      	pop	{r4, r5, pc}
    d914:	0001c5c8 	.word	0x0001c5c8

0000d918 <sqrt_align_fp2>:
int blst_fp_sqrt(vec384 out, const vec384 inp)
{   return (int)sqrt_fp(out, inp);   }

static bool_t sqrt_align_fp2(vec384x out, const vec384x ret,
                             const vec384x sqrt, const vec384x inp)
{
    d918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d91c:	461f      	mov	r7, r3
    d91e:	b0cb      	sub	sp, #300	; 0x12c
    d920:	4680      	mov	r8, r0
    d922:	4689      	mov	r9, r1
    /*
     * Instead of multiple trial squarings we can perform just one
     * and see if the result is "rotated by multiple of 90°" in
     * relation to |inp|, and "rotate" |ret| accordingly.
     */
    sqr_fp2(t0, sqrt);
    d924:	a81a      	add	r0, sp, #104	; 0x68
    d926:	4611      	mov	r1, r2
    d928:	f7ff ff8c 	bl	d844 <sqr_fp2>
    /* "sqrt(|inp|)"^2 = (a + b*i)^2 = (a^2-b^2) + 2ab*i */

    /* (a^2-b^2) + 2ab*i == |inp| ? |ret| is spot on */
    sub_fp2(t1, t0, inp);
    d92c:	463a      	mov	r2, r7
    d92e:	a91a      	add	r1, sp, #104	; 0x68
    d930:	a832      	add	r0, sp, #200	; 0xc8
    d932:	f7ff ff81 	bl	d838 <sub_fp2>
    is_sqrt = vec_is_zero(t1, sizeof(t1));
    d936:	2160      	movs	r1, #96	; 0x60
    d938:	a832      	add	r0, sp, #200	; 0xc8
    d93a:	f008 fa97 	bl	15e6c <vec_is_zero>
    vec_copy(coeff, BLS12_381_Rx.p2, sizeof(coeff));
    d93e:	2260      	movs	r2, #96	; 0x60
    is_sqrt = vec_is_zero(t1, sizeof(t1));
    d940:	4606      	mov	r6, r0
    vec_copy(coeff, BLS12_381_Rx.p2, sizeof(coeff));
    d942:	4927      	ldr	r1, [pc, #156]	; (d9e0 <sqrt_align_fp2+0xc8>)
    d944:	a802      	add	r0, sp, #8
    d946:	f008 fab0 	bl	15eaa <vec_copy>

    /* -(a^2-b^2) - 2ab*i == |inp| ? "rotate |ret| by 90°" */
    add_fp2(t1, t0, inp);
    d94a:	463a      	mov	r2, r7
    d94c:	a91a      	add	r1, sp, #104	; 0x68
    d94e:	a832      	add	r0, sp, #200	; 0xc8
    d950:	f7ff ff6c 	bl	d82c <add_fp2>
    vec_select(coeff, sqrt_minus_1, coeff, sizeof(coeff),
               flag = vec_is_zero(t1, sizeof(t1)));
    d954:	2160      	movs	r1, #96	; 0x60
    d956:	a832      	add	r0, sp, #200	; 0xc8
    d958:	f008 fa88 	bl	15e6c <vec_is_zero>
    d95c:	4605      	mov	r5, r0
    vec_select(coeff, sqrt_minus_1, coeff, sizeof(coeff),
    d95e:	aa02      	add	r2, sp, #8
    d960:	2360      	movs	r3, #96	; 0x60
    d962:	9000      	str	r0, [sp, #0]
    is_sqrt |= flag;
    d964:	4335      	orrs	r5, r6
    vec_select(coeff, sqrt_minus_1, coeff, sizeof(coeff),
    d966:	4610      	mov	r0, r2

    /* 2ab - (a^2-b^2)*i == |inp| ? "rotate |ret| by 135°" */
    sub_fp(t1[0], t0[0], inp[1]);
    d968:	f107 0630 	add.w	r6, r7, #48	; 0x30
    vec_select(coeff, sqrt_minus_1, coeff, sizeof(coeff),
    d96c:	491d      	ldr	r1, [pc, #116]	; (d9e4 <sqrt_align_fp2+0xcc>)
    d96e:	f008 fa66 	bl	15e3e <vec_select>
    sub_fp(t1[0], t0[0], inp[1]);
    d972:	4632      	mov	r2, r6
    d974:	a91a      	add	r1, sp, #104	; 0x68
    d976:	a832      	add	r0, sp, #200	; 0xc8
    d978:	f7fe ffa6 	bl	c8c8 <sub_fp>
    add_fp(t1[1], t0[1], inp[0]);
    d97c:	463a      	mov	r2, r7
    d97e:	a926      	add	r1, sp, #152	; 0x98
    d980:	a83e      	add	r0, sp, #248	; 0xf8
    d982:	f7fe ff9b 	bl	c8bc <add_fp>
    vec_select(coeff, sqrt_sqrt_minus_1, coeff, sizeof(coeff),
               flag = vec_is_zero(t1, sizeof(t1)));
    d986:	2160      	movs	r1, #96	; 0x60
    d988:	a832      	add	r0, sp, #200	; 0xc8
    d98a:	f008 fa6f 	bl	15e6c <vec_is_zero>
    vec_select(coeff, sqrt_sqrt_minus_1, coeff, sizeof(coeff),
    d98e:	aa02      	add	r2, sp, #8
    d990:	2360      	movs	r3, #96	; 0x60
    d992:	9000      	str	r0, [sp, #0]
               flag = vec_is_zero(t1, sizeof(t1)));
    d994:	4604      	mov	r4, r0
    vec_select(coeff, sqrt_sqrt_minus_1, coeff, sizeof(coeff),
    d996:	4914      	ldr	r1, [pc, #80]	; (d9e8 <sqrt_align_fp2+0xd0>)
    d998:	4610      	mov	r0, r2
    d99a:	f008 fa50 	bl	15e3e <vec_select>
    is_sqrt |= flag;

    /* -2ab + (a^2-b^2)*i == |inp| ? "rotate |ret| by 45°" */
    add_fp(t1[0], t0[0], inp[1]);
    d99e:	4632      	mov	r2, r6
    d9a0:	a91a      	add	r1, sp, #104	; 0x68
    d9a2:	a832      	add	r0, sp, #200	; 0xc8
    d9a4:	f7fe ff8a 	bl	c8bc <add_fp>
    sub_fp(t1[1], t0[1], inp[0]);
    d9a8:	463a      	mov	r2, r7
    d9aa:	a926      	add	r1, sp, #152	; 0x98
    d9ac:	a83e      	add	r0, sp, #248	; 0xf8
    d9ae:	f7fe ff8b 	bl	c8c8 <sub_fp>
    vec_select(coeff, sqrt_minus_sqrt_minus_1, coeff, sizeof(coeff),
               flag = vec_is_zero(t1, sizeof(t1)));
    d9b2:	2160      	movs	r1, #96	; 0x60
    d9b4:	a832      	add	r0, sp, #200	; 0xc8
    d9b6:	f008 fa59 	bl	15e6c <vec_is_zero>
    is_sqrt |= flag;
    d9ba:	432c      	orrs	r4, r5
               flag = vec_is_zero(t1, sizeof(t1)));
    d9bc:	4605      	mov	r5, r0
    vec_select(coeff, sqrt_minus_sqrt_minus_1, coeff, sizeof(coeff),
    d9be:	aa02      	add	r2, sp, #8
    d9c0:	2360      	movs	r3, #96	; 0x60
    d9c2:	9000      	str	r0, [sp, #0]
    d9c4:	4909      	ldr	r1, [pc, #36]	; (d9ec <sqrt_align_fp2+0xd4>)
    d9c6:	4610      	mov	r0, r2
    d9c8:	f008 fa39 	bl	15e3e <vec_select>
    is_sqrt |= flag;
    d9cc:	432c      	orrs	r4, r5

    /* actual "rotation" */
    mul_fp2(out, ret, coeff);
    d9ce:	4640      	mov	r0, r8
    d9d0:	4649      	mov	r1, r9
    d9d2:	aa02      	add	r2, sp, #8
    d9d4:	f7ff f8ae 	bl	cb34 <mul_fp2>

    return is_sqrt;
}
    d9d8:	4620      	mov	r0, r4
    d9da:	b04b      	add	sp, #300	; 0x12c
    d9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d9e0:	0001c5c8 	.word	0x0001c5c8
    d9e4:	0001d4d0 	.word	0x0001d4d0
    d9e8:	0001d590 	.word	0x0001d590
    d9ec:	0001d530 	.word	0x0001d530

0000d9f0 <POINTonE2_dadd_affine>:
POINT_DADD_AFFINE_IMPL_A0(POINTonE2, 384x, fp2, BLS12_381_Rx.p2)
    d9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9f4:	460d      	mov	r5, r1
    d9f6:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
    d9fa:	4680      	mov	r8, r0
    d9fc:	21c0      	movs	r1, #192	; 0xc0
    d9fe:	4610      	mov	r0, r2
    da00:	4614      	mov	r4, r2
    da02:	f008 fa33 	bl	15e6c <vec_is_zero>
    da06:	4622      	mov	r2, r4
    da08:	4681      	mov	r9, r0
    da0a:	4621      	mov	r1, r4
    da0c:	a8c2      	add	r0, sp, #776	; 0x308
    da0e:	f7ff ff0d 	bl	d82c <add_fp2>
    da12:	4621      	mov	r1, r4
    da14:	a8aa      	add	r0, sp, #680	; 0x2a8
    da16:	f7ff ff15 	bl	d844 <sqr_fp2>
    da1a:	a9aa      	add	r1, sp, #680	; 0x2a8
    da1c:	f104 0a60 	add.w	sl, r4, #96	; 0x60
    da20:	4608      	mov	r0, r1
    da22:	f7ff fef7 	bl	d814 <mul_by_3_fp2>
    da26:	f105 06c0 	add.w	r6, r5, #192	; 0xc0
    da2a:	4652      	mov	r2, sl
    da2c:	4651      	mov	r1, sl
    da2e:	a892      	add	r0, sp, #584	; 0x248
    da30:	f7ff fefc 	bl	d82c <add_fp2>
    da34:	2160      	movs	r1, #96	; 0x60
    da36:	4630      	mov	r0, r6
    da38:	f008 fa18 	bl	15e6c <vec_is_zero>
    da3c:	4631      	mov	r1, r6
    da3e:	4607      	mov	r7, r0
    da40:	a84a      	add	r0, sp, #296	; 0x128
    da42:	f7ff feff 	bl	d844 <sqr_fp2>
    da46:	4632      	mov	r2, r6
    da48:	a94a      	add	r1, sp, #296	; 0x128
    da4a:	a862      	add	r0, sp, #392	; 0x188
    da4c:	f7ff f872 	bl	cb34 <mul_fp2>
    da50:	a962      	add	r1, sp, #392	; 0x188
    da52:	4652      	mov	r2, sl
    da54:	4608      	mov	r0, r1
    da56:	f7ff f86d 	bl	cb34 <mul_fp2>
    da5a:	a962      	add	r1, sp, #392	; 0x188
    da5c:	4608      	mov	r0, r1
    da5e:	f105 0260 	add.w	r2, r5, #96	; 0x60
    da62:	f7ff fee9 	bl	d838 <sub_fp2>
    da66:	a94a      	add	r1, sp, #296	; 0x128
    da68:	4622      	mov	r2, r4
    da6a:	4608      	mov	r0, r1
    da6c:	f7ff f862 	bl	cb34 <mul_fp2>
    da70:	462a      	mov	r2, r5
    da72:	a94a      	add	r1, sp, #296	; 0x128
    da74:	a87a      	add	r0, sp, #488	; 0x1e8
    da76:	f7ff fed9 	bl	d82c <add_fp2>
    da7a:	a94a      	add	r1, sp, #296	; 0x128
    da7c:	462a      	mov	r2, r5
    da7e:	4608      	mov	r0, r1
    da80:	f7ff feda 	bl	d838 <sub_fp2>
    da84:	4632      	mov	r2, r6
    da86:	a94a      	add	r1, sp, #296	; 0x128
    da88:	a832      	add	r0, sp, #200	; 0xc8
    da8a:	f7ff f853 	bl	cb34 <mul_fp2>
    da8e:	21c0      	movs	r1, #192	; 0xc0
    da90:	a84a      	add	r0, sp, #296	; 0x128
    da92:	f008 f9eb 	bl	15e6c <vec_is_zero>
    da96:	4606      	mov	r6, r0
    da98:	462a      	mov	r2, r5
    da9a:	4621      	mov	r1, r4
    da9c:	9000      	str	r0, [sp, #0]
    da9e:	23c0      	movs	r3, #192	; 0xc0
    daa0:	a802      	add	r0, sp, #8
    daa2:	f008 f9cc 	bl	15e3e <vec_select>
    daa6:	aa32      	add	r2, sp, #200	; 0xc8
    daa8:	4610      	mov	r0, r2
    daaa:	a992      	add	r1, sp, #584	; 0x248
    daac:	2360      	movs	r3, #96	; 0x60
    daae:	9600      	str	r6, [sp, #0]
    dab0:	f008 f9c5 	bl	15e3e <vec_select>
    dab4:	aa4a      	add	r2, sp, #296	; 0x128
    dab6:	f44f 7390 	mov.w	r3, #288	; 0x120
    daba:	4610      	mov	r0, r2
    dabc:	a992      	add	r1, sp, #584	; 0x248
    dabe:	9600      	str	r6, [sp, #0]
    dac0:	f008 f9bd 	bl	15e3e <vec_select>
    dac4:	a94a      	add	r1, sp, #296	; 0x128
    dac6:	a892      	add	r0, sp, #584	; 0x248
    dac8:	f7ff febc 	bl	d844 <sqr_fp2>
    dacc:	aa4a      	add	r2, sp, #296	; 0x128
    dace:	a992      	add	r1, sp, #584	; 0x248
    dad0:	a8aa      	add	r0, sp, #680	; 0x2a8
    dad2:	f7ff f82f 	bl	cb34 <mul_fp2>
    dad6:	a9aa      	add	r1, sp, #680	; 0x2a8
    dad8:	4608      	mov	r0, r1
    dada:	aa1a      	add	r2, sp, #104	; 0x68
    dadc:	f7ff f82a 	bl	cb34 <mul_fp2>
    dae0:	aa02      	add	r2, sp, #8
    dae2:	a992      	add	r1, sp, #584	; 0x248
    dae4:	a81a      	add	r0, sp, #104	; 0x68
    dae6:	f7ff f825 	bl	cb34 <mul_fp2>
    daea:	a992      	add	r1, sp, #584	; 0x248
    daec:	aa7a      	add	r2, sp, #488	; 0x1e8
    daee:	4608      	mov	r0, r1
    daf0:	f7ff f820 	bl	cb34 <mul_fp2>
    daf4:	a962      	add	r1, sp, #392	; 0x188
    daf6:	a802      	add	r0, sp, #8
    daf8:	f7ff fea4 	bl	d844 <sqr_fp2>
    dafc:	a902      	add	r1, sp, #8
    dafe:	4608      	mov	r0, r1
    db00:	aa92      	add	r2, sp, #584	; 0x248
    db02:	f7ff fe99 	bl	d838 <sub_fp2>
    db06:	a91a      	add	r1, sp, #104	; 0x68
    db08:	4608      	mov	r0, r1
    db0a:	aa02      	add	r2, sp, #8
    db0c:	f7ff fe94 	bl	d838 <sub_fp2>
    db10:	a91a      	add	r1, sp, #104	; 0x68
    db12:	4608      	mov	r0, r1
    db14:	aa62      	add	r2, sp, #392	; 0x188
    db16:	f7ff f80d 	bl	cb34 <mul_fp2>
    db1a:	a91a      	add	r1, sp, #104	; 0x68
    db1c:	4608      	mov	r0, r1
    db1e:	aaaa      	add	r2, sp, #680	; 0x2a8
    db20:	f7ff fe8a 	bl	d838 <sub_fp2>
    db24:	aa02      	add	r2, sp, #8
    db26:	4621      	mov	r1, r4
    db28:	4610      	mov	r0, r2
    db2a:	23c0      	movs	r3, #192	; 0xc0
    db2c:	9700      	str	r7, [sp, #0]
    db2e:	f008 f986 	bl	15e3e <vec_select>
    db32:	aa32      	add	r2, sp, #200	; 0xc8
    db34:	4610      	mov	r0, r2
    db36:	2360      	movs	r3, #96	; 0x60
    db38:	4908      	ldr	r1, [pc, #32]	; (db5c <POINTonE2_dadd_affine+0x16c>)
    db3a:	9700      	str	r7, [sp, #0]
    db3c:	f008 f97f 	bl	15e3e <vec_select>
    db40:	f44f 7390 	mov.w	r3, #288	; 0x120
    db44:	4629      	mov	r1, r5
    db46:	4640      	mov	r0, r8
    db48:	f8cd 9000 	str.w	r9, [sp]
    db4c:	aa02      	add	r2, sp, #8
    db4e:	f008 f976 	bl	15e3e <vec_select>
    db52:	f50d 7d5a 	add.w	sp, sp, #872	; 0x368
    db56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    db5a:	bf00      	nop
    db5c:	0001c5c8 	.word	0x0001c5c8

0000db60 <POINTonE2_double>:
POINT_DOUBLE_IMPL_A0(POINTonE2, 384x, fp2)
    db60:	b5f0      	push	{r4, r5, r6, r7, lr}
    db62:	460d      	mov	r5, r1
    db64:	4604      	mov	r4, r0
    db66:	b0c9      	sub	sp, #292	; 0x124
    db68:	f105 0760 	add.w	r7, r5, #96	; 0x60
    db6c:	4668      	mov	r0, sp
    db6e:	f7ff fe69 	bl	d844 <sqr_fp2>
    db72:	4639      	mov	r1, r7
    db74:	a818      	add	r0, sp, #96	; 0x60
    db76:	f7ff fe65 	bl	d844 <sqr_fp2>
    db7a:	a918      	add	r1, sp, #96	; 0x60
    db7c:	a830      	add	r0, sp, #192	; 0xc0
    db7e:	f7ff fe61 	bl	d844 <sqr_fp2>
    db82:	a918      	add	r1, sp, #96	; 0x60
    db84:	462a      	mov	r2, r5
    db86:	4608      	mov	r0, r1
    db88:	f7ff fe50 	bl	d82c <add_fp2>
    db8c:	a918      	add	r1, sp, #96	; 0x60
    db8e:	4608      	mov	r0, r1
    db90:	f7ff fe58 	bl	d844 <sqr_fp2>
    db94:	a918      	add	r1, sp, #96	; 0x60
    db96:	466a      	mov	r2, sp
    db98:	4608      	mov	r0, r1
    db9a:	f7ff fe4d 	bl	d838 <sub_fp2>
    db9e:	a918      	add	r1, sp, #96	; 0x60
    dba0:	4608      	mov	r0, r1
    dba2:	aa30      	add	r2, sp, #192	; 0xc0
    dba4:	f7ff fe48 	bl	d838 <sub_fp2>
    dba8:	aa18      	add	r2, sp, #96	; 0x60
    dbaa:	4611      	mov	r1, r2
    dbac:	4610      	mov	r0, r2
    dbae:	f7ff fe3d 	bl	d82c <add_fp2>
    dbb2:	4669      	mov	r1, sp
    dbb4:	4668      	mov	r0, sp
    dbb6:	f7ff fe2d 	bl	d814 <mul_by_3_fp2>
    dbba:	4669      	mov	r1, sp
    dbbc:	4620      	mov	r0, r4
    dbbe:	f7ff fe41 	bl	d844 <sqr_fp2>
    dbc2:	4621      	mov	r1, r4
    dbc4:	4620      	mov	r0, r4
    dbc6:	aa18      	add	r2, sp, #96	; 0x60
    dbc8:	f7ff fe36 	bl	d838 <sub_fp2>
    dbcc:	4621      	mov	r1, r4
    dbce:	4620      	mov	r0, r4
    dbd0:	aa18      	add	r2, sp, #96	; 0x60
    dbd2:	f7ff fe31 	bl	d838 <sub_fp2>
    dbd6:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
    dbda:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
    dbde:	4611      	mov	r1, r2
    dbe0:	4630      	mov	r0, r6
    dbe2:	f7ff fe23 	bl	d82c <add_fp2>
    dbe6:	463a      	mov	r2, r7
    dbe8:	4631      	mov	r1, r6
    dbea:	4630      	mov	r0, r6
    dbec:	f7fe ffa2 	bl	cb34 <mul_fp2>
{   mul_by_8_mod_384x(ret, a, BLS12_381_P);   }
    dbf0:	a930      	add	r1, sp, #192	; 0xc0
    dbf2:	f104 0560 	add.w	r5, r4, #96	; 0x60
    dbf6:	4608      	mov	r0, r1
    dbf8:	4a09      	ldr	r2, [pc, #36]	; (dc20 <POINTonE2_double+0xc0>)
    dbfa:	f009 fdd7 	bl	177ac <mul_by_8_mod_384x>
    dbfe:	4622      	mov	r2, r4
    dc00:	4628      	mov	r0, r5
    dc02:	a918      	add	r1, sp, #96	; 0x60
    dc04:	f7ff fe18 	bl	d838 <sub_fp2>
    dc08:	466a      	mov	r2, sp
    dc0a:	4629      	mov	r1, r5
    dc0c:	4628      	mov	r0, r5
    dc0e:	f7fe ff91 	bl	cb34 <mul_fp2>
    dc12:	4629      	mov	r1, r5
    dc14:	4628      	mov	r0, r5
    dc16:	aa30      	add	r2, sp, #192	; 0xc0
    dc18:	f7ff fe0e 	bl	d838 <sub_fp2>
    dc1c:	b049      	add	sp, #292	; 0x124
    dc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc20:	0001c538 	.word	0x0001c538

0000dc24 <POINTonE2_sign>:

    vec_zero(val.l, sizeof(val));   /* scrub the copy of SK */
}

static void POINTonE2_sign(POINTonE2 *out, const POINTonE2 *in, const pow256 SK)
{
    dc24:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc26:	4604      	mov	r4, r0
    dc28:	b0bf      	sub	sp, #252	; 0xfc
    limb_t inf;

    POINTonE2_mult_gls(out, in, SK);

    /* convert to affine to remove possible bias in out->Z */
    inf = vec_is_zero(out->Z, sizeof(out->Z));
    dc2a:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
    POINTonE2_mult_gls(out, in, SK);
    dc2e:	f00a fb7a 	bl	18326 <POINTonE2_mult_gls>
    inf = vec_is_zero(out->Z, sizeof(out->Z));
    dc32:	2160      	movs	r1, #96	; 0x60
    dc34:	4628      	mov	r0, r5
    dc36:	f008 f919 	bl	15e6c <vec_is_zero>
    dc3a:	4606      	mov	r6, r0
    sqr_fp(t0, inp[0]);
    dc3c:	4629      	mov	r1, r5
    dc3e:	a802      	add	r0, sp, #8
    sqr_fp(t1, inp[1]);
    dc40:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    sqr_fp(t0, inp[0]);
    dc44:	f7fe fdd2 	bl	c7ec <sqr_fp>
    sqr_fp(t1, inp[1]);
    dc48:	4639      	mov	r1, r7
    dc4a:	a826      	add	r0, sp, #152	; 0x98
    dc4c:	f7fe fdce 	bl	c7ec <sqr_fp>
    add_fp(t0, t0, t1);
    dc50:	a902      	add	r1, sp, #8
    dc52:	aa26      	add	r2, sp, #152	; 0x98
    dc54:	4608      	mov	r0, r1
    dc56:	f7fe fe31 	bl	c8bc <add_fp>
    flt_reciprocal_fp(t1, t0);
    dc5a:	a902      	add	r1, sp, #8
    dc5c:	a826      	add	r0, sp, #152	; 0x98
    dc5e:	f7fe fe25 	bl	c8ac <flt_reciprocal_fp>
    mul_fp(out[0], inp[0], t1);
    dc62:	4629      	mov	r1, r5
    dc64:	aa26      	add	r2, sp, #152	; 0x98
    dc66:	a80e      	add	r0, sp, #56	; 0x38
    dc68:	f7fe fda4 	bl	c7b4 <mul_fp>
    mul_fp(out[1], inp[1], t1);
    dc6c:	4639      	mov	r1, r7
    dc6e:	aa26      	add	r2, sp, #152	; 0x98
    dc70:	a81a      	add	r0, sp, #104	; 0x68
    dc72:	f7fe fd9f 	bl	c7b4 <mul_fp>
    neg_fp(out[1], out[1]);
    dc76:	a91a      	add	r1, sp, #104	; 0x68
    dc78:	2201      	movs	r2, #1
    dc7a:	4608      	mov	r0, r1
    dc7c:	f7fe fefc 	bl	ca78 <cneg_fp>
    flt_reciprocal_fp2(Z, out->Z);                      /* 1/Z   */
#else
    reciprocal_fp2(Z, out->Z);                          /* 1/Z   */
#endif

    sqr_fp2(ZZ, Z);
    dc80:	a90e      	add	r1, sp, #56	; 0x38
    dc82:	a826      	add	r0, sp, #152	; 0x98
    dc84:	f7ff fdde 	bl	d844 <sqr_fp2>
    mul_fp2(out->X, out->X, ZZ);                        /* X = X/Z^2 */
    dc88:	4621      	mov	r1, r4
    dc8a:	4620      	mov	r0, r4
    dc8c:	aa26      	add	r2, sp, #152	; 0x98
    dc8e:	f7fe ff51 	bl	cb34 <mul_fp2>

    mul_fp2(ZZ, ZZ, Z);
    dc92:	a926      	add	r1, sp, #152	; 0x98
    dc94:	4608      	mov	r0, r1
    dc96:	aa0e      	add	r2, sp, #56	; 0x38
    dc98:	f7fe ff4c 	bl	cb34 <mul_fp2>
    mul_fp2(out->Y, out->Y, ZZ);                        /* Y = Y/Z^3 */
    dc9c:	f104 0160 	add.w	r1, r4, #96	; 0x60
    dca0:	4608      	mov	r0, r1
    dca2:	aa26      	add	r2, sp, #152	; 0x98
    dca4:	f7fe ff46 	bl	cb34 <mul_fp2>

    vec_select(out->Z, out->Z, BLS12_381_G2.Z, sizeof(BLS12_381_G2.Z),
    dca8:	2360      	movs	r3, #96	; 0x60
    dcaa:	4629      	mov	r1, r5
    dcac:	4628      	mov	r0, r5
    dcae:	4a03      	ldr	r2, [pc, #12]	; (dcbc <POINTonE2_sign+0x98>)
    dcb0:	9600      	str	r6, [sp, #0]
    dcb2:	f008 f8c4 	bl	15e3e <vec_select>
                       inf);                            /* Z = inf ? 0 : 1 */
}
    dcb6:	b03f      	add	sp, #252	; 0xfc
    dcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcba:	bf00      	nop
    dcbc:	0001c4d8 	.word	0x0001c4d8

0000dcc0 <map_to_isogenous_E2>:
    mul_fp2(out->Y, out->Y, xd);
    mul_fp2(out->Y, out->Y, yn);        /* Y = yn * xd^3 * yd^2         */
}

static void map_to_isogenous_E2(POINTonE2 *p, const vec384x u)
{
    dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcc4:	4605      	mov	r5, r0
    dcc6:	f5ad 7d66 	sub.w	sp, sp, #920	; 0x398
     * as per map_to_curve() from poc/sswu_opt.sage at
     * https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve
     * with 9mod16 twists...
     */
    /* x numerator variants                                             */
    sqr_fp2(uu, u);                     /* uu = u^2                     */
    dcca:	a83e      	add	r0, sp, #248	; 0xf8
{
    dccc:	468a      	mov	sl, r1
    sqr_fp2(uu, u);                     /* uu = u^2                     */
    dcce:	f7ff fdb9 	bl	d844 <sqr_fp2>
    mul_fp2(Zuu, Z, uu);                /* Zuu = Z * uu                 */
    dcd2:	aa3e      	add	r2, sp, #248	; 0xf8
    dcd4:	a886      	add	r0, sp, #536	; 0x218
    dcd6:	4993      	ldr	r1, [pc, #588]	; (df24 <map_to_isogenous_E2+0x264>)
    dcd8:	f7fe ff2c 	bl	cb34 <mul_fp2>
    sqr_fp2(tv2, Zuu);                  /* tv2 = Zuu^2                  */
    dcdc:	a986      	add	r1, sp, #536	; 0x218
    dcde:	a856      	add	r0, sp, #344	; 0x158
    dce0:	f7ff fdb0 	bl	d844 <sqr_fp2>
    add_fp2(tv2, tv2, Zuu);             /* tv2 = tv2 + Zuu              */
    dce4:	a956      	add	r1, sp, #344	; 0x158
    dce6:	4608      	mov	r0, r1
    add_fp2(x1n, tv2, BLS12_381_Rx.p2); /* x1n = tv2 + 1                */
    mul_fp2(x1n, x1n, Bprime_E2);       /* x1n = x1n * B                */
    dce8:	4c8f      	ldr	r4, [pc, #572]	; (df28 <map_to_isogenous_E2+0x268>)
    add_fp2(tv2, tv2, Zuu);             /* tv2 = tv2 + Zuu              */
    dcea:	aa86      	add	r2, sp, #536	; 0x218
    dcec:	f7ff fd9e 	bl	d82c <add_fp2>
    add_fp2(x1n, tv2, BLS12_381_Rx.p2); /* x1n = tv2 + 1                */
    dcf0:	4628      	mov	r0, r5
    dcf2:	a956      	add	r1, sp, #344	; 0x158
    dcf4:	4a8d      	ldr	r2, [pc, #564]	; (df2c <map_to_isogenous_E2+0x26c>)
    dcf6:	f7ff fd99 	bl	d82c <add_fp2>
    mul_fp2(x1n, x1n, Bprime_E2);       /* x1n = x1n * B                */
    dcfa:	4622      	mov	r2, r4
    dcfc:	4629      	mov	r1, r5
    dcfe:	4628      	mov	r0, r5
    dd00:	f7fe ff18 	bl	cb34 <mul_fp2>
    mul_fp2(x2n, Zuu, x1n);             /* x2n = Zuu * x1n              */
    dd04:	a986      	add	r1, sp, #536	; 0x218

    /* x denumenator                                                    */
    mul_fp2(xd, minus_A, tv2);          /* xd = -A * tv2                */
    dd06:	f105 06c0 	add.w	r6, r5, #192	; 0xc0
    mul_fp2(x2n, Zuu, x1n);             /* x2n = Zuu * x1n              */
    dd0a:	462a      	mov	r2, r5
    dd0c:	4608      	mov	r0, r1
    dd0e:	f7fe ff11 	bl	cb34 <mul_fp2>
    mul_fp2(xd, minus_A, tv2);          /* xd = -A * tv2                */
    dd12:	aa56      	add	r2, sp, #344	; 0x158
    dd14:	4630      	mov	r0, r6
    dd16:	4986      	ldr	r1, [pc, #536]	; (df30 <map_to_isogenous_E2+0x270>)
    dd18:	f7fe ff0c 	bl	cb34 <mul_fp2>
    e1 = vec_is_zero(xd, sizeof(xd));   /* e1 = xd == 0                 */
    dd1c:	2160      	movs	r1, #96	; 0x60
    dd1e:	4630      	mov	r0, r6
    dd20:	f008 f8a4 	bl	15e6c <vec_is_zero>
    vec_select(xd, ZxA, xd, sizeof(xd), e1);    /*              # If xd == 0, set xd = Z*A */
    dd24:	2360      	movs	r3, #96	; 0x60
    dd26:	4632      	mov	r2, r6
    dd28:	9000      	str	r0, [sp, #0]
    dd2a:	4982      	ldr	r1, [pc, #520]	; (df34 <map_to_isogenous_E2+0x274>)
    dd2c:	4630      	mov	r0, r6
    dd2e:	f008 f886 	bl	15e3e <vec_select>

    /* y numerators variants                                            */
    sqr_fp2(tv2, xd);                   /* tv2 = xd^2                   */
    dd32:	4631      	mov	r1, r6
    dd34:	a856      	add	r0, sp, #344	; 0x158
    dd36:	f7ff fd85 	bl	d844 <sqr_fp2>
    mul_fp2(gxd, xd, tv2);              /* gxd = xd^3                   */
    dd3a:	4631      	mov	r1, r6
    dd3c:	aa56      	add	r2, sp, #344	; 0x158
    dd3e:	a8b6      	add	r0, sp, #728	; 0x2d8
    dd40:	f7fe fef8 	bl	cb34 <mul_fp2>
    mul_fp2(tv2, Aprime_E2, tv2);       /* tv2 = A * tv2                */
    dd44:	aa56      	add	r2, sp, #344	; 0x158
    dd46:	4610      	mov	r0, r2
    dd48:	497b      	ldr	r1, [pc, #492]	; (df38 <map_to_isogenous_E2+0x278>)
    dd4a:	f7fe fef3 	bl	cb34 <mul_fp2>
    sqr_fp2(gx1, x1n);                  /* gx1 = x1n^2                  */
    dd4e:	4629      	mov	r1, r5
    dd50:	a89e      	add	r0, sp, #632	; 0x278
    dd52:	f7ff fd77 	bl	d844 <sqr_fp2>
    add_fp2(gx1, gx1, tv2);             /* gx1 = gx1 + tv2      # x1n^2 + A*xd^2 */
    dd56:	a99e      	add	r1, sp, #632	; 0x278
    dd58:	4608      	mov	r0, r1
    dd5a:	aa56      	add	r2, sp, #344	; 0x158
    dd5c:	f7ff fd66 	bl	d82c <add_fp2>
    mul_fp2(gx1, gx1, x1n);             /* gx1 = gx1 * x1n      # x1n^3 + A*x1n*xd^2 */
    dd60:	a99e      	add	r1, sp, #632	; 0x278
    dd62:	462a      	mov	r2, r5
    dd64:	4608      	mov	r0, r1
    dd66:	f7fe fee5 	bl	cb34 <mul_fp2>
    mul_fp2(tv2, Bprime_E2, gxd);       /* tv2 = B * gxd                */
    dd6a:	4621      	mov	r1, r4
    dd6c:	aab6      	add	r2, sp, #728	; 0x2d8
    dd6e:	a856      	add	r0, sp, #344	; 0x158
    dd70:	f7fe fee0 	bl	cb34 <mul_fp2>
    add_fp2(gx1, gx1, tv2);             /* gx1 = gx1 + tv2      # x1^3 + A*x1*xd^2 + B*xd^3 */
    dd74:	a99e      	add	r1, sp, #632	; 0x278
    dd76:	aa56      	add	r2, sp, #344	; 0x158
    dd78:	4608      	mov	r0, r1
    dd7a:	f7ff fd57 	bl	d82c <add_fp2>
    sqr_fp2(tv4, gxd);                  /* tv4 = gxd^2                  */
    dd7e:	a9b6      	add	r1, sp, #728	; 0x2d8
    dd80:	a86e      	add	r0, sp, #440	; 0x1b8
    dd82:	f7ff fd5f 	bl	d844 <sqr_fp2>
    mul_fp2(tv2, gx1, gxd);             /* tv2 = gx1 * gxd              */
    dd86:	aab6      	add	r2, sp, #728	; 0x2d8
    dd88:	a99e      	add	r1, sp, #632	; 0x278
    dd8a:	a856      	add	r0, sp, #344	; 0x158
    dd8c:	f7fe fed2 	bl	cb34 <mul_fp2>
    mul_fp2(tv4, tv4, tv2);             /* tv4 = tv4 * tv2      # gx1*gxd^3 */
    dd90:	a96e      	add	r1, sp, #440	; 0x1b8
    dd92:	aa56      	add	r2, sp, #344	; 0x158
    dd94:	4608      	mov	r0, r1
    dd96:	f7fe fecd 	bl	cb34 <mul_fp2>
{
    vec384 aa, bb, cc;
    vec384x inp_;
    bool_t is_sqrt;

    sqr_fp(aa, inp[0]);
    dd9a:	a96e      	add	r1, sp, #440	; 0x1b8
    dd9c:	a802      	add	r0, sp, #8
    dd9e:	f7fe fd25 	bl	c7ec <sqr_fp>
    sqr_fp(bb, inp[1]);
    dda2:	a97a      	add	r1, sp, #488	; 0x1e8
    dda4:	a80e      	add	r0, sp, #56	; 0x38
    dda6:	f7fe fd21 	bl	c7ec <sqr_fp>
    add_fp(aa, aa, bb);
    ddaa:	a902      	add	r1, sp, #8
    ddac:	aa0e      	add	r2, sp, #56	; 0x38
    ddae:	4608      	mov	r0, r1
    ddb0:	f7fe fd84 	bl	c8bc <add_fp>

    is_sqrt = recip_sqrt_fp(cc, aa);  /* 1/sqrt(a²+b²)                    */
    ddb4:	a902      	add	r1, sp, #8
    ddb6:	a81a      	add	r0, sp, #104	; 0x68
    ddb8:	f7fe fd54 	bl	c864 <recip_sqrt_fp>
    ddbc:	4607      	mov	r7, r0
    mul_fp2(inp_, inp, recip_ZZZ);
    /* ... and adjust |aa| and |cc| accordingly                           */
    {
        vec384 za, zc;

        mul_fp(za, aa, magic_ZZZ[0]); /* aa*(za² + zb²)                   */
    ddbe:	f8df 8180 	ldr.w	r8, [pc, #384]	; df40 <map_to_isogenous_E2+0x280>
    mul_fp2(inp_, inp, recip_ZZZ);
    ddc2:	a96e      	add	r1, sp, #440	; 0x1b8
    ddc4:	a8ce      	add	r0, sp, #824	; 0x338
    ddc6:	4a5d      	ldr	r2, [pc, #372]	; (df3c <map_to_isogenous_E2+0x27c>)
    ddc8:	f7fe feb4 	bl	cb34 <mul_fp2>
        mul_fp(za, aa, magic_ZZZ[0]); /* aa*(za² + zb²)                   */
    ddcc:	4642      	mov	r2, r8
    ddce:	a902      	add	r1, sp, #8
    ddd0:	a826      	add	r0, sp, #152	; 0x98
    ddd2:	f7fe fcef 	bl	c7b4 <mul_fp>
        mul_fp(zc, cc, magic_ZZZ[1]); /* cc*(za² + zb²)^((p-3)/4)         */
    ddd6:	f108 0230 	add.w	r2, r8, #48	; 0x30
    ddda:	a91a      	add	r1, sp, #104	; 0x68
    dddc:	a832      	add	r0, sp, #200	; 0xc8
    ddde:	f7fe fce9 	bl	c7b4 <mul_fp>
        vec_select(aa, aa, za, sizeof(aa), is_sqrt);
    dde2:	a902      	add	r1, sp, #8
    dde4:	4608      	mov	r0, r1
    dde6:	9700      	str	r7, [sp, #0]
    dde8:	aa26      	add	r2, sp, #152	; 0x98
    ddea:	2330      	movs	r3, #48	; 0x30
    ddec:	f008 f827 	bl	15e3e <vec_select>
        vec_select(cc, cc, zc, sizeof(cc), is_sqrt);
    ddf0:	a91a      	add	r1, sp, #104	; 0x68
    ddf2:	4608      	mov	r0, r1
    ddf4:	9700      	str	r7, [sp, #0]
    ddf6:	aa32      	add	r2, sp, #200	; 0xc8
    ddf8:	2330      	movs	r3, #48	; 0x30
    ddfa:	f008 f820 	bl	15e3e <vec_select>
    }
    vec_select(inp_, inp, inp_, sizeof(inp_), is_sqrt);
    ddfe:	aace      	add	r2, sp, #824	; 0x338
    de00:	2360      	movs	r3, #96	; 0x60
    de02:	4610      	mov	r0, r2
    de04:	9700      	str	r7, [sp, #0]
    de06:	a96e      	add	r1, sp, #440	; 0x1b8
    de08:	f008 f819 	bl	15e3e <vec_select>

    mul_fp(aa, aa, cc);               /* sqrt(a²+b²)                      */
    de0c:	a902      	add	r1, sp, #8
    de0e:	4608      	mov	r0, r1
    de10:	aa1a      	add	r2, sp, #104	; 0x68
    de12:	f7fe fccf 	bl	c7b4 <mul_fp>

    sub_fp(bb, inp_[0], aa);
    de16:	aa02      	add	r2, sp, #8
    de18:	a9ce      	add	r1, sp, #824	; 0x338
    de1a:	a80e      	add	r0, sp, #56	; 0x38
    de1c:	f7fe fd54 	bl	c8c8 <sub_fp>
    add_fp(aa, inp_[0], aa);
    de20:	aa02      	add	r2, sp, #8
    de22:	4610      	mov	r0, r2
    de24:	a9ce      	add	r1, sp, #824	; 0x338
    de26:	f7fe fd49 	bl	c8bc <add_fp>
    vec_select(aa, bb, aa, sizeof(aa), vec_is_zero(aa, sizeof(aa)));
    de2a:	2130      	movs	r1, #48	; 0x30
    de2c:	a802      	add	r0, sp, #8
    de2e:	f008 f81d 	bl	15e6c <vec_is_zero>
    de32:	aa02      	add	r2, sp, #8
    de34:	2330      	movs	r3, #48	; 0x30
{   div_by_2_mod_384(ret, a, BLS12_381_P);   }
    de36:	f8df 910c 	ldr.w	r9, [pc, #268]	; df44 <map_to_isogenous_E2+0x284>
    de3a:	9000      	str	r0, [sp, #0]
    de3c:	a90e      	add	r1, sp, #56	; 0x38
    de3e:	4610      	mov	r0, r2
    de40:	f007 fffd 	bl	15e3e <vec_select>
    de44:	a902      	add	r1, sp, #8
    e2 = recip_sqrt_fp2(y1, tv4,        /* y1 = tv4^c1          # (gx1*gxd^3)^((p^2-9)/16) */
    de46:	f105 0460 	add.w	r4, r5, #96	; 0x60
    de4a:	464a      	mov	r2, r9
    de4c:	4608      	mov	r0, r1
    div_by_2_fp(aa, aa);              /* (a ± sqrt(a²+b²))/2              */

    /* if it says "no sqrt," final "align" will find right one...         */
    (void)recip_sqrt_fp(out[0], aa);  /* 1/sqrt((a ± sqrt(a²+b²))/2)      */

    div_by_2_fp(out[1], inp_[1]);
    de4e:	f105 0890 	add.w	r8, r5, #144	; 0x90
    de52:	f009 f982 	bl	1715a <div_by_2_mod_384>
    (void)recip_sqrt_fp(out[0], aa);  /* 1/sqrt((a ± sqrt(a²+b²))/2)      */
    de56:	a902      	add	r1, sp, #8
    de58:	4620      	mov	r0, r4
    de5a:	f7fe fd03 	bl	c864 <recip_sqrt_fp>
    de5e:	4640      	mov	r0, r8
    de60:	464a      	mov	r2, r9
    de62:	a9da      	add	r1, sp, #872	; 0x368
    de64:	f009 f979 	bl	1715a <div_by_2_mod_384>
    mul_fp(out[1], out[1], out[0]);   /* b/(2*sqrt((a ± sqrt(a²+b²))/2))  */
    de68:	4622      	mov	r2, r4
    de6a:	4641      	mov	r1, r8
    de6c:	f7fe fca2 	bl	c7b4 <mul_fp>
    mul_fp(out[0], out[0], aa);       /* sqrt((a ± sqrt(a²+b²))/2)        */
    de70:	4621      	mov	r1, r4
    de72:	4620      	mov	r0, r4
    de74:	aa02      	add	r2, sp, #8
    de76:	f7fe fc9d 	bl	c7b4 <mul_fp>

    /* bound to succeed                                                   */
    (void)sqrt_align_fp2(out, out, out, inp_);
    de7a:	abce      	add	r3, sp, #824	; 0x338
    de7c:	4622      	mov	r2, r4
    de7e:	4621      	mov	r1, r4
    de80:	4620      	mov	r0, r4
    de82:	f7ff fd49 	bl	d918 <sqrt_align_fp2>

    mul_fp(out[0], out[0], cc);       /* inverse the result               */
    de86:	4621      	mov	r1, r4
    de88:	4620      	mov	r0, r4
    de8a:	aa1a      	add	r2, sp, #104	; 0x68
    de8c:	f7fe fc92 	bl	c7b4 <mul_fp>
    mul_fp(out[1], out[1], cc);
    de90:	4641      	mov	r1, r8
    de92:	4640      	mov	r0, r8
    de94:	aa1a      	add	r2, sp, #104	; 0x68
    de96:	f7fe fc8d 	bl	c7b4 <mul_fp>
    neg_fp(out[1], out[1]);
    de9a:	4641      	mov	r1, r8
    de9c:	4640      	mov	r0, r8
    de9e:	2201      	movs	r2, #1
    dea0:	f7fe fdea 	bl	ca78 <cneg_fp>
                        recip_ZZZ, magic_ZZZ);
    mul_fp2(y1, y1, tv2);               /* y1 = y1 * tv2        # gx1*gxd*y1 */
    dea4:	4621      	mov	r1, r4
    dea6:	4620      	mov	r0, r4
    dea8:	aa56      	add	r2, sp, #344	; 0x158
    deaa:	f7fe fe43 	bl	cb34 <mul_fp2>
    mul_fp2(y2, y1, uu);                /* y2 = y1 * uu                 */
    deae:	4621      	mov	r1, r4
    deb0:	aa3e      	add	r2, sp, #248	; 0xf8
    deb2:	a8ce      	add	r0, sp, #824	; 0x338
    deb4:	f7fe fe3e 	bl	cb34 <mul_fp2>
    mul_fp2(y2, y2, u);                 /* y2 = y2 * u                  */
    deb8:	a9ce      	add	r1, sp, #824	; 0x338
    deba:	4652      	mov	r2, sl
    debc:	4608      	mov	r0, r1
    debe:	f7fe fe39 	bl	cb34 <mul_fp2>

    /* choose numerators                                                */
    vec_select(xn, x1n, x2n, sizeof(xn), e2);   /* xn = e2 ? x1n : x2n  */
    vec_select(y, y1, y2, sizeof(y), e2);       /* y  = e2 ? y1 : y2    */

    e1 = sgn0_fp2(u);
    dec2:	f8df 8084 	ldr.w	r8, [pc, #132]	; df48 <map_to_isogenous_E2+0x288>
    vec_select(xn, x1n, x2n, sizeof(xn), e2);   /* xn = e2 ? x1n : x2n  */
    dec6:	4629      	mov	r1, r5
    dec8:	4628      	mov	r0, r5
    deca:	9700      	str	r7, [sp, #0]
    decc:	aa86      	add	r2, sp, #536	; 0x218
    dece:	2360      	movs	r3, #96	; 0x60
    ded0:	f007 ffb5 	bl	15e3e <vec_select>
    vec_select(y, y1, y2, sizeof(y), e2);       /* y  = e2 ? y1 : y2    */
    ded4:	2360      	movs	r3, #96	; 0x60
    ded6:	4621      	mov	r1, r4
    ded8:	4620      	mov	r0, r4
    deda:	9700      	str	r7, [sp, #0]
    dedc:	aace      	add	r2, sp, #824	; 0x338
    dede:	f007 ffae 	bl	15e3e <vec_select>
    e1 = sgn0_fp2(u);
    dee2:	4642      	mov	r2, r8
    dee4:	4649      	mov	r1, r9
    dee6:	4650      	mov	r0, sl
    dee8:	f009 f97c 	bl	171e4 <sgn0_pty_mont_384x>
    e2 = sgn0_fp2(y);
    deec:	4642      	mov	r2, r8
    e1 = sgn0_fp2(u);
    deee:	4607      	mov	r7, r0
    e2 = sgn0_fp2(y);
    def0:	4649      	mov	r1, r9
    def2:	4620      	mov	r0, r4
    def4:	f009 f976 	bl	171e4 <sgn0_pty_mont_384x>
    cneg_fp2(y, y, e1^e2);              /* fix sign of y                */
    def8:	ea87 0200 	eor.w	r2, r7, r0
    defc:	4621      	mov	r1, r4
    defe:	4620      	mov	r0, r4
    df00:	f002 0201 	and.w	r2, r2, #1
    df04:	f7fe fdbe 	bl	ca84 <cneg_fp2>
                                        /* return (xn, xd, y, 1)        */

    /* convert (xn, xd, y, 1) to Jacobian projective coordinates        */
    mul_fp2(p->X, xn, xd);              /* X = xn * xd                  */
    df08:	4632      	mov	r2, r6
    df0a:	4629      	mov	r1, r5
    df0c:	4628      	mov	r0, r5
    df0e:	f7fe fe11 	bl	cb34 <mul_fp2>
    mul_fp2(p->Y, y, gxd);              /* Y = y * xd^3                 */
    df12:	4621      	mov	r1, r4
    df14:	4620      	mov	r0, r4
    df16:	aab6      	add	r2, sp, #728	; 0x2d8
    df18:	f7fe fe0c 	bl	cb34 <mul_fp2>
# undef y1
# undef Zuu
# undef tv4
#endif
#undef sgn0_fp2
}
    df1c:	f50d 7d66 	add.w	sp, sp, #920	; 0x398
    df20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df24:	0001c9d8 	.word	0x0001c9d8
    df28:	0001c848 	.word	0x0001c848
    df2c:	0001c5c8 	.word	0x0001c5c8
    df30:	0001d410 	.word	0x0001d410
    df34:	0001ca38 	.word	0x0001ca38
    df38:	0001c328 	.word	0x0001c328
    df3c:	0001d470 	.word	0x0001d470
    df40:	0001d3b0 	.word	0x0001d3b0
    df44:	0001c538 	.word	0x0001c538
    df48:	fffcfffd 	.word	0xfffcfffd

0000df4c <map_to_g2>:

/*
 * |u|, |v| are expected to be in Montgomery representation
 */
static void map_to_g2(POINTonE2 *out, const vec384x u, const vec384x v)
{
    df4c:	b530      	push	{r4, r5, lr}
    df4e:	4615      	mov	r5, r2
    df50:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
    df54:	4604      	mov	r4, r0
    POINTonE2 p;

    map_to_isogenous_E2(&p, u);
    df56:	a860      	add	r0, sp, #384	; 0x180
    df58:	f7ff feb2 	bl	dcc0 <map_to_isogenous_E2>

    if (v != NULL) {
    df5c:	b14d      	cbz	r5, df72 <map_to_g2+0x26>
        map_to_isogenous_E2(out, v);    /* borrow |out|                 */
    df5e:	4629      	mov	r1, r5
    df60:	4620      	mov	r0, r4
    df62:	f7ff fead 	bl	dcc0 <map_to_isogenous_E2>
        POINTonE2_dadd(&p, &p, out, Aprime_E2);
    df66:	a960      	add	r1, sp, #384	; 0x180
    df68:	4622      	mov	r2, r4
    df6a:	4608      	mov	r0, r1
    df6c:	4b6a      	ldr	r3, [pc, #424]	; (e118 <map_to_g2+0x1cc>)
    df6e:	f009 ff78 	bl	17e62 <POINTonE2_dadd>
    sqr_fp2(Zz_powers[2], p->Z);                       /* ZZ^1          */
    df72:	a990      	add	r1, sp, #576	; 0x240
    df74:	a8d8      	add	r0, sp, #864	; 0x360
    df76:	f7ff fc65 	bl	d844 <sqr_fp2>
    sqr_fp2(Zz_powers[1], Zz_powers[2]);               /* ZZ^2  1+1     */
    df7a:	a9d8      	add	r1, sp, #864	; 0x360
    df7c:	a8c0      	add	r0, sp, #768	; 0x300
    df7e:	f7ff fc61 	bl	d844 <sqr_fp2>
    mul_fp2(Zz_powers[0], Zz_powers[2], Zz_powers[1]); /* ZZ^3  2+1     */
    df82:	aac0      	add	r2, sp, #768	; 0x300
    df84:	a9d8      	add	r1, sp, #864	; 0x360
    df86:	a8a8      	add	r0, sp, #672	; 0x2a0
    df88:	f7fe fdd4 	bl	cb34 <mul_fp2>
    map_fp2_times_Zz(map, isogeny_map_x_num, Zz_powers, 3);
    df8c:	2303      	movs	r3, #3
    df8e:	aaa8      	add	r2, sp, #672	; 0x2a0
    df90:	a8f0      	add	r0, sp, #960	; 0x3c0
    df92:	4962      	ldr	r1, [pc, #392]	; (e11c <map_to_g2+0x1d0>)
    df94:	f009 f98c 	bl	172b0 <map_fp2_times_Zz>
    mul_fp2(xn, p->X, isogeny_map_x_num[3]);
    df98:	4668      	mov	r0, sp
    df9a:	a960      	add	r1, sp, #384	; 0x180
    df9c:	4a60      	ldr	r2, [pc, #384]	; (e120 <map_to_g2+0x1d4>)
    df9e:	f7fe fdc9 	bl	cb34 <mul_fp2>
    add_fp2(xn, xn, map[2]);
    dfa2:	4669      	mov	r1, sp
    dfa4:	4668      	mov	r0, sp
    dfa6:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    dfaa:	f7ff fc3f 	bl	d82c <add_fp2>
    map_fp2(xn, p->X, map, 2);
    dfae:	4668      	mov	r0, sp
    dfb0:	aaf0      	add	r2, sp, #960	; 0x3c0
    dfb2:	a960      	add	r1, sp, #384	; 0x180
    dfb4:	2302      	movs	r3, #2
    dfb6:	f009 fc32 	bl	1781e <map_fp2>
    map_fp2_times_Zz(map, isogeny_map_x_den, Zz_powers + 1, 2);
    dfba:	2302      	movs	r3, #2
    dfbc:	aac0      	add	r2, sp, #768	; 0x300
    dfbe:	a8f0      	add	r0, sp, #960	; 0x3c0
    dfc0:	4958      	ldr	r1, [pc, #352]	; (e124 <map_to_g2+0x1d8>)
    dfc2:	f009 f975 	bl	172b0 <map_fp2_times_Zz>
    add_fp2(xd, p->X, map[1]);
    dfc6:	f50d 6284 	add.w	r2, sp, #1056	; 0x420
    dfca:	a960      	add	r1, sp, #384	; 0x180
    dfcc:	a818      	add	r0, sp, #96	; 0x60
    dfce:	f7ff fc2d 	bl	d82c <add_fp2>
    map_fp2(xd, p->X, map, 1);
    dfd2:	2301      	movs	r3, #1
    dfd4:	aaf0      	add	r2, sp, #960	; 0x3c0
    dfd6:	a960      	add	r1, sp, #384	; 0x180
    dfd8:	a818      	add	r0, sp, #96	; 0x60
    dfda:	f009 fc20 	bl	1781e <map_fp2>
    mul_fp2(xd, xd, Zz_powers[2]);      /* xd *= Z^2                    */
    dfde:	a918      	add	r1, sp, #96	; 0x60
    dfe0:	4608      	mov	r0, r1
    dfe2:	aad8      	add	r2, sp, #864	; 0x360
    dfe4:	f7fe fda6 	bl	cb34 <mul_fp2>
    map_fp2_times_Zz(map, isogeny_map_y_num, Zz_powers, 3);
    dfe8:	2303      	movs	r3, #3
    dfea:	aaa8      	add	r2, sp, #672	; 0x2a0
    dfec:	a8f0      	add	r0, sp, #960	; 0x3c0
    dfee:	494e      	ldr	r1, [pc, #312]	; (e128 <map_to_g2+0x1dc>)
    dff0:	f009 f95e 	bl	172b0 <map_fp2_times_Zz>
    mul_fp2(yn, p->X, isogeny_map_y_num[3]);
    dff4:	a960      	add	r1, sp, #384	; 0x180
    dff6:	a830      	add	r0, sp, #192	; 0xc0
    dff8:	4a4c      	ldr	r2, [pc, #304]	; (e12c <map_to_g2+0x1e0>)
    dffa:	f7fe fd9b 	bl	cb34 <mul_fp2>
    add_fp2(yn, yn, map[2]);
    dffe:	a930      	add	r1, sp, #192	; 0xc0
    e000:	4608      	mov	r0, r1
    e002:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    e006:	f7ff fc11 	bl	d82c <add_fp2>
    map_fp2(yn, p->X, map, 2);
    e00a:	2302      	movs	r3, #2
    e00c:	aaf0      	add	r2, sp, #960	; 0x3c0
    e00e:	a960      	add	r1, sp, #384	; 0x180
    e010:	a830      	add	r0, sp, #192	; 0xc0
    e012:	f009 fc04 	bl	1781e <map_fp2>
    mul_fp2(yn, yn, p->Y);              /* yn *= Y                      */
    e016:	a930      	add	r1, sp, #192	; 0xc0
    e018:	4608      	mov	r0, r1
    e01a:	aa78      	add	r2, sp, #480	; 0x1e0
    e01c:	f7fe fd8a 	bl	cb34 <mul_fp2>
    map_fp2_times_Zz(map, isogeny_map_y_den, Zz_powers, 3);
    e020:	2303      	movs	r3, #3
    e022:	aaa8      	add	r2, sp, #672	; 0x2a0
    e024:	a8f0      	add	r0, sp, #960	; 0x3c0
    e026:	4942      	ldr	r1, [pc, #264]	; (e130 <map_to_g2+0x1e4>)
    e028:	f009 f942 	bl	172b0 <map_fp2_times_Zz>
    add_fp2(yd, p->X, map[2]);
    e02c:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
    e030:	a960      	add	r1, sp, #384	; 0x180
    e032:	a848      	add	r0, sp, #288	; 0x120
    e034:	f7ff fbfa 	bl	d82c <add_fp2>
    map_fp2(yd, p->X, map, 2);
    e038:	2302      	movs	r3, #2
    e03a:	aaf0      	add	r2, sp, #960	; 0x3c0
    e03c:	a960      	add	r1, sp, #384	; 0x180
    e03e:	a848      	add	r0, sp, #288	; 0x120
    e040:	f009 fbed 	bl	1781e <map_fp2>
    mul_fp2(Zz_powers[2], Zz_powers[2], p->Z);
    e044:	a9d8      	add	r1, sp, #864	; 0x360
    e046:	4608      	mov	r0, r1
    e048:	aa90      	add	r2, sp, #576	; 0x240
    e04a:	f7fe fd73 	bl	cb34 <mul_fp2>
    mul_fp2(yd, yd, Zz_powers[2]);      /* yd *= Z^3                    */
    e04e:	a948      	add	r1, sp, #288	; 0x120
    e050:	4608      	mov	r0, r1
    e052:	aad8      	add	r2, sp, #864	; 0x360
    e054:	f7fe fd6e 	bl	cb34 <mul_fp2>
    mul_fp2(out->Z, xd, yd);            /* Z = xd * yd                  */
    e058:	aa48      	add	r2, sp, #288	; 0x120
    e05a:	a918      	add	r1, sp, #96	; 0x60
    e05c:	a890      	add	r0, sp, #576	; 0x240
    e05e:	f7fe fd69 	bl	cb34 <mul_fp2>
    mul_fp2(out->X, xn, yd);
    e062:	4669      	mov	r1, sp
    e064:	aa48      	add	r2, sp, #288	; 0x120
    e066:	a860      	add	r0, sp, #384	; 0x180
    e068:	f7fe fd64 	bl	cb34 <mul_fp2>
    mul_fp2(out->X, out->X, out->Z);    /* X = xn * xd * yd^2           */
    e06c:	a960      	add	r1, sp, #384	; 0x180
    e06e:	aa90      	add	r2, sp, #576	; 0x240
    e070:	4608      	mov	r0, r1
    e072:	f7fe fd5f 	bl	cb34 <mul_fp2>
    sqr_fp2(out->Y, out->Z);
    e076:	a990      	add	r1, sp, #576	; 0x240
    e078:	a878      	add	r0, sp, #480	; 0x1e0
    e07a:	f7ff fbe3 	bl	d844 <sqr_fp2>
    mul_fp2(out->Y, out->Y, xd);
    e07e:	a978      	add	r1, sp, #480	; 0x1e0
    e080:	4608      	mov	r0, r1
    e082:	aa18      	add	r2, sp, #96	; 0x60
    e084:	f7fe fd56 	bl	cb34 <mul_fp2>
    mul_fp2(out->Y, out->Y, yn);        /* Y = yn * xd^3 * yd^2         */
    e088:	a978      	add	r1, sp, #480	; 0x1e0
    e08a:	aa30      	add	r2, sp, #192	; 0xc0
    e08c:	4608      	mov	r0, r1
    e08e:	f7fe fd51 	bl	cb34 <mul_fp2>
    POINTonE2_double(out, p);           /* out = 2P                     */
    e092:	4620      	mov	r0, r4
    e094:	a960      	add	r1, sp, #384	; 0x180
    e096:	f7ff fd63 	bl	db60 <POINTonE2_double>
    psi(out, out);                      /* out = Ψ(2P)                  */
    e09a:	4621      	mov	r1, r4
    e09c:	4620      	mov	r0, r4
    e09e:	f7fe fd57 	bl	cb50 <psi>
    psi(out, out);                      /* out = Ψ²(2P)                 */
    e0a2:	4621      	mov	r1, r4
    e0a4:	4620      	mov	r0, r4
    e0a6:	f7fe fd53 	bl	cb50 <psi>
    vec_copy(&t0, p, sizeof(t0));
    e0aa:	f44f 7290 	mov.w	r2, #288	; 0x120
    e0ae:	a960      	add	r1, sp, #384	; 0x180
    e0b0:	a8a8      	add	r0, sp, #672	; 0x2a0
    e0b2:	f007 fefa 	bl	15eaa <vec_copy>
    POINTonE2_cneg(&t0, 1);             /* t0 = -P                      */
    e0b6:	a8a8      	add	r0, sp, #672	; 0x2a0
    e0b8:	2101      	movs	r1, #1
    e0ba:	f008 ffd0 	bl	1705e <POINTonE2_cneg>
    psi(&t1, &t0);                      /* t1 = -Ψ(P)                   */
    e0be:	a9a8      	add	r1, sp, #672	; 0x2a0
    e0c0:	a8f0      	add	r0, sp, #960	; 0x3c0
    e0c2:	f7fe fd45 	bl	cb50 <psi>
    POINTonE2_dadd(out, out, &t0, NULL);/* out = Ψ²(2P) - P             */
    e0c6:	4621      	mov	r1, r4
    e0c8:	4620      	mov	r0, r4
    e0ca:	aaa8      	add	r2, sp, #672	; 0x2a0
    e0cc:	2300      	movs	r3, #0
    e0ce:	f009 fec8 	bl	17e62 <POINTonE2_dadd>
    POINTonE2_dadd(out, out, &t1, NULL);/* out = Ψ²(2P) - P - Ψ(P)      */
    e0d2:	aaf0      	add	r2, sp, #960	; 0x3c0
    e0d4:	2300      	movs	r3, #0
    e0d6:	4621      	mov	r1, r4
    e0d8:	4620      	mov	r0, r4
    e0da:	f009 fec2 	bl	17e62 <POINTonE2_dadd>
    POINTonE2_times_minus_z(&t0, p);    /* t0 = [-z]P                   */
    e0de:	a960      	add	r1, sp, #384	; 0x180
    e0e0:	a8a8      	add	r0, sp, #672	; 0x2a0
    e0e2:	f00a f83b 	bl	1815c <POINTonE2_times_minus_z>
    POINTonE2_dadd(&t0, &t0, p, NULL);  /* t0 = [-z + 1]P               */
    e0e6:	a9a8      	add	r1, sp, #672	; 0x2a0
    e0e8:	4608      	mov	r0, r1
    e0ea:	aa60      	add	r2, sp, #384	; 0x180
    e0ec:	2300      	movs	r3, #0
    e0ee:	f009 feb8 	bl	17e62 <POINTonE2_dadd>
    POINTonE2_dadd(&t0, &t0, &t1, NULL);/* t0 = [-z + 1]P - Ψ(P)        */
    e0f2:	a9a8      	add	r1, sp, #672	; 0x2a0
    e0f4:	aaf0      	add	r2, sp, #960	; 0x3c0
    e0f6:	2300      	movs	r3, #0
    e0f8:	4608      	mov	r0, r1
    e0fa:	f009 feb2 	bl	17e62 <POINTonE2_dadd>
    POINTonE2_times_minus_z(&t1, &t0);  /* t1 = [z² - z]P + [z]Ψ(P)     */
    e0fe:	a9a8      	add	r1, sp, #672	; 0x2a0
    e100:	a8f0      	add	r0, sp, #960	; 0x3c0
    e102:	f00a f82b 	bl	1815c <POINTonE2_times_minus_z>
    POINTonE2_dadd(out, out, &t1, NULL);/* out = [z² - z - 1]P          */
    e106:	2300      	movs	r3, #0
    e108:	4621      	mov	r1, r4
    e10a:	4620      	mov	r0, r4
    e10c:	aaf0      	add	r2, sp, #960	; 0x3c0
    e10e:	f009 fea8 	bl	17e62 <POINTonE2_dadd>
    }

    isogeny_map_to_E2(&p, &p);          /* sprinkle isogenous powder    */
    clear_cofactor(out, &p);
}
    e112:	f20d 4de4 	addw	sp, sp, #1252	; 0x4e4
    e116:	bd30      	pop	{r4, r5, pc}
    e118:	0001c328 	.word	0x0001c328
    e11c:	0001cf90 	.word	0x0001cf90
    e120:	0001d0b0 	.word	0x0001d0b0
    e124:	0001ced0 	.word	0x0001ced0
    e128:	0001d230 	.word	0x0001d230
    e12c:	0001d350 	.word	0x0001d350
    e130:	0001d110 	.word	0x0001d110

0000e134 <line_dbl>:
#endif
    vec_copy(line[2], T->Z, sizeof(T->Z));
}

static void line_dbl(vec384fp6 line, POINTonE2 *T, const POINTonE2 *Q)
{
    e134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e138:	4615      	mov	r5, r2
    e13a:	4604      	mov	r4, r0
    e13c:	460e      	mov	r6, r1
    e13e:	f5ad 7d28 	sub.w	sp, sp, #672	; 0x2a0
    vec384x ZZ, A, B, C, D, E, F;

    /*
     * https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-alnr
     */
    sqr_fp2(A, Q->X);                   /* A = X1^2 */
    e142:	4611      	mov	r1, r2
    sqr_fp2(B, Q->Y);                   /* B = Y1^2 */
    e144:	f105 0760 	add.w	r7, r5, #96	; 0x60
    sqr_fp2(A, Q->X);                   /* A = X1^2 */
    e148:	a818      	add	r0, sp, #96	; 0x60
    e14a:	f7ff fb7b 	bl	d844 <sqr_fp2>
    sqr_fp2(ZZ, Q->Z);                  /* ZZ = Z1^2 */
    e14e:	f105 08c0 	add.w	r8, r5, #192	; 0xc0
    sqr_fp2(B, Q->Y);                   /* B = Y1^2 */
    e152:	4639      	mov	r1, r7
    e154:	a830      	add	r0, sp, #192	; 0xc0
    e156:	f7ff fb75 	bl	d844 <sqr_fp2>
    sqr_fp2(ZZ, Q->Z);                  /* ZZ = Z1^2 */
    e15a:	4641      	mov	r1, r8
    e15c:	4668      	mov	r0, sp
    e15e:	f7ff fb71 	bl	d844 <sqr_fp2>
    sqr_fp2(C, B);                      /* C = B^2 */
    e162:	a930      	add	r1, sp, #192	; 0xc0
    e164:	a848      	add	r0, sp, #288	; 0x120
    e166:	f7ff fb6d 	bl	d844 <sqr_fp2>

    add_fp2(D, Q->X, B);                /* X1+B */
    e16a:	aa30      	add	r2, sp, #192	; 0xc0
    e16c:	4629      	mov	r1, r5
    e16e:	a860      	add	r0, sp, #384	; 0x180
    e170:	f7ff fb5c 	bl	d82c <add_fp2>
    sqr_fp2(D, D);                      /* (X1+B)^2 */
    e174:	a960      	add	r1, sp, #384	; 0x180
    e176:	4608      	mov	r0, r1
    e178:	f7ff fb64 	bl	d844 <sqr_fp2>
    sub_fp2(D, D, A);                   /* (X1+B)^2-A */
    e17c:	a960      	add	r1, sp, #384	; 0x180
    e17e:	4608      	mov	r0, r1
    e180:	aa18      	add	r2, sp, #96	; 0x60
    e182:	f7ff fb59 	bl	d838 <sub_fp2>
    sub_fp2(D, D, C);                   /* (X1+B)^2-A-C */
    e186:	a960      	add	r1, sp, #384	; 0x180
    e188:	4608      	mov	r0, r1
    e18a:	aa48      	add	r2, sp, #288	; 0x120
    e18c:	f7ff fb54 	bl	d838 <sub_fp2>
    add_fp2(D, D, D);                   /* D = 2*((X1+B)^2-A-C) */
    e190:	aa60      	add	r2, sp, #384	; 0x180
    e192:	4611      	mov	r1, r2
    e194:	4610      	mov	r0, r2
    e196:	f7ff fb49 	bl	d82c <add_fp2>

    mul_by_3_fp2(E, A);                 /* E = 3*A */
    e19a:	a918      	add	r1, sp, #96	; 0x60
    e19c:	a878      	add	r0, sp, #480	; 0x1e0
    e19e:	f7ff fb39 	bl	d814 <mul_by_3_fp2>
    sqr_fp2(F, E);                      /* F = E^2 */
    e1a2:	a978      	add	r1, sp, #480	; 0x1e0
    e1a4:	a890      	add	r0, sp, #576	; 0x240
    e1a6:	f7ff fb4d 	bl	d844 <sqr_fp2>

    add_fp2(line[0], E, Q->X);          /* 3*A+X1 for line evaluation */
    e1aa:	462a      	mov	r2, r5
    e1ac:	4620      	mov	r0, r4
    e1ae:	a978      	add	r1, sp, #480	; 0x1e0
    e1b0:	f7ff fb3c 	bl	d82c <add_fp2>

    sub_fp2(T->X, F, D);
    e1b4:	4630      	mov	r0, r6
    e1b6:	aa60      	add	r2, sp, #384	; 0x180
    e1b8:	a990      	add	r1, sp, #576	; 0x240
    sub_fp2(T->X, T->X, D);             /* X3 = F-2*D */

    add_fp2(T->Z, Q->Y, Q->Z);
    e1ba:	f106 05c0 	add.w	r5, r6, #192	; 0xc0
    sub_fp2(T->X, F, D);
    e1be:	f7ff fb3b 	bl	d838 <sub_fp2>
    sub_fp2(T->X, T->X, D);             /* X3 = F-2*D */
    e1c2:	4631      	mov	r1, r6
    e1c4:	4630      	mov	r0, r6
    e1c6:	aa60      	add	r2, sp, #384	; 0x180
    e1c8:	f7ff fb36 	bl	d838 <sub_fp2>
    add_fp2(T->Z, Q->Y, Q->Z);
    e1cc:	4642      	mov	r2, r8
    e1ce:	4639      	mov	r1, r7
    e1d0:	4628      	mov	r0, r5
    e1d2:	f7ff fb2b 	bl	d82c <add_fp2>
    sqr_fp2(T->Z, T->Z);
    e1d6:	4629      	mov	r1, r5
    e1d8:	4628      	mov	r0, r5
    e1da:	f7ff fb33 	bl	d844 <sqr_fp2>
    sub_fp2(T->Z, T->Z, B);
    e1de:	4629      	mov	r1, r5
    e1e0:	4628      	mov	r0, r5
    e1e2:	aa30      	add	r2, sp, #192	; 0xc0
    e1e4:	f7ff fb28 	bl	d838 <sub_fp2>
{   mul_by_8_mod_384x(ret, a, BLS12_381_P);   }
    e1e8:	f8df 8094 	ldr.w	r8, [pc, #148]	; e280 <line_dbl+0x14c>
    sub_fp2(T->Z, T->Z, ZZ);            /* Z3 = (Y1+Z1)^2-B-ZZ */
    e1ec:	466a      	mov	r2, sp
    e1ee:	4629      	mov	r1, r5
    e1f0:	4628      	mov	r0, r5
    e1f2:	f7ff fb21 	bl	d838 <sub_fp2>
    e1f6:	a948      	add	r1, sp, #288	; 0x120

    mul_by_8_fp2(C, C);                 /* 8*C */
    sub_fp2(T->Y, D, T->X);             /* D-X3 */
    e1f8:	f106 0760 	add.w	r7, r6, #96	; 0x60
    e1fc:	4642      	mov	r2, r8
    e1fe:	4608      	mov	r0, r1
    e200:	f009 fad4 	bl	177ac <mul_by_8_mod_384x>
    e204:	4632      	mov	r2, r6
    e206:	4638      	mov	r0, r7
    e208:	a960      	add	r1, sp, #384	; 0x180
    e20a:	f7ff fb15 	bl	d838 <sub_fp2>
    mul_fp2(T->Y, T->Y, E);             /* E*(D-X3) */
    e20e:	4639      	mov	r1, r7
    e210:	4638      	mov	r0, r7
    e212:	aa78      	add	r2, sp, #480	; 0x1e0
    e214:	f7fe fc8e 	bl	cb34 <mul_fp2>
    sub_fp2(T->Y, T->Y, C);             /* Y3 = E*(D-X3)-8*C */
    e218:	aa48      	add	r2, sp, #288	; 0x120
    e21a:	4639      	mov	r1, r7
    e21c:	4638      	mov	r0, r7
    e21e:	f7ff fb0b 	bl	d838 <sub_fp2>

    /*
     * line evaluation
     */
    sqr_fp2(line[0], line[0]);
    e222:	4621      	mov	r1, r4
    e224:	4620      	mov	r0, r4
    e226:	f7ff fb0d 	bl	d844 <sqr_fp2>
    sub_fp2(line[0], line[0], A);
    e22a:	4621      	mov	r1, r4
    e22c:	4620      	mov	r0, r4
    e22e:	aa18      	add	r2, sp, #96	; 0x60
    e230:	f7ff fb02 	bl	d838 <sub_fp2>
    sub_fp2(line[0], line[0], F);       /* (3*A+X1)^2 - X1^2 - 9*A^2 */
    e234:	4621      	mov	r1, r4
    e236:	4620      	mov	r0, r4
    e238:	aa90      	add	r2, sp, #576	; 0x240
    e23a:	f7ff fafd 	bl	d838 <sub_fp2>
    lshift_mod_384(ret[0], a[0], count, BLS12_381_P);
    e23e:	a930      	add	r1, sp, #192	; 0xc0
    e240:	4643      	mov	r3, r8
    e242:	4608      	mov	r0, r1
    e244:	2202      	movs	r2, #2
    e246:	f008 fea5 	bl	16f94 <lshift_mod_384>
    lshift_mod_384(ret[1], a[1], count, BLS12_381_P);
    e24a:	a93c      	add	r1, sp, #240	; 0xf0
    e24c:	4643      	mov	r3, r8
    e24e:	4608      	mov	r0, r1
    e250:	2202      	movs	r2, #2
    e252:	f008 fe9f 	bl	16f94 <lshift_mod_384>
    lshift_fp2(B, B, 2);
    sub_fp2(line[0], line[0], B);       /* 6*X1^3 - 4*Y1^2 */
    e256:	4621      	mov	r1, r4
    e258:	4620      	mov	r0, r4
    e25a:	aa30      	add	r2, sp, #192	; 0xc0
    e25c:	f7ff faec 	bl	d838 <sub_fp2>

    mul_fp2(line[1], E, ZZ);            /* 3*X1^2 * Z1^2 */
    e260:	466a      	mov	r2, sp
    e262:	a978      	add	r1, sp, #480	; 0x1e0
    e264:	f104 0060 	add.w	r0, r4, #96	; 0x60
    e268:	f7fe fc64 	bl	cb34 <mul_fp2>

    mul_fp2(line[2], T->Z, ZZ);         /* Z3 * Z1^2 */
    e26c:	466a      	mov	r2, sp
    e26e:	4629      	mov	r1, r5
    e270:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    e274:	f7fe fc5e 	bl	cb34 <mul_fp2>
}
    e278:	f50d 7d28 	add.w	sp, sp, #672	; 0x2a0
    e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e280:	0001c538 	.word	0x0001c538

0000e284 <miller_loop_n>:
    }
}

static void miller_loop_n(vec384fp12 ret, const POINTonE2_affine Q[],
                                          const POINTonE1_affine P[], size_t n)
{
    e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e288:	b087      	sub	sp, #28
    e28a:	461c      	mov	r4, r3
    e28c:	4616      	mov	r6, r2
#if !defined(__STDC_VERSION__) || __STDC_VERSION__<199901
    POINTonE2 *T = alloca(n*sizeof(POINTonE2));
    POINTonE1_affine *Px2 = alloca(n*sizeof(POINTonE1_affine));
#else
    POINTonE2 T[n];
    e28e:	f44f 7390 	mov.w	r3, #288	; 0x120
    e292:	466a      	mov	r2, sp
    e294:	fb03 2314 	mls	r3, r3, r4, r2
{
    e298:	af02      	add	r7, sp, #8
    e29a:	f8c7 d008 	str.w	sp, [r7, #8]
    POINTonE2 T[n];
    e29e:	469d      	mov	sp, r3
    POINTonE1_affine Px2[n];
    e2a0:	2360      	movs	r3, #96	; 0x60
    e2a2:	fb03 f204 	mul.w	r2, r3, r4
    POINTonE2 T[n];
    e2a6:	f10d 0a08 	add.w	sl, sp, #8
#endif
    size_t i;

    if ((n == 1) && (vec_is_zero(&Q[0], sizeof(Q[0])) |
    e2aa:	2c01      	cmp	r4, #1
    POINTonE1_affine Px2[n];
    e2ac:	ebad 0d02 	sub.w	sp, sp, r2
{
    e2b0:	4605      	mov	r5, r0
    e2b2:	4688      	mov	r8, r1
    POINTonE1_affine Px2[n];
    e2b4:	f10d 0908 	add.w	r9, sp, #8
    if ((n == 1) && (vec_is_zero(&Q[0], sizeof(Q[0])) |
    e2b8:	d10e      	bne.n	e2d8 <miller_loop_n+0x54>
    e2ba:	21c0      	movs	r1, #192	; 0xc0
    e2bc:	4640      	mov	r0, r8
    e2be:	60fa      	str	r2, [r7, #12]
    e2c0:	f007 fdd4 	bl	15e6c <vec_is_zero>
                     vec_is_zero(&P[0], sizeof(P[0]))) ) {
    e2c4:	2360      	movs	r3, #96	; 0x60
    if ((n == 1) && (vec_is_zero(&Q[0], sizeof(Q[0])) |
    e2c6:	4683      	mov	fp, r0
                     vec_is_zero(&P[0], sizeof(P[0]))) ) {
    e2c8:	4619      	mov	r1, r3
    e2ca:	4630      	mov	r0, r6
    e2cc:	f007 fdce 	bl	15e6c <vec_is_zero>
    if ((n == 1) && (vec_is_zero(&Q[0], sizeof(Q[0])) |
    e2d0:	ea5b 0300 	orrs.w	r3, fp, r0
    e2d4:	68fa      	ldr	r2, [r7, #12]
    e2d6:	d13f      	bne.n	e358 <miller_loop_n+0xd4>
    e2d8:	46cb      	mov	fp, r9
    e2da:	4643      	mov	r3, r8
    e2dc:	444a      	add	r2, r9
    e2de:	f8c7 a00c 	str.w	sl, [r7, #12]
    e2e2:	607a      	str	r2, [r7, #4]
         */
        vec_copy(ret, BLS12_381_Rx.p12, sizeof(vec384fp12));
        return;
    }

    for (i = 0; i < n; i++) {
    e2e4:	687a      	ldr	r2, [r7, #4]
    e2e6:	4593      	cmp	fp, r2
    e2e8:	d142      	bne.n	e370 <miller_loop_n+0xec>
        vec_copy(T[i].X, Q[i].X, 2*sizeof(T[i].X));
        vec_copy(T[i].Z, BLS12_381_Rx.p2, sizeof(T[i].Z));
    }

    /* first step is ret = 1^2*line, which is replaced with ret = line  */
    start_dbl_n(ret, T, Px2, n);                /* 0x2                  */
    e2ea:	4623      	mov	r3, r4
    e2ec:	464a      	mov	r2, r9
    e2ee:	4651      	mov	r1, sl
    e2f0:	4628      	mov	r0, r5
    e2f2:	f00a fb06 	bl	18902 <start_dbl_n>
    add_n_dbl_n(ret, T, Q, Px2, n, 2);          /* ..0xc                */
    e2f6:	2302      	movs	r3, #2
    e2f8:	4642      	mov	r2, r8
    e2fa:	4651      	mov	r1, sl
    e2fc:	4628      	mov	r0, r5
    e2fe:	e9cd 4300 	strd	r4, r3, [sp]
    e302:	464b      	mov	r3, r9
    e304:	f00a fbe2 	bl	18acc <add_n_dbl_n>
    add_n_dbl_n(ret, T, Q, Px2, n, 3);          /* ..0x68               */
    e308:	2303      	movs	r3, #3
    e30a:	4642      	mov	r2, r8
    e30c:	4651      	mov	r1, sl
    e30e:	4628      	mov	r0, r5
    e310:	e9cd 4300 	strd	r4, r3, [sp]
    e314:	464b      	mov	r3, r9
    e316:	f00a fbd9 	bl	18acc <add_n_dbl_n>
    add_n_dbl_n(ret, T, Q, Px2, n, 9);          /* ..0xd200             */
    e31a:	2309      	movs	r3, #9
    e31c:	4642      	mov	r2, r8
    e31e:	4651      	mov	r1, sl
    e320:	4628      	mov	r0, r5
    e322:	e9cd 4300 	strd	r4, r3, [sp]
    e326:	464b      	mov	r3, r9
    e328:	f00a fbd0 	bl	18acc <add_n_dbl_n>
    add_n_dbl_n(ret, T, Q, Px2, n, 32);         /* ..0xd20100000000     */
    e32c:	2320      	movs	r3, #32
    e32e:	4642      	mov	r2, r8
    e330:	4651      	mov	r1, sl
    e332:	4628      	mov	r0, r5
    e334:	e9cd 4300 	strd	r4, r3, [sp]
    e338:	464b      	mov	r3, r9
    e33a:	f00a fbc7 	bl	18acc <add_n_dbl_n>
    add_n_dbl_n(ret, T, Q, Px2, n, 16);         /* ..0xd201000000010000 */
    e33e:	2310      	movs	r3, #16
    e340:	4628      	mov	r0, r5
    e342:	e9cd 4300 	strd	r4, r3, [sp]
    e346:	4642      	mov	r2, r8
    e348:	464b      	mov	r3, r9
    e34a:	4651      	mov	r1, sl
    e34c:	f00a fbbe 	bl	18acc <add_n_dbl_n>
    conjugate_fp12(ret);                /* account for z being negative */
    e350:	4628      	mov	r0, r5
    e352:	f008 fee8 	bl	17126 <conjugate_fp12>
    e356:	e005      	b.n	e364 <miller_loop_n+0xe0>
        vec_copy(ret, BLS12_381_Rx.p12, sizeof(vec384fp12));
    e358:	f44f 7210 	mov.w	r2, #576	; 0x240
    e35c:	4628      	mov	r0, r5
    e35e:	4919      	ldr	r1, [pc, #100]	; (e3c4 <miller_loop_n+0x140>)
    e360:	f007 fda3 	bl	15eaa <vec_copy>
        return;
    e364:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
    e368:	3714      	adds	r7, #20
    e36a:	46bd      	mov	sp, r7
    e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        add_fp(Px2[i].X, P[i].X, P[i].X);
    e370:	4632      	mov	r2, r6
    e372:	4631      	mov	r1, r6
    e374:	4658      	mov	r0, fp
    e376:	603b      	str	r3, [r7, #0]
    e378:	f7fe faa0 	bl	c8bc <add_fp>
        neg_fp(Px2[i].X, Px2[i].X);
    e37c:	4659      	mov	r1, fp
    e37e:	4658      	mov	r0, fp
    e380:	2201      	movs	r2, #1
    e382:	f7fe fb79 	bl	ca78 <cneg_fp>
        add_fp(Px2[i].Y, P[i].Y, P[i].Y);
    e386:	f106 0230 	add.w	r2, r6, #48	; 0x30
    e38a:	4611      	mov	r1, r2
    e38c:	f10b 0030 	add.w	r0, fp, #48	; 0x30
    e390:	f7fe fa94 	bl	c8bc <add_fp>
        vec_copy(T[i].X, Q[i].X, 2*sizeof(T[i].X));
    e394:	683b      	ldr	r3, [r7, #0]
    e396:	22c0      	movs	r2, #192	; 0xc0
    e398:	4619      	mov	r1, r3
    e39a:	68f8      	ldr	r0, [r7, #12]
    e39c:	f007 fd85 	bl	15eaa <vec_copy>
        vec_copy(T[i].Z, BLS12_381_Rx.p2, sizeof(T[i].Z));
    e3a0:	68fb      	ldr	r3, [r7, #12]
    e3a2:	2260      	movs	r2, #96	; 0x60
    e3a4:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
    e3a8:	4906      	ldr	r1, [pc, #24]	; (e3c4 <miller_loop_n+0x140>)
    e3aa:	f007 fd7e 	bl	15eaa <vec_copy>
    for (i = 0; i < n; i++) {
    e3ae:	68fb      	ldr	r3, [r7, #12]
    e3b0:	f10b 0b60 	add.w	fp, fp, #96	; 0x60
    e3b4:	f503 7390 	add.w	r3, r3, #288	; 0x120
    e3b8:	60fb      	str	r3, [r7, #12]
    e3ba:	683b      	ldr	r3, [r7, #0]
    e3bc:	3660      	adds	r6, #96	; 0x60
    e3be:	33c0      	adds	r3, #192	; 0xc0
    e3c0:	e790      	b.n	e2e4 <miller_loop_n+0x60>
    e3c2:	bf00      	nop
    e3c4:	0001c5c8 	.word	0x0001c5c8

0000e3c8 <PAIRING_Aggregate_PK_in_G1>:
                                             const POINTonE2_affine *sig,
                                             size_t sig_groupcheck,
                                             const byte *scalar, size_t nbits,
                                             const void *msg, size_t msg_len,
                                             const void *aug, size_t aug_len)
{
    e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3cc:	461e      	mov	r6, r3
    if (ctx->ctrl & AGGR_MIN_SIG)
    e3ce:	6803      	ldr	r3, [r0, #0]
{
    e3d0:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
    e3d4:	460c      	mov	r4, r1
    e3d6:	f50d 6785 	add.w	r7, sp, #1064	; 0x428
    if (ctx->ctrl & AGGR_MIN_SIG)
    e3da:	07d9      	lsls	r1, r3, #31
{
    e3dc:	4605      	mov	r5, r0
    e3de:	e897 0380 	ldmia.w	r7, {r7, r8, r9}
    e3e2:	4693      	mov	fp, r2
    if (ctx->ctrl & AGGR_MIN_SIG)
    e3e4:	f100 8105 	bmi.w	e5f2 <PAIRING_Aggregate_PK_in_G1+0x22a>
        return BLST_AGGR_TYPE_MISMATCH;

    ctx->ctrl |= AGGR_MIN_PK;
    e3e8:	f043 0302 	orr.w	r3, r3, #2
    e3ec:	6003      	str	r3, [r0, #0]
     * Since we don't know if the signature is individual or aggregated,
     * the only sensible thing to do is to skip over infinite one and
     * count on the corresponding infinite public key to be rejected,
     * in case the signature is non-aggregated that is.
     */
    if (sig != NULL && !vec_is_zero(sig, sizeof(*sig))) {
    e3ee:	2e00      	cmp	r6, #0
    e3f0:	d038      	beq.n	e464 <PAIRING_Aggregate_PK_in_G1+0x9c>
    e3f2:	21c0      	movs	r1, #192	; 0xc0
    e3f4:	4630      	mov	r0, r6
    e3f6:	f007 fd39 	bl	15e6c <vec_is_zero>
    e3fa:	bb98      	cbnz	r0, e464 <PAIRING_Aggregate_PK_in_G1+0x9c>
        POINTonE2 *S = &ctx->AggrSign.e2;
        POINTonE2 P[1];

        FROM_AFFINE(P, sig);
    e3fc:	22c0      	movs	r2, #192	; 0xc0
    e3fe:	4631      	mov	r1, r6
    e400:	a870      	add	r0, sp, #448	; 0x1c0
    e402:	f007 fd52 	bl	15eaa <vec_copy>
    e406:	21c0      	movs	r1, #192	; 0xc0
    e408:	4630      	mov	r0, r6
    e40a:	f007 fd2f 	bl	15e6c <vec_is_zero>
    e40e:	2360      	movs	r3, #96	; 0x60
    e410:	9000      	str	r0, [sp, #0]
    e412:	4631      	mov	r1, r6
    e414:	4a79      	ldr	r2, [pc, #484]	; (e5fc <PAIRING_Aggregate_PK_in_G1+0x234>)
    e416:	a8a0      	add	r0, sp, #640	; 0x280
        POINTonE2 *S = &ctx->AggrSign.e2;
    e418:	f505 7a14 	add.w	sl, r5, #592	; 0x250
        FROM_AFFINE(P, sig);
    e41c:	f007 fd0f 	bl	15e3e <vec_select>

        if (sig_groupcheck && !POINTonE2_in_G2(P))
    e420:	b147      	cbz	r7, e434 <PAIRING_Aggregate_PK_in_G1+0x6c>
    e422:	a870      	add	r0, sp, #448	; 0x1c0
    e424:	f009 feba 	bl	1819c <POINTonE2_in_G2>
    e428:	b920      	cbnz	r0, e434 <PAIRING_Aggregate_PK_in_G1+0x6c>
        if (pk_groupcheck) {
            POINTonE1 P[1];

            FROM_AFFINE(P, PK);
            if (!POINTonE1_in_G1(P))
                return BLST_POINT_NOT_IN_GROUP;
    e42a:	2003      	movs	r0, #3
        }
        ctx->nelems = n;
    }

    return BLST_SUCCESS;
}
    e42c:	f20d 4d04 	addw	sp, sp, #1028	; 0x404
    e430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ctx->ctrl & AGGR_SIGN_SET) {
    e434:	682b      	ldr	r3, [r5, #0]
    e436:	06da      	lsls	r2, r3, #27
    e438:	f140 80a4 	bpl.w	e584 <PAIRING_Aggregate_PK_in_G1+0x1bc>
            if (nbits != 0 && scalar != NULL) {
    e43c:	f1b9 0f00 	cmp.w	r9, #0
    e440:	f000 809a 	beq.w	e578 <PAIRING_Aggregate_PK_in_G1+0x1b0>
    e444:	f1b8 0f00 	cmp.w	r8, #0
    e448:	f000 8096 	beq.w	e578 <PAIRING_Aggregate_PK_in_G1+0x1b0>
                POINTonE2_mult_w5(P, P, scalar, nbits);
    e44c:	a970      	add	r1, sp, #448	; 0x1c0
    e44e:	4608      	mov	r0, r1
    e450:	464b      	mov	r3, r9
    e452:	4642      	mov	r2, r8
    e454:	f009 fdfb 	bl	1804e <POINTonE2_mult_w5>
                POINTonE2_dadd(S, S, P, NULL);
    e458:	2300      	movs	r3, #0
    e45a:	4651      	mov	r1, sl
    e45c:	4650      	mov	r0, sl
    e45e:	aa70      	add	r2, sp, #448	; 0x1c0
    e460:	f009 fcff 	bl	17e62 <POINTonE2_dadd>
    if (PK != NULL) {
    e464:	2c00      	cmp	r4, #0
    e466:	f000 80c6 	beq.w	e5f6 <PAIRING_Aggregate_PK_in_G1+0x22e>
{   return (uptr_t)ctx->DST==(uptr_t)42 ? (const byte *)ctx+sizeof_pairing
    e46a:	68af      	ldr	r7, [r5, #8]
        if (vec_is_zero(PK, sizeof(*PK)))
    e46c:	2160      	movs	r1, #96	; 0x60
                                        : ctx->DST;
    e46e:	2f2a      	cmp	r7, #42	; 0x2a
        if (vec_is_zero(PK, sizeof(*PK)))
    e470:	4620      	mov	r0, r4
                                        : ctx->DST;
    e472:	bf08      	it	eq
    e474:	f505 6747 	addeq.w	r7, r5, #3184	; 0xc70
        if (vec_is_zero(PK, sizeof(*PK)))
    e478:	f007 fcf8 	bl	15e6c <vec_is_zero>
    e47c:	2800      	cmp	r0, #0
    e47e:	f040 80b6 	bne.w	e5ee <PAIRING_Aggregate_PK_in_G1+0x226>
        if (pk_groupcheck) {
    e482:	f1bb 0f00 	cmp.w	fp, #0
    e486:	d014      	beq.n	e4b2 <PAIRING_Aggregate_PK_in_G1+0xea>
            FROM_AFFINE(P, PK);
    e488:	2260      	movs	r2, #96	; 0x60
    e48a:	4621      	mov	r1, r4
    e48c:	a870      	add	r0, sp, #448	; 0x1c0
    e48e:	f007 fd0c 	bl	15eaa <vec_copy>
    e492:	2160      	movs	r1, #96	; 0x60
    e494:	4620      	mov	r0, r4
    e496:	f007 fce9 	bl	15e6c <vec_is_zero>
    e49a:	2330      	movs	r3, #48	; 0x30
    e49c:	9000      	str	r0, [sp, #0]
    e49e:	4621      	mov	r1, r4
    e4a0:	a888      	add	r0, sp, #544	; 0x220
    e4a2:	4a56      	ldr	r2, [pc, #344]	; (e5fc <PAIRING_Aggregate_PK_in_G1+0x234>)
    e4a4:	f007 fccb 	bl	15e3e <vec_select>
            if (!POINTonE1_in_G1(P))
    e4a8:	a870      	add	r0, sp, #448	; 0x1c0
    e4aa:	f7ff f8f9 	bl	d6a0 <POINTonE1_in_G1>
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0bb      	beq.n	e42a <PAIRING_Aggregate_PK_in_G1+0x62>
        if (ctx->ctrl & AGGR_HASH_OR_ENCODE)
    e4b2:	682e      	ldr	r6, [r5, #0]
    e4b4:	68eb      	ldr	r3, [r5, #12]
    e4b6:	f016 0640 	ands.w	r6, r6, #64	; 0x40
    e4ba:	d07a      	beq.n	e5b2 <PAIRING_Aggregate_PK_in_G1+0x1ea>
            Hash_to_G2(H, msg, msg_len, DST, ctx->DST_len, aug, aug_len);
    e4bc:	f8dd 2440 	ldr.w	r2, [sp, #1088]	; 0x440
    e4c0:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e4c4:	9202      	str	r2, [sp, #8]
    e4c6:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    e4ca:	a828      	add	r0, sp, #160	; 0xa0
    e4cc:	e9cd 3200 	strd	r3, r2, [sp]
    e4d0:	463b      	mov	r3, r7
    e4d2:	f8dd 2438 	ldr.w	r2, [sp, #1080]	; 0x438
    e4d6:	f009 ff74 	bl	183c2 <Hash_to_G2>
        POINTonE2_from_Jacobian(H, H);
    e4da:	a928      	add	r1, sp, #160	; 0xa0
    e4dc:	4608      	mov	r0, r1
    e4de:	f7ff f9b9 	bl	d854 <POINTonE2_from_Jacobian>
        if (nbits != 0 && scalar != NULL) {
    e4e2:	f1b9 0f00 	cmp.w	r9, #0
    e4e6:	d01d      	beq.n	e524 <PAIRING_Aggregate_PK_in_G1+0x15c>
    e4e8:	f1b8 0f00 	cmp.w	r8, #0
    e4ec:	d01a      	beq.n	e524 <PAIRING_Aggregate_PK_in_G1+0x15c>
            FROM_AFFINE(pk, PK);
    e4ee:	2260      	movs	r2, #96	; 0x60
    e4f0:	4621      	mov	r1, r4
    e4f2:	a804      	add	r0, sp, #16
    e4f4:	f007 fcd9 	bl	15eaa <vec_copy>
    e4f8:	2160      	movs	r1, #96	; 0x60
    e4fa:	4620      	mov	r0, r4
    e4fc:	f007 fcb6 	bl	15e6c <vec_is_zero>
    e500:	4621      	mov	r1, r4
    e502:	2330      	movs	r3, #48	; 0x30
    e504:	4a3d      	ldr	r2, [pc, #244]	; (e5fc <PAIRING_Aggregate_PK_in_G1+0x234>)
    e506:	9000      	str	r0, [sp, #0]
    e508:	a81c      	add	r0, sp, #112	; 0x70
    e50a:	f007 fc98 	bl	15e3e <vec_select>
            POINTonE1_mult_w5(pk, pk, scalar, nbits);
    e50e:	a904      	add	r1, sp, #16
    e510:	4608      	mov	r0, r1
    e512:	464b      	mov	r3, r9
    e514:	4642      	mov	r2, r8
    e516:	f009 f82b 	bl	17570 <POINTonE1_mult_w5>
            POINTonE1_from_Jacobian(pk, pk);
    e51a:	a904      	add	r1, sp, #16
    e51c:	4608      	mov	r0, r1
    e51e:	f7fe fbd9 	bl	ccd4 <POINTonE1_from_Jacobian>
            PK = (const POINTonE1_affine *)pk;
    e522:	ac04      	add	r4, sp, #16
        vec_copy(ctx->Q + n, H, sizeof(POINTonE2_affine));
    e524:	22c0      	movs	r2, #192	; 0xc0
        n = ctx->nelems;
    e526:	686e      	ldr	r6, [r5, #4]
        vec_copy(ctx->Q + n, H, sizeof(POINTonE2_affine));
    e528:	f505 775c 	add.w	r7, r5, #880	; 0x370
    e52c:	fb02 7006 	mla	r0, r2, r6, r7
    e530:	a928      	add	r1, sp, #160	; 0xa0
    e532:	f007 fcba 	bl	15eaa <vec_copy>
        vec_copy(ctx->P + n, PK, sizeof(POINTonE1_affine));
    e536:	2260      	movs	r2, #96	; 0x60
    e538:	f505 6817 	add.w	r8, r5, #2416	; 0x970
    e53c:	4621      	mov	r1, r4
    e53e:	fb02 8006 	mla	r0, r2, r6, r8
    e542:	f007 fcb2 	bl	15eaa <vec_copy>
        if (++n == N_MAX) {
    e546:	2e07      	cmp	r6, #7
    e548:	f106 0401 	add.w	r4, r6, #1
    e54c:	d111      	bne.n	e572 <PAIRING_Aggregate_PK_in_G1+0x1aa>
            if (ctx->ctrl & AGGR_GT_SET) {
    e54e:	462e      	mov	r6, r5
    e550:	f856 4b10 	ldr.w	r4, [r6], #16
                miller_loop_n(GT, ctx->Q, ctx->P, n);
    e554:	2308      	movs	r3, #8
            if (ctx->ctrl & AGGR_GT_SET) {
    e556:	f014 0420 	ands.w	r4, r4, #32
                miller_loop_n(GT, ctx->Q, ctx->P, n);
    e55a:	4642      	mov	r2, r8
    e55c:	4639      	mov	r1, r7
            if (ctx->ctrl & AGGR_GT_SET) {
    e55e:	d03e      	beq.n	e5de <PAIRING_Aggregate_PK_in_G1+0x216>
                miller_loop_n(GT, ctx->Q, ctx->P, n);
    e560:	a870      	add	r0, sp, #448	; 0x1c0
    e562:	f7ff fe8f 	bl	e284 <miller_loop_n>
                mul_fp12(ctx->GT, ctx->GT, GT);
    e566:	4631      	mov	r1, r6
    e568:	4630      	mov	r0, r6
    e56a:	aa70      	add	r2, sp, #448	; 0x1c0
    e56c:	f009 fa38 	bl	179e0 <mul_fp12>
            n = 0;
    e570:	2400      	movs	r4, #0
    return BLST_SUCCESS;
    e572:	2000      	movs	r0, #0
        ctx->nelems = n;
    e574:	606c      	str	r4, [r5, #4]
    e576:	e759      	b.n	e42c <PAIRING_Aggregate_PK_in_G1+0x64>
                POINTonE2_dadd_affine(S, S, sig);
    e578:	4632      	mov	r2, r6
    e57a:	4651      	mov	r1, sl
    e57c:	4650      	mov	r0, sl
    e57e:	f7ff fa37 	bl	d9f0 <POINTonE2_dadd_affine>
    e582:	e76f      	b.n	e464 <PAIRING_Aggregate_PK_in_G1+0x9c>
            ctx->ctrl |= AGGR_SIGN_SET;
    e584:	f043 0310 	orr.w	r3, r3, #16
    e588:	602b      	str	r3, [r5, #0]
            if (nbits != 0 && scalar != NULL)
    e58a:	f1b9 0f00 	cmp.w	r9, #0
    e58e:	d009      	beq.n	e5a4 <PAIRING_Aggregate_PK_in_G1+0x1dc>
    e590:	f1b8 0f00 	cmp.w	r8, #0
    e594:	d006      	beq.n	e5a4 <PAIRING_Aggregate_PK_in_G1+0x1dc>
                POINTonE2_mult_w5(S, P, scalar, nbits);
    e596:	464b      	mov	r3, r9
    e598:	4642      	mov	r2, r8
    e59a:	4650      	mov	r0, sl
    e59c:	a970      	add	r1, sp, #448	; 0x1c0
    e59e:	f009 fd56 	bl	1804e <POINTonE2_mult_w5>
    e5a2:	e75f      	b.n	e464 <PAIRING_Aggregate_PK_in_G1+0x9c>
                vec_copy(S, P, sizeof(P));
    e5a4:	f44f 7290 	mov.w	r2, #288	; 0x120
    e5a8:	4650      	mov	r0, sl
    e5aa:	a970      	add	r1, sp, #448	; 0x1c0
    e5ac:	f007 fc7d 	bl	15eaa <vec_copy>
    e5b0:	e758      	b.n	e464 <PAIRING_Aggregate_PK_in_G1+0x9c>
                                       const unsigned char *DST, size_t DST_len,
                                       const unsigned char *aug, size_t aug_len)
{
    vec384x u[1];

    hash_to_field(u[0], 2, aug, aug_len, msg, msg_len, DST, DST_len);
    e5b2:	e9cd 7302 	strd	r7, r3, [sp, #8]
    e5b6:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
    e5ba:	f8dd 243c 	ldr.w	r2, [sp, #1084]	; 0x43c
    e5be:	9301      	str	r3, [sp, #4]
    e5c0:	f8dd 3434 	ldr.w	r3, [sp, #1076]	; 0x434
    e5c4:	a870      	add	r0, sp, #448	; 0x1c0
    e5c6:	9300      	str	r3, [sp, #0]
    e5c8:	2102      	movs	r1, #2
    e5ca:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
    e5ce:	f7fe fd23 	bl	d018 <hash_to_field>
    map_to_g2(p, u[0], NULL);
    e5d2:	4632      	mov	r2, r6
    e5d4:	a970      	add	r1, sp, #448	; 0x1c0
    e5d6:	a828      	add	r0, sp, #160	; 0xa0
    e5d8:	f7ff fcb8 	bl	df4c <map_to_g2>
}
    e5dc:	e77d      	b.n	e4da <PAIRING_Aggregate_PK_in_G1+0x112>
                miller_loop_n(ctx->GT, ctx->Q, ctx->P, n);
    e5de:	4630      	mov	r0, r6
    e5e0:	f7ff fe50 	bl	e284 <miller_loop_n>
                ctx->ctrl |= AGGR_GT_SET;
    e5e4:	682b      	ldr	r3, [r5, #0]
    e5e6:	f043 0320 	orr.w	r3, r3, #32
    e5ea:	602b      	str	r3, [r5, #0]
    e5ec:	e7c1      	b.n	e572 <PAIRING_Aggregate_PK_in_G1+0x1aa>
            return BLST_PK_IS_INFINITY;
    e5ee:	2006      	movs	r0, #6
    e5f0:	e71c      	b.n	e42c <PAIRING_Aggregate_PK_in_G1+0x64>
        return BLST_AGGR_TYPE_MISMATCH;
    e5f2:	2004      	movs	r0, #4
    e5f4:	e71a      	b.n	e42c <PAIRING_Aggregate_PK_in_G1+0x64>
    return BLST_SUCCESS;
    e5f6:	4620      	mov	r0, r4
    e5f8:	e718      	b.n	e42c <PAIRING_Aggregate_PK_in_G1+0x64>
    e5fa:	bf00      	nop
    e5fc:	0001c5c8 	.word	0x0001c5c8

0000e600 <PAIRING_FinalVerify>:

    return BLST_SUCCESS;
}

static bool_t PAIRING_FinalVerify(const PAIRING *ctx, const vec384fp12 GTsig)
{
    e600:	b530      	push	{r4, r5, lr}
    vec384fp12 GT;

    if (!(ctx->ctrl & AGGR_GT_SET))
    e602:	6804      	ldr	r4, [r0, #0]
{
    e604:	4605      	mov	r5, r0
    if (!(ctx->ctrl & AGGR_GT_SET))
    e606:	f014 0020 	ands.w	r0, r4, #32
{
    e60a:	f5ad 7d59 	sub.w	sp, sp, #868	; 0x364
    if (!(ctx->ctrl & AGGR_GT_SET))
    e60e:	d00f      	beq.n	e630 <PAIRING_FinalVerify+0x30>
        return 0;

    if (GTsig != NULL) {
    e610:	b129      	cbz	r1, e61e <PAIRING_FinalVerify+0x1e>
        vec_copy(GT, GTsig, sizeof(GT));
    e612:	f44f 7210 	mov.w	r2, #576	; 0x240
    } else {
        /*
         * The aggregated signature was infinite, relation between the
         * hashes and the public keys has to be VERY special...
         */
        vec_copy(GT, BLS12_381_Rx.p12, sizeof(GT));
    e616:	a848      	add	r0, sp, #288	; 0x120
    e618:	f007 fc47 	bl	15eaa <vec_copy>
    e61c:	e016      	b.n	e64c <PAIRING_FinalVerify+0x4c>
    } else if (ctx->ctrl & AGGR_SIGN_SET) {
    e61e:	06e3      	lsls	r3, r4, #27
    e620:	d537      	bpl.n	e692 <PAIRING_FinalVerify+0x92>
        switch (ctx->ctrl & MIN_SIG_OR_PK) {
    e622:	f004 0403 	and.w	r4, r4, #3
    e626:	2c01      	cmp	r4, #1
    e628:	d005      	beq.n	e636 <PAIRING_FinalVerify+0x36>
    e62a:	2c02      	cmp	r4, #2
    e62c:	d028      	beq.n	e680 <PAIRING_FinalVerify+0x80>
                return 0;
    e62e:	4608      	mov	r0, r1
    final_exp(GT, GT);

    /* return GT==1 */
    return vec_is_equal(GT[0][0], BLS12_381_Rx.p2, sizeof(GT[0][0])) &
           vec_is_zero(GT[0][1], sizeof(GT) - sizeof(GT[0][0]));
}
    e630:	f50d 7d59 	add.w	sp, sp, #868	; 0x364
    e634:	bd30      	pop	{r4, r5, pc}
                POINTonE1_from_Jacobian(&AggrSign.e1, &ctx->AggrSign.e1);
    e636:	f505 7114 	add.w	r1, r5, #592	; 0x250
    e63a:	4668      	mov	r0, sp
    e63c:	f7fe fb4a 	bl	ccd4 <POINTonE1_from_Jacobian>
                miller_loop_n(GT, (const POINTonE2_affine *)&BLS12_381_G2,
    e640:	4623      	mov	r3, r4
    e642:	466a      	mov	r2, sp
    e644:	4915      	ldr	r1, [pc, #84]	; (e69c <PAIRING_FinalVerify+0x9c>)
                miller_loop_n(GT, (const POINTonE2_affine *)&AggrSign.e2,
    e646:	a848      	add	r0, sp, #288	; 0x120
    e648:	f7ff fe1c 	bl	e284 <miller_loop_n>
    conjugate_fp12(GT);
    e64c:	a848      	add	r0, sp, #288	; 0x120
    e64e:	f008 fd6a 	bl	17126 <conjugate_fp12>
    mul_fp12(GT, GT, ctx->GT);
    e652:	a948      	add	r1, sp, #288	; 0x120
    e654:	4608      	mov	r0, r1
    e656:	f105 0210 	add.w	r2, r5, #16
    e65a:	f009 f9c1 	bl	179e0 <mul_fp12>
    final_exp(GT, GT);
    e65e:	a948      	add	r1, sp, #288	; 0x120
    e660:	4608      	mov	r0, r1
    e662:	f00a f89f 	bl	187a4 <final_exp>
    return vec_is_equal(GT[0][0], BLS12_381_Rx.p2, sizeof(GT[0][0])) &
    e666:	2260      	movs	r2, #96	; 0x60
    e668:	490d      	ldr	r1, [pc, #52]	; (e6a0 <PAIRING_FinalVerify+0xa0>)
    e66a:	a848      	add	r0, sp, #288	; 0x120
    e66c:	f007 fc0b 	bl	15e86 <vec_is_equal>
           vec_is_zero(GT[0][1], sizeof(GT) - sizeof(GT[0][0]));
    e670:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
    return vec_is_equal(GT[0][0], BLS12_381_Rx.p2, sizeof(GT[0][0])) &
    e674:	4604      	mov	r4, r0
           vec_is_zero(GT[0][1], sizeof(GT) - sizeof(GT[0][0]));
    e676:	a860      	add	r0, sp, #384	; 0x180
    e678:	f007 fbf8 	bl	15e6c <vec_is_zero>
    return vec_is_equal(GT[0][0], BLS12_381_Rx.p2, sizeof(GT[0][0])) &
    e67c:	4020      	ands	r0, r4
    e67e:	e7d7      	b.n	e630 <PAIRING_FinalVerify+0x30>
                POINTonE2_from_Jacobian(&AggrSign.e2, &ctx->AggrSign.e2);
    e680:	f505 7114 	add.w	r1, r5, #592	; 0x250
    e684:	4668      	mov	r0, sp
    e686:	f7ff f8e5 	bl	d854 <POINTonE2_from_Jacobian>
                miller_loop_n(GT, (const POINTonE2_affine *)&AggrSign.e2,
    e68a:	2301      	movs	r3, #1
    e68c:	4669      	mov	r1, sp
    e68e:	4a05      	ldr	r2, [pc, #20]	; (e6a4 <PAIRING_FinalVerify+0xa4>)
    e690:	e7d9      	b.n	e646 <PAIRING_FinalVerify+0x46>
        vec_copy(GT, BLS12_381_Rx.p12, sizeof(GT));
    e692:	f44f 7210 	mov.w	r2, #576	; 0x240
    e696:	4902      	ldr	r1, [pc, #8]	; (e6a0 <PAIRING_FinalVerify+0xa0>)
    e698:	e7bd      	b.n	e616 <PAIRING_FinalVerify+0x16>
    e69a:	bf00      	nop
    e69c:	0001c418 	.word	0x0001c418
    e6a0:	0001c5c8 	.word	0x0001c5c8
    e6a4:	0001c388 	.word	0x0001c388

0000e6a8 <cmd_signature_verification>:
{
    e6a8:	b570      	push	{r4, r5, r6, lr}
    e6aa:	b092      	sub	sp, #72	; 0x48
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
    e6ac:	aa07      	add	r2, sp, #28
    e6ae:	4615      	mov	r5, r2
    e6b0:	4b12      	ldr	r3, [pc, #72]	; (e6fc <cmd_signature_verification+0x54>)
    e6b2:	f103 0628 	add.w	r6, r3, #40	; 0x28
    e6b6:	4614      	mov	r4, r2
    e6b8:	6818      	ldr	r0, [r3, #0]
    e6ba:	6859      	ldr	r1, [r3, #4]
    e6bc:	3308      	adds	r3, #8
    e6be:	c403      	stmia	r4!, {r0, r1}
    e6c0:	42b3      	cmp	r3, r6
    e6c2:	4622      	mov	r2, r4
    e6c4:	d1f7      	bne.n	e6b6 <cmd_signature_verification+0xe>
    e6c6:	8819      	ldrh	r1, [r3, #0]
    e6c8:	789b      	ldrb	r3, [r3, #2]
    e6ca:	8021      	strh	r1, [r4, #0]
    e6cc:	70a3      	strb	r3, [r4, #2]
        if(blst_core_verify_pk_in_g1(&pk2, &sig2, 1, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0) != BLST_SUCCESS){
    e6ce:	2300      	movs	r3, #0
    e6d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
    e6d4:	232b      	movs	r3, #43	; 0x2b
    e6d6:	e9cd 5301 	strd	r5, r3, [sp, #4]
    e6da:	2320      	movs	r3, #32
    e6dc:	2201      	movs	r2, #1
    e6de:	9300      	str	r3, [sp, #0]
    e6e0:	4907      	ldr	r1, [pc, #28]	; (e700 <cmd_signature_verification+0x58>)
    e6e2:	4b08      	ldr	r3, [pc, #32]	; (e704 <cmd_signature_verification+0x5c>)
    e6e4:	4808      	ldr	r0, [pc, #32]	; (e708 <cmd_signature_verification+0x60>)
    e6e6:	f00a fa5e 	bl	18ba6 <blst_core_verify_pk_in_g1>
    e6ea:	b128      	cbz	r0, e6f8 <cmd_signature_verification+0x50>
          printf("Error\n");
    e6ec:	4807      	ldr	r0, [pc, #28]	; (e70c <cmd_signature_verification+0x64>)
          printf("Success\n");
    e6ee:	f005 f92d 	bl	1394c <printf>
}
    e6f2:	2000      	movs	r0, #0
    e6f4:	b012      	add	sp, #72	; 0x48
    e6f6:	bd70      	pop	{r4, r5, r6, pc}
          printf("Success\n");
    e6f8:	4805      	ldr	r0, [pc, #20]	; (e710 <cmd_signature_verification+0x68>)
    e6fa:	e7f8      	b.n	e6ee <cmd_signature_verification+0x46>
    e6fc:	0001de23 	.word	0x0001de23
    e700:	200106bc 	.word	0x200106bc
    e704:	2001e440 	.word	0x2001e440
    e708:	2001065c 	.word	0x2001065c
    e70c:	0001de13 	.word	0x0001de13
    e710:	0001de1a 	.word	0x0001de1a

0000e714 <cmd_keygen>:
        size_t olen = random_number_len;
    e714:	2190      	movs	r1, #144	; 0x90
{
    e716:	b570      	push	{r4, r5, r6, lr}
    e718:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
        ret = spm_request_random_number(random_number, random_number_len, &olen);
    e71c:	aa03      	add	r2, sp, #12
    e71e:	a874      	add	r0, sp, #464	; 0x1d0
        size_t olen = random_number_len;
    e720:	9103      	str	r1, [sp, #12]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
    e722:	f00c fc74 	bl	1b00e <spm_request_random_number>
        if (ret != 0) {
    e726:	4601      	mov	r1, r0
    e728:	b110      	cbz	r0, e730 <cmd_keygen+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
    e72a:	4841      	ldr	r0, [pc, #260]	; (e830 <cmd_keygen+0x11c>)
    e72c:	f00a fda9 	bl	19282 <printk>
        for(int i = 0; i < sizeof(ikm); i++){
    e730:	a904      	add	r1, sp, #16
{
    e732:	2200      	movs	r2, #0
    e734:	460d      	mov	r5, r1
    e736:	ab74      	add	r3, sp, #464	; 0x1d0
          ikm[i] = random_number[i];
    e738:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
    e73c:	3201      	adds	r2, #1
    e73e:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
    e740:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
    e744:	d1f8      	bne.n	e738 <cmd_keygen+0x24>
        char info[] = {
    e746:	4b3b      	ldr	r3, [pc, #236]	; (e834 <cmd_keygen+0x120>)
    e748:	ac0c      	add	r4, sp, #48	; 0x30
    e74a:	f103 0620 	add.w	r6, r3, #32
    e74e:	4622      	mov	r2, r4
    e750:	6818      	ldr	r0, [r3, #0]
    e752:	6859      	ldr	r1, [r3, #4]
    e754:	3308      	adds	r3, #8
    e756:	c203      	stmia	r2!, {r0, r1}
    e758:	42b3      	cmp	r3, r6
    e75a:	4614      	mov	r4, r2
    e75c:	d1f7      	bne.n	e74e <cmd_keygen+0x3a>
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
    e75e:	2220      	movs	r2, #32
        secret_keys_store[keys_counter] = sk;
    e760:	4c35      	ldr	r4, [pc, #212]	; (e838 <cmd_keygen+0x124>)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
    e762:	4629      	mov	r1, r5
    e764:	4835      	ldr	r0, [pc, #212]	; (e83c <cmd_keygen+0x128>)
    e766:	9200      	str	r2, [sp, #0]
    e768:	ab0c      	add	r3, sp, #48	; 0x30
    e76a:	f7fe fe3f 	bl	d3ec <blst_keygen>
        secret_keys_store[keys_counter] = sk;
    e76e:	6823      	ldr	r3, [r4, #0]
    e770:	4a32      	ldr	r2, [pc, #200]	; (e83c <cmd_keygen+0x128>)
    e772:	4933      	ldr	r1, [pc, #204]	; (e840 <cmd_keygen+0x12c>)
    e774:	f102 0020 	add.w	r0, r2, #32
    e778:	eb01 1143 	add.w	r1, r1, r3, lsl #5
    e77c:	f852 5b04 	ldr.w	r5, [r2], #4
    e780:	4282      	cmp	r2, r0
    e782:	f841 5b04 	str.w	r5, [r1], #4
    e786:	d1f9      	bne.n	e77c <cmd_keygen+0x68>
        keys_counter++;
    e788:	3301      	adds	r3, #1
        blst_bendian_from_scalar(priv_key_bin, &sk);
    e78a:	492c      	ldr	r1, [pc, #176]	; (e83c <cmd_keygen+0x128>)
    e78c:	a814      	add	r0, sp, #80	; 0x50
        keys_counter++;
    e78e:	6023      	str	r3, [r4, #0]
        blst_bendian_from_scalar(priv_key_bin, &sk);
    e790:	f00a fa3c 	bl	18c0c <blst_bendian_from_scalar>
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
    e794:	2340      	movs	r3, #64	; 0x40
    e796:	2120      	movs	r1, #32
    e798:	aa28      	add	r2, sp, #160	; 0xa0
    e79a:	a814      	add	r0, sp, #80	; 0x50
    e79c:	f00a fcca 	bl	19134 <bin2hex>
    e7a0:	b910      	cbnz	r0, e7a8 <cmd_keygen+0x94>
          printf("Error2\n");
    e7a2:	4828      	ldr	r0, [pc, #160]	; (e844 <cmd_keygen+0x130>)
    e7a4:	f005 f8d2 	bl	1394c <printf>
        printf("Secret key: \n");
    e7a8:	4827      	ldr	r0, [pc, #156]	; (e848 <cmd_keygen+0x134>)
    e7aa:	f005 f8cf 	bl	1394c <printf>
        printf("0x");
    e7ae:	4827      	ldr	r0, [pc, #156]	; (e84c <cmd_keygen+0x138>)
    e7b0:	f005 f8cc 	bl	1394c <printf>
        printf("%s\n", priv_key_hex2);
    e7b4:	a928      	add	r1, sp, #160	; 0xa0
    e7b6:	4826      	ldr	r0, [pc, #152]	; (e850 <cmd_keygen+0x13c>)
    e7b8:	f005 f8c8 	bl	1394c <printf>
        blst_sk_to_pk_in_g1(&pk, &sk);
    e7bc:	491f      	ldr	r1, [pc, #124]	; (e83c <cmd_keygen+0x128>)
    e7be:	a850      	add	r0, sp, #320	; 0x140
    e7c0:	f7ff f822 	bl	d808 <blst_sk_to_pk_in_g1>
{   POINTonE1_to_affine(out, a);   }
    e7c4:	4823      	ldr	r0, [pc, #140]	; (e854 <cmd_keygen+0x140>)
    e7c6:	a950      	add	r1, sp, #320	; 0x140
    e7c8:	f7fe fab4 	bl	cd34 <POINTonE1_to_affine>
        blst_p1_compress(out, &pk);
    e7cc:	a950      	add	r1, sp, #320	; 0x140
    e7ce:	a81c      	add	r0, sp, #112	; 0x70
    e7d0:	f7fe faca 	bl	cd68 <blst_p1_compress>
        printf("Public key: \n");
    e7d4:	4820      	ldr	r0, [pc, #128]	; (e858 <cmd_keygen+0x144>)
    e7d6:	f005 f8b9 	bl	1394c <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
    e7da:	2360      	movs	r3, #96	; 0x60
    e7dc:	2130      	movs	r1, #48	; 0x30
    e7de:	aa38      	add	r2, sp, #224	; 0xe0
    e7e0:	a81c      	add	r0, sp, #112	; 0x70
    e7e2:	f00a fca7 	bl	19134 <bin2hex>
    e7e6:	b910      	cbnz	r0, e7ee <cmd_keygen+0xda>
          printf("Error3\n");
    e7e8:	481c      	ldr	r0, [pc, #112]	; (e85c <cmd_keygen+0x148>)
    e7ea:	f005 f8af 	bl	1394c <printf>
        int cont = keys_counter - 1;
    e7ee:	6823      	ldr	r3, [r4, #0]
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
    e7f0:	2460      	movs	r4, #96	; 0x60
    e7f2:	4a1b      	ldr	r2, [pc, #108]	; (e860 <cmd_keygen+0x14c>)
    e7f4:	ad38      	add	r5, sp, #224	; 0xe0
        int cont = keys_counter - 1;
    e7f6:	3b01      	subs	r3, #1
    e7f8:	fb04 2303 	mla	r3, r4, r3, r2
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
    e7fc:	462a      	mov	r2, r5
    e7fe:	f812 1b01 	ldrb.w	r1, [r2], #1
        for(int i = 0; i < 96; i++){
    e802:	3c01      	subs	r4, #1
            public_keys_hex_store[i+96*cont] = public_key_hex[i];
    e804:	f803 1b01 	strb.w	r1, [r3], #1
        for(int i = 0; i < 96; i++){
    e808:	d1f9      	bne.n	e7fe <cmd_keygen+0xea>
        printf("0x");
    e80a:	4810      	ldr	r0, [pc, #64]	; (e84c <cmd_keygen+0x138>)
    e80c:	f005 f89e 	bl	1394c <printf>
          printf("%c", public_key_hex[i]);
    e810:	4e14      	ldr	r6, [pc, #80]	; (e864 <cmd_keygen+0x150>)
    e812:	4630      	mov	r0, r6
    e814:	f815 1b01 	ldrb.w	r1, [r5], #1
        for(int i = 0; i < 96; i++) {
    e818:	3401      	adds	r4, #1
          printf("%c", public_key_hex[i]);
    e81a:	f005 f897 	bl	1394c <printf>
        for(int i = 0; i < 96; i++) {
    e81e:	2c60      	cmp	r4, #96	; 0x60
    e820:	d1f7      	bne.n	e812 <cmd_keygen+0xfe>
        printf("\n");
    e822:	4811      	ldr	r0, [pc, #68]	; (e868 <cmd_keygen+0x154>)
    e824:	f005 f892 	bl	1394c <printf>
}
    e828:	2000      	movs	r0, #0
    e82a:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
    e82e:	bd70      	pop	{r4, r5, r6, pc}
    e830:	0001de4e 	.word	0x0001de4e
    e834:	0001c2f8 	.word	0x0001c2f8
    e838:	20010658 	.word	0x20010658
    e83c:	2001e960 	.word	0x2001e960
    e840:	2001e820 	.word	0x2001e820
    e844:	0001de75 	.word	0x0001de75
    e848:	0001de7d 	.word	0x0001de7d
    e84c:	0001ddea 	.word	0x0001ddea
    e850:	0001ea44 	.word	0x0001ea44
    e854:	2001065c 	.word	0x2001065c
    e858:	0001dddc 	.word	0x0001dddc
    e85c:	0001de8b 	.word	0x0001de8b
    e860:	2001e460 	.word	0x2001e460
    e864:	0001ecf7 	.word	0x0001ecf7
    e868:	0001e915 	.word	0x0001e915

0000e86c <cmd_benchmark>:
	ARG_UNUSED(argv);

        unsigned char ikm[32];
	const int random_number_len = 144;     
        uint8_t random_number[random_number_len];
        size_t olen = random_number_len;
    e86c:	2190      	movs	r1, #144	; 0x90
{
    e86e:	b5f0      	push	{r4, r5, r6, r7, lr}
    e870:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
        int ret;

        ret = spm_request_random_number(random_number, random_number_len, &olen);
    e874:	aa04      	add	r2, sp, #16
    e876:	a8b0      	add	r0, sp, #704	; 0x2c0
        size_t olen = random_number_len;
    e878:	9104      	str	r1, [sp, #16]
        ret = spm_request_random_number(random_number, random_number_len, &olen);
    e87a:	f00c fbc8 	bl	1b00e <spm_request_random_number>
        if (ret != 0) {
    e87e:	4601      	mov	r1, r0
    e880:	b110      	cbz	r0, e888 <cmd_benchmark+0x1c>
           printk("Could not get random number (err: %d)\n", ret);
    e882:	488c      	ldr	r0, [pc, #560]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    e884:	f00a fcfd 	bl	19282 <printk>
        }

        for(int i = 0; i < sizeof(ikm); i++){
    e888:	a905      	add	r1, sp, #20
{
    e88a:	2200      	movs	r2, #0
    e88c:	460d      	mov	r5, r1
    e88e:	abb0      	add	r3, sp, #704	; 0x2c0
          ikm[i] = random_number[i];
    e890:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < sizeof(ikm); i++){
    e894:	3201      	adds	r2, #1
    e896:	2a20      	cmp	r2, #32
          ikm[i] = random_number[i];
    e898:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < sizeof(ikm); i++){
    e89c:	d1f8      	bne.n	e890 <cmd_benchmark+0x24>
        } 

        // key_info is an optional parameter.  This parameter MAY be used to derive
        // multiple independent keys from the same IKM.  By default, key_info is the empty string.
        char info[] = {
    e89e:	4b86      	ldr	r3, [pc, #536]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    e8a0:	ac0d      	add	r4, sp, #52	; 0x34
    e8a2:	f103 0620 	add.w	r6, r3, #32
    e8a6:	4622      	mov	r2, r4
    e8a8:	6818      	ldr	r0, [r3, #0]
    e8aa:	6859      	ldr	r1, [r3, #4]
    e8ac:	3308      	adds	r3, #8
    e8ae:	c203      	stmia	r2!, {r0, r1}
    e8b0:	42b3      	cmp	r3, r6
    e8b2:	4614      	mov	r4, r2
    e8b4:	d1f7      	bne.n	e8a6 <cmd_benchmark+0x3a>
	z_impl_k_timer_start(timer, duration, period);
    e8b6:	2200      	movs	r2, #0
    e8b8:	2300      	movs	r3, #0
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        k_timer_start(&my_timer, K_MSEC(3000), K_NO_WAIT);
        
        //Secret key (256-bit scalar)
        blst_keygen(&sk, ikm, sizeof(ikm), info, sizeof(info));
    e8ba:	2420      	movs	r4, #32
    e8bc:	e9cd 2300 	strd	r2, r3, [sp]
    e8c0:	487e      	ldr	r0, [pc, #504]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    e8c2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
    e8c6:	2300      	movs	r3, #0
    e8c8:	f007 f9a8 	bl	15c1c <z_impl_k_timer_start>
    e8cc:	4622      	mov	r2, r4
    e8ce:	ab0d      	add	r3, sp, #52	; 0x34
    e8d0:	4629      	mov	r1, r5
    e8d2:	487b      	ldr	r0, [pc, #492]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e8d4:	9400      	str	r4, [sp, #0]
    e8d6:	f7fe fd89 	bl	d3ec <blst_keygen>
                
        uint8_t priv_key_bin[32];
        blst_bendian_from_scalar(priv_key_bin, &sk);
    e8da:	4979      	ldr	r1, [pc, #484]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e8dc:	a815      	add	r0, sp, #84	; 0x54
    e8de:	f00a f995 	bl	18c0c <blst_bendian_from_scalar>

        char priv_key_hex2[64];
        if(bin2hex(priv_key_bin, sizeof(priv_key_bin), priv_key_hex2, sizeof(priv_key_hex2)) == 0) {
    e8e2:	2340      	movs	r3, #64	; 0x40
    e8e4:	4621      	mov	r1, r4
    e8e6:	aa3c      	add	r2, sp, #240	; 0xf0
    e8e8:	a815      	add	r0, sp, #84	; 0x54
    e8ea:	f00a fc23 	bl	19134 <bin2hex>
    e8ee:	b910      	cbnz	r0, e8f6 <cmd_benchmark+0x8a>
          printf("Error2\n");
    e8f0:	4874      	ldr	r0, [pc, #464]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
    e8f2:	f005 f82b 	bl	1394c <printf>
        }

        printf("Secret key: \n");
    e8f6:	4874      	ldr	r0, [pc, #464]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    e8f8:	f005 f828 	bl	1394c <printf>
        printf("0x");
    e8fc:	4873      	ldr	r0, [pc, #460]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    e8fe:	f005 f825 	bl	1394c <printf>
        printf("%s\n", priv_key_hex2);
    e902:	a93c      	add	r1, sp, #240	; 0xf0
    e904:	4872      	ldr	r0, [pc, #456]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    e906:	f005 f821 	bl	1394c <printf>

        //The secret key allow us to generate the associated public key
        blst_p1 pk;
        byte out[48];
        char public_key_hex[96];
        blst_sk_to_pk_in_g1(&pk, &sk);
    e90a:	a88c      	add	r0, sp, #560	; 0x230
    e90c:	496c      	ldr	r1, [pc, #432]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e90e:	f7fe ff7b 	bl	d808 <blst_sk_to_pk_in_g1>
    e912:	a98c      	add	r1, sp, #560	; 0x230
    e914:	486f      	ldr	r0, [pc, #444]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    e916:	f7fe fa0d 	bl	cd34 <POINTonE1_to_affine>
        blst_p1_to_affine(&pk2, &pk);
        blst_p1_compress(out, &pk);
    e91a:	a98c      	add	r1, sp, #560	; 0x230
    e91c:	a830      	add	r0, sp, #192	; 0xc0
    e91e:	f7fe fa23 	bl	cd68 <blst_p1_compress>

        uint32_t time_left;
        time_left = k_timer_remaining_get(&my_timer);
    e922:	f7fd ff07 	bl	c734 <k_timer_remaining_get.constprop.0>
    e926:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
    e928:	4864      	ldr	r0, [pc, #400]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    e92a:	f00d f8ec 	bl	1bb06 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);

        printf("Public key: \n");
    e92e:	486a      	ldr	r0, [pc, #424]	; (ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
    e930:	f005 f80c 	bl	1394c <printf>
        if(bin2hex(&out, sizeof(out), public_key_hex, sizeof(public_key_hex)) == 0) {
    e934:	2360      	movs	r3, #96	; 0x60
    e936:	2130      	movs	r1, #48	; 0x30
    e938:	aa5c      	add	r2, sp, #368	; 0x170
    e93a:	a830      	add	r0, sp, #192	; 0xc0
    e93c:	f00a fbfa 	bl	19134 <bin2hex>
    e940:	b910      	cbnz	r0, e948 <cmd_benchmark+0xdc>
          printf("Error3\n");
    e942:	4866      	ldr	r0, [pc, #408]	; (eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    e944:	f005 f802 	bl	1394c <printf>
        }
           
        printf("0x");
    e948:	4860      	ldr	r0, [pc, #384]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    e94a:	f004 ffff 	bl	1394c <printf>
        for(int i = 0; i < 96; i++) {
    e94e:	2600      	movs	r6, #0
          printf("%c", public_key_hex[i]);
    e950:	4f63      	ldr	r7, [pc, #396]	; (eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    e952:	ac5c      	add	r4, sp, #368	; 0x170
    e954:	4638      	mov	r0, r7
    e956:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 96; i++) {
    e95a:	3601      	adds	r6, #1
          printf("%c", public_key_hex[i]);
    e95c:	f004 fff6 	bl	1394c <printf>
        for(int i = 0; i < 96; i++) {
    e960:	2e60      	cmp	r6, #96	; 0x60
    e962:	d1f7      	bne.n	e954 <cmd_benchmark+0xe8>
        }
        printf("\n");
    e964:	485f      	ldr	r0, [pc, #380]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
    e966:	f004 fff1 	bl	1394c <printf>

        printf("\nBenchmark for key generation: %u ms\n", 3000-time_left);
    e96a:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
    e96e:	3108      	adds	r1, #8
    e970:	485d      	ldr	r0, [pc, #372]	; (eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    e972:	f004 ffeb 	bl	1394c <printf>
	z_impl_k_timer_start(timer, duration, period);
    e976:	2200      	movs	r2, #0
    e978:	2300      	movs	r3, #0
    e97a:	4850      	ldr	r0, [pc, #320]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    e97c:	e9cd 2300 	strd	r2, r3, [sp]
    e980:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
    e984:	2300      	movs	r3, #0
    e986:	f007 f949 	bl	15c1c <z_impl_k_timer_start>
        
        blst_p2 hash;
        char * msg_hex = "5656565656565656565656565656565656565656565656565656565656565656";
        uint8_t msg_bin[32];
             
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
    e98a:	4858      	ldr	r0, [pc, #352]	; (eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    e98c:	f00c fc42 	bl	1b214 <strlen>
    e990:	2320      	movs	r3, #32
    e992:	4601      	mov	r1, r0
    e994:	aa1d      	add	r2, sp, #116	; 0x74
    e996:	4855      	ldr	r0, [pc, #340]	; (eaec <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8c>)
    e998:	f00a fbf7 	bl	1918a <hex2bin>
    e99c:	b910      	cbnz	r0, e9a4 <cmd_benchmark+0x138>
          printf("Error4\n");
    e99e:	4854      	ldr	r0, [pc, #336]	; (eaf0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x90>)
    e9a0:	f004 ffd4 	bl	1394c <printf>
        }

        char message[64];
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
    e9a4:	2340      	movs	r3, #64	; 0x40
    e9a6:	2120      	movs	r1, #32
    e9a8:	aa4c      	add	r2, sp, #304	; 0x130
    e9aa:	a81d      	add	r0, sp, #116	; 0x74
    e9ac:	f00a fbc2 	bl	19134 <bin2hex>
    e9b0:	b910      	cbnz	r0, e9b8 <cmd_benchmark+0x14c>
          printf("Error5\n");
    e9b2:	4850      	ldr	r0, [pc, #320]	; (eaf4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x94>)
    e9b4:	f004 ffca 	bl	1394c <printf>
        }

        printf("\nMessage: \n");
    e9b8:	484f      	ldr	r0, [pc, #316]	; (eaf8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x98>)
    e9ba:	f004 ffc7 	bl	1394c <printf>
        printf("0x");
    e9be:	4843      	ldr	r0, [pc, #268]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    e9c0:	f004 ffc4 	bl	1394c <printf>
        printf("%s\n", message);
    e9c4:	4842      	ldr	r0, [pc, #264]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    e9c6:	a94c      	add	r1, sp, #304	; 0x130
    e9c8:	f004 ffc0 	bl	1394c <printf>
               
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
    e9cc:	4b4b      	ldr	r3, [pc, #300]	; (eafc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9c>)
    e9ce:	aa25      	add	r2, sp, #148	; 0x94
    e9d0:	f103 0528 	add.w	r5, r3, #40	; 0x28
    e9d4:	4614      	mov	r4, r2
    e9d6:	6818      	ldr	r0, [r3, #0]
    e9d8:	6859      	ldr	r1, [r3, #4]
    e9da:	3308      	adds	r3, #8
    e9dc:	c403      	stmia	r4!, {r0, r1}
    e9de:	42ab      	cmp	r3, r5
    e9e0:	4622      	mov	r2, r4
    e9e2:	d1f7      	bne.n	e9d4 <cmd_benchmark+0x168>
    e9e4:	8819      	ldrh	r1, [r3, #0]
    e9e6:	789b      	ldrb	r3, [r3, #2]
    e9e8:	8021      	strh	r1, [r4, #0]
    e9ea:	70a3      	strb	r3, [r4, #2]
}

void blst_hash_to_g2(POINTonE2 *p, const unsigned char *msg, size_t msg_len,
                                   const unsigned char *DST, size_t DST_len,
                                   const unsigned char *aug, size_t aug_len)
{   Hash_to_G2(p, msg, msg_len, DST, DST_len, aug, aug_len);   }
    e9ec:	2300      	movs	r3, #0
    e9ee:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e9f2:	232b      	movs	r3, #43	; 0x2b
    e9f4:	2220      	movs	r2, #32
    e9f6:	9300      	str	r3, [sp, #0]
    e9f8:	a91d      	add	r1, sp, #116	; 0x74
    e9fa:	ab25      	add	r3, sp, #148	; 0x94
    e9fc:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
    ea00:	f009 fcdf 	bl	183c2 <Hash_to_G2>
        //Obtain the point from a message
        blst_hash_to_g2(&hash, msg_bin, sizeof(msg_bin), dst, sizeof(dst), NULL, 0);

        time_left = k_timer_remaining_get(&my_timer);
    ea04:	f7fd fe96 	bl	c734 <k_timer_remaining_get.constprop.0>
    ea08:	4604      	mov	r4, r0
	z_impl_k_timer_stop(timer);
    ea0a:	482c      	ldr	r0, [pc, #176]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea0c:	f00d f87b 	bl	1bb06 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        printf("\nBenchmark for message hash: %u ms\n", 3000-time_left);
    ea10:	f5c4 613b 	rsb	r1, r4, #2992	; 0xbb0
    ea14:	3108      	adds	r1, #8
    ea16:	483a      	ldr	r0, [pc, #232]	; (eb00 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa0>)
    ea18:	f004 ff98 	bl	1394c <printf>
	z_impl_k_timer_start(timer, duration, period);
    ea1c:	2200      	movs	r2, #0
    ea1e:	2300      	movs	r3, #0
    ea20:	4826      	ldr	r0, [pc, #152]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea22:	e9cd 2300 	strd	r2, r3, [sp]
    ea26:	2300      	movs	r3, #0
    ea28:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
    ea2c:	f007 f8f6 	bl	15c1c <z_impl_k_timer_start>

void blst_sk_to_pk_in_g2(POINTonE2 *out, const pow256 SK)
{   POINTonE2_sign(out, &BLS12_381_G2, SK);   }

void blst_sign_pk_in_g1(POINTonE2 *out, const POINTonE2 *msg, const pow256 SK)
{   POINTonE2_sign(out, msg, SK);   }
    ea30:	4a23      	ldr	r2, [pc, #140]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    ea32:	f50d 619a 	add.w	r1, sp, #1232	; 0x4d0
    ea36:	f50d 60be 	add.w	r0, sp, #1520	; 0x5f0
    ea3a:	f7ff f8f3 	bl	dc24 <POINTonE2_sign>
{   POINTonE2_to_affine(out, a);   }
    ea3e:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
    ea42:	a8d4      	add	r0, sp, #848	; 0x350
    ea44:	f7fe ff36 	bl	d8b4 <POINTonE2_to_affine>
        byte out2[96];
        char sig_hex[192];

        blst_sign_pk_in_g1(&sig, &hash, &sk); 
        blst_p2_to_affine(&sig2, &sig);
        blst_p2_compress(out2, &sig);
    ea48:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
    ea4c:	a874      	add	r0, sp, #464	; 0x1d0
    ea4e:	f009 f933 	bl	17cb8 <blst_p2_compress>
        
        time_left = k_timer_remaining_get(&my_timer);
    ea52:	f7fd fe6f 	bl	c734 <k_timer_remaining_get.constprop.0>
    ea56:	4605      	mov	r5, r0
	z_impl_k_timer_stop(timer);
    ea58:	4818      	ldr	r0, [pc, #96]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea5a:	f00d f854 	bl	1bb06 <z_impl_k_timer_stop>
        k_timer_stop(&my_timer);
        
        printf("\nSignature: \n");
    ea5e:	4829      	ldr	r0, [pc, #164]	; (eb04 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa4>)
    ea60:	f004 ff74 	bl	1394c <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
    ea64:	23c0      	movs	r3, #192	; 0xc0
    ea66:	2160      	movs	r1, #96	; 0x60
    ea68:	f50d 6282 	add.w	r2, sp, #1040	; 0x410
    ea6c:	a874      	add	r0, sp, #464	; 0x1d0
    ea6e:	f00a fb61 	bl	19134 <bin2hex>
    ea72:	b910      	cbnz	r0, ea7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>
          printf("Error6\n");
    ea74:	4824      	ldr	r0, [pc, #144]	; (eb08 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xa8>)
    ea76:	f004 ff69 	bl	1394c <printf>
        }
        
        printf("0x");
    ea7a:	4814      	ldr	r0, [pc, #80]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    ea7c:	f004 ff66 	bl	1394c <printf>
        for(int i = 0; i < 192; i++) {
    ea80:	2600      	movs	r6, #0
          printf("%c", sig_hex[i]);
    ea82:	4f17      	ldr	r7, [pc, #92]	; (eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    ea84:	f50d 6482 	add.w	r4, sp, #1040	; 0x410
    ea88:	4638      	mov	r0, r7
    ea8a:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
    ea8e:	3601      	adds	r6, #1
          printf("%c", sig_hex[i]);
    ea90:	f004 ff5c 	bl	1394c <printf>
        for(int i = 0; i < 192; i++) {
    ea94:	2ec0      	cmp	r6, #192	; 0xc0
    ea96:	d1f7      	bne.n	ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
        }
        printf("\n");
    ea98:	4812      	ldr	r0, [pc, #72]	; (eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
    ea9a:	f004 ff57 	bl	1394c <printf>

        printf("\nBenchmark for signature: %u ms\n", 3000-time_left);
    ea9e:	f5c5 613b 	rsb	r1, r5, #2992	; 0xbb0
    eaa2:	3108      	adds	r1, #8
    eaa4:	4819      	ldr	r0, [pc, #100]	; (eb0c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xac>)
    eaa6:	f004 ff51 	bl	1394c <printf>

	return 0;
}
    eaaa:	2000      	movs	r0, #0
    eaac:	f20d 7d14 	addw	sp, sp, #1812	; 0x714
    eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eab2:	bf00      	nop
    eab4:	0001de4e 	.word	0x0001de4e
    eab8:	0001c2f8 	.word	0x0001c2f8
    eabc:	20010168 	.word	0x20010168
    eac0:	2001e960 	.word	0x2001e960
    eac4:	0001de75 	.word	0x0001de75
    eac8:	0001de7d 	.word	0x0001de7d
    eacc:	0001ddea 	.word	0x0001ddea
    ead0:	0001ea44 	.word	0x0001ea44
    ead4:	2001065c 	.word	0x2001065c
    ead8:	0001dddc 	.word	0x0001dddc
    eadc:	0001de8b 	.word	0x0001de8b
    eae0:	0001ecf7 	.word	0x0001ecf7
    eae4:	0001e915 	.word	0x0001e915
    eae8:	0001de93 	.word	0x0001de93
    eaec:	0001deb9 	.word	0x0001deb9
    eaf0:	0001defa 	.word	0x0001defa
    eaf4:	0001df02 	.word	0x0001df02
    eaf8:	0001df0a 	.word	0x0001df0a
    eafc:	0001de23 	.word	0x0001de23
    eb00:	0001df16 	.word	0x0001df16
    eb04:	0001df3a 	.word	0x0001df3a
    eb08:	0001df48 	.word	0x0001df48
    eb0c:	0001df50 	.word	0x0001df50

0000eb10 <public_key_to_sk>:
void public_key_to_sk(char * public_key_hex, blst_scalar sk){
    eb10:	b084      	sub	sp, #16
    eb12:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb14:	b0b1      	sub	sp, #196	; 0xc4
    eb16:	a837      	add	r0, sp, #220	; 0xdc
    eb18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    eb1c:	4b14      	ldr	r3, [pc, #80]	; (eb70 <public_key_to_sk+0x60>)
    eb1e:	2260      	movs	r2, #96	; 0x60
    eb20:	461f      	mov	r7, r3
    eb22:	a918      	add	r1, sp, #96	; 0x60
           aux2[i] = public_keys_hex_store[i];
    eb24:	f813 0b01 	ldrb.w	r0, [r3], #1
        for(int i = 0; i < 96; i++){
    eb28:	3a01      	subs	r2, #1
           aux2[i] = public_keys_hex_store[i];
    eb2a:	f801 0b01 	strb.w	r0, [r1], #1
        for(int i = 0; i < 96; i++){
    eb2e:	d1f9      	bne.n	eb24 <public_key_to_sk+0x14>
                  aux2[k] = public_keys_hex_store[k+96*cont];
    eb30:	2160      	movs	r1, #96	; 0x60
        for(int i = 0; i < keys_counter; i++){
    eb32:	4615      	mov	r5, r2
        int cont = keys_counter - 1;
    eb34:	4c0f      	ldr	r4, [pc, #60]	; (eb74 <public_key_to_sk+0x64>)
    eb36:	6826      	ldr	r6, [r4, #0]
    eb38:	3e01      	subs	r6, #1
                  aux2[k] = public_keys_hex_store[k+96*cont];
    eb3a:	434e      	muls	r6, r1
        for(int i = 0; i < keys_counter; i++){
    eb3c:	6823      	ldr	r3, [r4, #0]
    eb3e:	42ab      	cmp	r3, r5
    eb40:	dc04      	bgt.n	eb4c <public_key_to_sk+0x3c>
}
    eb42:	b031      	add	sp, #196	; 0xc4
    eb44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    eb48:	b004      	add	sp, #16
    eb4a:	4770      	bx	lr
            if (strcmp(aux, aux2) == 0){
    eb4c:	4668      	mov	r0, sp
    eb4e:	a918      	add	r1, sp, #96	; 0x60
    eb50:	f00c fb67 	bl	1b222 <strcmp>
    eb54:	2800      	cmp	r0, #0
    eb56:	d0f4      	beq.n	eb42 <public_key_to_sk+0x32>
    eb58:	2360      	movs	r3, #96	; 0x60
    eb5a:	19b9      	adds	r1, r7, r6
    eb5c:	aa18      	add	r2, sp, #96	; 0x60
                  aux2[k] = public_keys_hex_store[k+96*cont];
    eb5e:	f811 0b01 	ldrb.w	r0, [r1], #1
                for(int k = 0; k < 96; k++){
    eb62:	3b01      	subs	r3, #1
                  aux2[k] = public_keys_hex_store[k+96*cont];
    eb64:	f802 0b01 	strb.w	r0, [r2], #1
                for(int k = 0; k < 96; k++){
    eb68:	d1f9      	bne.n	eb5e <public_key_to_sk+0x4e>
        for(int i = 0; i < keys_counter; i++){
    eb6a:	3501      	adds	r5, #1
    eb6c:	e7e6      	b.n	eb3c <public_key_to_sk+0x2c>
    eb6e:	bf00      	nop
    eb70:	2001e460 	.word	0x2001e460
    eb74:	20010658 	.word	0x20010658

0000eb78 <cmd_signature_message>:
{
    eb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb7a:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
        public_key_to_sk(argv[1], sk_sign);
    eb7e:	466c      	mov	r4, sp
{
    eb80:	4617      	mov	r7, r2
        public_key_to_sk(argv[1], sk_sign);
    eb82:	ad0a      	add	r5, sp, #40	; 0x28
    eb84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    eb86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eb88:	682b      	ldr	r3, [r5, #0]
    eb8a:	ae07      	add	r6, sp, #28
    eb8c:	6023      	str	r3, [r4, #0]
    eb8e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
    eb92:	6878      	ldr	r0, [r7, #4]
    eb94:	f7ff ffbc 	bl	eb10 <public_key_to_sk>
        char * msg_hex = argv[2];
    eb98:	68bc      	ldr	r4, [r7, #8]
        if(hex2bin(msg_hex, strlen(msg_hex), &msg_bin, sizeof(msg_bin)) == 0) {
    eb9a:	4620      	mov	r0, r4
    eb9c:	f00c fb3a 	bl	1b214 <strlen>
    eba0:	2320      	movs	r3, #32
    eba2:	4601      	mov	r1, r0
    eba4:	4a2d      	ldr	r2, [pc, #180]	; (ec5c <cmd_signature_message+0xe4>)
    eba6:	4620      	mov	r0, r4
    eba8:	f00a faef 	bl	1918a <hex2bin>
    ebac:	b910      	cbnz	r0, ebb4 <cmd_signature_message+0x3c>
          printf("Error4\n");
    ebae:	482c      	ldr	r0, [pc, #176]	; (ec60 <cmd_signature_message+0xe8>)
    ebb0:	f004 fecc 	bl	1394c <printf>
        if(bin2hex(&msg_bin, sizeof(msg_bin), &message, sizeof(message)) == 0) {
    ebb4:	2340      	movs	r3, #64	; 0x40
    ebb6:	2120      	movs	r1, #32
    ebb8:	4828      	ldr	r0, [pc, #160]	; (ec5c <cmd_signature_message+0xe4>)
    ebba:	aa1a      	add	r2, sp, #104	; 0x68
    ebbc:	f00a faba 	bl	19134 <bin2hex>
    ebc0:	b910      	cbnz	r0, ebc8 <cmd_signature_message+0x50>
          printf("Error5\n");
    ebc2:	4828      	ldr	r0, [pc, #160]	; (ec64 <cmd_signature_message+0xec>)
    ebc4:	f004 fec2 	bl	1394c <printf>
        char dst[] = "BLS_SIG_BLS12381G2_XMD:SHA-256_SSWU_RO_POP"; //IETF BLS Signature V4
    ebc8:	4b27      	ldr	r3, [pc, #156]	; (ec68 <cmd_signature_message+0xf0>)
    ebca:	aa0f      	add	r2, sp, #60	; 0x3c
    ebcc:	f103 0528 	add.w	r5, r3, #40	; 0x28
    ebd0:	4614      	mov	r4, r2
    ebd2:	6818      	ldr	r0, [r3, #0]
    ebd4:	6859      	ldr	r1, [r3, #4]
    ebd6:	3308      	adds	r3, #8
    ebd8:	c403      	stmia	r4!, {r0, r1}
    ebda:	42ab      	cmp	r3, r5
    ebdc:	4622      	mov	r2, r4
    ebde:	d1f7      	bne.n	ebd0 <cmd_signature_message+0x58>
    ebe0:	8819      	ldrh	r1, [r3, #0]
    ebe2:	789b      	ldrb	r3, [r3, #2]
    ebe4:	8021      	strh	r1, [r4, #0]
    ebe6:	70a3      	strb	r3, [r4, #2]
    ebe8:	2300      	movs	r3, #0
    ebea:	e9cd 3301 	strd	r3, r3, [sp, #4]
    ebee:	232b      	movs	r3, #43	; 0x2b
    ebf0:	2220      	movs	r2, #32
    ebf2:	491a      	ldr	r1, [pc, #104]	; (ec5c <cmd_signature_message+0xe4>)
    ebf4:	481d      	ldr	r0, [pc, #116]	; (ec6c <cmd_signature_message+0xf4>)
    ebf6:	9300      	str	r3, [sp, #0]
    ebf8:	ab0f      	add	r3, sp, #60	; 0x3c
    ebfa:	f009 fbe2 	bl	183c2 <Hash_to_G2>
{   POINTonE2_sign(out, msg, SK);   }
    ebfe:	4632      	mov	r2, r6
    ec00:	491a      	ldr	r1, [pc, #104]	; (ec6c <cmd_signature_message+0xf4>)
    ec02:	a872      	add	r0, sp, #456	; 0x1c8
    ec04:	f7ff f80e 	bl	dc24 <POINTonE2_sign>
{   POINTonE2_to_affine(out, a);   }
    ec08:	4819      	ldr	r0, [pc, #100]	; (ec70 <cmd_signature_message+0xf8>)
    ec0a:	a972      	add	r1, sp, #456	; 0x1c8
    ec0c:	f7fe fe52 	bl	d8b4 <POINTonE2_to_affine>
        blst_p2_compress(out2, &sig);
    ec10:	a972      	add	r1, sp, #456	; 0x1c8
    ec12:	a82a      	add	r0, sp, #168	; 0xa8
    ec14:	f009 f850 	bl	17cb8 <blst_p2_compress>
        printf("Signature: \n");
    ec18:	4816      	ldr	r0, [pc, #88]	; (ec74 <cmd_signature_message+0xfc>)
    ec1a:	f004 fe97 	bl	1394c <printf>
        if(bin2hex(&out2, sizeof(out2), sig_hex, sizeof(sig_hex)) == 0) {
    ec1e:	23c0      	movs	r3, #192	; 0xc0
    ec20:	2160      	movs	r1, #96	; 0x60
    ec22:	aa42      	add	r2, sp, #264	; 0x108
    ec24:	a82a      	add	r0, sp, #168	; 0xa8
    ec26:	f00a fa85 	bl	19134 <bin2hex>
    ec2a:	b910      	cbnz	r0, ec32 <cmd_signature_message+0xba>
          printf("Error6\n");
    ec2c:	4812      	ldr	r0, [pc, #72]	; (ec78 <cmd_signature_message+0x100>)
    ec2e:	f004 fe8d 	bl	1394c <printf>
        printf("0x");
    ec32:	4812      	ldr	r0, [pc, #72]	; (ec7c <cmd_signature_message+0x104>)
    ec34:	f004 fe8a 	bl	1394c <printf>
        for(int i = 0; i < 192; i++) {
    ec38:	2500      	movs	r5, #0
          printf("%c", sig_hex[i]);
    ec3a:	4e11      	ldr	r6, [pc, #68]	; (ec80 <cmd_signature_message+0x108>)
    ec3c:	ac42      	add	r4, sp, #264	; 0x108
    ec3e:	4630      	mov	r0, r6
    ec40:	f814 1b01 	ldrb.w	r1, [r4], #1
        for(int i = 0; i < 192; i++) {
    ec44:	3501      	adds	r5, #1
          printf("%c", sig_hex[i]);
    ec46:	f004 fe81 	bl	1394c <printf>
        for(int i = 0; i < 192; i++) {
    ec4a:	2dc0      	cmp	r5, #192	; 0xc0
    ec4c:	d1f7      	bne.n	ec3e <cmd_signature_message+0xc6>
        printf("\n\n");
    ec4e:	480d      	ldr	r0, [pc, #52]	; (ec84 <cmd_signature_message+0x10c>)
    ec50:	f004 fe7c 	bl	1394c <printf>
}
    ec54:	2000      	movs	r0, #0
    ec56:	f50d 7d3b 	add.w	sp, sp, #748	; 0x2ec
    ec5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec5c:	2001e440 	.word	0x2001e440
    ec60:	0001defa 	.word	0x0001defa
    ec64:	0001df02 	.word	0x0001df02
    ec68:	0001de23 	.word	0x0001de23
    ec6c:	20010538 	.word	0x20010538
    ec70:	200106bc 	.word	0x200106bc
    ec74:	0001df3b 	.word	0x0001df3b
    ec78:	0001df48 	.word	0x0001df48
    ec7c:	0001ddea 	.word	0x0001ddea
    ec80:	0001ecf7 	.word	0x0001ecf7
    ec84:	0001e914 	.word	0x0001e914

0000ec88 <dynamic_cmd_get>:
}

/* dynamic command creation */
static void dynamic_cmd_get(size_t idx, struct shell_static_entry *entry)
{
	if (idx < dynamic_cmd_cnt) {
    ec88:	4b08      	ldr	r3, [pc, #32]	; (ecac <dynamic_cmd_get+0x24>)
    ec8a:	781b      	ldrb	r3, [r3, #0]
    ec8c:	4283      	cmp	r3, r0
    ec8e:	d90a      	bls.n	eca6 <dynamic_cmd_get+0x1e>
		/* m_dynamic_cmd_buffer must be sorted alphabetically to ensure
		 * correct CLI completion
		 */
		entry->syntax = dynamic_cmd_buffer[idx];
    ec90:	4b07      	ldr	r3, [pc, #28]	; (ecb0 <dynamic_cmd_get+0x28>)
    ec92:	eb00 1040 	add.w	r0, r0, r0, lsl #5
    ec96:	4418      	add	r0, r3
		entry->handler  = NULL;
    ec98:	2300      	movs	r3, #0
		entry->subcmd = NULL;
    ec9a:	e9c1 3302 	strd	r3, r3, [r1, #8]
		entry->help = "Show dynamic command name.";
    ec9e:	4b05      	ldr	r3, [pc, #20]	; (ecb4 <dynamic_cmd_get+0x2c>)
		entry->syntax = dynamic_cmd_buffer[idx];
    eca0:	6008      	str	r0, [r1, #0]
		entry->help = "Show dynamic command name.";
    eca2:	604b      	str	r3, [r1, #4]
    eca4:	4770      	bx	lr
	} else {
		/* if there are no more dynamic commands available syntax
		 * must be set to NULL.
		 */
		entry->syntax = NULL;
    eca6:	2300      	movs	r3, #0
    eca8:	600b      	str	r3, [r1, #0]
	}
}
    ecaa:	4770      	bx	lr
    ecac:	2001ec14 	.word	0x2001ec14
    ecb0:	2001e980 	.word	0x2001e980
    ecb4:	0001e120 	.word	0x0001e120

0000ecb8 <cmd_dynamic_show>:
{
    ecb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (dynamic_cmd_cnt == 0U) {
    ecbc:	4d12      	ldr	r5, [pc, #72]	; (ed08 <cmd_dynamic_show+0x50>)
{
    ecbe:	4606      	mov	r6, r0
	if (dynamic_cmd_cnt == 0U) {
    ecc0:	782a      	ldrb	r2, [r5, #0]
    ecc2:	b942      	cbnz	r2, ecd6 <cmd_dynamic_show+0x1e>
		shell_warn(shell, "Please add some commands first.");
    ecc4:	2104      	movs	r1, #4
    ecc6:	4a11      	ldr	r2, [pc, #68]	; (ed0c <cmd_dynamic_show+0x54>)
    ecc8:	f00b fa63 	bl	1a192 <shell_fprintf>
    eccc:	f06f 0007 	mvn.w	r0, #7
}
    ecd0:	b002      	add	sp, #8
    ecd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	shell_print(shell, "Dynamic command list:");
    ecd6:	2100      	movs	r1, #0
    ecd8:	4a0d      	ldr	r2, [pc, #52]	; (ed10 <cmd_dynamic_show+0x58>)
    ecda:	f00b fa5a 	bl	1a192 <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
    ecde:	2400      	movs	r4, #0
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
    ece0:	4f0c      	ldr	r7, [pc, #48]	; (ed14 <cmd_dynamic_show+0x5c>)
    ece2:	f8df 8034 	ldr.w	r8, [pc, #52]	; ed18 <cmd_dynamic_show+0x60>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
    ece6:	7829      	ldrb	r1, [r5, #0]
    ece8:	b2e3      	uxtb	r3, r4
    ecea:	4299      	cmp	r1, r3
    ecec:	d801      	bhi.n	ecf2 <cmd_dynamic_show+0x3a>
	return 0;
    ecee:	2000      	movs	r0, #0
    ecf0:	e7ee      	b.n	ecd0 <cmd_dynamic_show+0x18>
		shell_print(shell, "[%3d] %s", i, dynamic_cmd_buffer[i]);
    ecf2:	eb03 1143 	add.w	r1, r3, r3, lsl #5
    ecf6:	4439      	add	r1, r7
    ecf8:	9100      	str	r1, [sp, #0]
    ecfa:	4642      	mov	r2, r8
    ecfc:	2100      	movs	r1, #0
    ecfe:	4630      	mov	r0, r6
    ed00:	f00b fa47 	bl	1a192 <shell_fprintf>
	for (uint8_t i = 0; i < dynamic_cmd_cnt; i++) {
    ed04:	3401      	adds	r4, #1
    ed06:	e7ee      	b.n	ece6 <cmd_dynamic_show+0x2e>
    ed08:	2001ec14 	.word	0x2001ec14
    ed0c:	0001e13b 	.word	0x0001e13b
    ed10:	0001e15c 	.word	0x0001e15c
    ed14:	2001e980 	.word	0x2001e980
    ed18:	0001e173 	.word	0x0001e173

0000ed1c <cmd_dynamic_execute>:
{
    ed1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    ed20:	4606      	mov	r6, r0
    ed22:	4615      	mov	r5, r2
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
    ed24:	2700      	movs	r7, #0
    ed26:	f8df 8058 	ldr.w	r8, [pc, #88]	; ed80 <cmd_dynamic_execute+0x64>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
    ed2a:	f8df 9058 	ldr.w	r9, [pc, #88]	; ed84 <cmd_dynamic_execute+0x68>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
    ed2e:	f898 2000 	ldrb.w	r2, [r8]
    ed32:	b2fb      	uxtb	r3, r7
    ed34:	429a      	cmp	r2, r3
    ed36:	6869      	ldr	r1, [r5, #4]
    ed38:	d809      	bhi.n	ed4e <cmd_dynamic_execute+0x32>
	shell_error(shell, "%s: uknown parameter: %s", argv[0], argv[1]);
    ed3a:	9100      	str	r1, [sp, #0]
    ed3c:	4630      	mov	r0, r6
    ed3e:	2102      	movs	r1, #2
    ed40:	682b      	ldr	r3, [r5, #0]
    ed42:	4a0d      	ldr	r2, [pc, #52]	; (ed78 <cmd_dynamic_execute+0x5c>)
    ed44:	f00b fa25 	bl	1a192 <shell_fprintf>
	return -ENOEXEC;
    ed48:	f06f 0407 	mvn.w	r4, #7
    ed4c:	e00f      	b.n	ed6e <cmd_dynamic_execute+0x52>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
    ed4e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    ed52:	eb09 0003 	add.w	r0, r9, r3
    ed56:	f00c fa64 	bl	1b222 <strcmp>
    ed5a:	3701      	adds	r7, #1
    ed5c:	4604      	mov	r4, r0
    ed5e:	2800      	cmp	r0, #0
    ed60:	d1e5      	bne.n	ed2e <cmd_dynamic_execute+0x12>
			shell_print(shell, "dynamic command: %s", argv[1]);
    ed62:	4601      	mov	r1, r0
    ed64:	686b      	ldr	r3, [r5, #4]
    ed66:	4630      	mov	r0, r6
    ed68:	4a04      	ldr	r2, [pc, #16]	; (ed7c <cmd_dynamic_execute+0x60>)
    ed6a:	f00b fa12 	bl	1a192 <shell_fprintf>
}
    ed6e:	4620      	mov	r0, r4
    ed70:	b003      	add	sp, #12
    ed72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ed76:	bf00      	nop
    ed78:	0001e192 	.word	0x0001e192
    ed7c:	0001e17d 	.word	0x0001e17d
    ed80:	2001ec14 	.word	0x2001ec14
    ed84:	2001e980 	.word	0x2001e980

0000ed88 <cmd_dynamic_remove>:
{
    ed88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
    ed8c:	f8df a08c 	ldr.w	sl, [pc, #140]	; ee1c <cmd_dynamic_remove+0x94>
{
    ed90:	4693      	mov	fp, r2
    ed92:	4606      	mov	r6, r0
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
    ed94:	2200      	movs	r2, #0
    ed96:	46d0      	mov	r8, sl
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
    ed98:	f8df 9084 	ldr.w	r9, [pc, #132]	; ee20 <cmd_dynamic_remove+0x98>
	for (uint8_t idx = 0; idx <  dynamic_cmd_cnt; idx++) {
    ed9c:	f89a 1000 	ldrb.w	r1, [sl]
    eda0:	b2d4      	uxtb	r4, r2
    eda2:	42a1      	cmp	r1, r4
    eda4:	f8db 3004 	ldr.w	r3, [fp, #4]
    eda8:	d807      	bhi.n	edba <cmd_dynamic_remove+0x32>
	shell_error(shell, "did not find command: %s", argv[1]);
    edaa:	2102      	movs	r1, #2
    edac:	4630      	mov	r0, r6
    edae:	4a19      	ldr	r2, [pc, #100]	; (ee14 <cmd_dynamic_remove+0x8c>)
    edb0:	f00b f9ef 	bl	1a192 <shell_fprintf>
	return -ENOEXEC;
    edb4:	f06f 0507 	mvn.w	r5, #7
    edb8:	e01a      	b.n	edf0 <cmd_dynamic_remove+0x68>
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
    edba:	eb04 1744 	add.w	r7, r4, r4, lsl #5
    edbe:	444f      	add	r7, r9
    edc0:	4619      	mov	r1, r3
    edc2:	4638      	mov	r0, r7
    edc4:	9201      	str	r2, [sp, #4]
    edc6:	f00c fa2c 	bl	1b222 <strcmp>
    edca:	9a01      	ldr	r2, [sp, #4]
    edcc:	4605      	mov	r5, r0
    edce:	3201      	adds	r2, #1
    edd0:	2800      	cmp	r0, #0
    edd2:	d1e3      	bne.n	ed9c <cmd_dynamic_remove+0x14>
			if (idx == MAX_CMD_CNT - 1) {
    edd4:	2c13      	cmp	r4, #19
    edd6:	d10f      	bne.n	edf8 <cmd_dynamic_remove+0x70>
				dynamic_cmd_buffer[idx][0] = '\0';
    edd8:	f889 0273 	strb.w	r0, [r9, #627]	; 0x273
			--dynamic_cmd_cnt;
    eddc:	f898 3000 	ldrb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
    ede0:	2100      	movs	r1, #0
			--dynamic_cmd_cnt;
    ede2:	3b01      	subs	r3, #1
			shell_print(shell, "command removed successfully");
    ede4:	4630      	mov	r0, r6
    ede6:	4a0c      	ldr	r2, [pc, #48]	; (ee18 <cmd_dynamic_remove+0x90>)
			--dynamic_cmd_cnt;
    ede8:	f888 3000 	strb.w	r3, [r8]
			shell_print(shell, "command removed successfully");
    edec:	f00b f9d1 	bl	1a192 <shell_fprintf>
}
    edf0:	4628      	mov	r0, r5
    edf2:	b003      	add	sp, #12
    edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					(dynamic_cmd_cnt - idx));
    edf8:	f89a 2000 	ldrb.w	r2, [sl]
				memmove(dynamic_cmd_buffer[idx],
    edfc:	4638      	mov	r0, r7
					(dynamic_cmd_cnt - idx));
    edfe:	1b12      	subs	r2, r2, r4
					dynamic_cmd_buffer[idx + 1],
    ee00:	3401      	adds	r4, #1
    ee02:	eb04 1444 	add.w	r4, r4, r4, lsl #5
				memmove(dynamic_cmd_buffer[idx],
    ee06:	eb02 1242 	add.w	r2, r2, r2, lsl #5
    ee0a:	eb09 0104 	add.w	r1, r9, r4
    ee0e:	f00c fa33 	bl	1b278 <memmove>
    ee12:	e7e3      	b.n	eddc <cmd_dynamic_remove+0x54>
    ee14:	0001e1ca 	.word	0x0001e1ca
    ee18:	0001e1ac 	.word	0x0001e1ac
    ee1c:	2001ec14 	.word	0x2001ec14
    ee20:	2001e980 	.word	0x2001e980

0000ee24 <cmd_dynamic_add>:
{
    ee24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
    ee28:	4d29      	ldr	r5, [pc, #164]	; (eed0 <cmd_dynamic_add+0xac>)
{
    ee2a:	4604      	mov	r4, r0
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
    ee2c:	782b      	ldrb	r3, [r5, #0]
{
    ee2e:	4616      	mov	r6, r2
	if (dynamic_cmd_cnt >= MAX_CMD_CNT) {
    ee30:	2b13      	cmp	r3, #19
    ee32:	d907      	bls.n	ee44 <cmd_dynamic_add+0x20>
		shell_error(shell, "command limit reached");
    ee34:	2102      	movs	r1, #2
    ee36:	4a27      	ldr	r2, [pc, #156]	; (eed4 <cmd_dynamic_add+0xb0>)
			shell_error(shell, "duplicated command");
    ee38:	f00b f9ab 	bl	1a192 <shell_fprintf>
			return -ENOEXEC;
    ee3c:	f06f 0007 	mvn.w	r0, #7
}
    ee40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	cmd_len = strlen(argv[1]);
    ee44:	6850      	ldr	r0, [r2, #4]
    ee46:	f00c f9e5 	bl	1b214 <strlen>
    ee4a:	b280      	uxth	r0, r0
	if (cmd_len >= MAX_CMD_LEN) {
    ee4c:	2820      	cmp	r0, #32
    ee4e:	d80f      	bhi.n	ee70 <cmd_dynamic_add+0x4c>
    ee50:	2300      	movs	r3, #0
    ee52:	6877      	ldr	r7, [r6, #4]
	for (idx = 0U; idx < cmd_len; idx++) {
    ee54:	b29a      	uxth	r2, r3
    ee56:	4290      	cmp	r0, r2
    ee58:	d80e      	bhi.n	ee78 <cmd_dynamic_add+0x54>
    ee5a:	4f1f      	ldr	r7, [pc, #124]	; (eed8 <cmd_dynamic_add+0xb4>)
    ee5c:	f04f 0800 	mov.w	r8, #0
    ee60:	46b9      	mov	r9, r7
		if (!strcmp(dynamic_cmd_buffer[idx], argv[1])) {
    ee62:	4638      	mov	r0, r7
    ee64:	6871      	ldr	r1, [r6, #4]
    ee66:	f00c f9dc 	bl	1b222 <strcmp>
    ee6a:	b990      	cbnz	r0, ee92 <cmd_dynamic_add+0x6e>
			shell_error(shell, "duplicated command");
    ee6c:	4a1b      	ldr	r2, [pc, #108]	; (eedc <cmd_dynamic_add+0xb8>)
    ee6e:	e000      	b.n	ee72 <cmd_dynamic_add+0x4e>
		shell_error(shell, "too long command");
    ee70:	4a1b      	ldr	r2, [pc, #108]	; (eee0 <cmd_dynamic_add+0xbc>)
			shell_error(shell, "duplicated command");
    ee72:	2102      	movs	r1, #2
    ee74:	4620      	mov	r0, r4
    ee76:	e7df      	b.n	ee38 <cmd_dynamic_add+0x14>
		if (!isalnum((int)(argv[1][idx]))) {
    ee78:	5cfa      	ldrb	r2, [r7, r3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    ee7a:	f042 0120 	orr.w	r1, r2, #32
    ee7e:	3961      	subs	r1, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
    ee80:	2919      	cmp	r1, #25
    ee82:	d904      	bls.n	ee8e <cmd_dynamic_add+0x6a>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ee84:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
    ee86:	2a09      	cmp	r2, #9
    ee88:	d901      	bls.n	ee8e <cmd_dynamic_add+0x6a>
			shell_error(shell,
    ee8a:	4a16      	ldr	r2, [pc, #88]	; (eee4 <cmd_dynamic_add+0xc0>)
    ee8c:	e7f1      	b.n	ee72 <cmd_dynamic_add+0x4e>
	for (idx = 0U; idx < cmd_len; idx++) {
    ee8e:	3301      	adds	r3, #1
    ee90:	e7e0      	b.n	ee54 <cmd_dynamic_add+0x30>
	for (idx = 0U; idx < MAX_CMD_CNT; idx++) {
    ee92:	f108 0801 	add.w	r8, r8, #1
    ee96:	f1b8 0f14 	cmp.w	r8, #20
    ee9a:	f107 0721 	add.w	r7, r7, #33	; 0x21
    ee9e:	d1e0      	bne.n	ee62 <cmd_dynamic_add+0x3e>
	sprintf(dynamic_cmd_buffer[dynamic_cmd_cnt++], "%s", argv[1]);
    eea0:	7828      	ldrb	r0, [r5, #0]
    eea2:	6872      	ldr	r2, [r6, #4]
    eea4:	1c43      	adds	r3, r0, #1
    eea6:	eb00 1040 	add.w	r0, r0, r0, lsl #5
    eeaa:	490f      	ldr	r1, [pc, #60]	; (eee8 <cmd_dynamic_add+0xc4>)
    eeac:	4448      	add	r0, r9
    eeae:	702b      	strb	r3, [r5, #0]
    eeb0:	f004 fd34 	bl	1391c <sprintf>
	qsort(dynamic_cmd_buffer, dynamic_cmd_cnt,
    eeb4:	2221      	movs	r2, #33	; 0x21
    eeb6:	4b0d      	ldr	r3, [pc, #52]	; (eeec <cmd_dynamic_add+0xc8>)
    eeb8:	7829      	ldrb	r1, [r5, #0]
    eeba:	4807      	ldr	r0, [pc, #28]	; (eed8 <cmd_dynamic_add+0xb4>)
    eebc:	f009 fee6 	bl	18c8c <qsort>
	shell_print(shell, "command added successfully");
    eec0:	4620      	mov	r0, r4
    eec2:	2100      	movs	r1, #0
    eec4:	4a0a      	ldr	r2, [pc, #40]	; (eef0 <cmd_dynamic_add+0xcc>)
    eec6:	f00b f964 	bl	1a192 <shell_fprintf>
	return 0;
    eeca:	2000      	movs	r0, #0
    eecc:	e7b8      	b.n	ee40 <cmd_dynamic_add+0x1c>
    eece:	bf00      	nop
    eed0:	2001ec14 	.word	0x2001ec14
    eed4:	0001e1e4 	.word	0x0001e1e4
    eed8:	2001e980 	.word	0x2001e980
    eedc:	0001e24b 	.word	0x0001e24b
    eee0:	0001e1fb 	.word	0x0001e1fb
    eee4:	0001e20d 	.word	0x0001e20d
    eee8:	0001ea3f 	.word	0x0001ea3f
    eeec:	00018c33 	.word	0x00018c33
    eef0:	0001e25f 	.word	0x0001e25f

0000eef4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    eef4:	680b      	ldr	r3, [r1, #0]
    eef6:	3301      	adds	r3, #1
    eef8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    eefa:	4b01      	ldr	r3, [pc, #4]	; (ef00 <char_out+0xc>)
    eefc:	681b      	ldr	r3, [r3, #0]
    eefe:	4718      	bx	r3
    ef00:	20010000 	.word	0x20010000

0000ef04 <__printk_hook_install>:
	_char_out = fn;
    ef04:	4b01      	ldr	r3, [pc, #4]	; (ef0c <__printk_hook_install+0x8>)
    ef06:	6018      	str	r0, [r3, #0]
}
    ef08:	4770      	bx	lr
    ef0a:	bf00      	nop
    ef0c:	20010000 	.word	0x20010000

0000ef10 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    ef10:	b507      	push	{r0, r1, r2, lr}
    ef12:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    ef14:	2100      	movs	r1, #0
{
    ef16:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    ef18:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    ef1a:	4803      	ldr	r0, [pc, #12]	; (ef28 <vprintk+0x18>)
    ef1c:	a901      	add	r1, sp, #4
    ef1e:	f000 fad9 	bl	f4d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    ef22:	b003      	add	sp, #12
    ef24:	f85d fb04 	ldr.w	pc, [sp], #4
    ef28:	0000eef5 	.word	0x0000eef5

0000ef2c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    ef2c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    ef2e:	2500      	movs	r5, #0
{
    ef30:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    ef32:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    ef36:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    ef38:	a901      	add	r1, sp, #4
    ef3a:	4805      	ldr	r0, [pc, #20]	; (ef50 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    ef3c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    ef3e:	f000 fac9 	bl	f4d4 <cbvprintf>

	if (ctx.count < ctx.max) {
    ef42:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    ef46:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    ef48:	bfb8      	it	lt
    ef4a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    ef4c:	b005      	add	sp, #20
    ef4e:	bd30      	pop	{r4, r5, pc}
    ef50:	0001925d 	.word	0x0001925d

0000ef54 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    ef54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ef58:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    ef5c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    ef5e:	f019 0808 	ands.w	r8, r9, #8
{
    ef62:	4693      	mov	fp, r2
	if (processing) {
    ef64:	d00d      	beq.n	ef82 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    ef66:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    ef68:	bf0c      	ite	eq
    ef6a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    ef6e:	f049 0920 	orrne.w	r9, r9, #32
    ef72:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    ef76:	f38b 8811 	msr	BASEPRI, fp
    ef7a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    ef7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ef82:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    ef86:	2902      	cmp	r1, #2
    ef88:	d107      	bne.n	ef9a <process_event+0x46>
			evt = process_recheck(mgr);
    ef8a:	4620      	mov	r0, r4
    ef8c:	f00a f993 	bl	192b6 <process_recheck>
		if (evt == EVT_NOP) {
    ef90:	2800      	cmp	r0, #0
    ef92:	d0f0      	beq.n	ef76 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    ef94:	2801      	cmp	r0, #1
    ef96:	8b23      	ldrh	r3, [r4, #24]
    ef98:	d150      	bne.n	f03c <process_event+0xe8>
			res = mgr->last_res;
    ef9a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ef9c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    ef9e:	2f00      	cmp	r7, #0
    efa0:	da15      	bge.n	efce <process_event+0x7a>
		*clients = mgr->clients;
    efa2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    efa4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    efa8:	e9c4 8800 	strd	r8, r8, [r4]
    efac:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    efb0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    efb2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    efb4:	8b21      	ldrh	r1, [r4, #24]
    efb6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    efba:	45ca      	cmp	sl, r9
    efbc:	d002      	beq.n	efc4 <process_event+0x70>
		if (do_monitors
    efbe:	68a3      	ldr	r3, [r4, #8]
    efc0:	2b00      	cmp	r3, #0
    efc2:	d15c      	bne.n	f07e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    efc4:	b90d      	cbnz	r5, efca <process_event+0x76>
		    || (transit != NULL)) {
    efc6:	2e00      	cmp	r6, #0
    efc8:	d074      	beq.n	f0b4 <process_event+0x160>
    efca:	2300      	movs	r3, #0
    efcc:	e058      	b.n	f080 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    efce:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    efd2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    efd4:	2a01      	cmp	r2, #1
    efd6:	d820      	bhi.n	f01a <process_event+0xc6>
		*clients = mgr->clients;
    efd8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    efdc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    efde:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    efe0:	b289      	uxth	r1, r1
	list->tail = NULL;
    efe2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    efe6:	d10c      	bne.n	f002 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    efe8:	2d00      	cmp	r5, #0
    efea:	462b      	mov	r3, r5
    efec:	bf38      	it	cc
    efee:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    eff0:	b12b      	cbz	r3, effe <process_event+0xaa>
				mgr->refs += 1U;
    eff2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    eff4:	681b      	ldr	r3, [r3, #0]
    eff6:	3201      	adds	r2, #1
    eff8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    effa:	2b00      	cmp	r3, #0
    effc:	d1f8      	bne.n	eff0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    effe:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    f002:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    f004:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    f006:	f00a f956 	bl	192b6 <process_recheck>
    f00a:	4606      	mov	r6, r0
    f00c:	2800      	cmp	r0, #0
    f00e:	d0d1      	beq.n	efb4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f010:	8b23      	ldrh	r3, [r4, #24]
    f012:	f043 0320 	orr.w	r3, r3, #32
    f016:	8323      	strh	r3, [r4, #24]
    f018:	e7cb      	b.n	efb2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    f01a:	2b04      	cmp	r3, #4
    f01c:	d10c      	bne.n	f038 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f01e:	f021 0107 	bic.w	r1, r1, #7
    f022:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    f024:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    f026:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    f028:	f00a f945 	bl	192b6 <process_recheck>
    f02c:	4605      	mov	r5, r0
    f02e:	2800      	cmp	r0, #0
    f030:	d0bf      	beq.n	efb2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f032:	f041 0120 	orr.w	r1, r1, #32
    f036:	8321      	strh	r1, [r4, #24]
    f038:	2500      	movs	r5, #0
    f03a:	e7ba      	b.n	efb2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    f03c:	2803      	cmp	r0, #3
    f03e:	d109      	bne.n	f054 <process_event+0x100>
			transit = mgr->transitions->start;
    f040:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f042:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    f046:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f048:	f043 0306 	orr.w	r3, r3, #6
}
    f04c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    f04e:	8323      	strh	r3, [r4, #24]
		res = 0;
    f050:	462f      	mov	r7, r5
    f052:	e7af      	b.n	efb4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    f054:	2804      	cmp	r0, #4
    f056:	d106      	bne.n	f066 <process_event+0x112>
			transit = mgr->transitions->stop;
    f058:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f05a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    f05e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f060:	f043 0304 	orr.w	r3, r3, #4
    f064:	e7f2      	b.n	f04c <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    f066:	2805      	cmp	r0, #5
    f068:	d106      	bne.n	f078 <process_event+0x124>
			transit = mgr->transitions->reset;
    f06a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f06c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    f070:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f072:	f043 0305 	orr.w	r3, r3, #5
    f076:	e7e9      	b.n	f04c <process_event+0xf8>
    f078:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    f07a:	462e      	mov	r6, r5
    f07c:	e7e8      	b.n	f050 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    f07e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    f080:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    f084:	8321      	strh	r1, [r4, #24]
    f086:	f38b 8811 	msr	BASEPRI, fp
    f08a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    f08e:	bb03      	cbnz	r3, f0d2 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    f090:	2d00      	cmp	r5, #0
    f092:	d133      	bne.n	f0fc <process_event+0x1a8>
			if (transit != NULL) {
    f094:	b116      	cbz	r6, f09c <process_event+0x148>
				transit(mgr, transition_complete);
    f096:	4620      	mov	r0, r4
    f098:	4920      	ldr	r1, [pc, #128]	; (f11c <process_event+0x1c8>)
    f09a:	47b0      	blx	r6
	__asm__ volatile(
    f09c:	f04f 0320 	mov.w	r3, #32
    f0a0:	f3ef 8b11 	mrs	fp, BASEPRI
    f0a4:	f383 8811 	msr	BASEPRI, r3
    f0a8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    f0ac:	8b23      	ldrh	r3, [r4, #24]
    f0ae:	f023 0308 	bic.w	r3, r3, #8
    f0b2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    f0b4:	8b23      	ldrh	r3, [r4, #24]
    f0b6:	06da      	lsls	r2, r3, #27
    f0b8:	d528      	bpl.n	f10c <process_event+0x1b8>
			evt = EVT_COMPLETE;
    f0ba:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    f0bc:	f023 0310 	bic.w	r3, r3, #16
    f0c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    f0c2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    f0c6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    f0ca:	2900      	cmp	r1, #0
    f0cc:	f47f af5b 	bne.w	ef86 <process_event+0x32>
out:
    f0d0:	e751      	b.n	ef76 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f0d2:	68a1      	ldr	r1, [r4, #8]
    f0d4:	2900      	cmp	r1, #0
    f0d6:	d0db      	beq.n	f090 <process_event+0x13c>
	return node->next;
    f0d8:	680b      	ldr	r3, [r1, #0]
    f0da:	2b00      	cmp	r3, #0
    f0dc:	bf38      	it	cc
    f0de:	2300      	movcc	r3, #0
    f0e0:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    f0e2:	4652      	mov	r2, sl
    f0e4:	463b      	mov	r3, r7
    f0e6:	4620      	mov	r0, r4
    f0e8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    f0ec:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f0ee:	f1b9 0f00 	cmp.w	r9, #0
    f0f2:	d0cd      	beq.n	f090 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    f0f4:	4649      	mov	r1, r9
    f0f6:	f8d9 3000 	ldr.w	r3, [r9]
    f0fa:	e7ee      	b.n	f0da <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0fc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    f0fe:	463b      	mov	r3, r7
    f100:	4652      	mov	r2, sl
    f102:	4620      	mov	r0, r4
    f104:	682d      	ldr	r5, [r5, #0]
    f106:	f00a f8f2 	bl	192ee <notify_one>
    f10a:	e7c1      	b.n	f090 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    f10c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    f110:	bf1e      	ittt	ne
    f112:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    f116:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    f118:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    f11a:	e7d2      	b.n	f0c2 <process_event+0x16e>
    f11c:	0001931b 	.word	0x0001931b

0000f120 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
    f120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
    f124:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
    f126:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
    f128:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
    f12c:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
    f12e:	f240 746c 	movw	r4, #1900	; 0x76c
    f132:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
    f134:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
    f136:	6943      	ldr	r3, [r0, #20]
{
    f138:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
    f13a:	18e4      	adds	r4, r4, r3
    f13c:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
    f140:	f1b9 0f02 	cmp.w	r9, #2
    f144:	bf8c      	ite	hi
    f146:	2300      	movhi	r3, #0
    f148:	2301      	movls	r3, #1
    f14a:	1ae4      	subs	r4, r4, r3
    f14c:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    f150:	2c00      	cmp	r4, #0
    f152:	f175 0300 	sbcs.w	r3, r5, #0
    f156:	da57      	bge.n	f208 <timeutil_timegm64+0xe8>
    f158:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
    f15c:	f44f 72c8 	mov.w	r2, #400	; 0x190
    f160:	2300      	movs	r3, #0
    f162:	1820      	adds	r0, r4, r0
    f164:	f145 31ff 	adc.w	r1, r5, #4294967295
    f168:	f7fd f86a 	bl	c240 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
    f16c:	4b29      	ldr	r3, [pc, #164]	; (f214 <timeutil_timegm64+0xf4>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    f16e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
    f172:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    f176:	e9d8 5300 	ldrd	r5, r3, [r8]
    f17a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f17c:	f1b9 0f02 	cmp.w	r9, #2
    f180:	bf8c      	ite	hi
    f182:	f06f 0e02 	mvnhi.w	lr, #2
    f186:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    f18a:	ea4f 7be3 	mov.w	fp, r3, asr #31
    f18e:	f8d8 3008 	ldr.w	r3, [r8, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f192:	44f1      	add	r9, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
    f194:	fbcc ab03 	smlal	sl, fp, ip, r3
    f198:	fbaa 230c 	umull	r2, r3, sl, ip
    f19c:	fb0c 330b 	mla	r3, ip, fp, r3
    f1a0:	1952      	adds	r2, r2, r5
    f1a2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f1a6:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f1aa:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f1ae:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    f1b2:	fb05 cc04 	mla	ip, r5, r4, ip
    f1b6:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f1b8:	fb0e fe09 	mul.w	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f1bc:	4465      	add	r5, ip
    f1be:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f1c2:	f04f 0905 	mov.w	r9, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f1c6:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
    f1ca:	f10e 0e02 	add.w	lr, lr, #2
    f1ce:	fbbe fef9 	udiv	lr, lr, r9
	return era * 146097 + (time_t)doe - 719468;
    f1d2:	f8df c04c 	ldr.w	ip, [pc, #76]	; f220 <timeutil_timegm64+0x100>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
    f1d6:	1b2c      	subs	r4, r5, r4
    f1d8:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
    f1da:	fba0 450c 	umull	r4, r5, r0, ip
    f1de:	fb0c 5501 	mla	r5, ip, r1, r5
    f1e2:	490d      	ldr	r1, [pc, #52]	; (f218 <timeutil_timegm64+0xf8>)
    f1e4:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
    f1e6:	490d      	ldr	r1, [pc, #52]	; (f21c <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
    f1e8:	f145 37ff 	adc.w	r7, r5, #4294967295
    f1ec:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
    f1f0:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
    f1f4:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
    f1f8:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
    f1fc:	18a0      	adds	r0, r4, r2
    f1fe:	eb45 0103 	adc.w	r1, r5, r3
    f202:	b003      	add	sp, #12
    f204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
    f208:	f44f 72c8 	mov.w	r2, #400	; 0x190
    f20c:	2300      	movs	r3, #0
    f20e:	4620      	mov	r0, r4
    f210:	4629      	mov	r1, r5
    f212:	e7a9      	b.n	f168 <timeutil_timegm64+0x48>
    f214:	fffffe70 	.word	0xfffffe70
    f218:	fff50594 	.word	0xfff50594
    f21c:	00015180 	.word	0x00015180
    f220:	00023ab1 	.word	0x00023ab1

0000f224 <extract_conversion>:
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
	*conv = (struct conversion) {
    f224:	2200      	movs	r2, #0
{
    f226:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
    f228:	e9c0 2200 	strd	r2, r2, [r0]
    f22c:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    f22e:	784a      	ldrb	r2, [r1, #1]
{
    f230:	4603      	mov	r3, r0
	if (*sp == '%') {
    f232:	2a25      	cmp	r2, #37	; 0x25
    f234:	d033      	beq.n	f29e <extract_conversion+0x7a>
	++sp;
    f236:	3101      	adds	r1, #1
    f238:	460c      	mov	r4, r1
		switch (*sp) {
    f23a:	f811 2b01 	ldrb.w	r2, [r1], #1
    f23e:	2a2b      	cmp	r2, #43	; 0x2b
    f240:	d03d      	beq.n	f2be <extract_conversion+0x9a>
    f242:	d82f      	bhi.n	f2a4 <extract_conversion+0x80>
    f244:	2a20      	cmp	r2, #32
    f246:	d03e      	beq.n	f2c6 <extract_conversion+0xa2>
    f248:	2a23      	cmp	r2, #35	; 0x23
    f24a:	d040      	beq.n	f2ce <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
    f24c:	781a      	ldrb	r2, [r3, #0]
    f24e:	f002 0144 	and.w	r1, r2, #68	; 0x44
    f252:	2944      	cmp	r1, #68	; 0x44
    f254:	d102      	bne.n	f25c <extract_conversion+0x38>
		conv->flag_zero = false;
    f256:	f36f 1286 	bfc	r2, #6, #1
    f25a:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
    f25c:	7822      	ldrb	r2, [r4, #0]
    f25e:	2a2a      	cmp	r2, #42	; 0x2a
    f260:	d14c      	bne.n	f2fc <extract_conversion+0xd8>
		conv->width_present = true;
    f262:	881a      	ldrh	r2, [r3, #0]
    f264:	1c60      	adds	r0, r4, #1
    f266:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    f26a:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
    f26c:	7802      	ldrb	r2, [r0, #0]
    f26e:	2a2e      	cmp	r2, #46	; 0x2e
    f270:	d14f      	bne.n	f312 <extract_conversion+0xee>
	if (*sp == '*') {
    f272:	7842      	ldrb	r2, [r0, #1]
    f274:	2a2a      	cmp	r2, #42	; 0x2a
    f276:	d045      	beq.n	f304 <extract_conversion+0xe0>
    f278:	3001      	adds	r0, #1
	const char *sp = *str;
    f27a:	4605      	mov	r5, r0
	size_t val = 0;
    f27c:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    f27e:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    f280:	4601      	mov	r1, r0
    f282:	f811 4b01 	ldrb.w	r4, [r1], #1
    f286:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    f28a:	2e09      	cmp	r6, #9
    f28c:	d953      	bls.n	f336 <extract_conversion+0x112>
	if (sp != wp) {
    f28e:	42a8      	cmp	r0, r5
		conv->prec_present = true;
    f290:	bf1f      	itttt	ne
    f292:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
    f294:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
    f296:	f041 0102 	orrne.w	r1, r1, #2
    f29a:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
    f29c:	e039      	b.n	f312 <extract_conversion+0xee>
		conv->specifier = *sp++;
    f29e:	1c88      	adds	r0, r1, #2
    f2a0:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    f2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
    f2a4:	2a2d      	cmp	r2, #45	; 0x2d
    f2a6:	d005      	beq.n	f2b4 <extract_conversion+0x90>
    f2a8:	2a30      	cmp	r2, #48	; 0x30
    f2aa:	d1cf      	bne.n	f24c <extract_conversion+0x28>
			conv->flag_zero = true;
    f2ac:	781a      	ldrb	r2, [r3, #0]
    f2ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f2b2:	e002      	b.n	f2ba <extract_conversion+0x96>
			conv->flag_dash = true;
    f2b4:	781a      	ldrb	r2, [r3, #0]
    f2b6:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
    f2ba:	701a      	strb	r2, [r3, #0]
			break;
    f2bc:	e7bc      	b.n	f238 <extract_conversion+0x14>
			conv->flag_plus = true;
    f2be:	781a      	ldrb	r2, [r3, #0]
    f2c0:	f042 0208 	orr.w	r2, r2, #8
    f2c4:	e7f9      	b.n	f2ba <extract_conversion+0x96>
			conv->flag_space = true;
    f2c6:	781a      	ldrb	r2, [r3, #0]
    f2c8:	f042 0210 	orr.w	r2, r2, #16
    f2cc:	e7f5      	b.n	f2ba <extract_conversion+0x96>
			conv->flag_hash = true;
    f2ce:	781a      	ldrb	r2, [r3, #0]
    f2d0:	f042 0220 	orr.w	r2, r2, #32
    f2d4:	e7f1      	b.n	f2ba <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
    f2d6:	4608      	mov	r0, r1
    f2d8:	fb07 5202 	mla	r2, r7, r2, r5
    f2dc:	3a30      	subs	r2, #48	; 0x30
    f2de:	4601      	mov	r1, r0
    f2e0:	f811 5b01 	ldrb.w	r5, [r1], #1
    f2e4:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    f2e8:	2e09      	cmp	r6, #9
    f2ea:	d9f4      	bls.n	f2d6 <extract_conversion+0xb2>
	if (sp != wp) {
    f2ec:	4284      	cmp	r4, r0
		conv->width_present = true;
    f2ee:	bf1f      	itttt	ne
    f2f0:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
    f2f2:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
    f2f4:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
    f2f8:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
    f2fa:	e7b7      	b.n	f26c <extract_conversion+0x48>
    f2fc:	4620      	mov	r0, r4
	size_t val = 0;
    f2fe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    f300:	270a      	movs	r7, #10
    f302:	e7ec      	b.n	f2de <extract_conversion+0xba>
		conv->prec_present = true;
    f304:	785a      	ldrb	r2, [r3, #1]
		return ++sp;
    f306:	3002      	adds	r0, #2
		conv->prec_present = true;
    f308:	f022 0206 	bic.w	r2, r2, #6
    f30c:	f042 0206 	orr.w	r2, r2, #6
    f310:	705a      	strb	r2, [r3, #1]
	switch (*sp) {
    f312:	4601      	mov	r1, r0
    f314:	f811 4b01 	ldrb.w	r4, [r1], #1
    f318:	2c6c      	cmp	r4, #108	; 0x6c
    f31a:	d03c      	beq.n	f396 <extract_conversion+0x172>
    f31c:	d810      	bhi.n	f340 <extract_conversion+0x11c>
    f31e:	2c68      	cmp	r4, #104	; 0x68
    f320:	d015      	beq.n	f34e <extract_conversion+0x12a>
    f322:	2c6a      	cmp	r4, #106	; 0x6a
    f324:	d03f      	beq.n	f3a6 <extract_conversion+0x182>
    f326:	2c4c      	cmp	r4, #76	; 0x4c
    f328:	d042      	beq.n	f3b0 <extract_conversion+0x18c>
		conv->length_mod = LENGTH_NONE;
    f32a:	785a      	ldrb	r2, [r3, #1]
		break;
    f32c:	4601      	mov	r1, r0
		conv->length_mod = LENGTH_NONE;
    f32e:	f36f 02c6 	bfc	r2, #3, #4
    f332:	705a      	strb	r2, [r3, #1]
		break;
    f334:	e014      	b.n	f360 <extract_conversion+0x13c>
		val = 10U * val + *sp++ - '0';
    f336:	fb07 4202 	mla	r2, r7, r2, r4
    f33a:	4608      	mov	r0, r1
    f33c:	3a30      	subs	r2, #48	; 0x30
    f33e:	e79f      	b.n	f280 <extract_conversion+0x5c>
	switch (*sp) {
    f340:	2c74      	cmp	r4, #116	; 0x74
    f342:	785a      	ldrb	r2, [r3, #1]
    f344:	d032      	beq.n	f3ac <extract_conversion+0x188>
    f346:	2c7a      	cmp	r4, #122	; 0x7a
    f348:	d1ef      	bne.n	f32a <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
    f34a:	2006      	movs	r0, #6
    f34c:	e01f      	b.n	f38e <extract_conversion+0x16a>
		if (*++sp == 'h') {
    f34e:	7842      	ldrb	r2, [r0, #1]
    f350:	2a68      	cmp	r2, #104	; 0x68
    f352:	785a      	ldrb	r2, [r3, #1]
    f354:	d11a      	bne.n	f38c <extract_conversion+0x168>
			conv->length_mod = LENGTH_HH;
    f356:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    f358:	f361 02c6 	bfi	r2, r1, #3, #4
    f35c:	705a      	strb	r2, [r3, #1]
			++sp;
    f35e:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
    f360:	4608      	mov	r0, r1
    f362:	f810 4b01 	ldrb.w	r4, [r0], #1
	switch (conv->specifier) {
    f366:	2c78      	cmp	r4, #120	; 0x78
	conv->specifier = *sp++;
    f368:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
    f36a:	f200 80ac 	bhi.w	f4c6 <extract_conversion+0x2a2>
    f36e:	2c57      	cmp	r4, #87	; 0x57
    f370:	d829      	bhi.n	f3c6 <extract_conversion+0x1a2>
    f372:	2c41      	cmp	r4, #65	; 0x41
    f374:	d003      	beq.n	f37e <extract_conversion+0x15a>
    f376:	3c45      	subs	r4, #69	; 0x45
    f378:	2c02      	cmp	r4, #2
    f37a:	f200 80a4 	bhi.w	f4c6 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
    f37e:	2104      	movs	r1, #4
    f380:	789a      	ldrb	r2, [r3, #2]
    f382:	f361 0202 	bfi	r2, r1, #0, #3
    f386:	709a      	strb	r2, [r3, #2]
			unsupported = true;
    f388:	2201      	movs	r2, #1
			break;
    f38a:	e078      	b.n	f47e <extract_conversion+0x25a>
			conv->length_mod = LENGTH_H;
    f38c:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
    f38e:	f360 02c6 	bfi	r2, r0, #3, #4
    f392:	705a      	strb	r2, [r3, #1]
    f394:	e7e4      	b.n	f360 <extract_conversion+0x13c>
		if (*++sp == 'l') {
    f396:	7842      	ldrb	r2, [r0, #1]
    f398:	2a6c      	cmp	r2, #108	; 0x6c
    f39a:	785a      	ldrb	r2, [r3, #1]
    f39c:	d101      	bne.n	f3a2 <extract_conversion+0x17e>
			conv->length_mod = LENGTH_LL;
    f39e:	2104      	movs	r1, #4
    f3a0:	e7da      	b.n	f358 <extract_conversion+0x134>
			conv->length_mod = LENGTH_L;
    f3a2:	2003      	movs	r0, #3
    f3a4:	e7f3      	b.n	f38e <extract_conversion+0x16a>
		conv->length_mod = LENGTH_J;
    f3a6:	2005      	movs	r0, #5
    f3a8:	785a      	ldrb	r2, [r3, #1]
    f3aa:	e7f0      	b.n	f38e <extract_conversion+0x16a>
		conv->length_mod = LENGTH_T;
    f3ac:	2007      	movs	r0, #7
    f3ae:	e7ee      	b.n	f38e <extract_conversion+0x16a>
		conv->unsupported = true;
    f3b0:	881a      	ldrh	r2, [r3, #0]
    f3b2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    f3b6:	f022 0202 	bic.w	r2, r2, #2
    f3ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    f3be:	f042 0202 	orr.w	r2, r2, #2
    f3c2:	801a      	strh	r2, [r3, #0]
		break;
    f3c4:	e7cc      	b.n	f360 <extract_conversion+0x13c>
    f3c6:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
    f3ca:	2a20      	cmp	r2, #32
    f3cc:	d87b      	bhi.n	f4c6 <extract_conversion+0x2a2>
    f3ce:	a101      	add	r1, pc, #4	; (adr r1, f3d4 <extract_conversion+0x1b0>)
    f3d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    f3d4:	0000f48f 	.word	0x0000f48f
    f3d8:	0000f4c7 	.word	0x0000f4c7
    f3dc:	0000f4c7 	.word	0x0000f4c7
    f3e0:	0000f4c7 	.word	0x0000f4c7
    f3e4:	0000f4c7 	.word	0x0000f4c7
    f3e8:	0000f4c7 	.word	0x0000f4c7
    f3ec:	0000f4c7 	.word	0x0000f4c7
    f3f0:	0000f4c7 	.word	0x0000f4c7
    f3f4:	0000f4c7 	.word	0x0000f4c7
    f3f8:	0000f37f 	.word	0x0000f37f
    f3fc:	0000f4c7 	.word	0x0000f4c7
    f400:	0000f48f 	.word	0x0000f48f
    f404:	0000f459 	.word	0x0000f459
    f408:	0000f37f 	.word	0x0000f37f
    f40c:	0000f37f 	.word	0x0000f37f
    f410:	0000f37f 	.word	0x0000f37f
    f414:	0000f4c7 	.word	0x0000f4c7
    f418:	0000f459 	.word	0x0000f459
    f41c:	0000f4c7 	.word	0x0000f4c7
    f420:	0000f4c7 	.word	0x0000f4c7
    f424:	0000f4c7 	.word	0x0000f4c7
    f428:	0000f4c7 	.word	0x0000f4c7
    f42c:	0000f495 	.word	0x0000f495
    f430:	0000f48f 	.word	0x0000f48f
    f434:	0000f4af 	.word	0x0000f4af
    f438:	0000f4c7 	.word	0x0000f4c7
    f43c:	0000f4c7 	.word	0x0000f4c7
    f440:	0000f4af 	.word	0x0000f4af
    f444:	0000f4c7 	.word	0x0000f4c7
    f448:	0000f48f 	.word	0x0000f48f
    f44c:	0000f4c7 	.word	0x0000f4c7
    f450:	0000f4c7 	.word	0x0000f4c7
    f454:	0000f48f 	.word	0x0000f48f
		conv->specifier_cat = SPECIFIER_SINT;
    f458:	2101      	movs	r1, #1
    f45a:	789a      	ldrb	r2, [r3, #2]
		conv->specifier_cat = SPECIFIER_UINT;
    f45c:	f361 0202 	bfi	r2, r1, #0, #3
    f460:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    f462:	785a      	ldrb	r2, [r3, #1]
    f464:	f002 0278 	and.w	r2, r2, #120	; 0x78
    f468:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
    f46a:	bf02      	ittt	eq
    f46c:	7819      	ldrbeq	r1, [r3, #0]
    f46e:	f041 0101 	orreq.w	r1, r1, #1
    f472:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
    f474:	2c63      	cmp	r4, #99	; 0x63
    f476:	d12a      	bne.n	f4ce <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
    f478:	3a00      	subs	r2, #0
    f47a:	bf18      	it	ne
    f47c:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
    f47e:	7819      	ldrb	r1, [r3, #0]
    f480:	f3c1 0440 	ubfx	r4, r1, #1, #1
    f484:	4322      	orrs	r2, r4
    f486:	f362 0141 	bfi	r1, r2, #1, #1
    f48a:	7019      	strb	r1, [r3, #0]
	return sp;
    f48c:	e709      	b.n	f2a2 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
    f48e:	2102      	movs	r1, #2
    f490:	789a      	ldrb	r2, [r3, #2]
    f492:	e7e3      	b.n	f45c <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
    f494:	2103      	movs	r1, #3
    f496:	789a      	ldrb	r2, [r3, #2]
    f498:	f361 0202 	bfi	r2, r1, #0, #3
    f49c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    f49e:	785a      	ldrb	r2, [r3, #1]
    f4a0:	f002 0278 	and.w	r2, r2, #120	; 0x78
    f4a4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    f4a8:	424a      	negs	r2, r1
    f4aa:	414a      	adcs	r2, r1
    f4ac:	e7e7      	b.n	f47e <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
    f4ae:	2103      	movs	r1, #3
    f4b0:	789a      	ldrb	r2, [r3, #2]
    f4b2:	f361 0202 	bfi	r2, r1, #0, #3
    f4b6:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
    f4b8:	785a      	ldrb	r2, [r3, #1]
    f4ba:	f012 0f78 	tst.w	r2, #120	; 0x78
    f4be:	bf14      	ite	ne
    f4c0:	2201      	movne	r2, #1
    f4c2:	2200      	moveq	r2, #0
    f4c4:	e7db      	b.n	f47e <extract_conversion+0x25a>
		conv->invalid = true;
    f4c6:	781a      	ldrb	r2, [r3, #0]
    f4c8:	f042 0201 	orr.w	r2, r2, #1
    f4cc:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
    f4ce:	2200      	movs	r2, #0
    f4d0:	e7d5      	b.n	f47e <extract_conversion+0x25a>
    f4d2:	bf00      	nop

0000f4d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    f4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4d8:	4680      	mov	r8, r0
    f4da:	4689      	mov	r9, r1
    f4dc:	4692      	mov	sl, r2
    f4de:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    f4e0:	2500      	movs	r5, #0
{
    f4e2:	b08f      	sub	sp, #60	; 0x3c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    f4e4:	f89a 0000 	ldrb.w	r0, [sl]
    f4e8:	b908      	cbnz	r0, f4ee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    f4ea:	4628      	mov	r0, r5
    f4ec:	e10b      	b.n	f706 <cbvprintf+0x232>
		if (*fp != '%') {
    f4ee:	2825      	cmp	r0, #37	; 0x25
    f4f0:	d009      	beq.n	f506 <cbvprintf+0x32>
			OUTC(*fp++);
    f4f2:	4649      	mov	r1, r9
    f4f4:	47c0      	blx	r8
    f4f6:	2800      	cmp	r0, #0
    f4f8:	f2c0 8105 	blt.w	f706 <cbvprintf+0x232>
    f4fc:	f10a 0301 	add.w	r3, sl, #1
    f500:	9302      	str	r3, [sp, #8]
			OUTC('%');
    f502:	3501      	adds	r5, #1
			break;
    f504:	e059      	b.n	f5ba <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
    f506:	4651      	mov	r1, sl
    f508:	a805      	add	r0, sp, #20
    f50a:	f7ff fe8b 	bl	f224 <extract_conversion>
		if (conv.width_star) {
    f50e:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
    f512:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
    f514:	07d9      	lsls	r1, r3, #31
    f516:	d51a      	bpl.n	f54e <cbvprintf+0x7a>
			width = va_arg(ap, int);
    f518:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
    f51c:	2f00      	cmp	r7, #0
    f51e:	da06      	bge.n	f52e <cbvprintf+0x5a>
				conv.flag_dash = true;
    f520:	f89d 2014 	ldrb.w	r2, [sp, #20]
				width = -width;
    f524:	427f      	negs	r7, r7
				conv.flag_dash = true;
    f526:	f042 0204 	orr.w	r2, r2, #4
    f52a:	f88d 2014 	strb.w	r2, [sp, #20]
		if (conv.prec_star) {
    f52e:	075a      	lsls	r2, r3, #29
    f530:	d515      	bpl.n	f55e <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
    f532:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
    f536:	f1bb 0f00 	cmp.w	fp, #0
    f53a:	da14      	bge.n	f566 <cbvprintf+0x92>
				conv.prec_present = false;
    f53c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f540:	f36f 0341 	bfc	r3, #1, #1
    f544:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
    f548:	f04f 3bff 	mov.w	fp, #4294967295
    f54c:	e00b      	b.n	f566 <cbvprintf+0x92>
		} else if (conv.width_present) {
    f54e:	f99d 2014 	ldrsb.w	r2, [sp, #20]
    f552:	2a00      	cmp	r2, #0
		int width = -1;
    f554:	bfac      	ite	ge
    f556:	f04f 37ff 	movge.w	r7, #4294967295
			width = conv.width_value;
    f55a:	9f06      	ldrlt	r7, [sp, #24]
    f55c:	e7e7      	b.n	f52e <cbvprintf+0x5a>
		} else if (conv.prec_present) {
    f55e:	079b      	lsls	r3, r3, #30
    f560:	d5f2      	bpl.n	f548 <cbvprintf+0x74>
			precision = conv.prec_value;
    f562:	f8dd b01c 	ldr.w	fp, [sp, #28]
		conv.pad0_value = 0;
    f566:	2100      	movs	r1, #0
			= (enum specifier_cat_enum)conv.specifier_cat;
    f568:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
    f56c:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
    f570:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    f574:	2b01      	cmp	r3, #1
		union argument_value value = (union argument_value){
    f576:	468e      	mov	lr, r1
		conv.pad0_pre_exp = 0;
    f578:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
    f57c:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    f580:	d130      	bne.n	f5e4 <cbvprintf+0x110>
			switch (length_mod) {
    f582:	f1ac 0303 	sub.w	r3, ip, #3
    f586:	2b04      	cmp	r3, #4
    f588:	d81a      	bhi.n	f5c0 <cbvprintf+0xec>
    f58a:	e8df f003 	tbb	[pc, r3]
    f58e:	3b03      	.short	0x3b03
    f590:	193b      	.short	0x193b
    f592:	19          	.byte	0x19
    f593:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
    f594:	f854 1b04 	ldr.w	r1, [r4], #4
    f598:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
    f59a:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
    f59c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    f5a0:	f013 0603 	ands.w	r6, r3, #3
    f5a4:	d050      	beq.n	f648 <cbvprintf+0x174>
			OUTS(sp, fp);
    f5a6:	4652      	mov	r2, sl
    f5a8:	4649      	mov	r1, r9
    f5aa:	4640      	mov	r0, r8
    f5ac:	9b02      	ldr	r3, [sp, #8]
    f5ae:	f00a f935 	bl	1981c <outs>
    f5b2:	2800      	cmp	r0, #0
    f5b4:	f2c0 80a7 	blt.w	f706 <cbvprintf+0x232>
    f5b8:	4405      	add	r5, r0
			OUTS(bps, bpe);
    f5ba:	f8dd a008 	ldr.w	sl, [sp, #8]
    f5be:	e791      	b.n	f4e4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    f5c0:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
    f5c4:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    f5c8:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
    f5cc:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
    f5ce:	d102      	bne.n	f5d6 <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
    f5d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    f5d4:	e013      	b.n	f5fe <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
    f5d6:	f1bc 0f02 	cmp.w	ip, #2
    f5da:	d1df      	bne.n	f59c <cbvprintf+0xc8>
				value.sint = (short)value.sint;
    f5dc:	b20a      	sxth	r2, r1
    f5de:	17d3      	asrs	r3, r2, #31
    f5e0:	4611      	mov	r1, r2
    f5e2:	e7da      	b.n	f59a <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    f5e4:	2b02      	cmp	r3, #2
    f5e6:	d122      	bne.n	f62e <cbvprintf+0x15a>
			switch (length_mod) {
    f5e8:	f1ac 0303 	sub.w	r3, ip, #3
    f5ec:	2b04      	cmp	r3, #4
    f5ee:	d812      	bhi.n	f616 <cbvprintf+0x142>
    f5f0:	e8df f003 	tbb	[pc, r3]
    f5f4:	11080803 	.word	0x11080803
    f5f8:	11          	.byte	0x11
    f5f9:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
    f5fa:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
    f5fe:	f04f 0e00 	mov.w	lr, #0
    f602:	e7cb      	b.n	f59c <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
    f604:	1de3      	adds	r3, r4, #7
    f606:	f023 0307 	bic.w	r3, r3, #7
    f60a:	461c      	mov	r4, r3
				value.uint =
    f60c:	f8d3 e004 	ldr.w	lr, [r3, #4]
    f610:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
    f614:	e7c2      	b.n	f59c <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
    f616:	f1bc 0f01 	cmp.w	ip, #1
				value.uint =
    f61a:	f04f 0e00 	mov.w	lr, #0
					(uint_value_type)va_arg(ap, size_t);
    f61e:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
    f622:	d0d5      	beq.n	f5d0 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
    f624:	f1bc 0f02 	cmp.w	ip, #2
    f628:	d1b8      	bne.n	f59c <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
    f62a:	b289      	uxth	r1, r1
    f62c:	e7e7      	b.n	f5fe <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
    f62e:	2b04      	cmp	r3, #4
    f630:	d105      	bne.n	f63e <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
    f632:	3407      	adds	r4, #7
    f634:	f024 0407 	bic.w	r4, r4, #7
    f638:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    f63c:	e7d0      	b.n	f5e0 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
    f63e:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
    f640:	bf08      	it	eq
    f642:	f854 1b04 	ldreq.w	r1, [r4], #4
    f646:	e7a9      	b.n	f59c <cbvprintf+0xc8>
		switch (conv.specifier) {
    f648:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f64c:	2878      	cmp	r0, #120	; 0x78
    f64e:	d8b4      	bhi.n	f5ba <cbvprintf+0xe6>
    f650:	2862      	cmp	r0, #98	; 0x62
    f652:	d821      	bhi.n	f698 <cbvprintf+0x1c4>
    f654:	2825      	cmp	r0, #37	; 0x25
    f656:	d051      	beq.n	f6fc <cbvprintf+0x228>
    f658:	2858      	cmp	r0, #88	; 0x58
    f65a:	d1ae      	bne.n	f5ba <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
    f65c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    f660:	4608      	mov	r0, r1
    f662:	9300      	str	r3, [sp, #0]
    f664:	4671      	mov	r1, lr
    f666:	ab08      	add	r3, sp, #32
    f668:	aa05      	add	r2, sp, #20
    f66a:	f00a f88c 	bl	19786 <encode_uint>
    f66e:	4682      	mov	sl, r0
			if (precision >= 0) {
    f670:	f1bb 0f00 	cmp.w	fp, #0
    f674:	f10d 0136 	add.w	r1, sp, #54	; 0x36
    f678:	db0c      	blt.n	f694 <cbvprintf+0x1c0>
				conv.flag_zero = false;
    f67a:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
    f67e:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
    f682:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    f686:	459b      	cmp	fp, r3
				conv.flag_zero = false;
    f688:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
    f68c:	d902      	bls.n	f694 <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
    f68e:	ebab 0303 	sub.w	r3, fp, r3
    f692:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
    f694:	468b      	mov	fp, r1
    f696:	e048      	b.n	f72a <cbvprintf+0x256>
    f698:	3863      	subs	r0, #99	; 0x63
    f69a:	2815      	cmp	r0, #21
    f69c:	d88d      	bhi.n	f5ba <cbvprintf+0xe6>
    f69e:	a201      	add	r2, pc, #4	; (adr r2, f6a4 <cbvprintf+0x1d0>)
    f6a0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    f6a4:	0000f733 	.word	0x0000f733
    f6a8:	0000f791 	.word	0x0000f791
    f6ac:	0000f5bb 	.word	0x0000f5bb
    f6b0:	0000f5bb 	.word	0x0000f5bb
    f6b4:	0000f5bb 	.word	0x0000f5bb
    f6b8:	0000f5bb 	.word	0x0000f5bb
    f6bc:	0000f791 	.word	0x0000f791
    f6c0:	0000f5bb 	.word	0x0000f5bb
    f6c4:	0000f5bb 	.word	0x0000f5bb
    f6c8:	0000f5bb 	.word	0x0000f5bb
    f6cc:	0000f5bb 	.word	0x0000f5bb
    f6d0:	0000f7eb 	.word	0x0000f7eb
    f6d4:	0000f7b9 	.word	0x0000f7b9
    f6d8:	0000f7bd 	.word	0x0000f7bd
    f6dc:	0000f5bb 	.word	0x0000f5bb
    f6e0:	0000f5bb 	.word	0x0000f5bb
    f6e4:	0000f70d 	.word	0x0000f70d
    f6e8:	0000f5bb 	.word	0x0000f5bb
    f6ec:	0000f7b9 	.word	0x0000f7b9
    f6f0:	0000f5bb 	.word	0x0000f5bb
    f6f4:	0000f5bb 	.word	0x0000f5bb
    f6f8:	0000f7b9 	.word	0x0000f7b9
			OUTC('%');
    f6fc:	4649      	mov	r1, r9
    f6fe:	47c0      	blx	r8
    f700:	2800      	cmp	r0, #0
    f702:	f6bf aefe 	bge.w	f502 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
    f706:	b00f      	add	sp, #60	; 0x3c
    f708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
    f70c:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
    f70e:	468a      	mov	sl, r1
			size_t len = strlen(bps);
    f710:	9103      	str	r1, [sp, #12]
    f712:	f00b fd7f 	bl	1b214 <strlen>
			if ((precision >= 0)
    f716:	f1bb 0f00 	cmp.w	fp, #0
    f71a:	9903      	ldr	r1, [sp, #12]
    f71c:	db02      	blt.n	f724 <cbvprintf+0x250>
    f71e:	4558      	cmp	r0, fp
    f720:	bf28      	it	cs
    f722:	4658      	movcs	r0, fp
		char sign = 0;
    f724:	2600      	movs	r6, #0
			bpe = bps + len;
    f726:	eb01 0b00 	add.w	fp, r1, r0
		if (bps == NULL) {
    f72a:	f1ba 0f00 	cmp.w	sl, #0
    f72e:	d107      	bne.n	f740 <cbvprintf+0x26c>
    f730:	e743      	b.n	f5ba <cbvprintf+0xe6>
			break;
    f732:	2600      	movs	r6, #0
			buf[0] = value.uint;
    f734:	f88d 1020 	strb.w	r1, [sp, #32]
			bpe = buf + 1;
    f738:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
    f73c:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
    f740:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
    f744:	b106      	cbz	r6, f748 <cbvprintf+0x274>
			nj_len += 1U;
    f746:	3301      	adds	r3, #1
		if (conv.altform_0c) {
    f748:	f89d 2016 	ldrb.w	r2, [sp, #22]
    f74c:	06d0      	lsls	r0, r2, #27
    f74e:	d567      	bpl.n	f820 <cbvprintf+0x34c>
			nj_len += 2U;
    f750:	3302      	adds	r3, #2
		if (conv.pad_fp) {
    f752:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
    f754:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
    f756:	bf48      	it	mi
    f758:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
    f75a:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
    f75c:	bf48      	it	mi
    f75e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    f760:	2f00      	cmp	r7, #0
    f762:	dd70      	ble.n	f846 <cbvprintf+0x372>
			if (!conv.flag_dash) {
    f764:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
    f768:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
    f76a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    f76e:	9303      	str	r3, [sp, #12]
    f770:	0753      	lsls	r3, r2, #29
    f772:	d468      	bmi.n	f846 <cbvprintf+0x372>
				if (conv.flag_zero) {
    f774:	0650      	lsls	r0, r2, #25
    f776:	f140 80a3 	bpl.w	f8c0 <cbvprintf+0x3ec>
					if (sign != 0) {
    f77a:	b13e      	cbz	r6, f78c <cbvprintf+0x2b8>
						OUTC(sign);
    f77c:	4649      	mov	r1, r9
    f77e:	4630      	mov	r0, r6
    f780:	47c0      	blx	r8
    f782:	2800      	cmp	r0, #0
    f784:	dbbf      	blt.n	f706 <cbvprintf+0x232>
						sign = 0;
    f786:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    f788:	3501      	adds	r5, #1
						sign = 0;
    f78a:	461e      	mov	r6, r3
					pad = '0';
    f78c:	2330      	movs	r3, #48	; 0x30
    f78e:	e098      	b.n	f8c2 <cbvprintf+0x3ee>
			if (conv.flag_plus) {
    f790:	071e      	lsls	r6, r3, #28
    f792:	d40f      	bmi.n	f7b4 <cbvprintf+0x2e0>
				sign = ' ';
    f794:	f013 0610 	ands.w	r6, r3, #16
    f798:	bf18      	it	ne
    f79a:	2620      	movne	r6, #32
			if (value.sint < 0) {
    f79c:	2900      	cmp	r1, #0
    f79e:	f17e 0000 	sbcs.w	r0, lr, #0
    f7a2:	f6bf af5b 	bge.w	f65c <cbvprintf+0x188>
				value.uint = -value.sint;
    f7a6:	424a      	negs	r2, r1
    f7a8:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
    f7ac:	4611      	mov	r1, r2
    f7ae:	469e      	mov	lr, r3
				sign = '-';
    f7b0:	262d      	movs	r6, #45	; 0x2d
    f7b2:	e753      	b.n	f65c <cbvprintf+0x188>
				sign = '+';
    f7b4:	262b      	movs	r6, #43	; 0x2b
    f7b6:	e7f1      	b.n	f79c <cbvprintf+0x2c8>
		switch (conv.specifier) {
    f7b8:	2600      	movs	r6, #0
    f7ba:	e74f      	b.n	f65c <cbvprintf+0x188>
			if (value.ptr != NULL) {
    f7bc:	b351      	cbz	r1, f814 <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    f7be:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    f7c2:	4608      	mov	r0, r1
    f7c4:	9300      	str	r3, [sp, #0]
    f7c6:	2100      	movs	r1, #0
    f7c8:	ab08      	add	r3, sp, #32
    f7ca:	aa05      	add	r2, sp, #20
    f7cc:	f009 ffdb 	bl	19786 <encode_uint>
				conv.altform_0c = true;
    f7d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
				bps = encode_uint((uintptr_t)value.ptr, &conv,
    f7d4:	4682      	mov	sl, r0
				conv.altform_0c = true;
    f7d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    f7da:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    f7de:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    f7e2:	2600      	movs	r6, #0
				conv.altform_0c = true;
    f7e4:	f8ad 3016 	strh.w	r3, [sp, #22]
				goto prec_int_pad0;
    f7e8:	e742      	b.n	f670 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
    f7ea:	f1bc 0f07 	cmp.w	ip, #7
    f7ee:	f63f aee4 	bhi.w	f5ba <cbvprintf+0xe6>
    f7f2:	e8df f00c 	tbb	[pc, ip]
    f7f6:	040d      	.short	0x040d
    f7f8:	08080d06 	.word	0x08080d06
    f7fc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    f7fe:	700d      	strb	r5, [r1, #0]
		break;
    f800:	e6db      	b.n	f5ba <cbvprintf+0xe6>
		*(short *)dp = (short)count;
    f802:	800d      	strh	r5, [r1, #0]
		break;
    f804:	e6d9      	b.n	f5ba <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
    f806:	462a      	mov	r2, r5
    f808:	17eb      	asrs	r3, r5, #31
    f80a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
    f80e:	e6d4      	b.n	f5ba <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    f810:	600d      	str	r5, [r1, #0]
		break;
    f812:	e6d2      	b.n	f5ba <cbvprintf+0xe6>
			bpe = bps + 5;
    f814:	f8df b0c0 	ldr.w	fp, [pc, #192]	; f8d8 <cbvprintf+0x404>
    f818:	460e      	mov	r6, r1
			bps = "(nil)";
    f81a:	f1ab 0a05 	sub.w	sl, fp, #5
    f81e:	e78f      	b.n	f740 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
    f820:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    f822:	bf48      	it	mi
    f824:	3301      	addmi	r3, #1
    f826:	e794      	b.n	f752 <cbvprintf+0x27e>
					OUTC(pad);
    f828:	4618      	mov	r0, r3
    f82a:	4649      	mov	r1, r9
    f82c:	9303      	str	r3, [sp, #12]
    f82e:	47c0      	blx	r8
    f830:	2800      	cmp	r0, #0
    f832:	9b03      	ldr	r3, [sp, #12]
    f834:	f6ff af67 	blt.w	f706 <cbvprintf+0x232>
				while (width-- > 0) {
    f838:	2f00      	cmp	r7, #0
    f83a:	eba5 0107 	sub.w	r1, r5, r7
    f83e:	f107 37ff 	add.w	r7, r7, #4294967295
    f842:	dcf1      	bgt.n	f828 <cbvprintf+0x354>
    f844:	460d      	mov	r5, r1
		if (sign != 0) {
    f846:	b136      	cbz	r6, f856 <cbvprintf+0x382>
			OUTC(sign);
    f848:	4649      	mov	r1, r9
    f84a:	4630      	mov	r0, r6
    f84c:	47c0      	blx	r8
    f84e:	2800      	cmp	r0, #0
    f850:	f6ff af59 	blt.w	f706 <cbvprintf+0x232>
    f854:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
    f856:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f85a:	06d9      	lsls	r1, r3, #27
    f85c:	d401      	bmi.n	f862 <cbvprintf+0x38e>
    f85e:	071a      	lsls	r2, r3, #28
    f860:	d506      	bpl.n	f870 <cbvprintf+0x39c>
				OUTC('0');
    f862:	4649      	mov	r1, r9
    f864:	2030      	movs	r0, #48	; 0x30
    f866:	47c0      	blx	r8
    f868:	2800      	cmp	r0, #0
    f86a:	f6ff af4c 	blt.w	f706 <cbvprintf+0x232>
    f86e:	3501      	adds	r5, #1
			if (conv.altform_0c) {
    f870:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f874:	06db      	lsls	r3, r3, #27
    f876:	d507      	bpl.n	f888 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
    f878:	4649      	mov	r1, r9
    f87a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    f87e:	47c0      	blx	r8
    f880:	2800      	cmp	r0, #0
    f882:	f6ff af40 	blt.w	f706 <cbvprintf+0x232>
    f886:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    f888:	9e06      	ldr	r6, [sp, #24]
    f88a:	442e      	add	r6, r5
    f88c:	1b73      	subs	r3, r6, r5
    f88e:	2b00      	cmp	r3, #0
    f890:	dc19      	bgt.n	f8c6 <cbvprintf+0x3f2>
			OUTS(bps, bpe);
    f892:	465b      	mov	r3, fp
    f894:	4652      	mov	r2, sl
    f896:	4649      	mov	r1, r9
    f898:	4640      	mov	r0, r8
    f89a:	f009 ffbf 	bl	1981c <outs>
    f89e:	2800      	cmp	r0, #0
    f8a0:	f6ff af31 	blt.w	f706 <cbvprintf+0x232>
    f8a4:	4405      	add	r5, r0
		while (width > 0) {
    f8a6:	442f      	add	r7, r5
    f8a8:	1b7b      	subs	r3, r7, r5
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	f77f ae85 	ble.w	f5ba <cbvprintf+0xe6>
			OUTC(' ');
    f8b0:	4649      	mov	r1, r9
    f8b2:	2020      	movs	r0, #32
    f8b4:	47c0      	blx	r8
    f8b6:	2800      	cmp	r0, #0
    f8b8:	f6ff af25 	blt.w	f706 <cbvprintf+0x232>
    f8bc:	3501      	adds	r5, #1
			--width;
    f8be:	e7f3      	b.n	f8a8 <cbvprintf+0x3d4>
				char pad = ' ';
    f8c0:	2320      	movs	r3, #32
    f8c2:	443d      	add	r5, r7
    f8c4:	e7b8      	b.n	f838 <cbvprintf+0x364>
				OUTC('0');
    f8c6:	4649      	mov	r1, r9
    f8c8:	2030      	movs	r0, #48	; 0x30
    f8ca:	47c0      	blx	r8
    f8cc:	2800      	cmp	r0, #0
    f8ce:	f6ff af1a 	blt.w	f706 <cbvprintf+0x232>
    f8d2:	3501      	adds	r5, #1
    f8d4:	e7da      	b.n	f88c <cbvprintf+0x3b8>
    f8d6:	bf00      	nop
    f8d8:	0001e40d 	.word	0x0001e40d

0000f8dc <nordicsemi_nrf91_init>:
    f8dc:	f04f 0220 	mov.w	r2, #32
    f8e0:	f3ef 8311 	mrs	r3, BASEPRI
    f8e4:	f382 8811 	msr	BASEPRI, r2
    f8e8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    f8ec:	2101      	movs	r1, #1
    f8ee:	4a04      	ldr	r2, [pc, #16]	; (f900 <nordicsemi_nrf91_init+0x24>)
    f8f0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    f8f4:	f383 8811 	msr	BASEPRI, r3
    f8f8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    f8fc:	2000      	movs	r0, #0
    f8fe:	4770      	bx	lr
    f900:	40039000 	.word	0x40039000

0000f904 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    f904:	b120      	cbz	r0, f910 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    f906:	4b03      	ldr	r3, [pc, #12]	; (f914 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    f908:	0180      	lsls	r0, r0, #6
    f90a:	f043 0301 	orr.w	r3, r3, #1
    f90e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    f910:	4770      	bx	lr
    f912:	bf00      	nop
    f914:	0001c320 	.word	0x0001c320

0000f918 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    f918:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    f91a:	2200      	movs	r2, #0
{
    f91c:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    f91e:	490f      	ldr	r1, [pc, #60]	; (f95c <enable_logger+0x44>)
    f920:	480f      	ldr	r0, [pc, #60]	; (f960 <enable_logger+0x48>)
    f922:	f00c f8e4 	bl	1baee <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f926:	2200      	movs	r2, #0
    f928:	2300      	movs	r3, #0
    f92a:	2400      	movs	r4, #0
    f92c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f930:	230e      	movs	r3, #14
    f932:	4d0c      	ldr	r5, [pc, #48]	; (f964 <enable_logger+0x4c>)
    f934:	e9cd 3403 	strd	r3, r4, [sp, #12]
    f938:	f44f 7240 	mov.w	r2, #768	; 0x300
    f93c:	4628      	mov	r0, r5
    f93e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    f942:	4b09      	ldr	r3, [pc, #36]	; (f968 <enable_logger+0x50>)
    f944:	4909      	ldr	r1, [pc, #36]	; (f96c <enable_logger+0x54>)
    f946:	9400      	str	r4, [sp, #0]
    f948:	f005 ff1e 	bl	15788 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f94c:	4908      	ldr	r1, [pc, #32]	; (f970 <enable_logger+0x58>)
    f94e:	4628      	mov	r0, r5
    f950:	f005 fe70 	bl	15634 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    f954:	4620      	mov	r0, r4
    f956:	b009      	add	sp, #36	; 0x24
    f958:	bd30      	pop	{r4, r5, pc}
    f95a:	bf00      	nop
    f95c:	0000f975 	.word	0x0000f975
    f960:	200101f8 	.word	0x200101f8
    f964:	20010230 	.word	0x20010230
    f968:	0000fed1 	.word	0x0000fed1
    f96c:	2001ecc0 	.word	0x2001ecc0
    f970:	0001e785 	.word	0x0001e785

0000f974 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    f974:	4801      	ldr	r0, [pc, #4]	; (f97c <log_process_thread_timer_expiry_fn+0x8>)
    f976:	f005 bdd5 	b.w	15524 <z_impl_k_sem_give>
    f97a:	bf00      	nop
    f97c:	200101dc 	.word	0x200101dc

0000f980 <log_core_init>:
{
    f980:	b538      	push	{r3, r4, r5, lr}
		log_msg_pool_init();
    f982:	f000 fb03 	bl	ff8c <log_msg_pool_init>
		log_list_init(&list);
    f986:	4813      	ldr	r0, [pc, #76]	; (f9d4 <log_core_init+0x54>)
    f988:	f00a f816 	bl	199b8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    f98c:	4912      	ldr	r1, [pc, #72]	; (f9d8 <log_core_init+0x58>)
    f98e:	2304      	movs	r3, #4
    f990:	2228      	movs	r2, #40	; 0x28
    f992:	4812      	ldr	r0, [pc, #72]	; (f9dc <log_core_init+0x5c>)
    f994:	f00b fe7b 	bl	1b68e <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    f998:	4b11      	ldr	r3, [pc, #68]	; (f9e0 <log_core_init+0x60>)
    f99a:	4a12      	ldr	r2, [pc, #72]	; (f9e4 <log_core_init+0x64>)
	log_output_timestamp_freq_set(freq);
    f99c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
    f9a0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    f9a2:	f000 fd3b 	bl	1041c <log_output_timestamp_freq_set>
		for (int i = 0; i < log_sources_count(); i++) {
    f9a6:	2100      	movs	r1, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    f9a8:	480f      	ldr	r0, [pc, #60]	; (f9e8 <log_core_init+0x68>)
    f9aa:	4b10      	ldr	r3, [pc, #64]	; (f9ec <log_core_init+0x6c>)
    f9ac:	4c10      	ldr	r4, [pc, #64]	; (f9f0 <log_core_init+0x70>)
    f9ae:	1a1b      	subs	r3, r3, r0
    f9b0:	08db      	lsrs	r3, r3, #3
	return __log_const_start[source_id].level;
    f9b2:	3004      	adds	r0, #4
    f9b4:	4299      	cmp	r1, r3
    f9b6:	d100      	bne.n	f9ba <log_core_init+0x3a>
}
    f9b8:	bd38      	pop	{r3, r4, r5, pc}
			LOG_FILTER_SLOT_SET(filters,
    f9ba:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
    f9be:	6825      	ldr	r5, [r4, #0]
    f9c0:	f002 0207 	and.w	r2, r2, #7
    f9c4:	f025 0507 	bic.w	r5, r5, #7
    f9c8:	432a      	orrs	r2, r5
    f9ca:	f844 2b04 	str.w	r2, [r4], #4
		for (int i = 0; i < log_sources_count(); i++) {
    f9ce:	3101      	adds	r1, #1
    f9d0:	e7f0      	b.n	f9b4 <log_core_init+0x34>
    f9d2:	bf00      	nop
    f9d4:	20010788 	.word	0x20010788
    f9d8:	2002c900 	.word	0x2002c900
    f9dc:	20010790 	.word	0x20010790
    f9e0:	20010004 	.word	0x20010004
    f9e4:	000199f7 	.word	0x000199f7
    f9e8:	0001c16c 	.word	0x0001c16c
    f9ec:	0001c1cc 	.word	0x0001c1cc
    f9f0:	20010134 	.word	0x20010134

0000f9f4 <dropped_notify>:
{
    f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f9f6:	2500      	movs	r5, #0
    f9f8:	4b0c      	ldr	r3, [pc, #48]	; (fa2c <dropped_notify+0x38>)
    f9fa:	e8d3 7fef 	ldaex	r7, [r3]
    f9fe:	e8c3 5fe2 	stlex	r2, r5, [r3]
    fa02:	2a00      	cmp	r2, #0
    fa04:	d1f9      	bne.n	f9fa <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    fa06:	4c0a      	ldr	r4, [pc, #40]	; (fa30 <dropped_notify+0x3c>)
    fa08:	4e0a      	ldr	r6, [pc, #40]	; (fa34 <dropped_notify+0x40>)
    fa0a:	1b36      	subs	r6, r6, r4
    fa0c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    fa0e:	42b5      	cmp	r5, r6
    fa10:	db00      	blt.n	fa14 <dropped_notify+0x20>
}
    fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    fa14:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    fa16:	795b      	ldrb	r3, [r3, #5]
    fa18:	b12b      	cbz	r3, fa26 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
    fa1a:	6823      	ldr	r3, [r4, #0]
    fa1c:	68db      	ldr	r3, [r3, #12]
    fa1e:	b113      	cbz	r3, fa26 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
    fa20:	4639      	mov	r1, r7
    fa22:	4620      	mov	r0, r4
    fa24:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    fa26:	3501      	adds	r5, #1
    fa28:	3410      	adds	r4, #16
    fa2a:	e7f0      	b.n	fa0e <dropped_notify+0x1a>
    fa2c:	20010780 	.word	0x20010780
    fa30:	0001c1cc 	.word	0x0001c1cc
    fa34:	0001c1dc 	.word	0x0001c1dc

0000fa38 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fa38:	4b04      	ldr	r3, [pc, #16]	; (fa4c <log_dropped+0x14>)
    fa3a:	e8d3 2fef 	ldaex	r2, [r3]
    fa3e:	3201      	adds	r2, #1
    fa40:	e8c3 2fe1 	stlex	r1, r2, [r3]
    fa44:	2900      	cmp	r1, #0
    fa46:	d1f8      	bne.n	fa3a <log_dropped+0x2>
}
    fa48:	4770      	bx	lr
    fa4a:	bf00      	nop
    fa4c:	20010780 	.word	0x20010780

0000fa50 <log_source_name_get>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fa50:	4a04      	ldr	r2, [pc, #16]	; (fa64 <log_source_name_get+0x14>)
    fa52:	4b05      	ldr	r3, [pc, #20]	; (fa68 <log_source_name_get+0x18>)
    fa54:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    fa56:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    fa5a:	bf34      	ite	cc
    fa5c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    fa60:	2000      	movcs	r0, #0
}
    fa62:	4770      	bx	lr
    fa64:	0001c16c 	.word	0x0001c16c
    fa68:	0001c1cc 	.word	0x0001c1cc

0000fa6c <z_impl_log_filter_set>:
{
    fa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fa70:	4689      	mov	r9, r1
    fa72:	4616      	mov	r6, r2
    fa74:	4698      	mov	r8, r3
		if (backend == NULL) {
    fa76:	4604      	mov	r4, r0
    fa78:	b9b0      	cbnz	r0, faa8 <z_impl_log_filter_set+0x3c>
	return __log_backends_end - __log_backends_start;
    fa7a:	4b21      	ldr	r3, [pc, #132]	; (fb00 <z_impl_log_filter_set+0x94>)
			uint32_t max = 0U;
    fa7c:	4605      	mov	r5, r0
    fa7e:	469a      	mov	sl, r3
    fa80:	4f20      	ldr	r7, [pc, #128]	; (fb04 <z_impl_log_filter_set+0x98>)
    fa82:	1aff      	subs	r7, r7, r3
    fa84:	113f      	asrs	r7, r7, #4
			for (int i = 0; i < log_backend_count_get(); i++) {
    fa86:	42bc      	cmp	r4, r7
    fa88:	db02      	blt.n	fa90 <z_impl_log_filter_set+0x24>
}
    fa8a:	4628      	mov	r0, r5
    fa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&src_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
    fa90:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
    fa94:	4643      	mov	r3, r8
    fa96:	4632      	mov	r2, r6
    fa98:	4649      	mov	r1, r9
    fa9a:	f7ff ffe7 	bl	fa6c <z_impl_log_filter_set>
				max = MAX(current, max);
    fa9e:	4285      	cmp	r5, r0
    faa0:	bf38      	it	cc
    faa2:	4605      	movcc	r5, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
    faa4:	3401      	adds	r4, #1
    faa6:	e7ee      	b.n	fa86 <z_impl_log_filter_set+0x1a>
	return __log_const_start[source_id].level;
    faa8:	4b17      	ldr	r3, [pc, #92]	; (fb08 <z_impl_log_filter_set+0x9c>)
			LOG_FILTER_SLOT_SET(filters,
    faaa:	4918      	ldr	r1, [pc, #96]	; (fb0c <z_impl_log_filter_set+0xa0>)
    faac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    fab0:	791d      	ldrb	r5, [r3, #4]
	return backend->cb->id;
    fab2:	6843      	ldr	r3, [r0, #4]
			level = MIN(level, max);
    fab4:	4545      	cmp	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    fab6:	791a      	ldrb	r2, [r3, #4]
    fab8:	f04f 0307 	mov.w	r3, #7
			level = MIN(level, max);
    fabc:	bf28      	it	cs
    fabe:	4645      	movcs	r5, r8
			LOG_FILTER_SLOT_SET(filters,
    fac0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fac4:	fa03 f002 	lsl.w	r0, r3, r2
    fac8:	f851 3026 	ldr.w	r3, [r1, r6, lsl #2]
    facc:	ea23 0300 	bic.w	r3, r3, r0
    fad0:	f005 0007 	and.w	r0, r5, #7
    fad4:	fa00 f202 	lsl.w	r2, r0, r2
    fad8:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
    fada:	2000      	movs	r0, #0
			LOG_FILTER_SLOT_SET(filters,
    fadc:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
    fade:	fa23 f402 	lsr.w	r4, r3, r2
    fae2:	f004 0407 	and.w	r4, r4, #7
    fae6:	42a0      	cmp	r0, r4
    fae8:	f102 0203 	add.w	r2, r2, #3
    faec:	bf38      	it	cc
    faee:	4620      	movcc	r0, r4
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
    faf0:	2a1e      	cmp	r2, #30
    faf2:	d1f4      	bne.n	fade <z_impl_log_filter_set+0x72>
			LOG_FILTER_SLOT_SET(filters,
    faf4:	f023 0307 	bic.w	r3, r3, #7
    faf8:	4303      	orrs	r3, r0
    fafa:	f841 3026 	str.w	r3, [r1, r6, lsl #2]
	return level;
    fafe:	e7c4      	b.n	fa8a <z_impl_log_filter_set+0x1e>
    fb00:	0001c1cc 	.word	0x0001c1cc
    fb04:	0001c1dc 	.word	0x0001c1dc
    fb08:	0001c16c 	.word	0x0001c16c
    fb0c:	20010134 	.word	0x20010134

0000fb10 <backend_filter_set>:
{
    fb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb12:	4606      	mov	r6, r0
    fb14:	460f      	mov	r7, r1
		for (int i = 0; i < log_sources_count(); i++) {
    fb16:	2500      	movs	r5, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fb18:	4c07      	ldr	r4, [pc, #28]	; (fb38 <backend_filter_set+0x28>)
    fb1a:	4b08      	ldr	r3, [pc, #32]	; (fb3c <backend_filter_set+0x2c>)
    fb1c:	1ae4      	subs	r4, r4, r3
    fb1e:	08e4      	lsrs	r4, r4, #3
    fb20:	42a5      	cmp	r5, r4
    fb22:	d100      	bne.n	fb26 <backend_filter_set+0x16>
}
    fb24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb26:	2100      	movs	r1, #0
    fb28:	462a      	mov	r2, r5
    fb2a:	463b      	mov	r3, r7
    fb2c:	4630      	mov	r0, r6
    fb2e:	f7ff ff9d 	bl	fa6c <z_impl_log_filter_set>
		for (int i = 0; i < log_sources_count(); i++) {
    fb32:	3501      	adds	r5, #1
    fb34:	e7f4      	b.n	fb20 <backend_filter_set+0x10>
    fb36:	bf00      	nop
    fb38:	0001c1cc 	.word	0x0001c1cc
    fb3c:	0001c16c 	.word	0x0001c16c

0000fb40 <log_backend_enable>:
	id += backend - log_backend_get(0);
    fb40:	4b0c      	ldr	r3, [pc, #48]	; (fb74 <log_backend_enable+0x34>)
{
    fb42:	b570      	push	{r4, r5, r6, lr}
	id += backend - log_backend_get(0);
    fb44:	1ac3      	subs	r3, r0, r3
	log_backend_id_set(backend, id);
    fb46:	6846      	ldr	r6, [r0, #4]
	id += backend - log_backend_get(0);
    fb48:	111b      	asrs	r3, r3, #4
{
    fb4a:	4604      	mov	r4, r0
	id += backend - log_backend_get(0);
    fb4c:	3301      	adds	r3, #1
{
    fb4e:	460d      	mov	r5, r1
	log_backend_id_set(backend, id);
    fb50:	7133      	strb	r3, [r6, #4]
	backend_filter_set(backend, level);
    fb52:	4611      	mov	r1, r2
    fb54:	f7ff ffdc 	bl	fb10 <backend_filter_set>
	backend->cb->active = true;
    fb58:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
    fb5a:	6863      	ldr	r3, [r4, #4]
	if (!backend_attached) {
    fb5c:	4c06      	ldr	r4, [pc, #24]	; (fb78 <log_backend_enable+0x38>)
    fb5e:	715a      	strb	r2, [r3, #5]
    fb60:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
    fb62:	601d      	str	r5, [r3, #0]
    fb64:	b912      	cbnz	r2, fb6c <log_backend_enable+0x2c>
    fb66:	4805      	ldr	r0, [pc, #20]	; (fb7c <log_backend_enable+0x3c>)
    fb68:	f005 fcdc 	bl	15524 <z_impl_k_sem_give>
	backend_attached = true;
    fb6c:	2301      	movs	r3, #1
    fb6e:	7023      	strb	r3, [r4, #0]
}
    fb70:	bd70      	pop	{r4, r5, r6, pc}
    fb72:	bf00      	nop
    fb74:	0001c1cc 	.word	0x0001c1cc
    fb78:	2001ec15 	.word	0x2001ec15
    fb7c:	200101dc 	.word	0x200101dc

0000fb80 <log_init>:
{
    fb80:	b570      	push	{r4, r5, r6, lr}
    fb82:	4b0f      	ldr	r3, [pc, #60]	; (fbc0 <log_init+0x40>)
    fb84:	e8d3 5fef 	ldaex	r5, [r3]
    fb88:	1c6a      	adds	r2, r5, #1
    fb8a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    fb8e:	2900      	cmp	r1, #0
    fb90:	d1f8      	bne.n	fb84 <log_init+0x4>
	if (atomic_inc(&initialized) != 0) {
    fb92:	b92d      	cbnz	r5, fba0 <log_init+0x20>
	return __log_backends_end - __log_backends_start;
    fb94:	4c0b      	ldr	r4, [pc, #44]	; (fbc4 <log_init+0x44>)
    fb96:	4e0c      	ldr	r6, [pc, #48]	; (fbc8 <log_init+0x48>)
    fb98:	1b36      	subs	r6, r6, r4
    fb9a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    fb9c:	42b5      	cmp	r5, r6
    fb9e:	db00      	blt.n	fba2 <log_init+0x22>
}
    fba0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    fba2:	7b23      	ldrb	r3, [r4, #12]
    fba4:	b143      	cbz	r3, fbb8 <log_init+0x38>
			if (backend->api->init != NULL) {
    fba6:	6823      	ldr	r3, [r4, #0]
    fba8:	695b      	ldr	r3, [r3, #20]
    fbaa:	b103      	cbz	r3, fbae <log_init+0x2e>
				backend->api->init();
    fbac:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    fbae:	2204      	movs	r2, #4
    fbb0:	2100      	movs	r1, #0
    fbb2:	4620      	mov	r0, r4
    fbb4:	f7ff ffc4 	bl	fb40 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    fbb8:	3501      	adds	r5, #1
    fbba:	3410      	adds	r4, #16
    fbbc:	e7ee      	b.n	fb9c <log_init+0x1c>
    fbbe:	bf00      	nop
    fbc0:	20010784 	.word	0x20010784
    fbc4:	0001c1cc 	.word	0x0001c1cc
    fbc8:	0001c1dc 	.word	0x0001c1dc

0000fbcc <log_filter_get>:
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
    fbcc:	b153      	cbz	r3, fbe4 <log_filter_get+0x18>
	return backend->cb->id;
    fbce:	6843      	ldr	r3, [r0, #4]
		return LOG_FILTER_SLOT_GET(filters,
    fbd0:	4907      	ldr	r1, [pc, #28]	; (fbf0 <log_filter_get+0x24>)
    fbd2:	7918      	ldrb	r0, [r3, #4]
    fbd4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    fbd8:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    fbdc:	40d8      	lsrs	r0, r3
    fbde:	f000 0007 	and.w	r0, r0, #7
    fbe2:	4770      	bx	lr
	return __log_const_start[source_id].level;
    fbe4:	4b03      	ldr	r3, [pc, #12]	; (fbf4 <log_filter_get+0x28>)
    fbe6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		return log_compiled_level_get(src_id);
    fbea:	7910      	ldrb	r0, [r2, #4]
}
    fbec:	4770      	bx	lr
    fbee:	bf00      	nop
    fbf0:	20010134 	.word	0x20010134
    fbf4:	0001c16c 	.word	0x0001c16c

0000fbf8 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    fbf8:	4b14      	ldr	r3, [pc, #80]	; (fc4c <log_strdup+0x54>)
{
    fbfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
    fbfc:	4298      	cmp	r0, r3
{
    fbfe:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    fc00:	d302      	bcc.n	fc08 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    fc02:	4b13      	ldr	r3, [pc, #76]	; (fc50 <log_strdup+0x58>)
    fc04:	4298      	cmp	r0, r3
    fc06:	d31c      	bcc.n	fc42 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    fc08:	2200      	movs	r2, #0
    fc0a:	2300      	movs	r3, #0
    fc0c:	4811      	ldr	r0, [pc, #68]	; (fc54 <log_strdup+0x5c>)
    fc0e:	a901      	add	r1, sp, #4
    fc10:	f004 ff24 	bl	14a5c <k_mem_slab_alloc>
	if (err != 0) {
    fc14:	4605      	mov	r5, r0
    fc16:	b9b8      	cbnz	r0, fc48 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fc18:	2201      	movs	r2, #1
    fc1a:	9b01      	ldr	r3, [sp, #4]
    fc1c:	e8d3 1fef 	ldaex	r1, [r3]
    fc20:	e8c3 2fe0 	stlex	r0, r2, [r3]
    fc24:	2800      	cmp	r0, #0
    fc26:	d1f9      	bne.n	fc1c <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    fc28:	9801      	ldr	r0, [sp, #4]
    fc2a:	4621      	mov	r1, r4
    fc2c:	221f      	movs	r2, #31
    fc2e:	3004      	adds	r0, #4
    fc30:	f00b facf 	bl	1b1d2 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    fc34:	237e      	movs	r3, #126	; 0x7e
    fc36:	9c01      	ldr	r4, [sp, #4]
    fc38:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    fc3c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    fc40:	3404      	adds	r4, #4
}
    fc42:	4620      	mov	r0, r4
    fc44:	b003      	add	sp, #12
    fc46:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    fc48:	4c03      	ldr	r4, [pc, #12]	; (fc58 <log_strdup+0x60>)
    fc4a:	e7fa      	b.n	fc42 <log_strdup+0x4a>
    fc4c:	0001befc 	.word	0x0001befc
    fc50:	0001fb08 	.word	0x0001fb08
    fc54:	20010790 	.word	0x20010790
    fc58:	0001e412 	.word	0x0001e412

0000fc5c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    fc5c:	b148      	cbz	r0, fc72 <log_is_strdup+0x16>
    fc5e:	4b05      	ldr	r3, [pc, #20]	; (fc74 <log_is_strdup+0x18>)
    fc60:	4298      	cmp	r0, r3
    fc62:	d305      	bcc.n	fc70 <log_is_strdup+0x14>
    fc64:	33a0      	adds	r3, #160	; 0xa0
    fc66:	4298      	cmp	r0, r3
    fc68:	bf2c      	ite	cs
    fc6a:	2000      	movcs	r0, #0
    fc6c:	2001      	movcc	r0, #1
    fc6e:	4770      	bx	lr
    fc70:	2000      	movs	r0, #0
}
    fc72:	4770      	bx	lr
    fc74:	2002c900 	.word	0x2002c900

0000fc78 <z_impl_log_process>:
{
    fc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    fc7c:	4b55      	ldr	r3, [pc, #340]	; (fdd4 <z_impl_log_process+0x15c>)
{
    fc7e:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    fc80:	781b      	ldrb	r3, [r3, #0]
{
    fc82:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
    fc84:	b903      	cbnz	r3, fc88 <z_impl_log_process+0x10>
    fc86:	b340      	cbz	r0, fcda <z_impl_log_process+0x62>
	__asm__ volatile(
    fc88:	f04f 0320 	mov.w	r3, #32
    fc8c:	f3ef 8611 	mrs	r6, BASEPRI
    fc90:	f383 8811 	msr	BASEPRI, r3
    fc94:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    fc98:	484f      	ldr	r0, [pc, #316]	; (fdd8 <z_impl_log_process+0x160>)
    fc9a:	f009 fe9d 	bl	199d8 <log_list_head_get>
    fc9e:	4604      	mov	r4, r0
	__asm__ volatile(
    fca0:	f386 8811 	msr	BASEPRI, r6
    fca4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    fca8:	b158      	cbz	r0, fcc2 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    fcaa:	4b4c      	ldr	r3, [pc, #304]	; (fddc <z_impl_log_process+0x164>)
    fcac:	e8d3 2fef 	ldaex	r2, [r3]
    fcb0:	3a01      	subs	r2, #1
    fcb2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    fcb6:	2900      	cmp	r1, #0
    fcb8:	d1f8      	bne.n	fcac <z_impl_log_process+0x34>
	if (!bypass) {
    fcba:	b195      	cbz	r5, fce2 <z_impl_log_process+0x6a>
	log_msg_put(msg);
    fcbc:	4620      	mov	r0, r4
    fcbe:	f009 ff9a 	bl	19bf6 <log_msg_put>
	if (!bypass && dropped_cnt) {
    fcc2:	b925      	cbnz	r5, fcce <z_impl_log_process+0x56>
    fcc4:	4b46      	ldr	r3, [pc, #280]	; (fde0 <z_impl_log_process+0x168>)
    fcc6:	681b      	ldr	r3, [r3, #0]
    fcc8:	b10b      	cbz	r3, fcce <z_impl_log_process+0x56>
		dropped_notify();
    fcca:	f7ff fe93 	bl	f9f4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    fcce:	4842      	ldr	r0, [pc, #264]	; (fdd8 <z_impl_log_process+0x160>)
    fcd0:	f009 fe80 	bl	199d4 <log_list_head_peek>
    fcd4:	1e05      	subs	r5, r0, #0
    fcd6:	bf18      	it	ne
    fcd8:	2501      	movne	r5, #1
}
    fcda:	4628      	mov	r0, r5
    fcdc:	b005      	add	sp, #20
    fcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    fce2:	4b40      	ldr	r3, [pc, #256]	; (fde4 <z_impl_log_process+0x16c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    fce4:	781b      	ldrb	r3, [r3, #0]
    fce6:	b9cb      	cbnz	r3, fd1c <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    fce8:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
    fcea:	07da      	lsls	r2, r3, #31
    fcec:	d416      	bmi.n	fd1c <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
    fcee:	f009 ff91 	bl	19c14 <log_msg_str_get>
    fcf2:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    fcf4:	4620      	mov	r0, r4
    fcf6:	f009 ff5c 	bl	19bb2 <log_msg_nargs_get>
    fcfa:	4601      	mov	r1, r0
    fcfc:	4640      	mov	r0, r8
    fcfe:	f009 fe7e 	bl	199fe <z_log_get_s_mask>
    fd02:	4606      	mov	r6, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    fd04:	4f38      	ldr	r7, [pc, #224]	; (fde8 <z_impl_log_process+0x170>)
    fd06:	4b39      	ldr	r3, [pc, #228]	; (fdec <z_impl_log_process+0x174>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    fd08:	f8df b100 	ldr.w	fp, [pc, #256]	; fe0c <z_impl_log_process+0x194>
    fd0c:	1bdb      	subs	r3, r3, r7
    fd0e:	08db      	lsrs	r3, r3, #3
    fd10:	9303      	str	r3, [sp, #12]
    fd12:	4b37      	ldr	r3, [pc, #220]	; (fdf0 <z_impl_log_process+0x178>)
    fd14:	1bdb      	subs	r3, r3, r7
    fd16:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    fd1a:	b946      	cbnz	r6, fd2e <z_impl_log_process+0xb6>
	return __log_backends_end - __log_backends_start;
    fd1c:	4e35      	ldr	r6, [pc, #212]	; (fdf4 <z_impl_log_process+0x17c>)
    fd1e:	4f36      	ldr	r7, [pc, #216]	; (fdf8 <z_impl_log_process+0x180>)
    fd20:	f04f 0800 	mov.w	r8, #0
    fd24:	1bbf      	subs	r7, r7, r6
		return LOG_FILTER_SLOT_GET(filters,
    fd26:	f8df 90e8 	ldr.w	r9, [pc, #232]	; fe10 <z_impl_log_process+0x198>
    fd2a:	113f      	asrs	r7, r7, #4
    fd2c:	e04e      	b.n	fdcc <z_impl_log_process+0x154>
		idx = 31 - __builtin_clz(mask);
    fd2e:	fab6 f186 	clz	r1, r6
    fd32:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    fd36:	4649      	mov	r1, r9
    fd38:	4620      	mov	r0, r4
    fd3a:	f009 ff3d 	bl	19bb8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    fd3e:	4b2f      	ldr	r3, [pc, #188]	; (fdfc <z_impl_log_process+0x184>)
		str = (const char *)log_msg_arg_get(msg, idx);
    fd40:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    fd42:	4298      	cmp	r0, r3
    fd44:	d302      	bcc.n	fd4c <z_impl_log_process+0xd4>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    fd46:	4b2e      	ldr	r3, [pc, #184]	; (fe00 <z_impl_log_process+0x188>)
    fd48:	4298      	cmp	r0, r3
    fd4a:	d31e      	bcc.n	fd8a <z_impl_log_process+0x112>
    fd4c:	4608      	mov	r0, r1
    fd4e:	f7ff ff85 	bl	fc5c <log_is_strdup>
    fd52:	4602      	mov	r2, r0
    fd54:	b9c8      	cbnz	r0, fd8a <z_impl_log_process+0x112>
    fd56:	4b2b      	ldr	r3, [pc, #172]	; (fe04 <z_impl_log_process+0x18c>)
    fd58:	4299      	cmp	r1, r3
    fd5a:	d016      	beq.n	fd8a <z_impl_log_process+0x112>
	return msg->hdr.ids.source_id;
    fd5c:	8963      	ldrh	r3, [r4, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    fd5e:	9903      	ldr	r1, [sp, #12]
    fd60:	f3c3 1389 	ubfx	r3, r3, #6, #10
    fd64:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    fd66:	bf38      	it	cc
    fd68:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    fd6c:	f8db 3000 	ldr.w	r3, [fp]
    fd70:	075b      	lsls	r3, r3, #29
    fd72:	d00a      	beq.n	fd8a <z_impl_log_process+0x112>
    fd74:	ea4f 138a 	mov.w	r3, sl, lsl #6
    fd78:	f043 0301 	orr.w	r3, r3, #1
    fd7c:	f8ad 3000 	strh.w	r3, [sp]
    fd80:	4649      	mov	r1, r9
    fd82:	4643      	mov	r3, r8
    fd84:	4820      	ldr	r0, [pc, #128]	; (fe08 <z_impl_log_process+0x190>)
    fd86:	f009 fe99 	bl	19abc <log_3>
		mask &= ~BIT(idx);
    fd8a:	2101      	movs	r1, #1
    fd8c:	fa01 f109 	lsl.w	r1, r1, r9
    fd90:	ea26 0601 	bic.w	r6, r6, r1
    fd94:	e7c1      	b.n	fd1a <z_impl_log_process+0xa2>
			if (log_backend_is_active(backend) &&
    fd96:	6873      	ldr	r3, [r6, #4]
    fd98:	795a      	ldrb	r2, [r3, #5]
    fd9a:	b1a2      	cbz	r2, fdc6 <z_impl_log_process+0x14e>
    fd9c:	8960      	ldrh	r0, [r4, #10]
		return LOG_FILTER_SLOT_GET(filters,
    fd9e:	791b      	ldrb	r3, [r3, #4]
    fda0:	f3c0 1089 	ubfx	r0, r0, #6, #10
    fda4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    fda8:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
	return msg->hdr.ids.level;
    fdac:	7aa1      	ldrb	r1, [r4, #10]
    fdae:	40d3      	lsrs	r3, r2
    fdb0:	f001 0107 	and.w	r1, r1, #7
    fdb4:	f003 0307 	and.w	r3, r3, #7
			if (log_backend_is_active(backend) &&
    fdb8:	4299      	cmp	r1, r3
    fdba:	d804      	bhi.n	fdc6 <z_impl_log_process+0x14e>
	backend->api->put(backend, msg);
    fdbc:	6833      	ldr	r3, [r6, #0]
    fdbe:	4621      	mov	r1, r4
    fdc0:	4630      	mov	r0, r6
    fdc2:	681b      	ldr	r3, [r3, #0]
    fdc4:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    fdc6:	f108 0801 	add.w	r8, r8, #1
    fdca:	3610      	adds	r6, #16
    fdcc:	45b8      	cmp	r8, r7
    fdce:	dbe2      	blt.n	fd96 <z_impl_log_process+0x11e>
    fdd0:	e774      	b.n	fcbc <z_impl_log_process+0x44>
    fdd2:	bf00      	nop
    fdd4:	2001ec15 	.word	0x2001ec15
    fdd8:	20010788 	.word	0x20010788
    fddc:	2001077c 	.word	0x2001077c
    fde0:	20010780 	.word	0x20010780
    fde4:	2001ec16 	.word	0x2001ec16
    fde8:	0001c16c 	.word	0x0001c16c
    fdec:	0001c1cc 	.word	0x0001c1cc
    fdf0:	0001c18c 	.word	0x0001c18c
    fdf4:	0001c1cc 	.word	0x0001c1cc
    fdf8:	0001c1dc 	.word	0x0001c1dc
    fdfc:	0001befc 	.word	0x0001befc
    fe00:	0001fb08 	.word	0x0001fb08
    fe04:	0001e412 	.word	0x0001e412
    fe08:	0001e42c 	.word	0x0001e42c
    fe0c:	20010144 	.word	0x20010144
    fe10:	20010134 	.word	0x20010134

0000fe14 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    fe14:	4b27      	ldr	r3, [pc, #156]	; (feb4 <msg_finalize+0xa0>)
{
    fe16:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    fe18:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    fe1a:	8141      	strh	r1, [r0, #10]
{
    fe1c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    fe1e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    fe20:	4d25      	ldr	r5, [pc, #148]	; (feb8 <msg_finalize+0xa4>)
    fe22:	60e0      	str	r0, [r4, #12]
    fe24:	e8d5 3fef 	ldaex	r3, [r5]
    fe28:	3301      	adds	r3, #1
    fe2a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    fe2e:	2a00      	cmp	r2, #0
    fe30:	d1f8      	bne.n	fe24 <msg_finalize+0x10>
	__asm__ volatile(
    fe32:	f04f 0320 	mov.w	r3, #32
    fe36:	f3ef 8611 	mrs	r6, BASEPRI
    fe3a:	f383 8811 	msr	BASEPRI, r3
    fe3e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    fe42:	481e      	ldr	r0, [pc, #120]	; (febc <msg_finalize+0xa8>)
    fe44:	4621      	mov	r1, r4
    fe46:	f009 fdbb 	bl	199c0 <log_list_add_tail>
	__asm__ volatile(
    fe4a:	f386 8811 	msr	BASEPRI, r6
    fe4e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    fe52:	4b1b      	ldr	r3, [pc, #108]	; (fec0 <msg_finalize+0xac>)
    fe54:	781b      	ldrb	r3, [r3, #0]
    fe56:	b183      	cbz	r3, fe7a <msg_finalize+0x66>
	__asm__ volatile(
    fe58:	f04f 0320 	mov.w	r3, #32
    fe5c:	f3ef 8411 	mrs	r4, BASEPRI
    fe60:	f383 8811 	msr	BASEPRI, r3
    fe64:	f3bf 8f6f 	isb	sy
	return z_impl_log_process(bypass);
    fe68:	2000      	movs	r0, #0
    fe6a:	f7ff ff05 	bl	fc78 <z_impl_log_process>
	__asm__ volatile(
    fe6e:	f384 8811 	msr	BASEPRI, r4
    fe72:	f3bf 8f6f 	isb	sy
}
    fe76:	b002      	add	sp, #8
    fe78:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    fe7a:	4a12      	ldr	r2, [pc, #72]	; (fec4 <msg_finalize+0xb0>)
    fe7c:	682b      	ldr	r3, [r5, #0]
    fe7e:	6812      	ldr	r2, [r2, #0]
    fe80:	2a00      	cmp	r2, #0
    fe82:	d0f8      	beq.n	fe76 <msg_finalize+0x62>
    fe84:	2b01      	cmp	r3, #1
    fe86:	d10a      	bne.n	fe9e <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
    fe88:	2200      	movs	r2, #0
    fe8a:	2300      	movs	r3, #0
    fe8c:	480e      	ldr	r0, [pc, #56]	; (fec8 <msg_finalize+0xb4>)
    fe8e:	e9cd 2300 	strd	r2, r3, [sp]
    fe92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    fe96:	2300      	movs	r3, #0
    fe98:	f005 fec0 	bl	15c1c <z_impl_k_timer_start>
    fe9c:	e7eb      	b.n	fe76 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    fe9e:	2b0a      	cmp	r3, #10
    fea0:	d1e9      	bne.n	fe76 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
    fea2:	4809      	ldr	r0, [pc, #36]	; (fec8 <msg_finalize+0xb4>)
    fea4:	f00b fe2f 	bl	1bb06 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    fea8:	4808      	ldr	r0, [pc, #32]	; (fecc <msg_finalize+0xb8>)
}
    feaa:	b002      	add	sp, #8
    feac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    feb0:	f005 bb38 	b.w	15524 <z_impl_k_sem_give>
    feb4:	20010004 	.word	0x20010004
    feb8:	2001077c 	.word	0x2001077c
    febc:	20010788 	.word	0x20010788
    fec0:	2001ec16 	.word	0x2001ec16
    fec4:	200107ac 	.word	0x200107ac
    fec8:	200101f8 	.word	0x200101f8
    fecc:	200101dc 	.word	0x200101dc

0000fed0 <log_process_thread_func>:
{
    fed0:	b510      	push	{r4, lr}
	log_init();
    fed2:	f7ff fe55 	bl	fb80 <log_init>
	return z_impl_k_current_get();
    fed6:	f005 fb1f 	bl	15518 <z_impl_k_current_get>
	proc_tid = process_tid;
    feda:	4b0c      	ldr	r3, [pc, #48]	; (ff0c <log_process_thread_func+0x3c>)
    fedc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    fede:	b130      	cbz	r0, feee <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    fee0:	4b0b      	ldr	r3, [pc, #44]	; (ff10 <log_process_thread_func+0x40>)
	    process_tid &&
    fee2:	681b      	ldr	r3, [r3, #0]
    fee4:	2b09      	cmp	r3, #9
    fee6:	dd02      	ble.n	feee <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    fee8:	480a      	ldr	r0, [pc, #40]	; (ff14 <log_process_thread_func+0x44>)
    feea:	f005 fb1b 	bl	15524 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    feee:	4c09      	ldr	r4, [pc, #36]	; (ff14 <log_process_thread_func+0x44>)
    fef0:	2000      	movs	r0, #0
    fef2:	f7ff fec1 	bl	fc78 <z_impl_log_process>
		if (log_process(false) == false) {
    fef6:	2800      	cmp	r0, #0
    fef8:	d1fa      	bne.n	fef0 <log_process_thread_func+0x20>
    fefa:	f04f 32ff 	mov.w	r2, #4294967295
    fefe:	f04f 33ff 	mov.w	r3, #4294967295
    ff02:	4620      	mov	r0, r4
    ff04:	f005 fb34 	bl	15570 <z_impl_k_sem_take>
    ff08:	e7f2      	b.n	fef0 <log_process_thread_func+0x20>
    ff0a:	bf00      	nop
    ff0c:	200107ac 	.word	0x200107ac
    ff10:	2001077c 	.word	0x2001077c
    ff14:	200101dc 	.word	0x200101dc

0000ff18 <z_impl_log_panic>:
{
    ff18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    ff1a:	4f0e      	ldr	r7, [pc, #56]	; (ff54 <z_impl_log_panic+0x3c>)
    ff1c:	783d      	ldrb	r5, [r7, #0]
    ff1e:	b975      	cbnz	r5, ff3e <z_impl_log_panic+0x26>
	log_init();
    ff20:	f7ff fe2e 	bl	fb80 <log_init>
	return __log_backends_end - __log_backends_start;
    ff24:	4c0c      	ldr	r4, [pc, #48]	; (ff58 <z_impl_log_panic+0x40>)
    ff26:	4e0d      	ldr	r6, [pc, #52]	; (ff5c <z_impl_log_panic+0x44>)
    ff28:	1b36      	subs	r6, r6, r4
    ff2a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    ff2c:	42b5      	cmp	r5, r6
    ff2e:	db07      	blt.n	ff40 <z_impl_log_panic+0x28>
    ff30:	2000      	movs	r0, #0
    ff32:	f7ff fea1 	bl	fc78 <z_impl_log_process>
		while (log_process(false) == true) {
    ff36:	2800      	cmp	r0, #0
    ff38:	d1fa      	bne.n	ff30 <z_impl_log_panic+0x18>
	panic_mode = true;
    ff3a:	2301      	movs	r3, #1
    ff3c:	703b      	strb	r3, [r7, #0]
}
    ff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    ff40:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    ff42:	795b      	ldrb	r3, [r3, #5]
    ff44:	b11b      	cbz	r3, ff4e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    ff46:	6823      	ldr	r3, [r4, #0]
    ff48:	4620      	mov	r0, r4
    ff4a:	691b      	ldr	r3, [r3, #16]
    ff4c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    ff4e:	3501      	adds	r5, #1
    ff50:	3410      	adds	r4, #16
    ff52:	e7eb      	b.n	ff2c <z_impl_log_panic+0x14>
    ff54:	2001ec16 	.word	0x2001ec16
    ff58:	0001c1cc 	.word	0x0001c1cc
    ff5c:	0001c1dc 	.word	0x0001c1dc

0000ff60 <log_free>:
{
    ff60:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    ff62:	3804      	subs	r0, #4
    ff64:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    ff66:	e8d0 3fef 	ldaex	r3, [r0]
    ff6a:	1e5a      	subs	r2, r3, #1
    ff6c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    ff70:	2900      	cmp	r1, #0
    ff72:	d1f8      	bne.n	ff66 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
    ff74:	2b01      	cmp	r3, #1
    ff76:	d103      	bne.n	ff80 <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    ff78:	4803      	ldr	r0, [pc, #12]	; (ff88 <log_free+0x28>)
    ff7a:	a901      	add	r1, sp, #4
    ff7c:	f004 fda0 	bl	14ac0 <k_mem_slab_free>
}
    ff80:	b003      	add	sp, #12
    ff82:	f85d fb04 	ldr.w	pc, [sp], #4
    ff86:	bf00      	nop
    ff88:	20010790 	.word	0x20010790

0000ff8c <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    ff8c:	2320      	movs	r3, #32
    ff8e:	4902      	ldr	r1, [pc, #8]	; (ff98 <log_msg_pool_init+0xc>)
    ff90:	461a      	mov	r2, r3
    ff92:	4802      	ldr	r0, [pc, #8]	; (ff9c <log_msg_pool_init+0x10>)
    ff94:	f00b bb7b 	b.w	1b68e <k_mem_slab_init>
    ff98:	2002c9a0 	.word	0x2002c9a0
    ff9c:	200107b0 	.word	0x200107b0

0000ffa0 <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
    ffa0:	2300      	movs	r3, #0
{
    ffa2:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    ffa4:	4d09      	ldr	r5, [pc, #36]	; (ffcc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    ffa6:	9301      	str	r3, [sp, #4]
    ffa8:	2001      	movs	r0, #1
    ffaa:	f7ff fe65 	bl	fc78 <z_impl_log_process>
    ffae:	4604      	mov	r4, r0
			log_dropped();
    ffb0:	f7ff fd42 	bl	fa38 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    ffb4:	2200      	movs	r2, #0
    ffb6:	2300      	movs	r3, #0
    ffb8:	4628      	mov	r0, r5
    ffba:	a901      	add	r1, sp, #4
    ffbc:	f004 fd4e 	bl	14a5c <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    ffc0:	b108      	cbz	r0, ffc6 <log_msg_no_space_handle+0x26>
    ffc2:	2c00      	cmp	r4, #0
    ffc4:	d1f0      	bne.n	ffa8 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    ffc6:	9801      	ldr	r0, [sp, #4]
    ffc8:	b003      	add	sp, #12
    ffca:	bd30      	pop	{r4, r5, pc}
    ffcc:	200107b0 	.word	0x200107b0

0000ffd0 <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
    ffd0:	2300      	movs	r3, #0
{
    ffd2:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ffd4:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
    ffd6:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    ffd8:	4806      	ldr	r0, [pc, #24]	; (fff4 <log_msg_chunk_alloc+0x24>)
    ffda:	2300      	movs	r3, #0
    ffdc:	a901      	add	r1, sp, #4
    ffde:	f004 fd3d 	bl	14a5c <k_mem_slab_alloc>
	if (err != 0) {
    ffe2:	b110      	cbz	r0, ffea <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    ffe4:	f7ff ffdc 	bl	ffa0 <log_msg_no_space_handle>
    ffe8:	9001      	str	r0, [sp, #4]
}
    ffea:	9801      	ldr	r0, [sp, #4]
    ffec:	b003      	add	sp, #12
    ffee:	f85d fb04 	ldr.w	pc, [sp], #4
    fff2:	bf00      	nop
    fff4:	200107b0 	.word	0x200107b0

0000fff8 <msg_free>:
{
    fff8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    fffa:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    fffc:	7a45      	ldrb	r5, [r0, #9]
{
    fffe:	b085      	sub	sp, #20
   10000:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   10002:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   10004:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   10008:	d41c      	bmi.n	10044 <msg_free+0x4c>
   1000a:	b1dd      	cbz	r5, 10044 <msg_free+0x4c>
		uint32_t smask = 0;
   1000c:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   1000e:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   10010:	4631      	mov	r1, r6
   10012:	9801      	ldr	r0, [sp, #4]
   10014:	f009 fdd0 	bl	19bb8 <log_msg_arg_get>
   10018:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1001a:	f7ff fe1f 	bl	fc5c <log_is_strdup>
   1001e:	b170      	cbz	r0, 1003e <msg_free+0x46>
				if (smask == 0) {
   10020:	b934      	cbnz	r4, 10030 <msg_free+0x38>
					smask = z_log_get_s_mask(
   10022:	9b01      	ldr	r3, [sp, #4]
   10024:	4629      	mov	r1, r5
   10026:	6918      	ldr	r0, [r3, #16]
   10028:	f009 fce9 	bl	199fe <z_log_get_s_mask>
					if (smask == 0) {
   1002c:	4604      	mov	r4, r0
   1002e:	b148      	cbz	r0, 10044 <msg_free+0x4c>
				if (smask & BIT(i)) {
   10030:	fa24 f306 	lsr.w	r3, r4, r6
   10034:	07d9      	lsls	r1, r3, #31
   10036:	d502      	bpl.n	1003e <msg_free+0x46>
					log_free(buf);
   10038:	4638      	mov	r0, r7
   1003a:	f7ff ff91 	bl	ff60 <log_free>
		for (i = 0; i < nargs; i++) {
   1003e:	3601      	adds	r6, #1
   10040:	42ae      	cmp	r6, r5
   10042:	d3e5      	bcc.n	10010 <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   10044:	9b01      	ldr	r3, [sp, #4]
   10046:	7a1a      	ldrb	r2, [r3, #8]
   10048:	0792      	lsls	r2, r2, #30
   1004a:	d504      	bpl.n	10056 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   1004c:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1004e:	4c08      	ldr	r4, [pc, #32]	; (10070 <msg_free+0x78>)
   10050:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   10052:	9b03      	ldr	r3, [sp, #12]
   10054:	b92b      	cbnz	r3, 10062 <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   10056:	4806      	ldr	r0, [pc, #24]	; (10070 <msg_free+0x78>)
   10058:	a901      	add	r1, sp, #4
   1005a:	f004 fd31 	bl	14ac0 <k_mem_slab_free>
}
   1005e:	b005      	add	sp, #20
   10060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   10062:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10064:	4620      	mov	r0, r4
   10066:	a903      	add	r1, sp, #12
   10068:	f004 fd2a 	bl	14ac0 <k_mem_slab_free>
		cont = next;
   1006c:	9503      	str	r5, [sp, #12]
   1006e:	e7f0      	b.n	10052 <msg_free+0x5a>
   10070:	200107b0 	.word	0x200107b0

00010074 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   10074:	b40e      	push	{r1, r2, r3}
   10076:	b503      	push	{r0, r1, lr}
   10078:	ab03      	add	r3, sp, #12
   1007a:	f853 2b04 	ldr.w	r2, [r3], #4
   1007e:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   10080:	4804      	ldr	r0, [pc, #16]	; (10094 <print_formatted+0x20>)
	va_start(args, fmt);
   10082:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   10084:	f7ff fa26 	bl	f4d4 <cbvprintf>
	va_end(args);

	return length;
}
   10088:	b002      	add	sp, #8
   1008a:	f85d eb04 	ldr.w	lr, [sp], #4
   1008e:	b003      	add	sp, #12
   10090:	4770      	bx	lr
   10092:	bf00      	nop
   10094:	00019f15 	.word	0x00019f15

00010098 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   10098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   1009c:	f011 0402 	ands.w	r4, r1, #2
{
   100a0:	b085      	sub	sp, #20
   100a2:	4690      	mov	r8, r2
   100a4:	4606      	mov	r6, r0
   100a6:	461a      	mov	r2, r3
   100a8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   100ac:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   100b0:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   100b4:	d007      	beq.n	100c6 <prefix_print+0x2e>
	if (!format) {
   100b6:	f011 0f44 	tst.w	r1, #68	; 0x44
   100ba:	d137      	bne.n	1012c <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   100bc:	4932      	ldr	r1, [pc, #200]	; (10188 <prefix_print+0xf0>)
   100be:	f7ff ffd9 	bl	10074 <print_formatted>
			length = print_formatted(log_output,
   100c2:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
   100c4:	460c      	mov	r4, r1
	if (color) {
   100c6:	f1b9 0f00 	cmp.w	r9, #0
   100ca:	d00a      	beq.n	100e2 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
   100cc:	4b2f      	ldr	r3, [pc, #188]	; (1018c <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   100ce:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   100d0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   100d4:	4b2e      	ldr	r3, [pc, #184]	; (10190 <prefix_print+0xf8>)
   100d6:	492f      	ldr	r1, [pc, #188]	; (10194 <prefix_print+0xfc>)
   100d8:	2a00      	cmp	r2, #0
   100da:	bf08      	it	eq
   100dc:	461a      	moveq	r2, r3
   100de:	f7ff ffc9 	bl	10074 <print_formatted>
	if (level_on) {
   100e2:	b13d      	cbz	r5, 100f4 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   100e4:	4b2c      	ldr	r3, [pc, #176]	; (10198 <prefix_print+0x100>)
   100e6:	4630      	mov	r0, r6
   100e8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   100ec:	492b      	ldr	r1, [pc, #172]	; (1019c <prefix_print+0x104>)
   100ee:	f7ff ffc1 	bl	10074 <print_formatted>
   100f2:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   100f4:	f1b8 0f00 	cmp.w	r8, #0
   100f8:	d043      	beq.n	10182 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   100fa:	2301      	movs	r3, #1
   100fc:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   10100:	4b27      	ldr	r3, [pc, #156]	; (101a0 <prefix_print+0x108>)
   10102:	f017 0f10 	tst.w	r7, #16
   10106:	4f27      	ldr	r7, [pc, #156]	; (101a4 <prefix_print+0x10c>)
   10108:	bf18      	it	ne
   1010a:	461f      	movne	r7, r3
   1010c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   10110:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   10114:	f7ff fc9c 	bl	fa50 <log_source_name_get>
   10118:	4639      	mov	r1, r7
   1011a:	4602      	mov	r2, r0
   1011c:	4630      	mov	r0, r6
   1011e:	f7ff ffa9 	bl	10074 <print_formatted>
   10122:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   10124:	4420      	add	r0, r4
   10126:	b005      	add	sp, #20
   10128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   1012c:	4b1e      	ldr	r3, [pc, #120]	; (101a8 <prefix_print+0x110>)
   1012e:	6819      	ldr	r1, [r3, #0]
   10130:	2900      	cmp	r1, #0
   10132:	d0c7      	beq.n	100c4 <prefix_print+0x2c>
		timestamp /= timestamp_div;
   10134:	4b1d      	ldr	r3, [pc, #116]	; (101ac <prefix_print+0x114>)
   10136:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   1013a:	681b      	ldr	r3, [r3, #0]
		ms = (remainder * 1000U) / freq;
   1013c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   10140:	fbb2 f3f3 	udiv	r3, r2, r3
		total_seconds = timestamp / freq;
   10144:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   10148:	fbb4 f2fe 	udiv	r2, r4, lr
   1014c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   10150:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   10154:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   10158:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   1015c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   10160:	fb01 441b 	mls	r4, r1, fp, r4
   10164:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   10168:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1016c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   10170:	e9cd b101 	strd	fp, r1, [sp, #4]
   10174:	fb0a e113 	mls	r1, sl, r3, lr
   10178:	9100      	str	r1, [sp, #0]
   1017a:	490d      	ldr	r1, [pc, #52]	; (101b0 <prefix_print+0x118>)
   1017c:	f7ff ff7a 	bl	10074 <print_formatted>
   10180:	e79f      	b.n	100c2 <prefix_print+0x2a>
	total += print_formatted(log_output,
   10182:	4f08      	ldr	r7, [pc, #32]	; (101a4 <prefix_print+0x10c>)
   10184:	e7c2      	b.n	1010c <prefix_print+0x74>
   10186:	bf00      	nop
   10188:	0001e47d 	.word	0x0001e47d
   1018c:	0001d690 	.word	0x0001d690
   10190:	0001e46f 	.word	0x0001e46f
   10194:	0001ea3f 	.word	0x0001ea3f
   10198:	0001d6a4 	.word	0x0001d6a4
   1019c:	0001e4a2 	.word	0x0001e4a2
   101a0:	0001e479 	.word	0x0001e479
   101a4:	0001e474 	.word	0x0001e474
   101a8:	200107cc 	.word	0x200107cc
   101ac:	200107d0 	.word	0x200107d0
   101b0:	0001e486 	.word	0x0001e486

000101b4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   101b4:	b538      	push	{r3, r4, r5, lr}
   101b6:	460c      	mov	r4, r1
	if (color) {
   101b8:	07e1      	lsls	r1, r4, #31
{
   101ba:	4605      	mov	r5, r0
	if (color) {
   101bc:	d503      	bpl.n	101c6 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   101be:	4a08      	ldr	r2, [pc, #32]	; (101e0 <postfix_print+0x2c>)
   101c0:	4908      	ldr	r1, [pc, #32]	; (101e4 <postfix_print+0x30>)
   101c2:	f7ff ff57 	bl	10074 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   101c6:	06e2      	lsls	r2, r4, #27
   101c8:	d408      	bmi.n	101dc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   101ca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   101cc:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   101ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   101d2:	bf4c      	ite	mi
   101d4:	4904      	ldrmi	r1, [pc, #16]	; (101e8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   101d6:	4905      	ldrpl	r1, [pc, #20]	; (101ec <postfix_print+0x38>)
   101d8:	f7ff bf4c 	b.w	10074 <print_formatted>
}
   101dc:	bd38      	pop	{r3, r4, r5, pc}
   101de:	bf00      	nop
   101e0:	0001e46f 	.word	0x0001e46f
   101e4:	0001ea3f 	.word	0x0001ea3f
   101e8:	0001e915 	.word	0x0001e915
   101ec:	0001e522 	.word	0x0001e522

000101f0 <hexdump_line_print>:
{
   101f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101f4:	461d      	mov	r5, r3
   101f6:	9b08      	ldr	r3, [sp, #32]
   101f8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   101fa:	06da      	lsls	r2, r3, #27
{
   101fc:	4604      	mov	r4, r0
   101fe:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10200:	d405      	bmi.n	1020e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10202:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   10204:	bf4c      	ite	mi
   10206:	492a      	ldrmi	r1, [pc, #168]	; (102b0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   10208:	492a      	ldrpl	r1, [pc, #168]	; (102b4 <hexdump_line_print+0xc4>)
   1020a:	f7ff ff33 	bl	10074 <print_formatted>
{
   1020e:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   10212:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 102bc <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   10216:	45a8      	cmp	r8, r5
   10218:	db2a      	blt.n	10270 <hexdump_line_print+0x80>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1021a:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   1021c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 102c0 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   10220:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 102c4 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   10224:	f8df a094 	ldr.w	sl, [pc, #148]	; 102bc <hexdump_line_print+0xcc>
		if (i < length) {
   10228:	42bd      	cmp	r5, r7
   1022a:	d22f      	bcs.n	1028c <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
   1022c:	4649      	mov	r1, r9
   1022e:	4620      	mov	r0, r4
   10230:	5d72      	ldrb	r2, [r6, r5]
   10232:	f7ff ff1f 	bl	10074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10236:	3501      	adds	r5, #1
   10238:	2d10      	cmp	r5, #16
   1023a:	d120      	bne.n	1027e <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
   1023c:	4620      	mov	r0, r4
   1023e:	491e      	ldr	r1, [pc, #120]	; (102b8 <hexdump_line_print+0xc8>)
   10240:	f7ff ff18 	bl	10074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10244:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   10246:	f8df 8074 	ldr.w	r8, [pc, #116]	; 102bc <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
   1024a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 102c8 <hexdump_line_print+0xd8>
		if (i < length) {
   1024e:	42af      	cmp	r7, r5
   10250:	d928      	bls.n	102a4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
   10252:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   10254:	4649      	mov	r1, r9
	return (int)((((unsigned)c) >= ' ') &&
   10256:	f1a2 0320 	sub.w	r3, r2, #32
   1025a:	2b5f      	cmp	r3, #95	; 0x5f
   1025c:	bf28      	it	cs
   1025e:	222e      	movcs	r2, #46	; 0x2e
   10260:	4620      	mov	r0, r4
   10262:	f7ff ff07 	bl	10074 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10266:	3501      	adds	r5, #1
   10268:	2d10      	cmp	r5, #16
   1026a:	d114      	bne.n	10296 <hexdump_line_print+0xa6>
}
   1026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   10270:	4649      	mov	r1, r9
   10272:	4620      	mov	r0, r4
   10274:	f7ff fefe 	bl	10074 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   10278:	f108 0801 	add.w	r8, r8, #1
   1027c:	e7cb      	b.n	10216 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   1027e:	076a      	lsls	r2, r5, #29
   10280:	d1d2      	bne.n	10228 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   10282:	4651      	mov	r1, sl
   10284:	4620      	mov	r0, r4
   10286:	f7ff fef5 	bl	10074 <print_formatted>
   1028a:	e7cd      	b.n	10228 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   1028c:	4641      	mov	r1, r8
   1028e:	4620      	mov	r0, r4
   10290:	f7ff fef0 	bl	10074 <print_formatted>
   10294:	e7cf      	b.n	10236 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   10296:	076b      	lsls	r3, r5, #29
   10298:	d1d9      	bne.n	1024e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   1029a:	4641      	mov	r1, r8
   1029c:	4620      	mov	r0, r4
   1029e:	f7ff fee9 	bl	10074 <print_formatted>
   102a2:	e7d4      	b.n	1024e <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
   102a4:	4641      	mov	r1, r8
   102a6:	4620      	mov	r0, r4
   102a8:	f7ff fee4 	bl	10074 <print_formatted>
   102ac:	e7db      	b.n	10266 <hexdump_line_print+0x76>
   102ae:	bf00      	nop
   102b0:	0001e915 	.word	0x0001e915
   102b4:	0001e522 	.word	0x0001e522
   102b8:	0001e4b2 	.word	0x0001e4b2
   102bc:	0001e4b0 	.word	0x0001e4b0
   102c0:	0001e4ae 	.word	0x0001e4ae
   102c4:	0001e4a8 	.word	0x0001e4a8
   102c8:	0001ecf7 	.word	0x0001ecf7

000102cc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   102cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   102d0:	7a8b      	ldrb	r3, [r1, #10]
   102d2:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   102d4:	f013 0807 	ands.w	r8, r3, #7
{
   102d8:	4605      	mov	r5, r0
   102da:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   102dc:	7a0a      	ldrb	r2, [r1, #8]
   102de:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   102e0:	d021      	beq.n	10326 <log_output_msg_process+0x5a>
   102e2:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   102e4:	8949      	ldrh	r1, [r1, #10]
   102e6:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   102ea:	f3c1 1189 	ubfx	r1, r1, #6, #10
   102ee:	e9cd 8300 	strd	r8, r3, [sp]
   102f2:	9102      	str	r1, [sp, #8]
   102f4:	68f3      	ldr	r3, [r6, #12]
   102f6:	4639      	mov	r1, r7
   102f8:	f002 0201 	and.w	r2, r2, #1
   102fc:	f7ff fecc 	bl	10098 <prefix_print>
   10300:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10302:	7a34      	ldrb	r4, [r6, #8]
   10304:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   10306:	f014 0401 	ands.w	r4, r4, #1
   1030a:	d00e      	beq.n	1032a <log_output_msg_process+0x5e>
		std_print(msg, log_output);
   1030c:	4629      	mov	r1, r5
   1030e:	4630      	mov	r0, r6
   10310:	f009 fc96 	bl	19c40 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   10314:	f1b8 0f00 	cmp.w	r8, #0
   10318:	d02b      	beq.n	10372 <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
   1031a:	4642      	mov	r2, r8
   1031c:	4639      	mov	r1, r7
   1031e:	4628      	mov	r0, r5
   10320:	f7ff ff48 	bl	101b4 <postfix_print>
   10324:	e025      	b.n	10372 <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   10326:	46c1      	mov	r9, r8
   10328:	e7eb      	b.n	10302 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1032a:	f1b8 0f00 	cmp.w	r8, #0
   1032e:	d126      	bne.n	1037e <log_output_msg_process+0xb2>
	size_t offset = 0;
   10330:	4627      	mov	r7, r4
		length = log_output->size;
   10332:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   10334:	aa06      	add	r2, sp, #24
		length = log_output->size;
   10336:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   10338:	4630      	mov	r0, r6
   1033a:	463b      	mov	r3, r7
   1033c:	68a9      	ldr	r1, [r5, #8]
   1033e:	f009 fc6b 	bl	19c18 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   10342:	9a06      	ldr	r2, [sp, #24]
   10344:	686b      	ldr	r3, [r5, #4]
   10346:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   10348:	b13a      	cbz	r2, 1035a <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
   1034a:	68ab      	ldr	r3, [r5, #8]
   1034c:	4413      	add	r3, r2
   1034e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   10352:	f1a4 030a 	sub.w	r3, r4, #10
   10356:	425c      	negs	r4, r3
   10358:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   1035a:	4628      	mov	r0, r5
   1035c:	f009 fdcd 	bl	19efa <log_output_flush>
		offset += length;
   10360:	9b06      	ldr	r3, [sp, #24]
   10362:	441f      	add	r7, r3
	} while (length > 0);
   10364:	2b00      	cmp	r3, #0
   10366:	d1e4      	bne.n	10332 <log_output_msg_process+0x66>
	if (eol) {
   10368:	b11c      	cbz	r4, 10372 <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
   1036a:	4628      	mov	r0, r5
   1036c:	4913      	ldr	r1, [pc, #76]	; (103bc <log_output_msg_process+0xf0>)
   1036e:	f7ff fe81 	bl	10074 <print_formatted>
	}

	log_output_flush(log_output);
   10372:	4628      	mov	r0, r5
   10374:	f009 fdc1 	bl	19efa <log_output_flush>
}
   10378:	b00a      	add	sp, #40	; 0x28
   1037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   1037e:	4630      	mov	r0, r6
   10380:	f009 fc48 	bl	19c14 <log_msg_str_get>
   10384:	490e      	ldr	r1, [pc, #56]	; (103c0 <log_output_msg_process+0xf4>)
   10386:	4602      	mov	r2, r0
   10388:	4628      	mov	r0, r5
   1038a:	f7ff fe73 	bl	10074 <print_formatted>
		length = sizeof(buf);
   1038e:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   10392:	aa05      	add	r2, sp, #20
   10394:	4623      	mov	r3, r4
   10396:	4630      	mov	r0, r6
   10398:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   1039a:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1039e:	f009 fc3b 	bl	19c18 <log_msg_hexdump_data_get>
		if (length) {
   103a2:	9a05      	ldr	r2, [sp, #20]
   103a4:	2a00      	cmp	r2, #0
   103a6:	d0b8      	beq.n	1031a <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
   103a8:	464b      	mov	r3, r9
   103aa:	4628      	mov	r0, r5
   103ac:	9700      	str	r7, [sp, #0]
   103ae:	a906      	add	r1, sp, #24
   103b0:	f7ff ff1e 	bl	101f0 <hexdump_line_print>
			offset += length;
   103b4:	9b05      	ldr	r3, [sp, #20]
   103b6:	441c      	add	r4, r3
		length = sizeof(buf);
   103b8:	e7eb      	b.n	10392 <log_output_msg_process+0xc6>
   103ba:	bf00      	nop
   103bc:	0001e4b4 	.word	0x0001e4b4
   103c0:	0001ea3f 	.word	0x0001ea3f

000103c4 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   103c4:	f242 730f 	movw	r3, #9999	; 0x270f
{
   103c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   103ca:	428b      	cmp	r3, r1
   103cc:	bf28      	it	cs
   103ce:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
   103d0:	6805      	ldr	r5, [r0, #0]
{
   103d2:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   103d4:	2105      	movs	r1, #5
   103d6:	4668      	mov	r0, sp
   103d8:	4a0d      	ldr	r2, [pc, #52]	; (10410 <log_output_dropped_process+0x4c>)
   103da:	f008 ff5f 	bl	1929c <snprintk>
   103de:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   103e0:	6863      	ldr	r3, [r4, #4]
   103e2:	4628      	mov	r0, r5
   103e4:	2204      	movs	r2, #4
   103e6:	685b      	ldr	r3, [r3, #4]
   103e8:	490a      	ldr	r1, [pc, #40]	; (10414 <log_output_dropped_process+0x50>)
   103ea:	f009 fc1c 	bl	19c26 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
   103ee:	6863      	ldr	r3, [r4, #4]
   103f0:	4632      	mov	r2, r6
   103f2:	4669      	mov	r1, sp
   103f4:	4628      	mov	r0, r5
   103f6:	685b      	ldr	r3, [r3, #4]
   103f8:	f009 fc15 	bl	19c26 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   103fc:	6863      	ldr	r3, [r4, #4]
   103fe:	2217      	movs	r2, #23
   10400:	4628      	mov	r0, r5
   10402:	685b      	ldr	r3, [r3, #4]
   10404:	4904      	ldr	r1, [pc, #16]	; (10418 <log_output_dropped_process+0x54>)
   10406:	f009 fc0e 	bl	19c26 <buffer_write>
		     log_output->control_block->ctx);
}
   1040a:	b002      	add	sp, #8
   1040c:	bd70      	pop	{r4, r5, r6, pc}
   1040e:	bf00      	nop
   10410:	0001ece3 	.word	0x0001ece3
   10414:	0001e4ee 	.word	0x0001e4ee
   10418:	0001e4d6 	.word	0x0001e4d6

0001041c <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   1041c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1041e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   10420:	4a07      	ldr	r2, [pc, #28]	; (10440 <log_output_timestamp_freq_set+0x24>)
{
   10422:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   10424:	4c07      	ldr	r4, [pc, #28]	; (10444 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   10426:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   10428:	42a0      	cmp	r0, r4
   1042a:	d804      	bhi.n	10436 <log_output_timestamp_freq_set+0x1a>
   1042c:	b101      	cbz	r1, 10430 <log_output_timestamp_freq_set+0x14>
   1042e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   10430:	4b05      	ldr	r3, [pc, #20]	; (10448 <log_output_timestamp_freq_set+0x2c>)
   10432:	6018      	str	r0, [r3, #0]
}
   10434:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   10436:	2101      	movs	r1, #1
		frequency /= 2U;
   10438:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   1043a:	005b      	lsls	r3, r3, #1
   1043c:	e7f4      	b.n	10428 <log_output_timestamp_freq_set+0xc>
   1043e:	bf00      	nop
   10440:	200107d0 	.word	0x200107d0
   10444:	000f4240 	.word	0x000f4240
   10448:	200107cc 	.word	0x200107cc

0001044c <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   1044c:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   1044e:	2804      	cmp	r0, #4
	entry->handler = NULL;
   10450:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   10452:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   10454:	bf98      	it	ls
   10456:	4b04      	ldrls	r3, [pc, #16]	; (10468 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   10458:	4a04      	ldr	r2, [pc, #16]	; (1046c <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   1045a:	bf98      	it	ls
   1045c:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   10460:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   10462:	600b      	str	r3, [r1, #0]
}
   10464:	4770      	bx	lr
   10466:	bf00      	nop
   10468:	0001d6f8 	.word	0x0001d6f8
   1046c:	0001d6d4 	.word	0x0001d6d4

00010470 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   10470:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   10472:	4a08      	ldr	r2, [pc, #32]	; (10494 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   10474:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   10476:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   10478:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   1047a:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   1047c:	4b06      	ldr	r3, [pc, #24]	; (10498 <backend_name_get+0x28>)
   1047e:	4a07      	ldr	r2, [pc, #28]	; (1049c <backend_name_get+0x2c>)
   10480:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   10482:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   10486:	bf3e      	ittt	cc
   10488:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   1048c:	689b      	ldrcc	r3, [r3, #8]
   1048e:	600b      	strcc	r3, [r1, #0]
	}
}
   10490:	4770      	bx	lr
   10492:	bf00      	nop
   10494:	0001d838 	.word	0x0001d838
   10498:	0001c1cc 	.word	0x0001c1cc
   1049c:	0001c1dc 	.word	0x0001c1dc

000104a0 <cmd_log_backends_list>:
{
   104a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   104a4:	4607      	mov	r7, r0
	for (int i = 0; i < backend_count; i++) {
   104a6:	2600      	movs	r6, #0
   104a8:	4c10      	ldr	r4, [pc, #64]	; (104ec <cmd_log_backends_list+0x4c>)
   104aa:	4d11      	ldr	r5, [pc, #68]	; (104f0 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   104ac:	f8df 8044 	ldr.w	r8, [pc, #68]	; 104f4 <cmd_log_backends_list+0x54>
   104b0:	1b2d      	subs	r5, r5, r4
   104b2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 104f8 <cmd_log_backends_list+0x58>
   104b6:	f8df a044 	ldr.w	sl, [pc, #68]	; 104fc <cmd_log_backends_list+0x5c>
   104ba:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   104bc:	42ae      	cmp	r6, r5
   104be:	db03      	blt.n	104c8 <cmd_log_backends_list+0x28>
}
   104c0:	2000      	movs	r0, #0
   104c2:	b002      	add	sp, #8
   104c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   104c8:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   104ca:	2100      	movs	r1, #0
   104cc:	7953      	ldrb	r3, [r2, #5]
   104ce:	7912      	ldrb	r2, [r2, #4]
   104d0:	2b00      	cmp	r3, #0
   104d2:	bf14      	ite	ne
   104d4:	4643      	movne	r3, r8
   104d6:	464b      	moveq	r3, r9
   104d8:	4638      	mov	r0, r7
   104da:	e9cd 3200 	strd	r3, r2, [sp]
   104de:	68a3      	ldr	r3, [r4, #8]
   104e0:	4652      	mov	r2, sl
   104e2:	f009 fe56 	bl	1a192 <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   104e6:	3601      	adds	r6, #1
   104e8:	3410      	adds	r4, #16
   104ea:	e7e7      	b.n	104bc <cmd_log_backends_list+0x1c>
   104ec:	0001c1cc 	.word	0x0001c1cc
   104f0:	0001c1dc 	.word	0x0001c1dc
   104f4:	0001e4f3 	.word	0x0001e4f3
   104f8:	0001e4fb 	.word	0x0001e4fb
   104fc:	0001e504 	.word	0x0001e504

00010500 <log_status>:
{
   10500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10504:	4b21      	ldr	r3, [pc, #132]	; (1058c <log_status+0x8c>)
   10506:	4d22      	ldr	r5, [pc, #136]	; (10590 <log_status+0x90>)
   10508:	4606      	mov	r6, r0
   1050a:	1aed      	subs	r5, r5, r3
	return backend->cb->active;
   1050c:	684b      	ldr	r3, [r1, #4]
   1050e:	460f      	mov	r7, r1
	if (!log_backend_is_active(backend)) {
   10510:	795b      	ldrb	r3, [r3, #5]
   10512:	08ed      	lsrs	r5, r5, #3
   10514:	b91b      	cbnz	r3, 1051e <log_status+0x1e>
		shell_warn(shell, "Logs are halted!");
   10516:	2104      	movs	r1, #4
   10518:	4a1e      	ldr	r2, [pc, #120]	; (10594 <log_status+0x94>)
   1051a:	f009 fe3a 	bl	1a192 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1051e:	2100      	movs	r1, #0
   10520:	4630      	mov	r0, r6
   10522:	4b1d      	ldr	r3, [pc, #116]	; (10598 <log_status+0x98>)
   10524:	4a1d      	ldr	r2, [pc, #116]	; (1059c <log_status+0x9c>)
   10526:	f009 fe34 	bl	1a192 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   1052a:	2100      	movs	r1, #0
   1052c:	4630      	mov	r0, r6
   1052e:	4a1c      	ldr	r2, [pc, #112]	; (105a0 <log_status+0xa0>)
   10530:	f009 fe2f 	bl	1a192 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   10534:	2400      	movs	r4, #0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   10536:	f8df a06c 	ldr.w	sl, [pc, #108]	; 105a4 <log_status+0xa4>
   1053a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 105a8 <log_status+0xa8>
	for (i = 0U; i < modules_cnt; i++) {
   1053e:	42ac      	cmp	r4, r5
   10540:	d103      	bne.n	1054a <log_status+0x4a>
}
   10542:	2000      	movs	r0, #0
   10544:	b003      	add	sp, #12
   10546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1054a:	4622      	mov	r2, r4
   1054c:	2301      	movs	r3, #1
   1054e:	2100      	movs	r1, #0
   10550:	4638      	mov	r0, r7
   10552:	f7ff fb3b 	bl	fbcc <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   10556:	2300      	movs	r3, #0
   10558:	4622      	mov	r2, r4
   1055a:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1055c:	4680      	mov	r8, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1055e:	4638      	mov	r0, r7
   10560:	f7ff fb34 	bl	fbcc <log_filter_get>
   10564:	4681      	mov	r9, r0
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   10566:	4621      	mov	r1, r4
   10568:	2000      	movs	r0, #0
   1056a:	f7ff fa71 	bl	fa50 <log_source_name_get>
   1056e:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   10572:	4603      	mov	r3, r0
   10574:	9201      	str	r2, [sp, #4]
   10576:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
   1057a:	2100      	movs	r1, #0
   1057c:	9200      	str	r2, [sp, #0]
   1057e:	4630      	mov	r0, r6
   10580:	465a      	mov	r2, fp
   10582:	f009 fe06 	bl	1a192 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   10586:	3401      	adds	r4, #1
   10588:	e7d9      	b.n	1053e <log_status+0x3e>
   1058a:	bf00      	nop
   1058c:	0001c16c 	.word	0x0001c16c
   10590:	0001c1cc 	.word	0x0001c1cc
   10594:	0001e525 	.word	0x0001e525
   10598:	0001e537 	.word	0x0001e537
   1059c:	0001e543 	.word	0x0001e543
   105a0:	0001e561 	.word	0x0001e561
   105a4:	0001d6e4 	.word	0x0001d6e4
   105a8:	0001e59e 	.word	0x0001e59e

000105ac <module_name_get>:
	entry->handler = NULL;
   105ac:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   105ae:	4a06      	ldr	r2, [pc, #24]	; (105c8 <module_name_get+0x1c>)
{
   105b0:	b510      	push	{r4, lr}
   105b2:	460c      	mov	r4, r1
	entry->handler = NULL;
   105b4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   105b6:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   105b8:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   105ba:	4601      	mov	r1, r0
   105bc:	4618      	mov	r0, r3
   105be:	f7ff fa47 	bl	fa50 <log_source_name_get>
   105c2:	6020      	str	r0, [r4, #0]
}
   105c4:	bd10      	pop	{r4, pc}
   105c6:	bf00      	nop
   105c8:	0001d6d4 	.word	0x0001d6d4

000105cc <shell_backend_cmd_execute>:
{
   105cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   105d0:	f852 bc04 	ldr.w	fp, [r2, #-4]
{
   105d4:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   105d6:	4658      	mov	r0, fp
{
   105d8:	4691      	mov	r9, r2
   105da:	468a      	mov	sl, r1
   105dc:	9300      	str	r3, [sp, #0]
	size_t slen = strlen(name);
   105de:	f00a fe19 	bl	1b214 <strlen>
	for (int i = 0; i < log_backend_count_get(); i++) {
   105e2:	f04f 0800 	mov.w	r8, #0
	size_t slen = strlen(name);
   105e6:	4602      	mov	r2, r0
	return __log_backends_end - __log_backends_start;
   105e8:	4c13      	ldr	r4, [pc, #76]	; (10638 <shell_backend_cmd_execute+0x6c>)
   105ea:	4e14      	ldr	r6, [pc, #80]	; (1063c <shell_backend_cmd_execute+0x70>)
   105ec:	1b36      	subs	r6, r6, r4
   105ee:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   105f0:	45b0      	cmp	r8, r6
   105f2:	db08      	blt.n	10606 <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   105f4:	465b      	mov	r3, fp
   105f6:	2102      	movs	r1, #2
   105f8:	4638      	mov	r0, r7
   105fa:	4a11      	ldr	r2, [pc, #68]	; (10640 <shell_backend_cmd_execute+0x74>)
   105fc:	f009 fdc9 	bl	1a192 <shell_fprintf>
		return -ENOEXEC;
   10600:	f06f 0507 	mvn.w	r5, #7
   10604:	e013      	b.n	1062e <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   10606:	68a1      	ldr	r1, [r4, #8]
   10608:	4658      	mov	r0, fp
   1060a:	9201      	str	r2, [sp, #4]
   1060c:	f00a fe15 	bl	1b23a <strncmp>
   10610:	3410      	adds	r4, #16
   10612:	4605      	mov	r5, r0
   10614:	b118      	cbz	r0, 1061e <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   10616:	9a01      	ldr	r2, [sp, #4]
   10618:	f108 0801 	add.w	r8, r8, #1
   1061c:	e7e8      	b.n	105f0 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   1061e:	4906      	ldr	r1, [pc, #24]	; (10638 <shell_backend_cmd_execute+0x6c>)
   10620:	464b      	mov	r3, r9
   10622:	4652      	mov	r2, sl
   10624:	4638      	mov	r0, r7
   10626:	9c00      	ldr	r4, [sp, #0]
   10628:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   1062c:	47a0      	blx	r4
}
   1062e:	4628      	mov	r0, r5
   10630:	b003      	add	sp, #12
   10632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10636:	bf00      	nop
   10638:	0001c1cc 	.word	0x0001c1cc
   1063c:	0001c1dc 	.word	0x0001c1dc
   10640:	0001e5b2 	.word	0x0001e5b2

00010644 <cmd_log_backend_status>:
{
   10644:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   10646:	4b02      	ldr	r3, [pc, #8]	; (10650 <cmd_log_backend_status+0xc>)
   10648:	f7ff ffc0 	bl	105cc <shell_backend_cmd_execute>
}
   1064c:	2000      	movs	r0, #0
   1064e:	bd08      	pop	{r3, pc}
   10650:	00010501 	.word	0x00010501

00010654 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   10654:	4b01      	ldr	r3, [pc, #4]	; (1065c <cmd_log_backend_halt+0x8>)
   10656:	f7ff bfb9 	b.w	105cc <shell_backend_cmd_execute>
   1065a:	bf00      	nop
   1065c:	00019f43 	.word	0x00019f43

00010660 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   10660:	4b01      	ldr	r3, [pc, #4]	; (10668 <cmd_log_backend_go+0x8>)
   10662:	f7ff bfb3 	b.w	105cc <shell_backend_cmd_execute>
   10666:	bf00      	nop
   10668:	00019f4b 	.word	0x00019f4b

0001066c <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   1066c:	4b01      	ldr	r3, [pc, #4]	; (10674 <cmd_log_backend_enable+0x8>)
   1066e:	f7ff bfad 	b.w	105cc <shell_backend_cmd_execute>
   10672:	bf00      	nop
   10674:	00010775 	.word	0x00010775

00010678 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   10678:	4b01      	ldr	r3, [pc, #4]	; (10680 <cmd_log_backend_disable+0x8>)
   1067a:	f7ff bfa7 	b.w	105cc <shell_backend_cmd_execute>
   1067e:	bf00      	nop
   10680:	00019fc7 	.word	0x00019fc7

00010684 <shell_state_precheck>:
{
   10684:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   10686:	69c3      	ldr	r3, [r0, #28]
   10688:	68db      	ldr	r3, [r3, #12]
   1068a:	791c      	ldrb	r4, [r3, #4]
   1068c:	b92c      	cbnz	r4, 1069a <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   1068e:	2102      	movs	r1, #2
   10690:	4a03      	ldr	r2, [pc, #12]	; (106a0 <shell_state_precheck+0x1c>)
   10692:	f009 fd7e 	bl	1a192 <shell_fprintf>
   10696:	4620      	mov	r0, r4
}
   10698:	bd10      	pop	{r4, pc}
	return true;
   1069a:	2001      	movs	r0, #1
   1069c:	e7fc      	b.n	10698 <shell_state_precheck+0x14>
   1069e:	bf00      	nop
   106a0:	0001e5c7 	.word	0x0001e5c7

000106a4 <filters_set>:
{
   106a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106a8:	461f      	mov	r7, r3
   106aa:	4e2c      	ldr	r6, [pc, #176]	; (1075c <filters_set+0xb8>)
   106ac:	4b2c      	ldr	r3, [pc, #176]	; (10760 <filters_set+0xbc>)
	int cnt = all ? log_sources_count() : argc;
   106ae:	1e15      	subs	r5, r2, #0
   106b0:	eba6 0603 	sub.w	r6, r6, r3
   106b4:	ea4f 06d6 	mov.w	r6, r6, lsr #3
   106b8:	bf14      	ite	ne
   106ba:	462b      	movne	r3, r5
   106bc:	4633      	moveq	r3, r6
{
   106be:	b085      	sub	sp, #20
	int cnt = all ? log_sources_count() : argc;
   106c0:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   106c2:	684b      	ldr	r3, [r1, #4]
{
   106c4:	4680      	mov	r8, r0
	if (!backend->cb->active) {
   106c6:	795b      	ldrb	r3, [r3, #5]
{
   106c8:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   106ca:	b91b      	cbnz	r3, 106d4 <filters_set+0x30>
		shell_warn(shell, "Backend not active.");
   106cc:	2104      	movs	r1, #4
   106ce:	4a25      	ldr	r2, [pc, #148]	; (10764 <filters_set+0xc0>)
   106d0:	f009 fd5f 	bl	1a192 <shell_fprintf>
	for (i = 0U; i < modules_cnt; i++) {
   106d4:	2400      	movs	r4, #0
				shell_warn(shell, "%s: level set to %s.",
   106d6:	f8df a098 	ldr.w	sl, [pc, #152]	; 10770 <filters_set+0xcc>
	for (i = 0; i < cnt; i++) {
   106da:	9b02      	ldr	r3, [sp, #8]
   106dc:	429c      	cmp	r4, r3
   106de:	db02      	blt.n	106e6 <filters_set+0x42>
}
   106e0:	b005      	add	sp, #20
   106e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   106e6:	b3b5      	cbz	r5, 10756 <filters_set+0xb2>
	for (i = 0U; i < modules_cnt; i++) {
   106e8:	2300      	movs	r3, #0
		id = all ? i : module_id_get(argv[i]);
   106ea:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   106ee:	429e      	cmp	r6, r3
   106f0:	d107      	bne.n	10702 <filters_set+0x5e>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   106f2:	2102      	movs	r1, #2
   106f4:	4640      	mov	r0, r8
   106f6:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   106fa:	4a1b      	ldr	r2, [pc, #108]	; (10768 <filters_set+0xc4>)
   106fc:	f009 fd49 	bl	1a192 <shell_fprintf>
   10700:	e022      	b.n	10748 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   10702:	4619      	mov	r1, r3
   10704:	2000      	movs	r0, #0
   10706:	9303      	str	r3, [sp, #12]
   10708:	f7ff f9a2 	bl	fa50 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   1070c:	2240      	movs	r2, #64	; 0x40
   1070e:	4659      	mov	r1, fp
   10710:	f00a fd93 	bl	1b23a <strncmp>
   10714:	9b03      	ldr	r3, [sp, #12]
   10716:	b9c8      	cbnz	r0, 1074c <filters_set+0xa8>
			return i;
   10718:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, src_id, level);
   1071a:	2100      	movs	r1, #0
   1071c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1071e:	4648      	mov	r0, r9
   10720:	f7ff f9a4 	bl	fa6c <z_impl_log_filter_set>
			if (set_lvl != level) {
   10724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10726:	4683      	mov	fp, r0
   10728:	4283      	cmp	r3, r0
   1072a:	d00d      	beq.n	10748 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   1072c:	b985      	cbnz	r5, 10750 <filters_set+0xac>
					log_source_name_get(
   1072e:	4621      	mov	r1, r4
   10730:	4628      	mov	r0, r5
   10732:	f7ff f98d 	bl	fa50 <log_source_name_get>
   10736:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   10738:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   1073c:	2104      	movs	r1, #4
   1073e:	9200      	str	r2, [sp, #0]
   10740:	4640      	mov	r0, r8
   10742:	4a0a      	ldr	r2, [pc, #40]	; (1076c <filters_set+0xc8>)
   10744:	f009 fd25 	bl	1a192 <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   10748:	3401      	adds	r4, #1
   1074a:	e7c6      	b.n	106da <filters_set+0x36>
	for (i = 0U; i < modules_cnt; i++) {
   1074c:	3301      	adds	r3, #1
   1074e:	e7ce      	b.n	106ee <filters_set+0x4a>
						CONFIG_LOG_DOMAIN_ID, i) :
   10750:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   10754:	e7f0      	b.n	10738 <filters_set+0x94>
   10756:	4622      	mov	r2, r4
   10758:	e7df      	b.n	1071a <filters_set+0x76>
   1075a:	bf00      	nop
   1075c:	0001c1cc 	.word	0x0001c1cc
   10760:	0001c16c 	.word	0x0001c16c
   10764:	0001e5eb 	.word	0x0001e5eb
   10768:	0001e616 	.word	0x0001e616
   1076c:	0001e600 	.word	0x0001e600
   10770:	0001d6e4 	.word	0x0001d6e4

00010774 <log_enable>:
{
   10774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10778:	4606      	mov	r6, r0
   1077a:	4688      	mov	r8, r1
   1077c:	4691      	mov	r9, r2
   1077e:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   10780:	2700      	movs	r7, #0
	severity_level = severity_level_get(argv[1]);
   10782:	f8d3 b004 	ldr.w	fp, [r3, #4]
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   10786:	f8df a048 	ldr.w	sl, [pc, #72]	; 107d0 <log_enable+0x5c>
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   1078a:	2204      	movs	r2, #4
   1078c:	4658      	mov	r0, fp
   1078e:	f85a 1b04 	ldr.w	r1, [sl], #4
   10792:	f00a fd52 	bl	1b23a <strncmp>
   10796:	4604      	mov	r4, r0
   10798:	b170      	cbz	r0, 107b8 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1079a:	3701      	adds	r7, #1
   1079c:	2f05      	cmp	r7, #5
   1079e:	d1f4      	bne.n	1078a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   107a0:	2102      	movs	r1, #2
   107a2:	4630      	mov	r0, r6
   107a4:	686b      	ldr	r3, [r5, #4]
   107a6:	4a09      	ldr	r2, [pc, #36]	; (107cc <log_enable+0x58>)
   107a8:	f009 fcf3 	bl	1a192 <shell_fprintf>
   107ac:	f06f 0407 	mvn.w	r4, #7
}
   107b0:	4620      	mov	r0, r4
   107b2:	b003      	add	sp, #12
   107b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   107b8:	4641      	mov	r1, r8
   107ba:	4630      	mov	r0, r6
   107bc:	9700      	str	r7, [sp, #0]
   107be:	f105 0308 	add.w	r3, r5, #8
   107c2:	f1a9 0202 	sub.w	r2, r9, #2
   107c6:	f7ff ff6d 	bl	106a4 <filters_set>
	return 0;
   107ca:	e7f1      	b.n	107b0 <log_enable+0x3c>
   107cc:	0001e630 	.word	0x0001e630
   107d0:	0001d6e4 	.word	0x0001d6e4

000107d4 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   107d4:	b513      	push	{r0, r1, r4, lr}
   107d6:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   107d8:	f005 f874 	bl	158c4 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   107dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
   107e0:	9301      	str	r3, [sp, #4]
   107e2:	f3c0 4307 	ubfx	r3, r0, #16, #8
   107e6:	9300      	str	r3, [sp, #0]
   107e8:	2100      	movs	r1, #0
   107ea:	0e03      	lsrs	r3, r0, #24
   107ec:	4a03      	ldr	r2, [pc, #12]	; (107fc <cmd_kernel_version+0x28>)
   107ee:	4620      	mov	r0, r4
   107f0:	f009 fccf 	bl	1a192 <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   107f4:	2000      	movs	r0, #0
   107f6:	b002      	add	sp, #8
   107f8:	bd10      	pop	{r4, pc}
   107fa:	bf00      	nop
   107fc:	0001e7d7 	.word	0x0001e7d7

00010800 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   10800:	e92d 4878 	stmdb	sp!, {r3, r4, r5, r6, fp, lr}
   10804:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   10806:	f00b f947 	bl	1ba98 <z_impl_k_uptime_ticks>
   1080a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1080e:	2500      	movs	r5, #0
   10810:	fba0 bc06 	umull	fp, ip, r0, r6
   10814:	fb06 cc01 	mla	ip, r6, r1, ip
   10818:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   1081c:	4620      	mov	r0, r4
   1081e:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   10822:	4629      	mov	r1, r5
   10824:	4a02      	ldr	r2, [pc, #8]	; (10830 <cmd_kernel_uptime+0x30>)
   10826:	f009 fcb4 	bl	1a192 <shell_fprintf>
	return 0;
}
   1082a:	4628      	mov	r0, r5
   1082c:	e8bd 8878 	ldmia.w	sp!, {r3, r4, r5, r6, fp, pc}
   10830:	0001e7f0 	.word	0x0001e7f0

00010834 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   10834:	b510      	push	{r4, lr}
   10836:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", z_clock_elapsed());
   10838:	f002 f98c 	bl	12b54 <z_clock_elapsed>
   1083c:	2100      	movs	r1, #0
   1083e:	4603      	mov	r3, r0
   10840:	4a07      	ldr	r2, [pc, #28]	; (10860 <cmd_kernel_threads+0x2c>)
   10842:	4620      	mov	r0, r4
   10844:	f009 fca5 	bl	1a192 <shell_fprintf>
	shell_print(shell, "Threads:");
   10848:	4620      	mov	r0, r4
   1084a:	4a06      	ldr	r2, [pc, #24]	; (10864 <cmd_kernel_threads+0x30>)
   1084c:	2100      	movs	r1, #0
   1084e:	f009 fca0 	bl	1a192 <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   10852:	4621      	mov	r1, r4
   10854:	4804      	ldr	r0, [pc, #16]	; (10868 <cmd_kernel_threads+0x34>)
   10856:	f004 feb5 	bl	155c4 <k_thread_foreach>
	return 0;
}
   1085a:	2000      	movs	r0, #0
   1085c:	bd10      	pop	{r4, pc}
   1085e:	bf00      	nop
   10860:	0001e7ff 	.word	0x0001e7ff
   10864:	0001e81e 	.word	0x0001e81e
   10868:	000108c9 	.word	0x000108c9

0001086c <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   1086c:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   1086e:	4601      	mov	r1, r0
{
   10870:	4604      	mov	r4, r0
   10872:	b087      	sub	sp, #28
	k_thread_foreach(shell_stack_dump, (void *)shell);
   10874:	4811      	ldr	r0, [pc, #68]	; (108bc <cmd_kernel_stacks+0x50>)
   10876:	f004 fea5 	bl	155c4 <k_thread_foreach>
	 */
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
   1087a:	2300      	movs	r3, #0
   1087c:	4a10      	ldr	r2, [pc, #64]	; (108c0 <cmd_kernel_stacks+0x54>)
		for (size_t i = 0; i < size; i++) {
			if (buf[i] == 0xAAU) {
   1087e:	f812 1b01 	ldrb.w	r1, [r2], #1
   10882:	29aa      	cmp	r1, #170	; 0xaa
   10884:	d103      	bne.n	1088e <cmd_kernel_stacks+0x22>
				unused++;
   10886:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   10888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   1088c:	d1f7      	bne.n	1087e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   1088e:	2264      	movs	r2, #100	; 0x64
   10890:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   10894:	434a      	muls	r2, r1
   10896:	0ad2      	lsrs	r2, r2, #11
   10898:	2500      	movs	r5, #0
   1089a:	9205      	str	r2, [sp, #20]
   1089c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   108a0:	4620      	mov	r0, r4
   108a2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   108a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   108aa:	4629      	mov	r1, r5
   108ac:	4b04      	ldr	r3, [pc, #16]	; (108c0 <cmd_kernel_stacks+0x54>)
   108ae:	4a05      	ldr	r2, [pc, #20]	; (108c4 <cmd_kernel_stacks+0x58>)
   108b0:	9500      	str	r5, [sp, #0]
   108b2:	f009 fc6e 	bl	1a192 <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   108b6:	4628      	mov	r0, r5
   108b8:	b007      	add	sp, #28
   108ba:	bd30      	pop	{r4, r5, pc}
   108bc:	000109a5 	.word	0x000109a5
   108c0:	2002c100 	.word	0x2002c100
   108c4:	0001e828 	.word	0x0001e828

000108c8 <shell_tdata_dump>:
{
   108c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   108ca:	b087      	sub	sp, #28
   108cc:	4604      	mov	r4, r0
   108ce:	460d      	mov	r5, r1
	size_t size = thread->stack_info.size;
   108d0:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
	tname = k_thread_name_get(thread);
   108d4:	f00b f87c 	bl	1b9d0 <k_thread_name_get>
   108d8:	4606      	mov	r6, r0
	return z_impl_k_current_get();
   108da:	f004 fe1d 	bl	15518 <z_impl_k_current_get>
	shell_print(shell, "%s%p %-10s",
   108de:	4b22      	ldr	r3, [pc, #136]	; (10968 <shell_tdata_dump+0xa0>)
   108e0:	4a22      	ldr	r2, [pc, #136]	; (1096c <shell_tdata_dump+0xa4>)
   108e2:	2e00      	cmp	r6, #0
   108e4:	bf08      	it	eq
   108e6:	461e      	moveq	r6, r3
   108e8:	4b21      	ldr	r3, [pc, #132]	; (10970 <shell_tdata_dump+0xa8>)
   108ea:	2100      	movs	r1, #0
   108ec:	4284      	cmp	r4, r0
   108ee:	bf18      	it	ne
   108f0:	4613      	movne	r3, r2
   108f2:	e9cd 4600 	strd	r4, r6, [sp]
   108f6:	4628      	mov	r0, r5
   108f8:	4a1e      	ldr	r2, [pc, #120]	; (10974 <shell_tdata_dump+0xac>)
   108fa:	f009 fc4a 	bl	1a192 <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %d",
   108fe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   10902:	e9cd 2302 	strd	r2, r3, [sp, #8]
   10906:	f994 300e 	ldrsb.w	r3, [r4, #14]
   1090a:	2100      	movs	r1, #0
   1090c:	4628      	mov	r0, r5
   1090e:	4a1a      	ldr	r2, [pc, #104]	; (10978 <shell_tdata_dump+0xb0>)
   10910:	9300      	str	r3, [sp, #0]
   10912:	7b23      	ldrb	r3, [r4, #12]
   10914:	f009 fc3d 	bl	1a192 <shell_fprintf>
	shell_print(shell, "\tstate: %s", k_thread_state_str(thread));
   10918:	4620      	mov	r0, r4
   1091a:	f004 fe9b 	bl	15654 <k_thread_state_str>
   1091e:	2100      	movs	r1, #0
   10920:	4603      	mov	r3, r0
   10922:	4a16      	ldr	r2, [pc, #88]	; (1097c <shell_tdata_dump+0xb4>)
   10924:	4628      	mov	r0, r5
   10926:	f009 fc34 	bl	1a192 <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   1092a:	a905      	add	r1, sp, #20
   1092c:	4620      	mov	r0, r4
   1092e:	f00b f851 	bl	1b9d4 <z_impl_k_thread_stack_space_get>
	if (ret) {
   10932:	4601      	mov	r1, r0
   10934:	b138      	cbz	r0, 10946 <shell_tdata_dump+0x7e>
		shell_print(shell,
   10936:	4603      	mov	r3, r0
   10938:	2100      	movs	r1, #0
   1093a:	4628      	mov	r0, r5
   1093c:	4a10      	ldr	r2, [pc, #64]	; (10980 <shell_tdata_dump+0xb8>)
   1093e:	f009 fc28 	bl	1a192 <shell_fprintf>
}
   10942:	b007      	add	sp, #28
   10944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcnt = ((size - unused) * 100U) / size;
   10946:	2364      	movs	r3, #100	; 0x64
   10948:	9a05      	ldr	r2, [sp, #20]
   1094a:	1ab8      	subs	r0, r7, r2
   1094c:	4343      	muls	r3, r0
   1094e:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   10952:	e9cd 2000 	strd	r2, r0, [sp]
   10956:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1095a:	4628      	mov	r0, r5
   1095c:	463b      	mov	r3, r7
   1095e:	4a09      	ldr	r2, [pc, #36]	; (10984 <shell_tdata_dump+0xbc>)
   10960:	f009 fc17 	bl	1a192 <shell_fprintf>
}
   10964:	e7ed      	b.n	10942 <shell_tdata_dump+0x7a>
   10966:	bf00      	nop
   10968:	0001e86e 	.word	0x0001e86e
   1096c:	0001e4b0 	.word	0x0001e4b0
   10970:	0001f8c1 	.word	0x0001f8c1
   10974:	0001e871 	.word	0x0001e871
   10978:	0001e87d 	.word	0x0001e87d
   1097c:	0001e8a7 	.word	0x0001e8a7
   10980:	0001e8b3 	.word	0x0001e8b3
   10984:	0001e8e0 	.word	0x0001e8e0

00010988 <cmd_kernel_cycles>:
{
   10988:	b510      	push	{r4, lr}
   1098a:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1098c:	f002 f8fc 	bl	12b88 <z_timer_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   10990:	2100      	movs	r1, #0
   10992:	4603      	mov	r3, r0
   10994:	4a02      	ldr	r2, [pc, #8]	; (109a0 <cmd_kernel_cycles+0x18>)
   10996:	4620      	mov	r0, r4
   10998:	f009 fbfb 	bl	1a192 <shell_fprintf>
}
   1099c:	2000      	movs	r0, #0
   1099e:	bd10      	pop	{r4, pc}
   109a0:	0001e917 	.word	0x0001e917

000109a4 <shell_stack_dump>:
{
   109a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109a6:	4605      	mov	r5, r0
   109a8:	460e      	mov	r6, r1
	size_t size = thread->stack_info.size;
   109aa:	f8d0 70a4 	ldr.w	r7, [r0, #164]	; 0xa4
{
   109ae:	b089      	sub	sp, #36	; 0x24
   109b0:	a907      	add	r1, sp, #28
   109b2:	f00b f80f 	bl	1b9d4 <z_impl_k_thread_stack_space_get>
	if (ret) {
   109b6:	4604      	mov	r4, r0
   109b8:	b138      	cbz	r0, 109ca <shell_stack_dump+0x26>
		shell_print(shell,
   109ba:	4603      	mov	r3, r0
   109bc:	2100      	movs	r1, #0
   109be:	4630      	mov	r0, r6
   109c0:	4a0f      	ldr	r2, [pc, #60]	; (10a00 <shell_stack_dump+0x5c>)
   109c2:	f009 fbe6 	bl	1a192 <shell_fprintf>
}
   109c6:	b009      	add	sp, #36	; 0x24
   109c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   109ca:	4628      	mov	r0, r5
   109cc:	f00b f800 	bl	1b9d0 <k_thread_name_get>
	pcnt = ((size - unused) * 100U) / size;
   109d0:	2364      	movs	r3, #100	; 0x64
   109d2:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   109d4:	f8df c030 	ldr.w	ip, [pc, #48]	; 10a08 <shell_stack_dump+0x64>
	pcnt = ((size - unused) * 100U) / size;
   109d8:	1ab9      	subs	r1, r7, r2
   109da:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   109dc:	2800      	cmp	r0, #0
   109de:	bf08      	it	eq
   109e0:	4660      	moveq	r0, ip
	pcnt = ((size - unused) * 100U) / size;
   109e2:	fbb3 f3f7 	udiv	r3, r3, r7
	shell_print((const struct shell *)user_data,
   109e6:	e9cd 2102 	strd	r2, r1, [sp, #8]
   109ea:	e9cd 7304 	strd	r7, r3, [sp, #16]
   109ee:	e9cd 0700 	strd	r0, r7, [sp]
   109f2:	462b      	mov	r3, r5
   109f4:	4621      	mov	r1, r4
   109f6:	4630      	mov	r0, r6
   109f8:	4a02      	ldr	r2, [pc, #8]	; (10a04 <shell_stack_dump+0x60>)
   109fa:	f009 fbca 	bl	1a192 <shell_fprintf>
   109fe:	e7e2      	b.n	109c6 <shell_stack_dump+0x22>
   10a00:	0001e8b3 	.word	0x0001e8b3
   10a04:	0001e92d 	.word	0x0001e92d
   10a08:	0001e86e 	.word	0x0001e86e

00010a0c <cmd_device_list>:
	return 0;
}

static int cmd_device_list(const struct shell *shell,
			      size_t argc, char **argv)
{
   10a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   10a10:	2100      	movs	r1, #0
   10a12:	4a0f      	ldr	r2, [pc, #60]	; (10a50 <cmd_device_list+0x44>)
{
   10a14:	4605      	mov	r5, r0
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   10a16:	f009 fbbc 	bl	1a192 <shell_fprintf>

	for (dev = __device_start; dev != __device_end; dev++) {
   10a1a:	4c0e      	ldr	r4, [pc, #56]	; (10a54 <cmd_device_list+0x48>)
   10a1c:	4e0e      	ldr	r6, [pc, #56]	; (10a58 <cmd_device_list+0x4c>)
		if (!z_device_ready(dev)) {
			continue;
		}

		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
   10a1e:	4f0f      	ldr	r7, [pc, #60]	; (10a5c <cmd_device_list+0x50>)
		if (!err) {
			shell_fprintf(shell, SHELL_NORMAL, " (%s)",
				      device_pm_state_str(state));
		}
#endif /* CONFIG_DEVICE_POWER_MANAGEMENT */
		shell_fprintf(shell, SHELL_NORMAL, "\n");
   10a20:	f8df 803c 	ldr.w	r8, [pc, #60]	; 10a60 <cmd_device_list+0x54>
	for (dev = __device_start; dev != __device_end; dev++) {
   10a24:	42b4      	cmp	r4, r6
   10a26:	d102      	bne.n	10a2e <cmd_device_list+0x22>
	}

	return 0;
}
   10a28:	2000      	movs	r0, #0
   10a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!z_device_ready(dev)) {
   10a2e:	4620      	mov	r0, r4
   10a30:	f003 fe2a 	bl	14688 <z_device_ready>
   10a34:	b150      	cbz	r0, 10a4c <cmd_device_list+0x40>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", dev->name);
   10a36:	463a      	mov	r2, r7
   10a38:	2100      	movs	r1, #0
   10a3a:	4628      	mov	r0, r5
   10a3c:	6823      	ldr	r3, [r4, #0]
   10a3e:	f009 fba8 	bl	1a192 <shell_fprintf>
		shell_fprintf(shell, SHELL_NORMAL, "\n");
   10a42:	4642      	mov	r2, r8
   10a44:	2100      	movs	r1, #0
   10a46:	4628      	mov	r0, r5
   10a48:	f009 fba3 	bl	1a192 <shell_fprintf>
	for (dev = __device_start; dev != __device_end; dev++) {
   10a4c:	3410      	adds	r4, #16
   10a4e:	e7e9      	b.n	10a24 <cmd_device_list+0x18>
   10a50:	0001ea33 	.word	0x0001ea33
   10a54:	200100e0 	.word	0x200100e0
   10a58:	20010130 	.word	0x20010130
   10a5c:	0001ea3d 	.word	0x0001ea3d
   10a60:	0001e915 	.word	0x0001e915

00010a64 <device_get_config_level>:
{
   10a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a68:	4606      	mov	r6, r0
	bool devices = false;
   10a6a:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   10a6c:	4b0d      	ldr	r3, [pc, #52]	; (10aa4 <device_get_config_level+0x40>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
   10a6e:	f8df 9038 	ldr.w	r9, [pc, #56]	; 10aa8 <device_get_config_level+0x44>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   10a72:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   10a76:	3101      	adds	r1, #1
   10a78:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
   10a7c:	45a0      	cmp	r8, r4
   10a7e:	d802      	bhi.n	10a86 <device_get_config_level+0x22>
}
   10a80:	4638      	mov	r0, r7
   10a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (z_device_ready(dev)) {
   10a86:	4620      	mov	r0, r4
   10a88:	f003 fdfe 	bl	14688 <z_device_ready>
   10a8c:	4605      	mov	r5, r0
   10a8e:	b130      	cbz	r0, 10a9e <device_get_config_level+0x3a>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n", dev->name);
   10a90:	464a      	mov	r2, r9
   10a92:	2100      	movs	r1, #0
   10a94:	4630      	mov	r0, r6
   10a96:	6823      	ldr	r3, [r4, #0]
   10a98:	f009 fb7b 	bl	1a192 <shell_fprintf>
			devices = true;
   10a9c:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   10a9e:	3410      	adds	r4, #16
   10aa0:	e7ec      	b.n	10a7c <device_get_config_level+0x18>
   10aa2:	bf00      	nop
   10aa4:	0001d948 	.word	0x0001d948
   10aa8:	0001ea42 	.word	0x0001ea42

00010aac <cmd_device_levels>:
{
   10aac:	b510      	push	{r4, lr}
   10aae:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   10ab0:	2100      	movs	r1, #0
   10ab2:	4a1e      	ldr	r2, [pc, #120]	; (10b2c <cmd_device_levels+0x80>)
   10ab4:	f009 fb6d 	bl	1a192 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   10ab8:	2102      	movs	r1, #2
   10aba:	4620      	mov	r0, r4
   10abc:	f7ff ffd2 	bl	10a64 <device_get_config_level>
	if (ret == false) {
   10ac0:	4601      	mov	r1, r0
   10ac2:	b918      	cbnz	r0, 10acc <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   10ac4:	4620      	mov	r0, r4
   10ac6:	4a1a      	ldr	r2, [pc, #104]	; (10b30 <cmd_device_levels+0x84>)
   10ac8:	f009 fb63 	bl	1a192 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   10acc:	2100      	movs	r1, #0
   10ace:	4620      	mov	r0, r4
   10ad0:	4a18      	ldr	r2, [pc, #96]	; (10b34 <cmd_device_levels+0x88>)
   10ad2:	f009 fb5e 	bl	1a192 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   10ad6:	2103      	movs	r1, #3
   10ad8:	4620      	mov	r0, r4
   10ada:	f7ff ffc3 	bl	10a64 <device_get_config_level>
	if (ret == false) {
   10ade:	4601      	mov	r1, r0
   10ae0:	b918      	cbnz	r0, 10aea <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   10ae2:	4620      	mov	r0, r4
   10ae4:	4a12      	ldr	r2, [pc, #72]	; (10b30 <cmd_device_levels+0x84>)
   10ae6:	f009 fb54 	bl	1a192 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   10aea:	2100      	movs	r1, #0
   10aec:	4620      	mov	r0, r4
   10aee:	4a12      	ldr	r2, [pc, #72]	; (10b38 <cmd_device_levels+0x8c>)
   10af0:	f009 fb4f 	bl	1a192 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   10af4:	2100      	movs	r1, #0
   10af6:	4620      	mov	r0, r4
   10af8:	f7ff ffb4 	bl	10a64 <device_get_config_level>
	if (ret == false) {
   10afc:	4601      	mov	r1, r0
   10afe:	b918      	cbnz	r0, 10b08 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   10b00:	4620      	mov	r0, r4
   10b02:	4a0b      	ldr	r2, [pc, #44]	; (10b30 <cmd_device_levels+0x84>)
   10b04:	f009 fb45 	bl	1a192 <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   10b08:	2100      	movs	r1, #0
   10b0a:	4620      	mov	r0, r4
   10b0c:	4a0b      	ldr	r2, [pc, #44]	; (10b3c <cmd_device_levels+0x90>)
   10b0e:	f009 fb40 	bl	1a192 <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   10b12:	2101      	movs	r1, #1
   10b14:	4620      	mov	r0, r4
   10b16:	f7ff ffa5 	bl	10a64 <device_get_config_level>
	if (ret == false) {
   10b1a:	4601      	mov	r1, r0
   10b1c:	b918      	cbnz	r0, 10b26 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   10b1e:	4620      	mov	r0, r4
   10b20:	4a03      	ldr	r2, [pc, #12]	; (10b30 <cmd_device_levels+0x84>)
   10b22:	f009 fb36 	bl	1a192 <shell_fprintf>
}
   10b26:	2000      	movs	r0, #0
   10b28:	bd10      	pop	{r4, pc}
   10b2a:	bf00      	nop
   10b2c:	0001ea48 	.word	0x0001ea48
   10b30:	0001ea56 	.word	0x0001ea56
   10b34:	0001ea5e 	.word	0x0001ea5e
   10b38:	0001ea6c 	.word	0x0001ea6c
   10b3c:	0001ea7b 	.word	0x0001ea7b

00010b40 <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   10b40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   10b42:	680a      	ldr	r2, [r1, #0]
   10b44:	694b      	ldr	r3, [r1, #20]
   10b46:	9204      	str	r2, [sp, #16]
   10b48:	684a      	ldr	r2, [r1, #4]
   10b4a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   10b4e:	9203      	str	r2, [sp, #12]
   10b50:	688a      	ldr	r2, [r1, #8]
   10b52:	9202      	str	r2, [sp, #8]
   10b54:	68ca      	ldr	r2, [r1, #12]
   10b56:	9201      	str	r2, [sp, #4]
   10b58:	690a      	ldr	r2, [r1, #16]
   10b5a:	2100      	movs	r1, #0
   10b5c:	3201      	adds	r2, #1
   10b5e:	9200      	str	r2, [sp, #0]
   10b60:	4a02      	ldr	r2, [pc, #8]	; (10b6c <date_print+0x2c>)
   10b62:	f009 fb16 	bl	1a192 <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   10b66:	b007      	add	sp, #28
   10b68:	f85d fb04 	ldr.w	pc, [sp], #4
   10b6c:	0001eae0 	.word	0x0001eae0

00010b70 <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   10b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   10b72:	7813      	ldrb	r3, [r2, #0]
{
   10b74:	4606      	mov	r6, r0
	if (*time_str == ':') {
   10b76:	2b3a      	cmp	r3, #58	; 0x3a
{
   10b78:	460f      	mov	r7, r1
   10b7a:	4615      	mov	r5, r2
	if (*time_str == ':') {
   10b7c:	d116      	bne.n	10bac <get_h_m_s+0x3c>
		time_str++;
   10b7e:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   10b80:	7823      	ldrb	r3, [r4, #0]
   10b82:	2b3a      	cmp	r3, #58	; 0x3a
   10b84:	d12e      	bne.n	10be4 <get_h_m_s+0x74>
		time_str++;
   10b86:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   10b88:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   10b8a:	220a      	movs	r2, #10
   10b8c:	4620      	mov	r0, r4
   10b8e:	a901      	add	r1, sp, #4
	endptr = NULL;
   10b90:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   10b92:	f00a fa7e 	bl	1b092 <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   10b96:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   10b98:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   10b9a:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   10b9c:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   10b9e:	d010      	beq.n	10bc2 <get_h_m_s+0x52>
   10ba0:	7810      	ldrb	r0, [r2, #0]
   10ba2:	b970      	cbnz	r0, 10bc2 <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   10ba4:	2b3c      	cmp	r3, #60	; 0x3c
   10ba6:	d90e      	bls.n	10bc6 <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   10ba8:	4a18      	ldr	r2, [pc, #96]	; (10c0c <get_h_m_s+0x9c>)
   10baa:	e014      	b.n	10bd6 <get_h_m_s+0x66>
		endptr = NULL;
   10bac:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   10bae:	220a      	movs	r2, #10
   10bb0:	4628      	mov	r0, r5
   10bb2:	a901      	add	r1, sp, #4
		endptr = NULL;
   10bb4:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   10bb6:	f00a fa6c 	bl	1b092 <strtol>
		if (endptr == time_str) {
   10bba:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   10bbc:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   10bbe:	42ac      	cmp	r4, r5
   10bc0:	d103      	bne.n	10bca <get_h_m_s+0x5a>
		return -EINVAL;
   10bc2:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   10bc6:	b003      	add	sp, #12
   10bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   10bca:	7823      	ldrb	r3, [r4, #0]
   10bcc:	2b3a      	cmp	r3, #58	; 0x3a
   10bce:	d1f8      	bne.n	10bc2 <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   10bd0:	2817      	cmp	r0, #23
   10bd2:	d905      	bls.n	10be0 <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   10bd4:	4a0e      	ldr	r2, [pc, #56]	; (10c10 <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   10bd6:	2102      	movs	r1, #2
   10bd8:	4630      	mov	r0, r6
   10bda:	f009 fada 	bl	1a192 <shell_fprintf>
   10bde:	e7f0      	b.n	10bc2 <get_h_m_s+0x52>
			time_str = endptr + 1;
   10be0:	3401      	adds	r4, #1
   10be2:	e7cd      	b.n	10b80 <get_h_m_s+0x10>
		endptr = NULL;
   10be4:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   10be6:	220a      	movs	r2, #10
   10be8:	4620      	mov	r0, r4
   10bea:	a901      	add	r1, sp, #4
		endptr = NULL;
   10bec:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   10bee:	f00a fa50 	bl	1b092 <strtol>
		if (endptr == time_str) {
   10bf2:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   10bf4:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   10bf6:	42a2      	cmp	r2, r4
   10bf8:	d0e3      	beq.n	10bc2 <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   10bfa:	7813      	ldrb	r3, [r2, #0]
   10bfc:	2b3a      	cmp	r3, #58	; 0x3a
   10bfe:	d1e0      	bne.n	10bc2 <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   10c00:	283b      	cmp	r0, #59	; 0x3b
   10c02:	d901      	bls.n	10c08 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   10c04:	4a03      	ldr	r2, [pc, #12]	; (10c14 <get_h_m_s+0xa4>)
   10c06:	e7e6      	b.n	10bd6 <get_h_m_s+0x66>
			time_str = endptr + 1;
   10c08:	1c54      	adds	r4, r2, #1
   10c0a:	e7bd      	b.n	10b88 <get_h_m_s+0x18>
   10c0c:	0001eb1f 	.word	0x0001eb1f
   10c10:	0001eb01 	.word	0x0001eb01
   10c14:	0001eb0f 	.word	0x0001eb0f

00010c18 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   10c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10c1c:	4604      	mov	r4, r0
   10c1e:	460d      	mov	r5, r1
   10c20:	4617      	mov	r7, r2
   10c22:	b091      	sub	sp, #68	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   10c24:	2001      	movs	r0, #1
   10c26:	a902      	add	r1, sp, #8
   10c28:	f002 ff84 	bl	13b34 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   10c2c:	a907      	add	r1, sp, #28
   10c2e:	a802      	add	r0, sp, #8
   10c30:	f002 fe9e 	bl	13970 <gmtime_r>

	if (argc == 3) {
   10c34:	2d03      	cmp	r5, #3
   10c36:	d160      	bne.n	10cfa <cmd_date_set+0xe2>
	endptr = NULL;
   10c38:	f04f 0900 	mov.w	r9, #0
		ret = get_y_m_d(shell, &tm, argv[1]);
   10c3c:	687d      	ldr	r5, [r7, #4]
	year = strtol(date_str, &endptr, 10);
   10c3e:	220a      	movs	r2, #10
   10c40:	4628      	mov	r0, r5
   10c42:	a901      	add	r1, sp, #4
	endptr = NULL;
   10c44:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   10c48:	f00a fa23 	bl	1b092 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   10c4c:	9e01      	ldr	r6, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   10c4e:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   10c50:	42b5      	cmp	r5, r6
   10c52:	d018      	beq.n	10c86 <cmd_date_set+0x6e>
   10c54:	7832      	ldrb	r2, [r6, #0]
   10c56:	2a2d      	cmp	r2, #45	; 0x2d
   10c58:	d115      	bne.n	10c86 <cmd_date_set+0x6e>
	date_str = endptr + 1;
   10c5a:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   10c5c:	220a      	movs	r2, #10
   10c5e:	4630      	mov	r0, r6
   10c60:	a901      	add	r1, sp, #4
	endptr = NULL;
   10c62:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   10c66:	f00a fa14 	bl	1b092 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   10c6a:	9b01      	ldr	r3, [sp, #4]
   10c6c:	429e      	cmp	r6, r3
   10c6e:	d00a      	beq.n	10c86 <cmd_date_set+0x6e>
   10c70:	781a      	ldrb	r2, [r3, #0]
   10c72:	2a2d      	cmp	r2, #45	; 0x2d
   10c74:	d107      	bne.n	10c86 <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   10c76:	1e45      	subs	r5, r0, #1
   10c78:	2d0b      	cmp	r5, #11
   10c7a:	d90d      	bls.n	10c98 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   10c7c:	4a2b      	ldr	r2, [pc, #172]	; (10d2c <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   10c7e:	2102      	movs	r1, #2
   10c80:	4620      	mov	r0, r4
   10c82:	f009 fa86 	bl	1a192 <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   10c86:	4620      	mov	r0, r4
   10c88:	f009 fa90 	bl	1a1ac <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   10c8c:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   10c90:	4628      	mov	r0, r5
   10c92:	b011      	add	sp, #68	; 0x44
   10c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   10c98:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   10c9a:	220a      	movs	r2, #10
   10c9c:	4630      	mov	r0, r6
   10c9e:	a901      	add	r1, sp, #4
	endptr = NULL;
   10ca0:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   10ca4:	f00a f9f5 	bl	1b092 <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   10ca8:	9b01      	ldr	r3, [sp, #4]
   10caa:	429e      	cmp	r6, r3
   10cac:	d0eb      	beq.n	10c86 <cmd_date_set+0x6e>
   10cae:	781b      	ldrb	r3, [r3, #0]
   10cb0:	2b00      	cmp	r3, #0
   10cb2:	d1e8      	bne.n	10c86 <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   10cb4:	1e43      	subs	r3, r0, #1
   10cb6:	2b1e      	cmp	r3, #30
   10cb8:	d901      	bls.n	10cbe <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   10cba:	4a1d      	ldr	r2, [pc, #116]	; (10d30 <cmd_date_set+0x118>)
   10cbc:	e7df      	b.n	10c7e <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   10cbe:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   10cc2:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   10cc6:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   10cc8:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   10cca:	4620      	mov	r0, r4
   10ccc:	a907      	add	r1, sp, #28
   10cce:	f7ff ff4f 	bl	10b70 <get_h_m_s>
		if (ret != 0) {
   10cd2:	2800      	cmp	r0, #0
   10cd4:	d1d7      	bne.n	10c86 <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   10cd6:	a807      	add	r0, sp, #28
   10cd8:	f008 fba2 	bl	19420 <timeutil_timegm>
   10cdc:	460b      	mov	r3, r1
   10cde:	4602      	mov	r2, r0
   10ce0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   10ce4:	3301      	adds	r3, #1
   10ce6:	bf08      	it	eq
   10ce8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   10cec:	d109      	bne.n	10d02 <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   10cee:	2102      	movs	r1, #2
   10cf0:	4620      	mov	r0, r4
   10cf2:	4a10      	ldr	r2, [pc, #64]	; (10d34 <cmd_date_set+0x11c>)
   10cf4:	f009 fa4d 	bl	1a192 <shell_fprintf>
		return -EINVAL;
   10cf8:	e7c8      	b.n	10c8c <cmd_date_set+0x74>
	} else if (argc == 2) {
   10cfa:	2d02      	cmp	r5, #2
   10cfc:	d1c3      	bne.n	10c86 <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   10cfe:	687a      	ldr	r2, [r7, #4]
   10d00:	e7e3      	b.n	10cca <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   10d02:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   10d04:	2001      	movs	r0, #1
   10d06:	a902      	add	r1, sp, #8
	tp.tv_nsec = 0;
   10d08:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   10d0a:	f7fb fc69 	bl	c5e0 <clock_settime>
	if (ret != 0) {
   10d0e:	4605      	mov	r5, r0
   10d10:	b130      	cbz	r0, 10d20 <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   10d12:	4603      	mov	r3, r0
   10d14:	2102      	movs	r1, #2
   10d16:	4620      	mov	r0, r4
   10d18:	4a07      	ldr	r2, [pc, #28]	; (10d38 <cmd_date_set+0x120>)
   10d1a:	f009 fa3a 	bl	1a192 <shell_fprintf>
   10d1e:	e7b5      	b.n	10c8c <cmd_date_set+0x74>
	date_print(shell, &tm);
   10d20:	4620      	mov	r0, r4
   10d22:	a907      	add	r1, sp, #28
   10d24:	f7ff ff0c 	bl	10b40 <date_print>
	return 0;
   10d28:	e7b2      	b.n	10c90 <cmd_date_set+0x78>
   10d2a:	bf00      	nop
   10d2c:	0001eb2f 	.word	0x0001eb2f
   10d30:	0001eb3e 	.word	0x0001eb3e
   10d34:	0001eb4b 	.word	0x0001eb4b
   10d38:	0001eb74 	.word	0x0001eb74

00010d3c <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   10d3c:	b510      	push	{r4, lr}
   10d3e:	4604      	mov	r4, r0
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   10d40:	6881      	ldr	r1, [r0, #8]
   10d42:	3108      	adds	r1, #8
   10d44:	f001 f9e2 	bl	1210c <shell_help_cmd_print>
	shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   10d48:	68a1      	ldr	r1, [r4, #8]
   10d4a:	4620      	mov	r0, r4
				"Subcommands:\n");
}
   10d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   10d50:	4a01      	ldr	r2, [pc, #4]	; (10d58 <shell_internal_help_print+0x1c>)
   10d52:	3108      	adds	r1, #8
   10d54:	f001 b97e 	b.w	12054 <shell_help_subcmd_print>
   10d58:	0001ebb9 	.word	0x0001ebb9

00010d5c <state_set.part.0>:
	}

	return 0;
}

static inline void state_set(const struct shell *shell, enum shell_state state)
   10d5c:	b538      	push	{r3, r4, r5, lr}
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   10d5e:	2500      	movs	r5, #0
{
	shell->ctx->state = state;

	if (state == SHELL_STATE_ACTIVE) {
		cmd_buffer_clear(shell);
   10d60:	6883      	ldr	r3, [r0, #8]
static inline void state_set(const struct shell *shell, enum shell_state state)
   10d62:	4604      	mov	r4, r0
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   10d64:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   10d68:	869d      	strh	r5, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   10d6a:	865d      	strh	r5, [r3, #50]	; 0x32
		if (flag_print_noinit_get(shell)) {
   10d6c:	6883      	ldr	r3, [r0, #8]
	shell->ctx->internal.flags.last_nl = val;
}

static inline bool flag_print_noinit_get(const struct shell *shell)
{
	return shell->ctx->internal.flags.print_noinit == 1;
   10d6e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   10d72:	03db      	lsls	r3, r3, #15
   10d74:	d50b      	bpl.n	10d8e <state_set.part.0+0x32>
			shell_internal_fprintf(shell, SHELL_WARNING, "%s",
   10d76:	4b08      	ldr	r3, [pc, #32]	; (10d98 <state_set.part.0+0x3c>)
   10d78:	4a08      	ldr	r2, [pc, #32]	; (10d9c <state_set.part.0+0x40>)
   10d7a:	2104      	movs	r1, #4
   10d7c:	f009 fd5f 	bl	1a83e <shell_internal_fprintf>
					       SHELL_MSG_BACKEND_NOT_ACTIVE);
			flag_print_noinit_set(shell, false);
   10d80:	68a3      	ldr	r3, [r4, #8]
}

static inline void flag_print_noinit_set(const struct shell *shell, bool val)
{
	shell->ctx->internal.flags.print_noinit = val ? 1 : 0;
   10d82:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   10d86:	f365 4210 	bfi	r2, r5, #16, #1
   10d8a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		}
		shell_print_prompt_and_cmd(shell);
   10d8e:	4620      	mov	r0, r4
	}
}
   10d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		shell_print_prompt_and_cmd(shell);
   10d94:	f001 b816 	b.w	11dc4 <shell_print_prompt_and_cmd>
   10d98:	0001ebc7 	.word	0x0001ebc7
   10d9c:	0001ea3f 	.word	0x0001ea3f

00010da0 <history_handle>:

	shell_history_put(shell->history, line, length);
}

static void history_handle(const struct shell *shell, bool up)
{
   10da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HISTORY)) {
		return;
	}

	/* Checking if history process has been stopped */
	if (flag_history_exit_get(shell)) {
   10da2:	6883      	ldr	r3, [r0, #8]
{
   10da4:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.history_exit == 1;
   10da6:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   10daa:	460d      	mov	r5, r1
	if (flag_history_exit_get(shell)) {
   10dac:	0652      	lsls	r2, r2, #25
   10dae:	d508      	bpl.n	10dc2 <history_handle+0x22>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   10db0:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   10db4:	68c0      	ldr	r0, [r0, #12]
   10db6:	f36f 1286 	bfc	r2, #6, #1
   10dba:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		flag_history_exit_set(shell, false);
		shell_history_mode_exit(shell->history);
   10dbe:	f009 fe65 	bl	1aa8c <shell_history_mode_exit>
	}

	/* Backup command if history is entered */
	if (!shell_history_active(shell->history)) {
   10dc2:	68e3      	ldr	r3, [r4, #12]
   10dc4:	68db      	ldr	r3, [r3, #12]
   10dc6:	b963      	cbnz	r3, 10de2 <history_handle+0x42>
		if (up) {
   10dc8:	b39d      	cbz	r5, 10e32 <history_handle+0x92>
			uint16_t cmd_len = shell_strlen(shell->ctx->cmd_buff);
   10dca:	68a0      	ldr	r0, [r4, #8]
   10dcc:	3038      	adds	r0, #56	; 0x38
   10dce:	f009 f965 	bl	1a09c <shell_strlen>

			if (cmd_len) {
   10dd2:	68a3      	ldr	r3, [r4, #8]
   10dd4:	b378      	cbz	r0, 10e36 <history_handle+0x96>
				strcpy(shell->ctx->temp_buff,
   10dd6:	f103 0138 	add.w	r1, r3, #56	; 0x38
   10dda:	f503 709c 	add.w	r0, r3, #312	; 0x138
   10dde:	f00a f9ee 	bl	1b1be <strcpy>
		}
	}

	/* Start by checking if history is not empty. */
	history_mode = shell_history_get(shell->history, up,
					 shell->ctx->cmd_buff, &len);
   10de2:	68a2      	ldr	r2, [r4, #8]
	history_mode = shell_history_get(shell->history, up,
   10de4:	4629      	mov	r1, r5
   10de6:	68e0      	ldr	r0, [r4, #12]
   10de8:	f10d 0306 	add.w	r3, sp, #6
   10dec:	3238      	adds	r2, #56	; 0x38
   10dee:	f009 fe50 	bl	1aa92 <shell_history_get>

	/* On exiting history mode print backed up command. */
	if (!history_mode) {
   10df2:	b958      	cbnz	r0, 10e0c <history_handle+0x6c>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   10df4:	68a0      	ldr	r0, [r4, #8]
   10df6:	f500 719c 	add.w	r1, r0, #312	; 0x138
   10dfa:	3038      	adds	r0, #56	; 0x38
   10dfc:	f00a f9df 	bl	1b1be <strcpy>
		len = shell_strlen(shell->ctx->cmd_buff);
   10e00:	68a0      	ldr	r0, [r4, #8]
   10e02:	3038      	adds	r0, #56	; 0x38
   10e04:	f009 f94a 	bl	1a09c <shell_strlen>
   10e08:	f8ad 0006 	strh.w	r0, [sp, #6]
	}

	shell_op_cursor_home_move(shell);
   10e0c:	4620      	mov	r0, r4
   10e0e:	f009 fc75 	bl	1a6fc <shell_op_cursor_home_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   10e12:	4a0a      	ldr	r2, [pc, #40]	; (10e3c <history_handle+0x9c>)
   10e14:	490a      	ldr	r1, [pc, #40]	; (10e40 <history_handle+0xa0>)
   10e16:	6960      	ldr	r0, [r4, #20]
   10e18:	f009 f946 	bl	1a0a8 <shell_raw_fprintf>
	clear_eos(shell);
	shell_print_cmd(shell);
   10e1c:	4620      	mov	r0, r4
   10e1e:	f000 fecf 	bl	11bc0 <shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   10e22:	68a3      	ldr	r3, [r4, #8]
   10e24:	f8bd 2006 	ldrh.w	r2, [sp, #6]
	shell->ctx->cmd_buff_len = len;
	shell_op_cond_next_line(shell);
   10e28:	4620      	mov	r0, r4
	shell->ctx->cmd_buff_pos = len;
   10e2a:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = len;
   10e2c:	865a      	strh	r2, [r3, #50]	; 0x32
	shell_op_cond_next_line(shell);
   10e2e:	f000 fe89 	bl	11b44 <shell_op_cond_next_line>
}
   10e32:	b003      	add	sp, #12
   10e34:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   10e36:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
   10e3a:	e7d2      	b.n	10de2 <history_handle+0x42>
   10e3c:	0001ece6 	.word	0x0001ece6
   10e40:	0001ea3f 	.word	0x0001ea3f

00010e44 <execute>:
 * the command handler without any preprocessing.
 * Because of that feature, command buffer is processed argument by argument and
 * decision on further processing is based on currently processed command.
 */
static int execute(const struct shell *shell)
{
   10e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct shell_static_entry dloc; /* Memory for dynamic commands. */
	const char *argv[CONFIG_SHELL_ARGC_MAX + 1]; /* +1 reserved for NULL */
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry help_entry;
	size_t cmd_lvl = 0;
   10e48:	2200      	movs	r2, #0
{
   10e4a:	4604      	mov	r4, r0
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
   10e4c:	6883      	ldr	r3, [r0, #8]
{
   10e4e:	b09f      	sub	sp, #124	; 0x7c
	const struct shell_static_entry *parent = shell->ctx->selected_cmd;
   10e50:	69de      	ldr	r6, [r3, #28]
	size_t cmd_with_handler_lvl = 0;
	bool wildcard_found = false;
	size_t argc = 0, args_left = SIZE_MAX;
	char quote;
	const char **argvp;
	char *cmd_buf = shell->ctx->cmd_buff;
   10e52:	3338      	adds	r3, #56	; 0x38
	size_t argc = 0, args_left = SIZE_MAX;
   10e54:	e9cd 2205 	strd	r2, r2, [sp, #20]
	char *cmd_buf = shell->ctx->cmd_buff;
   10e58:	9303      	str	r3, [sp, #12]
	bool has_last_handler = false;

	shell_op_cursor_end_move(shell);
   10e5a:	f009 fc55 	bl	1a708 <shell_op_cursor_end_move>
	if (!shell_cursor_in_empty_line(shell)) {
   10e5e:	4620      	mov	r0, r4
   10e60:	f009 fbda 	bl	1a618 <shell_cursor_in_empty_line>
   10e64:	b918      	cbnz	r0, 10e6e <execute+0x2a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   10e66:	49a4      	ldr	r1, [pc, #656]	; (110f8 <execute+0x2b4>)
   10e68:	6960      	ldr	r0, [r4, #20]
   10e6a:	f009 f91d 	bl	1a0a8 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	memset(&shell->ctx->active_cmd, 0, sizeof(shell->ctx->active_cmd));
   10e6e:	68a0      	ldr	r0, [r4, #8]
   10e70:	2214      	movs	r2, #20
   10e72:	2100      	movs	r1, #0
   10e74:	3008      	adds	r0, #8
   10e76:	f00a fa41 	bl	1b2fc <memset>

	shell_cmd_trim(shell);
   10e7a:	4620      	mov	r0, r4
   10e7c:	f009 fb79 	bl	1a572 <shell_cmd_trim>

	history_put(shell, shell->ctx->cmd_buff,
   10e80:	68a1      	ldr	r1, [r4, #8]
	shell_history_put(shell->history, line, length);
   10e82:	68e0      	ldr	r0, [r4, #12]
   10e84:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   10e86:	3138      	adds	r1, #56	; 0x38
   10e88:	f009 fe3a 	bl	1ab00 <shell_history_put>
		    shell->ctx->cmd_buff_len);

	if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
		shell_wildcard_prepare(shell);
   10e8c:	4620      	mov	r0, r4
   10e8e:	f009 fff7 	bl	1ae80 <shell_wildcard_prepare>
	}

	/* Parent present means we are in select mode. */
	if (parent != NULL) {
   10e92:	2e00      	cmp	r6, #0
   10e94:	f000 80f6 	beq.w	11084 <execute+0x240>
		argv[0] = parent->syntax;
   10e98:	6833      	ldr	r3, [r6, #0]
   10e9a:	9311      	str	r3, [sp, #68]	; 0x44
		argv[1] = cmd_buf;
   10e9c:	9b03      	ldr	r3, [sp, #12]
   10e9e:	9312      	str	r3, [sp, #72]	; 0x48
	if (entry->handler) {
   10ea0:	68f3      	ldr	r3, [r6, #12]
   10ea2:	b35b      	cbz	r3, 10efc <execute+0xb8>
		*active_cmd = *entry;
   10ea4:	4637      	mov	r7, r6
   10ea6:	68a5      	ldr	r5, [r4, #8]
   10ea8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   10eaa:	3508      	adds	r5, #8
   10eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10eae:	683b      	ldr	r3, [r7, #0]
   10eb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10eb4:	602b      	str	r3, [r5, #0]
		if ((entry->subcmd == NULL)
   10eb6:	68b3      	ldr	r3, [r6, #8]
   10eb8:	bb23      	cbnz	r3, 10f04 <execute+0xc0>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   10eba:	7c73      	ldrb	r3, [r6, #17]
   10ebc:	2bfe      	cmp	r3, #254	; 0xfe
   10ebe:	d121      	bne.n	10f04 <execute+0xc0>
			*args_left = entry->args.mandatory - 1;
   10ec0:	7c37      	ldrb	r7, [r6, #16]
			*lvl = *lvl + 1;
   10ec2:	f108 0301 	add.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
   10ec6:	3f01      	subs	r7, #1
			*lvl = *lvl + 1;
   10ec8:	9305      	str	r3, [sp, #20]
	if (entry->help) {
   10eca:	f8d6 e004 	ldr.w	lr, [r6, #4]
   10ece:	f1be 0f00 	cmp.w	lr, #0
   10ed2:	d008      	beq.n	10ee6 <execute+0xa2>
		*help_entry = *entry;
   10ed4:	46b4      	mov	ip, r6
   10ed6:	46f2      	mov	sl, lr
   10ed8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10edc:	ad0c      	add	r5, sp, #48	; 0x30
   10ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10ee0:	f8dc 3000 	ldr.w	r3, [ip]
   10ee4:	602b      	str	r3, [r5, #0]
		argvp = &argv[1];
		active_cmd_prepare(parent, &shell->ctx->active_cmd, &help_entry,
				   &cmd_lvl, &cmd_with_handler_lvl, &args_left);
		cmd_lvl++;
   10ee6:	9b05      	ldr	r3, [sp, #20]
		argvp = &argv[1];
   10ee8:	f10d 0948 	add.w	r9, sp, #72	; 0x48
		cmd_lvl++;
   10eec:	3301      	adds	r3, #1
   10eee:	9305      	str	r3, [sp, #20]
			/* Wildcard character was not found function can process
			 * argument.
			 */
			if (status != SHELL_WILDCARD_NOT_FOUND) {
				++cmd_lvl;
				wildcard_found = true;
   10ef0:	f04f 0b00 	mov.w	fp, #0
   10ef4:	465d      	mov	r5, fp
   10ef6:	f8cd b008 	str.w	fp, [sp, #8]
   10efa:	e04c      	b.n	10f96 <execute+0x152>
	size_t argc = 0, args_left = SIZE_MAX;
   10efc:	f04f 37ff 	mov.w	r7, #4294967295
	size_t cmd_with_handler_lvl = 0;
   10f00:	4698      	mov	r8, r3
   10f02:	e7e2      	b.n	10eca <execute+0x86>
	size_t argc = 0, args_left = SIZE_MAX;
   10f04:	f04f 37ff 	mov.w	r7, #4294967295
   10f08:	e7df      	b.n	10eca <execute+0x86>
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
   10f0a:	2302      	movs	r3, #2
   10f0c:	9a03      	ldr	r2, [sp, #12]
   10f0e:	4649      	mov	r1, r9
   10f10:	a806      	add	r0, sp, #24
   10f12:	f009 f9c8 	bl	1a2a6 <shell_make_argv>
		cmd_buf = (char *)argvp[1];
   10f16:	f8d9 2004 	ldr.w	r2, [r9, #4]
		quote = shell_make_argv(&argc, argvp, cmd_buf, 2);
   10f1a:	4603      	mov	r3, r0
		cmd_buf = (char *)argvp[1];
   10f1c:	9203      	str	r2, [sp, #12]
		if (argc == 0) {
   10f1e:	9a06      	ldr	r2, [sp, #24]
   10f20:	b92a      	cbnz	r2, 10f2e <execute+0xea>
			return -ENOEXEC;
   10f22:	f06f 0507 	mvn.w	r5, #7
	/* terminate arguments with NULL */
	argv[cmd_lvl] = NULL;
	/* Executing the deepest found handler. */
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
			&argv[cmd_with_handler_lvl], &help_entry);
}
   10f26:	4628      	mov	r0, r5
   10f28:	b01f      	add	sp, #124	; 0x7c
   10f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   10f2e:	2a01      	cmp	r2, #1
   10f30:	d106      	bne.n	10f40 <execute+0xfc>
   10f32:	b128      	cbz	r0, 10f40 <execute+0xfc>
			shell_internal_fprintf(shell, SHELL_ERROR,
   10f34:	2102      	movs	r1, #2
   10f36:	4a71      	ldr	r2, [pc, #452]	; (110fc <execute+0x2b8>)
   10f38:	4620      	mov	r0, r4
   10f3a:	f009 fc80 	bl	1a83e <shell_internal_fprintf>
   10f3e:	e7f0      	b.n	10f22 <execute+0xde>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   10f40:	9b05      	ldr	r3, [sp, #20]
   10f42:	2b00      	cmp	r3, #0
   10f44:	d042      	beq.n	10fcc <execute+0x188>
		    (!strcmp(argvp[0], "-h") ||
   10f46:	496e      	ldr	r1, [pc, #440]	; (11100 <execute+0x2bc>)
   10f48:	f8d9 0000 	ldr.w	r0, [r9]
   10f4c:	f00a f969 	bl	1b222 <strcmp>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   10f50:	b940      	cbnz	r0, 10f64 <execute+0x120>
			if (help_entry.help) {
   10f52:	f1ba 0f00 	cmp.w	sl, #0
   10f56:	d12b      	bne.n	10fb0 <execute+0x16c>
			shell_internal_fprintf(shell, SHELL_ERROR,
   10f58:	4a6a      	ldr	r2, [pc, #424]	; (11104 <execute+0x2c0>)
		shell_internal_fprintf(shell, SHELL_ERROR,
   10f5a:	2102      	movs	r1, #2
   10f5c:	4620      	mov	r0, r4
   10f5e:	f009 fc6e 	bl	1a83e <shell_internal_fprintf>
		return false;
   10f62:	e7de      	b.n	10f22 <execute+0xde>
		     !strcmp(argvp[0], "--help"))) {
   10f64:	4968      	ldr	r1, [pc, #416]	; (11108 <execute+0x2c4>)
   10f66:	f8d9 0000 	ldr.w	r0, [r9]
   10f6a:	f00a f95a 	bl	1b222 <strcmp>
		    (!strcmp(argvp[0], "-h") ||
   10f6e:	2800      	cmp	r0, #0
   10f70:	d0ef      	beq.n	10f52 <execute+0x10e>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   10f72:	9b05      	ldr	r3, [sp, #20]
   10f74:	b353      	cbz	r3, 10fcc <execute+0x188>
			status = shell_wildcard_process(shell, entry,
   10f76:	4629      	mov	r1, r5
   10f78:	4620      	mov	r0, r4
   10f7a:	f8d9 2000 	ldr.w	r2, [r9]
   10f7e:	f001 fa41 	bl	12404 <shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   10f82:	2802      	cmp	r0, #2
   10f84:	f000 80cc 	beq.w	11120 <execute+0x2dc>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   10f88:	2803      	cmp	r0, #3
   10f8a:	d01f      	beq.n	10fcc <execute+0x188>
				++cmd_lvl;
   10f8c:	9b05      	ldr	r3, [sp, #20]
   10f8e:	3301      	adds	r3, #1
   10f90:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   10f92:	2301      	movs	r3, #1
   10f94:	9302      	str	r3, [sp, #8]
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   10f96:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   10f9a:	2a01      	cmp	r2, #1
   10f9c:	f000 80c0 	beq.w	11120 <execute+0x2dc>
   10fa0:	2b0b      	cmp	r3, #11
   10fa2:	d976      	bls.n	11092 <execute+0x24e>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   10fa4:	9906      	ldr	r1, [sp, #24]
   10fa6:	2902      	cmp	r1, #2
   10fa8:	d176      	bne.n	11098 <execute+0x254>
		shell_internal_fprintf(shell, SHELL_ERROR,
   10faa:	4b58      	ldr	r3, [pc, #352]	; (1110c <execute+0x2c8>)
   10fac:	4a58      	ldr	r2, [pc, #352]	; (11110 <execute+0x2cc>)
   10fae:	e7c3      	b.n	10f38 <execute+0xf4>
				shell->ctx->active_cmd = help_entry;
   10fb0:	68a5      	ldr	r5, [r4, #8]
   10fb2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   10fb6:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   10fb8:	ae0c      	add	r6, sp, #48	; 0x30
   10fba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10fbe:	6833      	ldr	r3, [r6, #0]
   10fc0:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   10fc2:	4620      	mov	r0, r4
   10fc4:	f7ff feba 	bl	10d3c <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   10fc8:	2501      	movs	r5, #1
   10fca:	e7ac      	b.n	10f26 <execute+0xe2>
		if (has_last_handler == false) {
   10fcc:	f1bb 0f00 	cmp.w	fp, #0
   10fd0:	d106      	bne.n	10fe0 <execute+0x19c>
			entry = shell_find_cmd(parent, argvp[0], &dloc);
   10fd2:	4630      	mov	r0, r6
   10fd4:	f8d9 1000 	ldr.w	r1, [r9]
   10fd8:	aa07      	add	r2, sp, #28
   10fda:	f009 fa4f 	bl	1a47c <shell_find_cmd>
   10fde:	4605      	mov	r5, r0
		argvp++;
   10fe0:	f109 0904 	add.w	r9, r9, #4
		args_left--;
   10fe4:	3f01      	subs	r7, #1
		if (entry) {
   10fe6:	2d00      	cmp	r5, #0
   10fe8:	d03a      	beq.n	11060 <execute+0x21c>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   10fea:	9b02      	ldr	r3, [sp, #8]
   10fec:	b14b      	cbz	r3, 11002 <execute+0x1be>
   10fee:	68eb      	ldr	r3, [r5, #12]
   10ff0:	b13b      	cbz	r3, 11002 <execute+0x1be>
		shell_op_cursor_end_move(shell);
   10ff2:	4620      	mov	r0, r4
   10ff4:	f009 fb88 	bl	1a708 <shell_op_cursor_end_move>
		shell_op_cond_next_line(shell);
   10ff8:	4620      	mov	r0, r4
   10ffa:	f000 fda3 	bl	11b44 <shell_op_cond_next_line>
		shell_internal_fprintf(shell, SHELL_ERROR,
   10ffe:	4a45      	ldr	r2, [pc, #276]	; (11114 <execute+0x2d0>)
   11000:	e7ab      	b.n	10f5a <execute+0x116>
	if (entry->handler) {
   11002:	68eb      	ldr	r3, [r5, #12]
   11004:	b1ab      	cbz	r3, 11032 <execute+0x1ee>
		*active_cmd = *entry;
   11006:	46ac      	mov	ip, r5
   11008:	68a6      	ldr	r6, [r4, #8]
   1100a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1100e:	3608      	adds	r6, #8
   11010:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11012:	f8dc 3000 	ldr.w	r3, [ip]
   11016:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1101a:	6033      	str	r3, [r6, #0]
		if ((entry->subcmd == NULL)
   1101c:	68ab      	ldr	r3, [r5, #8]
   1101e:	b943      	cbnz	r3, 11032 <execute+0x1ee>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   11020:	7c6b      	ldrb	r3, [r5, #17]
   11022:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   11024:	bf01      	itttt	eq
   11026:	7c2f      	ldrbeq	r7, [r5, #16]
			*lvl = *lvl + 1;
   11028:	f108 0301 	addeq.w	r3, r8, #1
			*args_left = entry->args.mandatory - 1;
   1102c:	f107 37ff 	addeq.w	r7, r7, #4294967295
			*lvl = *lvl + 1;
   11030:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   11032:	f8d5 c004 	ldr.w	ip, [r5, #4]
   11036:	f1bc 0f00 	cmp.w	ip, #0
   1103a:	d008      	beq.n	1104e <execute+0x20a>
		*help_entry = *entry;
   1103c:	46ae      	mov	lr, r5
   1103e:	46e2      	mov	sl, ip
   11040:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   11044:	ae0c      	add	r6, sp, #48	; 0x30
   11046:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   11048:	f8de 3000 	ldr.w	r3, [lr]
   1104c:	6033      	str	r3, [r6, #0]
   1104e:	462e      	mov	r6, r5
		if (args_left || (argc == 2)) {
   11050:	b917      	cbnz	r7, 11058 <execute+0x214>
   11052:	9b06      	ldr	r3, [sp, #24]
   11054:	2b02      	cmp	r3, #2
   11056:	d19e      	bne.n	10f96 <execute+0x152>
			cmd_lvl++;
   11058:	9b05      	ldr	r3, [sp, #20]
   1105a:	3301      	adds	r3, #1
   1105c:	9305      	str	r3, [sp, #20]
   1105e:	e79a      	b.n	10f96 <execute+0x152>
			if (cmd_lvl == 0 &&
   11060:	9b05      	ldr	r3, [sp, #20]
   11062:	b963      	cbnz	r3, 1107e <execute+0x23a>

void shell_cmd_trim(const struct shell *shell);

static inline bool shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   11064:	68a3      	ldr	r3, [r4, #8]
   11066:	69db      	ldr	r3, [r3, #28]
   11068:	b10b      	cbz	r3, 1106e <execute+0x22a>
				(!shell_in_select_mode(shell) ||
   1106a:	68db      	ldr	r3, [r3, #12]
   1106c:	b93b      	cbnz	r3, 1107e <execute+0x23a>
				shell_internal_fprintf(shell, SHELL_ERROR,
   1106e:	4b2a      	ldr	r3, [pc, #168]	; (11118 <execute+0x2d4>)
   11070:	2102      	movs	r1, #2
   11072:	9300      	str	r3, [sp, #0]
   11074:	4620      	mov	r0, r4
   11076:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11078:	4a28      	ldr	r2, [pc, #160]	; (1111c <execute+0x2d8>)
   1107a:	f009 fbe0 	bl	1a83e <shell_internal_fprintf>
			has_last_handler = true;
   1107e:	f04f 0b01 	mov.w	fp, #1
   11082:	e7e5      	b.n	11050 <execute+0x20c>
		help_entry.help = NULL;
   11084:	46b2      	mov	sl, r6
	size_t argc = 0, args_left = SIZE_MAX;
   11086:	f04f 37ff 	mov.w	r7, #4294967295
	size_t cmd_with_handler_lvl = 0;
   1108a:	46b0      	mov	r8, r6
		argvp = &argv[0];
   1108c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   11090:	e72e      	b.n	10ef0 <execute+0xac>
		&& args_left > 0) {
   11092:	2f00      	cmp	r7, #0
   11094:	f47f af39 	bne.w	10f0a <execute+0xc6>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   11098:	9b02      	ldr	r3, [sp, #8]
   1109a:	b1ab      	cbz	r3, 110c8 <execute+0x284>
		shell_wildcard_finalize(shell);
   1109c:	4620      	mov	r0, r4
   1109e:	f009 ff13 	bl	1aec8 <shell_wildcard_finalize>
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   110a2:	68a2      	ldr	r2, [r4, #8]
		(void)shell_make_argv(&cmd_lvl,
   110a4:	a811      	add	r0, sp, #68	; 0x44
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   110a6:	69d1      	ldr	r1, [r2, #28]
		(void)shell_make_argv(&cmd_lvl,
   110a8:	230c      	movs	r3, #12
				      &argv[shell->ctx->selected_cmd ? 1 : 0],
   110aa:	3900      	subs	r1, #0
   110ac:	bf18      	it	ne
   110ae:	2101      	movne	r1, #1
		(void)shell_make_argv(&cmd_lvl,
   110b0:	3238      	adds	r2, #56	; 0x38
   110b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   110b6:	a805      	add	r0, sp, #20
   110b8:	f009 f8f5 	bl	1a2a6 <shell_make_argv>
		if (shell->ctx->selected_cmd) {
   110bc:	68a3      	ldr	r3, [r4, #8]
   110be:	69db      	ldr	r3, [r3, #28]
   110c0:	b113      	cbz	r3, 110c8 <execute+0x284>
			cmd_lvl++;
   110c2:	9b05      	ldr	r3, [sp, #20]
   110c4:	3301      	adds	r3, #1
   110c6:	9305      	str	r3, [sp, #20]
	argv[cmd_lvl] = NULL;
   110c8:	2200      	movs	r2, #0
   110ca:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   110cc:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   110ce:	ab1e      	add	r3, sp, #120	; 0x78
   110d0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   110d4:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   110d8:	6943      	ldr	r3, [r0, #20]
   110da:	bb2b      	cbnz	r3, 11128 <execute+0x2e4>
			if (help_entry->help == NULL) {
   110dc:	f1ba 0f00 	cmp.w	sl, #0
   110e0:	f43f af1f 	beq.w	10f22 <execute+0xde>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   110e4:	68c3      	ldr	r3, [r0, #12]
   110e6:	4553      	cmp	r3, sl
   110e8:	f43f af6b 	beq.w	10fc2 <execute+0x17e>
				shell->ctx->active_cmd = *help_entry;
   110ec:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   110f0:	f100 0508 	add.w	r5, r0, #8
   110f4:	e760      	b.n	10fb8 <execute+0x174>
   110f6:	bf00      	nop
   110f8:	0001e915 	.word	0x0001e915
   110fc:	0001ec0b 	.word	0x0001ec0b
   11100:	0001ec1f 	.word	0x0001ec1f
   11104:	0001ec29 	.word	0x0001ec29
   11108:	0001ec22 	.word	0x0001ec22
   1110c:	0001ec8a 	.word	0x0001ec8a
   11110:	0001ea44 	.word	0x0001ea44
   11114:	0001ec47 	.word	0x0001ec47
   11118:	0001ec76 	.word	0x0001ec76
   1111c:	0001ef46 	.word	0x0001ef46
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   11120:	9b05      	ldr	r3, [sp, #20]
   11122:	2b0b      	cmp	r3, #11
   11124:	d9b8      	bls.n	11098 <execute+0x254>
   11126:	e73d      	b.n	10fa4 <execute+0x160>
	if (shell->ctx->active_cmd.args.mandatory) {
   11128:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   1112a:	eba5 0508 	sub.w	r5, r5, r8
	if (shell->ctx->active_cmd.args.mandatory) {
   1112e:	b1b3      	cbz	r3, 1115e <execute+0x31a>
				UINT16_MAX : opt8;
   11130:	f64f 71ff 	movw	r1, #65535	; 0xffff
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   11134:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   11136:	2aff      	cmp	r2, #255	; 0xff
   11138:	bf08      	it	eq
   1113a:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   1113c:	429d      	cmp	r5, r3
   1113e:	d302      	bcc.n	11146 <execute+0x302>
   11140:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   11142:	429d      	cmp	r5, r3
   11144:	d90b      	bls.n	1115e <execute+0x31a>
		shell_internal_fprintf(shell, SHELL_ERROR,
   11146:	6883      	ldr	r3, [r0, #8]
   11148:	2102      	movs	r1, #2
   1114a:	4620      	mov	r0, r4
   1114c:	4a16      	ldr	r2, [pc, #88]	; (111a8 <execute+0x364>)
   1114e:	f009 fb76 	bl	1a83e <shell_internal_fprintf>
			shell_internal_help_print(shell);
   11152:	4620      	mov	r0, r4
   11154:	f7ff fdf2 	bl	10d3c <shell_internal_help_print>
		return -EINVAL;
   11158:	f06f 0515 	mvn.w	r5, #21
   1115c:	e6e3      	b.n	10f26 <execute+0xe2>
	shell->ctx->internal.flags.cmd_ctx = val ? 1 : 0;
   1115e:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		k_mutex_unlock(&shell->ctx->wr_mtx);
   11162:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   11166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1116a:	f840 3c94 	str.w	r3, [r0, #-148]
   1116e:	f008 ff93 	bl	1a098 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   11172:	68a3      	ldr	r3, [r4, #8]
   11174:	aa11      	add	r2, sp, #68	; 0x44
   11176:	4629      	mov	r1, r5
   11178:	695b      	ldr	r3, [r3, #20]
   1117a:	eb02 0288 	add.w	r2, r2, r8, lsl #2
   1117e:	4620      	mov	r0, r4
   11180:	4798      	blx	r3
   11182:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   11184:	68a0      	ldr	r0, [r4, #8]
   11186:	f04f 32ff 	mov.w	r2, #4294967295
   1118a:	f04f 33ff 	mov.w	r3, #4294967295
   1118e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   11192:	f008 ffa0 	bl	1a0d6 <k_mutex_lock.constprop.0>
		flag_cmd_ctx_set(shell, false);
   11196:	68a3      	ldr	r3, [r4, #8]
   11198:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1119c:	f36f 12c7 	bfc	r2, #7, #1
   111a0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   111a4:	e6bf      	b.n	10f26 <execute+0xe2>
   111a6:	bf00      	nop
   111a8:	0001ecae 	.word	0x0001ecae

000111ac <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   111ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b0:	4604      	mov	r4, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   111b2:	6883      	ldr	r3, [r0, #8]
   111b4:	b0ab      	sub	sp, #172	; 0xac
   111b6:	f503 7316 	add.w	r3, r3, #600	; 0x258
   111ba:	e8d3 2fef 	ldaex	r2, [r3]
   111be:	f042 0208 	orr.w	r2, r2, #8
   111c2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   111c6:	2900      	cmp	r1, #0
   111c8:	d1f7      	bne.n	111ba <shell_process+0xe>
	internal.flags.processing = 1U;

	(void)atomic_or((atomic_t *)&shell->ctx->internal.value,
			internal.value);

	switch (shell->ctx->state) {
   111ca:	68a3      	ldr	r3, [r4, #8]
   111cc:	791b      	ldrb	r3, [r3, #4]
   111ce:	2b02      	cmp	r3, #2
   111d0:	f040 832b 	bne.w	1182a <shell_process+0x67e>
	size_t count = 0;
   111d4:	2300      	movs	r3, #0
   111d6:	930b      	str	r3, [sp, #44]	; 0x2c
		(void)shell->iface->api->read(shell->iface, &data,
   111d8:	6860      	ldr	r0, [r4, #4]
   111da:	2201      	movs	r2, #1
   111dc:	6803      	ldr	r3, [r0, #0]
   111de:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
   111e2:	691d      	ldr	r5, [r3, #16]
   111e4:	ab0b      	add	r3, sp, #44	; 0x2c
   111e6:	47a8      	blx	r5
		if (count == 0) {
   111e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   111ea:	2b00      	cmp	r3, #0
   111ec:	f000 831d 	beq.w	1182a <shell_process+0x67e>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   111f0:	f99d 202b 	ldrsb.w	r2, [sp, #43]	; 0x2b
		if (ascii_filter(data) != 0) {
   111f4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   111f8:	2a00      	cmp	r2, #0
   111fa:	dbed      	blt.n	111d8 <shell_process+0x2c>
		switch (shell->ctx->receive_state) {
   111fc:	68a0      	ldr	r0, [r4, #8]
   111fe:	7941      	ldrb	r1, [r0, #5]
   11200:	2901      	cmp	r1, #1
   11202:	f000 828e 	beq.w	11722 <shell_process+0x576>
   11206:	2902      	cmp	r1, #2
   11208:	f000 82a1 	beq.w	1174e <shell_process+0x5a2>
   1120c:	2900      	cmp	r1, #0
   1120e:	f040 830a 	bne.w	11826 <shell_process+0x67a>
	if ((data != '\r') && (data != '\n')) {
   11212:	2b0d      	cmp	r3, #13
	shell->ctx->internal.flags.last_nl = val;
   11214:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   11218:	d01a      	beq.n	11250 <shell_process+0xa4>
   1121a:	2b0a      	cmp	r3, #10
   1121c:	d018      	beq.n	11250 <shell_process+0xa4>
   1121e:	f361 220f 	bfi	r2, r1, #8, #8
   11222:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
			switch (data) {
   11226:	2b09      	cmp	r3, #9
   11228:	d055      	beq.n	112d6 <shell_process+0x12a>
   1122a:	d83a      	bhi.n	112a2 <shell_process+0xf6>
   1122c:	2b00      	cmp	r3, #0
   1122e:	d0d3      	beq.n	111d8 <shell_process+0x2c>
   11230:	2b08      	cmp	r3, #8
   11232:	f000 81dc 	beq.w	115ee <shell_process+0x442>
   11236:	f1a3 0220 	sub.w	r2, r3, #32
				if (isprint((int) data)) {
   1123a:	2a5e      	cmp	r2, #94	; 0x5e
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1123c:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   11240:	f200 81e4 	bhi.w	1160c <shell_process+0x460>
   11244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
					shell_op_char_insert(shell, data);
   11248:	4619      	mov	r1, r3
   1124a:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
   1124e:	e0f9      	b.n	11444 <shell_process+0x298>
	if ((flag_last_nl_get(shell) == 0U) ||
   11250:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
   11254:	d005      	beq.n	11262 <shell_process+0xb6>
	return shell->ctx->internal.flags.last_nl;
   11256:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   1125a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1125e:	4293      	cmp	r3, r2
   11260:	d1e1      	bne.n	11226 <shell_process+0x7a>
	shell->ctx->internal.flags.last_nl = val;
   11262:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
   11266:	f363 220f 	bfi	r2, r3, #8, #8
   1126a:	f8c0 2258 	str.w	r2, [r0, #600]	; 0x258
				if (!shell->ctx->cmd_buff_len) {
   1126e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   11270:	b99a      	cbnz	r2, 1129a <shell_process+0xee>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   11272:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   11276:	f362 1386 	bfi	r3, r2, #6, #1
   1127a:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	shell_history_mode_exit(shell->history);
   1127e:	68e0      	ldr	r0, [r4, #12]
   11280:	f009 fc04 	bl	1aa8c <shell_history_mode_exit>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11284:	49b3      	ldr	r1, [pc, #716]	; (11554 <shell_process+0x3a8>)
   11286:	6960      	ldr	r0, [r4, #20]
   11288:	f008 ff0e 	bl	1a0a8 <shell_raw_fprintf>
	shell->ctx->state = state;
   1128c:	68a3      	ldr	r3, [r4, #8]
   1128e:	2202      	movs	r2, #2
   11290:	4620      	mov	r0, r4
   11292:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   11294:	f7ff fd62 	bl	10d5c <state_set.part.0>
   11298:	e79e      	b.n	111d8 <shell_process+0x2c>
					(void)execute(shell);
   1129a:	4620      	mov	r0, r4
   1129c:	f7ff fdd2 	bl	10e44 <execute>
   112a0:	e7f4      	b.n	1128c <shell_process+0xe0>
   112a2:	2b1b      	cmp	r3, #27
   112a4:	d014      	beq.n	112d0 <shell_process+0x124>
   112a6:	2b7f      	cmp	r3, #127	; 0x7f
   112a8:	d1c5      	bne.n	11236 <shell_process+0x8a>
	return shell->ctx->internal.flags.echo == 1;
   112aa:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   112ae:	075f      	lsls	r7, r3, #29
   112b0:	d592      	bpl.n	111d8 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   112b2:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   112b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   112ba:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	return shell->ctx->internal.flags.mode_delete == 1;
   112be:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
					if (flag_mode_delete_get(shell)) {
   112c2:	069e      	lsls	r6, r3, #26
   112c4:	f100 819e 	bmi.w	11604 <shell_process+0x458>
		shell_op_char_delete(shell);
   112c8:	4620      	mov	r0, r4
   112ca:	f009 faf9 	bl	1a8c0 <shell_op_char_delete>
		break;
   112ce:	e783      	b.n	111d8 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   112d0:	2301      	movs	r3, #1
   112d2:	7143      	strb	r3, [r0, #5]
}
   112d4:	e780      	b.n	111d8 <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1;
   112d6:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   112da:	0759      	lsls	r1, r3, #29
   112dc:	f57f af7c 	bpl.w	111d8 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   112e0:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   112e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   112e8:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	if (compl_space == 0U) {
   112ec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   112ee:	2bff      	cmp	r3, #255	; 0xff
   112f0:	f43f af72 	beq.w	111d8 <shell_process+0x2c>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   112f4:	2500      	movs	r5, #0
	memcpy(shell->ctx->temp_buff, shell->ctx->cmd_buff,
   112f6:	8e82      	ldrh	r2, [r0, #52]	; 0x34
   112f8:	f100 0138 	add.w	r1, r0, #56	; 0x38
   112fc:	f500 709c 	add.w	r0, r0, #312	; 0x138
   11300:	f009 ffd1 	bl	1b2a6 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   11304:	68a2      	ldr	r2, [r4, #8]
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   11306:	a91d      	add	r1, sp, #116	; 0x74
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   11308:	8e93      	ldrh	r3, [r2, #52]	; 0x34
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   1130a:	a80d      	add	r0, sp, #52	; 0x34
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   1130c:	4413      	add	r3, r2
   1130e:	f883 5138 	strb.w	r5, [r3, #312]	; 0x138
	(void)shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   11312:	f502 729c 	add.w	r2, r2, #312	; 0x138
   11316:	230c      	movs	r3, #12
   11318:	f008 ffc5 	bl	1a2a6 <shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   1131c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1131e:	290c      	cmp	r1, #12
   11320:	f63f af5a 	bhi.w	111d8 <shell_process+0x2c>
	int space = isspace((int)shell->ctx->cmd_buff[
   11324:	68a0      	ldr	r0, [r4, #8]
	(*argv)[*argc] = NULL;
   11326:	ab2a      	add	r3, sp, #168	; 0xa8
   11328:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1132c:	f843 5c34 	str.w	r5, [r3, #-52]
						shell->ctx->cmd_buff_pos - 1]);
   11330:	8e83      	ldrh	r3, [r0, #52]	; 0x34
	int space = isspace((int)shell->ctx->cmd_buff[
   11332:	4403      	add	r3, r0
   11334:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   11338:	2b20      	cmp	r3, #32
   1133a:	f000 8284 	beq.w	11846 <shell_process+0x69a>
   1133e:	3b09      	subs	r3, #9
   11340:	2b04      	cmp	r3, #4
   11342:	f240 8280 	bls.w	11846 <shell_process+0x69a>
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   11346:	2901      	cmp	r1, #1
   11348:	d856      	bhi.n	113f8 <shell_process+0x24c>
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
   1134a:	2300      	movs	r3, #0
		*cmd = shell->ctx->selected_cmd;
   1134c:	69c6      	ldr	r6, [r0, #28]
		*complete_arg_idx = SHELL_CMD_ROOT_LVL;
   1134e:	930c      	str	r3, [sp, #48]	; 0x30
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   11350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11352:	aa2a      	add	r2, sp, #168	; 0xa8
   11354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11358:	f853 ac34 	ldr.w	sl, [r3, #-52]
	*cnt = 0;
   1135c:	2500      	movs	r5, #0
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   1135e:	4650      	mov	r0, sl
   11360:	f008 fe9c 	bl	1a09c <shell_strlen>
	size_t first = 0;
   11364:	46a8      	mov	r8, r5
	size_t incompl_cmd_len = shell_strlen(incompl_cmd);
   11366:	4681      	mov	r9, r0
	size_t idx = 0;
   11368:	462f      	mov	r7, r5
	*longest = 0U;
   1136a:	9504      	str	r5, [sp, #16]
	while ((candidate = shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   1136c:	4639      	mov	r1, r7
   1136e:	4630      	mov	r0, r6
   11370:	aa18      	add	r2, sp, #96	; 0x60
   11372:	f000 fb99 	bl	11aa8 <shell_cmd_get>
   11376:	4683      	mov	fp, r0
   11378:	2800      	cmp	r0, #0
   1137a:	d14b      	bne.n	11414 <shell_process+0x268>
	if (cnt == 1) {
   1137c:	2d01      	cmp	r5, #1
   1137e:	d16a      	bne.n	11456 <shell_process+0x2aa>
		autocomplete(shell, cmd, argv[arg_idx], first);
   11380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11382:	aa2a      	add	r2, sp, #168	; 0xa8
   11384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = shell_strlen(arg);
   11388:	f853 0c34 	ldr.w	r0, [r3, #-52]
   1138c:	f008 fe86 	bl	1a09c <shell_strlen>
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   11390:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = shell_strlen(arg);
   11392:	4605      	mov	r5, r0
	match = shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   11394:	4641      	mov	r1, r8
   11396:	4630      	mov	r0, r6
   11398:	3208      	adds	r2, #8
   1139a:	f000 fb85 	bl	11aa8 <shell_cmd_get>
   1139e:	4606      	mov	r6, r0
	cmd_len = shell_strlen(match->syntax);
   113a0:	6800      	ldr	r0, [r0, #0]
   113a2:	f008 fe7b 	bl	1a09c <shell_strlen>
	if (cmd_len != arg_len) {
   113a6:	4285      	cmp	r5, r0
   113a8:	d006      	beq.n	113b8 <shell_process+0x20c>
		shell_op_completion_insert(shell,
   113aa:	6831      	ldr	r1, [r6, #0]
   113ac:	1b42      	subs	r2, r0, r5
   113ae:	b292      	uxth	r2, r2
   113b0:	4620      	mov	r0, r4
   113b2:	4429      	add	r1, r5
   113b4:	f009 fa82 	bl	1a8bc <shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   113b8:	68a3      	ldr	r3, [r4, #8]
					shell->ctx->cmd_buff_pos])) {
   113ba:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
	if (!isspace((int) shell->ctx->cmd_buff[
   113bc:	441a      	add	r2, r3
   113be:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   113c2:	2a20      	cmp	r2, #32
   113c4:	d042      	beq.n	1144c <shell_process+0x2a0>
   113c6:	3a09      	subs	r2, #9
   113c8:	2a04      	cmp	r2, #4
   113ca:	d93f      	bls.n	1144c <shell_process+0x2a0>
	return shell->ctx->internal.flags.insert_mode == 1;
   113cc:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
		if (flag_insert_mode_get(shell)) {
   113d0:	07d2      	lsls	r2, r2, #31
   113d2:	d536      	bpl.n	11442 <shell_process+0x296>
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   113d4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
			shell_op_char_insert(shell, ' ');
   113d8:	2120      	movs	r1, #32
   113da:	f36f 0200 	bfc	r2, #0, #1
   113de:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   113e2:	4620      	mov	r0, r4
   113e4:	f000 fcbc 	bl	11d60 <shell_op_char_insert>
			flag_insert_mode_set(shell, true);
   113e8:	68a2      	ldr	r2, [r4, #8]
   113ea:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   113ee:	f043 0301 	orr.w	r3, r3, #1
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   113f2:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
}
   113f6:	e6ef      	b.n	111d8 <shell_process+0x2c>
	search_argc = space ? *argc : *argc - 1;
   113f8:	3901      	subs	r1, #1
	*cmd = shell_get_last_command(shell->ctx->selected_cmd, search_argc,
   113fa:	2300      	movs	r3, #0
   113fc:	9301      	str	r3, [sp, #4]
   113fe:	ab0e      	add	r3, sp, #56	; 0x38
   11400:	9300      	str	r3, [sp, #0]
   11402:	69c0      	ldr	r0, [r0, #28]
   11404:	ab0c      	add	r3, sp, #48	; 0x30
   11406:	aa1d      	add	r2, sp, #116	; 0x74
   11408:	f009 f84f 	bl	1a4aa <shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   1140c:	4606      	mov	r6, r0
   1140e:	2800      	cmp	r0, #0
   11410:	d19e      	bne.n	11350 <shell_process+0x1a4>
   11412:	e6e1      	b.n	111d8 <shell_process+0x2c>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   11414:	464a      	mov	r2, r9
   11416:	4651      	mov	r1, sl
   11418:	f8db 0000 	ldr.w	r0, [fp]
   1141c:	f009 ff0d 	bl	1b23a <strncmp>
		if (is_candidate) {
   11420:	b968      	cbnz	r0, 1143e <shell_process+0x292>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   11422:	f8db 0000 	ldr.w	r0, [fp]
   11426:	f009 fef5 	bl	1b214 <strlen>
   1142a:	9b04      	ldr	r3, [sp, #16]
   1142c:	4283      	cmp	r3, r0
   1142e:	bf38      	it	cc
   11430:	4603      	movcc	r3, r0
   11432:	b29b      	uxth	r3, r3
				*first_idx = idx;
   11434:	2d00      	cmp	r5, #0
   11436:	bf08      	it	eq
   11438:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   1143a:	9304      	str	r3, [sp, #16]
			(*cnt)++;
   1143c:	3501      	adds	r5, #1
		idx++;
   1143e:	3701      	adds	r7, #1
   11440:	e794      	b.n	1136c <shell_process+0x1c0>
			shell_op_char_insert(shell, ' ');
   11442:	2120      	movs	r1, #32
					shell_op_char_insert(shell, data);
   11444:	4620      	mov	r0, r4
   11446:	f000 fc8b 	bl	11d60 <shell_op_char_insert>
   1144a:	e6c5      	b.n	111d8 <shell_process+0x2c>
		shell_op_cursor_move(shell, 1);
   1144c:	2101      	movs	r1, #1
   1144e:	4620      	mov	r0, r4
   11450:	f009 f8f6 	bl	1a640 <shell_op_cursor_move>
   11454:	e6c0      	b.n	111d8 <shell_process+0x2c>
	} else if (cnt > 1) {
   11456:	f67f aebf 	bls.w	111d8 <shell_process+0x2c>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   1145a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1145c:	aa2a      	add	r2, sp, #168	; 0xa8
   1145e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   11462:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = shell_strlen(str);
   11466:	4650      	mov	r0, sl
   11468:	f008 fe18 	bl	1a09c <shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1146c:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = shell_strlen(str);
   1146e:	9006      	str	r0, [sp, #24]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   11470:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
	longest_option += shell_strlen(tab);
   11474:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 11558 <shell_process+0x3ac>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   11478:	9505      	str	r5, [sp, #20]
   1147a:	f8cd 800c 	str.w	r8, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   1147e:	68a2      	ldr	r2, [r4, #8]
   11480:	4630      	mov	r0, r6
   11482:	9903      	ldr	r1, [sp, #12]
   11484:	3208      	adds	r2, #8
   11486:	f000 fb0f 	bl	11aa8 <shell_cmd_get>
		idx++;
   1148a:	9b03      	ldr	r3, [sp, #12]
		match = shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   1148c:	4607      	mov	r7, r0
		idx++;
   1148e:	3301      	adds	r3, #1
   11490:	9303      	str	r3, [sp, #12]
		if (str && match->syntax &&
   11492:	f1ba 0f00 	cmp.w	sl, #0
   11496:	d152      	bne.n	1153e <shell_process+0x392>
		tab_item_print(shell, match->syntax, longest);
   11498:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   1149a:	2b00      	cmp	r3, #0
   1149c:	d15e      	bne.n	1155c <shell_process+0x3b0>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   1149e:	68a2      	ldr	r2, [r4, #8]
   114a0:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   114a2:	9b05      	ldr	r3, [sp, #20]
   114a4:	3b01      	subs	r3, #1
   114a6:	9305      	str	r3, [sp, #20]
   114a8:	d1e9      	bne.n	1147e <shell_process+0x2d2>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   114aa:	492a      	ldr	r1, [pc, #168]	; (11554 <shell_process+0x3a8>)
   114ac:	6960      	ldr	r0, [r4, #20]
   114ae:	f008 fdfb 	bl	1a0a8 <shell_raw_fprintf>
	shell_print_prompt_and_cmd(shell);
   114b2:	4620      	mov	r0, r4
   114b4:	f000 fc86 	bl	11dc4 <shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   114b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   114ba:	aa2a      	add	r2, sp, #168	; 0xa8
   114bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = shell_strlen(arg);
   114c0:	f853 0c34 	ldr.w	r0, [r3, #-52]
   114c4:	f008 fdea 	bl	1a09c <shell_strlen>
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   114c8:	4641      	mov	r1, r8
   114ca:	aa13      	add	r2, sp, #76	; 0x4c
	uint16_t arg_len = shell_strlen(arg);
   114cc:	4607      	mov	r7, r0
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   114ce:	4630      	mov	r0, r6
   114d0:	f000 faea 	bl	11aa8 <shell_cmd_get>
	size_t idx = first + 1;
   114d4:	f108 0901 	add.w	r9, r8, #1
	match = shell_cmd_get(cmd, first, &dynamic_entry);
   114d8:	4680      	mov	r8, r0
	strncpy(shell->ctx->temp_buff, match->syntax,
   114da:	68a0      	ldr	r0, [r4, #8]
   114dc:	f8d8 1000 	ldr.w	r1, [r8]
   114e0:	22ff      	movs	r2, #255	; 0xff
   114e2:	f500 709c 	add.w	r0, r0, #312	; 0x138
   114e6:	f009 fe74 	bl	1b1d2 <strncpy>
	*str = match->syntax;
   114ea:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   114ee:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
   114f2:	4649      	mov	r1, r9
   114f4:	4630      	mov	r0, r6
   114f6:	aa18      	add	r2, sp, #96	; 0x60
   114f8:	f109 0b01 	add.w	fp, r9, #1
   114fc:	f000 fad4 	bl	11aa8 <shell_cmd_get>
		if (match2 == NULL) {
   11500:	2800      	cmp	r0, #0
   11502:	d067      	beq.n	115d4 <shell_process+0x428>
	size_t common = 0;
   11504:	2200      	movs	r2, #0
   11506:	68a3      	ldr	r3, [r4, #8]
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   11508:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1150a:	f503 739c 	add.w	r3, r3, #312	; 0x138
   1150e:	f813 cb01 	ldrb.w	ip, [r3], #1
   11512:	5c81      	ldrb	r1, [r0, r2]
   11514:	4561      	cmp	r1, ip
   11516:	d105      	bne.n	11524 <shell_process+0x378>
   11518:	b121      	cbz	r1, 11524 <shell_process+0x378>
   1151a:	f64f 71ff 	movw	r1, #65535	; 0xffff
		common++;
   1151e:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   11520:	428a      	cmp	r2, r1
   11522:	d1f4      	bne.n	1150e <shell_process+0x362>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   11524:	b10f      	cbz	r7, 1152a <shell_process+0x37e>
   11526:	42ba      	cmp	r2, r7
   11528:	db07      	blt.n	1153a <shell_process+0x38e>
			common = (curr_common < common) ? curr_common : common;
   1152a:	4590      	cmp	r8, r2
   1152c:	bfa8      	it	ge
   1152e:	4690      	movge	r8, r2
			--cnt;
   11530:	3d01      	subs	r5, #1
	while (cnt > 1) {
   11532:	2d01      	cmp	r5, #1
			common = (curr_common < common) ? curr_common : common;
   11534:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   11538:	d04c      	beq.n	115d4 <shell_process+0x428>
		match2 = shell_cmd_get(cmd, idx++, &dynamic_entry2);
   1153a:	46d9      	mov	r9, fp
   1153c:	e7d9      	b.n	114f2 <shell_process+0x346>
		if (str && match->syntax &&
   1153e:	6800      	ldr	r0, [r0, #0]
   11540:	2800      	cmp	r0, #0
   11542:	d0a9      	beq.n	11498 <shell_process+0x2ec>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   11544:	4651      	mov	r1, sl
   11546:	9a06      	ldr	r2, [sp, #24]
   11548:	f009 fe77 	bl	1b23a <strncmp>
		if (str && match->syntax &&
   1154c:	2800      	cmp	r0, #0
   1154e:	d0a3      	beq.n	11498 <shell_process+0x2ec>
   11550:	e795      	b.n	1147e <shell_process+0x2d2>
   11552:	bf00      	nop
   11554:	0001e915 	.word	0x0001e915
   11558:	0001e4af 	.word	0x0001e4af
	longest_option += shell_strlen(tab);
   1155c:	4658      	mov	r0, fp
   1155e:	9307      	str	r3, [sp, #28]
   11560:	f008 fd9c 	bl	1a09c <shell_strlen>
   11564:	9b04      	ldr	r3, [sp, #16]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   11566:	68a1      	ldr	r1, [r4, #8]
	longest_option += shell_strlen(tab);
   11568:	18c2      	adds	r2, r0, r3
   1156a:	b292      	uxth	r2, r2
			- shell_strlen(tab)) / longest_option;
   1156c:	4658      	mov	r0, fp
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   1156e:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += shell_strlen(tab);
   11570:	9209      	str	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
   11572:	f008 fd93 	bl	1a09c <shell_strlen>
	diff = longest_option - shell_strlen(option);
   11576:	9b07      	ldr	r3, [sp, #28]
			- shell_strlen(tab)) / longest_option;
   11578:	9008      	str	r0, [sp, #32]
	diff = longest_option - shell_strlen(option);
   1157a:	4618      	mov	r0, r3
   1157c:	f008 fd8e 	bl	1a09c <shell_strlen>
			- shell_strlen(tab)) / longest_option;
   11580:	9908      	ldr	r1, [sp, #32]
	diff = longest_option - shell_strlen(option);
   11582:	9a09      	ldr	r2, [sp, #36]	; 0x24
			- shell_strlen(tab)) / longest_option;
   11584:	1a7f      	subs	r7, r7, r1
	diff = longest_option - shell_strlen(option);
   11586:	eba2 0900 	sub.w	r9, r2, r0
			- shell_strlen(tab)) / longest_option;
   1158a:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   1158e:	68a0      	ldr	r0, [r4, #8]
   11590:	b292      	uxth	r2, r2
   11592:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
   11596:	9b07      	ldr	r3, [sp, #28]
   11598:	fbbc f1f2 	udiv	r1, ip, r2
   1159c:	fb02 c211 	mls	r2, r2, r1, ip
   115a0:	f10c 0e01 	add.w	lr, ip, #1
   115a4:	b292      	uxth	r2, r2
	diff = longest_option - shell_strlen(option);
   115a6:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   115aa:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   115ae:	b95a      	cbnz	r2, 115c8 <shell_process+0x41c>
		shell_internal_fprintf(shell, SHELL_OPTION, "\n%s%s", tab,
   115b0:	9300      	str	r3, [sp, #0]
   115b2:	2107      	movs	r1, #7
   115b4:	465b      	mov	r3, fp
   115b6:	4620      	mov	r0, r4
   115b8:	4aa5      	ldr	r2, [pc, #660]	; (11850 <shell_process+0x6a4>)
   115ba:	f009 f940 	bl	1a83e <shell_internal_fprintf>
	shell_op_cursor_horiz_move(shell, diff);
   115be:	4649      	mov	r1, r9
   115c0:	4620      	mov	r0, r4
   115c2:	f000 faaf 	bl	11b24 <shell_op_cursor_horiz_move>
   115c6:	e76c      	b.n	114a2 <shell_process+0x2f6>
		shell_internal_fprintf(shell, SHELL_OPTION, "%s", option);
   115c8:	2107      	movs	r1, #7
   115ca:	4620      	mov	r0, r4
   115cc:	4aa1      	ldr	r2, [pc, #644]	; (11854 <shell_process+0x6a8>)
   115ce:	f009 f936 	bl	1a83e <shell_internal_fprintf>
   115d2:	e7f4      	b.n	115be <shell_process+0x412>
	if (common) {
   115d4:	f1b8 0f00 	cmp.w	r8, #0
   115d8:	f43f adfe 	beq.w	111d8 <shell_process+0x2c>
		shell_op_completion_insert(shell, &completion[arg_len],
   115dc:	eba8 0207 	sub.w	r2, r8, r7
   115e0:	4620      	mov	r0, r4
   115e2:	b292      	uxth	r2, r2
   115e4:	eb0a 0107 	add.w	r1, sl, r7
   115e8:	f009 f968 	bl	1a8bc <shell_op_completion_insert>
   115ec:	e5f4      	b.n	111d8 <shell_process+0x2c>
	return shell->ctx->internal.flags.echo == 1;
   115ee:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
				if (flag_echo_get(shell)) {
   115f2:	075b      	lsls	r3, r3, #29
   115f4:	f57f adf0 	bpl.w	111d8 <shell_process+0x2c>
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   115f8:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   115fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11600:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
						shell_op_char_backspace(shell);
   11604:	4620      	mov	r0, r4
   11606:	f009 f976 	bl	1a8f6 <shell_op_char_backspace>
   1160a:	e5e5      	b.n	111d8 <shell_process+0x2c>
				} else if (flag_echo_get(shell)) {
   1160c:	0755      	lsls	r5, r2, #29
   1160e:	f57f ade3 	bpl.w	111d8 <shell_process+0x2c>
	switch (data) {
   11612:	3b01      	subs	r3, #1
   11614:	2b16      	cmp	r3, #22
   11616:	f63f addf 	bhi.w	111d8 <shell_process+0x2c>
   1161a:	a201      	add	r2, pc, #4	; (adr r2, 11620 <shell_process+0x474>)
   1161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11620:	000117ed 	.word	0x000117ed
   11624:	0001167d 	.word	0x0001167d
   11628:	00011685 	.word	0x00011685
   1162c:	000112c9 	.word	0x000112c9
   11630:	000117e1 	.word	0x000117e1
   11634:	000116ab 	.word	0x000116ab
   11638:	000111d9 	.word	0x000111d9
   1163c:	000111d9 	.word	0x000111d9
   11640:	000111d9 	.word	0x000111d9
   11644:	000111d9 	.word	0x000111d9
   11648:	000116b3 	.word	0x000116b3
   1164c:	000116bb 	.word	0x000116bb
   11650:	000111d9 	.word	0x000111d9
   11654:	000116d7 	.word	0x000116d7
   11658:	000111d9 	.word	0x000111d9
   1165c:	000116e1 	.word	0x000116e1
   11660:	000111d9 	.word	0x000111d9
   11664:	000111d9 	.word	0x000111d9
   11668:	000111d9 	.word	0x000111d9
   1166c:	000111d9 	.word	0x000111d9
   11670:	000116e5 	.word	0x000116e5
   11674:	000111d9 	.word	0x000111d9
   11678:	00011711 	.word	0x00011711
		shell_op_left_arrow(shell);
   1167c:	4620      	mov	r0, r4
   1167e:	f009 f84a 	bl	1a716 <shell_op_left_arrow>
		break;
   11682:	e5a9      	b.n	111d8 <shell_process+0x2c>
		shell_op_cursor_end_move(shell);
   11684:	4620      	mov	r0, r4
   11686:	f009 f83f 	bl	1a708 <shell_op_cursor_end_move>
		if (!shell_cursor_in_empty_line(shell)) {
   1168a:	4620      	mov	r0, r4
   1168c:	f008 ffc4 	bl	1a618 <shell_cursor_in_empty_line>
   11690:	b918      	cbnz	r0, 1169a <shell_process+0x4ee>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11692:	4971      	ldr	r1, [pc, #452]	; (11858 <shell_process+0x6ac>)
   11694:	6960      	ldr	r0, [r4, #20]
   11696:	f008 fd07 	bl	1a0a8 <shell_raw_fprintf>
		flag_history_exit_set(shell, true);
   1169a:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   1169c:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   116a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   116a4:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   116a8:	e5f1      	b.n	1128e <shell_process+0xe2>
		shell_op_right_arrow(shell);
   116aa:	4620      	mov	r0, r4
   116ac:	f009 f83b 	bl	1a726 <shell_op_right_arrow>
		break;
   116b0:	e592      	b.n	111d8 <shell_process+0x2c>
		shell_op_delete_from_cursor(shell);
   116b2:	4620      	mov	r0, r4
   116b4:	f009 f840 	bl	1a738 <shell_op_delete_from_cursor>
		break;
   116b8:	e58e      	b.n	111d8 <shell_process+0x2c>
		SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   116ba:	6960      	ldr	r0, [r4, #20]
   116bc:	4a67      	ldr	r2, [pc, #412]	; (1185c <shell_process+0x6b0>)
   116be:	4965      	ldr	r1, [pc, #404]	; (11854 <shell_process+0x6a8>)
   116c0:	f008 fcf2 	bl	1a0a8 <shell_raw_fprintf>
		SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   116c4:	6960      	ldr	r0, [r4, #20]
   116c6:	4a66      	ldr	r2, [pc, #408]	; (11860 <shell_process+0x6b4>)
   116c8:	4962      	ldr	r1, [pc, #392]	; (11854 <shell_process+0x6a8>)
   116ca:	f008 fced 	bl	1a0a8 <shell_raw_fprintf>
		shell_print_prompt_and_cmd(shell);
   116ce:	4620      	mov	r0, r4
   116d0:	f000 fb78 	bl	11dc4 <shell_print_prompt_and_cmd>
		break;
   116d4:	e580      	b.n	111d8 <shell_process+0x2c>
		history_handle(shell, false);
   116d6:	2100      	movs	r1, #0
		history_handle(shell, true);
   116d8:	4620      	mov	r0, r4
   116da:	f7ff fb61 	bl	10da0 <history_handle>
		break;
   116de:	e57b      	b.n	111d8 <shell_process+0x2c>
		history_handle(shell, true);
   116e0:	2101      	movs	r1, #1
   116e2:	e7f9      	b.n	116d8 <shell_process+0x52c>
		shell_op_cursor_home_move(shell);
   116e4:	4620      	mov	r0, r4
   116e6:	f009 f809 	bl	1a6fc <shell_op_cursor_home_move>
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   116ea:	2200      	movs	r2, #0
		cmd_buffer_clear(shell);
   116ec:	68a3      	ldr	r3, [r4, #8]
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   116ee:	4959      	ldr	r1, [pc, #356]	; (11854 <shell_process+0x6a8>)
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   116f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	shell->ctx->cmd_buff_pos = 0;
   116f4:	869a      	strh	r2, [r3, #52]	; 0x34
	shell->ctx->cmd_buff_len = 0;
   116f6:	865a      	strh	r2, [r3, #50]	; 0x32
		flag_history_exit_set(shell, true);
   116f8:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   116fa:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11702:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   11706:	6960      	ldr	r0, [r4, #20]
   11708:	4a56      	ldr	r2, [pc, #344]	; (11864 <shell_process+0x6b8>)
   1170a:	f008 fccd 	bl	1a0a8 <shell_raw_fprintf>
}
   1170e:	e563      	b.n	111d8 <shell_process+0x2c>
		shell_op_word_remove(shell);
   11710:	4620      	mov	r0, r4
   11712:	f000 faa7 	bl	11c64 <shell_op_word_remove>
		flag_history_exit_set(shell, true);
   11716:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.history_exit = val ? 1 : 0;
   11718:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11720:	e667      	b.n	113f2 <shell_process+0x246>
			if (data == '[') {
   11722:	2b5b      	cmp	r3, #91	; 0x5b
   11724:	d101      	bne.n	1172a <shell_process+0x57e>
	shell->ctx->receive_state = state;
   11726:	2302      	movs	r3, #2
   11728:	e5d3      	b.n	112d2 <shell_process+0x126>
	return shell->ctx->internal.flags.echo == 1;
   1172a:	f8d0 2258 	ldr.w	r2, [r0, #600]	; 0x258
			} else if (flag_echo_get(shell)) {
   1172e:	0750      	lsls	r0, r2, #29
   11730:	d509      	bpl.n	11746 <shell_process+0x59a>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   11732:	2b62      	cmp	r3, #98	; 0x62
   11734:	d105      	bne.n	11742 <shell_process+0x596>
		shell_op_cursor_word_move(shell, -1);
   11736:	f04f 31ff 	mov.w	r1, #4294967295
		shell_op_cursor_word_move(shell, 1);
   1173a:	4620      	mov	r0, r4
   1173c:	f008 ffa4 	bl	1a688 <shell_op_cursor_word_move>
   11740:	e001      	b.n	11746 <shell_process+0x59a>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   11742:	2b66      	cmp	r3, #102	; 0x66
   11744:	d0f9      	beq.n	1173a <shell_process+0x58e>
	shell->ctx->receive_state = state;
   11746:	2200      	movs	r2, #0
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   11748:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   1174a:	715a      	strb	r2, [r3, #5]
}
   1174c:	e544      	b.n	111d8 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   1174e:	2200      	movs	r2, #0
   11750:	7142      	strb	r2, [r0, #5]
			if (!flag_echo_get(shell)) {
   11752:	68a2      	ldr	r2, [r4, #8]
   11754:	f8d2 1258 	ldr.w	r1, [r2, #600]	; 0x258
   11758:	0749      	lsls	r1, r1, #29
   1175a:	f57f ad3d 	bpl.w	111d8 <shell_process+0x2c>
			switch (data) {
   1175e:	3b31      	subs	r3, #49	; 0x31
   11760:	2b1b      	cmp	r3, #27
   11762:	f63f ad39 	bhi.w	111d8 <shell_process+0x2c>
   11766:	a101      	add	r1, pc, #4	; (adr r1, 1176c <shell_process+0x5c0>)
   11768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1176c:	000117e9 	.word	0x000117e9
   11770:	000117f5 	.word	0x000117f5
   11774:	00011815 	.word	0x00011815
   11778:	000117dd 	.word	0x000117dd
   1177c:	000111d9 	.word	0x000111d9
   11780:	000111d9 	.word	0x000111d9
   11784:	000111d9 	.word	0x000111d9
   11788:	000111d9 	.word	0x000111d9
   1178c:	000111d9 	.word	0x000111d9
   11790:	000111d9 	.word	0x000111d9
   11794:	000111d9 	.word	0x000111d9
   11798:	000111d9 	.word	0x000111d9
   1179c:	000111d9 	.word	0x000111d9
   117a0:	000111d9 	.word	0x000111d9
   117a4:	000111d9 	.word	0x000111d9
   117a8:	000111d9 	.word	0x000111d9
   117ac:	000116e1 	.word	0x000116e1
   117b0:	000116d7 	.word	0x000116d7
   117b4:	000116ab 	.word	0x000116ab
   117b8:	0001167d 	.word	0x0001167d
   117bc:	000111d9 	.word	0x000111d9
   117c0:	000117e1 	.word	0x000117e1
   117c4:	000111d9 	.word	0x000111d9
   117c8:	000117ed 	.word	0x000117ed
   117cc:	000111d9 	.word	0x000111d9
   117d0:	000111d9 	.word	0x000111d9
   117d4:	000111d9 	.word	0x000111d9
   117d8:	000117f9 	.word	0x000117f9
	shell->ctx->receive_state = state;
   117dc:	2303      	movs	r3, #3
   117de:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_end_move(shell);
   117e0:	4620      	mov	r0, r4
   117e2:	f008 ff91 	bl	1a708 <shell_op_cursor_end_move>
		break;
   117e6:	e4f7      	b.n	111d8 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   117e8:	2303      	movs	r3, #3
   117ea:	7153      	strb	r3, [r2, #5]
		shell_op_cursor_home_move(shell);
   117ec:	4620      	mov	r0, r4
   117ee:	f008 ff85 	bl	1a6fc <shell_op_cursor_home_move>
		break;
   117f2:	e4f1      	b.n	111d8 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   117f4:	2303      	movs	r3, #3
   117f6:	7153      	strb	r3, [r2, #5]
				bool status = flag_insert_mode_get(shell);
   117f8:	68a2      	ldr	r2, [r4, #8]
	return shell->ctx->internal.flags.insert_mode == 1;
   117fa:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   117fe:	f8d2 1258 	ldr.w	r1, [r2, #600]	; 0x258
	return shell->ctx->internal.flags.insert_mode == 1;
   11802:	f003 0301 	and.w	r3, r3, #1
				flag_insert_mode_set(shell, !status);
   11806:	f083 0301 	eor.w	r3, r3, #1
	shell->ctx->internal.flags.insert_mode = val ? 1 : 0;
   1180a:	f363 0100 	bfi	r1, r3, #0, #1
   1180e:	f8c2 1258 	str.w	r1, [r2, #600]	; 0x258
}
   11812:	e4e1      	b.n	111d8 <shell_process+0x2c>
	shell->ctx->receive_state = state;
   11814:	2303      	movs	r3, #3
   11816:	7153      	strb	r3, [r2, #5]
				if (flag_echo_get(shell)) {
   11818:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   1181a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1181e:	075b      	lsls	r3, r3, #29
   11820:	f57f acda 	bpl.w	111d8 <shell_process+0x2c>
   11824:	e550      	b.n	112c8 <shell_process+0x11c>
	shell->ctx->receive_state = state;
   11826:	2300      	movs	r3, #0
   11828:	e553      	b.n	112d2 <shell_process+0x126>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1182a:	68a3      	ldr	r3, [r4, #8]
   1182c:	f503 7316 	add.w	r3, r3, #600	; 0x258
   11830:	e8d3 2fef 	ldaex	r2, [r3]
   11834:	f022 0208 	bic.w	r2, r2, #8
   11838:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1183c:	2900      	cmp	r1, #0
   1183e:	d1f7      	bne.n	11830 <shell_process+0x684>

	internal.value = 0xFFFFFFFF;
	internal.flags.processing = 0U;
	(void)atomic_and((atomic_t *)&shell->ctx->internal.value,
			 internal.value);
}
   11840:	b02b      	add	sp, #172	; 0xac
   11842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   11846:	2900      	cmp	r1, #0
   11848:	f43f ad7f 	beq.w	1134a <shell_process+0x19e>
   1184c:	e5d5      	b.n	113fa <shell_process+0x24e>
   1184e:	bf00      	nop
   11850:	0001ecc9 	.word	0x0001ecc9
   11854:	0001ea3f 	.word	0x0001ea3f
   11858:	0001e915 	.word	0x0001e915
   1185c:	0001ecea 	.word	0x0001ecea
   11860:	0001ecee 	.word	0x0001ecee
   11864:	0001ece6 	.word	0x0001ece6

00011868 <shell_init>:
{
   11868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1186c:	4604      	mov	r4, r0
   1186e:	b088      	sub	sp, #32
   11870:	460f      	mov	r7, r1
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   11872:	f44f 7241 	mov.w	r2, #772	; 0x304
   11876:	2100      	movs	r1, #0
   11878:	6880      	ldr	r0, [r0, #8]
{
   1187a:	461e      	mov	r6, r3
	memset(shell->ctx, 0, sizeof(*shell->ctx));
   1187c:	f009 fd3e 	bl	1b2fc <memset>
	shell->ctx->prompt = shell->default_prompt;
   11880:	68a3      	ldr	r3, [r4, #8]
   11882:	6822      	ldr	r2, [r4, #0]
	shell_history_init(shell->history);
   11884:	68e0      	ldr	r0, [r4, #12]
	shell->ctx->prompt = shell->default_prompt;
   11886:	601a      	str	r2, [r3, #0]
	shell_history_init(shell->history);
   11888:	f009 f9a6 	bl	1abd8 <shell_history_init>
	k_mutex_init(&shell->ctx->wr_mtx);
   1188c:	68a0      	ldr	r0, [r4, #8]
   1188e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
	return z_impl_k_mutex_init(mutex);
   11892:	f009 ff31 	bl	1b6f8 <z_impl_k_mutex_init>
   11896:	f44f 7827 	mov.w	r8, #668	; 0x29c
   1189a:	f44f 7517 	mov.w	r5, #604	; 0x25c
		k_poll_signal_init(&shell->ctx->signals[i]);
   1189e:	68a0      	ldr	r0, [r4, #8]
   118a0:	4428      	add	r0, r5
		arch_syscall_invoke1(*(uintptr_t *)&signal, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(signal);
   118a2:	f00a faa0 	bl	1bde6 <z_impl_k_poll_signal_init>
		k_poll_event_init(&shell->ctx->events[i],
   118a6:	68a0      	ldr	r0, [r4, #8]
   118a8:	2200      	movs	r2, #0
   118aa:	1943      	adds	r3, r0, r5
   118ac:	2101      	movs	r1, #1
   118ae:	4440      	add	r0, r8
   118b0:	3510      	adds	r5, #16
   118b2:	f00a fa7b 	bl	1bdac <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   118b6:	f5b5 7f27 	cmp.w	r5, #668	; 0x29c
   118ba:	f108 0814 	add.w	r8, r8, #20
   118be:	d1ee      	bne.n	1189e <shell_init+0x36>
		shell->stats->log_lost_cnt = 0;
   118c0:	2200      	movs	r2, #0
   118c2:	69a3      	ldr	r3, [r4, #24]
   118c4:	601a      	str	r2, [r3, #0]
	flag_tx_rdy_set(shell, true);
   118c6:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   118c8:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   118cc:	6810      	ldr	r0, [r2, #0]
   118ce:	f043 0310 	orr.w	r3, r3, #16
   118d2:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   118d6:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   118da:	f043 0304 	orr.w	r3, r3, #4
   118de:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   118e2:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   118e6:	f043 0320 	orr.w	r3, r3, #32
   118ea:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	shell->ctx->vt100_ctx.cons.terminal_hei =
   118ee:	4b1b      	ldr	r3, [pc, #108]	; (1195c <shell_init+0xf4>)
   118f0:	6293      	str	r3, [r2, #40]	; 0x28
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   118f2:	f008 fbd3 	bl	1a09c <shell_strlen>
   118f6:	68a3      	ldr	r3, [r4, #8]
	int ret = shell->iface->api->init(shell->iface, p_config,
   118f8:	4639      	mov	r1, r7
	shell->ctx->vt100_ctx.cons.name_len = shell_strlen(shell->ctx->prompt);
   118fa:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	flag_use_colors_set(shell, IS_ENABLED(CONFIG_SHELL_VT100_COLORS));
   118fe:	68a2      	ldr	r2, [r4, #8]
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   11900:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   11904:	f043 0302 	orr.w	r3, r3, #2
   11908:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
	int ret = shell->iface->api->init(shell->iface, p_config,
   1190c:	6860      	ldr	r0, [r4, #4]
   1190e:	4a14      	ldr	r2, [pc, #80]	; (11960 <shell_init+0xf8>)
   11910:	6803      	ldr	r3, [r0, #0]
   11912:	681d      	ldr	r5, [r3, #0]
   11914:	4623      	mov	r3, r4
   11916:	47a8      	blx	r5
	if (ret == 0) {
   11918:	4605      	mov	r5, r0
   1191a:	b9d0      	cbnz	r0, 11952 <shell_init+0xea>
	shell->ctx->state = state;
   1191c:	2201      	movs	r2, #1
   1191e:	68a3      	ldr	r3, [r4, #8]
   11920:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   11922:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11926:	2200      	movs	r2, #0
   11928:	2300      	movs	r3, #0
   1192a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1192e:	230e      	movs	r3, #14
   11930:	9303      	str	r3, [sp, #12]
   11932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11934:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   11938:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1193c:	9504      	str	r5, [sp, #16]
   1193e:	4b09      	ldr	r3, [pc, #36]	; (11964 <shell_init+0xfc>)
   11940:	9400      	str	r4, [sp, #0]
   11942:	f003 ff21 	bl	15788 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   11946:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   11948:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   1194a:	f8c3 0300 	str.w	r0, [r3, #768]	; 0x300
	return z_impl_k_thread_name_set(thread_id, value);
   1194e:	f003 fe71 	bl	15634 <z_impl_k_thread_name_set>
}
   11952:	4628      	mov	r0, r5
   11954:	b008      	add	sp, #32
   11956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1195a:	bf00      	nop
   1195c:	00500018 	.word	0x00500018
   11960:	0001a0c3 	.word	0x0001a0c3
   11964:	000119b9 	.word	0x000119b9

00011968 <shell_start>:
{
   11968:	b510      	push	{r4, lr}
   1196a:	4604      	mov	r4, r0
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   1196c:	6880      	ldr	r0, [r0, #8]
   1196e:	7903      	ldrb	r3, [r0, #4]
   11970:	2b01      	cmp	r3, #1
   11972:	d11c      	bne.n	119ae <shell_start+0x46>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   11974:	f04f 32ff 	mov.w	r2, #4294967295
   11978:	f04f 33ff 	mov.w	r3, #4294967295
   1197c:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   11980:	f008 fba9 	bl	1a0d6 <k_mutex_lock.constprop.0>
		shell_vt100_color_set(shell, SHELL_NORMAL);
   11984:	2100      	movs	r1, #0
   11986:	4620      	mov	r0, r4
   11988:	f000 f922 	bl	11bd0 <shell_vt100_color_set>
	shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   1198c:	4909      	ldr	r1, [pc, #36]	; (119b4 <shell_start+0x4c>)
   1198e:	6960      	ldr	r0, [r4, #20]
   11990:	f008 fb8a 	bl	1a0a8 <shell_raw_fprintf>
	shell->ctx->state = state;
   11994:	2202      	movs	r2, #2
   11996:	68a3      	ldr	r3, [r4, #8]
   11998:	4620      	mov	r0, r4
   1199a:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE) {
   1199c:	f7ff f9de 	bl	10d5c <state_set.part.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   119a0:	68a0      	ldr	r0, [r4, #8]
   119a2:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   119a6:	f008 fb77 	bl	1a098 <k_mutex_unlock>
	return 0;
   119aa:	2000      	movs	r0, #0
}
   119ac:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   119ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
   119b2:	e7fb      	b.n	119ac <shell_start+0x44>
   119b4:	0001e914 	.word	0x0001e914

000119b8 <shell_thread>:
{
   119b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119bc:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   119be:	6840      	ldr	r0, [r0, #4]
{
   119c0:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   119c2:	6803      	ldr	r3, [r0, #0]
   119c4:	2100      	movs	r1, #0
   119c6:	689b      	ldr	r3, [r3, #8]
{
   119c8:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   119ca:	4798      	blx	r3
	if (err != 0) {
   119cc:	2800      	cmp	r0, #0
   119ce:	d14c      	bne.n	11a6a <shell_thread+0xb2>
	if (log_backend && IS_ENABLED(CONFIG_SHELL_LOG_BACKEND)) {
   119d0:	b126      	cbz	r6, 119dc <shell_thread+0x24>
		shell_log_backend_enable(shell->log_backend, (void *)shell,
   119d2:	462a      	mov	r2, r5
   119d4:	4621      	mov	r1, r4
   119d6:	69e0      	ldr	r0, [r4, #28]
   119d8:	f009 f9b7 	bl	1ad4a <shell_log_backend_enable>
	err = shell_start(shell);
   119dc:	4620      	mov	r0, r4
   119de:	f7ff ffc3 	bl	11968 <shell_start>
	if (err != 0) {
   119e2:	2800      	cmp	r0, #0
   119e4:	d141      	bne.n	11a6a <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   119e6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 11a7c <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   119ea:	4f21      	ldr	r7, [pc, #132]	; (11a70 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   119ec:	4e21      	ldr	r6, [pc, #132]	; (11a74 <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   119ee:	68a0      	ldr	r0, [r4, #8]
   119f0:	f500 7027 	add.w	r0, r0, #668	; 0x29c
	return z_impl_k_poll(events, num_events, timeout);
   119f4:	f04f 32ff 	mov.w	r2, #4294967295
   119f8:	f04f 33ff 	mov.w	r3, #4294967295
   119fc:	2103      	movs	r1, #3
   119fe:	f004 f969 	bl	15cd4 <z_impl_k_poll>
		if (err != 0) {
   11a02:	4605      	mov	r5, r0
   11a04:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   11a06:	f04f 32ff 	mov.w	r2, #4294967295
   11a0a:	f04f 33ff 	mov.w	r3, #4294967295
   11a0e:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
		if (err != 0) {
   11a12:	b175      	cbz	r5, 11a32 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   11a14:	f008 fb5f 	bl	1a0d6 <k_mutex_lock.constprop.0>
			shell_internal_fprintf(shell, SHELL_ERROR,
   11a18:	4620      	mov	r0, r4
   11a1a:	462b      	mov	r3, r5
   11a1c:	2102      	movs	r1, #2
   11a1e:	4a16      	ldr	r2, [pc, #88]	; (11a78 <shell_thread+0xc0>)
   11a20:	f008 ff0d 	bl	1a83e <shell_internal_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   11a24:	68a0      	ldr	r0, [r4, #8]
}
   11a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   11a2a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   11a2e:	f008 bb33 	b.w	1a098 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   11a32:	f008 fb50 	bl	1a0d6 <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   11a36:	6860      	ldr	r0, [r4, #4]
   11a38:	6803      	ldr	r3, [r0, #0]
   11a3a:	695b      	ldr	r3, [r3, #20]
   11a3c:	b103      	cbz	r3, 11a40 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   11a3e:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   11a40:	4642      	mov	r2, r8
   11a42:	4620      	mov	r0, r4
   11a44:	2102      	movs	r1, #2
   11a46:	f008 faf7 	bl	1a038 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   11a4a:	463a      	mov	r2, r7
   11a4c:	4620      	mov	r0, r4
   11a4e:	2100      	movs	r1, #0
   11a50:	f008 faf2 	bl	1a038 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   11a54:	4620      	mov	r0, r4
   11a56:	4632      	mov	r2, r6
   11a58:	2101      	movs	r1, #1
   11a5a:	f008 faed 	bl	1a038 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   11a5e:	68a0      	ldr	r0, [r4, #8]
   11a60:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   11a64:	f008 fb18 	bl	1a098 <k_mutex_unlock>
   11a68:	e7c1      	b.n	119ee <shell_thread+0x36>
}
   11a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a6e:	bf00      	nop
   11a70:	000111ad 	.word	0x000111ad
   11a74:	0001a0db 	.word	0x0001a0db
   11a78:	0001eccf 	.word	0x0001eccf
   11a7c:	0001a063 	.word	0x0001a063

00011a80 <shell_fprintf_fmt>:
	return 0;
}

void shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
		       const char *fmt, va_list args)
{
   11a80:	b510      	push	{r4, lr}
   11a82:	4604      	mov	r4, r0
   11a84:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   11a86:	460a      	mov	r2, r1
   11a88:	4601      	mov	r1, r0
   11a8a:	4806      	ldr	r0, [pc, #24]	; (11aa4 <shell_fprintf_fmt+0x24>)
   11a8c:	f7fd fd22 	bl	f4d4 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   11a90:	6923      	ldr	r3, [r4, #16]
   11a92:	791b      	ldrb	r3, [r3, #4]
   11a94:	b123      	cbz	r3, 11aa0 <shell_fprintf_fmt+0x20>
		shell_fprintf_buffer_flush(sh_fprintf);
   11a96:	4620      	mov	r0, r4
	}
}
   11a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_fprintf_buffer_flush(sh_fprintf);
   11a9c:	f008 bb9b 	b.w	1a1d6 <shell_fprintf_buffer_flush>
}
   11aa0:	bd10      	pop	{r4, pc}
   11aa2:	bf00      	nop
   11aa4:	0001a1ef 	.word	0x0001a1ef

00011aa8 <shell_cmd_get>:

const struct shell_static_entry *shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   11aa8:	b510      	push	{r4, lr}
   11aaa:	460b      	mov	r3, r1
   11aac:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   11aae:	b950      	cbnz	r0, 11ac6 <shell_cmd_get+0x1e>
	return ((uint8_t *)__shell_root_cmds_end -
   11ab0:	490e      	ldr	r1, [pc, #56]	; (11aec <shell_cmd_get+0x44>)
   11ab2:	4a0f      	ldr	r2, [pc, #60]	; (11af0 <shell_cmd_get+0x48>)
   11ab4:	1a52      	subs	r2, r2, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   11ab6:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   11aba:	d20f      	bcs.n	11adc <shell_cmd_get+0x34>
   11abc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   11ac0:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   11ac2:	4620      	mov	r0, r4
   11ac4:	bd10      	pop	{r4, pc}
	if (parent->subcmd) {
   11ac6:	6881      	ldr	r1, [r0, #8]
   11ac8:	b141      	cbz	r1, 11adc <shell_cmd_get+0x34>
		if (parent->subcmd->is_dynamic) {
   11aca:	684a      	ldr	r2, [r1, #4]
   11acc:	7809      	ldrb	r1, [r1, #0]
   11ace:	b139      	cbz	r1, 11ae0 <shell_cmd_get+0x38>
			parent->subcmd->u.dynamic_get(idx, dloc);
   11ad0:	4618      	mov	r0, r3
   11ad2:	4621      	mov	r1, r4
   11ad4:	4790      	blx	r2
			if (dloc->syntax != NULL) {
   11ad6:	6823      	ldr	r3, [r4, #0]
   11ad8:	2b00      	cmp	r3, #0
   11ada:	d1f2      	bne.n	11ac2 <shell_cmd_get+0x1a>
	const struct shell_static_entry *res = NULL;
   11adc:	2400      	movs	r4, #0
   11ade:	e7f0      	b.n	11ac2 <shell_cmd_get+0x1a>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   11ae0:	2014      	movs	r0, #20
   11ae2:	4343      	muls	r3, r0
   11ae4:	18d4      	adds	r4, r2, r3
   11ae6:	58d3      	ldr	r3, [r2, r3]
   11ae8:	e7f6      	b.n	11ad8 <shell_cmd_get+0x30>
   11aea:	bf00      	nop
   11aec:	0001c20c 	.word	0x0001c20c
   11af0:	0001c294 	.word	0x0001c294

00011af4 <clear_eos.isra.0>:
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEAREOS);
   11af4:	4a01      	ldr	r2, [pc, #4]	; (11afc <clear_eos.isra.0+0x8>)
   11af6:	4902      	ldr	r1, [pc, #8]	; (11b00 <clear_eos.isra.0+0xc>)
   11af8:	f008 bd6d 	b.w	1a5d6 <shell_raw_fprintf>
   11afc:	0001ecfa 	.word	0x0001ecfa
   11b00:	0001ea3f 	.word	0x0001ea3f

00011b04 <shell_op_cursor_vert_move>:
#include <ctype.h>
#include "shell_ops.h"

void shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   11b04:	b159      	cbz	r1, 11b1e <shell_op_cursor_vert_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   11b06:	2900      	cmp	r1, #0
   11b08:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   11b0c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   11b10:	bfcc      	ite	gt
   11b12:	2341      	movgt	r3, #65	; 0x41
   11b14:	2342      	movle	r3, #66	; 0x42
   11b16:	4902      	ldr	r1, [pc, #8]	; (11b20 <shell_op_cursor_vert_move+0x1c>)
   11b18:	6940      	ldr	r0, [r0, #20]
   11b1a:	f008 bd5c 	b.w	1a5d6 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'A' : 'B');
	}
}
   11b1e:	4770      	bx	lr
   11b20:	0001ecf3 	.word	0x0001ecf3

00011b24 <shell_op_cursor_horiz_move>:

void shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	if (delta != 0) {
   11b24:	b159      	cbz	r1, 11b3e <shell_op_cursor_horiz_move+0x1a>
		shell_raw_fprintf(shell->fprintf_ctx, "\033[%d%c",
   11b26:	2900      	cmp	r1, #0
   11b28:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
   11b2c:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
   11b30:	bfcc      	ite	gt
   11b32:	2343      	movgt	r3, #67	; 0x43
   11b34:	2344      	movle	r3, #68	; 0x44
   11b36:	4902      	ldr	r1, [pc, #8]	; (11b40 <shell_op_cursor_horiz_move+0x1c>)
   11b38:	6940      	ldr	r0, [r0, #20]
   11b3a:	f008 bd4c 	b.w	1a5d6 <shell_raw_fprintf>
				  delta > 0 ? delta : -delta,
				  delta > 0 ? 'C' : 'D');
	}
}
   11b3e:	4770      	bx	lr
   11b40:	0001ecf3 	.word	0x0001ecf3

00011b44 <shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void shell_op_cond_next_line(const struct shell *shell)
{
   11b44:	b510      	push	{r4, lr}
   11b46:	4604      	mov	r4, r0
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   11b48:	f008 fd66 	bl	1a618 <shell_cursor_in_empty_line>
   11b4c:	b128      	cbz	r0, 11b5a <shell_op_cond_next_line+0x16>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11b4e:	6960      	ldr	r0, [r4, #20]
   11b50:	4905      	ldr	r1, [pc, #20]	; (11b68 <shell_op_cond_next_line+0x24>)
		cursor_next_line_move(shell);
	}
}
   11b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11b56:	f008 bd3e 	b.w	1a5d6 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   11b5a:	f104 0008 	add.w	r0, r4, #8
   11b5e:	f008 fd47 	bl	1a5f0 <full_line_cmd.isra.0>
   11b62:	2800      	cmp	r0, #0
   11b64:	d1f3      	bne.n	11b4e <shell_op_cond_next_line+0xa>
}
   11b66:	bd10      	pop	{r4, pc}
   11b68:	0001e915 	.word	0x0001e915

00011b6c <shell_op_cursor_position_synchronize>:

void shell_op_cursor_position_synchronize(const struct shell *shell)
{
   11b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   11b70:	4606      	mov	r6, r0
   11b72:	f856 4f08 	ldr.w	r4, [r6, #8]!
{
   11b76:	4605      	mov	r5, r0
	bool last_line;

	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   11b78:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   11b7a:	f104 0020 	add.w	r0, r4, #32
   11b7e:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
   11b80:	f008 fb7b 	bl	1a27a <shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   11b84:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   11b86:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   11b8a:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   11b8c:	f008 fd30 	bl	1a5f0 <full_line_cmd.isra.0>
   11b90:	b118      	cbz	r0, 11b9a <shell_op_cursor_position_synchronize+0x2e>
   11b92:	490a      	ldr	r1, [pc, #40]	; (11bbc <shell_op_cursor_position_synchronize+0x50>)
   11b94:	6968      	ldr	r0, [r5, #20]
   11b96:	f008 fd1e 	bl	1a5d6 <shell_raw_fprintf>
		cursor_next_line_move(shell);
	}

	if (last_line) {
   11b9a:	45b8      	cmp	r8, r7
   11b9c:	d107      	bne.n	11bae <shell_op_cursor_position_synchronize+0x42>
		shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   11b9e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   11ba0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   11ba2:	4628      	mov	r0, r5
	}
}
   11ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		shell_op_cursor_horiz_move(shell, cons->cur_x -
   11ba8:	1ac9      	subs	r1, r1, r3
   11baa:	f7ff bfbb 	b.w	11b24 <shell_op_cursor_horiz_move>
		shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   11bae:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   11bb0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11bb2:	4628      	mov	r0, r5
   11bb4:	1ac9      	subs	r1, r1, r3
   11bb6:	f7ff ffa5 	bl	11b04 <shell_op_cursor_vert_move>
   11bba:	e7f0      	b.n	11b9e <shell_op_cursor_position_synchronize+0x32>
   11bbc:	0001e915 	.word	0x0001e915

00011bc0 <shell_print_cmd>:
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void shell_print_cmd(const struct shell *shell)
{
	shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   11bc0:	6882      	ldr	r2, [r0, #8]
   11bc2:	4902      	ldr	r1, [pc, #8]	; (11bcc <shell_print_cmd+0xc>)
   11bc4:	6940      	ldr	r0, [r0, #20]
   11bc6:	3238      	adds	r2, #56	; 0x38
   11bc8:	f008 bd05 	b.w	1a5d6 <shell_raw_fprintf>
   11bcc:	0001ea3f 	.word	0x0001ea3f

00011bd0 <shell_vt100_color_set>:

}

void shell_vt100_color_set(const struct shell *shell,
			   enum shell_vt100_color color)
{
   11bd0:	b507      	push	{r0, r1, r2, lr}

	if (shell->ctx->vt100_ctx.col.col == color) {
   11bd2:	6883      	ldr	r3, [r0, #8]
   11bd4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   11bd8:	428a      	cmp	r2, r1
   11bda:	d012      	beq.n	11c02 <shell_vt100_color_set+0x32>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   11bdc:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   11be0:	6940      	ldr	r0, [r0, #20]
   11be2:	b189      	cbz	r1, 11c08 <shell_vt100_color_set+0x38>

		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   11be4:	4b09      	ldr	r3, [pc, #36]	; (11c0c <shell_vt100_color_set+0x3c>)

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   11be6:	466a      	mov	r2, sp
		uint8_t cmd[] = SHELL_VT100_COLOR(color - 1);
   11be8:	9300      	str	r3, [sp, #0]
   11bea:	2333      	movs	r3, #51	; 0x33
   11bec:	f88d 3004 	strb.w	r3, [sp, #4]
   11bf0:	236d      	movs	r3, #109	; 0x6d
   11bf2:	312f      	adds	r1, #47	; 0x2f
   11bf4:	f88d 1005 	strb.w	r1, [sp, #5]
   11bf8:	f8ad 3006 	strh.w	r3, [sp, #6]
	} else {
		static const uint8_t cmd[] = SHELL_VT100_MODESOFF;

		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   11bfc:	4904      	ldr	r1, [pc, #16]	; (11c10 <shell_vt100_color_set+0x40>)
   11bfe:	f008 fcea 	bl	1a5d6 <shell_raw_fprintf>
	}
}
   11c02:	b003      	add	sp, #12
   11c04:	f85d fb04 	ldr.w	pc, [sp], #4
		shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   11c08:	4a02      	ldr	r2, [pc, #8]	; (11c14 <shell_vt100_color_set+0x44>)
   11c0a:	e7f7      	b.n	11bfc <shell_vt100_color_set+0x2c>
   11c0c:	3b315b1b 	.word	0x3b315b1b
   11c10:	0001ea3f 	.word	0x0001ea3f
   11c14:	0001ed04 	.word	0x0001ed04

00011c18 <shell_vt100_colors_restore>:

void shell_vt100_colors_restore(const struct shell *shell,
				       const struct shell_vt100_colors *color)
{
   11c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11c1a:	460d      	mov	r5, r1
	shell_vt100_color_set(shell, color->col);
   11c1c:	7809      	ldrb	r1, [r1, #0]
{
   11c1e:	4604      	mov	r4, r0
	shell_vt100_color_set(shell, color->col);
   11c20:	f7ff ffd6 	bl	11bd0 <shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   11c24:	786b      	ldrb	r3, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   11c26:	b1cb      	cbz	r3, 11c5c <shell_vt100_colors_restore+0x44>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   11c28:	68a2      	ldr	r2, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   11c2a:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
   11c2e:	4299      	cmp	r1, r3
   11c30:	d014      	beq.n	11c5c <shell_vt100_colors_restore+0x44>
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   11c32:	f645 311b 	movw	r1, #23323	; 0x5b1b
   11c36:	f8ad 1000 	strh.w	r1, [sp]
   11c3a:	2134      	movs	r1, #52	; 0x34
   11c3c:	f88d 1002 	strb.w	r1, [sp, #2]
   11c40:	f103 012f 	add.w	r1, r3, #47	; 0x2f
   11c44:	f88d 1003 	strb.w	r1, [sp, #3]
   11c48:	216d      	movs	r1, #109	; 0x6d
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   11c4a:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
	uint8_t cmd[] = SHELL_VT100_BGCOLOR(bgcolor - 1);
   11c4e:	f8ad 1004 	strh.w	r1, [sp, #4]
	shell_raw_fprintf(shell->fprintf_ctx, "%s", cmd);
   11c52:	466a      	mov	r2, sp
   11c54:	4902      	ldr	r1, [pc, #8]	; (11c60 <shell_vt100_colors_restore+0x48>)
   11c56:	6960      	ldr	r0, [r4, #20]
   11c58:	f008 fcbd 	bl	1a5d6 <shell_raw_fprintf>
}
   11c5c:	b003      	add	sp, #12
   11c5e:	bd30      	pop	{r4, r5, pc}
   11c60:	0001ea3f 	.word	0x0001ea3f

00011c64 <shell_op_word_remove>:
{
   11c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   11c66:	6883      	ldr	r3, [r0, #8]
{
   11c68:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   11c6a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   11c6c:	2a00      	cmp	r2, #0
   11c6e:	d046      	beq.n	11cfe <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   11c70:	8e98      	ldrh	r0, [r3, #52]	; 0x34
	if ((shell->ctx->cmd_buff_len == 0) ||
   11c72:	2800      	cmp	r0, #0
   11c74:	d043      	beq.n	11cfe <shell_op_word_remove+0x9a>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   11c76:	3037      	adds	r0, #55	; 0x37
   11c78:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   11c7a:	f103 0638 	add.w	r6, r3, #56	; 0x38
   11c7e:	4603      	mov	r3, r0
   11c80:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   11c82:	42b3      	cmp	r3, r6
   11c84:	4619      	mov	r1, r3
   11c86:	b2a4      	uxth	r4, r4
   11c88:	d30d      	bcc.n	11ca6 <shell_op_word_remove+0x42>
   11c8a:	f811 7901 	ldrb.w	r7, [r1], #-1
   11c8e:	2f20      	cmp	r7, #32
   11c90:	d033      	beq.n	11cfa <shell_op_word_remove+0x96>
   11c92:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   11c94:	7808      	ldrb	r0, [r1, #0]
   11c96:	3b01      	subs	r3, #1
   11c98:	2820      	cmp	r0, #32
   11c9a:	d004      	beq.n	11ca6 <shell_op_word_remove+0x42>
		++chars_to_delete;
   11c9c:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   11c9e:	429e      	cmp	r6, r3
		--str;
   11ca0:	4619      	mov	r1, r3
		++chars_to_delete;
   11ca2:	b2a4      	uxth	r4, r4
	while ((str >= str_start) && (*str != ' ')) {
   11ca4:	d9f5      	bls.n	11c92 <shell_op_word_remove+0x2e>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   11ca6:	2700      	movs	r7, #0
	memmove(str + 1, str + 1 + chars_to_delete,
   11ca8:	1c63      	adds	r3, r4, #1
   11caa:	1c4e      	adds	r6, r1, #1
   11cac:	1b12      	subs	r2, r2, r4
   11cae:	4419      	add	r1, r3
   11cb0:	4630      	mov	r0, r6
   11cb2:	f009 fae1 	bl	1b278 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   11cb6:	68a9      	ldr	r1, [r5, #8]
	shell_op_cursor_move(shell, -chars_to_delete);
   11cb8:	4628      	mov	r0, r5
	shell->ctx->cmd_buff_len -= chars_to_delete;
   11cba:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
   11cbc:	1b12      	subs	r2, r2, r4
   11cbe:	b292      	uxth	r2, r2
   11cc0:	864a      	strh	r2, [r1, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   11cc2:	440a      	add	r2, r1
	shell_op_cursor_move(shell, -chars_to_delete);
   11cc4:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   11cc6:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
	shell_op_cursor_move(shell, -chars_to_delete);
   11cca:	b209      	sxth	r1, r1
   11ccc:	f008 fcb8 	bl	1a640 <shell_op_cursor_move>
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   11cd0:	6968      	ldr	r0, [r5, #20]
   11cd2:	4a0b      	ldr	r2, [pc, #44]	; (11d00 <shell_op_word_remove+0x9c>)
   11cd4:	490b      	ldr	r1, [pc, #44]	; (11d04 <shell_op_word_remove+0xa0>)
   11cd6:	f008 fc7e 	bl	1a5d6 <shell_raw_fprintf>
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   11cda:	4639      	mov	r1, r7
   11cdc:	4633      	mov	r3, r6
   11cde:	4628      	mov	r0, r5
   11ce0:	4a08      	ldr	r2, [pc, #32]	; (11d04 <shell_op_word_remove+0xa0>)
   11ce2:	f008 fdac 	bl	1a83e <shell_internal_fprintf>
	clear_eos(shell);
   11ce6:	6968      	ldr	r0, [r5, #20]
   11ce8:	f7ff ff04 	bl	11af4 <clear_eos.isra.0>
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   11cec:	6968      	ldr	r0, [r5, #20]
   11cee:	4a06      	ldr	r2, [pc, #24]	; (11d08 <shell_op_word_remove+0xa4>)
   11cf0:	4904      	ldr	r1, [pc, #16]	; (11d04 <shell_op_word_remove+0xa0>)
}
   11cf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   11cf6:	f008 bc6e 	b.w	1a5d6 <shell_raw_fprintf>
   11cfa:	460b      	mov	r3, r1
   11cfc:	e7c0      	b.n	11c80 <shell_op_word_remove+0x1c>
   11cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d00:	0001ecfe 	.word	0x0001ecfe
   11d04:	0001ea3f 	.word	0x0001ea3f
   11d08:	0001ed01 	.word	0x0001ed01

00011d0c <reprint_from_cursor>:
{
   11d0c:	b570      	push	{r4, r5, r6, lr}
   11d0e:	4604      	mov	r4, r0
   11d10:	460d      	mov	r5, r1
	if (data_removed) {
   11d12:	4616      	mov	r6, r2
   11d14:	b112      	cbz	r2, 11d1c <reprint_from_cursor+0x10>
		clear_eos(shell);
   11d16:	6940      	ldr	r0, [r0, #20]
   11d18:	f7ff feec 	bl	11af4 <clear_eos.isra.0>
		      &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   11d1c:	68a2      	ldr	r2, [r4, #8]
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s",
   11d1e:	4620      	mov	r0, r4
   11d20:	8e93      	ldrh	r3, [r2, #52]	; 0x34
   11d22:	2100      	movs	r1, #0
   11d24:	3338      	adds	r3, #56	; 0x38
   11d26:	4413      	add	r3, r2
   11d28:	4a0b      	ldr	r2, [pc, #44]	; (11d58 <reprint_from_cursor+0x4c>)
   11d2a:	f008 fd88 	bl	1a83e <shell_internal_fprintf>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   11d2e:	4620      	mov	r0, r4
   11d30:	f850 3f08 	ldr.w	r3, [r0, #8]!
   11d34:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   11d36:	869a      	strh	r2, [r3, #52]	; 0x34
	if (full_line_cmd(shell)) {
   11d38:	f008 fc5a 	bl	1a5f0 <full_line_cmd.isra.0>
   11d3c:	b128      	cbz	r0, 11d4a <reprint_from_cursor+0x3e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   11d3e:	b106      	cbz	r6, 11d42 <reprint_from_cursor+0x36>
   11d40:	b11d      	cbz	r5, 11d4a <reprint_from_cursor+0x3e>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11d42:	4906      	ldr	r1, [pc, #24]	; (11d5c <reprint_from_cursor+0x50>)
   11d44:	6960      	ldr	r0, [r4, #20]
   11d46:	f008 fc46 	bl	1a5d6 <shell_raw_fprintf>
	shell_op_cursor_move(shell, -diff);
   11d4a:	4269      	negs	r1, r5
   11d4c:	4620      	mov	r0, r4
}
   11d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	shell_op_cursor_move(shell, -diff);
   11d52:	b209      	sxth	r1, r1
   11d54:	f008 bc74 	b.w	1a640 <shell_op_cursor_move>
   11d58:	0001ea3f 	.word	0x0001ea3f
   11d5c:	0001e915 	.word	0x0001e915

00011d60 <shell_op_char_insert>:
{
   11d60:	b513      	push	{r0, r1, r4, lr}
	if (shell->ctx->internal.flags.insert_mode &&
   11d62:	6883      	ldr	r3, [r0, #8]
{
   11d64:	f88d 1007 	strb.w	r1, [sp, #7]
	if (shell->ctx->internal.flags.insert_mode &&
   11d68:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
{
   11d6c:	4604      	mov	r4, r0
	if (shell->ctx->internal.flags.insert_mode &&
   11d6e:	07d2      	lsls	r2, r2, #31
   11d70:	d51d      	bpl.n	11dae <shell_op_char_insert+0x4e>
		(shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   11d72:	8e99      	ldrh	r1, [r3, #52]	; 0x34
	if (shell->ctx->internal.flags.insert_mode &&
   11d74:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   11d76:	428a      	cmp	r2, r1
   11d78:	d019      	beq.n	11dae <shell_op_char_insert+0x4e>
		char_replace(shell, data);
   11d7a:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   11d7e:	1c48      	adds	r0, r1, #1
   11d80:	8698      	strh	r0, [r3, #52]	; 0x34
   11d82:	440b      	add	r3, r1
   11d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   11d88:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   11d8a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   11d8e:	075b      	lsls	r3, r3, #29
   11d90:	d50b      	bpl.n	11daa <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   11d92:	6960      	ldr	r0, [r4, #20]
   11d94:	4909      	ldr	r1, [pc, #36]	; (11dbc <shell_op_char_insert+0x5c>)
   11d96:	f008 fc1e 	bl	1a5d6 <shell_raw_fprintf>
	if (shell_cursor_in_empty_line(shell)) {
   11d9a:	4620      	mov	r0, r4
   11d9c:	f008 fc3c 	bl	1a618 <shell_cursor_in_empty_line>
   11da0:	b118      	cbz	r0, 11daa <shell_op_char_insert+0x4a>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11da2:	4907      	ldr	r1, [pc, #28]	; (11dc0 <shell_op_char_insert+0x60>)
   11da4:	6960      	ldr	r0, [r4, #20]
   11da6:	f008 fc16 	bl	1a5d6 <shell_raw_fprintf>
}
   11daa:	b002      	add	sp, #8
   11dac:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   11dae:	2201      	movs	r2, #1
   11db0:	4620      	mov	r0, r4
   11db2:	f10d 0107 	add.w	r1, sp, #7
   11db6:	f008 fd4f 	bl	1a858 <data_insert>
}
   11dba:	e7f6      	b.n	11daa <shell_op_char_insert+0x4a>
   11dbc:	0001ecf7 	.word	0x0001ecf7
   11dc0:	0001e915 	.word	0x0001e915

00011dc4 <shell_print_prompt_and_cmd>:
{
   11dc4:	b510      	push	{r4, lr}
   11dc6:	4604      	mov	r4, r0
	shell_internal_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   11dc8:	6883      	ldr	r3, [r0, #8]
   11dca:	2103      	movs	r1, #3
   11dcc:	681b      	ldr	r3, [r3, #0]
   11dce:	4a08      	ldr	r2, [pc, #32]	; (11df0 <shell_print_prompt_and_cmd+0x2c>)
   11dd0:	f008 fd35 	bl	1a83e <shell_internal_fprintf>
	if (flag_echo_get(shell)) {
   11dd4:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.echo == 1;
   11dd6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   11dda:	075b      	lsls	r3, r3, #29
   11ddc:	d507      	bpl.n	11dee <shell_print_prompt_and_cmd+0x2a>
		shell_print_cmd(shell);
   11dde:	4620      	mov	r0, r4
   11de0:	f7ff feee 	bl	11bc0 <shell_print_cmd>
		shell_op_cursor_position_synchronize(shell);
   11de4:	4620      	mov	r0, r4
}
   11de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_op_cursor_position_synchronize(shell);
   11dea:	f7ff bebf 	b.w	11b6c <shell_op_cursor_position_synchronize>
}
   11dee:	bd10      	pop	{r4, pc}
   11df0:	0001ea3f 	.word	0x0001ea3f

00011df4 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
   11df4:	b538      	push	{r3, r4, r5, lr}
   11df6:	460c      	mov	r4, r1
   11df8:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   11dfa:	6842      	ldr	r2, [r0, #4]

	sh_uart->ctrl_blk->dev = (const struct device *)config;
   11dfc:	6811      	ldr	r1, [r2, #0]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
   11dfe:	608b      	str	r3, [r1, #8]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   11e00:	68a3      	ldr	r3, [r4, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   11e02:	e9c1 4500 	strd	r4, r5, [r1]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   11e06:	b123      	cbz	r3, 11e12 <init+0x1e>
   11e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   11e0a:	b113      	cbz	r3, 11e12 <init+0x1e>
		api->irq_callback_set(dev, cb, user_data);
   11e0c:	4620      	mov	r0, r4
   11e0e:	4904      	ldr	r1, [pc, #16]	; (11e20 <init+0x2c>)
   11e10:	4798      	blx	r3
	if (api->irq_rx_enable) {
   11e12:	68a3      	ldr	r3, [r4, #8]
   11e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11e16:	b10b      	cbz	r3, 11e1c <init+0x28>
		api->irq_rx_enable(dev);
   11e18:	4620      	mov	r0, r4
   11e1a:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
   11e1c:	2000      	movs	r0, #0
   11e1e:	bd38      	pop	{r3, r4, r5, pc}
   11e20:	00011e55 	.word	0x00011e55

00011e24 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   11e24:	b507      	push	{r0, r1, r2, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11e26:	4809      	ldr	r0, [pc, #36]	; (11e4c <enable_shell_uart+0x28>)
   11e28:	f002 fc44 	bl	146b4 <z_impl_device_get_binding>
	bool log_backend = CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > 0;
	uint32_t level =
		(CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL > LOG_LEVEL_DBG) ?
		CONFIG_LOG_MAX_LEVEL : CONFIG_SHELL_BACKEND_SERIAL_LOG_LEVEL;

	if (dev == NULL) {
   11e2c:	4601      	mov	r1, r0
   11e2e:	b150      	cbz	r0, 11e46 <enable_shell_uart+0x22>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, true, log_backend, level);
   11e30:	2304      	movs	r3, #4
   11e32:	9300      	str	r3, [sp, #0]
   11e34:	2301      	movs	r3, #1
   11e36:	4806      	ldr	r0, [pc, #24]	; (11e50 <enable_shell_uart+0x2c>)
   11e38:	461a      	mov	r2, r3
   11e3a:	f7ff fd15 	bl	11868 <shell_init>

	return 0;
   11e3e:	2000      	movs	r0, #0
}
   11e40:	b003      	add	sp, #12
   11e42:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   11e46:	f06f 0012 	mvn.w	r0, #18
   11e4a:	e7f9      	b.n	11e40 <enable_shell_uart+0x1c>
   11e4c:	0001ed08 	.word	0x0001ed08
   11e50:	0001c1dc 	.word	0x0001c1dc

00011e54 <uart_callback>:
{
   11e54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   11e58:	4682      	mov	sl, r0
   11e5a:	460d      	mov	r5, r1
	if (api->irq_update) {
   11e5c:	6883      	ldr	r3, [r0, #8]
   11e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11e60:	b103      	cbz	r3, 11e64 <uart_callback+0x10>
		return api->irq_update(dev);
   11e62:	4798      	blx	r3
	if (api->irq_rx_ready) {
   11e64:	f8da 3008 	ldr.w	r3, [sl, #8]
   11e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11e6a:	2b00      	cmp	r3, #0
   11e6c:	d031      	beq.n	11ed2 <uart_callback+0x7e>
		return api->irq_rx_ready(dev);
   11e6e:	4650      	mov	r0, sl
   11e70:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   11e72:	b370      	cbz	r0, 11ed2 <uart_callback+0x7e>
	bool new_data = false;
   11e74:	f04f 0800 	mov.w	r8, #0
   11e78:	4e35      	ldr	r6, [pc, #212]	; (11f50 <uart_callback+0xfc>)
   11e7a:	4b36      	ldr	r3, [pc, #216]	; (11f54 <uart_callback+0x100>)
			LOG_WRN("RX ring buffer full.");
   11e7c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 11f5c <uart_callback+0x108>
   11e80:	1af6      	subs	r6, r6, r3
   11e82:	08f6      	lsrs	r6, r6, #3
   11e84:	01b6      	lsls	r6, r6, #6
   11e86:	f046 0602 	orr.w	r6, r6, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   11e8a:	68e8      	ldr	r0, [r5, #12]
   11e8c:	a901      	add	r1, sp, #4
   11e8e:	6902      	ldr	r2, [r0, #16]
   11e90:	f007 fcdd 	bl	1984e <ring_buf_put_claim>
		if (len > 0) {
   11e94:	4607      	mov	r7, r0
   11e96:	2800      	cmp	r0, #0
   11e98:	d03d      	beq.n	11f16 <uart_callback+0xc2>
	if (api->fifo_read) {
   11e9a:	f8da 3008 	ldr.w	r3, [sl, #8]
   11e9e:	699c      	ldr	r4, [r3, #24]
   11ea0:	b124      	cbz	r4, 11eac <uart_callback+0x58>
		return api->fifo_read(dev, rx_data, size);
   11ea2:	4602      	mov	r2, r0
   11ea4:	9901      	ldr	r1, [sp, #4]
   11ea6:	4650      	mov	r0, sl
   11ea8:	47a0      	blx	r4
   11eaa:	4604      	mov	r4, r0
				new_data = true;
   11eac:	2c00      	cmp	r4, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   11eae:	4621      	mov	r1, r4
   11eb0:	68e8      	ldr	r0, [r5, #12]
				new_data = true;
   11eb2:	bf18      	it	ne
   11eb4:	f04f 0801 	movne.w	r8, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   11eb8:	f007 fce5 	bl	19886 <ring_buf_put_finish>
	} while (rd_len && (rd_len == len));
   11ebc:	b10c      	cbz	r4, 11ec2 <uart_callback+0x6e>
   11ebe:	42a7      	cmp	r7, r4
   11ec0:	d0e3      	beq.n	11e8a <uart_callback+0x36>
	if (new_data) {
   11ec2:	f1b8 0f00 	cmp.w	r8, #0
   11ec6:	d004      	beq.n	11ed2 <uart_callback+0x7e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   11ec8:	682b      	ldr	r3, [r5, #0]
   11eca:	2000      	movs	r0, #0
   11ecc:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   11ed0:	4790      	blx	r2
	if (api->irq_tx_ready) {
   11ed2:	f8da 3008 	ldr.w	r3, [sl, #8]
   11ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11ed8:	b1d3      	cbz	r3, 11f10 <uart_callback+0xbc>
		return api->irq_tx_ready(dev);
   11eda:	4650      	mov	r0, sl
   11edc:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   11ede:	b1b8      	cbz	r0, 11f10 <uart_callback+0xbc>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   11ee0:	68a8      	ldr	r0, [r5, #8]
   11ee2:	a901      	add	r1, sp, #4
   11ee4:	6902      	ldr	r2, [r0, #16]
   11ee6:	f007 fcfa 	bl	198de <ring_buf_get_claim>
	if (len) {
   11eea:	4604      	mov	r4, r0
   11eec:	b350      	cbz	r0, 11f44 <uart_callback+0xf0>
	if (api->fifo_fill) {
   11eee:	f8da 3008 	ldr.w	r3, [sl, #8]
   11ef2:	695b      	ldr	r3, [r3, #20]
   11ef4:	b323      	cbz	r3, 11f40 <uart_callback+0xec>
		return api->fifo_fill(dev, tx_data, size);
   11ef6:	4602      	mov	r2, r0
   11ef8:	9901      	ldr	r1, [sp, #4]
   11efa:	4650      	mov	r0, sl
   11efc:	4798      	blx	r3
   11efe:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   11f00:	68a8      	ldr	r0, [r5, #8]
   11f02:	f007 fd08 	bl	19916 <ring_buf_get_finish>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   11f06:	682b      	ldr	r3, [r5, #0]
   11f08:	2001      	movs	r0, #1
   11f0a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   11f0e:	4790      	blx	r2
}
   11f10:	b002      	add	sp, #8
   11f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			LOG_WRN("RX ring buffer full.");
   11f16:	f8d9 3000 	ldr.w	r3, [r9]
   11f1a:	f013 0f06 	tst.w	r3, #6
   11f1e:	d003      	beq.n	11f28 <uart_callback+0xd4>
   11f20:	4631      	mov	r1, r6
   11f22:	480d      	ldr	r0, [pc, #52]	; (11f58 <uart_callback+0x104>)
   11f24:	f007 fd90 	bl	19a48 <log_0>
	if (api->fifo_read) {
   11f28:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f2c:	699c      	ldr	r4, [r3, #24]
   11f2e:	2c00      	cmp	r4, #0
   11f30:	d0c7      	beq.n	11ec2 <uart_callback+0x6e>
		return api->fifo_read(dev, rx_data, size);
   11f32:	2201      	movs	r2, #1
   11f34:	4650      	mov	r0, sl
   11f36:	f10d 0103 	add.w	r1, sp, #3
   11f3a:	47a0      	blx	r4
   11f3c:	4604      	mov	r4, r0
   11f3e:	e7bd      	b.n	11ebc <uart_callback+0x68>
	return 0;
   11f40:	4619      	mov	r1, r3
   11f42:	e7dd      	b.n	11f00 <uart_callback+0xac>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   11f44:	4650      	mov	r0, sl
   11f46:	f008 fce7 	bl	1a918 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   11f4a:	682b      	ldr	r3, [r5, #0]
   11f4c:	60dc      	str	r4, [r3, #12]
   11f4e:	e7da      	b.n	11f06 <uart_callback+0xb2>
   11f50:	0001c1b4 	.word	0x0001c1b4
   11f54:	0001c16c 	.word	0x0001c16c
   11f58:	0001ed0f 	.word	0x0001ed0f
   11f5c:	20010158 	.word	0x20010158

00011f60 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   11f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11f64:	4604      	mov	r4, r0
   11f66:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   11f68:	460e      	mov	r6, r1
   11f6a:	2900      	cmp	r1, #0
   11f6c:	d06e      	beq.n	1204c <formatted_text_print.constprop.0+0xec>
   11f6e:	2500      	movs	r5, #0
		shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   11f70:	5d73      	ldrb	r3, [r6, r5]
   11f72:	2b20      	cmp	r3, #32
   11f74:	d025      	beq.n	11fc2 <formatted_text_print.constprop.0+0x62>
   11f76:	3b09      	subs	r3, #9
   11f78:	2b04      	cmp	r3, #4
   11f7a:	d922      	bls.n	11fc2 <formatted_text_print.constprop.0+0x62>
	shell_raw_fprintf(shell->fprintf_ctx, "\n");
   11f7c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 12050 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   11f80:	4630      	mov	r0, r6
   11f82:	f009 f947 	bl	1b214 <strlen>
		size_t idx = 0;

		length = shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   11f86:	68a3      	ldr	r3, [r4, #8]
		length = shell_strlen(str) - offset;
   11f88:	b280      	uxth	r0, r0
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   11f8a:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
		length = shell_strlen(str) - offset;
   11f8c:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   11f8e:	eba1 0308 	sub.w	r3, r1, r8
		if (length <=
   11f92:	4298      	cmp	r0, r3
   11f94:	eb06 0a05 	add.w	sl, r6, r5
   11f98:	d915      	bls.n	11fc6 <formatted_text_print.constprop.0+0x66>
   11f9a:	4650      	mov	r0, sl
		size_t idx = 0;
   11f9c:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   11f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
   11fa2:	2a20      	cmp	r2, #32
   11fa4:	d006      	beq.n	11fb4 <formatted_text_print.constprop.0+0x54>
   11fa6:	f1a2 0c09 	sub.w	ip, r2, #9
   11faa:	f1bc 0f04 	cmp.w	ip, #4
   11fae:	d802      	bhi.n	11fb6 <formatted_text_print.constprop.0+0x56>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   11fb0:	2a0a      	cmp	r2, #10
   11fb2:	d031      	beq.n	12018 <formatted_text_print.constprop.0+0xb8>
   11fb4:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   11fb6:	eb08 0207 	add.w	r2, r8, r7
   11fba:	4291      	cmp	r1, r2
   11fbc:	d92b      	bls.n	12016 <formatted_text_print.constprop.0+0xb6>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   11fbe:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   11fc0:	e7ed      	b.n	11f9e <formatted_text_print.constprop.0+0x3e>
		++offset;
   11fc2:	3501      	adds	r5, #1
   11fc4:	e7d4      	b.n	11f70 <formatted_text_print.constprop.0+0x10>
   11fc6:	4653      	mov	r3, sl
			for (idx = 0; idx < length; idx++) {
   11fc8:	2700      	movs	r7, #0
   11fca:	42b8      	cmp	r0, r7
   11fcc:	d017      	beq.n	11ffe <formatted_text_print.constprop.0+0x9e>
				if (*(str + offset + idx) == '\n') {
   11fce:	f813 2b01 	ldrb.w	r2, [r3], #1
   11fd2:	eb05 0907 	add.w	r9, r5, r7
   11fd6:	2a0a      	cmp	r2, #10
   11fd8:	d11b      	bne.n	12012 <formatted_text_print.constprop.0+0xb2>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   11fda:	6960      	ldr	r0, [r4, #20]
   11fdc:	f008 f8fb 	bl	1a1d6 <shell_fprintf_buffer_flush>
					shell_write(shell, str + offset, idx);
   11fe0:	463a      	mov	r2, r7
   11fe2:	4651      	mov	r1, sl
   11fe4:	4620      	mov	r0, r4
   11fe6:	f008 fbcb 	bl	1a780 <shell_write>
   11fea:	4919      	ldr	r1, [pc, #100]	; (12050 <formatted_text_print.constprop.0+0xf0>)
   11fec:	6960      	ldr	r0, [r4, #20]
   11fee:	f008 fce7 	bl	1a9c0 <shell_raw_fprintf>
					shell_op_cursor_horiz_move(shell,
   11ff2:	4641      	mov	r1, r8
   11ff4:	4620      	mov	r0, r4
					offset += idx + 1;
   11ff6:	f109 0501 	add.w	r5, r9, #1
					shell_op_cursor_horiz_move(shell,
   11ffa:	f7ff fd93 	bl	11b24 <shell_op_cursor_horiz_move>
			shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   11ffe:	6960      	ldr	r0, [r4, #20]
   12000:	1971      	adds	r1, r6, r5
   12002:	f008 fcdd 	bl	1a9c0 <shell_raw_fprintf>
   12006:	6960      	ldr	r0, [r4, #20]
   12008:	4911      	ldr	r1, [pc, #68]	; (12050 <formatted_text_print.constprop.0+0xf0>)
		cursor_next_line_move(shell);
		shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	cursor_next_line_move(shell);
}
   1200a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1200e:	f008 bcd7 	b.w	1a9c0 <shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   12012:	3701      	adds	r7, #1
   12014:	e7d9      	b.n	11fca <formatted_text_print.constprop.0+0x6a>
   12016:	461f      	mov	r7, r3
   12018:	6960      	ldr	r0, [r4, #20]
   1201a:	f008 f8dc 	bl	1a1d6 <shell_fprintf_buffer_flush>
		shell_write(shell, str + offset, length);
   1201e:	463a      	mov	r2, r7
   12020:	4651      	mov	r1, sl
   12022:	4620      	mov	r0, r4
   12024:	f008 fbac 	bl	1a780 <shell_write>
		offset += length;
   12028:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   1202a:	5d73      	ldrb	r3, [r6, r5]
   1202c:	2b20      	cmp	r3, #32
   1202e:	d00b      	beq.n	12048 <formatted_text_print.constprop.0+0xe8>
   12030:	3b09      	subs	r3, #9
   12032:	2b04      	cmp	r3, #4
   12034:	d908      	bls.n	12048 <formatted_text_print.constprop.0+0xe8>
   12036:	4649      	mov	r1, r9
   12038:	6960      	ldr	r0, [r4, #20]
   1203a:	f008 fcc1 	bl	1a9c0 <shell_raw_fprintf>
		shell_op_cursor_horiz_move(shell, terminal_offset);
   1203e:	4641      	mov	r1, r8
   12040:	4620      	mov	r0, r4
   12042:	f7ff fd6f 	bl	11b24 <shell_op_cursor_horiz_move>
	while (true) {
   12046:	e79b      	b.n	11f80 <formatted_text_print.constprop.0+0x20>
			++offset;
   12048:	3501      	adds	r5, #1
   1204a:	e7ee      	b.n	1202a <formatted_text_print.constprop.0+0xca>
}
   1204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12050:	0001e915 	.word	0x0001e915

00012054 <shell_help_subcmd_print>:
 * help string
 */
void shell_help_subcmd_print(const struct shell *shell,
			     const struct shell_static_entry *parent,
			     const char *description)
{
   12054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12058:	460e      	mov	r6, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   1205a:	2100      	movs	r1, #0
{
   1205c:	4604      	mov	r4, r0
   1205e:	4617      	mov	r7, r2
	uint16_t longest = 0U;
   12060:	460d      	mov	r5, r1
{
   12062:	b08d      	sub	sp, #52	; 0x34

	/* Searching for the longest subcommand to print. */
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   12064:	4630      	mov	r0, r6
   12066:	aa07      	add	r2, sp, #28
   12068:	f101 0801 	add.w	r8, r1, #1
   1206c:	f7ff fd1c 	bl	11aa8 <shell_cmd_get>
   12070:	4601      	mov	r1, r0
   12072:	b9b0      	cbnz	r0, 120a2 <shell_help_subcmd_print+0x4e>
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
	};

	/* No help to print */
	if (longest == 0) {
   12074:	b195      	cbz	r5, 1209c <shell_help_subcmd_print+0x48>
		return;
	}

	if (description != NULL) {
   12076:	b11f      	cbz	r7, 12080 <shell_help_subcmd_print+0x2c>
		shell_internal_fprintf(shell, SHELL_NORMAL, description);
   12078:	463a      	mov	r2, r7
   1207a:	4620      	mov	r0, r4
   1207c:	f008 fbdf 	bl	1a83e <shell_internal_fprintf>
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   12080:	2100      	movs	r1, #0
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   12082:	f8df 807c 	ldr.w	r8, [pc, #124]	; 12100 <shell_help_subcmd_print+0xac>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
   12086:	f8df a07c 	ldr.w	sl, [pc, #124]	; 12104 <shell_help_subcmd_print+0xb0>
   1208a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 12108 <shell_help_subcmd_print+0xb4>
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1208e:	1c4b      	adds	r3, r1, #1
   12090:	4630      	mov	r0, r6
   12092:	aa07      	add	r2, sp, #28
   12094:	9304      	str	r3, [sp, #16]
   12096:	f7ff fd07 	bl	11aa8 <shell_cmd_get>
   1209a:	b960      	cbnz	r0, 120b6 <shell_help_subcmd_print+0x62>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   1209c:	b00d      	add	sp, #52	; 0x34
   1209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, shell_strlen(entry->syntax));
   120a2:	6808      	ldr	r0, [r1, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   120a4:	b110      	cbz	r0, 120ac <shell_help_subcmd_print+0x58>
   120a6:	f009 f8b5 	bl	1b214 <strlen>
   120aa:	b280      	uxth	r0, r0
   120ac:	4285      	cmp	r5, r0
   120ae:	bf38      	it	cc
   120b0:	4605      	movcc	r5, r0
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   120b2:	4641      	mov	r1, r8
   120b4:	e7d6      	b.n	12064 <shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   120b6:	6803      	ldr	r3, [r0, #0]
   120b8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   120bc:	4810      	ldr	r0, [pc, #64]	; (12100 <shell_help_subcmd_print+0xac>)
		help_item_print(shell, entry->syntax, longest, entry->help);
   120be:	9305      	str	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   120c0:	f009 f8a8 	bl	1b214 <strlen>
	if (item_name == NULL) {
   120c4:	9b05      	ldr	r3, [sp, #20]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   120c6:	4607      	mov	r7, r0
	if (item_name == NULL) {
   120c8:	b17b      	cbz	r3, 120ea <shell_help_subcmd_print+0x96>
		shell_internal_fprintf(shell, SHELL_NORMAL, "%s%-*s%s:",
   120ca:	e9cd 3801 	strd	r3, r8, [sp, #4]
   120ce:	4652      	mov	r2, sl
   120d0:	4643      	mov	r3, r8
   120d2:	2100      	movs	r1, #0
   120d4:	4620      	mov	r0, r4
   120d6:	9500      	str	r5, [sp, #0]
   120d8:	f008 fbb1 	bl	1a83e <shell_internal_fprintf>
	if (item_help == NULL) {
   120dc:	f1b9 0f00 	cmp.w	r9, #0
   120e0:	d105      	bne.n	120ee <shell_help_subcmd_print+0x9a>
   120e2:	4659      	mov	r1, fp
   120e4:	6960      	ldr	r0, [r4, #20]
   120e6:	f008 fc6b 	bl	1a9c0 <shell_raw_fprintf>
	while ((entry = shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   120ea:	9904      	ldr	r1, [sp, #16]
   120ec:	e7cf      	b.n	1208e <shell_help_subcmd_print+0x3a>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   120ee:	1c6a      	adds	r2, r5, #1
   120f0:	eb02 0247 	add.w	r2, r2, r7, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   120f4:	4649      	mov	r1, r9
   120f6:	4620      	mov	r0, r4
   120f8:	b292      	uxth	r2, r2
   120fa:	f7ff ff31 	bl	11f60 <formatted_text_print.constprop.0>
   120fe:	e7f4      	b.n	120ea <shell_help_subcmd_print+0x96>
   12100:	0001ed5f 	.word	0x0001ed5f
   12104:	0001ed51 	.word	0x0001ed51
   12108:	0001e915 	.word	0x0001e915

0001210c <shell_help_cmd_print>:

void shell_help_cmd_print(const struct shell *shell,
			  const struct shell_static_entry *cmd)
{
   1210c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1210e:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   12110:	6808      	ldr	r0, [r1, #0]
{
   12112:	460d      	mov	r5, r1
   12114:	b1b8      	cbz	r0, 12146 <shell_help_cmd_print+0x3a>
   12116:	f009 f87d 	bl	1b214 <strlen>
   1211a:	b284      	uxth	r4, r0
   1211c:	4f0b      	ldr	r7, [pc, #44]	; (1214c <shell_help_cmd_print+0x40>)
   1211e:	4638      	mov	r0, r7
   12120:	f009 f878 	bl	1b214 <strlen>
	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   12124:	4404      	add	r4, r0

	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   12126:	2100      	movs	r1, #0
   12128:	4630      	mov	r0, r6
   1212a:	682b      	ldr	r3, [r5, #0]
   1212c:	4a08      	ldr	r2, [pc, #32]	; (12150 <shell_help_cmd_print+0x44>)
	field_width = shell_strlen(cmd->syntax) + shell_strlen(cmd_sep);
   1212e:	b2a4      	uxth	r4, r4
	shell_internal_fprintf(shell, SHELL_NORMAL, "%s%s",
   12130:	9700      	str	r7, [sp, #0]
   12132:	f008 fb84 	bl	1a83e <shell_internal_fprintf>
				cmd->syntax, cmd_sep);

	formatted_text_print(shell, cmd->help, field_width, false);
   12136:	4622      	mov	r2, r4
   12138:	4630      	mov	r0, r6
   1213a:	6869      	ldr	r1, [r5, #4]
}
   1213c:	b003      	add	sp, #12
   1213e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   12142:	f7ff bf0d 	b.w	11f60 <formatted_text_print.constprop.0>
   12146:	4604      	mov	r4, r0
   12148:	e7e8      	b.n	1211c <shell_help_cmd_print+0x10>
   1214a:	bf00      	nop
   1214c:	0001ed5b 	.word	0x0001ed5b
   12150:	0001ecca 	.word	0x0001ecca

00012154 <cmd_clear>:
	cursor_restore(shell);
	return ret_val;
}

static int cmd_clear(const struct shell *shell, size_t argc, char **argv)
{
   12154:	b538      	push	{r3, r4, r5, lr}
   12156:	4604      	mov	r4, r0
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   12158:	4d06      	ldr	r5, [pc, #24]	; (12174 <cmd_clear+0x20>)
   1215a:	4a07      	ldr	r2, [pc, #28]	; (12178 <cmd_clear+0x24>)
   1215c:	4629      	mov	r1, r5
   1215e:	6940      	ldr	r0, [r0, #20]
   12160:	f008 fc75 	bl	1aa4e <shell_raw_fprintf>
	SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   12164:	6960      	ldr	r0, [r4, #20]
   12166:	4629      	mov	r1, r5
   12168:	4a04      	ldr	r2, [pc, #16]	; (1217c <cmd_clear+0x28>)
   1216a:	f008 fc70 	bl	1aa4e <shell_raw_fprintf>

	return 0;
}
   1216e:	2000      	movs	r0, #0
   12170:	bd38      	pop	{r3, r4, r5, pc}
   12172:	bf00      	nop
   12174:	0001ea3f 	.word	0x0001ea3f
   12178:	0001f386 	.word	0x0001f386
   1217c:	0001f38a 	.word	0x0001f38a

00012180 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   12180:	b510      	push	{r4, lr}
   12182:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   12184:	4a04      	ldr	r2, [pc, #16]	; (12198 <cmd_resize_default+0x18>)
   12186:	4905      	ldr	r1, [pc, #20]	; (1219c <cmd_resize_default+0x1c>)
   12188:	6940      	ldr	r0, [r0, #20]
   1218a:	f008 fc60 	bl	1aa4e <shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   1218e:	68a3      	ldr	r3, [r4, #8]
   12190:	4a03      	ldr	r2, [pc, #12]	; (121a0 <cmd_resize_default+0x20>)

	return 0;
}
   12192:	2000      	movs	r0, #0
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   12194:	629a      	str	r2, [r3, #40]	; 0x28
}
   12196:	bd10      	pop	{r4, pc}
   12198:	0001f38f 	.word	0x0001f38f
   1219c:	0001ea3f 	.word	0x0001ea3f
   121a0:	00500018 	.word	0x00500018

000121a4 <cmd_shell_stats_show>:
{
   121a4:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %u", shell->stats->log_lost_cnt);
   121a6:	6983      	ldr	r3, [r0, #24]
   121a8:	2100      	movs	r1, #0
   121aa:	681b      	ldr	r3, [r3, #0]
   121ac:	4a02      	ldr	r2, [pc, #8]	; (121b8 <cmd_shell_stats_show+0x14>)
   121ae:	f007 fff0 	bl	1a192 <shell_fprintf>
}
   121b2:	2000      	movs	r0, #0
   121b4:	bd08      	pop	{r3, pc}
   121b6:	bf00      	nop
   121b8:	0001ed62 	.word	0x0001ed62

000121bc <cmd_help>:
{
   121bc:	b510      	push	{r4, lr}
   121be:	4604      	mov	r4, r0
	shell_print(shell,
   121c0:	2100      	movs	r1, #0
   121c2:	4a07      	ldr	r2, [pc, #28]	; (121e0 <cmd_help+0x24>)
   121c4:	f007 ffe5 	bl	1a192 <shell_fprintf>
	shell_print(shell,
   121c8:	4620      	mov	r0, r4
   121ca:	2100      	movs	r1, #0
   121cc:	4a05      	ldr	r2, [pc, #20]	; (121e4 <cmd_help+0x28>)
   121ce:	f007 ffe0 	bl	1a192 <shell_fprintf>
		shell_help_subcmd_print(shell, NULL, "\nAvailable commands:\n");
   121d2:	4620      	mov	r0, r4
   121d4:	2100      	movs	r1, #0
   121d6:	4a04      	ldr	r2, [pc, #16]	; (121e8 <cmd_help+0x2c>)
   121d8:	f7ff ff3c 	bl	12054 <shell_help_subcmd_print>
}
   121dc:	2000      	movs	r0, #0
   121de:	bd10      	pop	{r4, pc}
   121e0:	0001ed71 	.word	0x0001ed71
   121e4:	0001ee60 	.word	0x0001ee60
   121e8:	0001ef29 	.word	0x0001ef29

000121ec <cmd_history>:
{
   121ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   121ee:	4604      	mov	r4, r0
	size_t i = 0;
   121f0:	2500      	movs	r5, #0
			shell_print(shell, "[%3d] %s",
   121f2:	4f0f      	ldr	r7, [pc, #60]	; (12230 <cmd_history+0x44>)
{
   121f4:	b085      	sub	sp, #20
				  shell->ctx->temp_buff, &len);
   121f6:	68a2      	ldr	r2, [r4, #8]
		shell_history_get(shell->history, true,
   121f8:	f10d 030e 	add.w	r3, sp, #14
   121fc:	2101      	movs	r1, #1
   121fe:	68e0      	ldr	r0, [r4, #12]
   12200:	f502 729c 	add.w	r2, r2, #312	; 0x138
   12204:	f008 fc45 	bl	1aa92 <shell_history_get>
		if (len) {
   12208:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   1220c:	68a3      	ldr	r3, [r4, #8]
   1220e:	b158      	cbz	r0, 12228 <cmd_history+0x3c>
			shell_print(shell, "[%3d] %s",
   12210:	f503 739c 	add.w	r3, r3, #312	; 0x138
   12214:	9300      	str	r3, [sp, #0]
   12216:	463a      	mov	r2, r7
   12218:	462b      	mov	r3, r5
   1221a:	2100      	movs	r1, #0
   1221c:	4620      	mov	r0, r4
   1221e:	1c6e      	adds	r6, r5, #1
   12220:	f007 ffb7 	bl	1a192 <shell_fprintf>
   12224:	4635      	mov	r5, r6
		shell_history_get(shell->history, true,
   12226:	e7e6      	b.n	121f6 <cmd_history+0xa>
	shell->ctx->temp_buff[0] = '\0';
   12228:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
}
   1222c:	b005      	add	sp, #20
   1222e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12230:	0001e173 	.word	0x0001e173

00012234 <cmd_echo>:
	if (argc == 2) {
   12234:	2902      	cmp	r1, #2
{
   12236:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   12238:	d10c      	bne.n	12254 <cmd_echo+0x20>
		shell_error(shell, "%s:%s%s", argv[0],
   1223a:	6853      	ldr	r3, [r2, #4]
   1223c:	9301      	str	r3, [sp, #4]
   1223e:	4b0d      	ldr	r3, [pc, #52]	; (12274 <cmd_echo+0x40>)
   12240:	9300      	str	r3, [sp, #0]
   12242:	6813      	ldr	r3, [r2, #0]
   12244:	4a0c      	ldr	r2, [pc, #48]	; (12278 <cmd_echo+0x44>)
   12246:	f007 ffa4 	bl	1a192 <shell_fprintf>
   1224a:	f06f 0015 	mvn.w	r0, #21
}
   1224e:	b003      	add	sp, #12
   12250:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   12254:	6883      	ldr	r3, [r0, #8]
   12256:	4a09      	ldr	r2, [pc, #36]	; (1227c <cmd_echo+0x48>)
	return shell->ctx->internal.flags.echo == 1;
   12258:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1225c:	2100      	movs	r1, #0
   1225e:	f013 0f04 	tst.w	r3, #4
   12262:	4b07      	ldr	r3, [pc, #28]	; (12280 <cmd_echo+0x4c>)
   12264:	bf18      	it	ne
   12266:	4613      	movne	r3, r2
   12268:	4a06      	ldr	r2, [pc, #24]	; (12284 <cmd_echo+0x50>)
   1226a:	f007 ff92 	bl	1a192 <shell_fprintf>
	return 0;
   1226e:	2000      	movs	r0, #0
   12270:	e7ed      	b.n	1224e <cmd_echo+0x1a>
   12272:	bf00      	nop
   12274:	0001ef4c 	.word	0x0001ef4c
   12278:	0001ef43 	.word	0x0001ef43
   1227c:	0001e9fc 	.word	0x0001e9fc
   12280:	0001ef3f 	.word	0x0001ef3f
   12284:	0001ef61 	.word	0x0001ef61

00012288 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   12288:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   1228a:	2901      	cmp	r1, #1
{
   1228c:	4605      	mov	r5, r0
   1228e:	b085      	sub	sp, #20
	if (argc != 1) {
   12290:	d00d      	beq.n	122ae <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   12292:	6853      	ldr	r3, [r2, #4]
   12294:	2102      	movs	r1, #2
   12296:	9301      	str	r3, [sp, #4]
   12298:	4b52      	ldr	r3, [pc, #328]	; (123e4 <cmd_resize+0x15c>)
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   1229a:	f06f 0415 	mvn.w	r4, #21
		shell_error(shell, "%s:%s%s", argv[0],
   1229e:	9300      	str	r3, [sp, #0]
   122a0:	6813      	ldr	r3, [r2, #0]
   122a2:	4a51      	ldr	r2, [pc, #324]	; (123e8 <cmd_resize+0x160>)
   122a4:	f007 ff75 	bl	1a192 <shell_fprintf>
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   122a8:	4620      	mov	r0, r4
   122aa:	b005      	add	sp, #20
   122ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	char c = 0;
   122ae:	2400      	movs	r4, #0
	SHELL_VT100_CMD(shell, SHELL_VT100_SAVECURSOR);
   122b0:	4a4e      	ldr	r2, [pc, #312]	; (123ec <cmd_resize+0x164>)
   122b2:	494f      	ldr	r1, [pc, #316]	; (123f0 <cmd_resize+0x168>)
   122b4:	6940      	ldr	r0, [r0, #20]
   122b6:	f008 fbca 	bl	1aa4e <shell_raw_fprintf>
	shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   122ba:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   122be:	4628      	mov	r0, r5
   122c0:	f7ff fc20 	bl	11b04 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   122c4:	21fa      	movs	r1, #250	; 0xfa
   122c6:	4628      	mov	r0, r5
   122c8:	f7ff fc2c 	bl	11b24 <shell_op_cursor_horiz_move>
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   122cc:	68a8      	ldr	r0, [r5, #8]
   122ce:	f44f 7280 	mov.w	r2, #256	; 0x100
   122d2:	4621      	mov	r1, r4
   122d4:	f500 709c 	add.w	r0, r0, #312	; 0x138
	char c = 0;
   122d8:	f88d 400b 	strb.w	r4, [sp, #11]
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   122dc:	f009 f80e 	bl	1b2fc <memset>
	shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   122e0:	4944      	ldr	r1, [pc, #272]	; (123f4 <cmd_resize+0x16c>)
   122e2:	6968      	ldr	r0, [r5, #20]
   122e4:	f008 fbb3 	bl	1aa4e <shell_raw_fprintf>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   122e8:	6968      	ldr	r0, [r5, #20]
   122ea:	f007 ff74 	bl	1a1d6 <shell_fprintf_buffer_flush>
   122ee:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   122f2:	6868      	ldr	r0, [r5, #4]
   122f4:	2201      	movs	r2, #1
   122f6:	6803      	ldr	r3, [r0, #0]
   122f8:	f10d 010b 	add.w	r1, sp, #11
   122fc:	691f      	ldr	r7, [r3, #16]
   122fe:	ab03      	add	r3, sp, #12
   12300:	47b8      	blx	r7
			if (cnt == 0) {
   12302:	9b03      	ldr	r3, [sp, #12]
   12304:	b953      	cbnz	r3, 1231c <cmd_resize+0x94>
	z_impl_k_busy_wait(usec_to_wait);
   12306:	3e01      	subs	r6, #1
   12308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1230c:	b2b6      	uxth	r6, r6
   1230e:	f009 fb5b 	bl	1b9c8 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   12312:	2e00      	cmp	r6, #0
   12314:	d1ed      	bne.n	122f2 <cmd_resize+0x6a>
		ret_val = -ENOTSUP;
   12316:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1231a:	e031      	b.n	12380 <cmd_resize+0xf8>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   1231c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   12320:	68aa      	ldr	r2, [r5, #8]
   12322:	2b1b      	cmp	r3, #27
   12324:	d053      	beq.n	123ce <cmd_resize+0x146>
   12326:	f892 1138 	ldrb.w	r1, [r2, #312]	; 0x138
   1232a:	291b      	cmp	r1, #27
   1232c:	d1e1      	bne.n	122f2 <cmd_resize+0x6a>
			if (c == 'R') { /* End of response from the terminal. */
   1232e:	2b52      	cmp	r3, #82	; 0x52
   12330:	d14d      	bne.n	123ce <cmd_resize+0x146>
				shell->ctx->temp_buff[buff_idx] = '\0';
   12332:	2300      	movs	r3, #0
   12334:	4414      	add	r4, r2
   12336:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
				if (shell->ctx->temp_buff[1] != '[') {
   1233a:	f892 1139 	ldrb.w	r1, [r2, #313]	; 0x139
   1233e:	295b      	cmp	r1, #91	; 0x5b
   12340:	d14d      	bne.n	123de <cmd_resize+0x156>
	*y = 0U;
   12342:	461f      	mov	r7, r3
				buff_idx = 2U;
   12344:	2602      	movs	r6, #2
   12346:	f502 709d 	add.w	r0, r2, #314	; 0x13a
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   1234a:	f810 1b01 	ldrb.w	r1, [r0], #1
   1234e:	3601      	adds	r6, #1
   12350:	293b      	cmp	r1, #59	; 0x3b
   12352:	b2b6      	uxth	r6, r6
   12354:	d126      	bne.n	123a4 <cmd_resize+0x11c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   12356:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   1235a:	d0dc      	beq.n	12316 <cmd_resize+0x8e>
	*x = 0U;
   1235c:	2300      	movs	r3, #0
   1235e:	f506 709c 	add.w	r0, r6, #312	; 0x138
   12362:	4410      	add	r0, r2
				while (shell->ctx->temp_buff[buff_idx]
   12364:	f810 4b01 	ldrb.w	r4, [r0], #1
   12368:	bb34      	cbnz	r4, 123b8 <cmd_resize+0x130>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   1236a:	2bfa      	cmp	r3, #250	; 0xfa
   1236c:	bf28      	it	cs
   1236e:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   12370:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   12372:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   12374:	463b      	mov	r3, r7
   12376:	bf28      	it	cs
   12378:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   1237a:	f882 4138 	strb.w	r4, [r2, #312]	; 0x138
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   1237e:	8513      	strh	r3, [r2, #40]	; 0x28
	SHELL_VT100_CMD(shell, SHELL_VT100_RESTORECURSOR);
   12380:	4a1d      	ldr	r2, [pc, #116]	; (123f8 <cmd_resize+0x170>)
   12382:	491b      	ldr	r1, [pc, #108]	; (123f0 <cmd_resize+0x168>)
   12384:	6968      	ldr	r0, [r5, #20]
   12386:	f008 fb62 	bl	1aa4e <shell_raw_fprintf>
	if (err != 0) {
   1238a:	2c00      	cmp	r4, #0
   1238c:	d08c      	beq.n	122a8 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   1238e:	68ab      	ldr	r3, [r5, #8]
   12390:	4a1a      	ldr	r2, [pc, #104]	; (123fc <cmd_resize+0x174>)
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   12392:	2104      	movs	r1, #4
		shell->ctx->vt100_ctx.cons.terminal_hei =
   12394:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   12396:	4628      	mov	r0, r5
   12398:	4a19      	ldr	r2, [pc, #100]	; (12400 <cmd_resize+0x178>)
   1239a:	f007 fefa 	bl	1a192 <shell_fprintf>
   1239e:	f06f 0407 	mvn.w	r4, #7
   123a2:	e781      	b.n	122a8 <cmd_resize+0x20>
					*y = *y * 10U +
   123a4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   123a8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   123ac:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   123ae:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   123b2:	b29f      	uxth	r7, r3
					if (buff_idx >=
   123b4:	d1c9      	bne.n	1234a <cmd_resize+0xc2>
   123b6:	e7ae      	b.n	12316 <cmd_resize+0x8e>
					*x = *x * 10U +
   123b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   123bc:	3601      	adds	r6, #1
					*x = *x * 10U +
   123be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   123c2:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   123c4:	3c30      	subs	r4, #48	; 0x30
					if (buff_idx >=
   123c6:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   123c8:	b2a3      	uxth	r3, r4
					if (buff_idx >=
   123ca:	d9cb      	bls.n	12364 <cmd_resize+0xdc>
   123cc:	e7a3      	b.n	12316 <cmd_resize+0x8e>
			shell->ctx->temp_buff[buff_idx] = c;
   123ce:	1911      	adds	r1, r2, r4
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   123d0:	3401      	adds	r4, #1
   123d2:	b2a4      	uxth	r4, r4
   123d4:	2c09      	cmp	r4, #9
			shell->ctx->temp_buff[buff_idx] = c;
   123d6:	f881 3138 	strb.w	r3, [r1, #312]	; 0x138
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   123da:	d98a      	bls.n	122f2 <cmd_resize+0x6a>
				shell->ctx->temp_buff[0] = 0;
   123dc:	2300      	movs	r3, #0
   123de:	f882 3138 	strb.w	r3, [r2, #312]	; 0x138
				return -ENOMEM;
   123e2:	e798      	b.n	12316 <cmd_resize+0x8e>
   123e4:	0001ef4c 	.word	0x0001ef4c
   123e8:	0001ef43 	.word	0x0001ef43
   123ec:	0001f380 	.word	0x0001f380
   123f0:	0001ea3f 	.word	0x0001ea3f
   123f4:	0001f395 	.word	0x0001f395
   123f8:	0001f383 	.word	0x0001f383
   123fc:	00500018 	.word	0x00500018
   12400:	0001ef72 	.word	0x0001ef72

00012404 <shell_wildcard_process>:


enum shell_wildcard_status shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   12404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12408:	4607      	mov	r7, r0
   1240a:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   1240c:	4689      	mov	r9, r1
{
   1240e:	b089      	sub	sp, #36	; 0x24
	if (cmd == NULL) {
   12410:	b921      	cbnz	r1, 1241c <shell_wildcard_process+0x18>
		return ret_val;
   12412:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   12414:	4620      	mov	r0, r4
   12416:	b009      	add	sp, #36	; 0x24
   12418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!shell_wildcard_character_exist(pattern)) {
   1241c:	4610      	mov	r0, r2
   1241e:	f008 fd1b 	bl	1ae58 <shell_wildcard_character_exist>
   12422:	2800      	cmp	r0, #0
   12424:	d0f5      	beq.n	12412 <shell_wildcard_process+0xe>
	size_t cnt = 0;
   12426:	f04f 0800 	mov.w	r8, #0
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1242a:	2402      	movs	r4, #2
	size_t cmd_idx = 0;
   1242c:	4641      	mov	r1, r8
   1242e:	e024      	b.n	1247a <shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   12430:	465c      	mov	r4, fp
   12432:	e03c      	b.n	124ae <shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   12434:	4629      	mov	r1, r5
   12436:	f50a 709c 	add.w	r0, sl, #312	; 0x138
   1243a:	f008 fea0 	bl	1b17e <strstr>
	if (!completion_addr) {
   1243e:	4606      	mov	r6, r0
   12440:	2800      	cmp	r0, #0
   12442:	d04e      	beq.n	124e2 <shell_wildcard_process+0xde>
   12444:	f008 fee6 	bl	1b214 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   12448:	b282      	uxth	r2, r0
   1244a:	1c60      	adds	r0, r4, #1
   1244c:	4631      	mov	r1, r6
   1244e:	3201      	adds	r2, #1
   12450:	4430      	add	r0, r6
   12452:	f008 ff11 	bl	1b278 <memmove>
	memcpy(completion_addr, cmd, cmd_len);
   12456:	4622      	mov	r2, r4
   12458:	4659      	mov	r1, fp
   1245a:	4630      	mov	r0, r6
   1245c:	f008 ff23 	bl	1b2a6 <memcpy>
	completion_addr[cmd_len] = ' ';
   12460:	f04f 0320 	mov.w	r3, #32
   12464:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   12466:	f8ba 0036 	ldrh.w	r0, [sl, #54]	; 0x36
			cnt++;
   1246a:	f108 0801 	add.w	r8, r8, #1
	*buff_len += cmd_len + 1; /* + 1 for space */
   1246e:	4404      	add	r4, r0
   12470:	3401      	adds	r4, #1
   12472:	f8aa 4036 	strh.w	r4, [sl, #54]	; 0x36
			ret_val = command_add(shell->ctx->temp_buff,
   12476:	2400      	movs	r4, #0
   12478:	9901      	ldr	r1, [sp, #4]
	while ((entry = shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   1247a:	1c4b      	adds	r3, r1, #1
   1247c:	4648      	mov	r0, r9
   1247e:	aa03      	add	r2, sp, #12
   12480:	9301      	str	r3, [sp, #4]
   12482:	f7ff fb11 	bl	11aa8 <shell_cmd_get>
   12486:	4606      	mov	r6, r0
   12488:	b1f8      	cbz	r0, 124ca <shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   1248a:	2200      	movs	r2, #0
   1248c:	4628      	mov	r0, r5
   1248e:	6831      	ldr	r1, [r6, #0]
   12490:	f006 fe28 	bl	190e4 <fnmatch>
   12494:	2800      	cmp	r0, #0
   12496:	d1ef      	bne.n	12478 <shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   12498:	f8d6 b000 	ldr.w	fp, [r6]
   1249c:	f8d7 a008 	ldr.w	sl, [r7, #8]
   124a0:	f1bb 0f00 	cmp.w	fp, #0
   124a4:	d0c4      	beq.n	12430 <shell_wildcard_process+0x2c>
   124a6:	4658      	mov	r0, fp
   124a8:	f008 feb4 	bl	1b214 <strlen>
   124ac:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   124ae:	f8ba 2036 	ldrh.w	r2, [sl, #54]	; 0x36
   124b2:	3201      	adds	r2, #1
   124b4:	4422      	add	r2, r4
   124b6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   124ba:	ddbb      	ble.n	12434 <shell_wildcard_process+0x30>
				shell_internal_fprintf(shell,
   124bc:	462b      	mov	r3, r5
   124be:	2104      	movs	r1, #4
   124c0:	4638      	mov	r0, r7
   124c2:	4a09      	ldr	r2, [pc, #36]	; (124e8 <shell_wildcard_process+0xe4>)
   124c4:	f008 f9bb 	bl	1a83e <shell_internal_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   124c8:	2401      	movs	r4, #1
	if (cnt > 0) {
   124ca:	f1b8 0f00 	cmp.w	r8, #0
   124ce:	d0a1      	beq.n	12414 <shell_wildcard_process+0x10>
		shell_pattern_remove(shell->ctx->temp_buff,
   124d0:	68b8      	ldr	r0, [r7, #8]
   124d2:	462a      	mov	r2, r5
   124d4:	f100 0136 	add.w	r1, r0, #54	; 0x36
   124d8:	f500 709c 	add.w	r0, r0, #312	; 0x138
   124dc:	f007 ffa7 	bl	1a42e <shell_pattern_remove>
	return ret_val;
   124e0:	e798      	b.n	12414 <shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   124e2:	2402      	movs	r4, #2
   124e4:	e7f1      	b.n	124ca <shell_wildcard_process+0xc6>
   124e6:	bf00      	nop
   124e8:	0001f39a 	.word	0x0001f39a

000124ec <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   124ec:	4604      	mov	r4, r0
   124ee:	b508      	push	{r3, lr}
	__asm__ volatile(
   124f0:	f04f 0220 	mov.w	r2, #32
   124f4:	f3ef 8311 	mrs	r3, BASEPRI
   124f8:	f382 8811 	msr	BASEPRI, r2
   124fc:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   12500:	f008 fd84 	bl	1b00c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   12504:	4620      	mov	r0, r4
   12506:	f000 ffff 	bl	13508 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1250a:	4803      	ldr	r0, [pc, #12]	; (12518 <sys_reboot+0x2c>)
   1250c:	f006 feb9 	bl	19282 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12510:	f000 fc8a 	bl	12e28 <arch_cpu_idle>
   12514:	e7fc      	b.n	12510 <sys_reboot+0x24>
   12516:	bf00      	nop
   12518:	0001f3f2 	.word	0x0001f3f2

0001251c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1251c:	b510      	push	{r4, lr}
   1251e:	4807      	ldr	r0, [pc, #28]	; (1253c <uart_console_init+0x20>)
   12520:	f002 f8c8 	bl	146b4 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   12524:	4c06      	ldr	r4, [pc, #24]	; (12540 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   12526:	4b07      	ldr	r3, [pc, #28]	; (12544 <uart_console_init+0x28>)
   12528:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   1252a:	4620      	mov	r0, r4
   1252c:	f001 f9e4 	bl	138f8 <__stdout_hook_install>
	__printk_hook_install(console_out);
   12530:	4620      	mov	r0, r4
   12532:	f7fc fce7 	bl	ef04 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   12536:	2000      	movs	r0, #0
   12538:	bd10      	pop	{r4, pc}
   1253a:	bf00      	nop
   1253c:	0001ed08 	.word	0x0001ed08
   12540:	00012549 	.word	0x00012549
   12544:	20010b0c 	.word	0x20010b0c

00012548 <console_out>:
	if ('\n' == c) {
   12548:	280a      	cmp	r0, #10
{
   1254a:	b538      	push	{r3, r4, r5, lr}
   1254c:	4604      	mov	r4, r0
   1254e:	4d07      	ldr	r5, [pc, #28]	; (1256c <console_out+0x24>)
	if ('\n' == c) {
   12550:	d104      	bne.n	1255c <console_out+0x14>
   12552:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   12554:	6883      	ldr	r3, [r0, #8]
   12556:	210d      	movs	r1, #13
   12558:	685b      	ldr	r3, [r3, #4]
   1255a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   1255c:	6828      	ldr	r0, [r5, #0]
   1255e:	6883      	ldr	r3, [r0, #8]
   12560:	b2e1      	uxtb	r1, r4
   12562:	685b      	ldr	r3, [r3, #4]
   12564:	4798      	blx	r3
}
   12566:	4620      	mov	r0, r4
   12568:	bd38      	pop	{r3, r4, r5, pc}
   1256a:	bf00      	nop
   1256c:	20010b0c 	.word	0x20010b0c

00012570 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12570:	b570      	push	{r4, r5, r6, lr}
   12572:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
   12574:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   12576:	480d      	ldr	r0, [pc, #52]	; (125ac <onoff_stop+0x3c>)
{
   12578:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1257a:	1a23      	subs	r3, r4, r0
   1257c:	109a      	asrs	r2, r3, #2
   1257e:	4b0c      	ldr	r3, [pc, #48]	; (125b0 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
   12580:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   12582:	4353      	muls	r3, r2
   12584:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   12586:	435d      	muls	r5, r3
   12588:	f105 0340 	add.w	r3, r5, #64	; 0x40
   1258c:	4418      	add	r0, r3
   1258e:	f008 fcb1 	bl	1aef4 <set_off_state>
	if (err < 0) {
   12592:	1e01      	subs	r1, r0, #0
   12594:	db04      	blt.n	125a0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   12596:	4b07      	ldr	r3, [pc, #28]	; (125b4 <onoff_stop+0x44>)
   12598:	442b      	add	r3, r5
   1259a:	685b      	ldr	r3, [r3, #4]
   1259c:	4798      	blx	r3
	return 0;
   1259e:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   125a0:	4620      	mov	r0, r4
   125a2:	4633      	mov	r3, r6
}
   125a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   125a8:	4718      	bx	r3
   125aa:	bf00      	nop
   125ac:	20010b20 	.word	0x20010b20
   125b0:	b6db6db7 	.word	0xb6db6db7
   125b4:	0001dca8 	.word	0x0001dca8

000125b8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   125b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   125bc:	4c0f      	ldr	r4, [pc, #60]	; (125fc <onoff_start+0x44>)
   125be:	4d10      	ldr	r5, [pc, #64]	; (12600 <onoff_start+0x48>)
   125c0:	1b03      	subs	r3, r0, r4
   125c2:	109b      	asrs	r3, r3, #2
   125c4:	435d      	muls	r5, r3
   125c6:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   125c8:	250c      	movs	r5, #12
   125ca:	435d      	muls	r5, r3
{
   125cc:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   125ce:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   125d2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   125d4:	4420      	add	r0, r4
   125d6:	2140      	movs	r1, #64	; 0x40
   125d8:	f008 fca5 	bl	1af26 <set_starting_state>
	if (err < 0) {
   125dc:	1e01      	subs	r1, r0, #0
   125de:	db08      	blt.n	125f2 <onoff_start+0x3a>
	subdata->cb = cb;
   125e0:	4b08      	ldr	r3, [pc, #32]	; (12604 <onoff_start+0x4c>)
   125e2:	442c      	add	r4, r5
	subdata->user_data = user_data;
   125e4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   125e8:	4b07      	ldr	r3, [pc, #28]	; (12608 <onoff_start+0x50>)
   125ea:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   125ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   125f0:	4718      	bx	r3
		notify(mgr, err);
   125f2:	4638      	mov	r0, r7
   125f4:	4633      	mov	r3, r6
}
   125f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   125fa:	4718      	bx	r3
   125fc:	20010b20 	.word	0x20010b20
   12600:	b6db6db7 	.word	0xb6db6db7
   12604:	0001af89 	.word	0x0001af89
   12608:	0001dca8 	.word	0x0001dca8

0001260c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   1260c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1260e:	2200      	movs	r2, #0
   12610:	2101      	movs	r1, #1
{
   12612:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   12614:	2005      	movs	r0, #5
   12616:	f000 fb0b 	bl	12c30 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1261a:	2005      	movs	r0, #5
   1261c:	f000 faea 	bl	12bf4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   12620:	480f      	ldr	r0, [pc, #60]	; (12660 <clk_init+0x54>)
   12622:	f001 ff35 	bl	14490 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   12626:	4b0f      	ldr	r3, [pc, #60]	; (12664 <clk_init+0x58>)
   12628:	4298      	cmp	r0, r3
   1262a:	d115      	bne.n	12658 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1262c:	f009 f822 	bl	1b674 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   12630:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   12632:	490d      	ldr	r1, [pc, #52]	; (12668 <clk_init+0x5c>)
   12634:	4630      	mov	r0, r6
   12636:	f006 fe8d 	bl	19354 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1263a:	2800      	cmp	r0, #0
   1263c:	db0b      	blt.n	12656 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1263e:	2501      	movs	r5, #1
   12640:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   12642:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   12644:	4908      	ldr	r1, [pc, #32]	; (12668 <clk_init+0x5c>)
   12646:	f104 001c 	add.w	r0, r4, #28
   1264a:	f006 fe83 	bl	19354 <onoff_manager_init>
		if (err < 0) {
   1264e:	2800      	cmp	r0, #0
   12650:	db01      	blt.n	12656 <clk_init+0x4a>
	}

	return 0;
   12652:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   12654:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   12656:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   12658:	f06f 0004 	mvn.w	r0, #4
   1265c:	e7fb      	b.n	12656 <clk_init+0x4a>
   1265e:	bf00      	nop
   12660:	000126a1 	.word	0x000126a1
   12664:	0bad0000 	.word	0x0bad0000
   12668:	0001dcf0 	.word	0x0001dcf0

0001266c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1266c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1266e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   12670:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   12672:	434b      	muls	r3, r1
   12674:	4808      	ldr	r0, [pc, #32]	; (12698 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
   12676:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12678:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   1267a:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   1267c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12680:	4418      	add	r0, r3
	sub_data->cb = NULL;
   12682:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12684:	f008 fc6d 	bl	1af62 <set_on_state>
	if (callback) {
   12688:	b12d      	cbz	r5, 12696 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1268a:	4632      	mov	r2, r6
   1268c:	462b      	mov	r3, r5
}
   1268e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12692:	4802      	ldr	r0, [pc, #8]	; (1269c <clkstarted_handle.constprop.0+0x30>)
   12694:	4718      	bx	r3
}
   12696:	bd70      	pop	{r4, r5, r6, pc}
   12698:	20010b20 	.word	0x20010b20
   1269c:	200100e0 	.word	0x200100e0

000126a0 <clock_event_handler>:
	switch (event) {
   126a0:	b110      	cbz	r0, 126a8 <clock_event_handler+0x8>
   126a2:	2801      	cmp	r0, #1
   126a4:	d004      	beq.n	126b0 <clock_event_handler+0x10>
   126a6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   126a8:	4b03      	ldr	r3, [pc, #12]	; (126b8 <clock_event_handler+0x18>)
   126aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   126ac:	075b      	lsls	r3, r3, #29
   126ae:	d101      	bne.n	126b4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   126b0:	f7ff bfdc 	b.w	1266c <clkstarted_handle.constprop.0>
}
   126b4:	4770      	bx	lr
   126b6:	bf00      	nop
   126b8:	20010b20 	.word	0x20010b20

000126bc <hfclk_start>:
{
   126bc:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   126be:	f009 f9eb 	bl	1ba98 <z_impl_k_uptime_ticks>
   126c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   126c6:	460c      	mov	r4, r1
   126c8:	fba0 0103 	umull	r0, r1, r0, r3
   126cc:	fb03 1104 	mla	r1, r3, r4, r1
}
   126d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   126d4:	0bc3      	lsrs	r3, r0, #15
		hf_start_tstamp = k_uptime_get();
   126d6:	4a04      	ldr	r2, [pc, #16]	; (126e8 <hfclk_start+0x2c>)
   126d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   126dc:	2001      	movs	r0, #1
   126de:	0bc9      	lsrs	r1, r1, #15
   126e0:	e9c2 3100 	strd	r3, r1, [r2]
   126e4:	f001 bee4 	b.w	144b0 <nrfx_clock_start>
   126e8:	200103a0 	.word	0x200103a0

000126ec <generic_hfclk_start>:
{
   126ec:	b508      	push	{r3, lr}
   126ee:	f04f 0320 	mov.w	r3, #32
   126f2:	f3ef 8111 	mrs	r1, BASEPRI
   126f6:	f383 8811 	msr	BASEPRI, r3
   126fa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   126fe:	4a11      	ldr	r2, [pc, #68]	; (12744 <generic_hfclk_start+0x58>)
   12700:	6813      	ldr	r3, [r2, #0]
   12702:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12706:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1270a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1270c:	d00b      	beq.n	12726 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1270e:	4a0e      	ldr	r2, [pc, #56]	; (12748 <generic_hfclk_start+0x5c>)
   12710:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12714:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   12718:	f013 0301 	ands.w	r3, r3, #1
   1271c:	d003      	beq.n	12726 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   1271e:	480b      	ldr	r0, [pc, #44]	; (1274c <generic_hfclk_start+0x60>)
   12720:	f008 fc1f 	bl	1af62 <set_on_state>
			already_started = true;
   12724:	2301      	movs	r3, #1
	__asm__ volatile(
   12726:	f381 8811 	msr	BASEPRI, r1
   1272a:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1272e:	b123      	cbz	r3, 1273a <generic_hfclk_start+0x4e>
}
   12730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   12734:	2000      	movs	r0, #0
   12736:	f7ff bf99 	b.w	1266c <clkstarted_handle.constprop.0>
}
   1273a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   1273e:	f7ff bfbd 	b.w	126bc <hfclk_start>
   12742:	bf00      	nop
   12744:	20010b70 	.word	0x20010b70
   12748:	40005000 	.word	0x40005000
   1274c:	20010b60 	.word	0x20010b60

00012750 <hfclk_stop>:
{
   12750:	b510      	push	{r4, lr}
   12752:	f009 f9a1 	bl	1ba98 <z_impl_k_uptime_ticks>
   12756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1275a:	460c      	mov	r4, r1
   1275c:	fba0 0103 	umull	r0, r1, r0, r3
   12760:	fb03 1104 	mla	r1, r3, r4, r1
}
   12764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12768:	0bc3      	lsrs	r3, r0, #15
		hf_stop_tstamp = k_uptime_get();
   1276a:	4a04      	ldr	r2, [pc, #16]	; (1277c <hfclk_stop+0x2c>)
   1276c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12770:	2001      	movs	r0, #1
   12772:	0bc9      	lsrs	r1, r1, #15
   12774:	e9c2 3100 	strd	r3, r1, [r2]
   12778:	f001 becc 	b.w	14514 <nrfx_clock_stop>
   1277c:	200103a8 	.word	0x200103a8

00012780 <generic_hfclk_stop>:
   12780:	4b06      	ldr	r3, [pc, #24]	; (1279c <generic_hfclk_stop+0x1c>)
   12782:	e8d3 2fef 	ldaex	r2, [r3]
   12786:	f022 0102 	bic.w	r1, r2, #2
   1278a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1278e:	2800      	cmp	r0, #0
   12790:	d1f7      	bne.n	12782 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12792:	07d3      	lsls	r3, r2, #31
   12794:	d401      	bmi.n	1279a <generic_hfclk_stop+0x1a>
	hfclk_stop();
   12796:	f7ff bfdb 	b.w	12750 <hfclk_stop>
}
   1279a:	4770      	bx	lr
   1279c:	20010b70 	.word	0x20010b70

000127a0 <cmd_status>:
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   127a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   127a4:	4f32      	ldr	r7, [pc, #200]	; (12870 <cmd_status+0xd0>)
   127a6:	4604      	mov	r4, r0
   127a8:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   127ac:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   127b0:	f04f 0320 	mov.w	r3, #32
   127b4:	f3ef 8811 	mrs	r8, BASEPRI
   127b8:	f383 8811 	msr	BASEPRI, r3
   127bc:	f3bf 8f6f 	isb	sy
   127c0:	f009 f96a 	bl	1ba98 <z_impl_k_uptime_ticks>
   127c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   127c8:	460a      	mov	r2, r1
   127ca:	fba0 0103 	umull	r0, r1, r0, r3
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   127ce:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
   127d2:	fb03 1102 	mla	r1, r3, r2, r1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   127d6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   127da:	4b26      	ldr	r3, [pc, #152]	; (12874 <cmd_status+0xd4>)
   127dc:	0bc5      	lsrs	r5, r0, #15
   127de:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   127e2:	4b25      	ldr	r3, [pc, #148]	; (12878 <cmd_status+0xd8>)
   127e4:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   127e8:	f8d3 a000 	ldr.w	sl, [r3]
	__asm__ volatile(
   127ec:	f388 8811 	msr	BASEPRI, r8
   127f0:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   127f4:	2100      	movs	r1, #0
   127f6:	4620      	mov	r0, r4
   127f8:	4a20      	ldr	r2, [pc, #128]	; (1287c <cmd_status+0xdc>)
   127fa:	f007 fcca 	bl	1a192 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   127fe:	f019 0f01 	tst.w	r9, #1
   12802:	f8df 9090 	ldr.w	r9, [pc, #144]	; 12894 <cmd_status+0xf4>
   12806:	f8df 8090 	ldr.w	r8, [pc, #144]	; 12898 <cmd_status+0xf8>
   1280a:	f8b9 301a 	ldrh.w	r3, [r9, #26]
   1280e:	4f1c      	ldr	r7, [pc, #112]	; (12880 <cmd_status+0xe0>)
   12810:	9300      	str	r3, [sp, #0]
   12812:	4620      	mov	r0, r4
   12814:	bf14      	ite	ne
   12816:	4643      	movne	r3, r8
   12818:	463b      	moveq	r3, r7
   1281a:	2100      	movs	r1, #0
   1281c:	4a19      	ldr	r2, [pc, #100]	; (12884 <cmd_status+0xe4>)
   1281e:	f007 fcb8 	bl	1a192 <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   12822:	eba5 030b 	sub.w	r3, r5, fp
   12826:	4620      	mov	r0, r4
   12828:	9300      	str	r3, [sp, #0]
   1282a:	2100      	movs	r1, #0
   1282c:	465b      	mov	r3, fp
   1282e:	4a16      	ldr	r2, [pc, #88]	; (12888 <cmd_status+0xe8>)
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   12830:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   12834:	f007 fcad 	bl	1a192 <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   12838:	4653      	mov	r3, sl
   1283a:	4620      	mov	r0, r4
   1283c:	2100      	movs	r1, #0
   1283e:	4a13      	ldr	r2, [pc, #76]	; (1288c <cmd_status+0xec>)
   12840:	9500      	str	r5, [sp, #0]
   12842:	f007 fca6 	bl	1a192 <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   12846:	4620      	mov	r0, r4
   12848:	2100      	movs	r1, #0
   1284a:	4a11      	ldr	r2, [pc, #68]	; (12890 <cmd_status+0xf0>)
   1284c:	f007 fca1 	bl	1a192 <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   12850:	f8b9 3036 	ldrh.w	r3, [r9, #54]	; 0x36
   12854:	4620      	mov	r0, r4
   12856:	9300      	str	r3, [sp, #0]
   12858:	2100      	movs	r1, #0
   1285a:	2e00      	cmp	r6, #0
   1285c:	bf14      	ite	ne
   1285e:	4643      	movne	r3, r8
   12860:	463b      	moveq	r3, r7
   12862:	4a08      	ldr	r2, [pc, #32]	; (12884 <cmd_status+0xe4>)
   12864:	f007 fc95 	bl	1a192 <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   12868:	2000      	movs	r0, #0
   1286a:	b003      	add	sp, #12
   1286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12870:	40005000 	.word	0x40005000
   12874:	200103a0 	.word	0x200103a0
   12878:	200103a8 	.word	0x200103a8
   1287c:	0001f420 	.word	0x0001f420
   12880:	0001f41b 	.word	0x0001f41b
   12884:	0001f42b 	.word	0x0001f42b
   12888:	0001f445 	.word	0x0001f445
   1288c:	0001f467 	.word	0x0001f467
   12890:	0001f488 	.word	0x0001f488
   12894:	20010b20 	.word	0x20010b20
   12898:	0001e916 	.word	0x0001e916

0001289c <api_blocking_start>:
{
   1289c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1289e:	2200      	movs	r2, #0
   128a0:	2301      	movs	r3, #1
   128a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   128a6:	ab04      	add	r3, sp, #16
   128a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   128ac:	4a09      	ldr	r2, [pc, #36]	; (128d4 <api_blocking_start+0x38>)
   128ae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   128b0:	f8cd d000 	str.w	sp, [sp]
   128b4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   128b8:	f008 fb8c 	bl	1afd4 <api_start>
	if (err < 0) {
   128bc:	2800      	cmp	r0, #0
   128be:	db05      	blt.n	128cc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   128c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   128c4:	2300      	movs	r3, #0
   128c6:	4668      	mov	r0, sp
   128c8:	f002 fe52 	bl	15570 <z_impl_k_sem_take>
}
   128cc:	b007      	add	sp, #28
   128ce:	f85d fb04 	ldr.w	pc, [sp], #4
   128d2:	bf00      	nop
   128d4:	0001af9b 	.word	0x0001af9b

000128d8 <z_nrf_clock_control_lf_on>:
{
   128d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   128dc:	2201      	movs	r2, #1
   128de:	4607      	mov	r7, r0
   128e0:	4936      	ldr	r1, [pc, #216]	; (129bc <z_nrf_clock_control_lf_on+0xe4>)
   128e2:	e8d1 3fef 	ldaex	r3, [r1]
   128e6:	e8c1 2fe0 	stlex	r0, r2, [r1]
   128ea:	2800      	cmp	r0, #0
   128ec:	d1f9      	bne.n	128e2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   128ee:	b933      	cbnz	r3, 128fe <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   128f0:	4933      	ldr	r1, [pc, #204]	; (129c0 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
   128f2:	4834      	ldr	r0, [pc, #208]	; (129c4 <z_nrf_clock_control_lf_on+0xec>)
   128f4:	604b      	str	r3, [r1, #4]
   128f6:	60cb      	str	r3, [r1, #12]
   128f8:	608a      	str	r2, [r1, #8]
   128fa:	f006 fd3e 	bl	1937a <onoff_request>
	switch (start_mode) {
   128fe:	1e7b      	subs	r3, r7, #1
   12900:	2b01      	cmp	r3, #1
   12902:	d82e      	bhi.n	12962 <z_nrf_clock_control_lf_on+0x8a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   12904:	2f01      	cmp	r7, #1
   12906:	d106      	bne.n	12916 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   12908:	4b2f      	ldr	r3, [pc, #188]	; (129c8 <z_nrf_clock_control_lf_on+0xf0>)
   1290a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1290e:	f003 0303 	and.w	r3, r3, #3
   12912:	2b02      	cmp	r3, #2
   12914:	d025      	beq.n	12962 <z_nrf_clock_control_lf_on+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12916:	f009 f851 	bl	1b9bc <k_is_in_isr>
   1291a:	4604      	mov	r4, r0
   1291c:	b918      	cbnz	r0, 12926 <z_nrf_clock_control_lf_on+0x4e>
	return !z_sys_post_kernel;
   1291e:	4b2b      	ldr	r3, [pc, #172]	; (129cc <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
   12920:	781b      	ldrb	r3, [r3, #0]
   12922:	2b00      	cmp	r3, #0
   12924:	d144      	bne.n	129b0 <z_nrf_clock_control_lf_on+0xd8>
	__asm__ volatile(
   12926:	f04f 0320 	mov.w	r3, #32
   1292a:	f3ef 8611 	mrs	r6, BASEPRI
   1292e:	f383 8811 	msr	BASEPRI, r3
   12932:	f3bf 8f6f 	isb	sy
   12936:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12938:	4d23      	ldr	r5, [pc, #140]	; (129c8 <z_nrf_clock_control_lf_on+0xf0>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1293a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 129d8 <z_nrf_clock_control_lf_on+0x100>
   1293e:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   12940:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12944:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   12948:	03d2      	lsls	r2, r2, #15
   1294a:	d50c      	bpl.n	12966 <z_nrf_clock_control_lf_on+0x8e>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1294c:	f003 0303 	and.w	r3, r3, #3
   12950:	2b02      	cmp	r3, #2
   12952:	d001      	beq.n	12958 <z_nrf_clock_control_lf_on+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12954:	2f01      	cmp	r7, #1
   12956:	d106      	bne.n	12966 <z_nrf_clock_control_lf_on+0x8e>
	if (isr_mode) {
   12958:	b334      	cbz	r4, 129a8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1295a:	f386 8811 	msr	BASEPRI, r6
   1295e:	f3bf 8f6f 	isb	sy
}
   12962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   12966:	b1d4      	cbz	r4, 1299e <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   12968:	4630      	mov	r0, r6
   1296a:	f000 fa6b 	bl	12e44 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1296e:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12972:	b2db      	uxtb	r3, r3
   12974:	2b01      	cmp	r3, #1
   12976:	d1e3      	bne.n	12940 <z_nrf_clock_control_lf_on+0x68>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12978:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   1297c:	2a00      	cmp	r2, #0
   1297e:	d0df      	beq.n	12940 <z_nrf_clock_control_lf_on+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12980:	2200      	movs	r2, #0
   12982:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12986:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1298a:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1298c:	2120      	movs	r1, #32
   1298e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   12992:	4a0f      	ldr	r2, [pc, #60]	; (129d0 <z_nrf_clock_control_lf_on+0xf8>)
   12994:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12998:	4a0e      	ldr	r2, [pc, #56]	; (129d4 <z_nrf_clock_control_lf_on+0xfc>)
   1299a:	6013      	str	r3, [r2, #0]
}
   1299c:	e7d0      	b.n	12940 <z_nrf_clock_control_lf_on+0x68>
	return z_impl_k_sleep(timeout);
   1299e:	2100      	movs	r1, #0
   129a0:	2021      	movs	r0, #33	; 0x21
   129a2:	f002 fd99 	bl	154d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   129a6:	e7e2      	b.n	1296e <z_nrf_clock_control_lf_on+0x96>
    p_reg->INTENSET = mask;
   129a8:	2302      	movs	r3, #2
   129aa:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   129ae:	e7d8      	b.n	12962 <z_nrf_clock_control_lf_on+0x8a>
    p_reg->INTENCLR = mask;
   129b0:	2202      	movs	r2, #2
   129b2:	4b05      	ldr	r3, [pc, #20]	; (129c8 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   129b4:	4606      	mov	r6, r0
   129b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   129ba:	e7bd      	b.n	12938 <z_nrf_clock_control_lf_on+0x60>
   129bc:	20010b74 	.word	0x20010b74
   129c0:	20010b10 	.word	0x20010b10
   129c4:	20010b3c 	.word	0x20010b3c
   129c8:	40005000 	.word	0x40005000
   129cc:	2001ecbf 	.word	0x2001ecbf
   129d0:	e000e100 	.word	0xe000e100
   129d4:	40005008 	.word	0x40005008
   129d8:	40005104 	.word	0x40005104

000129dc <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   129dc:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   129de:	4b08      	ldr	r3, [pc, #32]	; (12a00 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   129e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   129e4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   129e8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   129ec:	4290      	cmp	r0, r2
   129ee:	d100      	bne.n	129f2 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   129f0:	4770      	bx	lr
   129f2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   129f6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   129f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   129fc:	e7f2      	b.n	129e4 <handle_next_cycle_case+0x8>
   129fe:	bf00      	nop
   12a00:	40015000 	.word	0x40015000

00012a04 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a04:	2200      	movs	r2, #0
   12a06:	4b07      	ldr	r3, [pc, #28]	; (12a24 <rtc_nrf_isr+0x20>)
   12a08:	601a      	str	r2, [r3, #0]
   12a0a:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   12a0c:	4a06      	ldr	r2, [pc, #24]	; (12a28 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   12a0e:	4b07      	ldr	r3, [pc, #28]	; (12a2c <rtc_nrf_isr+0x28>)
   12a10:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   12a14:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12a16:	1ac0      	subs	r0, r0, r3
   12a18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   12a1c:	4403      	add	r3, r0
   12a1e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   12a20:	f003 b852 	b.w	15ac8 <z_clock_announce>
   12a24:	40015140 	.word	0x40015140
   12a28:	20010b78 	.word	0x20010b78
   12a2c:	40015000 	.word	0x40015000

00012a30 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   12a30:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   12a32:	2400      	movs	r4, #0
   12a34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   12a38:	4d0e      	ldr	r5, [pc, #56]	; (12a74 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a3a:	4b0f      	ldr	r3, [pc, #60]	; (12a78 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   12a3c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a40:	601c      	str	r4, [r3, #0]
   12a42:	681b      	ldr	r3, [r3, #0]
   12a44:	4b0d      	ldr	r3, [pc, #52]	; (12a7c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12a46:	2101      	movs	r1, #1
   12a48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   12a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   12a50:	4622      	mov	r2, r4
   12a52:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   12a56:	2015      	movs	r0, #21
   12a58:	f000 f8ea 	bl	12c30 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12a5c:	2015      	movs	r0, #21
   12a5e:	f000 f8c9 	bl	12bf4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12a62:	2301      	movs	r3, #1
   12a64:	4a06      	ldr	r2, [pc, #24]	; (12a80 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   12a66:	2002      	movs	r0, #2
   12a68:	6013      	str	r3, [r2, #0]
   12a6a:	602b      	str	r3, [r5, #0]
   12a6c:	f7ff ff34 	bl	128d8 <z_nrf_clock_control_lf_on>

	return 0;
}
   12a70:	4620      	mov	r0, r4
   12a72:	bd38      	pop	{r3, r4, r5, pc}
   12a74:	40015000 	.word	0x40015000
   12a78:	40015140 	.word	0x40015140
   12a7c:	e000e100 	.word	0xe000e100
   12a80:	40015008 	.word	0x40015008

00012a84 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   12a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12a86:	4b2e      	ldr	r3, [pc, #184]	; (12b40 <z_clock_set_timeout+0xbc>)
   12a88:	f1b0 3fff 	cmp.w	r0, #4294967295
   12a8c:	bf08      	it	eq
   12a8e:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12a90:	3801      	subs	r0, #1
   12a92:	2800      	cmp	r0, #0
   12a94:	dd41      	ble.n	12b1a <z_clock_set_timeout+0x96>
   12a96:	4298      	cmp	r0, r3
   12a98:	bfa8      	it	ge
   12a9a:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   12a9c:	4b29      	ldr	r3, [pc, #164]	; (12b44 <z_clock_set_timeout+0xc0>)

	uint32_t unannounced = counter_sub(counter(), last_count);
   12a9e:	492a      	ldr	r1, [pc, #168]	; (12b48 <z_clock_set_timeout+0xc4>)
   12aa0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   12aa4:	6809      	ldr	r1, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12aa6:	2600      	movs	r6, #0
	return (a - b) & COUNTER_MAX;
   12aa8:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   12aaa:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   12aae:	bf18      	it	ne
   12ab0:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   12ab2:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   12ab6:	3401      	adds	r4, #1
   12ab8:	4420      	add	r0, r4
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   12aba:	4c21      	ldr	r4, [pc, #132]	; (12b40 <z_clock_set_timeout+0xbc>)
   12abc:	4d23      	ldr	r5, [pc, #140]	; (12b4c <z_clock_set_timeout+0xc8>)
   12abe:	42a0      	cmp	r0, r4
   12ac0:	bf94      	ite	ls
   12ac2:	180c      	addls	r4, r1, r0
   12ac4:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   12ac6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   12aca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   12ace:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   12ad2:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12ad6:	602e      	str	r6, [r5, #0]
   12ad8:	682f      	ldr	r7, [r5, #0]
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12ada:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12ade:	f8c3 7540 	str.w	r7, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12ae2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	return (a - b) & COUNTER_MAX;
   12ae6:	1a53      	subs	r3, r2, r1
   12ae8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   12aec:	2b01      	cmp	r3, #1
   12aee:	d104      	bne.n	12afa <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
   12af0:	200f      	movs	r0, #15
   12af2:	f008 ff69 	bl	1b9c8 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12af6:	602e      	str	r6, [r5, #0]
   12af8:	682b      	ldr	r3, [r5, #0]
   12afa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   12afe:	4b14      	ldr	r3, [pc, #80]	; (12b50 <z_clock_set_timeout+0xcc>)
   12b00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   12b04:	4b0f      	ldr	r3, [pc, #60]	; (12b44 <z_clock_set_timeout+0xc0>)
   12b06:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12b0a:	1a22      	subs	r2, r4, r0
   12b0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   12b10:	2a01      	cmp	r2, #1
   12b12:	d104      	bne.n	12b1e <z_clock_set_timeout+0x9a>
		handle_next_cycle_case(t);
   12b14:	f7ff ff62 	bl	129dc <handle_next_cycle_case>
   12b18:	e00b      	b.n	12b32 <z_clock_set_timeout+0xae>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12b1a:	2000      	movs	r0, #0
   12b1c:	e7be      	b.n	12a9c <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   12b1e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12b22:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   12b26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   12b2a:	1a24      	subs	r4, r4, r0
   12b2c:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   12b2e:	0223      	lsls	r3, r4, #8
   12b30:	d4f0      	bmi.n	12b14 <z_clock_set_timeout+0x90>
    p_reg->INTENSET = mask;
   12b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12b36:	4b03      	ldr	r3, [pc, #12]	; (12b44 <z_clock_set_timeout+0xc0>)
   12b38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   12b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b3e:	bf00      	nop
   12b40:	007fffff 	.word	0x007fffff
   12b44:	40015000 	.word	0x40015000
   12b48:	20010b78 	.word	0x20010b78
   12b4c:	40015140 	.word	0x40015140
   12b50:	e000e100 	.word	0xe000e100

00012b54 <z_clock_elapsed>:
	__asm__ volatile(
   12b54:	f04f 0220 	mov.w	r2, #32
   12b58:	f3ef 8311 	mrs	r3, BASEPRI
   12b5c:	f382 8811 	msr	BASEPRI, r2
   12b60:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   12b64:	4a06      	ldr	r2, [pc, #24]	; (12b80 <z_clock_elapsed+0x2c>)
   12b66:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   12b6a:	4a06      	ldr	r2, [pc, #24]	; (12b84 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   12b6c:	6812      	ldr	r2, [r2, #0]
   12b6e:	1a80      	subs	r0, r0, r2
   12b70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   12b74:	f383 8811 	msr	BASEPRI, r3
   12b78:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   12b7c:	4770      	bx	lr
   12b7e:	bf00      	nop
   12b80:	40015000 	.word	0x40015000
   12b84:	20010b78 	.word	0x20010b78

00012b88 <z_timer_cycle_get_32>:
	__asm__ volatile(
   12b88:	f04f 0320 	mov.w	r3, #32
   12b8c:	f3ef 8211 	mrs	r2, BASEPRI
   12b90:	f383 8811 	msr	BASEPRI, r3
   12b94:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   12b98:	4906      	ldr	r1, [pc, #24]	; (12bb4 <z_timer_cycle_get_32+0x2c>)
   12b9a:	4b07      	ldr	r3, [pc, #28]	; (12bb8 <z_timer_cycle_get_32+0x30>)
   12b9c:	6808      	ldr	r0, [r1, #0]
   12b9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   12ba2:	f382 8811 	msr	BASEPRI, r2
   12ba6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   12baa:	1a1b      	subs	r3, r3, r0
   12bac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   12bb0:	4418      	add	r0, r3
   12bb2:	4770      	bx	lr
   12bb4:	20010b78 	.word	0x20010b78
   12bb8:	40015000 	.word	0x40015000

00012bbc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12bbc:	4a0a      	ldr	r2, [pc, #40]	; (12be8 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12bbe:	490b      	ldr	r1, [pc, #44]	; (12bec <arch_swap+0x30>)
	_current->arch.basepri = key;
   12bc0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12bc2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   12bc4:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
	_current->arch.swap_return_value = _k_neg_eagain;
   12bc8:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12bcc:	4908      	ldr	r1, [pc, #32]	; (12bf0 <arch_swap+0x34>)
   12bce:	684b      	ldr	r3, [r1, #4]
   12bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12bd4:	604b      	str	r3, [r1, #4]
   12bd6:	2300      	movs	r3, #0
   12bd8:	f383 8811 	msr	BASEPRI, r3
   12bdc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12be0:	6893      	ldr	r3, [r2, #8]
}
   12be2:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
   12be6:	4770      	bx	lr
   12be8:	20010bbc 	.word	0x20010bbc
   12bec:	0001ddc4 	.word	0x0001ddc4
   12bf0:	e000ed00 	.word	0xe000ed00

00012bf4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12bf4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12bf6:	2b00      	cmp	r3, #0
   12bf8:	db08      	blt.n	12c0c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12bfa:	2201      	movs	r2, #1
   12bfc:	f000 001f 	and.w	r0, r0, #31
   12c00:	fa02 f000 	lsl.w	r0, r2, r0
   12c04:	4a02      	ldr	r2, [pc, #8]	; (12c10 <arch_irq_enable+0x1c>)
   12c06:	095b      	lsrs	r3, r3, #5
   12c08:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12c0c:	4770      	bx	lr
   12c0e:	bf00      	nop
   12c10:	e000e100 	.word	0xe000e100

00012c14 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12c14:	4b05      	ldr	r3, [pc, #20]	; (12c2c <arch_irq_is_enabled+0x18>)
   12c16:	0942      	lsrs	r2, r0, #5
   12c18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12c1c:	2301      	movs	r3, #1
   12c1e:	f000 001f 	and.w	r0, r0, #31
   12c22:	fa03 f000 	lsl.w	r0, r3, r0
}
   12c26:	4010      	ands	r0, r2
   12c28:	4770      	bx	lr
   12c2a:	bf00      	nop
   12c2c:	e000e100 	.word	0xe000e100

00012c30 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12c30:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12c32:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   12c34:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c38:	bfac      	ite	ge
   12c3a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c3e:	4b06      	ldrlt	r3, [pc, #24]	; (12c58 <z_arm_irq_priority_set+0x28>)
   12c40:	ea4f 1141 	mov.w	r1, r1, lsl #5
   12c44:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c46:	bfab      	itete	ge
   12c48:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c4c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c50:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12c54:	5419      	strblt	r1, [r3, r0]
}
   12c56:	4770      	bx	lr
   12c58:	e000ed14 	.word	0xe000ed14

00012c5c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12c5c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12c60:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   12c62:	490b      	ldr	r1, [pc, #44]	; (12c90 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   12c64:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   12c68:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   12c6a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   12c6e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12c72:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   12c74:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12c78:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12c80:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12c84:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12c86:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12c88:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   12c8a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12c8e:	4770      	bx	lr
   12c90:	0001940d 	.word	0x0001940d

00012c94 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12c94:	4604      	mov	r4, r0
   12c96:	b508      	push	{r3, lr}
   12c98:	460e      	mov	r6, r1
   12c9a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
   12c9c:	f000 fc74 	bl	13588 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12ca0:	4b09      	ldr	r3, [pc, #36]	; (12cc8 <arch_switch_to_main_thread+0x34>)
   12ca2:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12ca4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   12ca8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12cac:	4628      	mov	r0, r5
   12cae:	f386 8809 	msr	PSP, r6
   12cb2:	2100      	movs	r1, #0
   12cb4:	b663      	cpsie	if
   12cb6:	f381 8811 	msr	BASEPRI, r1
   12cba:	f3bf 8f6f 	isb	sy
   12cbe:	2200      	movs	r2, #0
   12cc0:	2300      	movs	r3, #0
   12cc2:	f006 fba3 	bl	1940c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12cc6:	bf00      	nop
   12cc8:	20010bbc 	.word	0x20010bbc

00012ccc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12cce:	4607      	mov	r7, r0

	if (esf != NULL) {
   12cd0:	460c      	mov	r4, r1
   12cd2:	2900      	cmp	r1, #0
   12cd4:	d02d      	beq.n	12d32 <z_arm_fatal_error+0x66>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12cd6:	4e1a      	ldr	r6, [pc, #104]	; (12d40 <z_arm_fatal_error+0x74>)
   12cd8:	6833      	ldr	r3, [r6, #0]
   12cda:	0758      	lsls	r0, r3, #29
   12cdc:	d029      	beq.n	12d32 <z_arm_fatal_error+0x66>
   12cde:	4b19      	ldr	r3, [pc, #100]	; (12d44 <z_arm_fatal_error+0x78>)
   12ce0:	4d19      	ldr	r5, [pc, #100]	; (12d48 <z_arm_fatal_error+0x7c>)
   12ce2:	481a      	ldr	r0, [pc, #104]	; (12d4c <z_arm_fatal_error+0x80>)
   12ce4:	1aed      	subs	r5, r5, r3
   12ce6:	08ed      	lsrs	r5, r5, #3
   12ce8:	01ad      	lsls	r5, r5, #6
   12cea:	f045 0501 	orr.w	r5, r5, #1
   12cee:	f8ad 5000 	strh.w	r5, [sp]
   12cf2:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   12cf6:	6809      	ldr	r1, [r1, #0]
   12cf8:	f006 fee0 	bl	19abc <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12cfc:	6833      	ldr	r3, [r6, #0]
   12cfe:	0759      	lsls	r1, r3, #29
   12d00:	d017      	beq.n	12d32 <z_arm_fatal_error+0x66>
   12d02:	f8ad 5000 	strh.w	r5, [sp]
   12d06:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12d0a:	68e1      	ldr	r1, [r4, #12]
   12d0c:	4810      	ldr	r0, [pc, #64]	; (12d50 <z_arm_fatal_error+0x84>)
   12d0e:	f006 fed5 	bl	19abc <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12d12:	6833      	ldr	r3, [r6, #0]
   12d14:	075a      	lsls	r2, r3, #29
   12d16:	d00c      	beq.n	12d32 <z_arm_fatal_error+0x66>
   12d18:	462a      	mov	r2, r5
   12d1a:	69e1      	ldr	r1, [r4, #28]
   12d1c:	480d      	ldr	r0, [pc, #52]	; (12d54 <z_arm_fatal_error+0x88>)
   12d1e:	f006 fea0 	bl	19a62 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12d22:	6833      	ldr	r3, [r6, #0]
   12d24:	075b      	lsls	r3, r3, #29
   12d26:	d004      	beq.n	12d32 <z_arm_fatal_error+0x66>
   12d28:	462a      	mov	r2, r5
   12d2a:	69a1      	ldr	r1, [r4, #24]
   12d2c:	480a      	ldr	r0, [pc, #40]	; (12d58 <z_arm_fatal_error+0x8c>)
   12d2e:	f006 fe98 	bl	19a62 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12d32:	4621      	mov	r1, r4
   12d34:	4638      	mov	r0, r7
}
   12d36:	b003      	add	sp, #12
   12d38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   12d3c:	f001 bce8 	b.w	14710 <z_fatal_error>
   12d40:	2001014c 	.word	0x2001014c
   12d44:	0001c16c 	.word	0x0001c16c
   12d48:	0001c19c 	.word	0x0001c19c
   12d4c:	0001f4e0 	.word	0x0001f4e0
   12d50:	0001f50f 	.word	0x0001f50f
   12d54:	0001f53e 	.word	0x0001f53e
   12d58:	0001f54d 	.word	0x0001f54d

00012d5c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12d5c:	4a0e      	ldr	r2, [pc, #56]	; (12d98 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12d5e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12d60:	4b0e      	ldr	r3, [pc, #56]	; (12d9c <z_arm_prep_c+0x40>)
   12d62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12d66:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12d68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12d70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12d74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12d7c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12d80:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   12d84:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12d88:	f001 fd7c 	bl	14884 <z_bss_zero>
	z_data_copy();
   12d8c:	f001 fd84 	bl	14898 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12d90:	f000 fbcc 	bl	1352c <z_arm_interrupt_init>
	z_cstart();
   12d94:	f001 fdb2 	bl	148fc <z_cstart>
   12d98:	0000c000 	.word	0x0000c000
   12d9c:	e000ed00 	.word	0xe000ed00

00012da0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12da0:	4914      	ldr	r1, [pc, #80]	; (12df4 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12da2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12da4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   12da8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12daa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12dae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12db2:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12db4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12db8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12dbc:	4f0e      	ldr	r7, [pc, #56]	; (12df8 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12dbe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12dc2:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   12dc4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12dc6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12dc8:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
    movs r3, #0
   12dcc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12dce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12dd2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12dd6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   12dda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12dde:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   12de2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   12de6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   12de8:	f008 f921 	bl	1b02e <configure_builtin_stack_guard>
    pop {r2, lr}
   12dec:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   12df0:	4770      	bx	lr
   12df2:	0000      	.short	0x0000
    ldr r1, =_kernel
   12df4:	20010bbc 	.word	0x20010bbc
    ldr v4, =_SCS_ICSR
   12df8:	e000ed04 	.word	0xe000ed04

00012dfc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12dfc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12e00:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12e02:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12e06:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12e0a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12e0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12e10:	2902      	cmp	r1, #2
    beq _oops
   12e12:	d0ff      	beq.n	12e14 <_oops>

00012e14 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12e14:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   12e16:	f008 f90f 	bl	1b038 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12e1a:	bd01      	pop	{r0, pc}

00012e1c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12e1c:	4901      	ldr	r1, [pc, #4]	; (12e24 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12e1e:	2210      	movs	r2, #16
	str	r2, [r1]
   12e20:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12e22:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12e24:	e000ed10 	.word	0xe000ed10

00012e28 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12e28:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12e2a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12e2c:	f380 8811 	msr	BASEPRI, r0
	isb
   12e30:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12e34:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12e38:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12e3a:	b662      	cpsie	i
	isb
   12e3c:	f3bf 8f6f 	isb	sy

	bx	lr
   12e40:	4770      	bx	lr
   12e42:	bf00      	nop

00012e44 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12e44:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12e46:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12e48:	f381 8811 	msr	BASEPRI, r1

	wfe
   12e4c:	bf20      	wfe

	msr	BASEPRI, r0
   12e4e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12e52:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop

00012e58 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12e58:	bf30      	wfi
    b z_SysNmiOnReset
   12e5a:	f7ff bffd 	b.w	12e58 <z_SysNmiOnReset>
   12e5e:	bf00      	nop

00012e60 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12e60:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12e62:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12e64:	4a0b      	ldr	r2, [pc, #44]	; (12e94 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12e66:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   12e68:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12e6a:	bf1e      	ittt	ne
	movne	r1, #0
   12e6c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12e6e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
   12e70:	f008 fc0b 	blne	1b68a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12e74:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12e76:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12e7a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12e7e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12e82:	4905      	ldr	r1, [pc, #20]	; (12e98 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12e84:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12e86:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12e88:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12e8a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12e8e:	4903      	ldr	r1, [pc, #12]	; (12e9c <_isr_wrapper+0x3c>)
	bx r1
   12e90:	4708      	bx	r1
   12e92:	0000      	.short	0x0000
	ldr r2, =_kernel
   12e94:	20010bbc 	.word	0x20010bbc
	ldr r1, =_sw_isr_table
   12e98:	0001bf64 	.word	0x0001bf64
	ldr r1, =z_arm_int_exit
   12e9c:	00012ef1 	.word	0x00012ef1

00012ea0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12ea0:	f006 fd88 	bl	199b4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12ea4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12ea6:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   12eaa:	480b      	ldr	r0, [pc, #44]	; (12ed8 <__start+0x38>)
    ldr r1, =0xaa
   12eac:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   12eb4:	f008 fa22 	bl	1b2fc <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12eb8:	4807      	ldr	r0, [pc, #28]	; (12ed8 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12ebe:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12ec0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12ec4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12ec8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12eca:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12ecc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12ed0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12ed4:	f7ff ff42 	bl	12d5c <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
   12ed8:	2002c100 	.word	0x2002c100

00012edc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12edc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12ee0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12ee4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12ee6:	4672      	mov	r2, lr
	bl z_arm_fault
   12ee8:	f000 fa06 	bl	132f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12eec:	bd01      	pop	{r0, pc}
   12eee:	bf00      	nop

00012ef0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12ef0:	4b04      	ldr	r3, [pc, #16]	; (12f04 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12ef2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12ef4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   12ef6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12ef8:	d003      	beq.n	12f02 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12efa:	4903      	ldr	r1, [pc, #12]	; (12f08 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12f00:	600a      	str	r2, [r1, #0]

00012f02 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12f02:	4770      	bx	lr
	ldr r3, =_kernel
   12f04:	20010bbc 	.word	0x20010bbc
	ldr r1, =_SCS_ICSR
   12f08:	e000ed04 	.word	0xe000ed04

00012f0c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12f0c:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   12f0e:	4c48      	ldr	r4, [pc, #288]	; (13030 <usage_fault.isra.0+0x124>)
   12f10:	6823      	ldr	r3, [r4, #0]
   12f12:	075d      	lsls	r5, r3, #29
   12f14:	d009      	beq.n	12f2a <usage_fault.isra.0+0x1e>
   12f16:	4947      	ldr	r1, [pc, #284]	; (13034 <usage_fault.isra.0+0x128>)
   12f18:	4b47      	ldr	r3, [pc, #284]	; (13038 <usage_fault.isra.0+0x12c>)
   12f1a:	4848      	ldr	r0, [pc, #288]	; (1303c <usage_fault.isra.0+0x130>)
   12f1c:	1ac9      	subs	r1, r1, r3
   12f1e:	08c9      	lsrs	r1, r1, #3
   12f20:	0189      	lsls	r1, r1, #6
   12f22:	f041 0101 	orr.w	r1, r1, #1
   12f26:	f006 fd8f 	bl	19a48 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12f2a:	4b45      	ldr	r3, [pc, #276]	; (13040 <usage_fault.isra.0+0x134>)
   12f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f2e:	0198      	lsls	r0, r3, #6
   12f30:	d50c      	bpl.n	12f4c <usage_fault.isra.0+0x40>
		PR_FAULT_INFO("  Division by zero");
   12f32:	6823      	ldr	r3, [r4, #0]
   12f34:	0759      	lsls	r1, r3, #29
   12f36:	d009      	beq.n	12f4c <usage_fault.isra.0+0x40>
   12f38:	493e      	ldr	r1, [pc, #248]	; (13034 <usage_fault.isra.0+0x128>)
   12f3a:	4b3f      	ldr	r3, [pc, #252]	; (13038 <usage_fault.isra.0+0x12c>)
   12f3c:	4841      	ldr	r0, [pc, #260]	; (13044 <usage_fault.isra.0+0x138>)
   12f3e:	1ac9      	subs	r1, r1, r3
   12f40:	08c9      	lsrs	r1, r1, #3
   12f42:	0189      	lsls	r1, r1, #6
   12f44:	f041 0101 	orr.w	r1, r1, #1
   12f48:	f006 fd7e 	bl	19a48 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12f4c:	4b3c      	ldr	r3, [pc, #240]	; (13040 <usage_fault.isra.0+0x134>)
   12f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f50:	01da      	lsls	r2, r3, #7
   12f52:	d50c      	bpl.n	12f6e <usage_fault.isra.0+0x62>
		PR_FAULT_INFO("  Unaligned memory access");
   12f54:	6823      	ldr	r3, [r4, #0]
   12f56:	075b      	lsls	r3, r3, #29
   12f58:	d009      	beq.n	12f6e <usage_fault.isra.0+0x62>
   12f5a:	4936      	ldr	r1, [pc, #216]	; (13034 <usage_fault.isra.0+0x128>)
   12f5c:	4b36      	ldr	r3, [pc, #216]	; (13038 <usage_fault.isra.0+0x12c>)
   12f5e:	483a      	ldr	r0, [pc, #232]	; (13048 <usage_fault.isra.0+0x13c>)
   12f60:	1ac9      	subs	r1, r1, r3
   12f62:	08c9      	lsrs	r1, r1, #3
   12f64:	0189      	lsls	r1, r1, #6
   12f66:	f041 0101 	orr.w	r1, r1, #1
   12f6a:	f006 fd6d 	bl	19a48 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   12f6e:	4b34      	ldr	r3, [pc, #208]	; (13040 <usage_fault.isra.0+0x134>)
   12f70:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   12f72:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   12f76:	d00d      	beq.n	12f94 <usage_fault.isra.0+0x88>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   12f78:	6823      	ldr	r3, [r4, #0]
   12f7a:	075d      	lsls	r5, r3, #29
   12f7c:	d009      	beq.n	12f92 <usage_fault.isra.0+0x86>
   12f7e:	492d      	ldr	r1, [pc, #180]	; (13034 <usage_fault.isra.0+0x128>)
   12f80:	4b2d      	ldr	r3, [pc, #180]	; (13038 <usage_fault.isra.0+0x12c>)
   12f82:	4832      	ldr	r0, [pc, #200]	; (1304c <usage_fault.isra.0+0x140>)
   12f84:	1ac9      	subs	r1, r1, r3
   12f86:	08c9      	lsrs	r1, r1, #3
   12f88:	0189      	lsls	r1, r1, #6
   12f8a:	f041 0101 	orr.w	r1, r1, #1
   12f8e:	f006 fd5b 	bl	19a48 <log_0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   12f92:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12f94:	4b2a      	ldr	r3, [pc, #168]	; (13040 <usage_fault.isra.0+0x134>)
   12f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12f98:	0318      	lsls	r0, r3, #12
   12f9a:	d50c      	bpl.n	12fb6 <usage_fault.isra.0+0xaa>
		PR_FAULT_INFO("  No coprocessor instructions");
   12f9c:	6823      	ldr	r3, [r4, #0]
   12f9e:	0759      	lsls	r1, r3, #29
   12fa0:	d009      	beq.n	12fb6 <usage_fault.isra.0+0xaa>
   12fa2:	4924      	ldr	r1, [pc, #144]	; (13034 <usage_fault.isra.0+0x128>)
   12fa4:	4b24      	ldr	r3, [pc, #144]	; (13038 <usage_fault.isra.0+0x12c>)
   12fa6:	482a      	ldr	r0, [pc, #168]	; (13050 <usage_fault.isra.0+0x144>)
   12fa8:	1ac9      	subs	r1, r1, r3
   12faa:	08c9      	lsrs	r1, r1, #3
   12fac:	0189      	lsls	r1, r1, #6
   12fae:	f041 0101 	orr.w	r1, r1, #1
   12fb2:	f006 fd49 	bl	19a48 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12fb6:	4b22      	ldr	r3, [pc, #136]	; (13040 <usage_fault.isra.0+0x134>)
   12fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12fba:	035a      	lsls	r2, r3, #13
   12fbc:	d50c      	bpl.n	12fd8 <usage_fault.isra.0+0xcc>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12fbe:	6823      	ldr	r3, [r4, #0]
   12fc0:	075b      	lsls	r3, r3, #29
   12fc2:	d009      	beq.n	12fd8 <usage_fault.isra.0+0xcc>
   12fc4:	491b      	ldr	r1, [pc, #108]	; (13034 <usage_fault.isra.0+0x128>)
   12fc6:	4b1c      	ldr	r3, [pc, #112]	; (13038 <usage_fault.isra.0+0x12c>)
   12fc8:	4822      	ldr	r0, [pc, #136]	; (13054 <usage_fault.isra.0+0x148>)
   12fca:	1ac9      	subs	r1, r1, r3
   12fcc:	08c9      	lsrs	r1, r1, #3
   12fce:	0189      	lsls	r1, r1, #6
   12fd0:	f041 0101 	orr.w	r1, r1, #1
   12fd4:	f006 fd38 	bl	19a48 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12fd8:	4b19      	ldr	r3, [pc, #100]	; (13040 <usage_fault.isra.0+0x134>)
   12fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12fdc:	0398      	lsls	r0, r3, #14
   12fde:	d50c      	bpl.n	12ffa <usage_fault.isra.0+0xee>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12fe0:	6823      	ldr	r3, [r4, #0]
   12fe2:	0759      	lsls	r1, r3, #29
   12fe4:	d009      	beq.n	12ffa <usage_fault.isra.0+0xee>
   12fe6:	4913      	ldr	r1, [pc, #76]	; (13034 <usage_fault.isra.0+0x128>)
   12fe8:	4b13      	ldr	r3, [pc, #76]	; (13038 <usage_fault.isra.0+0x12c>)
   12fea:	481b      	ldr	r0, [pc, #108]	; (13058 <usage_fault.isra.0+0x14c>)
   12fec:	1ac9      	subs	r1, r1, r3
   12fee:	08c9      	lsrs	r1, r1, #3
   12ff0:	0189      	lsls	r1, r1, #6
   12ff2:	f041 0101 	orr.w	r1, r1, #1
   12ff6:	f006 fd27 	bl	19a48 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12ffa:	4b11      	ldr	r3, [pc, #68]	; (13040 <usage_fault.isra.0+0x134>)
   12ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ffe:	03da      	lsls	r2, r3, #15
   13000:	d50c      	bpl.n	1301c <usage_fault.isra.0+0x110>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13002:	6823      	ldr	r3, [r4, #0]
   13004:	075b      	lsls	r3, r3, #29
   13006:	d009      	beq.n	1301c <usage_fault.isra.0+0x110>
   13008:	490a      	ldr	r1, [pc, #40]	; (13034 <usage_fault.isra.0+0x128>)
   1300a:	4b0b      	ldr	r3, [pc, #44]	; (13038 <usage_fault.isra.0+0x12c>)
   1300c:	4813      	ldr	r0, [pc, #76]	; (1305c <usage_fault.isra.0+0x150>)
   1300e:	1ac9      	subs	r1, r1, r3
   13010:	08c9      	lsrs	r1, r1, #3
   13012:	0189      	lsls	r1, r1, #6
   13014:	f041 0101 	orr.w	r1, r1, #1
   13018:	f006 fd16 	bl	19a48 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1301c:	4a08      	ldr	r2, [pc, #32]	; (13040 <usage_fault.isra.0+0x134>)

	return reason;
}
   1301e:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   13020:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13022:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13026:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1302a:	6293      	str	r3, [r2, #40]	; 0x28
}
   1302c:	bd38      	pop	{r3, r4, r5, pc}
   1302e:	bf00      	nop
   13030:	2001014c 	.word	0x2001014c
   13034:	0001c19c 	.word	0x0001c19c
   13038:	0001c16c 	.word	0x0001c16c
   1303c:	0001f57b 	.word	0x0001f57b
   13040:	e000ed00 	.word	0xe000ed00
   13044:	0001f593 	.word	0x0001f593
   13048:	0001f5a6 	.word	0x0001f5a6
   1304c:	0001f5c0 	.word	0x0001f5c0
   13050:	0001f5ea 	.word	0x0001f5ea
   13054:	0001f608 	.word	0x0001f608
   13058:	0001f62d 	.word	0x0001f62d
   1305c:	0001f647 	.word	0x0001f647

00013060 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13060:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
   13062:	4c43      	ldr	r4, [pc, #268]	; (13170 <mem_manage_fault.isra.0+0x110>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13064:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   13066:	6823      	ldr	r3, [r4, #0]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13068:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1306a:	075b      	lsls	r3, r3, #29
   1306c:	d009      	beq.n	13082 <mem_manage_fault.isra.0+0x22>
   1306e:	4941      	ldr	r1, [pc, #260]	; (13174 <mem_manage_fault.isra.0+0x114>)
   13070:	4b41      	ldr	r3, [pc, #260]	; (13178 <mem_manage_fault.isra.0+0x118>)
   13072:	4842      	ldr	r0, [pc, #264]	; (1317c <mem_manage_fault.isra.0+0x11c>)
   13074:	1ac9      	subs	r1, r1, r3
   13076:	08c9      	lsrs	r1, r1, #3
   13078:	0189      	lsls	r1, r1, #6
   1307a:	f041 0101 	orr.w	r1, r1, #1
   1307e:	f006 fce3 	bl	19a48 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13082:	4b3f      	ldr	r3, [pc, #252]	; (13180 <mem_manage_fault.isra.0+0x120>)
   13084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13086:	06d8      	lsls	r0, r3, #27
   13088:	d50c      	bpl.n	130a4 <mem_manage_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
   1308a:	6823      	ldr	r3, [r4, #0]
   1308c:	0759      	lsls	r1, r3, #29
   1308e:	d009      	beq.n	130a4 <mem_manage_fault.isra.0+0x44>
   13090:	4938      	ldr	r1, [pc, #224]	; (13174 <mem_manage_fault.isra.0+0x114>)
   13092:	4b39      	ldr	r3, [pc, #228]	; (13178 <mem_manage_fault.isra.0+0x118>)
   13094:	483b      	ldr	r0, [pc, #236]	; (13184 <mem_manage_fault.isra.0+0x124>)
   13096:	1ac9      	subs	r1, r1, r3
   13098:	08c9      	lsrs	r1, r1, #3
   1309a:	0189      	lsls	r1, r1, #6
   1309c:	f041 0101 	orr.w	r1, r1, #1
   130a0:	f006 fcd2 	bl	19a48 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   130a4:	4b36      	ldr	r3, [pc, #216]	; (13180 <mem_manage_fault.isra.0+0x120>)
   130a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   130a8:	071a      	lsls	r2, r3, #28
   130aa:	d50c      	bpl.n	130c6 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
   130ac:	6823      	ldr	r3, [r4, #0]
   130ae:	075b      	lsls	r3, r3, #29
   130b0:	d009      	beq.n	130c6 <mem_manage_fault.isra.0+0x66>
   130b2:	4930      	ldr	r1, [pc, #192]	; (13174 <mem_manage_fault.isra.0+0x114>)
   130b4:	4b30      	ldr	r3, [pc, #192]	; (13178 <mem_manage_fault.isra.0+0x118>)
   130b6:	4834      	ldr	r0, [pc, #208]	; (13188 <mem_manage_fault.isra.0+0x128>)
   130b8:	1ac9      	subs	r1, r1, r3
   130ba:	08c9      	lsrs	r1, r1, #3
   130bc:	0189      	lsls	r1, r1, #6
   130be:	f041 0101 	orr.w	r1, r1, #1
   130c2:	f006 fcc1 	bl	19a48 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   130c6:	4b2e      	ldr	r3, [pc, #184]	; (13180 <mem_manage_fault.isra.0+0x120>)
   130c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   130ca:	0798      	lsls	r0, r3, #30
   130cc:	d524      	bpl.n	13118 <mem_manage_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Data Access Violation");
   130ce:	6823      	ldr	r3, [r4, #0]
   130d0:	0759      	lsls	r1, r3, #29
   130d2:	d009      	beq.n	130e8 <mem_manage_fault.isra.0+0x88>
   130d4:	4927      	ldr	r1, [pc, #156]	; (13174 <mem_manage_fault.isra.0+0x114>)
   130d6:	4b28      	ldr	r3, [pc, #160]	; (13178 <mem_manage_fault.isra.0+0x118>)
   130d8:	482c      	ldr	r0, [pc, #176]	; (1318c <mem_manage_fault.isra.0+0x12c>)
   130da:	1ac9      	subs	r1, r1, r3
   130dc:	08c9      	lsrs	r1, r1, #3
   130de:	0189      	lsls	r1, r1, #6
   130e0:	f041 0101 	orr.w	r1, r1, #1
   130e4:	f006 fcb0 	bl	19a48 <log_0>
		mmfar = SCB->MMFAR;
   130e8:	4b25      	ldr	r3, [pc, #148]	; (13180 <mem_manage_fault.isra.0+0x120>)
   130ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   130ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   130ee:	061a      	lsls	r2, r3, #24
   130f0:	d512      	bpl.n	13118 <mem_manage_fault.isra.0+0xb8>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   130f2:	6823      	ldr	r3, [r4, #0]
   130f4:	075b      	lsls	r3, r3, #29
   130f6:	d009      	beq.n	1310c <mem_manage_fault.isra.0+0xac>
   130f8:	4a1e      	ldr	r2, [pc, #120]	; (13174 <mem_manage_fault.isra.0+0x114>)
   130fa:	4b1f      	ldr	r3, [pc, #124]	; (13178 <mem_manage_fault.isra.0+0x118>)
   130fc:	4824      	ldr	r0, [pc, #144]	; (13190 <mem_manage_fault.isra.0+0x130>)
   130fe:	1ad2      	subs	r2, r2, r3
   13100:	08d2      	lsrs	r2, r2, #3
   13102:	0192      	lsls	r2, r2, #6
   13104:	f042 0201 	orr.w	r2, r2, #1
   13108:	f006 fcab 	bl	19a62 <log_1>
			if (from_hard_fault) {
   1310c:	b126      	cbz	r6, 13118 <mem_manage_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1310e:	4a1c      	ldr	r2, [pc, #112]	; (13180 <mem_manage_fault.isra.0+0x120>)
   13110:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13112:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13116:	6293      	str	r3, [r2, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13118:	4b19      	ldr	r3, [pc, #100]	; (13180 <mem_manage_fault.isra.0+0x120>)
   1311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1311c:	07d8      	lsls	r0, r3, #31
   1311e:	d50c      	bpl.n	1313a <mem_manage_fault.isra.0+0xda>
		PR_FAULT_INFO("  Instruction Access Violation");
   13120:	6823      	ldr	r3, [r4, #0]
   13122:	0759      	lsls	r1, r3, #29
   13124:	d009      	beq.n	1313a <mem_manage_fault.isra.0+0xda>
   13126:	4914      	ldr	r1, [pc, #80]	; (13178 <mem_manage_fault.isra.0+0x118>)
   13128:	4b12      	ldr	r3, [pc, #72]	; (13174 <mem_manage_fault.isra.0+0x114>)
   1312a:	481a      	ldr	r0, [pc, #104]	; (13194 <mem_manage_fault.isra.0+0x134>)
   1312c:	1a5b      	subs	r3, r3, r1
   1312e:	08db      	lsrs	r3, r3, #3
   13130:	019b      	lsls	r3, r3, #6
   13132:	f043 0101 	orr.w	r1, r3, #1
   13136:	f006 fc87 	bl	19a48 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1313a:	4b11      	ldr	r3, [pc, #68]	; (13180 <mem_manage_fault.isra.0+0x120>)
   1313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1313e:	069a      	lsls	r2, r3, #26
   13140:	d50c      	bpl.n	1315c <mem_manage_fault.isra.0+0xfc>
		PR_FAULT_INFO(
   13142:	6823      	ldr	r3, [r4, #0]
   13144:	075b      	lsls	r3, r3, #29
   13146:	d009      	beq.n	1315c <mem_manage_fault.isra.0+0xfc>
   13148:	490b      	ldr	r1, [pc, #44]	; (13178 <mem_manage_fault.isra.0+0x118>)
   1314a:	4b0a      	ldr	r3, [pc, #40]	; (13174 <mem_manage_fault.isra.0+0x114>)
   1314c:	4812      	ldr	r0, [pc, #72]	; (13198 <mem_manage_fault.isra.0+0x138>)
   1314e:	1a5b      	subs	r3, r3, r1
   13150:	08db      	lsrs	r3, r3, #3
   13152:	019b      	lsls	r3, r3, #6
   13154:	f043 0101 	orr.w	r1, r3, #1
   13158:	f006 fc76 	bl	19a48 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   1315c:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   1315e:	4b08      	ldr	r3, [pc, #32]	; (13180 <mem_manage_fault.isra.0+0x120>)
   13160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13164:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13168:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   1316a:	7028      	strb	r0, [r5, #0]
}
   1316c:	bd70      	pop	{r4, r5, r6, pc}
   1316e:	bf00      	nop
   13170:	2001014c 	.word	0x2001014c
   13174:	0001c19c 	.word	0x0001c19c
   13178:	0001c16c 	.word	0x0001c16c
   1317c:	0001f672 	.word	0x0001f672
   13180:	e000ed00 	.word	0xe000ed00
   13184:	0001f688 	.word	0x0001f688
   13188:	0001f6bb 	.word	0x0001f6bb
   1318c:	0001f6ce 	.word	0x0001f6ce
   13190:	0001f6e6 	.word	0x0001f6e6
   13194:	0001f6fc 	.word	0x0001f6fc
   13198:	0001f71b 	.word	0x0001f71b

0001319c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1319c:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   1319e:	4c4a      	ldr	r4, [pc, #296]	; (132c8 <bus_fault.isra.0+0x12c>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   131a0:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   131a2:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   131a4:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   131a6:	0759      	lsls	r1, r3, #29
   131a8:	d009      	beq.n	131be <bus_fault.isra.0+0x22>
   131aa:	4948      	ldr	r1, [pc, #288]	; (132cc <bus_fault.isra.0+0x130>)
   131ac:	4b48      	ldr	r3, [pc, #288]	; (132d0 <bus_fault.isra.0+0x134>)
   131ae:	4849      	ldr	r0, [pc, #292]	; (132d4 <bus_fault.isra.0+0x138>)
   131b0:	1ac9      	subs	r1, r1, r3
   131b2:	08c9      	lsrs	r1, r1, #3
   131b4:	0189      	lsls	r1, r1, #6
   131b6:	f041 0101 	orr.w	r1, r1, #1
   131ba:	f006 fc45 	bl	19a48 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   131be:	4b46      	ldr	r3, [pc, #280]	; (132d8 <bus_fault.isra.0+0x13c>)
   131c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   131c2:	04da      	lsls	r2, r3, #19
   131c4:	d50c      	bpl.n	131e0 <bus_fault.isra.0+0x44>
		PR_FAULT_INFO("  Stacking error");
   131c6:	6823      	ldr	r3, [r4, #0]
   131c8:	075b      	lsls	r3, r3, #29
   131ca:	d009      	beq.n	131e0 <bus_fault.isra.0+0x44>
   131cc:	493f      	ldr	r1, [pc, #252]	; (132cc <bus_fault.isra.0+0x130>)
   131ce:	4b40      	ldr	r3, [pc, #256]	; (132d0 <bus_fault.isra.0+0x134>)
   131d0:	4842      	ldr	r0, [pc, #264]	; (132dc <bus_fault.isra.0+0x140>)
   131d2:	1ac9      	subs	r1, r1, r3
   131d4:	08c9      	lsrs	r1, r1, #3
   131d6:	0189      	lsls	r1, r1, #6
   131d8:	f041 0101 	orr.w	r1, r1, #1
   131dc:	f006 fc34 	bl	19a48 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   131e0:	4b3d      	ldr	r3, [pc, #244]	; (132d8 <bus_fault.isra.0+0x13c>)
   131e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   131e4:	0518      	lsls	r0, r3, #20
   131e6:	d50c      	bpl.n	13202 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Unstacking error");
   131e8:	6823      	ldr	r3, [r4, #0]
   131ea:	0759      	lsls	r1, r3, #29
   131ec:	d009      	beq.n	13202 <bus_fault.isra.0+0x66>
   131ee:	4937      	ldr	r1, [pc, #220]	; (132cc <bus_fault.isra.0+0x130>)
   131f0:	4b37      	ldr	r3, [pc, #220]	; (132d0 <bus_fault.isra.0+0x134>)
   131f2:	483b      	ldr	r0, [pc, #236]	; (132e0 <bus_fault.isra.0+0x144>)
   131f4:	1ac9      	subs	r1, r1, r3
   131f6:	08c9      	lsrs	r1, r1, #3
   131f8:	0189      	lsls	r1, r1, #6
   131fa:	f041 0101 	orr.w	r1, r1, #1
   131fe:	f006 fc23 	bl	19a48 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13202:	4b35      	ldr	r3, [pc, #212]	; (132d8 <bus_fault.isra.0+0x13c>)
   13204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13206:	059a      	lsls	r2, r3, #22
   13208:	d524      	bpl.n	13254 <bus_fault.isra.0+0xb8>
		PR_FAULT_INFO("  Precise data bus error");
   1320a:	6823      	ldr	r3, [r4, #0]
   1320c:	075b      	lsls	r3, r3, #29
   1320e:	d009      	beq.n	13224 <bus_fault.isra.0+0x88>
   13210:	492e      	ldr	r1, [pc, #184]	; (132cc <bus_fault.isra.0+0x130>)
   13212:	4b2f      	ldr	r3, [pc, #188]	; (132d0 <bus_fault.isra.0+0x134>)
   13214:	4833      	ldr	r0, [pc, #204]	; (132e4 <bus_fault.isra.0+0x148>)
   13216:	1ac9      	subs	r1, r1, r3
   13218:	08c9      	lsrs	r1, r1, #3
   1321a:	0189      	lsls	r1, r1, #6
   1321c:	f041 0101 	orr.w	r1, r1, #1
   13220:	f006 fc12 	bl	19a48 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13224:	4b2c      	ldr	r3, [pc, #176]	; (132d8 <bus_fault.isra.0+0x13c>)
   13226:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1322a:	0418      	lsls	r0, r3, #16
   1322c:	d512      	bpl.n	13254 <bus_fault.isra.0+0xb8>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1322e:	6823      	ldr	r3, [r4, #0]
   13230:	075a      	lsls	r2, r3, #29
   13232:	d009      	beq.n	13248 <bus_fault.isra.0+0xac>
   13234:	4a25      	ldr	r2, [pc, #148]	; (132cc <bus_fault.isra.0+0x130>)
   13236:	4b26      	ldr	r3, [pc, #152]	; (132d0 <bus_fault.isra.0+0x134>)
   13238:	482b      	ldr	r0, [pc, #172]	; (132e8 <bus_fault.isra.0+0x14c>)
   1323a:	1ad2      	subs	r2, r2, r3
   1323c:	08d2      	lsrs	r2, r2, #3
   1323e:	0192      	lsls	r2, r2, #6
   13240:	f042 0201 	orr.w	r2, r2, #1
   13244:	f006 fc0d 	bl	19a62 <log_1>
			if (from_hard_fault) {
   13248:	b126      	cbz	r6, 13254 <bus_fault.isra.0+0xb8>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1324a:	4a23      	ldr	r2, [pc, #140]	; (132d8 <bus_fault.isra.0+0x13c>)
   1324c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1324e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13252:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13254:	4b20      	ldr	r3, [pc, #128]	; (132d8 <bus_fault.isra.0+0x13c>)
   13256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13258:	055b      	lsls	r3, r3, #21
   1325a:	d50c      	bpl.n	13276 <bus_fault.isra.0+0xda>
		PR_FAULT_INFO("  Imprecise data bus error");
   1325c:	6823      	ldr	r3, [r4, #0]
   1325e:	075e      	lsls	r6, r3, #29
   13260:	d009      	beq.n	13276 <bus_fault.isra.0+0xda>
   13262:	491a      	ldr	r1, [pc, #104]	; (132cc <bus_fault.isra.0+0x130>)
   13264:	4b1a      	ldr	r3, [pc, #104]	; (132d0 <bus_fault.isra.0+0x134>)
   13266:	4821      	ldr	r0, [pc, #132]	; (132ec <bus_fault.isra.0+0x150>)
   13268:	1ac9      	subs	r1, r1, r3
   1326a:	08c9      	lsrs	r1, r1, #3
   1326c:	0189      	lsls	r1, r1, #6
   1326e:	f041 0101 	orr.w	r1, r1, #1
   13272:	f006 fbe9 	bl	19a48 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13276:	4b18      	ldr	r3, [pc, #96]	; (132d8 <bus_fault.isra.0+0x13c>)
   13278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1327a:	05d0      	lsls	r0, r2, #23
   1327c:	d514      	bpl.n	132a8 <bus_fault.isra.0+0x10c>
		PR_FAULT_INFO("  Instruction bus error");
   1327e:	6823      	ldr	r3, [r4, #0]
   13280:	0759      	lsls	r1, r3, #29
   13282:	d009      	beq.n	13298 <bus_fault.isra.0+0xfc>
   13284:	4912      	ldr	r1, [pc, #72]	; (132d0 <bus_fault.isra.0+0x134>)
   13286:	4b11      	ldr	r3, [pc, #68]	; (132cc <bus_fault.isra.0+0x130>)
   13288:	4819      	ldr	r0, [pc, #100]	; (132f0 <bus_fault.isra.0+0x154>)
   1328a:	1a5b      	subs	r3, r3, r1
   1328c:	08db      	lsrs	r3, r3, #3
   1328e:	019b      	lsls	r3, r3, #6
   13290:	f043 0101 	orr.w	r1, r3, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13294:	f006 fbd8 	bl	19a48 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13298:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1329a:	4a0f      	ldr	r2, [pc, #60]	; (132d8 <bus_fault.isra.0+0x13c>)
   1329c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1329e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   132a2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   132a4:	7028      	strb	r0, [r5, #0]
}
   132a6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   132a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   132aa:	049a      	lsls	r2, r3, #18
   132ac:	d5f4      	bpl.n	13298 <bus_fault.isra.0+0xfc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   132ae:	6823      	ldr	r3, [r4, #0]
   132b0:	075b      	lsls	r3, r3, #29
   132b2:	d0f1      	beq.n	13298 <bus_fault.isra.0+0xfc>
   132b4:	4906      	ldr	r1, [pc, #24]	; (132d0 <bus_fault.isra.0+0x134>)
   132b6:	4b05      	ldr	r3, [pc, #20]	; (132cc <bus_fault.isra.0+0x130>)
   132b8:	480e      	ldr	r0, [pc, #56]	; (132f4 <bus_fault.isra.0+0x158>)
   132ba:	1a5b      	subs	r3, r3, r1
   132bc:	08db      	lsrs	r3, r3, #3
   132be:	019b      	lsls	r3, r3, #6
   132c0:	f043 0101 	orr.w	r1, r3, #1
   132c4:	e7e6      	b.n	13294 <bus_fault.isra.0+0xf8>
   132c6:	bf00      	nop
   132c8:	2001014c 	.word	0x2001014c
   132cc:	0001c19c 	.word	0x0001c19c
   132d0:	0001c16c 	.word	0x0001c16c
   132d4:	0001f74a 	.word	0x0001f74a
   132d8:	e000ed00 	.word	0xe000ed00
   132dc:	0001f760 	.word	0x0001f760
   132e0:	0001f6bb 	.word	0x0001f6bb
   132e4:	0001f771 	.word	0x0001f771
   132e8:	0001f78a 	.word	0x0001f78a
   132ec:	0001f79f 	.word	0x0001f79f
   132f0:	0001f7ba 	.word	0x0001f7ba
   132f4:	0001f71b 	.word	0x0001f71b

000132f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   132f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   132fc:	4b6d      	ldr	r3, [pc, #436]	; (134b4 <z_arm_fault+0x1bc>)
{
   132fe:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13300:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13304:	4689      	mov	r9, r1
   13306:	4614      	mov	r4, r2
   13308:	2500      	movs	r5, #0
   1330a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1330c:	f3c8 0708 	ubfx	r7, r8, #0, #9
   13310:	f385 8811 	msr	BASEPRI, r5
   13314:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13318:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1331c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13320:	d128      	bne.n	13374 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   13322:	07d3      	lsls	r3, r2, #31
   13324:	d426      	bmi.n	13374 <z_arm_fault+0x7c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13326:	0655      	lsls	r5, r2, #25
   13328:	d403      	bmi.n	13332 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1332a:	0724      	lsls	r4, r4, #28
   1332c:	d412      	bmi.n	13354 <z_arm_fault+0x5c>
			*nested_exc = true;
   1332e:	2501      	movs	r5, #1
   13330:	e012      	b.n	13358 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   13332:	4b61      	ldr	r3, [pc, #388]	; (134b8 <z_arm_fault+0x1c0>)
   13334:	681b      	ldr	r3, [r3, #0]
   13336:	0758      	lsls	r0, r3, #29
   13338:	d009      	beq.n	1334e <z_arm_fault+0x56>
   1333a:	4960      	ldr	r1, [pc, #384]	; (134bc <z_arm_fault+0x1c4>)
   1333c:	4b60      	ldr	r3, [pc, #384]	; (134c0 <z_arm_fault+0x1c8>)
   1333e:	4861      	ldr	r0, [pc, #388]	; (134c4 <z_arm_fault+0x1cc>)
   13340:	1a5b      	subs	r3, r3, r1
   13342:	08db      	lsrs	r3, r3, #3
   13344:	019b      	lsls	r3, r3, #6
   13346:	f043 0101 	orr.w	r1, r3, #1
   1334a:	f006 fb7d 	bl	19a48 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1334e:	f014 0504 	ands.w	r5, r4, #4
   13352:	d001      	beq.n	13358 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   13354:	464e      	mov	r6, r9
	*nested_exc = false;
   13356:	2500      	movs	r5, #0
	*recoverable = false;
   13358:	2300      	movs	r3, #0
   1335a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   1335e:	1efb      	subs	r3, r7, #3
   13360:	2b09      	cmp	r3, #9
   13362:	f200 8089 	bhi.w	13478 <z_arm_fault+0x180>
   13366:	e8df f003 	tbb	[pc, r3]
   1336a:	7007      	.short	0x7007
   1336c:	87876c74 	.word	0x87876c74
   13370:	78878787 	.word	0x78878787
		return NULL;
   13374:	462e      	mov	r6, r5
   13376:	e7ef      	b.n	13358 <z_arm_fault+0x60>
	PR_FAULT_INFO("***** HARD FAULT *****");
   13378:	4f4f      	ldr	r7, [pc, #316]	; (134b8 <z_arm_fault+0x1c0>)
   1337a:	683b      	ldr	r3, [r7, #0]
   1337c:	0759      	lsls	r1, r3, #29
   1337e:	d009      	beq.n	13394 <z_arm_fault+0x9c>
   13380:	494f      	ldr	r1, [pc, #316]	; (134c0 <z_arm_fault+0x1c8>)
   13382:	4b4e      	ldr	r3, [pc, #312]	; (134bc <z_arm_fault+0x1c4>)
   13384:	4850      	ldr	r0, [pc, #320]	; (134c8 <z_arm_fault+0x1d0>)
   13386:	1ac9      	subs	r1, r1, r3
   13388:	08c9      	lsrs	r1, r1, #3
   1338a:	0189      	lsls	r1, r1, #6
   1338c:	f041 0101 	orr.w	r1, r1, #1
   13390:	f006 fb5a 	bl	19a48 <log_0>
	*recoverable = false;
   13394:	2400      	movs	r4, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13396:	4b47      	ldr	r3, [pc, #284]	; (134b4 <z_arm_fault+0x1bc>)
	*recoverable = false;
   13398:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1339c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1339e:	0792      	lsls	r2, r2, #30
   133a0:	d528      	bpl.n	133f4 <z_arm_fault+0xfc>
		PR_EXC("  Bus fault on vector table read");
   133a2:	683b      	ldr	r3, [r7, #0]
   133a4:	075f      	lsls	r7, r3, #29
   133a6:	d101      	bne.n	133ac <z_arm_fault+0xb4>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   133a8:	2400      	movs	r4, #0
   133aa:	e009      	b.n	133c0 <z_arm_fault+0xc8>
   133ac:	4944      	ldr	r1, [pc, #272]	; (134c0 <z_arm_fault+0x1c8>)
   133ae:	4b43      	ldr	r3, [pc, #268]	; (134bc <z_arm_fault+0x1c4>)
		PR_EXC("  Bus fault on vector table read");
   133b0:	4846      	ldr	r0, [pc, #280]	; (134cc <z_arm_fault+0x1d4>)
   133b2:	1ac9      	subs	r1, r1, r3
   133b4:	08c9      	lsrs	r1, r1, #3
   133b6:	0189      	lsls	r1, r1, #6
   133b8:	f041 0101 	orr.w	r1, r1, #1
   133bc:	f006 fb44 	bl	19a48 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   133c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   133c4:	b99b      	cbnz	r3, 133ee <z_arm_fault+0xf6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   133c6:	2220      	movs	r2, #32
   133c8:	4631      	mov	r1, r6
   133ca:	a802      	add	r0, sp, #8
   133cc:	f007 ff6b 	bl	1b2a6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   133d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   133d2:	2d00      	cmp	r5, #0
   133d4:	d068      	beq.n	134a8 <z_arm_fault+0x1b0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   133d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   133da:	b922      	cbnz	r2, 133e6 <z_arm_fault+0xee>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   133dc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   133e0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   133e4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   133e6:	4620      	mov	r0, r4
   133e8:	a902      	add	r1, sp, #8
   133ea:	f7ff fc6f 	bl	12ccc <z_arm_fatal_error>
}
   133ee:	b00b      	add	sp, #44	; 0x2c
   133f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   133f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   133f6:	0058      	lsls	r0, r3, #1
   133f8:	d5d6      	bpl.n	133a8 <z_arm_fault+0xb0>
		PR_EXC("  Fault escalation (see below)");
   133fa:	683b      	ldr	r3, [r7, #0]
   133fc:	0759      	lsls	r1, r3, #29
   133fe:	d009      	beq.n	13414 <z_arm_fault+0x11c>
   13400:	492f      	ldr	r1, [pc, #188]	; (134c0 <z_arm_fault+0x1c8>)
   13402:	4b2e      	ldr	r3, [pc, #184]	; (134bc <z_arm_fault+0x1c4>)
   13404:	4832      	ldr	r0, [pc, #200]	; (134d0 <z_arm_fault+0x1d8>)
   13406:	1ac9      	subs	r1, r1, r3
   13408:	08c9      	lsrs	r1, r1, #3
   1340a:	0189      	lsls	r1, r1, #6
   1340c:	f041 0101 	orr.w	r1, r1, #1
   13410:	f006 fb1a 	bl	19a48 <log_0>
		if (SCB_MMFSR != 0) {
   13414:	4b2f      	ldr	r3, [pc, #188]	; (134d4 <z_arm_fault+0x1dc>)
   13416:	781b      	ldrb	r3, [r3, #0]
   13418:	b12b      	cbz	r3, 13426 <z_arm_fault+0x12e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1341a:	2001      	movs	r0, #1
   1341c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13420:	f7ff fe1e 	bl	13060 <mem_manage_fault.isra.0>
   13424:	e00f      	b.n	13446 <z_arm_fault+0x14e>
		} else if (SCB_BFSR != 0) {
   13426:	4b2c      	ldr	r3, [pc, #176]	; (134d8 <z_arm_fault+0x1e0>)
   13428:	781b      	ldrb	r3, [r3, #0]
   1342a:	b12b      	cbz	r3, 13438 <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   1342c:	2001      	movs	r0, #1
   1342e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13432:	f7ff feb3 	bl	1319c <bus_fault.isra.0>
   13436:	e006      	b.n	13446 <z_arm_fault+0x14e>
		} else if (SCB_UFSR != 0) {
   13438:	4b28      	ldr	r3, [pc, #160]	; (134dc <z_arm_fault+0x1e4>)
   1343a:	881b      	ldrh	r3, [r3, #0]
   1343c:	b29b      	uxth	r3, r3
   1343e:	2b00      	cmp	r3, #0
   13440:	d0b2      	beq.n	133a8 <z_arm_fault+0xb0>
			reason = usage_fault(esf);
   13442:	f7ff fd63 	bl	12f0c <usage_fault.isra.0>
   13446:	4604      	mov	r4, r0
   13448:	e7ba      	b.n	133c0 <z_arm_fault+0xc8>
		reason = mem_manage_fault(esf, 0, recoverable);
   1344a:	2000      	movs	r0, #0
   1344c:	f10d 0107 	add.w	r1, sp, #7
   13450:	e7e6      	b.n	13420 <z_arm_fault+0x128>
		reason = bus_fault(esf, 0, recoverable);
   13452:	2000      	movs	r0, #0
   13454:	f10d 0107 	add.w	r1, sp, #7
   13458:	e7eb      	b.n	13432 <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   1345a:	4b17      	ldr	r3, [pc, #92]	; (134b8 <z_arm_fault+0x1c0>)
   1345c:	681b      	ldr	r3, [r3, #0]
   1345e:	075a      	lsls	r2, r3, #29
   13460:	d0a2      	beq.n	133a8 <z_arm_fault+0xb0>
   13462:	4b16      	ldr	r3, [pc, #88]	; (134bc <z_arm_fault+0x1c4>)
   13464:	4916      	ldr	r1, [pc, #88]	; (134c0 <z_arm_fault+0x1c8>)
   13466:	481e      	ldr	r0, [pc, #120]	; (134e0 <z_arm_fault+0x1e8>)
   13468:	1ac9      	subs	r1, r1, r3
   1346a:	08c9      	lsrs	r1, r1, #3
   1346c:	0189      	lsls	r1, r1, #6
   1346e:	f041 0101 	orr.w	r1, r1, #1
   13472:	f006 fae9 	bl	19a48 <log_0>
   13476:	e797      	b.n	133a8 <z_arm_fault+0xb0>
	PR_FAULT_INFO("***** %s %d) *****",
   13478:	4b0f      	ldr	r3, [pc, #60]	; (134b8 <z_arm_fault+0x1c0>)
   1347a:	681b      	ldr	r3, [r3, #0]
   1347c:	075b      	lsls	r3, r3, #29
   1347e:	d093      	beq.n	133a8 <z_arm_fault+0xb0>
   13480:	4a0e      	ldr	r2, [pc, #56]	; (134bc <z_arm_fault+0x1c4>)
   13482:	4b0f      	ldr	r3, [pc, #60]	; (134c0 <z_arm_fault+0x1c8>)
   13484:	4817      	ldr	r0, [pc, #92]	; (134e4 <z_arm_fault+0x1ec>)
   13486:	1a9b      	subs	r3, r3, r2
   13488:	08db      	lsrs	r3, r3, #3
   1348a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1348e:	ea4f 1383 	mov.w	r3, r3, lsl #6
   13492:	4915      	ldr	r1, [pc, #84]	; (134e8 <z_arm_fault+0x1f0>)
   13494:	f043 0301 	orr.w	r3, r3, #1
   13498:	bf18      	it	ne
   1349a:	4601      	movne	r1, r0
   1349c:	f1a7 0210 	sub.w	r2, r7, #16
   134a0:	4812      	ldr	r0, [pc, #72]	; (134ec <z_arm_fault+0x1f4>)
   134a2:	f006 faf2 	bl	19a8a <log_2>
   134a6:	e77f      	b.n	133a8 <z_arm_fault+0xb0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   134a8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   134ac:	f023 0301 	bic.w	r3, r3, #1
   134b0:	e798      	b.n	133e4 <z_arm_fault+0xec>
   134b2:	bf00      	nop
   134b4:	e000ed00 	.word	0xe000ed00
   134b8:	2001014c 	.word	0x2001014c
   134bc:	0001c16c 	.word	0x0001c16c
   134c0:	0001c19c 	.word	0x0001c19c
   134c4:	0001f7d2 	.word	0x0001f7d2
   134c8:	0001f7f5 	.word	0x0001f7f5
   134cc:	0001f80c 	.word	0x0001f80c
   134d0:	0001f82d 	.word	0x0001f82d
   134d4:	e000ed28 	.word	0xe000ed28
   134d8:	e000ed29 	.word	0xe000ed29
   134dc:	e000ed2a 	.word	0xe000ed2a
   134e0:	0001f84c 	.word	0x0001f84c
   134e4:	0001f897 	.word	0x0001f897
   134e8:	0001f882 	.word	0x0001f882
   134ec:	0001f8b0 	.word	0x0001f8b0

000134f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   134f0:	4b04      	ldr	r3, [pc, #16]	; (13504 <z_arm_fault_init+0x14>)
   134f2:	695a      	ldr	r2, [r3, #20]
   134f4:	f042 0210 	orr.w	r2, r2, #16
   134f8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   134fa:	695a      	ldr	r2, [r3, #20]
   134fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   13500:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13502:	4770      	bx	lr
   13504:	e000ed00 	.word	0xe000ed00

00013508 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13508:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1350c:	4905      	ldr	r1, [pc, #20]	; (13524 <sys_arch_reboot+0x1c>)
   1350e:	4b06      	ldr	r3, [pc, #24]	; (13528 <sys_arch_reboot+0x20>)
   13510:	68ca      	ldr	r2, [r1, #12]
   13512:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13516:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13518:	60cb      	str	r3, [r1, #12]
   1351a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1351e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13520:	e7fd      	b.n	1351e <sys_arch_reboot+0x16>
   13522:	bf00      	nop
   13524:	e000ed00 	.word	0xe000ed00
   13528:	05fa0004 	.word	0x05fa0004

0001352c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1352c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1352e:	2120      	movs	r1, #32
   13530:	4803      	ldr	r0, [pc, #12]	; (13540 <z_arm_interrupt_init+0x14>)
   13532:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13534:	3301      	adds	r3, #1
   13536:	2b41      	cmp	r3, #65	; 0x41
   13538:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1353c:	d1f9      	bne.n	13532 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1353e:	4770      	bx	lr
   13540:	e000e100 	.word	0xe000e100

00013544 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   13544:	b508      	push	{r3, lr}
	if (_current == thread) {
   13546:	4b0e      	ldr	r3, [pc, #56]	; (13580 <z_impl_k_thread_abort+0x3c>)
   13548:	689b      	ldr	r3, [r3, #8]
   1354a:	4283      	cmp	r3, r0
   1354c:	d107      	bne.n	1355e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1354e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13552:	b193      	cbz	r3, 1357a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13554:	4a0b      	ldr	r2, [pc, #44]	; (13584 <z_impl_k_thread_abort+0x40>)
   13556:	6853      	ldr	r3, [r2, #4]
   13558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1355c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   1355e:	f001 fe15 	bl	1518c <z_thread_single_abort>
	__asm__ volatile(
   13562:	f04f 0320 	mov.w	r3, #32
   13566:	f3ef 8011 	mrs	r0, BASEPRI
   1356a:	f383 8811 	msr	BASEPRI, r3
   1356e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   13572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   13576:	f008 b95f 	b.w	1b838 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   1357a:	f002 f98f 	bl	1589c <z_self_abort>
   1357e:	bf00      	nop
   13580:	20010bbc 	.word	0x20010bbc
   13584:	e000ed00 	.word	0xe000ed00

00013588 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13588:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   1358a:	4b0e      	ldr	r3, [pc, #56]	; (135c4 <z_arm_configure_static_mpu_regions+0x3c>)
{
   1358c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   1358e:	9302      	str	r3, [sp, #8]
   13590:	4b0d      	ldr	r3, [pc, #52]	; (135c8 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13592:	4c0e      	ldr	r4, [pc, #56]	; (135cc <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   13594:	9303      	str	r3, [sp, #12]
   13596:	4b0e      	ldr	r3, [pc, #56]	; (135d0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13598:	4a0e      	ldr	r2, [pc, #56]	; (135d4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   1359a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   1359c:	ab02      	add	r3, sp, #8
   1359e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   135a0:	a801      	add	r0, sp, #4
   135a2:	4623      	mov	r3, r4
   135a4:	2101      	movs	r1, #1
   135a6:	f000 f947 	bl	13838 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   135aa:	2300      	movs	r3, #0
   135ac:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   135ae:	4b0a      	ldr	r3, [pc, #40]	; (135d8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135b0:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   135b2:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135b4:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   135b6:	9305      	str	r3, [sp, #20]
   135b8:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   135ba:	f000 f947 	bl	1384c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   135be:	b008      	add	sp, #32
   135c0:	bd10      	pop	{r4, pc}
   135c2:	bf00      	nop
   135c4:	20010000 	.word	0x20010000
   135c8:	00000000 	.word	0x00000000
   135cc:	20040000 	.word	0x20040000
   135d0:	00010006 	.word	0x00010006
   135d4:	20010000 	.word	0x20010000
   135d8:	200101f8 	.word	0x200101f8

000135dc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   135dc:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   135de:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   135e0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   135e2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   135e6:	f004 031f 	and.w	r3, r4, #31
   135ea:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   135ec:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   135ee:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   135f0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   135f4:	4904      	ldr	r1, [pc, #16]	; (13608 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   135f6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   135fa:	f043 0301 	orr.w	r3, r3, #1
   135fe:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13600:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13602:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13604:	bd10      	pop	{r4, pc}
   13606:	bf00      	nop
   13608:	e000ed90 	.word	0xe000ed90

0001360c <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1360c:	280f      	cmp	r0, #15
{
   1360e:	b510      	push	{r4, lr}
	if (index > (get_num_regions() - 1U)) {
   13610:	d911      	bls.n	13636 <region_allocate_and_init+0x2a>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13612:	4b0a      	ldr	r3, [pc, #40]	; (1363c <region_allocate_and_init+0x30>)
   13614:	681b      	ldr	r3, [r3, #0]
   13616:	075b      	lsls	r3, r3, #29
   13618:	d00a      	beq.n	13630 <region_allocate_and_init+0x24>
   1361a:	4a09      	ldr	r2, [pc, #36]	; (13640 <region_allocate_and_init+0x34>)
   1361c:	4b09      	ldr	r3, [pc, #36]	; (13644 <region_allocate_and_init+0x38>)
   1361e:	4601      	mov	r1, r0
   13620:	1ad2      	subs	r2, r2, r3
   13622:	08d2      	lsrs	r2, r2, #3
   13624:	0192      	lsls	r2, r2, #6
   13626:	4808      	ldr	r0, [pc, #32]	; (13648 <region_allocate_and_init+0x3c>)
   13628:	f042 0201 	orr.w	r2, r2, #1
   1362c:	f006 fa19 	bl	19a62 <log_1>
		return -EINVAL;
   13630:	f06f 0015 	mvn.w	r0, #21
   13634:	e001      	b.n	1363a <region_allocate_and_init+0x2e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   13636:	f7ff ffd1 	bl	135dc <region_init>

	return index;
}
   1363a:	bd10      	pop	{r4, pc}
   1363c:	20010148 	.word	0x20010148
   13640:	0001c194 	.word	0x0001c194
   13644:	0001c16c 	.word	0x0001c16c
   13648:	0001f8c7 	.word	0x0001f8c7

0001364c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13650:	4680      	mov	r8, r0
   13652:	4689      	mov	r9, r1
   13654:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13656:	2700      	movs	r7, #0
	MPU->RNR = index;
   13658:	4d55      	ldr	r5, [pc, #340]	; (137b0 <mpu_configure_regions_and_partition.constprop.0+0x164>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   1365a:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   1365c:	454f      	cmp	r7, r9
   1365e:	da32      	bge.n	136c6 <mpu_configure_regions_and_partition.constprop.0+0x7a>
		if (regions[i]->size == 0U) {
   13660:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
   13664:	f8d3 a004 	ldr.w	sl, [r3, #4]
   13668:	f1ba 0f00 	cmp.w	sl, #0
   1366c:	d057      	beq.n	1371e <mpu_configure_regions_and_partition.constprop.0+0xd2>
		&&
   1366e:	f1ba 0f1f 	cmp.w	sl, #31
   13672:	d922      	bls.n	136ba <mpu_configure_regions_and_partition.constprop.0+0x6e>
		&&
   13674:	f01a 0f1f 	tst.w	sl, #31
   13678:	d11f      	bne.n	136ba <mpu_configure_regions_and_partition.constprop.0+0x6e>
		((part->start &
   1367a:	f8d3 b000 	ldr.w	fp, [r3]
		&&
   1367e:	f01b 0f1f 	tst.w	fp, #31
   13682:	d11a      	bne.n	136ba <mpu_configure_regions_and_partition.constprop.0+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13684:	4658      	mov	r0, fp
   13686:	f007 fcfb 	bl	1b080 <arm_cmse_mpu_region_get>
   1368a:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1368c:	eb0a 000b 	add.w	r0, sl, fp
   13690:	3801      	subs	r0, #1
   13692:	f007 fcf5 	bl	1b080 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13696:	4286      	cmp	r6, r0
   13698:	d025      	beq.n	136e6 <mpu_configure_regions_and_partition.constprop.0+0x9a>
	return -EINVAL;
   1369a:	f06f 0615 	mvn.w	r6, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   1369e:	4b45      	ldr	r3, [pc, #276]	; (137b4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   136a0:	681b      	ldr	r3, [r3, #0]
   136a2:	075b      	lsls	r3, r3, #29
   136a4:	d00d      	beq.n	136c2 <mpu_configure_regions_and_partition.constprop.0+0x76>
   136a6:	4a44      	ldr	r2, [pc, #272]	; (137b8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   136a8:	4b44      	ldr	r3, [pc, #272]	; (137bc <mpu_configure_regions_and_partition.constprop.0+0x170>)
   136aa:	4631      	mov	r1, r6
   136ac:	1ad2      	subs	r2, r2, r3
   136ae:	08d2      	lsrs	r2, r2, #3
   136b0:	0192      	lsls	r2, r2, #6
   136b2:	4843      	ldr	r0, [pc, #268]	; (137c0 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   136b4:	f042 0201 	orr.w	r2, r2, #1
   136b8:	e012      	b.n	136e0 <mpu_configure_regions_and_partition.constprop.0+0x94>
			LOG_ERR("Partition %u: sanity check failed.", i);
   136ba:	4b3e      	ldr	r3, [pc, #248]	; (137b4 <mpu_configure_regions_and_partition.constprop.0+0x168>)
   136bc:	681b      	ldr	r3, [r3, #0]
   136be:	075a      	lsls	r2, r3, #29
   136c0:	d105      	bne.n	136ce <mpu_configure_regions_and_partition.constprop.0+0x82>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   136c2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   136c6:	4620      	mov	r0, r4
   136c8:	b005      	add	sp, #20
   136ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Partition %u: sanity check failed.", i);
   136ce:	4639      	mov	r1, r7
   136d0:	4a39      	ldr	r2, [pc, #228]	; (137b8 <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   136d2:	4b3a      	ldr	r3, [pc, #232]	; (137bc <mpu_configure_regions_and_partition.constprop.0+0x170>)
   136d4:	483b      	ldr	r0, [pc, #236]	; (137c4 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   136d6:	1ad2      	subs	r2, r2, r3
   136d8:	08d2      	lsrs	r2, r2, #3
   136da:	0192      	lsls	r2, r2, #6
   136dc:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   136e0:	f006 f9bf 	bl	19a62 <log_1>
   136e4:	e7ed      	b.n	136c2 <mpu_configure_regions_and_partition.constprop.0+0x76>
		if ((u_reg_index == -EINVAL) ||
   136e6:	f116 0f16 	cmn.w	r6, #22
   136ea:	d0d8      	beq.n	1369e <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   136ec:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   136ee:	42b3      	cmp	r3, r6
   136f0:	dbd5      	blt.n	1369e <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   136f2:	60ae      	str	r6, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   136f4:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   136f6:	60ae      	str	r6, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   136f8:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   136fa:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   136fe:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13702:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13706:	e9d1 3200 	ldrd	r3, r2, [r1]
   1370a:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   1370c:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   1370e:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i]->start == u_reg_base) &&
   13712:	d116      	bne.n	13742 <mpu_configure_regions_and_partition.constprop.0+0xf6>
   13714:	45d3      	cmp	fp, sl
   13716:	d104      	bne.n	13722 <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, regions[i]);
   13718:	b2f0      	uxtb	r0, r6
   1371a:	f007 fc98 	bl	1b04e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   1371e:	3701      	adds	r7, #1
   13720:	e79c      	b.n	1365c <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   13722:	60ae      	str	r6, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13724:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   13726:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   1372a:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   1372e:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13730:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   13732:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   13734:	f007 fc8b 	bl	1b04e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13738:	f110 0f16 	cmn.w	r0, #22
   1373c:	d0c1      	beq.n	136c2 <mpu_configure_regions_and_partition.constprop.0+0x76>
			reg_index++;
   1373e:	1c44      	adds	r4, r0, #1
   13740:	e7ed      	b.n	1371e <mpu_configure_regions_and_partition.constprop.0+0xd2>
	MPU->RNR = index;
   13742:	60ae      	str	r6, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13744:	692a      	ldr	r2, [r5, #16]
   13746:	3b01      	subs	r3, #1
   13748:	f023 031f 	bic.w	r3, r3, #31
   1374c:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13750:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   13752:	45d3      	cmp	fp, sl
   13754:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13756:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   13758:	d0ec      	beq.n	13734 <mpu_configure_regions_and_partition.constprop.0+0xe8>
				mpu_configure_region(reg_index, regions[i]);
   1375a:	f007 fc78 	bl	1b04e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   1375e:	f110 0f16 	cmn.w	r0, #22
   13762:	d0ae      	beq.n	136c2 <mpu_configure_regions_and_partition.constprop.0+0x76>
	MPU->RNR = index;
   13764:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   13766:	68ea      	ldr	r2, [r5, #12]
   13768:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   1376c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   13770:	f362 0304 	bfi	r3, r2, #0, #5
   13774:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13778:	692b      	ldr	r3, [r5, #16]
   1377a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1377e:	085b      	lsrs	r3, r3, #1
   13780:	f363 1247 	bfi	r2, r3, #5, #3
   13784:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   13788:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
			reg_index++;
   1378c:	3001      	adds	r0, #1
			fill_region.base = regions[i]->start +
   1378e:	e9d2 3200 	ldrd	r3, r2, [r2]
   13792:	4413      	add	r3, r2
   13794:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   13796:	f023 031f 	bic.w	r3, r3, #31
   1379a:	445b      	add	r3, fp
   1379c:	eba3 030a 	sub.w	r3, r3, sl
   137a0:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   137a4:	4669      	mov	r1, sp
   137a6:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   137a8:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   137aa:	f7ff ff2f 	bl	1360c <region_allocate_and_init>
   137ae:	e7c3      	b.n	13738 <mpu_configure_regions_and_partition.constprop.0+0xec>
   137b0:	e000ed90 	.word	0xe000ed90
   137b4:	20010148 	.word	0x20010148
   137b8:	0001c194 	.word	0x0001c194
   137bc:	0001c16c 	.word	0x0001c16c
   137c0:	0001f910 	.word	0x0001f910
   137c4:	0001f8ed 	.word	0x0001f8ed

000137c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   137c8:	2205      	movs	r2, #5
   137ca:	4b03      	ldr	r3, [pc, #12]	; (137d8 <arm_core_mpu_enable+0x10>)
   137cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   137ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   137d2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   137d6:	4770      	bx	lr
   137d8:	e000ed90 	.word	0xe000ed90

000137dc <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   137dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   137e0:	2200      	movs	r2, #0
   137e2:	4b01      	ldr	r3, [pc, #4]	; (137e8 <arm_core_mpu_disable+0xc>)
   137e4:	605a      	str	r2, [r3, #4]
}
   137e6:	4770      	bx	lr
   137e8:	e000ed90 	.word	0xe000ed90

000137ec <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   137ec:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   137ee:	4c0e      	ldr	r4, [pc, #56]	; (13828 <arm_mpu_init+0x3c>)
   137f0:	6825      	ldr	r5, [r4, #0]
   137f2:	2d10      	cmp	r5, #16
   137f4:	d814      	bhi.n	13820 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   137f6:	f7ff fff1 	bl	137dc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   137fa:	2000      	movs	r0, #0
	MPU->MAIR0 =
   137fc:	4b0b      	ldr	r3, [pc, #44]	; (1382c <arm_mpu_init+0x40>)
   137fe:	4a0c      	ldr	r2, [pc, #48]	; (13830 <arm_mpu_init+0x44>)
   13800:	631a      	str	r2, [r3, #48]	; 0x30
   13802:	4285      	cmp	r5, r0
   13804:	d105      	bne.n	13812 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13806:	4b0b      	ldr	r3, [pc, #44]	; (13834 <arm_mpu_init+0x48>)
   13808:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1380a:	f7ff ffdd 	bl	137c8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   1380e:	2000      	movs	r0, #0
}
   13810:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   13812:	6861      	ldr	r1, [r4, #4]
   13814:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   13818:	f7ff fee0 	bl	135dc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1381c:	3001      	adds	r0, #1
   1381e:	e7f0      	b.n	13802 <arm_mpu_init+0x16>
		return -1;
   13820:	f04f 30ff 	mov.w	r0, #4294967295
   13824:	e7f4      	b.n	13810 <arm_mpu_init+0x24>
   13826:	bf00      	nop
   13828:	0001dcfc 	.word	0x0001dcfc
   1382c:	e000ed90 	.word	0xe000ed90
   13830:	0044ffaa 	.word	0x0044ffaa
   13834:	2001ec7d 	.word	0x2001ec7d

00013838 <arm_core_mpu_configure_static_mpu_regions>:
{
   13838:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1383a:	4c03      	ldr	r4, [pc, #12]	; (13848 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1383c:	7822      	ldrb	r2, [r4, #0]
   1383e:	f7ff ff05 	bl	1364c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13842:	7020      	strb	r0, [r4, #0]
}
   13844:	bd10      	pop	{r4, pc}
   13846:	bf00      	nop
   13848:	2001ec7d 	.word	0x2001ec7d

0001384c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1384c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13850:	4d26      	ldr	r5, [pc, #152]	; (138ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   13852:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   13854:	4606      	mov	r6, r0
   13856:	f04f 0800 	mov.w	r8, #0
   1385a:	46ab      	mov	fp, r5
	MPU->RNR = index;
   1385c:	4f24      	ldr	r7, [pc, #144]	; (138f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1385e:	45d0      	cmp	r8, sl
   13860:	da1b      	bge.n	1389a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   13862:	f8d6 9004 	ldr.w	r9, [r6, #4]
   13866:	f1b9 0f00 	cmp.w	r9, #0
   1386a:	d039      	beq.n	138e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1386c:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1386e:	4608      	mov	r0, r1
   13870:	9101      	str	r1, [sp, #4]
   13872:	f007 fc05 	bl	1b080 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13876:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13878:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1387a:	eb09 0001 	add.w	r0, r9, r1
   1387e:	3801      	subs	r0, #1
   13880:	f007 fbfe 	bl	1b080 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13884:	4284      	cmp	r4, r0
   13886:	f04f 0214 	mov.w	r2, #20
   1388a:	4b1a      	ldr	r3, [pc, #104]	; (138f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   1388c:	d008      	beq.n	138a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   1388e:	f06f 0315 	mvn.w	r3, #21
   13892:	fb02 f808 	mul.w	r8, r2, r8
   13896:	f84b 3008 	str.w	r3, [fp, r8]
}
   1389a:	b003      	add	sp, #12
   1389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   138a0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   138a4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   138a6:	d0f8      	beq.n	1389a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   138a8:	7819      	ldrb	r1, [r3, #0]
   138aa:	42a1      	cmp	r1, r4
   138ac:	ddf5      	ble.n	1389a <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   138ae:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   138b2:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   138b4:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   138b6:	68fc      	ldr	r4, [r7, #12]
   138b8:	f100 0108 	add.w	r1, r0, #8
   138bc:	7b00      	ldrb	r0, [r0, #12]
   138be:	f364 0004 	bfi	r0, r4, #0, #5
   138c2:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   138c4:	6938      	ldr	r0, [r7, #16]
   138c6:	790c      	ldrb	r4, [r1, #4]
   138c8:	0840      	lsrs	r0, r0, #1
   138ca:	f360 1447 	bfi	r4, r0, #5, #3
   138ce:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   138d0:	68f9      	ldr	r1, [r7, #12]
   138d2:	f021 011f 	bic.w	r1, r1, #31
   138d6:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   138d8:	6939      	ldr	r1, [r7, #16]
   138da:	f021 011f 	bic.w	r1, r1, #31
   138de:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   138e0:	f108 0801 	add.w	r8, r8, #1
   138e4:	3514      	adds	r5, #20
   138e6:	360c      	adds	r6, #12
   138e8:	e7b9      	b.n	1385e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   138ea:	bf00      	nop
   138ec:	20010b7c 	.word	0x20010b7c
   138f0:	e000ed90 	.word	0xe000ed90
   138f4:	2001ec7d 	.word	0x2001ec7d

000138f8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   138f8:	4b01      	ldr	r3, [pc, #4]	; (13900 <__stdout_hook_install+0x8>)
   138fa:	6018      	str	r0, [r3, #0]
}
   138fc:	4770      	bx	lr
   138fe:	bf00      	nop
   13900:	2001007c 	.word	0x2001007c

00013904 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
   13904:	3902      	subs	r1, #2
   13906:	2901      	cmp	r1, #1
   13908:	d802      	bhi.n	13910 <z_impl_zephyr_fputc+0xc>
   1390a:	4b03      	ldr	r3, [pc, #12]	; (13918 <z_impl_zephyr_fputc+0x14>)
   1390c:	681b      	ldr	r3, [r3, #0]
   1390e:	4718      	bx	r3
}
   13910:	f04f 30ff 	mov.w	r0, #4294967295
   13914:	4770      	bx	lr
   13916:	bf00      	nop
   13918:	2001007c 	.word	0x2001007c

0001391c <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
   1391c:	b40e      	push	{r1, r2, r3}
   1391e:	b50f      	push	{r0, r1, r2, r3, lr}

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   13920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   13924:	ab05      	add	r3, sp, #20
   13926:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
   1392a:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   1392c:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   1392e:	4806      	ldr	r0, [pc, #24]	; (13948 <sprintf+0x2c>)
   13930:	a902      	add	r1, sp, #8
	va_start(vargs, format);
   13932:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
   13934:	f7fb fdce 	bl	f4d4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
   13938:	2200      	movs	r2, #0
   1393a:	9b02      	ldr	r3, [sp, #8]
   1393c:	701a      	strb	r2, [r3, #0]
	return r;
}
   1393e:	b004      	add	sp, #16
   13940:	f85d eb04 	ldr.w	lr, [sp], #4
   13944:	b003      	add	sp, #12
   13946:	4770      	bx	lr
   13948:	0001b34d 	.word	0x0001b34d

0001394c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
   1394c:	b40f      	push	{r0, r1, r2, r3}
   1394e:	b507      	push	{r0, r1, r2, lr}
   13950:	ab04      	add	r3, sp, #16
   13952:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   13956:	2102      	movs	r1, #2
   13958:	4804      	ldr	r0, [pc, #16]	; (1396c <printf+0x20>)
	va_start(vargs, format);
   1395a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
   1395c:	f7fb fdba 	bl	f4d4 <cbvprintf>
	va_end(vargs);

	return r;
}
   13960:	b003      	add	sp, #12
   13962:	f85d eb04 	ldr.w	lr, [sp], #4
   13966:	b004      	add	sp, #16
   13968:	4770      	bx	lr
   1396a:	bf00      	nop
   1396c:	0001b349 	.word	0x0001b349

00013970 <gmtime_r>:
 * due to time zone, leap seconds, or a different epoch must be
 * applied to @p time before invoking this function.
 */
struct tm *gmtime_r(const time_t *_MLIBC_RESTRICT timep,
		    struct tm *_MLIBC_RESTRICT tp)
{
   13970:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	time_t z = *timep;
   13974:	e9d0 6700 	ldrd	r6, r7, [r0]
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   13978:	2e00      	cmp	r6, #0
   1397a:	f177 0300 	sbcs.w	r3, r7, #0
{
   1397e:	468a      	mov	sl, r1
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   13980:	f280 80a8 	bge.w	13ad4 <gmtime_r+0x164>
   13984:	2300      	movs	r3, #0
   13986:	4863      	ldr	r0, [pc, #396]	; (13b14 <gmtime_r+0x1a4>)
   13988:	4a63      	ldr	r2, [pc, #396]	; (13b18 <gmtime_r+0x1a8>)
   1398a:	1830      	adds	r0, r6, r0
   1398c:	f147 31ff 	adc.w	r1, r7, #4294967295
   13990:	f7f8 fc56 	bl	c240 <__aeabi_ldivmod>
	unsigned int rem = z - days * 86400;
   13994:	4b61      	ldr	r3, [pc, #388]	; (13b1c <gmtime_r+0x1ac>)
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   13996:	4604      	mov	r4, r0
	unsigned int rem = z - days * 86400;
   13998:	fb03 6600 	mla	r6, r3, r0, r6
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   1399c:	460d      	mov	r5, r1

	*tp = (struct tm){ 0 };
   1399e:	2224      	movs	r2, #36	; 0x24
   139a0:	2100      	movs	r1, #0
   139a2:	4650      	mov	r0, sl
   139a4:	f007 fcaa 	bl	1b2fc <memset>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   139a8:	f06f 0203 	mvn.w	r2, #3
   139ac:	f04f 33ff 	mov.w	r3, #4294967295
   139b0:	4294      	cmp	r4, r2
   139b2:	eb75 0303 	sbcs.w	r3, r5, r3
   139b6:	f04f 0207 	mov.w	r2, #7
   139ba:	f04f 0300 	mov.w	r3, #0
   139be:	f2c0 808e 	blt.w	13ade <gmtime_r+0x16e>
   139c2:	1d20      	adds	r0, r4, #4
   139c4:	f145 0100 	adc.w	r1, r5, #0
   139c8:	f7f8 fc3a 	bl	c240 <__aeabi_ldivmod>
	z += 719468;
   139cc:	4b54      	ldr	r3, [pc, #336]	; (13b20 <gmtime_r+0x1b0>)
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   139ce:	f8ca 2018 	str.w	r2, [sl, #24]
	z += 719468;
   139d2:	eb14 0803 	adds.w	r8, r4, r3
   139d6:	f04f 0300 	mov.w	r3, #0
   139da:	eb45 0903 	adc.w	r9, r5, r3
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   139de:	f1b8 0f00 	cmp.w	r8, #0
   139e2:	f179 0300 	sbcs.w	r3, r9, #0
   139e6:	f280 8081 	bge.w	13aec <gmtime_r+0x17c>
   139ea:	2100      	movs	r1, #0
   139ec:	2300      	movs	r3, #0
   139ee:	484d      	ldr	r0, [pc, #308]	; (13b24 <gmtime_r+0x1b4>)
   139f0:	4a4d      	ldr	r2, [pc, #308]	; (13b28 <gmtime_r+0x1b8>)
   139f2:	1820      	adds	r0, r4, r0
   139f4:	eb45 0101 	adc.w	r1, r5, r1
   139f8:	f7f8 fc22 	bl	c240 <__aeabi_ldivmod>
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   139fc:	f648 62ac 	movw	r2, #36524	; 0x8eac
   13a00:	f240 55b4 	movw	r5, #1460	; 0x5b4
	unsigned int doe = (z - era * (bigint_type)146097);
   13a04:	4b49      	ldr	r3, [pc, #292]	; (13b2c <gmtime_r+0x1bc>)
	bigint_type y = (time_t)yoe + era * 400;
   13a06:	f44f 7cc8 	mov.w	ip, #400	; 0x190
	unsigned int doe = (z - era * (bigint_type)146097);
   13a0a:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   13a0e:	fbb8 f2f2 	udiv	r2, r8, r2
   13a12:	fbb8 f3f5 	udiv	r3, r8, r5
   13a16:	4442      	add	r2, r8
   13a18:	1ad2      	subs	r2, r2, r3
   13a1a:	4b45      	ldr	r3, [pc, #276]	; (13b30 <gmtime_r+0x1c0>)
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   13a1c:	460f      	mov	r7, r1
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   13a1e:	fbb8 f3f3 	udiv	r3, r8, r3
   13a22:	1ad2      	subs	r2, r2, r3
   13a24:	f240 136d 	movw	r3, #365	; 0x16d
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   13a28:	f04f 0e64 	mov.w	lr, #100	; 0x64
	unsigned int yoe = (doe - doe / 1460U + doe / 36524U - doe / 146096U)
   13a2c:	fbb2 f4f3 	udiv	r4, r2, r3
	bigint_type y = (time_t)yoe + era * 400;
   13a30:	fba0 010c 	umull	r0, r1, r0, ip
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   13a34:	fbb2 f5f5 	udiv	r5, r2, r5
	bigint_type y = (time_t)yoe + era * 400;
   13a38:	fb0c 1107 	mla	r1, ip, r7, r1
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   13a3c:	fbb4 f7fe 	udiv	r7, r4, lr
	bigint_type y = (time_t)yoe + era * 400;
   13a40:	1900      	adds	r0, r0, r4
   13a42:	f141 0100 	adc.w	r1, r1, #0
   13a46:	e9cd 0100 	strd	r0, r1, [sp]
	unsigned int mp = (5U * doy + 2U) / 153U;
   13a4a:	2199      	movs	r1, #153	; 0x99
	unsigned int doy = doe - (365U * yoe + yoe / 4U - yoe / 100U);
   13a4c:	1b7d      	subs	r5, r7, r5
   13a4e:	44a8      	add	r8, r5
   13a50:	fb03 8314 	mls	r3, r3, r4, r8
	unsigned int mp = (5U * doy + 2U) / 153U;
   13a54:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   13a58:	f10c 0c02 	add.w	ip, ip, #2
   13a5c:	fbbc f5f1 	udiv	r5, ip, r1
	unsigned int d = doy - (153U * mp + 2U) / 5U + 1U;
   13a60:	f04f 0905 	mov.w	r9, #5
   13a64:	4369      	muls	r1, r5
   13a66:	3102      	adds	r1, #2
   13a68:	fbb1 f1f9 	udiv	r1, r1, r9
   13a6c:	f103 0801 	add.w	r8, r3, #1
   13a70:	eba8 0101 	sub.w	r1, r8, r1
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   13a74:	f240 58f9 	movw	r8, #1529	; 0x5f9
   13a78:	45c4      	cmp	ip, r8
   13a7a:	bf94      	ite	ls
   13a7c:	f04f 0c03 	movls.w	ip, #3
   13a80:	f06f 0c08 	mvnhi.w	ip, #8
	tp->tm_year = y + (m <= 2) - 1900;
   13a84:	9800      	ldr	r0, [sp, #0]
	unsigned int m = mp + ((mp < 10) ? 3 : -9);
   13a86:	4465      	add	r5, ip
	tp->tm_year = y + (m <= 2) - 1900;
   13a88:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   13a8c:	2d02      	cmp	r5, #2
   13a8e:	bf98      	it	ls
   13a90:	3001      	addls	r0, #1
	tp->tm_mon = m - 1;
   13a92:	3d01      	subs	r5, #1
	if (doy >= 306U) {
   13a94:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
	tp->tm_mday = d;
   13a98:	e9ca 1503 	strd	r1, r5, [sl, #12]
	tp->tm_year = y + (m <= 2) - 1900;
   13a9c:	f8ca 0014 	str.w	r0, [sl, #20]
	if (doy >= 306U) {
   13aa0:	d329      	bcc.n	13af6 <gmtime_r+0x186>
		tp->tm_yday = doy - 306U;
   13aa2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132

	time_civil_from_days(days, tp);

	tp->tm_hour = rem / 60U / 60U;
   13aa6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   13aaa:	f8ca 301c 	str.w	r3, [sl, #28]
	tp->tm_hour = rem / 60U / 60U;
   13aae:	fbb6 f3f2 	udiv	r3, r6, r2
	rem -= tp->tm_hour * 60 * 60;
   13ab2:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
   13ab6:	223c      	movs	r2, #60	; 0x3c
	tp->tm_hour = rem / 60U / 60U;
   13ab8:	f8ca 3008 	str.w	r3, [sl, #8]
	tp->tm_min = rem / 60;
   13abc:	fbb6 f3f2 	udiv	r3, r6, r2
	tp->tm_sec = rem - tp->tm_min * 60;

	return tp;
}
   13ac0:	4650      	mov	r0, sl
	tp->tm_sec = rem - tp->tm_min * 60;
   13ac2:	fb02 6613 	mls	r6, r2, r3, r6
	tp->tm_min = rem / 60;
   13ac6:	f8ca 3004 	str.w	r3, [sl, #4]
	tp->tm_sec = rem - tp->tm_min * 60;
   13aca:	f8ca 6000 	str.w	r6, [sl]
}
   13ace:	b002      	add	sp, #8
   13ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bigint_type days = (z >= 0 ? z : z - 86399) / 86400;
   13ad4:	2300      	movs	r3, #0
   13ad6:	4630      	mov	r0, r6
   13ad8:	4639      	mov	r1, r7
   13ada:	4a0f      	ldr	r2, [pc, #60]	; (13b18 <gmtime_r+0x1a8>)
   13adc:	e758      	b.n	13990 <gmtime_r+0x20>
	tp->tm_wday = (z >= -4) ? ((z + 4) % 7) : ((z + 5) % 7 + 6);
   13ade:	1d60      	adds	r0, r4, #5
   13ae0:	f145 0100 	adc.w	r1, r5, #0
   13ae4:	f7f8 fbac 	bl	c240 <__aeabi_ldivmod>
   13ae8:	3206      	adds	r2, #6
   13aea:	e76f      	b.n	139cc <gmtime_r+0x5c>
	bigint_type era = ((z >= 0) ? z : (z - 146096)) / 146097;
   13aec:	2300      	movs	r3, #0
   13aee:	4640      	mov	r0, r8
   13af0:	4649      	mov	r1, r9
   13af2:	4a0d      	ldr	r2, [pc, #52]	; (13b28 <gmtime_r+0x1b8>)
   13af4:	e780      	b.n	139f8 <gmtime_r+0x88>
		tp->tm_yday = doy + 59U + (((yoe % 4U == 0U) && (yoe % 100U != 0U)) || (yoe == 0U));
   13af6:	07a1      	lsls	r1, r4, #30
   13af8:	d102      	bne.n	13b00 <gmtime_r+0x190>
   13afa:	fb0e 4417 	mls	r4, lr, r7, r4
   13afe:	b93c      	cbnz	r4, 13b10 <gmtime_r+0x1a0>
   13b00:	f5b2 7fb6 	cmp.w	r2, #364	; 0x16c
   13b04:	bf8c      	ite	hi
   13b06:	2200      	movhi	r2, #0
   13b08:	2201      	movls	r2, #1
   13b0a:	333b      	adds	r3, #59	; 0x3b
   13b0c:	4413      	add	r3, r2
   13b0e:	e7ca      	b.n	13aa6 <gmtime_r+0x136>
   13b10:	2201      	movs	r2, #1
   13b12:	e7fa      	b.n	13b0a <gmtime_r+0x19a>
   13b14:	fffeae81 	.word	0xfffeae81
   13b18:	00015180 	.word	0x00015180
   13b1c:	fffeae80 	.word	0xfffeae80
   13b20:	000afa6c 	.word	0x000afa6c
   13b24:	0008bfbc 	.word	0x0008bfbc
   13b28:	00023ab1 	.word	0x00023ab1
   13b2c:	fffdc54f 	.word	0xfffdc54f
   13b30:	00023ab0 	.word	0x00023ab0

00013b34 <z_impl_clock_gettime>:
	switch (clock_id) {
   13b34:	2801      	cmp	r0, #1
{
   13b36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13b3a:	460c      	mov	r4, r1
	switch (clock_id) {
   13b3c:	d009      	beq.n	13b52 <z_impl_clock_gettime+0x1e>
   13b3e:	2804      	cmp	r0, #4
   13b40:	d03e      	beq.n	13bc0 <z_impl_clock_gettime+0x8c>
   13b42:	f000 fddf 	bl	14704 <z_impl_z_errno>
		errno = EINVAL;
   13b46:	2316      	movs	r3, #22
   13b48:	6003      	str	r3, [r0, #0]
   13b4a:	f04f 30ff 	mov.w	r0, #4294967295
}
   13b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		base = rt_clock_base;
   13b52:	4b1d      	ldr	r3, [pc, #116]	; (13bc8 <z_impl_clock_gettime+0x94>)
   13b54:	689d      	ldr	r5, [r3, #8]
   13b56:	e9d3 6700 	ldrd	r6, r7, [r3]
	return z_impl_k_uptime_ticks();
   13b5a:	f007 ff9d 	bl	1ba98 <z_impl_k_uptime_ticks>
   13b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13b62:	460a      	mov	r2, r1
   13b64:	fba0 0103 	umull	r0, r1, r0, r3
   13b68:	fb03 1102 	mla	r1, r3, r2, r1
   13b6c:	ea4f 38d0 	mov.w	r8, r0, lsr #15
   13b70:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   13b74:	ea4f 39d1 	mov.w	r9, r1, lsr #15
	ts->tv_sec = (int32_t) (elapsed_msecs / MSEC_PER_SEC);
   13b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13b7c:	2300      	movs	r3, #0
   13b7e:	4640      	mov	r0, r8
   13b80:	4649      	mov	r1, r9
   13b82:	f7f8 fbad 	bl	c2e0 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
   13b86:	1836      	adds	r6, r6, r0
   13b88:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	ts->tv_nsec = (int32_t) ((elapsed_msecs % MSEC_PER_SEC) *
   13b8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13b90:	2300      	movs	r3, #0
   13b92:	4640      	mov	r0, r8
   13b94:	4649      	mov	r1, r9
	ts->tv_sec += base.tv_sec;
   13b96:	e9c4 6700 	strd	r6, r7, [r4]
	ts->tv_nsec = (int32_t) ((elapsed_msecs % MSEC_PER_SEC) *
   13b9a:	f7f8 fba1 	bl	c2e0 <__aeabi_uldivmod>
	ts->tv_nsec += base.tv_nsec;
   13b9e:	4b0b      	ldr	r3, [pc, #44]	; (13bcc <z_impl_clock_gettime+0x98>)
   13ba0:	fb03 5202 	mla	r2, r3, r2, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   13ba4:	4b0a      	ldr	r3, [pc, #40]	; (13bd0 <z_impl_clock_gettime+0x9c>)
	ts->tv_nsec += base.tv_nsec;
   13ba6:	60a2      	str	r2, [r4, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   13ba8:	429a      	cmp	r2, r3
   13baa:	d907      	bls.n	13bbc <z_impl_clock_gettime+0x88>
		ts->tv_sec++;
   13bac:	1c71      	adds	r1, r6, #1
   13bae:	f147 0300 	adc.w	r3, r7, #0
   13bb2:	e9c4 1300 	strd	r1, r3, [r4]
		ts->tv_nsec -= NSEC_PER_SEC;
   13bb6:	4b07      	ldr	r3, [pc, #28]	; (13bd4 <z_impl_clock_gettime+0xa0>)
   13bb8:	4413      	add	r3, r2
   13bba:	60a3      	str	r3, [r4, #8]
	return 0;
   13bbc:	2000      	movs	r0, #0
   13bbe:	e7c6      	b.n	13b4e <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   13bc0:	2500      	movs	r5, #0
   13bc2:	2600      	movs	r6, #0
   13bc4:	2700      	movs	r7, #0
   13bc6:	e7c8      	b.n	13b5a <z_impl_clock_gettime+0x26>
   13bc8:	200103b0 	.word	0x200103b0
   13bcc:	000f4240 	.word	0x000f4240
   13bd0:	3b9ac9ff 	.word	0x3b9ac9ff
   13bd4:	c4653600 	.word	0xc4653600

00013bd8 <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   13bd8:	f000 021f 	and.w	r2, r0, #31
   13bdc:	4805      	ldr	r0, [pc, #20]	; (13bf4 <nrf_gpio_cfg_sense_set+0x1c>)
   13bde:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   13be2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   13be6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   13bea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   13bee:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   13bf2:	4770      	bx	lr
   13bf4:	40842500 	.word	0x40842500

00013bf8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   13bf8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   13bfa:	4b09      	ldr	r3, [pc, #36]	; (13c20 <gpio_nrfx_init+0x28>)
   13bfc:	781a      	ldrb	r2, [r3, #0]
   13bfe:	b96a      	cbnz	r2, 13c1c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   13c00:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13c02:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   13c04:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   13c06:	2105      	movs	r1, #5
   13c08:	f7ff f812 	bl	12c30 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   13c0c:	2031      	movs	r0, #49	; 0x31
   13c0e:	f7fe fff1 	bl	12bf4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   13c12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   13c16:	4b03      	ldr	r3, [pc, #12]	; (13c24 <gpio_nrfx_init+0x2c>)
   13c18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   13c1c:	2000      	movs	r0, #0
   13c1e:	bd08      	pop	{r3, pc}
   13c20:	2001ec7e 	.word	0x2001ec7e
   13c24:	40031000 	.word	0x40031000

00013c28 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13c28:	4b28      	ldr	r3, [pc, #160]	; (13ccc <gpio_nrfx_config+0xa4>)
{
   13c2a:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13c2c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13c2e:	4828      	ldr	r0, [pc, #160]	; (13cd0 <gpio_nrfx_config+0xa8>)
   13c30:	4013      	ands	r3, r2
   13c32:	4283      	cmp	r3, r0
   13c34:	d03b      	beq.n	13cae <gpio_nrfx_config+0x86>
   13c36:	d80d      	bhi.n	13c54 <gpio_nrfx_config+0x2c>
   13c38:	2b06      	cmp	r3, #6
   13c3a:	d015      	beq.n	13c68 <gpio_nrfx_config+0x40>
   13c3c:	d805      	bhi.n	13c4a <gpio_nrfx_config+0x22>
   13c3e:	b19b      	cbz	r3, 13c68 <gpio_nrfx_config+0x40>
   13c40:	2b02      	cmp	r3, #2
   13c42:	d036      	beq.n	13cb2 <gpio_nrfx_config+0x8a>
   13c44:	f06f 0015 	mvn.w	r0, #21
   13c48:	e030      	b.n	13cac <gpio_nrfx_config+0x84>
   13c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   13c4e:	d1f9      	bne.n	13c44 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   13c50:	2301      	movs	r3, #1
   13c52:	e009      	b.n	13c68 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   13c54:	481f      	ldr	r0, [pc, #124]	; (13cd4 <gpio_nrfx_config+0xac>)
   13c56:	4283      	cmp	r3, r0
   13c58:	d02d      	beq.n	13cb6 <gpio_nrfx_config+0x8e>
   13c5a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   13c5e:	d02c      	beq.n	13cba <gpio_nrfx_config+0x92>
   13c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   13c64:	d1ee      	bne.n	13c44 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   13c66:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   13c68:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   13c6a:	bf4c      	ite	mi
   13c6c:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   13c6e:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   13c72:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   13c76:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   13c7a:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   13c7e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   13c82:	d006      	beq.n	13c92 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   13c84:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13c88:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   13c8a:	d018      	beq.n	13cbe <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
   13c8c:	2201      	movs	r2, #1
   13c8e:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   13c90:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   13c92:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   13c96:	2000      	movs	r0, #0
   13c98:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
   13c9c:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13ca0:	4a0d      	ldr	r2, [pc, #52]	; (13cd8 <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   13ca2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   13ca6:	3180      	adds	r1, #128	; 0x80
   13ca8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   13cac:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   13cae:	2307      	movs	r3, #7
   13cb0:	e7da      	b.n	13c68 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   13cb2:	2304      	movs	r3, #4
   13cb4:	e7d8      	b.n	13c68 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   13cb6:	2305      	movs	r3, #5
   13cb8:	e7d6      	b.n	13c68 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   13cba:	2303      	movs	r3, #3
   13cbc:	e7d4      	b.n	13c68 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   13cbe:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   13cc0:	bf42      	ittt	mi
   13cc2:	2201      	movmi	r2, #1
   13cc4:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   13cc6:	60f2      	strmi	r2, [r6, #12]
}
   13cc8:	e7e3      	b.n	13c92 <gpio_nrfx_config+0x6a>
   13cca:	bf00      	nop
   13ccc:	00f00006 	.word	0x00f00006
   13cd0:	00100006 	.word	0x00100006
   13cd4:	00400002 	.word	0x00400002
   13cd8:	40842500 	.word	0x40842500

00013cdc <gpio_nrfx_pin_interrupt_configure>:
{
   13cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ce0:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13ce2:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   13ce4:	f8d0 800c 	ldr.w	r8, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   13ce8:	7a08      	ldrb	r0, [r1, #8]
   13cea:	f005 071f 	and.w	r7, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   13cee:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13cf2:	ea47 1740 	orr.w	r7, r7, r0, lsl #5
   13cf6:	d10a      	bne.n	13d0e <_flash_used+0x12>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13cf8:	486e      	ldr	r0, [pc, #440]	; (13eb4 <_flash_used+0x1b8>)
    *p_pin = pin_number & 0x1F;
   13cfa:	f007 011f 	and.w	r1, r7, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   13cfe:	3180      	adds	r1, #128	; 0x80
   13d00:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   13d04:	07c8      	lsls	r0, r1, #31
   13d06:	d508      	bpl.n	13d1a <_flash_used+0x1e>
		return -ENOTSUP;
   13d08:	f06f 0022 	mvn.w	r0, #34	; 0x22
   13d0c:	e0c2      	b.n	13e94 <_flash_used+0x198>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13d0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   13d12:	f8d8 100c 	ldr.w	r1, [r8, #12]
   13d16:	f000 80ae 	beq.w	13e76 <_flash_used+0x17a>
   13d1a:	2101      	movs	r1, #1
   13d1c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   13d20:	40a9      	lsls	r1, r5
   13d22:	4301      	orrs	r1, r0
   13d24:	f8c8 100c 	str.w	r1, [r8, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13d28:	2101      	movs	r1, #1
   13d2a:	f8d8 0014 	ldr.w	r0, [r8, #20]
   13d2e:	40a9      	lsls	r1, r5
   13d30:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   13d34:	f8d8 2018 	ldr.w	r2, [r8, #24]
   13d38:	bf0c      	ite	eq
   13d3a:	4308      	orreq	r0, r1
   13d3c:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   13d3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13d42:	bf0c      	ite	eq
   13d44:	430a      	orreq	r2, r1
   13d46:	438a      	bicne	r2, r1
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   13d48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13d4c:	f04f 0300 	mov.w	r3, #0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   13d50:	f8c8 2018 	str.w	r2, [r8, #24]
   13d54:	f8d8 2010 	ldr.w	r2, [r8, #16]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   13d58:	4e57      	ldr	r6, [pc, #348]	; (13eb8 <_flash_used+0x1bc>)
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   13d5a:	bf0c      	ite	eq
   13d5c:	4311      	orreq	r1, r2
   13d5e:	ea22 0101 	bicne.w	r1, r2, r1
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13d62:	f8c8 0014 	str.w	r0, [r8, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   13d66:	f8c8 1010 	str.w	r1, [r8, #16]
   13d6a:	f8d6 2304 	ldr.w	r2, [r6, #772]	; 0x304
   13d6e:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13d70:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   13d74:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   13d78:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   13d7c:	428f      	cmp	r7, r1
   13d7e:	d17f      	bne.n	13e80 <_flash_used+0x184>
		    && (intenset & BIT(i))) {
   13d80:	fa22 f103 	lsr.w	r1, r2, r3
   13d84:	07c9      	lsls	r1, r1, #31
   13d86:	d57b      	bpl.n	13e80 <_flash_used+0x184>
			(void)atomic_and(mask, ~BIT(i));
   13d88:	2201      	movs	r2, #1
   13d8a:	409a      	lsls	r2, r3
   13d8c:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d8e:	494b      	ldr	r1, [pc, #300]	; (13ebc <_flash_used+0x1c0>)
   13d90:	e8d1 4fef 	ldaex	r4, [r1]
   13d94:	4004      	ands	r4, r0
   13d96:	e8c1 4fec 	stlex	ip, r4, [r1]
   13d9a:	f1bc 0f00 	cmp.w	ip, #0
   13d9e:	d1f7      	bne.n	13d90 <_flash_used+0x94>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   13da0:	009b      	lsls	r3, r3, #2
   13da2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13da6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   13daa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   13dae:	f021 0101 	bic.w	r1, r1, #1
   13db2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   13db6:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   13dba:	2100      	movs	r1, #0
   13dbc:	4638      	mov	r0, r7
   13dbe:	f7ff ff0b 	bl	13bd8 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   13dc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   13dc6:	40eb      	lsrs	r3, r5
   13dc8:	f013 0301 	ands.w	r3, r3, #1
   13dcc:	d051      	beq.n	13e72 <_flash_used+0x176>
		if (data->trig_edge & BIT(pin)) {
   13dce:	f8d8 3014 	ldr.w	r3, [r8, #20]
   13dd2:	40eb      	lsrs	r3, r5
   13dd4:	f013 0401 	ands.w	r4, r3, #1
   13dd8:	d05e      	beq.n	13e98 <_flash_used+0x19c>
			if (data->double_edge & BIT(pin)) {
   13dda:	f8d8 3018 	ldr.w	r3, [r8, #24]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   13dde:	2200      	movs	r2, #0
			if (data->double_edge & BIT(pin)) {
   13de0:	40eb      	lsrs	r3, r5
   13de2:	07db      	lsls	r3, r3, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   13de4:	bf48      	it	mi
   13de6:	2503      	movmi	r5, #3
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   13de8:	f04f 0c01 	mov.w	ip, #1
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   13dec:	bf5f      	itttt	pl
   13dee:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
   13df2:	fa21 f505 	lsrpl.w	r5, r1, r5
   13df6:	f005 0501 	andpl.w	r5, r5, #1
   13dfa:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13dfe:	492f      	ldr	r1, [pc, #188]	; (13ebc <_flash_used+0x1c0>)
   13e00:	bf58      	it	pl
   13e02:	b2ed      	uxtbpl	r5, r5
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   13e04:	fa0c f402 	lsl.w	r4, ip, r2
   13e08:	e8d1 0fef 	ldaex	r0, [r1]
   13e0c:	ea40 0304 	orr.w	r3, r0, r4
   13e10:	e8c1 3fee 	stlex	lr, r3, [r1]
   13e14:	f1be 0f00 	cmp.w	lr, #0
   13e18:	d1f6      	bne.n	13e08 <_flash_used+0x10c>
		if ((prev & BIT(channel)) == 0) {
   13e1a:	40d0      	lsrs	r0, r2
   13e1c:	f010 0301 	ands.w	r3, r0, #1
   13e20:	d133      	bne.n	13e8a <_flash_used+0x18e>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   13e22:	0091      	lsls	r1, r2, #2
   13e24:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   13e28:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   13e2c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   13e30:	3240      	adds	r2, #64	; 0x40
   13e32:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   13e36:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   13e3a:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e3e:	023f      	lsls	r7, r7, #8
   13e40:	0092      	lsls	r2, r2, #2
   13e42:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   13e46:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   13e4a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e4c:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    return ((uint32_t)p_reg + event);
   13e50:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   13e54:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13e58:	4307      	orrs	r7, r0
   13e5a:	f8c1 7510 	str.w	r7, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13e5e:	6013      	str	r3, [r2, #0]
   13e60:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   13e62:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   13e66:	f042 0201 	orr.w	r2, r2, #1
   13e6a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   13e6e:	f8c6 4304 	str.w	r4, [r6, #772]	; 0x304
	int res = 0;
   13e72:	4618      	mov	r0, r3
   13e74:	e00e      	b.n	13e94 <_flash_used+0x198>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13e76:	2001      	movs	r0, #1
   13e78:	40a8      	lsls	r0, r5
   13e7a:	ea21 0100 	bic.w	r1, r1, r0
   13e7e:	e751      	b.n	13d24 <_flash_used+0x28>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13e80:	3301      	adds	r3, #1
   13e82:	2b08      	cmp	r3, #8
   13e84:	f47f af74 	bne.w	13d70 <_flash_used+0x74>
   13e88:	e797      	b.n	13dba <_flash_used+0xbe>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   13e8a:	3201      	adds	r2, #1
   13e8c:	2a08      	cmp	r2, #8
   13e8e:	d1b9      	bne.n	13e04 <_flash_used+0x108>
	return -ENODEV;
   13e90:	f06f 0012 	mvn.w	r0, #18
}
   13e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13e98:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   13e9c:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13e9e:	40e9      	lsrs	r1, r5
   13ea0:	f001 0101 	and.w	r1, r1, #1
   13ea4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   13ea8:	b2c9      	uxtb	r1, r1
   13eaa:	f7ff fe95 	bl	13bd8 <nrf_gpio_cfg_sense_set>
	int res = 0;
   13eae:	4620      	mov	r0, r4
   13eb0:	e7f0      	b.n	13e94 <_flash_used+0x198>
   13eb2:	bf00      	nop
   13eb4:	40842500 	.word	0x40842500
   13eb8:	40031000 	.word	0x40031000
   13ebc:	20010bac 	.word	0x20010bac

00013ec0 <gpiote_event_handler>:
{
   13ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ec4:	4f3f      	ldr	r7, [pc, #252]	; (13fc4 <gpiote_event_handler+0x104>)
   13ec6:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   13ec8:	2e00      	cmp	r6, #0
   13eca:	d04f      	beq.n	13f6c <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
   13ecc:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   13ed0:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   13ed4:	4b3c      	ldr	r3, [pc, #240]	; (13fc8 <gpiote_event_handler+0x108>)
   13ed6:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   13ed8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   13edc:	430a      	orrs	r2, r1
   13ede:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   13ee2:	4a3a      	ldr	r2, [pc, #232]	; (13fcc <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   13ee4:	691b      	ldr	r3, [r3, #16]
   13ee6:	6914      	ldr	r4, [r2, #16]
   13ee8:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   13eea:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   13eee:	bb75      	cbnz	r5, 13f4e <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13ef0:	603d      	str	r5, [r7, #0]
   13ef2:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   13ef4:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   13ef6:	2501      	movs	r5, #1
   13ef8:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   13efa:	4835      	ldr	r0, [pc, #212]	; (13fd0 <gpiote_event_handler+0x110>)
   13efc:	4935      	ldr	r1, [pc, #212]	; (13fd4 <gpiote_event_handler+0x114>)
   13efe:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   13f02:	fa05 fc03 	lsl.w	ip, r5, r3
   13f06:	ea1c 0f02 	tst.w	ip, r2
   13f0a:	d00f      	beq.n	13f2c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13f0c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   13f10:	b162      	cbz	r2, 13f2c <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13f12:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   13f16:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13f1a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   13f1e:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   13f22:	fa05 f202 	lsl.w	r2, r5, r2
   13f26:	4314      	orrs	r4, r2
   13f28:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   13f2c:	3301      	adds	r3, #1
   13f2e:	2b08      	cmp	r3, #8
   13f30:	d1e5      	bne.n	13efe <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   13f32:	b9ec      	cbnz	r4, 13f70 <gpiote_event_handler+0xb0>
	if (port_event) {
   13f34:	b14e      	cbz	r6, 13f4a <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
   13f36:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   13f38:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   13f3a:	4d23      	ldr	r5, [pc, #140]	; (13fc8 <gpiote_event_handler+0x108>)
   13f3c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   13f3e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   13f42:	430a      	orrs	r2, r1
   13f44:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   13f48:	bb54      	cbnz	r4, 13fa0 <gpiote_event_handler+0xe0>
}
   13f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
   13f4e:	ea15 0f08 	tst.w	r5, r8
   13f52:	d006      	beq.n	13f62 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   13f54:	2100      	movs	r1, #0
   13f56:	f009 001f 	and.w	r0, r9, #31
   13f5a:	f7ff fe3d 	bl	13bd8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   13f5e:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   13f62:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   13f66:	ea4f 0848 	mov.w	r8, r8, lsl #1
   13f6a:	e7c0      	b.n	13eee <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   13f6c:	4634      	mov	r4, r6
   13f6e:	e7c1      	b.n	13ef4 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13f70:	4b15      	ldr	r3, [pc, #84]	; (13fc8 <gpiote_event_handler+0x108>)
   13f72:	6859      	ldr	r1, [r3, #4]
   13f74:	2900      	cmp	r1, #0
   13f76:	d0dd      	beq.n	13f34 <gpiote_event_handler+0x74>
	return node->next;
   13f78:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   13f7a:	4f17      	ldr	r7, [pc, #92]	; (13fd8 <gpiote_event_handler+0x118>)
   13f7c:	2d00      	cmp	r5, #0
   13f7e:	bf38      	it	cc
   13f80:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   13f82:	688a      	ldr	r2, [r1, #8]
   13f84:	4022      	ands	r2, r4
   13f86:	d002      	beq.n	13f8e <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
   13f88:	4638      	mov	r0, r7
   13f8a:	684b      	ldr	r3, [r1, #4]
   13f8c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   13f8e:	2d00      	cmp	r5, #0
   13f90:	d0d0      	beq.n	13f34 <gpiote_event_handler+0x74>
   13f92:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13f94:	4629      	mov	r1, r5
   13f96:	2b00      	cmp	r3, #0
   13f98:	bf38      	it	cc
   13f9a:	2300      	movcc	r3, #0
   13f9c:	461d      	mov	r5, r3
   13f9e:	e7f0      	b.n	13f82 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
   13fa0:	4226      	tst	r6, r4
   13fa2:	d00c      	beq.n	13fbe <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13fa4:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   13fa6:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   13faa:	40f9      	lsrs	r1, r7
   13fac:	f001 0101 	and.w	r1, r1, #1
   13fb0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   13fb4:	b2c9      	uxtb	r1, r1
   13fb6:	f7ff fe0f 	bl	13bd8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   13fba:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   13fbe:	3701      	adds	r7, #1
		bit <<= 1;
   13fc0:	0076      	lsls	r6, r6, #1
   13fc2:	e7c1      	b.n	13f48 <gpiote_event_handler+0x88>
   13fc4:	4003117c 	.word	0x4003117c
   13fc8:	20010b90 	.word	0x20010b90
   13fcc:	40842500 	.word	0x40842500
   13fd0:	40031000 	.word	0x40031000
   13fd4:	40031100 	.word	0x40031100
   13fd8:	20010120 	.word	0x20010120

00013fdc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   13fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   13fde:	794b      	ldrb	r3, [r1, #5]
   13fe0:	2b01      	cmp	r3, #1
   13fe2:	d029      	beq.n	14038 <uarte_nrfx_configure+0x5c>
   13fe4:	2b03      	cmp	r3, #3
   13fe6:	d124      	bne.n	14032 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   13fe8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13fea:	798b      	ldrb	r3, [r1, #6]
   13fec:	2b03      	cmp	r3, #3
   13fee:	d120      	bne.n	14032 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   13ff0:	79cc      	ldrb	r4, [r1, #7]
   13ff2:	b124      	cbz	r4, 13ffe <uarte_nrfx_configure+0x22>
   13ff4:	2c01      	cmp	r4, #1
   13ff6:	d11c      	bne.n	14032 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   13ff8:	6843      	ldr	r3, [r0, #4]
   13ffa:	791b      	ldrb	r3, [r3, #4]
   13ffc:	b1cb      	cbz	r3, 14032 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   13ffe:	790a      	ldrb	r2, [r1, #4]
   14000:	b112      	cbz	r2, 14008 <uarte_nrfx_configure+0x2c>
   14002:	2a02      	cmp	r2, #2
   14004:	d115      	bne.n	14032 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   14006:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14008:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1400a:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1400c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14010:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   14012:	d065      	beq.n	140e0 <uarte_nrfx_configure+0x104>
   14014:	d82d      	bhi.n	14072 <uarte_nrfx_configure+0x96>
   14016:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1401a:	d064      	beq.n	140e6 <uarte_nrfx_configure+0x10a>
   1401c:	d816      	bhi.n	1404c <uarte_nrfx_configure+0x70>
   1401e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   14022:	d062      	beq.n	140ea <uarte_nrfx_configure+0x10e>
   14024:	d80a      	bhi.n	1403c <uarte_nrfx_configure+0x60>
   14026:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1402a:	d061      	beq.n	140f0 <uarte_nrfx_configure+0x114>
   1402c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14030:	d061      	beq.n	140f6 <uarte_nrfx_configure+0x11a>
   14032:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14036:	e052      	b.n	140de <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   14038:	2600      	movs	r6, #0
   1403a:	e7d6      	b.n	13fea <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1403c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14040:	d05c      	beq.n	140fc <uarte_nrfx_configure+0x120>
   14042:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   14046:	d1f4      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14048:	4b37      	ldr	r3, [pc, #220]	; (14128 <uarte_nrfx_configure+0x14c>)
   1404a:	e03c      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1404c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14050:	d057      	beq.n	14102 <uarte_nrfx_configure+0x126>
   14052:	d807      	bhi.n	14064 <uarte_nrfx_configure+0x88>
   14054:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   14058:	d055      	beq.n	14106 <uarte_nrfx_configure+0x12a>
   1405a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1405e:	d1e8      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14060:	4b32      	ldr	r3, [pc, #200]	; (1412c <uarte_nrfx_configure+0x150>)
   14062:	e030      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14064:	f647 2712 	movw	r7, #31250	; 0x7a12
   14068:	42bb      	cmp	r3, r7
   1406a:	d1e2      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1406c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14070:	e029      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14072:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   14076:	d048      	beq.n	1410a <uarte_nrfx_configure+0x12e>
   14078:	d813      	bhi.n	140a2 <uarte_nrfx_configure+0xc6>
   1407a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1407e:	d047      	beq.n	14110 <uarte_nrfx_configure+0x134>
   14080:	d809      	bhi.n	14096 <uarte_nrfx_configure+0xba>
   14082:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   14086:	42bb      	cmp	r3, r7
   14088:	d044      	beq.n	14114 <uarte_nrfx_configure+0x138>
   1408a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1408e:	d1d0      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14090:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14094:	e017      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14096:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1409a:	d1ca      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1409c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   140a0:	e011      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   140a2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   140a6:	d038      	beq.n	1411a <uarte_nrfx_configure+0x13e>
   140a8:	d808      	bhi.n	140bc <uarte_nrfx_configure+0xe0>
   140aa:	4f21      	ldr	r7, [pc, #132]	; (14130 <uarte_nrfx_configure+0x154>)
   140ac:	42bb      	cmp	r3, r7
   140ae:	d037      	beq.n	14120 <uarte_nrfx_configure+0x144>
   140b0:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   140b4:	d1bd      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   140b6:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   140ba:	e004      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   140bc:	4f1d      	ldr	r7, [pc, #116]	; (14134 <uarte_nrfx_configure+0x158>)
   140be:	42bb      	cmp	r3, r7
   140c0:	d1b7      	bne.n	14032 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   140c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   140c6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   140ca:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   140cc:	4334      	orrs	r4, r6
   140ce:	4322      	orrs	r2, r4
   140d0:	3304      	adds	r3, #4
   140d2:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   140d4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   140d8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   140dc:	2000      	movs	r0, #0
}
   140de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   140e0:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   140e4:	e7ef      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   140e6:	4b14      	ldr	r3, [pc, #80]	; (14138 <uarte_nrfx_configure+0x15c>)
   140e8:	e7ed      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   140ea:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   140ee:	e7ea      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   140f0:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   140f4:	e7e7      	b.n	140c6 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   140f6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   140fa:	e7e4      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   140fc:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14100:	e7e1      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14102:	4b0e      	ldr	r3, [pc, #56]	; (1413c <uarte_nrfx_configure+0x160>)
   14104:	e7df      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14106:	4b0e      	ldr	r3, [pc, #56]	; (14140 <uarte_nrfx_configure+0x164>)
   14108:	e7dd      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1410a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1410e:	e7da      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14110:	4b0c      	ldr	r3, [pc, #48]	; (14144 <uarte_nrfx_configure+0x168>)
   14112:	e7d8      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14114:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14118:	e7d5      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1411a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1411e:	e7d2      	b.n	140c6 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14120:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14124:	e7cf      	b.n	140c6 <uarte_nrfx_configure+0xea>
   14126:	bf00      	nop
   14128:	0013b000 	.word	0x0013b000
   1412c:	004ea000 	.word	0x004ea000
   14130:	0003d090 	.word	0x0003d090
   14134:	000f4240 	.word	0x000f4240
   14138:	00275000 	.word	0x00275000
   1413c:	0075c000 	.word	0x0075c000
   14140:	003af000 	.word	0x003af000
   14144:	013a9000 	.word	0x013a9000

00014148 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1414c:	4606      	mov	r6, r0
   1414e:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14150:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14152:	f007 fc33 	bl	1b9bc <k_is_in_isr>
   14156:	b9b8      	cbnz	r0, 14188 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   14158:	4b28      	ldr	r3, [pc, #160]	; (141fc <uarte_nrfx_poll_out+0xb4>)
   1415a:	781b      	ldrb	r3, [r3, #0]
   1415c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   14160:	6872      	ldr	r2, [r6, #4]
   14162:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   14164:	b193      	cbz	r3, 1418c <uarte_nrfx_poll_out+0x44>
   14166:	f04f 0320 	mov.w	r3, #32
   1416a:	f3ef 8411 	mrs	r4, BASEPRI
   1416e:	f383 8811 	msr	BASEPRI, r3
   14172:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   14176:	4630      	mov	r0, r6
   14178:	f007 f98e 	bl	1b498 <is_tx_ready>
   1417c:	bb38      	cbnz	r0, 141ce <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1417e:	f384 8811 	msr	BASEPRI, r4
   14182:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14186:	e7ee      	b.n	14166 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14188:	2301      	movs	r3, #1
   1418a:	e7e9      	b.n	14160 <uarte_nrfx_poll_out+0x18>
   1418c:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1418e:	4630      	mov	r0, r6
   14190:	f007 f982 	bl	1b498 <is_tx_ready>
   14194:	b970      	cbnz	r0, 141b4 <uarte_nrfx_poll_out+0x6c>
   14196:	2001      	movs	r0, #1
   14198:	f007 fa6a 	bl	1b670 <nrfx_busy_wait>
   1419c:	3c01      	subs	r4, #1
   1419e:	d1f6      	bne.n	1418e <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   141a0:	2100      	movs	r1, #0
   141a2:	2021      	movs	r0, #33	; 0x21
   141a4:	f001 f998 	bl	154d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   141a8:	e7f0      	b.n	1418c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   141aa:	f384 8811 	msr	BASEPRI, r4
   141ae:	f3bf 8f6f 	isb	sy
}
   141b2:	e7f5      	b.n	141a0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   141b4:	f04f 0320 	mov.w	r3, #32
   141b8:	f3ef 8411 	mrs	r4, BASEPRI
   141bc:	f383 8811 	msr	BASEPRI, r3
   141c0:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   141c4:	4630      	mov	r0, r6
   141c6:	f007 f967 	bl	1b498 <is_tx_ready>
   141ca:	2800      	cmp	r0, #0
   141cc:	d0ed      	beq.n	141aa <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   141ce:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141d0:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   141d2:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   141d6:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   141da:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   141de:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   141e2:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   141e6:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   141ea:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   141ee:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   141f0:	f384 8811 	msr	BASEPRI, r4
   141f4:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   141f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   141fc:	2001ecbf 	.word	0x2001ecbf

00014200 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14200:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   14204:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   14206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1420a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1420c:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1420e:	460f      	mov	r7, r1
   14210:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
   14214:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   14216:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   14218:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1421a:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   1421c:	4b44      	ldr	r3, [pc, #272]	; (14330 <uarte_instance_init.isra.0+0x130>)
    *p_pin = pin_number & 0x1F;
   1421e:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14222:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   14224:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14226:	2103      	movs	r1, #3
   14228:	3280      	adds	r2, #128	; 0x80
   1422a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1422e:	687a      	ldr	r2, [r7, #4]
   14230:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   14232:	bf1e      	ittt	ne
   14234:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14238:	3180      	addne	r1, #128	; 0x80
   1423a:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1423e:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
   14240:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   14244:	1c48      	adds	r0, r1, #1
   14246:	bf18      	it	ne
   14248:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
   1424a:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   1424e:	bf1e      	ittt	ne
   14250:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14254:	3280      	addne	r2, #128	; 0x80
   14256:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1425a:	68f8      	ldr	r0, [r7, #12]
   1425c:	1c42      	adds	r2, r0, #1
   1425e:	d00c      	beq.n	1427a <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14260:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   14264:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14268:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   1426c:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14270:	f04f 0c03 	mov.w	ip, #3
   14274:	3280      	adds	r2, #128	; 0x80
   14276:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   1427a:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1427e:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14282:	68e9      	ldr	r1, [r5, #12]
   14284:	4628      	mov	r0, r5
   14286:	3104      	adds	r1, #4
   14288:	f7ff fea8 	bl	13fdc <uarte_nrfx_configure>
	if (err) {
   1428c:	4680      	mov	r8, r0
   1428e:	2800      	cmp	r0, #0
   14290:	d14a      	bne.n	14328 <uarte_instance_init.isra.0+0x128>

#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   14292:	686b      	ldr	r3, [r5, #4]
   14294:	799b      	ldrb	r3, [r3, #6]
   14296:	b323      	cbz	r3, 142e2 <uarte_instance_init.isra.0+0xe2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14298:	f106 0012 	add.w	r0, r6, #18
   1429c:	f000 f9ae 	bl	145fc <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   142a0:	4b24      	ldr	r3, [pc, #144]	; (14334 <uarte_instance_init.isra.0+0x134>)
   142a2:	4298      	cmp	r0, r3
   142a4:	d010      	beq.n	142c8 <uarte_instance_init.isra.0+0xc8>
		LOG_ERR("Failed to allocate PPI Channel");
   142a6:	4b24      	ldr	r3, [pc, #144]	; (14338 <uarte_instance_init.isra.0+0x138>)
   142a8:	681b      	ldr	r3, [r3, #0]
   142aa:	075b      	lsls	r3, r3, #29
   142ac:	d009      	beq.n	142c2 <uarte_instance_init.isra.0+0xc2>
   142ae:	4923      	ldr	r1, [pc, #140]	; (1433c <uarte_instance_init.isra.0+0x13c>)
   142b0:	4b23      	ldr	r3, [pc, #140]	; (14340 <uarte_instance_init.isra.0+0x140>)
   142b2:	4824      	ldr	r0, [pc, #144]	; (14344 <uarte_instance_init.isra.0+0x144>)
   142b4:	1ac9      	subs	r1, r1, r3
   142b6:	08c9      	lsrs	r1, r1, #3
   142b8:	0189      	lsls	r1, r1, #6
   142ba:	f041 0101 	orr.w	r1, r1, #1
   142be:	f005 fbc3 	bl	19a48 <log_0>
		return -EIO;
   142c2:	f06f 0804 	mvn.w	r8, #4
   142c6:	e02f      	b.n	14328 <uarte_instance_init.isra.0+0x128>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   142c8:	7cb3      	ldrb	r3, [r6, #18]
   142ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   142ce:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   142d2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   142d6:	2301      	movs	r3, #1
   142d8:	7cb2      	ldrb	r2, [r6, #18]
   142da:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   142dc:	4a1a      	ldr	r2, [pc, #104]	; (14348 <uarte_instance_init.isra.0+0x148>)
   142de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   142e2:	2308      	movs	r3, #8
   142e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   142e8:	687b      	ldr	r3, [r7, #4]
   142ea:	3301      	adds	r3, #1
   142ec:	d00c      	beq.n	14308 <uarte_instance_init.isra.0+0x108>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   142ee:	2300      	movs	r3, #0
   142f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   142f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   142f8:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   142fc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14300:	2301      	movs	r3, #1
   14302:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14306:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   14308:	686b      	ldr	r3, [r5, #4]
   1430a:	799b      	ldrb	r3, [r3, #6]
   1430c:	b91b      	cbnz	r3, 14316 <uarte_instance_init.isra.0+0x116>
    p_reg->INTENSET = mask;
   1430e:	f44f 7380 	mov.w	r3, #256	; 0x100
   14312:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   14316:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   14318:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1431a:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1431e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14322:	2301      	movs	r3, #1
   14324:	60a3      	str	r3, [r4, #8]
   14326:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   14328:	4640      	mov	r0, r8
   1432a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1432e:	bf00      	nop
   14330:	40842500 	.word	0x40842500
   14334:	0bad0000 	.word	0x0bad0000
   14338:	20010160 	.word	0x20010160
   1433c:	0001c1c4 	.word	0x0001c1c4
   14340:	0001c16c 	.word	0x0001c16c
   14344:	0001f949 	.word	0x0001f949
   14348:	40017000 	.word	0x40017000

0001434c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1434c:	b530      	push	{r4, r5, lr}
   1434e:	b085      	sub	sp, #20
   14350:	466c      	mov	r4, sp
   14352:	4605      	mov	r5, r0
   14354:	4b08      	ldr	r3, [pc, #32]	; (14378 <uarte_0_init+0x2c>)
   14356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1435c:	2200      	movs	r2, #0
   1435e:	2101      	movs	r1, #1
   14360:	2008      	movs	r0, #8
   14362:	f7fe fc65 	bl	12c30 <z_arm_irq_priority_set>
   14366:	2008      	movs	r0, #8
   14368:	f7fe fc44 	bl	12bf4 <arch_irq_enable>
   1436c:	4621      	mov	r1, r4
   1436e:	4628      	mov	r0, r5
   14370:	f7ff ff46 	bl	14200 <uarte_instance_init.isra.0>
   14374:	b005      	add	sp, #20
   14376:	bd30      	pop	{r4, r5, pc}
   14378:	0001c2a0 	.word	0x0001c2a0

0001437c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1437c:	b530      	push	{r4, r5, lr}
   1437e:	b085      	sub	sp, #20
   14380:	466c      	mov	r4, sp
   14382:	4605      	mov	r5, r0
   14384:	4b08      	ldr	r3, [pc, #32]	; (143a8 <uarte_1_init+0x2c>)
   14386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1438c:	2200      	movs	r2, #0
   1438e:	2101      	movs	r1, #1
   14390:	2009      	movs	r0, #9
   14392:	f7fe fc4d 	bl	12c30 <z_arm_irq_priority_set>
   14396:	2009      	movs	r0, #9
   14398:	f7fe fc2c 	bl	12bf4 <arch_irq_enable>
   1439c:	4621      	mov	r1, r4
   1439e:	4628      	mov	r0, r5
   143a0:	f7ff ff2e 	bl	14200 <uarte_instance_init.isra.0>
   143a4:	b005      	add	sp, #20
   143a6:	bd30      	pop	{r4, r5, pc}
   143a8:	0001c2b0 	.word	0x0001c2b0

000143ac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   143ac:	b508      	push	{r3, lr}
	z_impl_log_panic();
   143ae:	f7fb fdb3 	bl	ff18 <z_impl_log_panic>
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   143b2:	4b08      	ldr	r3, [pc, #32]	; (143d4 <k_sys_fatal_error_handler+0x28>)
   143b4:	681b      	ldr	r3, [r3, #0]
   143b6:	075b      	lsls	r3, r3, #29
   143b8:	d009      	beq.n	143ce <k_sys_fatal_error_handler+0x22>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   143ba:	4907      	ldr	r1, [pc, #28]	; (143d8 <k_sys_fatal_error_handler+0x2c>)
   143bc:	4b07      	ldr	r3, [pc, #28]	; (143dc <k_sys_fatal_error_handler+0x30>)
   143be:	4808      	ldr	r0, [pc, #32]	; (143e0 <k_sys_fatal_error_handler+0x34>)
   143c0:	1ac9      	subs	r1, r1, r3
   143c2:	08c9      	lsrs	r1, r1, #3
   143c4:	0189      	lsls	r1, r1, #6
   143c6:	f041 0101 	orr.w	r1, r1, #1
   143ca:	f005 fb3d 	bl	19a48 <log_0>
	sys_arch_reboot(0);
   143ce:	2000      	movs	r0, #0
   143d0:	f7ff f89a 	bl	13508 <sys_arch_reboot>

	CODE_UNREACHABLE;
   143d4:	20010140 	.word	0x20010140
   143d8:	0001c184 	.word	0x0001c184
   143dc:	0001c16c 	.word	0x0001c16c
   143e0:	0001f97f 	.word	0x0001f97f

000143e4 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   143e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   143e8:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   143ea:	4c21      	ldr	r4, [pc, #132]	; (14470 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   143ec:	4e21      	ldr	r6, [pc, #132]	; (14474 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   143ee:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   143f2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1447c <check_ext_api_requests+0x98>
{
   143f6:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   143f8:	45a8      	cmp	r8, r5
   143fa:	d803      	bhi.n	14404 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   143fc:	2000      	movs	r0, #0
   143fe:	b005      	add	sp, #20
   14400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   14404:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14406:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1440a:	681f      	ldr	r7, [r3, #0]
   1440c:	ab01      	add	r3, sp, #4
   1440e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   14412:	220c      	movs	r2, #12
   14414:	4619      	mov	r1, r3
   14416:	4638      	mov	r0, r7
   14418:	f006 ff1e 	bl	1b258 <memcmp>
   1441c:	b990      	cbnz	r0, 14444 <check_ext_api_requests+0x60>
   1441e:	b18f      	cbz	r7, 14444 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14420:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   14422:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14424:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   14426:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14428:	4291      	cmp	r1, r2
   1442a:	d10b      	bne.n	14444 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1442c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1442e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   14430:	4291      	cmp	r1, r2
   14432:	d807      	bhi.n	14444 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   14434:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   14436:	4291      	cmp	r1, r2
   14438:	d904      	bls.n	14444 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1443a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1443c:	695b      	ldr	r3, [r3, #20]
   1443e:	ea32 0303 	bics.w	r3, r2, r3
   14442:	d00a      	beq.n	1445a <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   14444:	6a27      	ldr	r7, [r4, #32]
   14446:	b167      	cbz	r7, 14462 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   14448:	480b      	ldr	r0, [pc, #44]	; (14478 <check_ext_api_requests+0x94>)
   1444a:	f004 ff1a 	bl	19282 <printk>
			k_panic();
   1444e:	4040      	eors	r0, r0
   14450:	f380 8811 	msr	BASEPRI, r0
   14454:	f04f 0004 	mov.w	r0, #4
   14458:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1445a:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1445c:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   1445e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14460:	e7ca      	b.n	143f8 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   14462:	4648      	mov	r0, r9
   14464:	f004 ff0d 	bl	19282 <printk>
			*ext_api_req->ext_api = NULL;
   14468:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1446a:	601f      	str	r7, [r3, #0]
   1446c:	e7f5      	b.n	1445a <check_ext_api_requests+0x76>
   1446e:	bf00      	nop
   14470:	0000c23c 	.word	0x0000c23c
   14474:	0001c2c0 	.word	0x0001c2c0
   14478:	0001f99c 	.word	0x0001f99c
   1447c:	0001f9c5 	.word	0x0001f9c5

00014480 <SystemInit>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   14480:	4b01      	ldr	r3, [pc, #4]	; (14488 <SystemInit+0x8>)
   14482:	4a02      	ldr	r2, [pc, #8]	; (1448c <SystemInit+0xc>)
   14484:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   14486:	4770      	bx	lr
   14488:	200100d0 	.word	0x200100d0
   1448c:	03d09000 	.word	0x03d09000

00014490 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   14490:	4b04      	ldr	r3, [pc, #16]	; (144a4 <nrfx_clock_init+0x14>)
   14492:	791a      	ldrb	r2, [r3, #4]
   14494:	b922      	cbnz	r2, 144a0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   14496:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   14498:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1449a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1449c:	4802      	ldr	r0, [pc, #8]	; (144a8 <nrfx_clock_init+0x18>)
   1449e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   144a0:	4802      	ldr	r0, [pc, #8]	; (144ac <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   144a2:	4770      	bx	lr
   144a4:	20010bb0 	.word	0x20010bb0
   144a8:	0bad0000 	.word	0x0bad0000
   144ac:	0bad000c 	.word	0x0bad000c

000144b0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   144b0:	b110      	cbz	r0, 144b8 <nrfx_clock_start+0x8>
   144b2:	2801      	cmp	r0, #1
   144b4:	d01e      	beq.n	144f4 <nrfx_clock_start+0x44>
   144b6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   144b8:	4b13      	ldr	r3, [pc, #76]	; (14508 <nrfx_clock_start+0x58>)
   144ba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   144be:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   144c2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   144c6:	4619      	mov	r1, r3
   144c8:	d010      	beq.n	144ec <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   144ca:	f002 0203 	and.w	r2, r2, #3
   144ce:	2a02      	cmp	r2, #2
   144d0:	d10c      	bne.n	144ec <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   144d2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144d6:	2200      	movs	r2, #0
   144d8:	4b0c      	ldr	r3, [pc, #48]	; (1450c <nrfx_clock_start+0x5c>)
   144da:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   144dc:	2202      	movs	r2, #2
   144de:	681b      	ldr	r3, [r3, #0]
   144e0:	4b09      	ldr	r3, [pc, #36]	; (14508 <nrfx_clock_start+0x58>)
   144e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   144e6:	2201      	movs	r2, #1
   144e8:	609a      	str	r2, [r3, #8]
}
   144ea:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   144ec:	2301      	movs	r3, #1
   144ee:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   144f2:	e7f0      	b.n	144d6 <nrfx_clock_start+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144f4:	2200      	movs	r2, #0
   144f6:	4b06      	ldr	r3, [pc, #24]	; (14510 <nrfx_clock_start+0x60>)
   144f8:	601a      	str	r2, [r3, #0]
   144fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   144fc:	4b02      	ldr	r3, [pc, #8]	; (14508 <nrfx_clock_start+0x58>)
   144fe:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14502:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   14504:	4770      	bx	lr
   14506:	bf00      	nop
   14508:	40005000 	.word	0x40005000
   1450c:	40005104 	.word	0x40005104
   14510:	40005100 	.word	0x40005100

00014514 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   14514:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   14516:	b110      	cbz	r0, 1451e <nrfx_clock_stop+0xa>
   14518:	2801      	cmp	r0, #1
   1451a:	d016      	beq.n	1454a <nrfx_clock_stop+0x36>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1451c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1451e:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14520:	2101      	movs	r1, #1
   14522:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   14526:	4c16      	ldr	r4, [pc, #88]	; (14580 <nrfx_clock_stop+0x6c>)
   14528:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1452c:	4a15      	ldr	r2, [pc, #84]	; (14584 <nrfx_clock_stop+0x70>)
   1452e:	6010      	str	r0, [r2, #0]
   14530:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14532:	4a15      	ldr	r2, [pc, #84]	; (14588 <nrfx_clock_stop+0x74>)
   14534:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14536:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1453a:	03db      	lsls	r3, r3, #15
   1453c:	d5ee      	bpl.n	1451c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1453e:	2001      	movs	r0, #1
   14540:	f007 f896 	bl	1b670 <nrfx_busy_wait>
   14544:	3d01      	subs	r5, #1
   14546:	d1f6      	bne.n	14536 <nrfx_clock_stop+0x22>
   14548:	e7e8      	b.n	1451c <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1454a:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1454c:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14550:	4b0e      	ldr	r3, [pc, #56]	; (1458c <nrfx_clock_stop+0x78>)
    p_reg->INTENCLR = mask;
   14552:	4c0b      	ldr	r4, [pc, #44]	; (14580 <nrfx_clock_stop+0x6c>)
   14554:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14558:	601a      	str	r2, [r3, #0]
   1455a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1455c:	4b0c      	ldr	r3, [pc, #48]	; (14590 <nrfx_clock_stop+0x7c>)
   1455e:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14560:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14564:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14568:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1456c:	03d2      	lsls	r2, r2, #15
   1456e:	d5d5      	bpl.n	1451c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   14570:	2b00      	cmp	r3, #0
   14572:	d0d3      	beq.n	1451c <nrfx_clock_stop+0x8>
   14574:	2001      	movs	r0, #1
   14576:	f007 f87b 	bl	1b670 <nrfx_busy_wait>
   1457a:	3d01      	subs	r5, #1
   1457c:	d1f0      	bne.n	14560 <nrfx_clock_stop+0x4c>
   1457e:	e7cd      	b.n	1451c <nrfx_clock_stop+0x8>
   14580:	40005000 	.word	0x40005000
   14584:	40005104 	.word	0x40005104
   14588:	4000500c 	.word	0x4000500c
   1458c:	40005100 	.word	0x40005100
   14590:	40005004 	.word	0x40005004

00014594 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   14594:	4b15      	ldr	r3, [pc, #84]	; (145ec <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   14596:	b510      	push	{r4, lr}
   14598:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1459a:	b14a      	cbz	r2, 145b0 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1459c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   1459e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   145a0:	6018      	str	r0, [r3, #0]
   145a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   145a4:	4b12      	ldr	r3, [pc, #72]	; (145f0 <nrfx_power_clock_irq_handler+0x5c>)
   145a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   145aa:	4b12      	ldr	r3, [pc, #72]	; (145f4 <nrfx_power_clock_irq_handler+0x60>)
   145ac:	681b      	ldr	r3, [r3, #0]
   145ae:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   145b0:	4b11      	ldr	r3, [pc, #68]	; (145f8 <nrfx_power_clock_irq_handler+0x64>)
   145b2:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   145b4:	b182      	cbz	r2, 145d8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   145b6:	2200      	movs	r2, #0
   145b8:	601a      	str	r2, [r3, #0]
   145ba:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   145bc:	4b0c      	ldr	r3, [pc, #48]	; (145f0 <nrfx_power_clock_irq_handler+0x5c>)
   145be:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   145c2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   145c6:	f002 0203 	and.w	r2, r2, #3
   145ca:	2a01      	cmp	r2, #1
   145cc:	f04f 0102 	mov.w	r1, #2
   145d0:	d103      	bne.n	145da <nrfx_power_clock_irq_handler+0x46>
    p_reg->LFCLKSRC = (uint32_t)(source);
   145d2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   145d6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   145d8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   145da:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   145de:	4b05      	ldr	r3, [pc, #20]	; (145f4 <nrfx_power_clock_irq_handler+0x60>)
   145e0:	2001      	movs	r0, #1
}
   145e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   145e6:	681b      	ldr	r3, [r3, #0]
   145e8:	4718      	bx	r3
   145ea:	bf00      	nop
   145ec:	40005100 	.word	0x40005100
   145f0:	40005000 	.word	0x40005000
   145f4:	20010bb0 	.word	0x20010bb0
   145f8:	40005104 	.word	0x40005104

000145fc <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   145fc:	4a0b      	ldr	r2, [pc, #44]	; (1462c <nrfx_dppi_channel_alloc+0x30>)
{
   145fe:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   14600:	6816      	ldr	r6, [r2, #0]
   14602:	43f1      	mvns	r1, r6
   14604:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   14606:	b171      	cbz	r1, 14626 <nrfx_dppi_channel_alloc+0x2a>
   14608:	2500      	movs	r5, #0
   1460a:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1460c:	fa21 f304 	lsr.w	r3, r1, r4
   14610:	07db      	lsls	r3, r3, #31
   14612:	f105 0501 	add.w	r5, r5, #1
   14616:	d5f8      	bpl.n	1460a <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   14618:	2301      	movs	r3, #1
   1461a:	40a3      	lsls	r3, r4
   1461c:	4333      	orrs	r3, r6
    *p_channel = channel;
   1461e:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   14620:	4803      	ldr	r0, [pc, #12]	; (14630 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   14622:	6013      	str	r3, [r2, #0]
}
   14624:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   14626:	4803      	ldr	r0, [pc, #12]	; (14634 <nrfx_dppi_channel_alloc+0x38>)
   14628:	e7fc      	b.n	14624 <nrfx_dppi_channel_alloc+0x28>
   1462a:	bf00      	nop
   1462c:	20010bb8 	.word	0x20010bb8
   14630:	0bad0000 	.word	0x0bad0000
   14634:	0bad0002 	.word	0x0bad0002

00014638 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   14638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1463a:	4b10      	ldr	r3, [pc, #64]	; (1467c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1463c:	4f10      	ldr	r7, [pc, #64]	; (14680 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1463e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   14642:	3001      	adds	r0, #1
   14644:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   14648:	42ae      	cmp	r6, r5
   1464a:	d800      	bhi.n	1464e <z_sys_init_run_level+0x16>
		}
	}
}
   1464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1464e:	e9d5 3400 	ldrd	r3, r4, [r5]
   14652:	4620      	mov	r0, r4
   14654:	4798      	blx	r3
   14656:	b170      	cbz	r0, 14676 <z_sys_init_run_level+0x3e>
   14658:	b16c      	cbz	r4, 14676 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   1465a:	2301      	movs	r3, #1
				(dev - __device_start));
   1465c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1465e:	4a09      	ldr	r2, [pc, #36]	; (14684 <z_sys_init_run_level+0x4c>)
   14660:	1124      	asrs	r4, r4, #4
   14662:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   14664:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   14668:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1466c:	fa03 f404 	lsl.w	r4, r3, r4
   14670:	4304      	orrs	r4, r0
   14672:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14676:	3508      	adds	r5, #8
   14678:	e7e6      	b.n	14648 <z_sys_init_run_level+0x10>
   1467a:	bf00      	nop
   1467c:	0001ddb0 	.word	0x0001ddb0
   14680:	200100e0 	.word	0x200100e0
   14684:	20010130 	.word	0x20010130

00014688 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   14688:	4b08      	ldr	r3, [pc, #32]	; (146ac <z_device_ready+0x24>)
   1468a:	1ac0      	subs	r0, r0, r3
   1468c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1468e:	4b08      	ldr	r3, [pc, #32]	; (146b0 <z_device_ready+0x28>)
   14690:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   14692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   14696:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   14698:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   1469c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   146a0:	4210      	tst	r0, r2
}
   146a2:	bf0c      	ite	eq
   146a4:	4618      	moveq	r0, r3
   146a6:	2000      	movne	r0, #0
   146a8:	4770      	bx	lr
   146aa:	bf00      	nop
   146ac:	200100e0 	.word	0x200100e0
   146b0:	20010130 	.word	0x20010130

000146b4 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   146b4:	4911      	ldr	r1, [pc, #68]	; (146fc <z_impl_device_get_binding+0x48>)
{
   146b6:	b570      	push	{r4, r5, r6, lr}
   146b8:	4605      	mov	r5, r0
   146ba:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   146bc:	4c10      	ldr	r4, [pc, #64]	; (14700 <z_impl_device_get_binding+0x4c>)
   146be:	428c      	cmp	r4, r1
   146c0:	d104      	bne.n	146cc <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   146c2:	4c0f      	ldr	r4, [pc, #60]	; (14700 <z_impl_device_get_binding+0x4c>)
   146c4:	42b4      	cmp	r4, r6
   146c6:	d10a      	bne.n	146de <z_impl_device_get_binding+0x2a>
	return NULL;
   146c8:	2400      	movs	r4, #0
   146ca:	e014      	b.n	146f6 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   146cc:	4620      	mov	r0, r4
   146ce:	f7ff ffdb 	bl	14688 <z_device_ready>
   146d2:	b110      	cbz	r0, 146da <z_impl_device_get_binding+0x26>
   146d4:	6823      	ldr	r3, [r4, #0]
   146d6:	42ab      	cmp	r3, r5
   146d8:	d00d      	beq.n	146f6 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   146da:	3410      	adds	r4, #16
   146dc:	e7ef      	b.n	146be <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   146de:	4620      	mov	r0, r4
   146e0:	f7ff ffd2 	bl	14688 <z_device_ready>
   146e4:	b908      	cbnz	r0, 146ea <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   146e6:	3410      	adds	r4, #16
   146e8:	e7ec      	b.n	146c4 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   146ea:	4628      	mov	r0, r5
   146ec:	6821      	ldr	r1, [r4, #0]
   146ee:	f006 fd98 	bl	1b222 <strcmp>
   146f2:	2800      	cmp	r0, #0
   146f4:	d1f7      	bne.n	146e6 <z_impl_device_get_binding+0x32>
}
   146f6:	4620      	mov	r0, r4
   146f8:	bd70      	pop	{r4, r5, r6, pc}
   146fa:	bf00      	nop
   146fc:	20010130 	.word	0x20010130
   14700:	200100e0 	.word	0x200100e0

00014704 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   14704:	4b01      	ldr	r3, [pc, #4]	; (1470c <z_impl_z_errno+0x8>)
   14706:	6898      	ldr	r0, [r3, #8]
}
   14708:	309c      	adds	r0, #156	; 0x9c
   1470a:	4770      	bx	lr
   1470c:	20010bbc 	.word	0x20010bbc

00014710 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14714:	4606      	mov	r6, r0
   14716:	460f      	mov	r7, r1
	__asm__ volatile(
   14718:	f04f 0320 	mov.w	r3, #32
   1471c:	f3ef 8811 	mrs	r8, BASEPRI
   14720:	f383 8811 	msr	BASEPRI, r3
   14724:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14728:	f000 fef6 	bl	15518 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1472c:	4c2e      	ldr	r4, [pc, #184]	; (147e8 <z_fatal_error+0xd8>)
   1472e:	4605      	mov	r5, r0
   14730:	6823      	ldr	r3, [r4, #0]
   14732:	0759      	lsls	r1, r3, #29
   14734:	d054      	beq.n	147e0 <z_fatal_error+0xd0>
   14736:	4a2d      	ldr	r2, [pc, #180]	; (147ec <z_fatal_error+0xdc>)
   14738:	4b2d      	ldr	r3, [pc, #180]	; (147f0 <z_fatal_error+0xe0>)
   1473a:	2e04      	cmp	r6, #4
   1473c:	eba3 0302 	sub.w	r3, r3, r2
   14740:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   14744:	bf98      	it	ls
   14746:	4a2b      	ldrls	r2, [pc, #172]	; (147f4 <z_fatal_error+0xe4>)
   14748:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1474c:	f043 0301 	orr.w	r3, r3, #1
	switch (reason) {
   14750:	bf94      	ite	ls
   14752:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14756:	4a28      	ldrhi	r2, [pc, #160]	; (147f8 <z_fatal_error+0xe8>)
   14758:	f8ad 3000 	strh.w	r3, [sp]
   1475c:	4631      	mov	r1, r6
   1475e:	2300      	movs	r3, #0
   14760:	4826      	ldr	r0, [pc, #152]	; (147fc <z_fatal_error+0xec>)
   14762:	f005 f9ab 	bl	19abc <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   14766:	b187      	cbz	r7, 1478a <z_fatal_error+0x7a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   14768:	69fb      	ldr	r3, [r7, #28]
   1476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1476e:	b163      	cbz	r3, 1478a <z_fatal_error+0x7a>
		LOG_ERR("Fault during interrupt handling\n");
   14770:	6823      	ldr	r3, [r4, #0]
   14772:	075a      	lsls	r2, r3, #29
   14774:	d01d      	beq.n	147b2 <z_fatal_error+0xa2>
   14776:	491e      	ldr	r1, [pc, #120]	; (147f0 <z_fatal_error+0xe0>)
   14778:	4b1c      	ldr	r3, [pc, #112]	; (147ec <z_fatal_error+0xdc>)
   1477a:	4821      	ldr	r0, [pc, #132]	; (14800 <z_fatal_error+0xf0>)
   1477c:	1ac9      	subs	r1, r1, r3
   1477e:	08c9      	lsrs	r1, r1, #3
   14780:	0189      	lsls	r1, r1, #6
   14782:	f041 0101 	orr.w	r1, r1, #1
   14786:	f005 f95f 	bl	19a48 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1478a:	6823      	ldr	r3, [r4, #0]
   1478c:	075b      	lsls	r3, r3, #29
   1478e:	d010      	beq.n	147b2 <z_fatal_error+0xa2>
   14790:	4c17      	ldr	r4, [pc, #92]	; (147f0 <z_fatal_error+0xe0>)
   14792:	4b16      	ldr	r3, [pc, #88]	; (147ec <z_fatal_error+0xdc>)
   14794:	1ae4      	subs	r4, r4, r3
   14796:	08e4      	lsrs	r4, r4, #3
   14798:	01a4      	lsls	r4, r4, #6
   1479a:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1479e:	b9b5      	cbnz	r5, 147ce <z_fatal_error+0xbe>
		thread_name = "unknown";
   147a0:	4818      	ldr	r0, [pc, #96]	; (14804 <z_fatal_error+0xf4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   147a2:	f7fb fa29 	bl	fbf8 <log_strdup>
   147a6:	4623      	mov	r3, r4
   147a8:	4602      	mov	r2, r0
   147aa:	4629      	mov	r1, r5
   147ac:	4816      	ldr	r0, [pc, #88]	; (14808 <z_fatal_error+0xf8>)
   147ae:	f005 f96c 	bl	19a8a <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   147b2:	4639      	mov	r1, r7
   147b4:	4630      	mov	r0, r6
   147b6:	f7ff fdf9 	bl	143ac <k_sys_fatal_error_handler>
	__asm__ volatile(
   147ba:	f388 8811 	msr	BASEPRI, r8
   147be:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   147c2:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   147c4:	b002      	add	sp, #8
   147c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   147ca:	f7fe bebb 	b.w	13544 <z_impl_k_thread_abort>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   147ce:	4628      	mov	r0, r5
   147d0:	f007 f8fe 	bl	1b9d0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   147d4:	2800      	cmp	r0, #0
   147d6:	d0e3      	beq.n	147a0 <z_fatal_error+0x90>
   147d8:	7803      	ldrb	r3, [r0, #0]
   147da:	2b00      	cmp	r3, #0
   147dc:	d0e0      	beq.n	147a0 <z_fatal_error+0x90>
   147de:	e7e0      	b.n	147a2 <z_fatal_error+0x92>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   147e0:	2f00      	cmp	r7, #0
   147e2:	d1c1      	bne.n	14768 <z_fatal_error+0x58>
   147e4:	e7e5      	b.n	147b2 <z_fatal_error+0xa2>
   147e6:	bf00      	nop
   147e8:	2001014c 	.word	0x2001014c
   147ec:	0001c16c 	.word	0x0001c16c
   147f0:	0001c19c 	.word	0x0001c19c
   147f4:	0001ddc8 	.word	0x0001ddc8
   147f8:	0001f9f8 	.word	0x0001f9f8
   147fc:	0001fa0e 	.word	0x0001fa0e
   14800:	0001fa36 	.word	0x0001fa36
   14804:	0001fa06 	.word	0x0001fa06
   14808:	0001fa57 	.word	0x0001fa57

0001480c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1480e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   14810:	2700      	movs	r7, #0
	_kernel.idle = ticks;
   14812:	4e1b      	ldr	r6, [pc, #108]	; (14880 <idle+0x74>)
	__asm__ volatile(
   14814:	f04f 0220 	mov.w	r2, #32
   14818:	f3ef 8311 	mrs	r3, BASEPRI
   1481c:	f382 8811 	msr	BASEPRI, r2
   14820:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   14824:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   14826:	b188      	cbz	r0, 1484c <idle+0x40>
			cpu->pending_abort = NULL;
   14828:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1482a:	f383 8811 	msr	BASEPRI, r3
   1482e:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   14832:	f000 fcab 	bl	1518c <z_thread_single_abort>
	__asm__ volatile(
   14836:	f04f 0320 	mov.w	r3, #32
   1483a:	f3ef 8011 	mrs	r0, BASEPRI
   1483e:	f383 8811 	msr	BASEPRI, r3
   14842:	f3bf 8f6f 	isb	sy
   14846:	f006 fff7 	bl	1b838 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   1484a:	e7e3      	b.n	14814 <idle+0x8>
	__asm__ volatile(
   1484c:	f383 8811 	msr	BASEPRI, r3
   14850:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14854:	f04f 0220 	mov.w	r2, #32
   14858:	f3ef 8311 	mrs	r3, BASEPRI
   1485c:	f382 8811 	msr	BASEPRI, r2
   14860:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   14864:	f007 f8ea 	bl	1ba3c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   14868:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   1486a:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1486c:	2802      	cmp	r0, #2
   1486e:	bfd8      	it	le
   14870:	4608      	movle	r0, r1
   14872:	f007 f8f3 	bl	1ba5c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   14876:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   14878:	f7fe fad6 	bl	12e28 <arch_cpu_idle>
}
   1487c:	e7ca      	b.n	14814 <idle+0x8>
   1487e:	bf00      	nop
   14880:	20010bbc 	.word	0x20010bbc

00014884 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   14884:	4802      	ldr	r0, [pc, #8]	; (14890 <z_bss_zero+0xc>)
   14886:	4a03      	ldr	r2, [pc, #12]	; (14894 <z_bss_zero+0x10>)
   14888:	2100      	movs	r1, #0
   1488a:	1a12      	subs	r2, r2, r0
   1488c:	f006 bd36 	b.w	1b2fc <memset>
   14890:	200101f8 	.word	0x200101f8
   14894:	2001ecc0 	.word	0x2001ecc0

00014898 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   14898:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1489a:	4806      	ldr	r0, [pc, #24]	; (148b4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1489c:	4a06      	ldr	r2, [pc, #24]	; (148b8 <z_data_copy+0x20>)
   1489e:	4907      	ldr	r1, [pc, #28]	; (148bc <z_data_copy+0x24>)
   148a0:	1a12      	subs	r2, r2, r0
   148a2:	f006 fd00 	bl	1b2a6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   148a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   148aa:	4a05      	ldr	r2, [pc, #20]	; (148c0 <z_data_copy+0x28>)
   148ac:	4905      	ldr	r1, [pc, #20]	; (148c4 <z_data_copy+0x2c>)
   148ae:	4806      	ldr	r0, [pc, #24]	; (148c8 <z_data_copy+0x30>)
   148b0:	f006 bcf9 	b.w	1b2a6 <memcpy>
   148b4:	20010000 	.word	0x20010000
   148b8:	200101f4 	.word	0x200101f4
   148bc:	0001fb08 	.word	0x0001fb08
   148c0:	00000000 	.word	0x00000000
   148c4:	0001fb08 	.word	0x0001fb08
   148c8:	20010000 	.word	0x20010000

000148cc <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   148cc:	2201      	movs	r2, #1
{
   148ce:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   148d0:	4b08      	ldr	r3, [pc, #32]	; (148f4 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   148d2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   148d4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   148d6:	f7ff feaf 	bl	14638 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   148da:	2003      	movs	r0, #3
   148dc:	f7ff feac 	bl	14638 <z_sys_init_run_level>

	z_init_static_threads();
   148e0:	f000 ff7e 	bl	157e0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   148e4:	f004 f9a4 	bl	18c30 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   148e8:	4a03      	ldr	r2, [pc, #12]	; (148f8 <bg_thread_main+0x2c>)
   148ea:	7b13      	ldrb	r3, [r2, #12]
   148ec:	f023 0301 	bic.w	r3, r3, #1
   148f0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   148f2:	bd08      	pop	{r3, pc}
   148f4:	2001ecbf 	.word	0x2001ecbf
   148f8:	20010478 	.word	0x20010478

000148fc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   148fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   14900:	b0b7      	sub	sp, #220	; 0xdc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   14902:	f7fb f83d 	bl	f980 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   14906:	4b39      	ldr	r3, [pc, #228]	; (149ec <z_cstart+0xf0>)
	uint32_t msp =
   14908:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1490c:	f38a 8808 	msr	MSP, sl
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   14910:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14914:	2400      	movs	r4, #0
   14916:	23e0      	movs	r3, #224	; 0xe0
   14918:	4d35      	ldr	r5, [pc, #212]	; (149f0 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1491a:	4e36      	ldr	r6, [pc, #216]	; (149f4 <z_cstart+0xf8>)
   1491c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14920:	77ec      	strb	r4, [r5, #31]
   14922:	762c      	strb	r4, [r5, #24]
   14924:	766c      	strb	r4, [r5, #25]
   14926:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14928:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1492a:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 14a14 <z_cstart+0x118>
   1492e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14932:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14934:	f7fe fddc 	bl	134f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14938:	f7fe fa70 	bl	12e1c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1493c:	f04f 33ff 	mov.w	r3, #4294967295
   14940:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14942:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   14944:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   14948:	4d2b      	ldr	r5, [pc, #172]	; (149f8 <z_cstart+0xfc>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1494a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
   1494e:	ab08      	add	r3, sp, #32
   14950:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14952:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   14954:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
   14958:	f7ff fe6e 	bl	14638 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1495c:	2001      	movs	r0, #1
   1495e:	f7ff fe6b 	bl	14638 <z_sys_init_run_level>
	z_sched_init();
   14962:	f000 fd5f 	bl	15424 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   14966:	4b25      	ldr	r3, [pc, #148]	; (149fc <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
   14968:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1496a:	9305      	str	r3, [sp, #20]
   1496c:	2301      	movs	r3, #1
   1496e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14972:	4923      	ldr	r1, [pc, #140]	; (14a00 <z_cstart+0x104>)
   14974:	e9cd 4303 	strd	r4, r3, [sp, #12]
   14978:	4630      	mov	r0, r6
   1497a:	464b      	mov	r3, r9
   1497c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14980:	9400      	str	r4, [sp, #0]
   14982:	f000 fea1 	bl	156c8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14986:	7b73      	ldrb	r3, [r6, #13]
   14988:	4680      	mov	r8, r0
   1498a:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1498e:	4630      	mov	r0, r6
	snprintk(tname, 8, "idle %02d", i);
   14990:	f10d 0b18 	add.w	fp, sp, #24
   14994:	7373      	strb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   14996:	f006 ff91 	bl	1b8bc <z_ready_thread>
	snprintk(tname, 8, "idle %02d", i);
   1499a:	4623      	mov	r3, r4
   1499c:	2108      	movs	r1, #8
   1499e:	4a19      	ldr	r2, [pc, #100]	; (14a04 <z_cstart+0x108>)
   149a0:	4658      	mov	r0, fp
   149a2:	f004 fc7b 	bl	1929c <snprintk>
	z_setup_new_thread(thread, stack,
   149a6:	230f      	movs	r3, #15
   149a8:	2201      	movs	r2, #1
   149aa:	4f17      	ldr	r7, [pc, #92]	; (14a08 <z_cstart+0x10c>)
   149ac:	e9cd 3203 	strd	r3, r2, [sp, #12]
   149b0:	4916      	ldr	r1, [pc, #88]	; (14a0c <z_cstart+0x110>)
   149b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   149b6:	4b16      	ldr	r3, [pc, #88]	; (14a10 <z_cstart+0x114>)
   149b8:	4638      	mov	r0, r7
   149ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
   149be:	f8cd b014 	str.w	fp, [sp, #20]
   149c2:	9500      	str	r5, [sp, #0]
   149c4:	f000 fe80 	bl	156c8 <z_setup_new_thread>
   149c8:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   149ca:	464a      	mov	r2, r9
   149cc:	f023 0304 	bic.w	r3, r3, #4
   149d0:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   149d2:	f105 031c 	add.w	r3, r5, #28
   149d6:	4641      	mov	r1, r8
   149d8:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   149da:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   149de:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   149e0:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   149e2:	f8c5 a004 	str.w	sl, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   149e6:	f7fe f955 	bl	12c94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   149ea:	bf00      	nop
   149ec:	2002c100 	.word	0x2002c100
   149f0:	e000ed00 	.word	0xe000ed00
   149f4:	20010478 	.word	0x20010478
   149f8:	20010bbc 	.word	0x20010bbc
   149fc:	0001fab9 	.word	0x0001fab9
   14a00:	2002afc0 	.word	0x2002afc0
   14a04:	0001fabe 	.word	0x0001fabe
   14a08:	200103c0 	.word	0x200103c0
   14a0c:	2002bfc0 	.word	0x2002bfc0
   14a10:	0001480d 	.word	0x0001480d
   14a14:	000148cd 	.word	0x000148cd

00014a18 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   14a18:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14a1a:	4b0e      	ldr	r3, [pc, #56]	; (14a54 <init_mem_slab_module+0x3c>)
   14a1c:	4c0e      	ldr	r4, [pc, #56]	; (14a58 <init_mem_slab_module+0x40>)
   14a1e:	42a3      	cmp	r3, r4
   14a20:	d301      	bcc.n	14a26 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   14a22:	2000      	movs	r0, #0
	return rc;
}
   14a24:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   14a26:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   14a2a:	ea41 0200 	orr.w	r2, r1, r0
   14a2e:	f012 0203 	ands.w	r2, r2, #3
   14a32:	d10b      	bne.n	14a4c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   14a34:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   14a36:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14a38:	42aa      	cmp	r2, r5
   14a3a:	d101      	bne.n	14a40 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   14a3c:	331c      	adds	r3, #28
   14a3e:	e7ee      	b.n	14a1e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   14a40:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   14a42:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   14a44:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   14a46:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   14a48:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   14a4a:	e7f5      	b.n	14a38 <init_mem_slab_module+0x20>
		return -EINVAL;
   14a4c:	f06f 0015 	mvn.w	r0, #21
	return rc;
   14a50:	e7e8      	b.n	14a24 <init_mem_slab_module+0xc>
   14a52:	bf00      	nop
   14a54:	200101a0 	.word	0x200101a0
   14a58:	200101a0 	.word	0x200101a0

00014a5c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   14a5c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   14a5e:	460c      	mov	r4, r1
   14a60:	4616      	mov	r6, r2
   14a62:	461f      	mov	r7, r3
   14a64:	f04f 0320 	mov.w	r3, #32
   14a68:	f3ef 8111 	mrs	r1, BASEPRI
   14a6c:	f383 8811 	msr	BASEPRI, r3
   14a70:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   14a74:	6943      	ldr	r3, [r0, #20]
   14a76:	b15b      	cbz	r3, 14a90 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   14a78:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   14a7a:	681b      	ldr	r3, [r3, #0]
   14a7c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   14a7e:	6983      	ldr	r3, [r0, #24]
   14a80:	3301      	adds	r3, #1
   14a82:	6183      	str	r3, [r0, #24]
		result = 0;
   14a84:	2000      	movs	r0, #0
	__asm__ volatile(
   14a86:	f381 8811 	msr	BASEPRI, r1
   14a8a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   14a8e:	e011      	b.n	14ab4 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14a90:	ea56 0207 	orrs.w	r2, r6, r7
   14a94:	d103      	bne.n	14a9e <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   14a96:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   14a9a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   14a9c:	e7f3      	b.n	14a86 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   14a9e:	4602      	mov	r2, r0
   14aa0:	e9cd 6700 	strd	r6, r7, [sp]
   14aa4:	4804      	ldr	r0, [pc, #16]	; (14ab8 <k_mem_slab_alloc+0x5c>)
   14aa6:	f000 fc37 	bl	15318 <z_pend_curr>
		if (result == 0) {
   14aaa:	b918      	cbnz	r0, 14ab4 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   14aac:	4b03      	ldr	r3, [pc, #12]	; (14abc <k_mem_slab_alloc+0x60>)
   14aae:	689b      	ldr	r3, [r3, #8]
   14ab0:	695b      	ldr	r3, [r3, #20]
   14ab2:	6023      	str	r3, [r4, #0]
}
   14ab4:	b002      	add	sp, #8
   14ab6:	bdd0      	pop	{r4, r6, r7, pc}
   14ab8:	2001ecc0 	.word	0x2001ecc0
   14abc:	20010bbc 	.word	0x20010bbc

00014ac0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   14ac0:	b570      	push	{r4, r5, r6, lr}
   14ac2:	4604      	mov	r4, r0
   14ac4:	460d      	mov	r5, r1
	__asm__ volatile(
   14ac6:	f04f 0320 	mov.w	r3, #32
   14aca:	f3ef 8611 	mrs	r6, BASEPRI
   14ace:	f383 8811 	msr	BASEPRI, r3
   14ad2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   14ad6:	f006 ff4c 	bl	1b972 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   14ada:	b160      	cbz	r0, 14af6 <k_mem_slab_free+0x36>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   14adc:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   14ade:	682a      	ldr	r2, [r5, #0]
   14ae0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   14ae4:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   14ae6:	f006 fee9 	bl	1b8bc <z_ready_thread>
		z_reschedule(&lock, key);
   14aea:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   14aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   14af0:	4807      	ldr	r0, [pc, #28]	; (14b10 <k_mem_slab_free+0x50>)
   14af2:	f000 b9c5 	b.w	14e80 <z_reschedule>
		**(char ***)mem = slab->free_list;
   14af6:	682b      	ldr	r3, [r5, #0]
   14af8:	6962      	ldr	r2, [r4, #20]
   14afa:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   14afc:	682b      	ldr	r3, [r5, #0]
   14afe:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   14b00:	69a3      	ldr	r3, [r4, #24]
   14b02:	3b01      	subs	r3, #1
   14b04:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   14b06:	f386 8811 	msr	BASEPRI, r6
   14b0a:	f3bf 8f6f 	isb	sy
}
   14b0e:	bd70      	pop	{r4, r5, r6, pc}
   14b10:	2001ecc0 	.word	0x2001ecc0

00014b14 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   14b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   14b18:	4604      	mov	r4, r0
   14b1a:	468a      	mov	sl, r1
   14b1c:	4616      	mov	r6, r2
   14b1e:	461f      	mov	r7, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   14b20:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
   14b24:	f04f 0320 	mov.w	r3, #32
   14b28:	f3ef 8811 	mrs	r8, BASEPRI
   14b2c:	f383 8811 	msr	BASEPRI, r3
   14b30:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs < msgq->max_msgs) {
   14b34:	6a02      	ldr	r2, [r0, #32]
   14b36:	68c3      	ldr	r3, [r0, #12]
   14b38:	429a      	cmp	r2, r3
   14b3a:	d22b      	bcs.n	14b94 <z_impl_k_msgq_put+0x80>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14b3c:	f006 ff19 	bl	1b972 <z_unpend_first_thread>
		if (pending_thread != NULL) {
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   14b40:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   14b42:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   14b44:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   14b46:	b180      	cbz	r0, 14b6a <z_impl_k_msgq_put+0x56>
   14b48:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   14b4a:	6940      	ldr	r0, [r0, #20]
   14b4c:	f006 fbab 	bl	1b2a6 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   14b50:	4628      	mov	r0, r5
   14b52:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   14b56:	f006 feb1 	bl	1b8bc <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   14b5a:	4648      	mov	r0, r9
   14b5c:	4641      	mov	r1, r8
   14b5e:	f000 f98f 	bl	14e80 <z_reschedule>
			return 0;
   14b62:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   14b64:	b002      	add	sp, #8
   14b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   14b6a:	69e0      	ldr	r0, [r4, #28]
   14b6c:	f006 fb9b 	bl	1b2a6 <memcpy>
		result = 0;
   14b70:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
   14b72:	69e3      	ldr	r3, [r4, #28]
   14b74:	68a2      	ldr	r2, [r4, #8]
   14b76:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   14b78:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   14b7a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   14b7c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   14b7e:	bf04      	itt	eq
   14b80:	6923      	ldreq	r3, [r4, #16]
   14b82:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   14b84:	6a23      	ldr	r3, [r4, #32]
   14b86:	3301      	adds	r3, #1
   14b88:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
   14b8a:	f388 8811 	msr	BASEPRI, r8
   14b8e:	f3bf 8f6f 	isb	sy
	return result;
   14b92:	e7e7      	b.n	14b64 <z_impl_k_msgq_put+0x50>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14b94:	ea56 0307 	orrs.w	r3, r6, r7
   14b98:	d00a      	beq.n	14bb0 <z_impl_k_msgq_put+0x9c>
		_current->base.swap_data = (void *) data;
   14b9a:	4b07      	ldr	r3, [pc, #28]	; (14bb8 <z_impl_k_msgq_put+0xa4>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14b9c:	4602      	mov	r2, r0
		_current->base.swap_data = (void *) data;
   14b9e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14ba0:	4648      	mov	r0, r9
		_current->base.swap_data = (void *) data;
   14ba2:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14ba4:	4641      	mov	r1, r8
   14ba6:	e9cd 6700 	strd	r6, r7, [sp]
   14baa:	f000 fbb5 	bl	15318 <z_pend_curr>
   14bae:	e7d9      	b.n	14b64 <z_impl_k_msgq_put+0x50>
		result = -ENOMSG;
   14bb0:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   14bb4:	e7e9      	b.n	14b8a <z_impl_k_msgq_put+0x76>
   14bb6:	bf00      	nop
   14bb8:	20010bbc 	.word	0x20010bbc

00014bbc <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   14bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14bc0:	4604      	mov	r4, r0
   14bc2:	4616      	mov	r6, r2
   14bc4:	4608      	mov	r0, r1
   14bc6:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   14bc8:	f104 0908 	add.w	r9, r4, #8
	__asm__ volatile(
   14bcc:	f04f 0320 	mov.w	r3, #32
   14bd0:	f3ef 8811 	mrs	r8, BASEPRI
   14bd4:	f383 8811 	msr	BASEPRI, r3
   14bd8:	f3bf 8f6f 	isb	sy

	if (msgq->used_msgs > 0) {
   14bdc:	6a23      	ldr	r3, [r4, #32]
   14bde:	2b00      	cmp	r3, #0
   14be0:	d034      	beq.n	14c4c <z_impl_k_msgq_get+0x90>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   14be2:	68a2      	ldr	r2, [r4, #8]
   14be4:	69a1      	ldr	r1, [r4, #24]
   14be6:	f006 fb5e 	bl	1b2a6 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   14bea:	69a3      	ldr	r3, [r4, #24]
   14bec:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14bee:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   14bf0:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   14bf2:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   14bf4:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   14bf6:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   14bf8:	bf04      	itt	eq
   14bfa:	6923      	ldreq	r3, [r4, #16]
   14bfc:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   14bfe:	6a23      	ldr	r3, [r4, #32]
   14c00:	3b01      	subs	r3, #1
   14c02:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   14c04:	f006 feb5 	bl	1b972 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   14c08:	4605      	mov	r5, r0
   14c0a:	2800      	cmp	r0, #0
   14c0c:	d02e      	beq.n	14c6c <z_impl_k_msgq_get+0xb0>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   14c0e:	6941      	ldr	r1, [r0, #20]
   14c10:	68a2      	ldr	r2, [r4, #8]
   14c12:	69e0      	ldr	r0, [r4, #28]
   14c14:	f006 fb47 	bl	1b2a6 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   14c18:	69e3      	ldr	r3, [r4, #28]
   14c1a:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   14c1c:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   14c1e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   14c20:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   14c22:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   14c24:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   14c26:	bf04      	itt	eq
   14c28:	6923      	ldreq	r3, [r4, #16]
   14c2a:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   14c2c:	6a23      	ldr	r3, [r4, #32]
   14c2e:	3301      	adds	r3, #1
   14c30:	6223      	str	r3, [r4, #32]
   14c32:	2400      	movs	r4, #0
   14c34:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
			z_ready_thread(pending_thread);
   14c38:	f006 fe40 	bl	1b8bc <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   14c3c:	4648      	mov	r0, r9
   14c3e:	4641      	mov	r1, r8
   14c40:	f000 f91e 	bl	14e80 <z_reschedule>
			return 0;
   14c44:	4620      	mov	r0, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   14c46:	b003      	add	sp, #12
   14c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14c4c:	ea56 0307 	orrs.w	r3, r6, r7
   14c50:	d00a      	beq.n	14c68 <z_impl_k_msgq_get+0xac>
		_current->base.swap_data = data;
   14c52:	4b09      	ldr	r3, [pc, #36]	; (14c78 <z_impl_k_msgq_get+0xbc>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14c54:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   14c56:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14c58:	4648      	mov	r0, r9
		_current->base.swap_data = data;
   14c5a:	6159      	str	r1, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   14c5c:	4641      	mov	r1, r8
   14c5e:	e9cd 6700 	strd	r6, r7, [sp]
   14c62:	f000 fb59 	bl	15318 <z_pend_curr>
   14c66:	e7ee      	b.n	14c46 <z_impl_k_msgq_get+0x8a>
		result = -ENOMSG;
   14c68:	f06f 004f 	mvn.w	r0, #79	; 0x4f
	__asm__ volatile(
   14c6c:	f388 8811 	msr	BASEPRI, r8
   14c70:	f3bf 8f6f 	isb	sy
	return result;
   14c74:	e7e7      	b.n	14c46 <z_impl_k_msgq_get+0x8a>
   14c76:	bf00      	nop
   14c78:	20010bbc 	.word	0x20010bbc

00014c7c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   14c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14c80:	4604      	mov	r4, r0
   14c82:	4616      	mov	r6, r2
   14c84:	461f      	mov	r7, r3
	__asm__ volatile(
   14c86:	f04f 0320 	mov.w	r3, #32
   14c8a:	f3ef 8811 	mrs	r8, BASEPRI
   14c8e:	f383 8811 	msr	BASEPRI, r3
   14c92:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   14c96:	68c3      	ldr	r3, [r0, #12]
   14c98:	4a32      	ldr	r2, [pc, #200]	; (14d64 <z_impl_k_mutex_lock+0xe8>)
   14c9a:	b16b      	cbz	r3, 14cb8 <z_impl_k_mutex_lock+0x3c>
   14c9c:	6880      	ldr	r0, [r0, #8]
   14c9e:	6891      	ldr	r1, [r2, #8]
   14ca0:	4288      	cmp	r0, r1
   14ca2:	d019      	beq.n	14cd8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   14ca4:	ea56 0307 	orrs.w	r3, r6, r7
   14ca8:	d118      	bne.n	14cdc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   14caa:	f388 8811 	msr	BASEPRI, r8
   14cae:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   14cb2:	f06f 000f 	mvn.w	r0, #15
   14cb6:	e00c      	b.n	14cd2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   14cb8:	6891      	ldr	r1, [r2, #8]
   14cba:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   14cbe:	3301      	adds	r3, #1
   14cc0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   14cc2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   14cc4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   14cc6:	60a3      	str	r3, [r4, #8]
   14cc8:	f388 8811 	msr	BASEPRI, r8
   14ccc:	f3bf 8f6f 	isb	sy
		return 0;
   14cd0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   14cd2:	b002      	add	sp, #8
   14cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   14cd8:	6921      	ldr	r1, [r4, #16]
   14cda:	e7f0      	b.n	14cbe <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   14cdc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14ce0:	f991 100e 	ldrsb.w	r1, [r1, #14]
   14ce4:	4299      	cmp	r1, r3
   14ce6:	bfa8      	it	ge
   14ce8:	4619      	movge	r1, r3
   14cea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   14cee:	428b      	cmp	r3, r1
   14cf0:	dd2c      	ble.n	14d4c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   14cf2:	f000 fb53 	bl	1539c <z_set_prio>
   14cf6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   14cf8:	4622      	mov	r2, r4
   14cfa:	4641      	mov	r1, r8
   14cfc:	e9cd 6700 	strd	r6, r7, [sp]
   14d00:	4819      	ldr	r0, [pc, #100]	; (14d68 <z_impl_k_mutex_lock+0xec>)
   14d02:	f000 fb09 	bl	15318 <z_pend_curr>
	if (got_mutex == 0) {
   14d06:	2800      	cmp	r0, #0
   14d08:	d0e3      	beq.n	14cd2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   14d0a:	f04f 0320 	mov.w	r3, #32
   14d0e:	f3ef 8611 	mrs	r6, BASEPRI
   14d12:	f383 8811 	msr	BASEPRI, r3
   14d16:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   14d1a:	6823      	ldr	r3, [r4, #0]
   14d1c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14d1e:	429c      	cmp	r4, r3
   14d20:	d007      	beq.n	14d32 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   14d22:	b133      	cbz	r3, 14d32 <z_impl_k_mutex_lock+0xb6>
   14d24:	f993 300e 	ldrsb.w	r3, [r3, #14]
   14d28:	4299      	cmp	r1, r3
   14d2a:	bfa8      	it	ge
   14d2c:	4619      	movge	r1, r3
   14d2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   14d32:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   14d34:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14d38:	4299      	cmp	r1, r3
   14d3a:	d109      	bne.n	14d50 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   14d3c:	b16d      	cbz	r5, 14d5a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   14d3e:	4631      	mov	r1, r6
   14d40:	4809      	ldr	r0, [pc, #36]	; (14d68 <z_impl_k_mutex_lock+0xec>)
   14d42:	f000 f89d 	bl	14e80 <z_reschedule>
	return -EAGAIN;
   14d46:	f06f 000a 	mvn.w	r0, #10
   14d4a:	e7c2      	b.n	14cd2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   14d4c:	2500      	movs	r5, #0
   14d4e:	e7d3      	b.n	14cf8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   14d50:	f000 fb24 	bl	1539c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   14d54:	2800      	cmp	r0, #0
   14d56:	d1f2      	bne.n	14d3e <z_impl_k_mutex_lock+0xc2>
   14d58:	e7f0      	b.n	14d3c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   14d5a:	f386 8811 	msr	BASEPRI, r6
   14d5e:	f3bf 8f6f 	isb	sy
   14d62:	e7f0      	b.n	14d46 <z_impl_k_mutex_lock+0xca>
   14d64:	20010bbc 	.word	0x20010bbc
   14d68:	2001ecc0 	.word	0x2001ecc0

00014d6c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   14d6c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   14d6e:	6883      	ldr	r3, [r0, #8]
{
   14d70:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   14d72:	2b00      	cmp	r3, #0
   14d74:	d037      	beq.n	14de6 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   14d76:	4a1f      	ldr	r2, [pc, #124]	; (14df4 <z_impl_k_mutex_unlock+0x88>)
   14d78:	6892      	ldr	r2, [r2, #8]
   14d7a:	4293      	cmp	r3, r2
   14d7c:	d136      	bne.n	14dec <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   14d7e:	7bda      	ldrb	r2, [r3, #15]
   14d80:	3a01      	subs	r2, #1
   14d82:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   14d84:	68c3      	ldr	r3, [r0, #12]
   14d86:	2b01      	cmp	r3, #1
   14d88:	d005      	beq.n	14d96 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   14d8a:	3b01      	subs	r3, #1
   14d8c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   14d8e:	f000 f8db 	bl	14f48 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   14d92:	2000      	movs	r0, #0
}
   14d94:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14d96:	f04f 0320 	mov.w	r3, #32
   14d9a:	f3ef 8511 	mrs	r5, BASEPRI
   14d9e:	f383 8811 	msr	BASEPRI, r3
   14da2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   14da6:	6901      	ldr	r1, [r0, #16]
   14da8:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   14daa:	f990 300e 	ldrsb.w	r3, [r0, #14]
   14dae:	4299      	cmp	r1, r3
   14db0:	d001      	beq.n	14db6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   14db2:	f000 faf3 	bl	1539c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   14db6:	4620      	mov	r0, r4
   14db8:	f006 fddb 	bl	1b972 <z_unpend_first_thread>
	mutex->owner = new_owner;
   14dbc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   14dbe:	b160      	cbz	r0, 14dda <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   14dc0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   14dc4:	6122      	str	r2, [r4, #16]
   14dc6:	2200      	movs	r2, #0
   14dc8:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
		z_ready_thread(new_owner);
   14dcc:	f006 fd76 	bl	1b8bc <z_ready_thread>
		z_reschedule(&lock, key);
   14dd0:	4629      	mov	r1, r5
   14dd2:	4809      	ldr	r0, [pc, #36]	; (14df8 <z_impl_k_mutex_unlock+0x8c>)
   14dd4:	f000 f854 	bl	14e80 <z_reschedule>
   14dd8:	e7d9      	b.n	14d8e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   14dda:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   14ddc:	f385 8811 	msr	BASEPRI, r5
   14de0:	f3bf 8f6f 	isb	sy
   14de4:	e7d3      	b.n	14d8e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   14de6:	f06f 0015 	mvn.w	r0, #21
   14dea:	e7d3      	b.n	14d94 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   14dec:	f04f 30ff 	mov.w	r0, #4294967295
   14df0:	e7d0      	b.n	14d94 <z_impl_k_mutex_unlock+0x28>
   14df2:	bf00      	nop
   14df4:	20010bbc 	.word	0x20010bbc
   14df8:	2001ecc0 	.word	0x2001ecc0

00014dfc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   14dfc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   14dfe:	4c08      	ldr	r4, [pc, #32]	; (14e20 <z_reset_time_slice+0x24>)
   14e00:	6823      	ldr	r3, [r4, #0]
   14e02:	b15b      	cbz	r3, 14e1c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   14e04:	f7fd fea6 	bl	12b54 <z_clock_elapsed>
   14e08:	4603      	mov	r3, r0
   14e0a:	6820      	ldr	r0, [r4, #0]
   14e0c:	4a05      	ldr	r2, [pc, #20]	; (14e24 <z_reset_time_slice+0x28>)
   14e0e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   14e10:	2100      	movs	r1, #0
	}
}
   14e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   14e16:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   14e18:	f006 be20 	b.w	1ba5c <z_set_timeout_expiry>
}
   14e1c:	bd10      	pop	{r4, pc}
   14e1e:	bf00      	nop
   14e20:	20010bfc 	.word	0x20010bfc
   14e24:	20010bbc 	.word	0x20010bbc

00014e28 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   14e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14e2a:	4605      	mov	r5, r0
   14e2c:	460c      	mov	r4, r1
	__asm__ volatile(
   14e2e:	f04f 0320 	mov.w	r3, #32
   14e32:	f3ef 8611 	mrs	r6, BASEPRI
   14e36:	f383 8811 	msr	BASEPRI, r3
   14e3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   14e3e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   14e40:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14e44:	f240 30e7 	movw	r0, #999	; 0x3e7
   14e48:	2100      	movs	r1, #0
   14e4a:	4b0a      	ldr	r3, [pc, #40]	; (14e74 <k_sched_time_slice_set+0x4c>)
   14e4c:	fbe7 0105 	umlal	r0, r1, r7, r5
   14e50:	615a      	str	r2, [r3, #20]
   14e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14e56:	2300      	movs	r3, #0
   14e58:	f7f7 fa42 	bl	c2e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   14e5c:	4b06      	ldr	r3, [pc, #24]	; (14e78 <k_sched_time_slice_set+0x50>)
   14e5e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   14e60:	4b06      	ldr	r3, [pc, #24]	; (14e7c <k_sched_time_slice_set+0x54>)
   14e62:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   14e64:	f7ff ffca 	bl	14dfc <z_reset_time_slice>
	__asm__ volatile(
   14e68:	f386 8811 	msr	BASEPRI, r6
   14e6c:	f3bf 8f6f 	isb	sy
	}
}
   14e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e72:	bf00      	nop
   14e74:	20010bbc 	.word	0x20010bbc
   14e78:	20010bfc 	.word	0x20010bfc
   14e7c:	20010bf8 	.word	0x20010bf8

00014e80 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   14e80:	b949      	cbnz	r1, 14e96 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14e82:	f3ef 8005 	mrs	r0, IPSR
   14e86:	b930      	cbnz	r0, 14e96 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   14e88:	4b05      	ldr	r3, [pc, #20]	; (14ea0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   14e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14e8c:	689b      	ldr	r3, [r3, #8]
   14e8e:	429a      	cmp	r2, r3
   14e90:	d001      	beq.n	14e96 <z_reschedule+0x16>
	ret = arch_swap(key);
   14e92:	f7fd be93 	b.w	12bbc <arch_swap>
   14e96:	f381 8811 	msr	BASEPRI, r1
   14e9a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   14e9e:	4770      	bx	lr
   14ea0:	20010bbc 	.word	0x20010bbc

00014ea4 <k_sched_lock>:
	__asm__ volatile(
   14ea4:	f04f 0320 	mov.w	r3, #32
   14ea8:	f3ef 8111 	mrs	r1, BASEPRI
   14eac:	f383 8811 	msr	BASEPRI, r3
   14eb0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   14eb4:	4b04      	ldr	r3, [pc, #16]	; (14ec8 <k_sched_lock+0x24>)
   14eb6:	689a      	ldr	r2, [r3, #8]
   14eb8:	7bd3      	ldrb	r3, [r2, #15]
   14eba:	3b01      	subs	r3, #1
   14ebc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   14ebe:	f381 8811 	msr	BASEPRI, r1
   14ec2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   14ec6:	4770      	bx	lr
   14ec8:	20010bbc 	.word	0x20010bbc

00014ecc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   14ecc:	4b09      	ldr	r3, [pc, #36]	; (14ef4 <z_priq_dumb_remove+0x28>)
   14ece:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   14ed2:	4282      	cmp	r2, r0
   14ed4:	d105      	bne.n	14ee2 <z_priq_dumb_remove+0x16>
   14ed6:	689b      	ldr	r3, [r3, #8]
   14ed8:	428b      	cmp	r3, r1
   14eda:	d102      	bne.n	14ee2 <z_priq_dumb_remove+0x16>
   14edc:	7b4b      	ldrb	r3, [r1, #13]
   14ede:	06db      	lsls	r3, r3, #27
   14ee0:	d106      	bne.n	14ef0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   14ee2:	e9d1 3200 	ldrd	r3, r2, [r1]
   14ee6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   14ee8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14eea:	2300      	movs	r3, #0
	node->prev = NULL;
   14eec:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   14ef0:	4770      	bx	lr
   14ef2:	bf00      	nop
   14ef4:	20010bbc 	.word	0x20010bbc

00014ef8 <update_cache>:
{
   14ef8:	b538      	push	{r3, r4, r5, lr}
   14efa:	4c12      	ldr	r4, [pc, #72]	; (14f44 <update_cache+0x4c>)
   14efc:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   14efe:	6923      	ldr	r3, [r4, #16]
   14f00:	68a2      	ldr	r2, [r4, #8]
   14f02:	b10b      	cbz	r3, 14f08 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   14f04:	68e5      	ldr	r5, [r4, #12]
   14f06:	e00c      	b.n	14f22 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   14f08:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14f0c:	f006 fccc 	bl	1b8a8 <z_priq_dumb_best>
   14f10:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   14f12:	7b53      	ldrb	r3, [r2, #13]
   14f14:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   14f16:	bf44      	itt	mi
   14f18:	f043 0308 	orrmi.w	r3, r3, #8
   14f1c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   14f1e:	2d00      	cmp	r5, #0
   14f20:	d0f0      	beq.n	14f04 <update_cache+0xc>
	if (preempt_ok != 0) {
   14f22:	b949      	cbnz	r1, 14f38 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   14f24:	7b53      	ldrb	r3, [r2, #13]
   14f26:	06db      	lsls	r3, r3, #27
   14f28:	d106      	bne.n	14f38 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   14f2a:	69ab      	ldr	r3, [r5, #24]
   14f2c:	b923      	cbnz	r3, 14f38 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   14f2e:	89d3      	ldrh	r3, [r2, #14]
   14f30:	2b7f      	cmp	r3, #127	; 0x7f
   14f32:	d901      	bls.n	14f38 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   14f34:	62a2      	str	r2, [r4, #40]	; 0x28
}
   14f36:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   14f38:	4295      	cmp	r5, r2
   14f3a:	d001      	beq.n	14f40 <update_cache+0x48>
			z_reset_time_slice();
   14f3c:	f7ff ff5e 	bl	14dfc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   14f40:	62a5      	str	r5, [r4, #40]	; 0x28
}
   14f42:	e7f8      	b.n	14f36 <update_cache+0x3e>
   14f44:	20010bbc 	.word	0x20010bbc

00014f48 <k_sched_unlock>:
{
   14f48:	b510      	push	{r4, lr}
	__asm__ volatile(
   14f4a:	f04f 0320 	mov.w	r3, #32
   14f4e:	f3ef 8411 	mrs	r4, BASEPRI
   14f52:	f383 8811 	msr	BASEPRI, r3
   14f56:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   14f5a:	4b08      	ldr	r3, [pc, #32]	; (14f7c <k_sched_unlock+0x34>)
		update_cache(0);
   14f5c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   14f5e:	689a      	ldr	r2, [r3, #8]
   14f60:	7bd3      	ldrb	r3, [r2, #15]
   14f62:	3301      	adds	r3, #1
   14f64:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   14f66:	f7ff ffc7 	bl	14ef8 <update_cache>
	__asm__ volatile(
   14f6a:	f384 8811 	msr	BASEPRI, r4
   14f6e:	f3bf 8f6f 	isb	sy
}
   14f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   14f76:	f006 bc6b 	b.w	1b850 <z_reschedule_unlocked>
   14f7a:	bf00      	nop
   14f7c:	20010bbc 	.word	0x20010bbc

00014f80 <ready_thread>:
{
   14f80:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   14f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   14f86:	7b43      	ldrb	r3, [r0, #13]
   14f88:	2a00      	cmp	r2, #0
   14f8a:	db2c      	blt.n	14fe6 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   14f8c:	06db      	lsls	r3, r3, #27
   14f8e:	d12a      	bne.n	14fe6 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   14f90:	6983      	ldr	r3, [r0, #24]
   14f92:	bb43      	cbnz	r3, 14fe6 <ready_thread+0x66>
	return list->head == list;
   14f94:	4a15      	ldr	r2, [pc, #84]	; (14fec <ready_thread+0x6c>)
   14f96:	4611      	mov	r1, r2
   14f98:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14f9c:	428c      	cmp	r4, r1
   14f9e:	bf18      	it	ne
   14fa0:	4623      	movne	r3, r4
   14fa2:	2b00      	cmp	r3, #0
   14fa4:	bf38      	it	cc
   14fa6:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14fa8:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14faa:	b1b3      	cbz	r3, 14fda <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   14fac:	f990 600e 	ldrsb.w	r6, [r0, #14]
   14fb0:	f993 500e 	ldrsb.w	r5, [r3, #14]
   14fb4:	42ae      	cmp	r6, r5
   14fb6:	db03      	blt.n	14fc0 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   14fb8:	42a3      	cmp	r3, r4
   14fba:	d00e      	beq.n	14fda <ready_thread+0x5a>
   14fbc:	681b      	ldr	r3, [r3, #0]
   14fbe:	e7f4      	b.n	14faa <ready_thread+0x2a>
	node->prev = successor->prev;
   14fc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   14fc2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   14fc6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   14fc8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   14fca:	7b43      	ldrb	r3, [r0, #13]
   14fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14fd0:	7343      	strb	r3, [r0, #13]
}
   14fd2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   14fd4:	2000      	movs	r0, #0
   14fd6:	f7ff bf8f 	b.w	14ef8 <update_cache>
	node->prev = list->tail;
   14fda:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   14fde:	6b13      	ldr	r3, [r2, #48]	; 0x30
   14fe0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   14fe2:	6310      	str	r0, [r2, #48]	; 0x30
}
   14fe4:	e7f1      	b.n	14fca <ready_thread+0x4a>
}
   14fe6:	bc70      	pop	{r4, r5, r6}
   14fe8:	4770      	bx	lr
   14fea:	bf00      	nop
   14fec:	20010bbc 	.word	0x20010bbc

00014ff0 <z_sched_start>:
{
   14ff0:	b510      	push	{r4, lr}
	__asm__ volatile(
   14ff2:	f04f 0220 	mov.w	r2, #32
   14ff6:	f3ef 8411 	mrs	r4, BASEPRI
   14ffa:	f382 8811 	msr	BASEPRI, r2
   14ffe:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   15002:	7b42      	ldrb	r2, [r0, #13]
   15004:	0751      	lsls	r1, r2, #29
   15006:	d404      	bmi.n	15012 <z_sched_start+0x22>
	__asm__ volatile(
   15008:	f384 8811 	msr	BASEPRI, r4
   1500c:	f3bf 8f6f 	isb	sy
}
   15010:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15012:	f022 0204 	bic.w	r2, r2, #4
   15016:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   15018:	f7ff ffb2 	bl	14f80 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1501c:	4621      	mov	r1, r4
}
   1501e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15022:	4801      	ldr	r0, [pc, #4]	; (15028 <z_sched_start+0x38>)
   15024:	f7ff bf2c 	b.w	14e80 <z_reschedule>
   15028:	2001ecc0 	.word	0x2001ecc0

0001502c <move_thread_to_end_of_prio_q>:
{
   1502c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1502e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   15032:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   15034:	2b00      	cmp	r3, #0
   15036:	da02      	bge.n	1503e <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   15038:	4817      	ldr	r0, [pc, #92]	; (15098 <move_thread_to_end_of_prio_q+0x6c>)
   1503a:	f7ff ff47 	bl	14ecc <z_priq_dumb_remove>
	return list->head == list;
   1503e:	4a17      	ldr	r2, [pc, #92]	; (1509c <move_thread_to_end_of_prio_q+0x70>)
   15040:	4610      	mov	r0, r2
   15042:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15046:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15048:	4283      	cmp	r3, r0
   1504a:	bf08      	it	eq
   1504c:	2300      	moveq	r3, #0
   1504e:	2b00      	cmp	r3, #0
   15050:	bf38      	it	cc
   15052:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15054:	b1d3      	cbz	r3, 1508c <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   15056:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1505a:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1505e:	42ae      	cmp	r6, r5
   15060:	db03      	blt.n	1506a <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   15062:	42a3      	cmp	r3, r4
   15064:	d012      	beq.n	1508c <move_thread_to_end_of_prio_q+0x60>
   15066:	681b      	ldr	r3, [r3, #0]
   15068:	e7f4      	b.n	15054 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1506a:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1506c:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   15070:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   15072:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   15074:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   15076:	6890      	ldr	r0, [r2, #8]
   15078:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1507c:	734b      	strb	r3, [r1, #13]
   1507e:	1a43      	subs	r3, r0, r1
   15080:	4258      	negs	r0, r3
   15082:	4158      	adcs	r0, r3
}
   15084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   15088:	f7ff bf36 	b.w	14ef8 <update_cache>
	node->prev = list->tail;
   1508c:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   15090:	6b13      	ldr	r3, [r2, #48]	; 0x30
   15092:	6019      	str	r1, [r3, #0]
	list->tail = node;
   15094:	6311      	str	r1, [r2, #48]	; 0x30
}
   15096:	e7ed      	b.n	15074 <move_thread_to_end_of_prio_q+0x48>
   15098:	20010be8 	.word	0x20010be8
   1509c:	20010bbc 	.word	0x20010bbc

000150a0 <z_time_slice>:
{
   150a0:	4601      	mov	r1, r0
   150a2:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   150a4:	f04f 0320 	mov.w	r3, #32
   150a8:	f3ef 8411 	mrs	r4, BASEPRI
   150ac:	f383 8811 	msr	BASEPRI, r3
   150b0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   150b4:	4b16      	ldr	r3, [pc, #88]	; (15110 <z_time_slice+0x70>)
   150b6:	4a17      	ldr	r2, [pc, #92]	; (15114 <z_time_slice+0x74>)
   150b8:	6898      	ldr	r0, [r3, #8]
   150ba:	6815      	ldr	r5, [r2, #0]
   150bc:	42a8      	cmp	r0, r5
   150be:	461d      	mov	r5, r3
   150c0:	d106      	bne.n	150d0 <z_time_slice+0x30>
			z_reset_time_slice();
   150c2:	f7ff fe9b 	bl	14dfc <z_reset_time_slice>
	__asm__ volatile(
   150c6:	f384 8811 	msr	BASEPRI, r4
   150ca:	f3bf 8f6f 	isb	sy
}
   150ce:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   150d0:	2600      	movs	r6, #0
   150d2:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   150d4:	4a10      	ldr	r2, [pc, #64]	; (15118 <z_time_slice+0x78>)
   150d6:	6812      	ldr	r2, [r2, #0]
   150d8:	b1ba      	cbz	r2, 1510a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   150da:	89c2      	ldrh	r2, [r0, #14]
   150dc:	2a7f      	cmp	r2, #127	; 0x7f
   150de:	d814      	bhi.n	1510a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   150e0:	7b42      	ldrb	r2, [r0, #13]
   150e2:	06d2      	lsls	r2, r2, #27
   150e4:	d111      	bne.n	1510a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   150e6:	4a0d      	ldr	r2, [pc, #52]	; (1511c <z_time_slice+0x7c>)
   150e8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   150ec:	6812      	ldr	r2, [r2, #0]
   150ee:	4296      	cmp	r6, r2
   150f0:	db0b      	blt.n	1510a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   150f2:	4a0b      	ldr	r2, [pc, #44]	; (15120 <z_time_slice+0x80>)
   150f4:	4290      	cmp	r0, r2
   150f6:	d008      	beq.n	1510a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   150f8:	695a      	ldr	r2, [r3, #20]
   150fa:	428a      	cmp	r2, r1
   150fc:	dc02      	bgt.n	15104 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   150fe:	f7ff ff95 	bl	1502c <move_thread_to_end_of_prio_q>
   15102:	e7de      	b.n	150c2 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   15104:	1a52      	subs	r2, r2, r1
   15106:	615a      	str	r2, [r3, #20]
   15108:	e7dd      	b.n	150c6 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1510a:	2300      	movs	r3, #0
   1510c:	616b      	str	r3, [r5, #20]
   1510e:	e7da      	b.n	150c6 <z_time_slice+0x26>
   15110:	20010bbc 	.word	0x20010bbc
   15114:	20010bf4 	.word	0x20010bf4
   15118:	20010bfc 	.word	0x20010bfc
   1511c:	20010bf8 	.word	0x20010bf8
   15120:	200103c0 	.word	0x200103c0

00015124 <z_impl_k_thread_suspend>:
{
   15124:	b570      	push	{r4, r5, r6, lr}
   15126:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   15128:	3018      	adds	r0, #24
   1512a:	f006 fc61 	bl	1b9f0 <z_abort_timeout>
	__asm__ volatile(
   1512e:	f04f 0320 	mov.w	r3, #32
   15132:	f3ef 8611 	mrs	r6, BASEPRI
   15136:	f383 8811 	msr	BASEPRI, r3
   1513a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1513e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   15142:	2b00      	cmp	r3, #0
   15144:	da07      	bge.n	15156 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   15146:	4621      	mov	r1, r4
   15148:	480e      	ldr	r0, [pc, #56]	; (15184 <z_impl_k_thread_suspend+0x60>)
   1514a:	f7ff febf 	bl	14ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1514e:	7b63      	ldrb	r3, [r4, #13]
   15150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15154:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   15156:	4d0c      	ldr	r5, [pc, #48]	; (15188 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15158:	7b63      	ldrb	r3, [r4, #13]
   1515a:	68a8      	ldr	r0, [r5, #8]
   1515c:	f043 0310 	orr.w	r3, r3, #16
   15160:	7363      	strb	r3, [r4, #13]
   15162:	1b03      	subs	r3, r0, r4
   15164:	4258      	negs	r0, r3
   15166:	4158      	adcs	r0, r3
   15168:	f7ff fec6 	bl	14ef8 <update_cache>
	__asm__ volatile(
   1516c:	f386 8811 	msr	BASEPRI, r6
   15170:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   15174:	68ab      	ldr	r3, [r5, #8]
   15176:	42a3      	cmp	r3, r4
   15178:	d103      	bne.n	15182 <z_impl_k_thread_suspend+0x5e>
}
   1517a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1517e:	f006 bb67 	b.w	1b850 <z_reschedule_unlocked>
}
   15182:	bd70      	pop	{r4, r5, r6, pc}
   15184:	20010be8 	.word	0x20010be8
   15188:	20010bbc 	.word	0x20010bbc

0001518c <z_thread_single_abort>:
{
   1518c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15190:	4604      	mov	r4, r0
	__asm__ volatile(
   15192:	f04f 0320 	mov.w	r3, #32
   15196:	f3ef 8211 	mrs	r2, BASEPRI
   1519a:	f383 8811 	msr	BASEPRI, r3
   1519e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   151a2:	7b43      	ldrb	r3, [r0, #13]
   151a4:	f013 0f28 	tst.w	r3, #40	; 0x28
   151a8:	d005      	beq.n	151b6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   151aa:	f382 8811 	msr	BASEPRI, r2
   151ae:	f3bf 8f6f 	isb	sy
}
   151b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   151b6:	f043 0320 	orr.w	r3, r3, #32
   151ba:	7343      	strb	r3, [r0, #13]
   151bc:	f382 8811 	msr	BASEPRI, r2
   151c0:	f3bf 8f6f 	isb	sy
   151c4:	3018      	adds	r0, #24
   151c6:	f006 fc13 	bl	1b9f0 <z_abort_timeout>
	__asm__ volatile(
   151ca:	f04f 0320 	mov.w	r3, #32
   151ce:	f3ef 8611 	mrs	r6, BASEPRI
   151d2:	f383 8811 	msr	BASEPRI, r3
   151d6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   151da:	7b63      	ldrb	r3, [r4, #13]
   151dc:	06d8      	lsls	r0, r3, #27
   151de:	d116      	bne.n	1520e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   151e0:	69a2      	ldr	r2, [r4, #24]
   151e2:	b9a2      	cbnz	r2, 1520e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   151e4:	0619      	lsls	r1, r3, #24
   151e6:	d507      	bpl.n	151f8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   151e8:	4621      	mov	r1, r4
   151ea:	4828      	ldr	r0, [pc, #160]	; (1528c <z_thread_single_abort+0x100>)
   151ec:	f7ff fe6e 	bl	14ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   151f0:	7b63      	ldrb	r3, [r4, #13]
   151f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   151f6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   151f8:	4b25      	ldr	r3, [pc, #148]	; (15290 <z_thread_single_abort+0x104>)
   151fa:	6898      	ldr	r0, [r3, #8]
   151fc:	1b02      	subs	r2, r0, r4
   151fe:	4250      	negs	r0, r2
   15200:	4150      	adcs	r0, r2
   15202:	f7ff fe79 	bl	14ef8 <update_cache>
			waiter->base.pended_on = NULL;
   15206:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15208:	f104 0830 	add.w	r8, r4, #48	; 0x30
   1520c:	e01e      	b.n	1524c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1520e:	079b      	lsls	r3, r3, #30
   15210:	d5f9      	bpl.n	15206 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   15212:	4621      	mov	r1, r4
   15214:	68a0      	ldr	r0, [r4, #8]
   15216:	f7ff fe59 	bl	14ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1521a:	7b63      	ldrb	r3, [r4, #13]
   1521c:	f023 0302 	bic.w	r3, r3, #2
   15220:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   15222:	2300      	movs	r3, #0
   15224:	60a3      	str	r3, [r4, #8]
   15226:	e7ee      	b.n	15206 <z_thread_single_abort+0x7a>
   15228:	f105 0018 	add.w	r0, r5, #24
   1522c:	f006 fbe0 	bl	1b9f0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   15230:	68a8      	ldr	r0, [r5, #8]
   15232:	4629      	mov	r1, r5
   15234:	f7ff fe4a 	bl	14ecc <z_priq_dumb_remove>
   15238:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1523a:	4628      	mov	r0, r5
   1523c:	f023 0302 	bic.w	r3, r3, #2
   15240:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   15242:	60af      	str	r7, [r5, #8]
   15244:	f8c5 70b4 	str.w	r7, [r5, #180]	; 0xb4
			ready_thread(waiter);
   15248:	f7ff fe9a 	bl	14f80 <ready_thread>
	return list->head == list;
   1524c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1524e:	4545      	cmp	r5, r8
   15250:	d001      	beq.n	15256 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   15252:	2d00      	cmp	r5, #0
   15254:	d1e8      	bne.n	15228 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   15256:	4b0e      	ldr	r3, [pc, #56]	; (15290 <z_thread_single_abort+0x104>)
   15258:	689a      	ldr	r2, [r3, #8]
   1525a:	4b0e      	ldr	r3, [pc, #56]	; (15294 <z_thread_single_abort+0x108>)
   1525c:	429a      	cmp	r2, r3
   1525e:	d102      	bne.n	15266 <z_thread_single_abort+0xda>
			update_cache(1);
   15260:	2001      	movs	r0, #1
   15262:	f7ff fe49 	bl	14ef8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   15266:	7b63      	ldrb	r3, [r4, #13]
		z_thread_monitor_exit(thread);
   15268:	4620      	mov	r0, r4
		thread->base.thread_state |= _THREAD_DEAD;
   1526a:	f043 0308 	orr.w	r3, r3, #8
   1526e:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   15270:	6e25      	ldr	r5, [r4, #96]	; 0x60
		z_thread_monitor_exit(thread);
   15272:	f000 f9c1 	bl	155f8 <z_thread_monitor_exit>
	__asm__ volatile(
   15276:	f386 8811 	msr	BASEPRI, r6
   1527a:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1527e:	2d00      	cmp	r5, #0
   15280:	d097      	beq.n	151b2 <z_thread_single_abort+0x26>
		fn_abort(thread);
   15282:	4620      	mov	r0, r4
   15284:	462b      	mov	r3, r5
}
   15286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1528a:	4718      	bx	r3
   1528c:	20010be8 	.word	0x20010be8
   15290:	20010bbc 	.word	0x20010bbc
   15294:	200103c0 	.word	0x200103c0

00015298 <unready_thread>:
{
   15298:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1529a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1529e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   152a0:	2b00      	cmp	r3, #0
   152a2:	da06      	bge.n	152b2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   152a4:	4807      	ldr	r0, [pc, #28]	; (152c4 <unready_thread+0x2c>)
   152a6:	f7ff fe11 	bl	14ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   152aa:	7b4b      	ldrb	r3, [r1, #13]
   152ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   152b0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   152b2:	4b05      	ldr	r3, [pc, #20]	; (152c8 <unready_thread+0x30>)
   152b4:	6898      	ldr	r0, [r3, #8]
   152b6:	1a43      	subs	r3, r0, r1
   152b8:	4258      	negs	r0, r3
   152ba:	4158      	adcs	r0, r3
}
   152bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   152c0:	f7ff be1a 	b.w	14ef8 <update_cache>
   152c4:	20010be8 	.word	0x20010be8
   152c8:	20010bbc 	.word	0x20010bbc

000152cc <pend>:
{
   152cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152d0:	4606      	mov	r6, r0
   152d2:	4614      	mov	r4, r2
   152d4:	461d      	mov	r5, r3
	__asm__ volatile(
   152d6:	f04f 0320 	mov.w	r3, #32
   152da:	f3ef 8711 	mrs	r7, BASEPRI
   152de:	f383 8811 	msr	BASEPRI, r3
   152e2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   152e6:	f006 fb19 	bl	1b91c <add_to_waitq_locked>
	__asm__ volatile(
   152ea:	f387 8811 	msr	BASEPRI, r7
   152ee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   152f2:	1c6b      	adds	r3, r5, #1
   152f4:	bf08      	it	eq
   152f6:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   152fa:	d008      	beq.n	1530e <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   152fc:	4622      	mov	r2, r4
   152fe:	462b      	mov	r3, r5
   15300:	f106 0018 	add.w	r0, r6, #24
   15304:	4903      	ldr	r1, [pc, #12]	; (15314 <pend+0x48>)
}
   15306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1530a:	f000 bb55 	b.w	159b8 <z_add_timeout>
   1530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15312:	bf00      	nop
   15314:	0001b8dd 	.word	0x0001b8dd

00015318 <z_pend_curr>:
{
   15318:	b510      	push	{r4, lr}
   1531a:	460c      	mov	r4, r1
	pending_current = _current;
   1531c:	4b06      	ldr	r3, [pc, #24]	; (15338 <z_pend_curr+0x20>)
{
   1531e:	4611      	mov	r1, r2
	pending_current = _current;
   15320:	6898      	ldr	r0, [r3, #8]
   15322:	4b06      	ldr	r3, [pc, #24]	; (1533c <z_pend_curr+0x24>)
   15324:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   15326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1532a:	f7ff ffcf 	bl	152cc <pend>
   1532e:	4620      	mov	r0, r4
}
   15330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15334:	f7fd bc42 	b.w	12bbc <arch_swap>
   15338:	20010bbc 	.word	0x20010bbc
   1533c:	20010bf4 	.word	0x20010bf4

00015340 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   15340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15342:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   15344:	f006 fba4 	bl	1ba90 <z_tick_get_32>
   15348:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1534a:	f04f 0320 	mov.w	r3, #32
   1534e:	f3ef 8711 	mrs	r7, BASEPRI
   15352:	f383 8811 	msr	BASEPRI, r3
   15356:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1535a:	4e0d      	ldr	r6, [pc, #52]	; (15390 <z_tick_sleep.part.0+0x50>)
   1535c:	4b0d      	ldr	r3, [pc, #52]	; (15394 <z_tick_sleep.part.0+0x54>)
   1535e:	68b0      	ldr	r0, [r6, #8]
   15360:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   15362:	f7ff ff99 	bl	15298 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   15366:	68b0      	ldr	r0, [r6, #8]
   15368:	490b      	ldr	r1, [pc, #44]	; (15398 <z_tick_sleep.part.0+0x58>)
   1536a:	462a      	mov	r2, r5
   1536c:	17eb      	asrs	r3, r5, #31
   1536e:	3018      	adds	r0, #24
   15370:	f000 fb22 	bl	159b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15374:	68b2      	ldr	r2, [r6, #8]
   15376:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15378:	7b53      	ldrb	r3, [r2, #13]
   1537a:	f043 0310 	orr.w	r3, r3, #16
   1537e:	7353      	strb	r3, [r2, #13]
   15380:	f7fd fc1c 	bl	12bbc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   15384:	f006 fb84 	bl	1ba90 <z_tick_get_32>
   15388:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1538a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1538e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15390:	20010bbc 	.word	0x20010bbc
   15394:	20010bf4 	.word	0x20010bf4
   15398:	0001b8dd 	.word	0x0001b8dd

0001539c <z_set_prio>:
{
   1539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153a0:	4604      	mov	r4, r0
   153a2:	f04f 0320 	mov.w	r3, #32
   153a6:	f3ef 8811 	mrs	r8, BASEPRI
   153aa:	f383 8811 	msr	BASEPRI, r3
   153ae:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   153b2:	7b43      	ldrb	r3, [r0, #13]
   153b4:	b24e      	sxtb	r6, r1
   153b6:	06db      	lsls	r3, r3, #27
   153b8:	d12e      	bne.n	15418 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   153ba:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   153bc:	bb65      	cbnz	r5, 15418 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   153be:	4f18      	ldr	r7, [pc, #96]	; (15420 <z_set_prio+0x84>)
   153c0:	4621      	mov	r1, r4
   153c2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   153c6:	f7ff fd81 	bl	14ecc <z_priq_dumb_remove>
	return list->head == list;
   153ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   153cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   153ce:	4283      	cmp	r3, r0
   153d0:	bf18      	it	ne
   153d2:	461d      	movne	r5, r3
   153d4:	2d00      	cmp	r5, #0
   153d6:	bf38      	it	cc
   153d8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   153da:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   153dc:	b1b5      	cbz	r5, 1540c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   153de:	f995 100e 	ldrsb.w	r1, [r5, #14]
   153e2:	42b1      	cmp	r1, r6
   153e4:	dc03      	bgt.n	153ee <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   153e6:	42aa      	cmp	r2, r5
   153e8:	d010      	beq.n	1540c <z_set_prio+0x70>
   153ea:	682d      	ldr	r5, [r5, #0]
   153ec:	e7f6      	b.n	153dc <z_set_prio+0x40>
	node->prev = successor->prev;
   153ee:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   153f0:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   153f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   153f6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   153f8:	2001      	movs	r0, #1
   153fa:	f7ff fd7d 	bl	14ef8 <update_cache>
   153fe:	2001      	movs	r0, #1
	__asm__ volatile(
   15400:	f388 8811 	msr	BASEPRI, r8
   15404:	f3bf 8f6f 	isb	sy
}
   15408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1540c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   15410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15412:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15414:	633c      	str	r4, [r7, #48]	; 0x30
}
   15416:	e7ef      	b.n	153f8 <z_set_prio+0x5c>
			thread->base.prio = prio;
   15418:	2000      	movs	r0, #0
   1541a:	73a6      	strb	r6, [r4, #14]
   1541c:	e7f0      	b.n	15400 <z_set_prio+0x64>
   1541e:	bf00      	nop
   15420:	20010bbc 	.word	0x20010bbc

00015424 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15424:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   15426:	4b04      	ldr	r3, [pc, #16]	; (15438 <z_sched_init+0x14>)
   15428:	4608      	mov	r0, r1
   1542a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1542e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   15432:	f7ff bcf9 	b.w	14e28 <k_sched_time_slice_set>
   15436:	bf00      	nop
   15438:	20010bbc 	.word	0x20010bbc

0001543c <z_impl_k_yield>:
{
   1543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1543e:	4c24      	ldr	r4, [pc, #144]	; (154d0 <z_impl_k_yield+0x94>)
   15440:	4b24      	ldr	r3, [pc, #144]	; (154d4 <z_impl_k_yield+0x98>)
   15442:	68a2      	ldr	r2, [r4, #8]
   15444:	429a      	cmp	r2, r3
   15446:	d030      	beq.n	154aa <z_impl_k_yield+0x6e>
	__asm__ volatile(
   15448:	f04f 0320 	mov.w	r3, #32
   1544c:	f3ef 8511 	mrs	r5, BASEPRI
   15450:	f383 8811 	msr	BASEPRI, r3
   15454:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   15458:	68a1      	ldr	r1, [r4, #8]
   1545a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1545e:	f7ff fd35 	bl	14ecc <z_priq_dumb_remove>
	return list->head == list;
   15462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   15464:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15466:	4283      	cmp	r3, r0
   15468:	bf08      	it	eq
   1546a:	2300      	moveq	r3, #0
   1546c:	2b00      	cmp	r3, #0
   1546e:	bf38      	it	cc
   15470:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15472:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15474:	b32b      	cbz	r3, 154c2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   15476:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1547a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1547e:	42b7      	cmp	r7, r6
   15480:	db03      	blt.n	1548a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   15482:	428b      	cmp	r3, r1
   15484:	d01d      	beq.n	154c2 <z_impl_k_yield+0x86>
   15486:	681b      	ldr	r3, [r3, #0]
   15488:	e7f4      	b.n	15474 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1548a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1548c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   15490:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   15492:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   15494:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   15496:	2001      	movs	r0, #1
   15498:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1549c:	7353      	strb	r3, [r2, #13]
   1549e:	f7ff fd2b 	bl	14ef8 <update_cache>
	__asm__ volatile(
   154a2:	f385 8811 	msr	BASEPRI, r5
   154a6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   154aa:	f04f 0320 	mov.w	r3, #32
   154ae:	f3ef 8011 	mrs	r0, BASEPRI
   154b2:	f383 8811 	msr	BASEPRI, r3
   154b6:	f3bf 8f6f 	isb	sy
}
   154ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   154be:	f7fd bb7d 	b.w	12bbc <arch_swap>
	node->prev = list->tail;
   154c2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   154c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   154c8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   154ca:	6322      	str	r2, [r4, #48]	; 0x30
}
   154cc:	e7e2      	b.n	15494 <z_impl_k_yield+0x58>
   154ce:	bf00      	nop
   154d0:	20010bbc 	.word	0x20010bbc
   154d4:	200103c0 	.word	0x200103c0

000154d8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   154d8:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   154da:	3301      	adds	r3, #1
   154dc:	bf08      	it	eq
   154de:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   154e2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   154e4:	d106      	bne.n	154f4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   154e6:	4b0b      	ldr	r3, [pc, #44]	; (15514 <z_impl_k_sleep+0x3c>)
   154e8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   154ea:	f7ff fe1b 	bl	15124 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   154ee:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   154f2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   154f4:	4604      	mov	r4, r0
	if (ticks == 0) {
   154f6:	b948      	cbnz	r0, 1550c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   154f8:	f7ff ffa0 	bl	1543c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   154fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15500:	fb84 3400 	smull	r3, r4, r4, r0
   15504:	0bd8      	lsrs	r0, r3, #15
   15506:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1550a:	e7f2      	b.n	154f2 <z_impl_k_sleep+0x1a>
   1550c:	f7ff ff18 	bl	15340 <z_tick_sleep.part.0>
   15510:	4604      	mov	r4, r0
   15512:	e7f3      	b.n	154fc <z_impl_k_sleep+0x24>
   15514:	20010bbc 	.word	0x20010bbc

00015518 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   15518:	4b01      	ldr	r3, [pc, #4]	; (15520 <z_impl_k_current_get+0x8>)
   1551a:	6898      	ldr	r0, [r3, #8]
   1551c:	4770      	bx	lr
   1551e:	bf00      	nop
   15520:	20010bbc 	.word	0x20010bbc

00015524 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15524:	b538      	push	{r3, r4, r5, lr}
   15526:	4604      	mov	r4, r0
   15528:	f04f 0320 	mov.w	r3, #32
   1552c:	f3ef 8511 	mrs	r5, BASEPRI
   15530:	f383 8811 	msr	BASEPRI, r3
   15534:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   15538:	f006 fa1b 	bl	1b972 <z_unpend_first_thread>

	if (thread != NULL) {
   1553c:	b150      	cbz	r0, 15554 <z_impl_k_sem_give+0x30>
   1553e:	2200      	movs	r2, #0
   15540:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15544:	f006 f9ba 	bl	1b8bc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   15548:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1554a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1554e:	4807      	ldr	r0, [pc, #28]	; (1556c <z_impl_k_sem_give+0x48>)
   15550:	f7ff bc96 	b.w	14e80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15554:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15558:	429a      	cmp	r2, r3
   1555a:	bf18      	it	ne
   1555c:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1555e:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15560:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   15562:	f104 0010 	add.w	r0, r4, #16
   15566:	f006 fc30 	bl	1bdca <z_handle_obj_poll_events>
}
   1556a:	e7ed      	b.n	15548 <z_impl_k_sem_give+0x24>
   1556c:	2001ecc0 	.word	0x2001ecc0

00015570 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15572:	4614      	mov	r4, r2
   15574:	461d      	mov	r5, r3
   15576:	f04f 0320 	mov.w	r3, #32
   1557a:	f3ef 8111 	mrs	r1, BASEPRI
   1557e:	f383 8811 	msr	BASEPRI, r3
   15582:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   15586:	6883      	ldr	r3, [r0, #8]
   15588:	b143      	cbz	r3, 1559c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1558a:	3b01      	subs	r3, #1
   1558c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1558e:	f381 8811 	msr	BASEPRI, r1
   15592:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   15596:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   15598:	b003      	add	sp, #12
   1559a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1559c:	ea54 0305 	orrs.w	r3, r4, r5
   155a0:	d106      	bne.n	155b0 <z_impl_k_sem_take+0x40>
   155a2:	f381 8811 	msr	BASEPRI, r1
   155a6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   155aa:	f06f 000f 	mvn.w	r0, #15
   155ae:	e7f3      	b.n	15598 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   155b0:	4602      	mov	r2, r0
   155b2:	e9cd 4500 	strd	r4, r5, [sp]
   155b6:	4802      	ldr	r0, [pc, #8]	; (155c0 <z_impl_k_sem_take+0x50>)
   155b8:	f7ff feae 	bl	15318 <z_pend_curr>
	return ret;
   155bc:	e7ec      	b.n	15598 <z_impl_k_sem_take+0x28>
   155be:	bf00      	nop
   155c0:	2001ecc0 	.word	0x2001ecc0

000155c4 <k_thread_foreach>:

#define _FOREACH_STATIC_THREAD(thread_data)              \
	Z_STRUCT_SECTION_FOREACH(_static_thread_data, thread_data)

void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data)
{
   155c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   155c6:	4605      	mov	r5, r0
   155c8:	460e      	mov	r6, r1
	__asm__ volatile(
   155ca:	f04f 0320 	mov.w	r3, #32
   155ce:	f3ef 8711 	mrs	r7, BASEPRI
   155d2:	f383 8811 	msr	BASEPRI, r3
   155d6:	f3bf 8f6f 	isb	sy
	 * modified by the user_cb either directly or indirectly.
	 * The indirect ways are through calling k_thread_create and
	 * k_thread_abort from user_cb.
	 */
	key = k_spin_lock(&z_thread_monitor_lock);
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   155da:	4b06      	ldr	r3, [pc, #24]	; (155f4 <k_thread_foreach+0x30>)
   155dc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
   155de:	b924      	cbnz	r4, 155ea <k_thread_foreach+0x26>
	__asm__ volatile(
   155e0:	f387 8811 	msr	BASEPRI, r7
   155e4:	f3bf 8f6f 	isb	sy
		user_cb(thread, user_data);
	}
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
}
   155e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   155ea:	4620      	mov	r0, r4
   155ec:	4631      	mov	r1, r6
   155ee:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   155f0:	6fa4      	ldr	r4, [r4, #120]	; 0x78
   155f2:	e7f4      	b.n	155de <k_thread_foreach+0x1a>
   155f4:	20010bbc 	.word	0x20010bbc

000155f8 <z_thread_monitor_exit>:
	__asm__ volatile(
   155f8:	f04f 0320 	mov.w	r3, #32
   155fc:	f3ef 8111 	mrs	r1, BASEPRI
   15600:	f383 8811 	msr	BASEPRI, r3
   15604:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   15608:	4a09      	ldr	r2, [pc, #36]	; (15630 <z_thread_monitor_exit+0x38>)
   1560a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1560c:	4283      	cmp	r3, r0
   1560e:	d107      	bne.n	15620 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
   15610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   15612:	6353      	str	r3, [r2, #52]	; 0x34
	__asm__ volatile(
   15614:	f381 8811 	msr	BASEPRI, r1
   15618:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1561c:	4770      	bx	lr
   1561e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   15620:	2b00      	cmp	r3, #0
   15622:	d0f7      	beq.n	15614 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
   15624:	6f9a      	ldr	r2, [r3, #120]	; 0x78
		while ((prev_thread != NULL) &&
   15626:	4282      	cmp	r2, r0
   15628:	d1f9      	bne.n	1561e <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
   1562a:	6f82      	ldr	r2, [r0, #120]	; 0x78
   1562c:	679a      	str	r2, [r3, #120]	; 0x78
   1562e:	e7f1      	b.n	15614 <z_thread_monitor_exit+0x1c>
   15630:	20010bbc 	.word	0x20010bbc

00015634 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   15634:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   15636:	4604      	mov	r4, r0
   15638:	b908      	cbnz	r0, 1563e <z_impl_k_thread_name_set+0xa>
		thread = _current;
   1563a:	4b05      	ldr	r3, [pc, #20]	; (15650 <z_impl_k_thread_name_set+0x1c>)
   1563c:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1563e:	2220      	movs	r2, #32
   15640:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   15644:	f005 fdc5 	bl	1b1d2 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   15648:	2000      	movs	r0, #0
   1564a:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
#else
	ARG_UNUSED(thread);
	ARG_UNUSED(value);
	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1564e:	bd10      	pop	{r4, pc}
   15650:	20010bbc 	.word	0x20010bbc

00015654 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   15654:	7b43      	ldrb	r3, [r0, #13]
   15656:	2b10      	cmp	r3, #16
   15658:	d80e      	bhi.n	15678 <k_thread_state_str+0x24>
   1565a:	2b10      	cmp	r3, #16
   1565c:	d81c      	bhi.n	15698 <k_thread_state_str+0x44>
   1565e:	e8df f003 	tbb	[pc, r3]
   15662:	091d      	.short	0x091d
   15664:	1b151b13 	.word	0x1b151b13
   15668:	1b171b1b 	.word	0x1b171b1b
   1566c:	1b1b1b1b 	.word	0x1b1b1b1b
   15670:	1b1b      	.short	0x1b1b
   15672:	19          	.byte	0x19
   15673:	00          	.byte	0x00
   15674:	480b      	ldr	r0, [pc, #44]	; (156a4 <k_thread_state_str+0x50>)
   15676:	4770      	bx	lr
   15678:	2b20      	cmp	r3, #32
   1567a:	d011      	beq.n	156a0 <k_thread_state_str+0x4c>
		break;
	case _THREAD_ABORTING:
		return "aborting";
		break;
	case _THREAD_QUEUED:
		return "queued";
   1567c:	4a0a      	ldr	r2, [pc, #40]	; (156a8 <k_thread_state_str+0x54>)
   1567e:	480b      	ldr	r0, [pc, #44]	; (156ac <k_thread_state_str+0x58>)
   15680:	2b80      	cmp	r3, #128	; 0x80
   15682:	bf08      	it	eq
   15684:	4610      	moveq	r0, r2
   15686:	4770      	bx	lr
		return "pending";
   15688:	4809      	ldr	r0, [pc, #36]	; (156b0 <k_thread_state_str+0x5c>)
   1568a:	4770      	bx	lr
		return "prestart";
   1568c:	4809      	ldr	r0, [pc, #36]	; (156b4 <k_thread_state_str+0x60>)
   1568e:	4770      	bx	lr
		return "dead";
   15690:	4809      	ldr	r0, [pc, #36]	; (156b8 <k_thread_state_str+0x64>)
   15692:	4770      	bx	lr
		return "suspended";
   15694:	4809      	ldr	r0, [pc, #36]	; (156bc <k_thread_state_str+0x68>)
   15696:	4770      	bx	lr
		break;
	}
	return "unknown";
   15698:	4804      	ldr	r0, [pc, #16]	; (156ac <k_thread_state_str+0x58>)
   1569a:	4770      	bx	lr
		return "";
   1569c:	4808      	ldr	r0, [pc, #32]	; (156c0 <k_thread_state_str+0x6c>)
   1569e:	4770      	bx	lr
		return "aborting";
   156a0:	4808      	ldr	r0, [pc, #32]	; (156c4 <k_thread_state_str+0x70>)
}
   156a2:	4770      	bx	lr
   156a4:	0001faeb 	.word	0x0001faeb
   156a8:	0001fafa 	.word	0x0001fafa
   156ac:	0001fa06 	.word	0x0001fa06
   156b0:	0001facb 	.word	0x0001facb
   156b4:	0001fad3 	.word	0x0001fad3
   156b8:	0001fadc 	.word	0x0001fadc
   156bc:	0001fae1 	.word	0x0001fae1
   156c0:	0001e916 	.word	0x0001e916
   156c4:	0001faf1 	.word	0x0001faf1

000156c8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   156c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156cc:	460e      	mov	r6, r1
   156ce:	b085      	sub	sp, #20
	sys_dlist_init(&w->waitq);
   156d0:	f100 0130 	add.w	r1, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   156d4:	e9c0 110c 	strd	r1, r1, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   156d8:	9912      	ldr	r1, [sp, #72]	; 0x48
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   156da:	2500      	movs	r5, #0
	thread_base->user_options = (uint8_t)options;
   156dc:	7301      	strb	r1, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   156de:	2104      	movs	r1, #4
{
   156e0:	4604      	mov	r4, r0
   156e2:	4699      	mov	r9, r3
	thread_base->thread_state = (uint8_t)initial_state;
   156e4:	7341      	strb	r1, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   156e6:	3207      	adds	r2, #7
	thread_base->prio = priority;
   156e8:	9911      	ldr	r1, [sp, #68]	; 0x44
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   156ea:	f022 0a07 	bic.w	sl, r2, #7
	memset(stack_buf_start, 0xaa, stack_buf_size);
   156ee:	4652      	mov	r2, sl
	node->prev = NULL;
   156f0:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->prio = priority;
   156f4:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   156f6:	73c5      	strb	r5, [r0, #15]
	memset(stack_buf_start, 0xaa, stack_buf_size);
   156f8:	21aa      	movs	r1, #170	; 0xaa
   156fa:	4630      	mov	r0, r6
{
   156fc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   15700:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	memset(stack_buf_start, 0xaa, stack_buf_size);
   15702:	f005 fdfb 	bl	1b2fc <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15706:	9b10      	ldr	r3, [sp, #64]	; 0x40
	stack_ptr = (char *)stack + stack_obj_size;
   15708:	eb06 080a 	add.w	r8, r6, sl
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1570c:	9302      	str	r3, [sp, #8]
   1570e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15710:	4642      	mov	r2, r8
   15712:	e9cd b300 	strd	fp, r3, [sp]
   15716:	4631      	mov	r1, r6
   15718:	464b      	mov	r3, r9
   1571a:	4620      	mov	r0, r4
	new_thread->stack_info.size = stack_buf_size;
   1571c:	e9c4 6a28 	strd	r6, sl, [r4, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   15720:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   15724:	f7fd fa9a 	bl	12c5c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   15728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->fn_abort = NULL;
   1572a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	new_thread->entry.parameter2 = p2;
   1572e:	6723      	str	r3, [r4, #112]	; 0x70
	new_thread->entry.parameter3 = p3;
   15730:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->entry.parameter1 = p1;
   15732:	e9c4 9b1a 	strd	r9, fp, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
   15736:	6763      	str	r3, [r4, #116]	; 0x74
	__asm__ volatile(
   15738:	f04f 0320 	mov.w	r3, #32
   1573c:	f3ef 8211 	mrs	r2, BASEPRI
   15740:	f383 8811 	msr	BASEPRI, r3
   15744:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
   15748:	4e0e      	ldr	r6, [pc, #56]	; (15784 <z_setup_new_thread+0xbc>)
   1574a:	6b71      	ldr	r1, [r6, #52]	; 0x34
	_kernel.threads = new_thread;
   1574c:	6374      	str	r4, [r6, #52]	; 0x34
	new_thread->next_thread = _kernel.threads;
   1574e:	67a1      	str	r1, [r4, #120]	; 0x78
	__asm__ volatile(
   15750:	f382 8811 	msr	BASEPRI, r2
   15754:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   15758:	b18f      	cbz	r7, 1577e <z_setup_new_thread+0xb6>
		strncpy(new_thread->name, name,
   1575a:	221f      	movs	r2, #31
   1575c:	4639      	mov	r1, r7
   1575e:	f104 007c 	add.w	r0, r4, #124	; 0x7c
   15762:	f005 fd36 	bl	1b1d2 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   15766:	f884 509b 	strb.w	r5, [r4, #155]	; 0x9b
	if (!_current) {
   1576a:	68b3      	ldr	r3, [r6, #8]
   1576c:	b10b      	cbz	r3, 15772 <z_setup_new_thread+0xaa>
	new_thread->resource_pool = _current->resource_pool;
   1576e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
}
   15772:	4640      	mov	r0, r8
   15774:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   15778:	b005      	add	sp, #20
   1577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1577e:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
   15782:	e7f2      	b.n	1576a <z_setup_new_thread+0xa2>
   15784:	20010bbc 	.word	0x20010bbc

00015788 <z_impl_k_thread_create>:
{
   15788:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1578a:	2500      	movs	r5, #0
{
   1578c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1578e:	9505      	str	r5, [sp, #20]
   15790:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   15792:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15796:	9504      	str	r5, [sp, #16]
   15798:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   1579a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1579c:	9503      	str	r5, [sp, #12]
   1579e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   157a0:	9502      	str	r5, [sp, #8]
   157a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   157a4:	9501      	str	r5, [sp, #4]
   157a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   157a8:	9500      	str	r5, [sp, #0]
   157aa:	f7ff ff8d 	bl	156c8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   157ae:	1c7b      	adds	r3, r7, #1
   157b0:	bf08      	it	eq
   157b2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   157b6:	d005      	beq.n	157c4 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   157b8:	ea56 0307 	orrs.w	r3, r6, r7
   157bc:	d105      	bne.n	157ca <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   157be:	4620      	mov	r0, r4
   157c0:	f7ff fc16 	bl	14ff0 <z_sched_start>
}
   157c4:	4620      	mov	r0, r4
   157c6:	b007      	add	sp, #28
   157c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   157ca:	4632      	mov	r2, r6
   157cc:	463b      	mov	r3, r7
   157ce:	4903      	ldr	r1, [pc, #12]	; (157dc <z_impl_k_thread_create+0x54>)
   157d0:	f104 0018 	add.w	r0, r4, #24
   157d4:	f000 f8f0 	bl	159b8 <z_add_timeout>
   157d8:	e7f4      	b.n	157c4 <z_impl_k_thread_create+0x3c>
   157da:	bf00      	nop
   157dc:	0001b8dd 	.word	0x0001b8dd

000157e0 <z_init_static_threads>:
{
   157e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   157e4:	4e2a      	ldr	r6, [pc, #168]	; (15890 <z_init_static_threads+0xb0>)
   157e6:	4d2b      	ldr	r5, [pc, #172]	; (15894 <z_init_static_threads+0xb4>)
   157e8:	46b0      	mov	r8, r6
{
   157ea:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   157ec:	42b5      	cmp	r5, r6
   157ee:	f105 0430 	add.w	r4, r5, #48	; 0x30
   157f2:	d310      	bcc.n	15816 <z_init_static_threads+0x36>
	k_sched_lock();
   157f4:	f7ff fb56 	bl	14ea4 <k_sched_lock>
   157f8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   157fc:	f240 36e7 	movw	r6, #999	; 0x3e7
   15800:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   15802:	4c24      	ldr	r4, [pc, #144]	; (15894 <z_init_static_threads+0xb4>)
   15804:	f8df a090 	ldr.w	sl, [pc, #144]	; 15898 <z_init_static_threads+0xb8>
   15808:	4544      	cmp	r4, r8
   1580a:	d321      	bcc.n	15850 <z_init_static_threads+0x70>
}
   1580c:	b006      	add	sp, #24
   1580e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   15812:	f7ff bb99 	b.w	14f48 <k_sched_unlock>
		z_setup_new_thread(
   15816:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1581a:	9305      	str	r3, [sp, #20]
   1581c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15820:	9304      	str	r3, [sp, #16]
   15822:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15826:	9303      	str	r3, [sp, #12]
   15828:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1582c:	9302      	str	r3, [sp, #8]
   1582e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15832:	9301      	str	r3, [sp, #4]
   15834:	f854 3c20 	ldr.w	r3, [r4, #-32]
   15838:	9300      	str	r3, [sp, #0]
   1583a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1583e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   15842:	f7ff ff41 	bl	156c8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15846:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1584a:	65dd      	str	r5, [r3, #92]	; 0x5c
   1584c:	4625      	mov	r5, r4
   1584e:	e7cd      	b.n	157ec <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15850:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15852:	1c5a      	adds	r2, r3, #1
   15854:	d00d      	beq.n	15872 <z_init_static_threads+0x92>
   15856:	4630      	mov	r0, r6
   15858:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   1585a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1585e:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15862:	42b9      	cmp	r1, r7
   15864:	bf08      	it	eq
   15866:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   15868:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1586a:	d104      	bne.n	15876 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1586c:	4628      	mov	r0, r5
   1586e:	f7ff fbbf 	bl	14ff0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15872:	3430      	adds	r4, #48	; 0x30
   15874:	e7c8      	b.n	15808 <z_init_static_threads+0x28>
   15876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1587a:	2300      	movs	r3, #0
   1587c:	f7f6 fd30 	bl	c2e0 <__aeabi_uldivmod>
   15880:	4602      	mov	r2, r0
   15882:	460b      	mov	r3, r1
   15884:	f105 0018 	add.w	r0, r5, #24
   15888:	4651      	mov	r1, sl
   1588a:	f000 f895 	bl	159b8 <z_add_timeout>
   1588e:	e7f0      	b.n	15872 <z_init_static_threads+0x92>
   15890:	20010164 	.word	0x20010164
   15894:	20010164 	.word	0x20010164
   15898:	0001b8dd 	.word	0x0001b8dd

0001589c <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   1589c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1589e:	f04f 0320 	mov.w	r3, #32
   158a2:	f3ef 8411 	mrs	r4, BASEPRI
   158a6:	f383 8811 	msr	BASEPRI, r3
   158aa:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   158ae:	4b04      	ldr	r3, [pc, #16]	; (158c0 <z_self_abort+0x24>)
   158b0:	6898      	ldr	r0, [r3, #8]
   158b2:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   158b4:	f7ff fc36 	bl	15124 <z_impl_k_thread_suspend>
   158b8:	4620      	mov	r0, r4
   158ba:	f7fd f97f 	bl	12bbc <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   158be:	bf00      	nop
   158c0:	20010bbc 	.word	0x20010bbc

000158c4 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   158c4:	4800      	ldr	r0, [pc, #0]	; (158c8 <sys_kernel_version_get+0x4>)
   158c6:	4770      	bx	lr
   158c8:	02046300 	.word	0x02046300

000158cc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   158cc:	4b03      	ldr	r3, [pc, #12]	; (158dc <elapsed+0x10>)
   158ce:	681b      	ldr	r3, [r3, #0]
   158d0:	b90b      	cbnz	r3, 158d6 <elapsed+0xa>
   158d2:	f7fd b93f 	b.w	12b54 <z_clock_elapsed>
}
   158d6:	2000      	movs	r0, #0
   158d8:	4770      	bx	lr
   158da:	bf00      	nop
   158dc:	20010c00 	.word	0x20010c00

000158e0 <remove_timeout>:
{
   158e0:	b530      	push	{r4, r5, lr}
   158e2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   158e4:	b168      	cbz	r0, 15902 <remove_timeout+0x22>
   158e6:	4a0a      	ldr	r2, [pc, #40]	; (15910 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   158e8:	6852      	ldr	r2, [r2, #4]
   158ea:	4290      	cmp	r0, r2
   158ec:	d009      	beq.n	15902 <remove_timeout+0x22>
	if (next(t) != NULL) {
   158ee:	b143      	cbz	r3, 15902 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   158f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   158f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   158f8:	1912      	adds	r2, r2, r4
   158fa:	eb45 0101 	adc.w	r1, r5, r1
   158fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   15902:	6842      	ldr	r2, [r0, #4]
   15904:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   15906:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15908:	2300      	movs	r3, #0
	node->prev = NULL;
   1590a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1590e:	bd30      	pop	{r4, r5, pc}
   15910:	200100d4 	.word	0x200100d4

00015914 <next_timeout>:

static int32_t next_timeout(void)
{
   15914:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   15916:	4b13      	ldr	r3, [pc, #76]	; (15964 <next_timeout+0x50>)
   15918:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1591a:	429c      	cmp	r4, r3
   1591c:	bf08      	it	eq
   1591e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   15920:	f7ff ffd4 	bl	158cc <elapsed>
   15924:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   15926:	b1bc      	cbz	r4, 15958 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   15928:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1592c:	1b40      	subs	r0, r0, r5
   1592e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   15932:	2801      	cmp	r0, #1
   15934:	f171 0300 	sbcs.w	r3, r1, #0
   15938:	db11      	blt.n	1595e <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1593a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1593e:	2300      	movs	r3, #0
   15940:	4282      	cmp	r2, r0
   15942:	eb73 0401 	sbcs.w	r4, r3, r1
   15946:	da00      	bge.n	1594a <next_timeout+0x36>
   15948:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1594a:	4b07      	ldr	r3, [pc, #28]	; (15968 <next_timeout+0x54>)
   1594c:	695b      	ldr	r3, [r3, #20]
   1594e:	b113      	cbz	r3, 15956 <next_timeout+0x42>
   15950:	4298      	cmp	r0, r3
   15952:	bfa8      	it	ge
   15954:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   15956:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   15958:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1595c:	e7f5      	b.n	1594a <next_timeout+0x36>
   1595e:	2000      	movs	r0, #0
   15960:	e7f3      	b.n	1594a <next_timeout+0x36>
   15962:	bf00      	nop
   15964:	200100d4 	.word	0x200100d4
   15968:	20010bbc 	.word	0x20010bbc

0001596c <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   1596c:	6803      	ldr	r3, [r0, #0]
{
   1596e:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   15970:	b1eb      	cbz	r3, 159ae <timeout_rem+0x42>
	return list->head == list;
   15972:	4a10      	ldr	r2, [pc, #64]	; (159b4 <timeout_rem+0x48>)
   15974:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15976:	4293      	cmp	r3, r2
   15978:	d016      	beq.n	159a8 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1597a:	2400      	movs	r4, #0
   1597c:	2500      	movs	r5, #0
   1597e:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   15980:	b93b      	cbnz	r3, 15992 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   15982:	f7ff ffa3 	bl	158cc <elapsed>
   15986:	1a24      	subs	r4, r4, r0
   15988:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   1598c:	4620      	mov	r0, r4
   1598e:	4629      	mov	r1, r5
   15990:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   15992:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   15996:	18a4      	adds	r4, r4, r2
   15998:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   1599c:	4283      	cmp	r3, r0
   1599e:	d0f0      	beq.n	15982 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   159a0:	428b      	cmp	r3, r1
   159a2:	d0ee      	beq.n	15982 <timeout_rem+0x16>
   159a4:	681b      	ldr	r3, [r3, #0]
   159a6:	e7eb      	b.n	15980 <timeout_rem+0x14>
   159a8:	2400      	movs	r4, #0
   159aa:	2500      	movs	r5, #0
   159ac:	e7e9      	b.n	15982 <timeout_rem+0x16>
		return 0;
   159ae:	2400      	movs	r4, #0
   159b0:	2500      	movs	r5, #0
   159b2:	e7eb      	b.n	1598c <timeout_rem+0x20>
   159b4:	200100d4 	.word	0x200100d4

000159b8 <z_add_timeout>:
{
   159b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159bc:	9101      	str	r1, [sp, #4]
   159be:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   159c0:	1c4b      	adds	r3, r1, #1
   159c2:	bf08      	it	eq
   159c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   159c8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   159ca:	d06b      	beq.n	15aa4 <z_add_timeout+0xec>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   159cc:	f06f 0301 	mvn.w	r3, #1
   159d0:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   159d4:	1c54      	adds	r4, r2, #1
   159d6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   159da:	ebb3 0804 	subs.w	r8, r3, r4
   159de:	eb6b 0905 	sbc.w	r9, fp, r5
   159e2:	f1b8 0f00 	cmp.w	r8, #0
   159e6:	f179 0300 	sbcs.w	r3, r9, #0
   159ea:	db0f      	blt.n	15a0c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   159ec:	f7ff ff6e 	bl	158cc <elapsed>
   159f0:	f06f 0301 	mvn.w	r3, #1
   159f4:	4a32      	ldr	r2, [pc, #200]	; (15ac0 <z_add_timeout+0x108>)
   159f6:	e9d2 1c00 	ldrd	r1, ip, [r2]
   159fa:	1a5b      	subs	r3, r3, r1
   159fc:	eb6b 020c 	sbc.w	r2, fp, ip
   15a00:	1b1e      	subs	r6, r3, r4
   15a02:	eb62 0705 	sbc.w	r7, r2, r5
   15a06:	1a34      	subs	r4, r6, r0
   15a08:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   15a0c:	9b01      	ldr	r3, [sp, #4]
   15a0e:	f8ca 3008 	str.w	r3, [sl, #8]
   15a12:	f04f 0320 	mov.w	r3, #32
   15a16:	f3ef 8611 	mrs	r6, BASEPRI
   15a1a:	f383 8811 	msr	BASEPRI, r3
   15a1e:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   15a22:	f7ff ff53 	bl	158cc <elapsed>
	ticks = MAX(1, ticks);
   15a26:	2c01      	cmp	r4, #1
   15a28:	f175 0300 	sbcs.w	r3, r5, #0
   15a2c:	bfbc      	itt	lt
   15a2e:	2401      	movlt	r4, #1
   15a30:	2500      	movlt	r5, #0
	return list->head == list;
   15a32:	4b24      	ldr	r3, [pc, #144]	; (15ac4 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
   15a34:	1824      	adds	r4, r4, r0
   15a36:	681a      	ldr	r2, [r3, #0]
   15a38:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a3c:	429a      	cmp	r2, r3
   15a3e:	e9ca 4504 	strd	r4, r5, [sl, #16]
   15a42:	d001      	beq.n	15a48 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15a44:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   15a46:	b952      	cbnz	r2, 15a5e <z_add_timeout+0xa6>
	node->prev = list->tail;
   15a48:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15a4a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   15a4e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   15a52:	685a      	ldr	r2, [r3, #4]
   15a54:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   15a58:	f8c3 a004 	str.w	sl, [r3, #4]
}
   15a5c:	e014      	b.n	15a88 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   15a5e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   15a62:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   15a66:	4544      	cmp	r4, r8
   15a68:	eb75 0109 	sbcs.w	r1, r5, r9
   15a6c:	da1d      	bge.n	15aaa <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
   15a6e:	ebb8 0004 	subs.w	r0, r8, r4
   15a72:	eb69 0105 	sbc.w	r1, r9, r5
   15a76:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   15a7a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15a7c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   15a80:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   15a84:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   15a88:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15a8a:	429a      	cmp	r2, r3
   15a8c:	d006      	beq.n	15a9c <z_add_timeout+0xe4>
		if (to == first()) {
   15a8e:	4592      	cmp	sl, r2
   15a90:	d104      	bne.n	15a9c <z_add_timeout+0xe4>
			z_clock_set_timeout(next_timeout(), false);
   15a92:	f7ff ff3f 	bl	15914 <next_timeout>
   15a96:	2100      	movs	r1, #0
   15a98:	f7fc fff4 	bl	12a84 <z_clock_set_timeout>
	__asm__ volatile(
   15a9c:	f386 8811 	msr	BASEPRI, r6
   15aa0:	f3bf 8f6f 	isb	sy
}
   15aa4:	b003      	add	sp, #12
   15aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   15aaa:	ebb4 0008 	subs.w	r0, r4, r8
   15aae:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   15ab2:	42ba      	cmp	r2, r7
   15ab4:	e9ca 0104 	strd	r0, r1, [sl, #16]
   15ab8:	d0c6      	beq.n	15a48 <z_add_timeout+0x90>
   15aba:	6812      	ldr	r2, [r2, #0]
   15abc:	e7c3      	b.n	15a46 <z_add_timeout+0x8e>
   15abe:	bf00      	nop
   15ac0:	20010530 	.word	0x20010530
   15ac4:	200100d4 	.word	0x200100d4

00015ac8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   15ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15acc:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   15ace:	f7ff fae7 	bl	150a0 <z_time_slice>
	__asm__ volatile(
   15ad2:	f04f 0320 	mov.w	r3, #32
   15ad6:	f3ef 8411 	mrs	r4, BASEPRI
   15ada:	f383 8811 	msr	BASEPRI, r3
   15ade:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15ae2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 15b94 <z_clock_announce+0xcc>
   15ae6:	4d2a      	ldr	r5, [pc, #168]	; (15b90 <z_clock_announce+0xc8>)
   15ae8:	4651      	mov	r1, sl
	return list->head == list;
   15aea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 15b98 <z_clock_announce+0xd0>
   15aee:	602e      	str	r6, [r5, #0]
   15af0:	f8d5 c000 	ldr.w	ip, [r5]
   15af4:	f8db 0000 	ldr.w	r0, [fp]
   15af8:	4662      	mov	r2, ip
   15afa:	e9da 8900 	ldrd	r8, r9, [sl]
   15afe:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b00:	4558      	cmp	r0, fp
   15b02:	e9cd 2300 	strd	r2, r3, [sp]
   15b06:	d00d      	beq.n	15b24 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   15b08:	b160      	cbz	r0, 15b24 <z_clock_announce+0x5c>
   15b0a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   15b0e:	45b4      	cmp	ip, r6
   15b10:	41bb      	sbcs	r3, r7
   15b12:	da1d      	bge.n	15b50 <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   15b14:	9b00      	ldr	r3, [sp, #0]
   15b16:	ebb6 0c03 	subs.w	ip, r6, r3
   15b1a:	9b01      	ldr	r3, [sp, #4]
   15b1c:	eb67 0603 	sbc.w	r6, r7, r3
   15b20:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   15b24:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   15b26:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   15b28:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   15b2a:	eb13 0208 	adds.w	r2, r3, r8
   15b2e:	9b01      	ldr	r3, [sp, #4]
   15b30:	eb43 0309 	adc.w	r3, r3, r9
   15b34:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   15b38:	f7ff feec 	bl	15914 <next_timeout>
   15b3c:	4631      	mov	r1, r6
   15b3e:	f7fc ffa1 	bl	12a84 <z_clock_set_timeout>
	__asm__ volatile(
   15b42:	f384 8811 	msr	BASEPRI, r4
   15b46:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15b4a:	b003      	add	sp, #12
   15b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   15b50:	2200      	movs	r2, #0
   15b52:	2300      	movs	r3, #0
		curr_tick += dt;
   15b54:	eb18 0806 	adds.w	r8, r8, r6
   15b58:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   15b5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   15b60:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   15b64:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   15b68:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   15b6a:	f7ff feb9 	bl	158e0 <remove_timeout>
   15b6e:	f384 8811 	msr	BASEPRI, r4
   15b72:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15b76:	6883      	ldr	r3, [r0, #8]
   15b78:	4798      	blx	r3
	__asm__ volatile(
   15b7a:	f04f 0320 	mov.w	r3, #32
   15b7e:	f3ef 8411 	mrs	r4, BASEPRI
   15b82:	f383 8811 	msr	BASEPRI, r3
   15b86:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   15b8a:	4902      	ldr	r1, [pc, #8]	; (15b94 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15b8c:	e7b0      	b.n	15af0 <z_clock_announce+0x28>
   15b8e:	bf00      	nop
   15b90:	20010c00 	.word	0x20010c00
   15b94:	20010530 	.word	0x20010530
   15b98:	200100d4 	.word	0x200100d4

00015b9c <z_tick_get>:

int64_t z_tick_get(void)
{
   15b9c:	b510      	push	{r4, lr}
   15b9e:	f04f 0320 	mov.w	r3, #32
   15ba2:	f3ef 8411 	mrs	r4, BASEPRI
   15ba6:	f383 8811 	msr	BASEPRI, r3
   15baa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   15bae:	f7fc ffd1 	bl	12b54 <z_clock_elapsed>
   15bb2:	4b06      	ldr	r3, [pc, #24]	; (15bcc <z_tick_get+0x30>)
   15bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bb8:	1812      	adds	r2, r2, r0
   15bba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   15bbe:	f384 8811 	msr	BASEPRI, r4
   15bc2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15bc6:	4610      	mov	r0, r2
   15bc8:	4619      	mov	r1, r3
   15bca:	bd10      	pop	{r4, pc}
   15bcc:	20010530 	.word	0x20010530

00015bd0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   15bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15bd2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   15bd6:	1c56      	adds	r6, r2, #1
   15bd8:	f143 0700 	adc.w	r7, r3, #0
   15bdc:	2f00      	cmp	r7, #0
   15bde:	bf08      	it	eq
   15be0:	2e02      	cmpeq	r6, #2
{
   15be2:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15be4:	d302      	bcc.n	15bec <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15be6:	490c      	ldr	r1, [pc, #48]	; (15c18 <z_timer_expiration_handler+0x48>)
   15be8:	f7ff fee6 	bl	159b8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   15bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15bee:	3301      	adds	r3, #1
   15bf0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   15bf2:	6a23      	ldr	r3, [r4, #32]
   15bf4:	b10b      	cbz	r3, 15bfa <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   15bf6:	4620      	mov	r0, r4
   15bf8:	4798      	blx	r3
	return list->head == list;
   15bfa:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15bfe:	42a5      	cmp	r5, r4
   15c00:	d009      	beq.n	15c16 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   15c02:	b145      	cbz	r5, 15c16 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   15c04:	4628      	mov	r0, r5
   15c06:	f005 fe07 	bl	1b818 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   15c0a:	4628      	mov	r0, r5
   15c0c:	f005 fe56 	bl	1b8bc <z_ready_thread>
   15c10:	2300      	movs	r3, #0
   15c12:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4

	arch_thread_return_value_set(thread, 0);
}
   15c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15c18:	00015bd1 	.word	0x00015bd1

00015c1c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   15c1c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   15c20:	4619      	mov	r1, r3
   15c22:	4606      	mov	r6, r0
   15c24:	4610      	mov	r0, r2
   15c26:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   15c2a:	1c4c      	adds	r4, r1, #1
   15c2c:	bf08      	it	eq
   15c2e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   15c32:	4680      	mov	r8, r0
   15c34:	4689      	mov	r9, r1
   15c36:	d047      	beq.n	15cc8 <z_impl_k_timer_start+0xac>
   15c38:	4614      	mov	r4, r2
   15c3a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   15c3c:	ea54 0305 	orrs.w	r3, r4, r5
   15c40:	d016      	beq.n	15c70 <z_impl_k_timer_start+0x54>
   15c42:	f06f 0301 	mvn.w	r3, #1
   15c46:	ebb3 0a02 	subs.w	sl, r3, r2
   15c4a:	f04f 33ff 	mov.w	r3, #4294967295
   15c4e:	eb63 0b05 	sbc.w	fp, r3, r5
   15c52:	f1ba 0f00 	cmp.w	sl, #0
   15c56:	f17b 0300 	sbcs.w	r3, fp, #0
   15c5a:	da09      	bge.n	15c70 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   15c5c:	f112 34ff 	adds.w	r4, r2, #4294967295
   15c60:	f145 35ff 	adc.w	r5, r5, #4294967295
   15c64:	2c01      	cmp	r4, #1
   15c66:	f175 0300 	sbcs.w	r3, r5, #0
   15c6a:	bfbc      	itt	lt
   15c6c:	2401      	movlt	r4, #1
   15c6e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   15c70:	f06f 0301 	mvn.w	r3, #1
   15c74:	1a1b      	subs	r3, r3, r0
   15c76:	9300      	str	r3, [sp, #0]
   15c78:	f04f 33ff 	mov.w	r3, #4294967295
   15c7c:	eb63 0301 	sbc.w	r3, r3, r1
   15c80:	9301      	str	r3, [sp, #4]
   15c82:	e9dd 2300 	ldrd	r2, r3, [sp]
   15c86:	2a00      	cmp	r2, #0
   15c88:	f173 0300 	sbcs.w	r3, r3, #0
   15c8c:	da0c      	bge.n	15ca8 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   15c8e:	f110 38ff 	adds.w	r8, r0, #4294967295
   15c92:	f141 39ff 	adc.w	r9, r1, #4294967295
   15c96:	f1b8 0f00 	cmp.w	r8, #0
   15c9a:	f179 0300 	sbcs.w	r3, r9, #0
   15c9e:	bfbc      	itt	lt
   15ca0:	f04f 0800 	movlt.w	r8, #0
   15ca4:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   15ca8:	4630      	mov	r0, r6
   15caa:	f005 fea1 	bl	1b9f0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   15cae:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15cb0:	4642      	mov	r2, r8
	timer->status = 0U;
   15cb2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15cb4:	4630      	mov	r0, r6
   15cb6:	464b      	mov	r3, r9
   15cb8:	4905      	ldr	r1, [pc, #20]	; (15cd0 <z_impl_k_timer_start+0xb4>)
	timer->period = period;
   15cba:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   15cbe:	b002      	add	sp, #8
   15cc0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15cc4:	f7ff be78 	b.w	159b8 <z_add_timeout>
}
   15cc8:	b002      	add	sp, #8
   15cca:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   15cce:	bf00      	nop
   15cd0:	00015bd1 	.word	0x00015bd1

00015cd4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   15cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   15cd8:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   15cda:	4b2a      	ldr	r3, [pc, #168]	; (15d84 <z_impl_k_poll+0xb0>)
{
   15cdc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   15cde:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   15ce0:	2301      	movs	r3, #1
   15ce2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   15ce6:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   15cea:	ea52 0307 	orrs.w	r3, r2, r7
   15cee:	bf0c      	ite	eq
   15cf0:	2301      	moveq	r3, #1
   15cf2:	2300      	movne	r3, #0
   15cf4:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   15cf8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   15cfa:	f005 fff6 	bl	1bcea <register_events>
   15cfe:	4681      	mov	r9, r0
	__asm__ volatile(
   15d00:	f04f 0320 	mov.w	r3, #32
   15d04:	f3ef 8a11 	mrs	sl, BASEPRI
   15d08:	f383 8811 	msr	BASEPRI, r3
   15d0c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   15d10:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   15d14:	b964      	cbnz	r4, 15d30 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   15d16:	4601      	mov	r1, r0
   15d18:	4652      	mov	r2, sl
   15d1a:	4640      	mov	r0, r8
   15d1c:	f005 ff15 	bl	1bb4a <clear_event_registrations>
	__asm__ volatile(
   15d20:	f38a 8811 	msr	BASEPRI, sl
   15d24:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   15d28:	4620      	mov	r0, r4
   15d2a:	b004      	add	sp, #16
   15d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   15d30:	2300      	movs	r3, #0
   15d32:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15d36:	ea56 0307 	orrs.w	r3, r6, r7
   15d3a:	d106      	bne.n	15d4a <z_impl_k_poll+0x76>
   15d3c:	f38a 8811 	msr	BASEPRI, sl
   15d40:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   15d44:	f06f 040a 	mvn.w	r4, #10
   15d48:	e7ee      	b.n	15d28 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   15d4a:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15d4c:	4651      	mov	r1, sl
   15d4e:	e9cd 6700 	strd	r6, r7, [sp]
   15d52:	480d      	ldr	r0, [pc, #52]	; (15d88 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   15d54:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   15d58:	f7ff fade 	bl	15318 <z_pend_curr>
   15d5c:	4604      	mov	r4, r0
	__asm__ volatile(
   15d5e:	f04f 0320 	mov.w	r3, #32
   15d62:	f3ef 8511 	mrs	r5, BASEPRI
   15d66:	f383 8811 	msr	BASEPRI, r3
   15d6a:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   15d6e:	462a      	mov	r2, r5
   15d70:	4649      	mov	r1, r9
   15d72:	4640      	mov	r0, r8
   15d74:	f005 fee9 	bl	1bb4a <clear_event_registrations>
	__asm__ volatile(
   15d78:	f385 8811 	msr	BASEPRI, r5
   15d7c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   15d80:	e7d2      	b.n	15d28 <z_impl_k_poll+0x54>
   15d82:	bf00      	nop
   15d84:	20010bbc 	.word	0x20010bbc
   15d88:	2001ecc0 	.word	0x2001ecc0

00015d8c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   15d8c:	b538      	push	{r3, r4, r5, lr}
   15d8e:	4603      	mov	r3, r0
	__asm__ volatile(
   15d90:	f04f 0220 	mov.w	r2, #32
   15d94:	f3ef 8511 	mrs	r5, BASEPRI
   15d98:	f382 8811 	msr	BASEPRI, r2
   15d9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   15da0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   15da2:	2101      	movs	r1, #1
   15da4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   15da6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   15da8:	4283      	cmp	r3, r0
   15daa:	d106      	bne.n	15dba <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   15dac:	f385 8811 	msr	BASEPRI, r5
   15db0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   15db4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   15db6:	4620      	mov	r0, r4
   15db8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   15dba:	e9d0 3200 	ldrd	r3, r2, [r0]
   15dbe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   15dc0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15dc2:	2300      	movs	r3, #0
	node->prev = NULL;
   15dc4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15dc8:	f005 fefe 	bl	1bbc8 <signal_poll_event>
	z_reschedule(&lock, key);
   15dcc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   15dce:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   15dd0:	4801      	ldr	r0, [pc, #4]	; (15dd8 <z_impl_k_poll_signal_raise+0x4c>)
   15dd2:	f7ff f855 	bl	14e80 <z_reschedule>
	return rc;
   15dd6:	e7ee      	b.n	15db6 <z_impl_k_poll_signal_raise+0x2a>
   15dd8:	2001ecc0 	.word	0x2001ecc0

00015ddc <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   15ddc:	b510      	push	{r4, lr}
   15dde:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   15de0:	f005 fdec 	bl	1b9bc <k_is_in_isr>
   15de4:	b950      	cbnz	r0, 15dfc <z_thread_malloc+0x20>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   15de6:	4b07      	ldr	r3, [pc, #28]	; (15e04 <z_thread_malloc+0x28>)
   15de8:	689b      	ldr	r3, [r3, #8]
   15dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	}

	if (pool) {
   15dee:	b13b      	cbz	r3, 15e00 <z_thread_malloc+0x24>
		ret = k_mem_pool_malloc(pool, size);
   15df0:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   15df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   15df6:	4618      	mov	r0, r3
   15df8:	f005 bfff 	b.w	1bdfa <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   15dfc:	4b02      	ldr	r3, [pc, #8]	; (15e08 <z_thread_malloc+0x2c>)
   15dfe:	e7f7      	b.n	15df0 <z_thread_malloc+0x14>
}
   15e00:	bd10      	pop	{r4, pc}
   15e02:	bf00      	nop
   15e04:	20010bbc 	.word	0x20010bbc
   15e08:	200100dc 	.word	0x200100dc

00015e0c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   15e0c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15e0e:	4c06      	ldr	r4, [pc, #24]	; (15e28 <statics_init+0x1c>)
   15e10:	4d06      	ldr	r5, [pc, #24]	; (15e2c <statics_init+0x20>)
   15e12:	42ac      	cmp	r4, r5
   15e14:	d301      	bcc.n	15e1a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   15e16:	2000      	movs	r0, #0
   15e18:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15e1a:	4620      	mov	r0, r4
   15e1c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15e20:	f006 f803 	bl	1be2a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15e24:	3414      	adds	r4, #20
   15e26:	e7f4      	b.n	15e12 <statics_init+0x6>
   15e28:	200101a0 	.word	0x200101a0
   15e2c:	200101b4 	.word	0x200101b4

00015e30 <bytes_zero>:
static inline void bytes_zero(unsigned char *a, size_t num)
{
    size_t i;

    for (i = 0; i < num; i++)
        a[i] = 0;
   15e30:	2300      	movs	r3, #0
   15e32:	4401      	add	r1, r0
   15e34:	f800 3b01 	strb.w	r3, [r0], #1
    for (i = 0; i < num; i++)
   15e38:	4288      	cmp	r0, r1
   15e3a:	d1fb      	bne.n	15e34 <bytes_zero+0x4>
}
   15e3c:	4770      	bx	lr

00015e3e <vec_select>:
void vec_select_192(void *ret, const void *a, const void *b, bool_t sel_a);
void vec_select_288(void *ret, const void *a, const void *b, bool_t sel_a);
#endif
static inline void vec_select(void *ret, const void *a, const void *b,
                              size_t num, bool_t sel_a)
{
   15e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
        limb_t xorm, mask = (limb_t)0 - sel_a;
        size_t i;

        num /= sizeof(limb_t);

        for (i = 0; i < num; i++) {
   15e40:	2500      	movs	r5, #0
        limb_t xorm, mask = (limb_t)0 - sel_a;
   15e42:	9c05      	ldr	r4, [sp, #20]
        num /= sizeof(limb_t);
   15e44:	089b      	lsrs	r3, r3, #2
        limb_t xorm, mask = (limb_t)0 - sel_a;
   15e46:	4266      	negs	r6, r4
            xorm = (ap[i] ^ (bi = bp[i])) & mask;
   15e48:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
   15e4c:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
   15e50:	407c      	eors	r4, r7
   15e52:	4034      	ands	r4, r6
            rp[i] = bi ^ xorm;
   15e54:	407c      	eors	r4, r7
   15e56:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
        for (i = 0; i < num; i++) {
   15e5a:	3501      	adds	r5, #1
   15e5c:	42ab      	cmp	r3, r5
   15e5e:	d1f3      	bne.n	15e48 <vec_select+0xa>
        }
    }
}
   15e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015e62 <is_zero>:

static inline bool_t is_zero(limb_t l)
{   return (~l & (l - 1)) >> (LIMB_T_BITS - 1);   }
   15e62:	1e43      	subs	r3, r0, #1
   15e64:	ea23 0000 	bic.w	r0, r3, r0
   15e68:	0fc0      	lsrs	r0, r0, #31
   15e6a:	4770      	bx	lr

00015e6c <vec_is_zero>:
    limb_t acc;
    size_t i;

    num /= sizeof(limb_t);

    for (acc = 0, i = 0; i < num; i++)
   15e6c:	f021 0103 	bic.w	r1, r1, #3
   15e70:	4603      	mov	r3, r0
   15e72:	4401      	add	r1, r0
   15e74:	2000      	movs	r0, #0
   15e76:	428b      	cmp	r3, r1
   15e78:	d101      	bne.n	15e7e <vec_is_zero+0x12>
        acc |= ap[i];

    return is_zero(acc);
   15e7a:	f7ff bff2 	b.w	15e62 <is_zero>
        acc |= ap[i];
   15e7e:	f853 2b04 	ldr.w	r2, [r3], #4
   15e82:	4310      	orrs	r0, r2
    for (acc = 0, i = 0; i < num; i++)
   15e84:	e7f7      	b.n	15e76 <vec_is_zero+0xa>

00015e86 <vec_is_equal>:
    limb_t acc;
    size_t i;

    num /= sizeof(limb_t);

    for (acc = 0, i = 0; i < num; i++)
   15e86:	2300      	movs	r3, #0
{
   15e88:	b470      	push	{r4, r5, r6}
   15e8a:	4605      	mov	r5, r0
    for (acc = 0, i = 0; i < num; i++)
   15e8c:	4618      	mov	r0, r3
    num /= sizeof(limb_t);
   15e8e:	0892      	lsrs	r2, r2, #2
        acc |= ap[i] ^ bp[i];
   15e90:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   15e94:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    for (acc = 0, i = 0; i < num; i++)
   15e98:	3301      	adds	r3, #1
        acc |= ap[i] ^ bp[i];
   15e9a:	4074      	eors	r4, r6
    for (acc = 0, i = 0; i < num; i++)
   15e9c:	429a      	cmp	r2, r3
        acc |= ap[i] ^ bp[i];
   15e9e:	ea40 0004 	orr.w	r0, r0, r4
    for (acc = 0, i = 0; i < num; i++)
   15ea2:	d1f5      	bne.n	15e90 <vec_is_equal+0xa>

    return is_zero(acc);
}
   15ea4:	bc70      	pop	{r4, r5, r6}
    return is_zero(acc);
   15ea6:	f7ff bfdc 	b.w	15e62 <is_zero>

00015eaa <vec_copy>:
    const limb_t *ap = (const limb_t *)a;
    size_t i;

    num /= sizeof(limb_t);

    for (i = 0; i < num; i++)
   15eaa:	2300      	movs	r3, #0
{
   15eac:	b510      	push	{r4, lr}
    num /= sizeof(limb_t);
   15eae:	0892      	lsrs	r2, r2, #2
    for (i = 0; i < num; i++)
   15eb0:	4293      	cmp	r3, r2
   15eb2:	d100      	bne.n	15eb6 <vec_copy+0xc>
        rp[i] = ap[i];
}
   15eb4:	bd10      	pop	{r4, pc}
        rp[i] = ap[i];
   15eb6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   15eba:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (i = 0; i < num; i++)
   15ebe:	3301      	adds	r3, #1
   15ec0:	e7f6      	b.n	15eb0 <vec_copy+0x6>

00015ec2 <vec_zero>:
    size_t i;

    num /= sizeof(limb_t);

    for (i = 0; i < num; i++)
        rp[i] = 0;
   15ec2:	2300      	movs	r3, #0
   15ec4:	f021 0103 	bic.w	r1, r1, #3
   15ec8:	4401      	add	r1, r0
    for (i = 0; i < num; i++)
   15eca:	4288      	cmp	r0, r1
   15ecc:	d100      	bne.n	15ed0 <vec_zero+0xe>
/*
#if defined(__GNUC__) && !defined(__NVCC__)
    asm volatile("" : : "r"(ret) : "memory");
#endif
*/
}
   15ece:	4770      	bx	lr
        rp[i] = 0;
   15ed0:	f840 3b04 	str.w	r3, [r0], #4
    for (i = 0; i < num; i++)
   15ed4:	e7f9      	b.n	15eca <vec_zero+0x8>

00015ed6 <limbs_from_be_bytes>:

static inline void limbs_from_be_bytes(limb_t *restrict ret,
                                       const unsigned char *in, size_t n)
{
    limb_t limb = 0;
   15ed6:	2300      	movs	r3, #0
{
   15ed8:	b510      	push	{r4, lr}

    while(n--) {
   15eda:	3a01      	subs	r2, #1
   15edc:	d200      	bcs.n	15ee0 <limbs_from_be_bytes+0xa>
         * mispredicted branch. Besides, some compilers unroll the
         * loop and remove redundant stores to 'restict'-ed storage...
         */
        ret[n / sizeof(limb_t)] = limb;
    }
}
   15ede:	bd10      	pop	{r4, pc}
        limb |= *in++;
   15ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
   15ee4:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
        ret[n / sizeof(limb_t)] = limb;
   15ee8:	f022 0403 	bic.w	r4, r2, #3
   15eec:	5103      	str	r3, [r0, r4]
   15eee:	e7f4      	b.n	15eda <limbs_from_be_bytes+0x4>

00015ef0 <be_bytes_from_limbs>:

static inline void be_bytes_from_limbs(unsigned char *out, const limb_t *in,
                                       size_t n)
{
   15ef0:	b530      	push	{r4, r5, lr}
    limb_t limb;

    while(n--) {
   15ef2:	3a01      	subs	r2, #1
   15ef4:	d200      	bcs.n	15ef8 <be_bytes_from_limbs+0x8>
        limb = in[n / sizeof(limb_t)];
        *out++ = (unsigned char)(limb >> (8 * (n % sizeof(limb_t))));
    }
}
   15ef6:	bd30      	pop	{r4, r5, pc}
        *out++ = (unsigned char)(limb >> (8 * (n % sizeof(limb_t))));
   15ef8:	f002 0303 	and.w	r3, r2, #3
        limb = in[n / sizeof(limb_t)];
   15efc:	f022 0503 	bic.w	r5, r2, #3
        *out++ = (unsigned char)(limb >> (8 * (n % sizeof(limb_t))));
   15f00:	00dc      	lsls	r4, r3, #3
   15f02:	594b      	ldr	r3, [r1, r5]
   15f04:	40e3      	lsrs	r3, r4
   15f06:	f800 3b01 	strb.w	r3, [r0], #1
   15f0a:	e7f2      	b.n	15ef2 <be_bytes_from_limbs+0x2>

00015f0c <limbs_from_le_bytes>:

static inline void limbs_from_le_bytes(limb_t *restrict ret,
                                       const unsigned char *in, size_t n)
{
    limb_t limb = 0;
   15f0c:	2300      	movs	r3, #0
{
   15f0e:	b510      	push	{r4, lr}

    while(n--) {
   15f10:	3a01      	subs	r2, #1
   15f12:	d200      	bcs.n	15f16 <limbs_from_le_bytes+0xa>
         * mispredicted branch. Besides, some compilers unroll the
         * loop and remove redundant stores to 'restict'-ed storage...
         */
        ret[n / sizeof(limb_t)] = limb;
    }
}
   15f14:	bd10      	pop	{r4, pc}
        limb |= in[n];
   15f16:	5c8c      	ldrb	r4, [r1, r2]
   15f18:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
        ret[n / sizeof(limb_t)] = limb;
   15f1c:	f022 0403 	bic.w	r4, r2, #3
   15f20:	5103      	str	r3, [r0, r4]
   15f22:	e7f5      	b.n	15f10 <limbs_from_le_bytes+0x4>

00015f24 <le_bytes_from_limbs>:
        char little;
    } is_endian = { 1 };
    limb_t limb;
    size_t i, j, r;

    if ((uptr_t)out == (uptr_t)in && is_endian.little)
   15f24:	4288      	cmp	r0, r1
{
   15f26:	b510      	push	{r4, lr}
    if ((uptr_t)out == (uptr_t)in && is_endian.little)
   15f28:	d007      	beq.n	15f3a <le_bytes_from_limbs+0x16>
        return;

    r = n % sizeof(limb_t);
    n /= sizeof(limb_t);

    for(i = 0; i < n; i++) {
   15f2a:	f022 0203 	bic.w	r2, r2, #3
   15f2e:	3004      	adds	r0, #4
   15f30:	440a      	add	r2, r1
   15f32:	428a      	cmp	r2, r1
   15f34:	f1a0 0304 	sub.w	r3, r0, #4
   15f38:	d100      	bne.n	15f3c <le_bytes_from_limbs+0x18>
    }
    if (r) {
        for (limb = in[i], j = 0; j < r; j++, limb >>= 8)
            *out++ = (unsigned char)limb;
    }
}
   15f3a:	bd10      	pop	{r4, pc}
        for (limb = in[i], j = 0; j < sizeof(limb_t); j++, limb >>= 8)
   15f3c:	f851 4b04 	ldr.w	r4, [r1], #4
            *out++ = (unsigned char)limb;
   15f40:	f803 4b01 	strb.w	r4, [r3], #1
        for (limb = in[i], j = 0; j < sizeof(limb_t); j++, limb >>= 8)
   15f44:	4283      	cmp	r3, r0
   15f46:	ea4f 2414 	mov.w	r4, r4, lsr #8
   15f4a:	d1f9      	bne.n	15f40 <le_bytes_from_limbs+0x1c>
    for(i = 0; i < n; i++) {
   15f4c:	3004      	adds	r0, #4
   15f4e:	e7f0      	b.n	15f32 <le_bytes_from_limbs+0xe>

00015f50 <get_wval>:
#include "point.h"

/* Works up to 9 bits */
static limb_t get_wval(const byte *d, size_t off, size_t bits)
{
    size_t top = off + bits - 1;
   15f50:	3a01      	subs	r2, #1
   15f52:	440a      	add	r2, r1
    limb_t ret;

    ret = ((limb_t)d[top / 8] << 8) | d[off / 8];
   15f54:	08d2      	lsrs	r2, r2, #3
   15f56:	5c83      	ldrb	r3, [r0, r2]
   15f58:	08ca      	lsrs	r2, r1, #3
   15f5a:	5c80      	ldrb	r0, [r0, r2]

    return ret >> (off%8);
   15f5c:	f001 0107 	and.w	r1, r1, #7
    ret = ((limb_t)d[top / 8] << 8) | d[off / 8];
   15f60:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
   15f64:	40c8      	lsrs	r0, r1
   15f66:	4770      	bx	lr

00015f68 <booth_encode>:
 * calculated, which allows to halve the size of pre-computed table,
 * is attributed to A. D. Booth, hence the name of the subroutines...
 */
static limb_t booth_encode(limb_t wval, size_t sz)
{
    limb_t mask = 0 - (wval >> sz);     /* "sign" bit -> mask */
   15f68:	fa20 f101 	lsr.w	r1, r0, r1

    wval = (wval + 1) >> 1;
   15f6c:	3001      	adds	r0, #1
   15f6e:	0843      	lsrs	r3, r0, #1
    wval = (wval & ~mask) | ((0-wval) & mask);
   15f70:	1e4a      	subs	r2, r1, #1
   15f72:	425b      	negs	r3, r3
    limb_t mask = 0 - (wval >> sz);     /* "sign" bit -> mask */
   15f74:	4249      	negs	r1, r1
    wval = (wval & ~mask) | ((0-wval) & mask);
   15f76:	ea02 0050 	and.w	r0, r2, r0, lsr #1
   15f7a:	4019      	ands	r1, r3

    /* &0x1f, but <=0x10, is index in table, rest is extended "sign" bit */
    return wval;
}
   15f7c:	4308      	orrs	r0, r1
   15f7e:	4770      	bx	lr

00015f80 <sub_mod_n>:
{
   15f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (borrow=0, i=0; i<n; i++) {
   15f82:	2400      	movs	r4, #0
{
   15f84:	4694      	mov	ip, r2
   15f86:	461e      	mov	r6, r3
    for (borrow=0, i=0; i<n; i++) {
   15f88:	4625      	mov	r5, r4
        limbx = a[i] - (b[i] + (llimb_t)borrow);
   15f8a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
   15f8e:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
   15f92:	1b52      	subs	r2, r2, r5
   15f94:	eb62 0302 	sbc.w	r3, r2, r2
   15f98:	1bd2      	subs	r2, r2, r7
   15f9a:	f163 0300 	sbc.w	r3, r3, #0
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   15f9e:	f003 0501 	and.w	r5, r3, #1
    for (borrow=0, i=0; i<n; i++) {
   15fa2:	9b05      	ldr	r3, [sp, #20]
   15fa4:	4627      	mov	r7, r4
        ret[i] = (limb_t)limbx;
   15fa6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
    for (borrow=0, i=0; i<n; i++) {
   15faa:	3401      	adds	r4, #1
   15fac:	42a3      	cmp	r3, r4
   15fae:	d1ec      	bne.n	15f8a <sub_mod_n+0xa>
    for (carry=0, i=0; i<n; i++) {
   15fb0:	2400      	movs	r4, #0
   15fb2:	4622      	mov	r2, r4
    mask = 0 - borrow;
   15fb4:	426d      	negs	r5, r5
    for (carry=0, i=0; i<n; i++) {
   15fb6:	3804      	subs	r0, #4
        limbx = ret[i] + ((p[i] & mask) + (llimb_t)carry);
   15fb8:	2300      	movs	r3, #0
   15fba:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   15fbe:	f850 cf04 	ldr.w	ip, [r0, #4]!
   15fc2:	4029      	ands	r1, r5
   15fc4:	eb12 020c 	adds.w	r2, r2, ip
   15fc8:	f143 0300 	adc.w	r3, r3, #0
   15fcc:	1852      	adds	r2, r2, r1
   15fce:	f143 0300 	adc.w	r3, r3, #0
    for (carry=0, i=0; i<n; i++) {
   15fd2:	42a7      	cmp	r7, r4
        ret[i] = (limb_t)limbx;
   15fd4:	6002      	str	r2, [r0, #0]
    for (carry=0, i=0; i<n; i++) {
   15fd6:	f104 0401 	add.w	r4, r4, #1
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   15fda:	461a      	mov	r2, r3
    for (carry=0, i=0; i<n; i++) {
   15fdc:	d1ec      	bne.n	15fb8 <sub_mod_n+0x38>
}
   15fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015fe0 <rshift_mod_n>:
{
   15fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   15fe8:	f108 39ff 	add.w	r9, r8, #4294967295
   15fec:	eb00 0a88 	add.w	sl, r0, r8, lsl #2
   15ff0:	eb00 0989 	add.w	r9, r0, r9, lsl #2
    while (count--) {
   15ff4:	3a01      	subs	r2, #1
   15ff6:	d201      	bcs.n	15ffc <rshift_mod_n+0x1c>
}
   15ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mask = 0 - (a[0] & 1);
   15ffc:	680c      	ldr	r4, [r1, #0]
   15ffe:	f344 0e00 	sbfx	lr, r4, #0, #1
        for (carry=0, i=0; i<n; i++) {
   16002:	2400      	movs	r4, #0
   16004:	4626      	mov	r6, r4
            limbx = a[i] + ((p[i]&mask) + (llimb_t)carry);
   16006:	2700      	movs	r7, #0
   16008:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1600c:	ea0e 0c05 	and.w	ip, lr, r5
   16010:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
   16014:	1976      	adds	r6, r6, r5
   16016:	f147 0700 	adc.w	r7, r7, #0
   1601a:	eb16 060c 	adds.w	r6, r6, ip
            ret[i] = (limb_t)limbx;
   1601e:	f840 6024 	str.w	r6, [r0, r4, lsl #2]
        for (carry=0, i=0; i<n; i++) {
   16022:	f104 0401 	add.w	r4, r4, #1
            limbx = a[i] + ((p[i]&mask) + (llimb_t)carry);
   16026:	f147 0700 	adc.w	r7, r7, #0
        for (carry=0, i=0; i<n; i++) {
   1602a:	45a0      	cmp	r8, r4
            carry = (limb_t)(limbx >> LIMB_T_BITS);
   1602c:	463e      	mov	r6, r7
        for (carry=0, i=0; i<n; i++) {
   1602e:	d1ea      	bne.n	16006 <rshift_mod_n+0x26>
        for (next=ret[0], i=0; i<n-1; i++) {
   16030:	4601      	mov	r1, r0
   16032:	f851 4b04 	ldr.w	r4, [r1], #4
            limb = next >> 1;
   16036:	0865      	lsrs	r5, r4, #1
            next = ret[i+1];
   16038:	f851 4b04 	ldr.w	r4, [r1], #4
            ret[i] = limb | next << (LIMB_T_BITS-1);
   1603c:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
        for (next=ret[0], i=0; i<n-1; i++) {
   16040:	458a      	cmp	sl, r1
            ret[i] = limb | next << (LIMB_T_BITS-1);
   16042:	f841 5c08 	str.w	r5, [r1, #-8]
        for (next=ret[0], i=0; i<n-1; i++) {
   16046:	d1f6      	bne.n	16036 <rshift_mod_n+0x56>
        ret[i] = next >> 1 | carry << (LIMB_T_BITS-1);
   16048:	07f6      	lsls	r6, r6, #31
   1604a:	ea46 0654 	orr.w	r6, r6, r4, lsr #1
   1604e:	4601      	mov	r1, r0
   16050:	f8c9 6000 	str.w	r6, [r9]
        a = ret;
   16054:	e7ce      	b.n	15ff4 <rshift_mod_n+0x14>

00016056 <inner_loop_n>:
{
   16056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b_lo = b_[0], b_hi = b_[1];
   1605a:	e9d2 b200 	ldrd	fp, r2, [r2]
{
   1605e:	b087      	sub	sp, #28
    limb_t f0 = 1, g0 = 0, f1 = 0, g1 = 1;
   16060:	f04f 0e01 	mov.w	lr, #1
    b_lo = b_[0], b_hi = b_[1];
   16064:	9204      	str	r2, [sp, #16]
    limb_t f0 = 1, g0 = 0, f1 = 0, g1 = 1;
   16066:	2200      	movs	r2, #0
   16068:	4675      	mov	r5, lr
   1606a:	4614      	mov	r4, r2
{
   1606c:	469a      	mov	sl, r3
    a_lo = a_[0], a_hi = a_[1];
   1606e:	e9d1 3100 	ldrd	r3, r1, [r1]
    while(n--) {
   16072:	f1ba 0a01 	subs.w	sl, sl, #1
   16076:	d206      	bcs.n	16086 <inner_loop_n+0x30>
    fg->f0 = f0, fg->g0 = g0, fg->f1 = f1, fg->g1= g1;
   16078:	e9c0 5400 	strd	r5, r4, [r0]
   1607c:	e9c0 2e02 	strd	r2, lr, [r0, #8]
}
   16080:	b007      	add	sp, #28
   16082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        odd = 0 - (a_lo&1);
   16086:	f343 0c00 	sbfx	ip, r3, #0, #1
        limbx = a_lo - (llimb_t)(b_lo & odd);
   1608a:	ea0b 060c 	and.w	r6, fp, ip
        a_lo = (limb_t)limbx;
   1608e:	1b9f      	subs	r7, r3, r6
        limbx = a_lo - (llimb_t)(b_lo & odd);
   16090:	1b9e      	subs	r6, r3, r6
        a_lo = (limb_t)limbx;
   16092:	9705      	str	r7, [sp, #20]
        limbx = a_lo - (llimb_t)(b_lo & odd);
   16094:	eb63 0703 	sbc.w	r7, r3, r3
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16098:	f007 0601 	and.w	r6, r7, #1
   1609c:	9600      	str	r6, [sp, #0]
        limbx = a_hi - ((llimb_t)(b_hi & odd) + borrow);
   1609e:	9e04      	ldr	r6, [sp, #16]
        b_lo = ((t_lo ^ b_lo) & borrow) ^ b_lo;
   160a0:	ea83 030b 	eor.w	r3, r3, fp
        limbx = a_hi - ((llimb_t)(b_hi & odd) + borrow);
   160a4:	ea06 060c 	and.w	r6, r6, ip
   160a8:	1b8e      	subs	r6, r1, r6
   160aa:	eb61 0701 	sbc.w	r7, r1, r1
   160ae:	46b9      	mov	r9, r7
   160b0:	9f00      	ldr	r7, [sp, #0]
   160b2:	ebb6 0807 	subs.w	r8, r6, r7
   160b6:	f169 0900 	sbc.w	r9, r9, #0
   160ba:	e9cd 8900 	strd	r8, r9, [sp]
        a_hi ^= borrow;
   160be:	e9dd 6700 	ldrd	r6, r7, [sp]
   160c2:	407e      	eors	r6, r7
        a_lo ^= borrow;
   160c4:	9f05      	ldr	r7, [sp, #20]
   160c6:	46b8      	mov	r8, r7
   160c8:	9f01      	ldr	r7, [sp, #4]
   160ca:	ea88 0907 	eor.w	r9, r8, r7
        limbx = a_lo + (llimb_t)(borrow & 1);
   160ce:	f007 0701 	and.w	r7, r7, #1
   160d2:	9702      	str	r7, [sp, #8]
   160d4:	2700      	movs	r7, #0
   160d6:	9703      	str	r7, [sp, #12]
   160d8:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
   160dc:	eb17 0709 	adds.w	r7, r7, r9
   160e0:	f148 0800 	adc.w	r8, r8, #0
   160e4:	46c1      	mov	r9, r8
   160e6:	46b8      	mov	r8, r7
        b_lo = ((t_lo ^ b_lo) & borrow) ^ b_lo;
   160e8:	9f01      	ldr	r7, [sp, #4]
        a_hi += (limb_t)(limbx >> LIMB_T_BITS) & 1;
   160ea:	444e      	add	r6, r9
        b_lo = ((t_lo ^ b_lo) & borrow) ^ b_lo;
   160ec:	403b      	ands	r3, r7
   160ee:	ea8b 0b03 	eor.w	fp, fp, r3
        b_hi = ((t_hi ^ b_hi) & borrow) ^ b_hi;
   160f2:	9b04      	ldr	r3, [sp, #16]
   160f4:	4059      	eors	r1, r3
   160f6:	9b04      	ldr	r3, [sp, #16]
   160f8:	4039      	ands	r1, r7
   160fa:	404b      	eors	r3, r1
   160fc:	9304      	str	r3, [sp, #16]
        xorm = (f0 ^ f1) & borrow;
   160fe:	ea85 0302 	eor.w	r3, r5, r2
   16102:	403b      	ands	r3, r7
        f1 ^= xorm;
   16104:	405a      	eors	r2, r3
        f0 ^= xorm;
   16106:	405d      	eors	r5, r3
        xorm = (g0 ^ g1) & borrow;
   16108:	ea84 030e 	eor.w	r3, r4, lr
   1610c:	403b      	ands	r3, r7
        g1 ^= xorm;
   1610e:	ea8e 0e03 	eor.w	lr, lr, r3
        g0 ^= xorm;
   16112:	405c      	eors	r4, r3
        f0 -= f1 & odd;
   16114:	ea0c 0302 	and.w	r3, ip, r2
   16118:	1aed      	subs	r5, r5, r3
        g0 -= g1 & odd;
   1611a:	ea0c 0c0e 	and.w	ip, ip, lr
        a_lo >>= 1; a_lo |= a_hi << (LIMB_T_BITS-1);
   1611e:	07f3      	lsls	r3, r6, #31
        g0 -= g1 & odd;
   16120:	eba4 040c 	sub.w	r4, r4, ip
        f1 <<= 1;
   16124:	0052      	lsls	r2, r2, #1
        g1 <<= 1;
   16126:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
        a_lo >>= 1; a_lo |= a_hi << (LIMB_T_BITS-1);
   1612a:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
        a_hi >>= 1;
   1612e:	0871      	lsrs	r1, r6, #1
   16130:	e79f      	b.n	16072 <inner_loop_n+0x1c>

00016132 <cneg_n>:
{
   16132:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (carry=neg&1, i=0; i<n; i++) {
   16134:	2500      	movs	r5, #0
    llimb_t limbx = 0;
   16136:	2600      	movs	r6, #0
    for (carry=neg&1, i=0; i<n; i++) {
   16138:	f002 0c01 	and.w	ip, r2, #1
   1613c:	429d      	cmp	r5, r3
   1613e:	d101      	bne.n	16144 <cneg_n+0x12>
}
   16140:	17f0      	asrs	r0, r6, #31
   16142:	bdf0      	pop	{r4, r5, r6, r7, pc}
        limbx = (llimb_t)(a[i] ^ neg) + carry;
   16144:	2700      	movs	r7, #0
   16146:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]
   1614a:	4054      	eors	r4, r2
   1614c:	eb1c 0604 	adds.w	r6, ip, r4
   16150:	f147 0700 	adc.w	r7, r7, #0
        ret[i] = (limb_t)limbx;
   16154:	4464      	add	r4, ip
   16156:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   1615a:	46bc      	mov	ip, r7
    for (carry=neg&1, i=0; i<n; i++) {
   1615c:	3501      	adds	r5, #1
   1615e:	e7ed      	b.n	1613c <cneg_n+0xa>

00016160 <umul_n>:
{
   16160:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (hi=0, i=0; i<n; i++) {
   16162:	2600      	movs	r6, #0
{
   16164:	4607      	mov	r7, r0
    for (hi=0, i=0; i<n; i++) {
   16166:	4630      	mov	r0, r6
   16168:	429e      	cmp	r6, r3
   1616a:	d100      	bne.n	1616e <umul_n+0xe>
}
   1616c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        limbx = (b * (llimb_t)a[i]) + hi;
   1616e:	4604      	mov	r4, r0
   16170:	2500      	movs	r5, #0
   16172:	f851 0026 	ldr.w	r0, [r1, r6, lsl #2]
   16176:	fbe0 4502 	umlal	r4, r5, r0, r2
        ret[i] = (limb_t)limbx;
   1617a:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
        hi = (limb_t)(limbx >> LIMB_T_BITS);
   1617e:	4628      	mov	r0, r5
    for (hi=0, i=0; i<n; i++) {
   16180:	3601      	adds	r6, #1
   16182:	e7f1      	b.n	16168 <umul_n+0x8>

00016184 <mul_mont_n>:
{
   16184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for (mx=b[0], hi=0, i=0; i<n; i++) {
   16188:	f04f 0e00 	mov.w	lr, #0
{
   1618c:	b089      	sub	sp, #36	; 0x24
   1618e:	af00      	add	r7, sp, #0
   16190:	f8d7 c04c 	ldr.w	ip, [r7, #76]	; 0x4c
   16194:	461d      	mov	r5, r3
    limb_t mask, borrow, mx, hi, tmp[n+1], carry;
   16196:	f10c 0301 	add.w	r3, ip, #1
   1619a:	009b      	lsls	r3, r3, #2
{
   1619c:	4689      	mov	r9, r1
    limb_t mask, borrow, mx, hi, tmp[n+1], carry;
   1619e:	1dd9      	adds	r1, r3, #7
   161a0:	f021 0107 	bic.w	r1, r1, #7
   161a4:	ebad 0d01 	sub.w	sp, sp, r1
   161a8:	466c      	mov	r4, sp
    for (mx=b[0], hi=0, i=0; i<n; i++) {
   161aa:	4676      	mov	r6, lr
   161ac:	f8d2 8000 	ldr.w	r8, [r2]
{
   161b0:	6178      	str	r0, [r7, #20]
        limbx = (mx * (llimb_t)a[i]) + hi;
   161b2:	4630      	mov	r0, r6
   161b4:	2100      	movs	r1, #0
   161b6:	f859 602e 	ldr.w	r6, [r9, lr, lsl #2]
   161ba:	46f3      	mov	fp, lr
   161bc:	fbe6 0108 	umlal	r0, r1, r6, r8
   161c0:	e9c7 0106 	strd	r0, r1, [r7, #24]
        tmp[i] = (limb_t)limbx;
   161c4:	69b9      	ldr	r1, [r7, #24]
        hi = (limb_t)(limbx >> LIMB_T_BITS);
   161c6:	69fe      	ldr	r6, [r7, #28]
        tmp[i] = (limb_t)limbx;
   161c8:	f844 102e 	str.w	r1, [r4, lr, lsl #2]
    for (mx=b[0], hi=0, i=0; i<n; i++) {
   161cc:	f10e 0e01 	add.w	lr, lr, #1
   161d0:	45f4      	cmp	ip, lr
   161d2:	d1ee      	bne.n	161b2 <mul_mont_n+0x2e>
    mx = n0*tmp[0];
   161d4:	6820      	ldr	r0, [r4, #0]
   161d6:	eb04 0a8c 	add.w	sl, r4, ip, lsl #2
    tmp[i] = hi;
   161da:	f844 602c 	str.w	r6, [r4, ip, lsl #2]
    for (carry=0, j=0; ; ) {
   161de:	f04f 0c00 	mov.w	ip, #0
    mx = n0*tmp[0];
   161e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   161e4:	3b04      	subs	r3, #4
   161e6:	4348      	muls	r0, r1
        limbx = (mx * (llimb_t)p[0]) + tmp[0];
   161e8:	6829      	ldr	r1, [r5, #0]
   161ea:	6139      	str	r1, [r7, #16]
   161ec:	1d11      	adds	r1, r2, #4
   161ee:	441a      	add	r2, r3
   161f0:	18eb      	adds	r3, r5, r3
   161f2:	61b9      	str	r1, [r7, #24]
   161f4:	60ba      	str	r2, [r7, #8]
   161f6:	607b      	str	r3, [r7, #4]
   161f8:	2300      	movs	r3, #0
   161fa:	46a0      	mov	r8, r4
   161fc:	6822      	ldr	r2, [r4, #0]
   161fe:	693e      	ldr	r6, [r7, #16]
   16200:	f105 0e04 	add.w	lr, r5, #4
   16204:	fbe6 2300 	umlal	r2, r3, r6, r0
            limbx = (mx * (llimb_t)p[i] + hi) + tmp[i];
   16208:	461a      	mov	r2, r3
   1620a:	2300      	movs	r3, #0
   1620c:	4611      	mov	r1, r2
   1620e:	461a      	mov	r2, r3
   16210:	f8d8 3004 	ldr.w	r3, [r8, #4]
   16214:	f85e 6b04 	ldr.w	r6, [lr], #4
   16218:	18c9      	adds	r1, r1, r3
   1621a:	f142 0200 	adc.w	r2, r2, #0
   1621e:	4613      	mov	r3, r2
   16220:	460a      	mov	r2, r1
   16222:	fbe6 2300 	umlal	r2, r3, r6, r0
        for (i=1; i<n; i++) {
   16226:	6879      	ldr	r1, [r7, #4]
            tmp[i-1] = (limb_t)limbx;
   16228:	f848 2b04 	str.w	r2, [r8], #4
        for (i=1; i<n; i++) {
   1622c:	4571      	cmp	r1, lr
            hi = (limb_t)(limbx >> LIMB_T_BITS);
   1622e:	461e      	mov	r6, r3
   16230:	f04f 0200 	mov.w	r2, #0
        for (i=1; i<n; i++) {
   16234:	d1e8      	bne.n	16208 <mul_mont_n+0x84>
        limbx = tmp[i] + (hi + (llimb_t)carry);
   16236:	2100      	movs	r1, #0
   16238:	f8da 3000 	ldr.w	r3, [sl]
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   1623c:	603a      	str	r2, [r7, #0]
        limbx = tmp[i] + (hi + (llimb_t)carry);
   1623e:	eb1c 0003 	adds.w	r0, ip, r3
   16242:	f141 0100 	adc.w	r1, r1, #0
   16246:	1986      	adds	r6, r0, r6
   16248:	eb41 0302 	adc.w	r3, r1, r2
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   1624c:	469c      	mov	ip, r3
        if (++j==n)
   1624e:	69b8      	ldr	r0, [r7, #24]
   16250:	68bb      	ldr	r3, [r7, #8]
        tmp[i-1] = (limb_t)limbx;
   16252:	f84a 6c04 	str.w	r6, [sl, #-4]
        if (++j==n)
   16256:	4283      	cmp	r3, r0
   16258:	d029      	beq.n	162ae <mul_mont_n+0x12a>
        for (mx=b[j], hi=0, i=0; i<n; i++) {
   1625a:	f850 3b04 	ldr.w	r3, [r0], #4
   1625e:	f1a4 0e04 	sub.w	lr, r4, #4
   16262:	61b8      	str	r0, [r7, #24]
   16264:	4610      	mov	r0, r2
   16266:	60fb      	str	r3, [r7, #12]
            limbx = (mx * (llimb_t)a[i] + hi) + tmp[i];
   16268:	2300      	movs	r3, #0
   1626a:	f85e 6f04 	ldr.w	r6, [lr, #4]!
            hi = (limb_t)(limbx >> LIMB_T_BITS);
   1626e:	f04f 0800 	mov.w	r8, #0
            limbx = (mx * (llimb_t)a[i] + hi) + tmp[i];
   16272:	1992      	adds	r2, r2, r6
   16274:	f143 0300 	adc.w	r3, r3, #0
   16278:	4611      	mov	r1, r2
   1627a:	461a      	mov	r2, r3
   1627c:	68fe      	ldr	r6, [r7, #12]
   1627e:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
        for (mx=b[j], hi=0, i=0; i<n; i++) {
   16282:	4583      	cmp	fp, r0
            limbx = (mx * (llimb_t)a[i] + hi) + tmp[i];
   16284:	fbe3 1206 	umlal	r1, r2, r3, r6
        for (mx=b[j], hi=0, i=0; i<n; i++) {
   16288:	f100 0001 	add.w	r0, r0, #1
            hi = (limb_t)(limbx >> LIMB_T_BITS);
   1628c:	4616      	mov	r6, r2
            tmp[i] = (limb_t)limbx;
   1628e:	f8ce 1000 	str.w	r1, [lr]
        for (mx=b[j], hi=0, i=0; i<n; i++) {
   16292:	d1e9      	bne.n	16268 <mul_mont_n+0xe4>
        mx = n0*tmp[0];
   16294:	6820      	ldr	r0, [r4, #0]
   16296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
        limbx = hi + (llimb_t)carry;
   16298:	eb1c 0606 	adds.w	r6, ip, r6
        mx = n0*tmp[0];
   1629c:	fb00 f003 	mul.w	r0, r0, r3
        limbx = hi + (llimb_t)carry;
   162a0:	683b      	ldr	r3, [r7, #0]
        tmp[i] = (limb_t)limbx;
   162a2:	f8ca 6000 	str.w	r6, [sl]
        limbx = hi + (llimb_t)carry;
   162a6:	eb43 0108 	adc.w	r1, r3, r8
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   162aa:	468c      	mov	ip, r1
        limbx = (mx * (llimb_t)p[0]) + tmp[0];
   162ac:	e7a4      	b.n	161f8 <mul_mont_n+0x74>
    for (borrow=0, i=0; i<n; i++) {
   162ae:	4610      	mov	r0, r2
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   162b0:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   162b4:	f855 1020 	ldr.w	r1, [r5, r0, lsl #2]
   162b8:	1a9a      	subs	r2, r3, r2
   162ba:	eb63 0303 	sbc.w	r3, r3, r3
   162be:	1a52      	subs	r2, r2, r1
        ret[i] = (limb_t)limbx;
   162c0:	6979      	ldr	r1, [r7, #20]
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   162c2:	f163 0300 	sbc.w	r3, r3, #0
    for (borrow=0, i=0; i<n; i++) {
   162c6:	4583      	cmp	fp, r0
        ret[i] = (limb_t)limbx;
   162c8:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   162cc:	f003 0201 	and.w	r2, r3, #1
    for (borrow=0, i=0; i<n; i++) {
   162d0:	f100 0001 	add.w	r0, r0, #1
   162d4:	d1ec      	bne.n	162b0 <mul_mont_n+0x12c>
    mask = carry - borrow;
   162d6:	1f08      	subs	r0, r1, #4
    for(i=0; i<n; i++)
   162d8:	2100      	movs	r1, #0
    mask = carry - borrow;
   162da:	ebac 0202 	sub.w	r2, ip, r2
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   162de:	f850 5f04 	ldr.w	r5, [r0, #4]!
   162e2:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
    for(i=0; i<n; i++)
   162e6:	458b      	cmp	fp, r1
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   162e8:	ea83 0305 	eor.w	r3, r3, r5
   162ec:	ea03 0302 	and.w	r3, r3, r2
   162f0:	ea83 0305 	eor.w	r3, r3, r5
   162f4:	6003      	str	r3, [r0, #0]
    for(i=0; i<n; i++)
   162f6:	f101 0101 	add.w	r1, r1, #1
   162fa:	d1f0      	bne.n	162de <mul_mont_n+0x15a>
}
   162fc:	3724      	adds	r7, #36	; 0x24
   162fe:	46bd      	mov	sp, r7
   16300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016304 <add_mod_n>:
{
   16304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16308:	af00      	add	r7, sp, #0
   1630a:	6a3e      	ldr	r6, [r7, #32]
   1630c:	469e      	mov	lr, r3
    limb_t mask, carry, borrow, tmp[n];
   1630e:	00b3      	lsls	r3, r6, #2
   16310:	3307      	adds	r3, #7
   16312:	f023 0307 	bic.w	r3, r3, #7
   16316:	ebad 0d03 	sub.w	sp, sp, r3
    for (carry=0, i=0; i<n; i++) {
   1631a:	2300      	movs	r3, #0
{
   1631c:	4680      	mov	r8, r0
    limb_t mask, carry, borrow, tmp[n];
   1631e:	46ec      	mov	ip, sp
    for (carry=0, i=0; i<n; i++) {
   16320:	4618      	mov	r0, r3
        limbx = a[i] + (b[i] + (llimb_t)carry);
   16322:	2500      	movs	r5, #0
   16324:	46aa      	mov	sl, r5
   16326:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
   1632a:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   1632e:	eb14 0905 	adds.w	r9, r4, r5
   16332:	f14a 0a00 	adc.w	sl, sl, #0
   16336:	eb19 0403 	adds.w	r4, r9, r3
        tmp[i] = (limb_t)limbx;
   1633a:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
   1633e:	4604      	mov	r4, r0
    for (carry=0, i=0; i<n; i++) {
   16340:	f100 0001 	add.w	r0, r0, #1
        limbx = a[i] + (b[i] + (llimb_t)carry);
   16344:	f14a 0500 	adc.w	r5, sl, #0
    for (carry=0, i=0; i<n; i++) {
   16348:	4286      	cmp	r6, r0
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   1634a:	462b      	mov	r3, r5
    for (carry=0, i=0; i<n; i++) {
   1634c:	d1e9      	bne.n	16322 <add_mod_n+0x1e>
    for (borrow=0, i=0; i<n; i++) {
   1634e:	2000      	movs	r0, #0
   16350:	4605      	mov	r5, r0
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   16352:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   16356:	1a10      	subs	r0, r2, r0
   16358:	eb62 0102 	sbc.w	r1, r2, r2
   1635c:	f85e 2025 	ldr.w	r2, [lr, r5, lsl #2]
   16360:	1a80      	subs	r0, r0, r2
   16362:	f161 0100 	sbc.w	r1, r1, #0
    for (borrow=0, i=0; i<n; i++) {
   16366:	42a5      	cmp	r5, r4
        ret[i] = (limb_t)limbx;
   16368:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   1636c:	f001 0001 	and.w	r0, r1, #1
    for (borrow=0, i=0; i<n; i++) {
   16370:	f105 0501 	add.w	r5, r5, #1
   16374:	d1ed      	bne.n	16352 <add_mod_n+0x4e>
    for(i=0; i<n; i++)
   16376:	2100      	movs	r1, #0
    mask = carry - borrow;
   16378:	1a1b      	subs	r3, r3, r0
    for(i=0; i<n; i++)
   1637a:	f1a8 0804 	sub.w	r8, r8, #4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   1637e:	f858 0f04 	ldr.w	r0, [r8, #4]!
   16382:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
    for(i=0; i<n; i++)
   16386:	42a1      	cmp	r1, r4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   16388:	ea82 0200 	eor.w	r2, r2, r0
   1638c:	ea02 0203 	and.w	r2, r2, r3
   16390:	ea82 0200 	eor.w	r2, r2, r0
   16394:	f8c8 2000 	str.w	r2, [r8]
    for(i=0; i<n; i++)
   16398:	f101 0101 	add.w	r1, r1, #1
   1639c:	d1ef      	bne.n	1637e <add_mod_n+0x7a>
}
   1639e:	46bd      	mov	sp, r7
   163a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000163a4 <mul_by_3_mod_n>:
    for (carry=0, i=0; i<n; i++) {
   163a4:	f04f 0c00 	mov.w	ip, #0
{
   163a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   163ac:	4696      	mov	lr, r2
    limb_t mask, carry, borrow, tmp[n], two_a[n];
   163ae:	009a      	lsls	r2, r3, #2
   163b0:	3207      	adds	r2, #7
   163b2:	f022 0207 	bic.w	r2, r2, #7
{
   163b6:	af00      	add	r7, sp, #0
    limb_t mask, carry, borrow, tmp[n], two_a[n];
   163b8:	ebad 0d02 	sub.w	sp, sp, r2
   163bc:	466d      	mov	r5, sp
   163be:	ebad 0d02 	sub.w	sp, sp, r2
{
   163c2:	4681      	mov	r9, r0
    limb_t mask, carry, borrow, tmp[n], two_a[n];
   163c4:	466e      	mov	r6, sp
    for (carry=0, i=0; i<n; i++) {
   163c6:	4660      	mov	r0, ip
        limb_t a_i = a[i];
   163c8:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
        tmp[i] = a_i<<1 | carry;
   163cc:	ea4c 0244 	orr.w	r2, ip, r4, lsl #1
   163d0:	f845 2020 	str.w	r2, [r5, r0, lsl #2]
        carry = a_i>>(LIMB_T_BITS-1);
   163d4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
    for (carry=0, i=0; i<n; i++) {
   163d8:	4604      	mov	r4, r0
   163da:	3001      	adds	r0, #1
   163dc:	4283      	cmp	r3, r0
   163de:	d1f3      	bne.n	163c8 <mul_by_3_mod_n+0x24>
    for (borrow=0, i=0; i<n; i++) {
   163e0:	2200      	movs	r2, #0
   163e2:	4690      	mov	r8, r2
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   163e4:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
   163e8:	f85e 0028 	ldr.w	r0, [lr, r8, lsl #2]
   163ec:	1a9a      	subs	r2, r3, r2
   163ee:	eb63 0303 	sbc.w	r3, r3, r3
   163f2:	1a12      	subs	r2, r2, r0
   163f4:	f163 0300 	sbc.w	r3, r3, #0
    for (borrow=0, i=0; i<n; i++) {
   163f8:	45a0      	cmp	r8, r4
        two_a[i] = (limb_t)limbx;
   163fa:	f846 2028 	str.w	r2, [r6, r8, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   163fe:	f003 0201 	and.w	r2, r3, #1
    for (borrow=0, i=0; i<n; i++) {
   16402:	f108 0801 	add.w	r8, r8, #1
   16406:	d1ed      	bne.n	163e4 <mul_by_3_mod_n+0x40>
    for(i=0; i<n; i++)
   16408:	2000      	movs	r0, #0
    mask = carry - borrow;
   1640a:	ebac 0202 	sub.w	r2, ip, r2
    for(i=0; i<n; i++)
   1640e:	f1a6 0c04 	sub.w	ip, r6, #4
        two_a[i] = (two_a[i] & ~mask) | (tmp[i] & mask);
   16412:	f85c 8f04 	ldr.w	r8, [ip, #4]!
   16416:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
    for(i=0; i<n; i++)
   1641a:	42a0      	cmp	r0, r4
        two_a[i] = (two_a[i] & ~mask) | (tmp[i] & mask);
   1641c:	ea88 0303 	eor.w	r3, r8, r3
   16420:	ea03 0302 	and.w	r3, r3, r2
   16424:	ea83 0308 	eor.w	r3, r3, r8
   16428:	f8cc 3000 	str.w	r3, [ip]
    for(i=0; i<n; i++)
   1642c:	f100 0001 	add.w	r0, r0, #1
   16430:	d1ef      	bne.n	16412 <mul_by_3_mod_n+0x6e>
    for (carry=0, i=0; i<n; i++) {
   16432:	f04f 0800 	mov.w	r8, #0
   16436:	46c4      	mov	ip, r8
        limbx = a[i] + (two_a[i] + (llimb_t)carry);
   16438:	2300      	movs	r3, #0
   1643a:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
   1643e:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
   16442:	1812      	adds	r2, r2, r0
   16444:	f143 0300 	adc.w	r3, r3, #0
   16448:	eb12 0208 	adds.w	r2, r2, r8
   1644c:	f143 0300 	adc.w	r3, r3, #0
    for (carry=0, i=0; i<n; i++) {
   16450:	45a4      	cmp	ip, r4
        tmp[i] = (limb_t)limbx;
   16452:	f845 202c 	str.w	r2, [r5, ip, lsl #2]
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   16456:	4698      	mov	r8, r3
    for (carry=0, i=0; i<n; i++) {
   16458:	f10c 0c01 	add.w	ip, ip, #1
   1645c:	d1ec      	bne.n	16438 <mul_by_3_mod_n+0x94>
    for (borrow=0, i=0; i<n; i++) {
   1645e:	2200      	movs	r2, #0
   16460:	4610      	mov	r0, r2
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   16462:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   16466:	f85e 1020 	ldr.w	r1, [lr, r0, lsl #2]
   1646a:	1a9a      	subs	r2, r3, r2
   1646c:	eb63 0303 	sbc.w	r3, r3, r3
   16470:	1a52      	subs	r2, r2, r1
   16472:	f163 0300 	sbc.w	r3, r3, #0
    for (borrow=0, i=0; i<n; i++) {
   16476:	42a0      	cmp	r0, r4
        ret[i] = (limb_t)limbx;
   16478:	f849 2020 	str.w	r2, [r9, r0, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   1647c:	f003 0201 	and.w	r2, r3, #1
    for (borrow=0, i=0; i<n; i++) {
   16480:	f100 0001 	add.w	r0, r0, #1
   16484:	d1ed      	bne.n	16462 <mul_by_3_mod_n+0xbe>
    mask = carry - borrow;
   16486:	eba8 0802 	sub.w	r8, r8, r2
    for(i=0; i<n; i++)
   1648a:	2200      	movs	r2, #0
   1648c:	f1a9 0904 	sub.w	r9, r9, #4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   16490:	f859 1f04 	ldr.w	r1, [r9, #4]!
   16494:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    for(i=0; i<n; i++)
   16498:	42a2      	cmp	r2, r4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   1649a:	ea83 0301 	eor.w	r3, r3, r1
   1649e:	ea03 0308 	and.w	r3, r3, r8
   164a2:	ea83 0301 	eor.w	r3, r3, r1
   164a6:	f8c9 3000 	str.w	r3, [r9]
    for(i=0; i<n; i++)
   164aa:	f102 0201 	add.w	r2, r2, #1
   164ae:	d1ef      	bne.n	16490 <mul_by_3_mod_n+0xec>
}
   164b0:	46bd      	mov	sp, r7
   164b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000164b6 <lshift_mod_n>:
{
   164b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   164ba:	af00      	add	r7, sp, #0
   164bc:	f8d7 e020 	ldr.w	lr, [r7, #32]
    limb_t mask, carry, borrow, tmp[n];
   164c0:	ea4f 048e 	mov.w	r4, lr, lsl #2
   164c4:	3407      	adds	r4, #7
   164c6:	f024 0407 	bic.w	r4, r4, #7
   164ca:	ebad 0d04 	sub.w	sp, sp, r4
   164ce:	466e      	mov	r6, sp
    while (count--) {
   164d0:	3a01      	subs	r2, #1
   164d2:	d202      	bcs.n	164da <lshift_mod_n+0x24>
}
   164d4:	46bd      	mov	sp, r7
   164d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (carry=0, i=0; i<n; i++) {
   164da:	2400      	movs	r4, #0
   164dc:	4625      	mov	r5, r4
            limb_t a_i = a[i];
   164de:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
            tmp[i] = a_i<<1 | carry;
   164e2:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
   164e6:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
            carry = a_i>>(LIMB_T_BITS-1);
   164ea:	ea4f 74dc 	mov.w	r4, ip, lsr #31
        for (carry=0, i=0; i<n; i++) {
   164ee:	46ac      	mov	ip, r5
   164f0:	3501      	adds	r5, #1
   164f2:	45ae      	cmp	lr, r5
   164f4:	d1f3      	bne.n	164de <lshift_mod_n+0x28>
        for (borrow=0, i=0; i<n; i++) {
   164f6:	2100      	movs	r1, #0
   164f8:	4688      	mov	r8, r1
            limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   164fa:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
   164fe:	ebb5 0808 	subs.w	r8, r5, r8
   16502:	eb65 0905 	sbc.w	r9, r5, r5
   16506:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
   1650a:	ebb8 0805 	subs.w	r8, r8, r5
   1650e:	f169 0900 	sbc.w	r9, r9, #0
        for (borrow=0, i=0; i<n; i++) {
   16512:	458c      	cmp	ip, r1
            ret[i] = (limb_t)limbx;
   16514:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
            borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16518:	f009 0801 	and.w	r8, r9, #1
        for (borrow=0, i=0; i<n; i++) {
   1651c:	f101 0101 	add.w	r1, r1, #1
   16520:	d1eb      	bne.n	164fa <lshift_mod_n+0x44>
        mask = carry - borrow;
   16522:	eba4 0808 	sub.w	r8, r4, r8
        for(i=0; i<n; i++)
   16526:	2400      	movs	r4, #0
   16528:	1f05      	subs	r5, r0, #4
            ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   1652a:	f855 9f04 	ldr.w	r9, [r5, #4]!
   1652e:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
        for(i=0; i<n; i++)
   16532:	45a4      	cmp	ip, r4
            ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   16534:	ea89 0101 	eor.w	r1, r9, r1
   16538:	ea01 0108 	and.w	r1, r1, r8
   1653c:	ea81 0109 	eor.w	r1, r1, r9
   16540:	6029      	str	r1, [r5, #0]
        for(i=0; i<n; i++)
   16542:	f104 0401 	add.w	r4, r4, #1
   16546:	d1f0      	bne.n	1652a <lshift_mod_n+0x74>
   16548:	4601      	mov	r1, r0
   1654a:	e7c1      	b.n	164d0 <lshift_mod_n+0x1a>

0001654c <cneg_mod_n>:
{
   1654c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16550:	4606      	mov	r6, r0
    for (borrow=0, i=0; i<n; i++) {
   16552:	2000      	movs	r0, #0
{
   16554:	af00      	add	r7, sp, #0
   16556:	f8d7 9020 	ldr.w	r9, [r7, #32]
   1655a:	4690      	mov	r8, r2
    limb_t borrow, mask, tmp[n];
   1655c:	ea4f 0e89 	mov.w	lr, r9, lsl #2
   16560:	f10e 0207 	add.w	r2, lr, #7
   16564:	f022 0207 	bic.w	r2, r2, #7
   16568:	ebad 0d02 	sub.w	sp, sp, r2
{
   1656c:	460d      	mov	r5, r1
    limb_t borrow, mask, tmp[n];
   1656e:	466c      	mov	r4, sp
    for (borrow=0, i=0; i<n; i++) {
   16570:	4684      	mov	ip, r0
        limbx = p[i] - (a[i] + (llimb_t)borrow);
   16572:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
   16576:	46e2      	mov	sl, ip
   16578:	1a10      	subs	r0, r2, r0
   1657a:	eb62 0102 	sbc.w	r1, r2, r2
   1657e:	f855 202c 	ldr.w	r2, [r5, ip, lsl #2]
   16582:	1a80      	subs	r0, r0, r2
        tmp[i] = (limb_t)limbx;
   16584:	f844 002c 	str.w	r0, [r4, ip, lsl #2]
    for (borrow=0, i=0; i<n; i++) {
   16588:	f10c 0c01 	add.w	ip, ip, #1
        limbx = p[i] - (a[i] + (llimb_t)borrow);
   1658c:	f161 0100 	sbc.w	r1, r1, #0
    for (borrow=0, i=0; i<n; i++) {
   16590:	45e1      	cmp	r9, ip
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16592:	f001 0001 	and.w	r0, r1, #1
    for (borrow=0, i=0; i<n; i++) {
   16596:	d1ec      	bne.n	16572 <cneg_mod_n+0x26>
    flag &= vec_is_zero(a, sizeof(tmp)) ^ 1;
   16598:	4671      	mov	r1, lr
   1659a:	4628      	mov	r0, r5
   1659c:	f7ff fc66 	bl	15e6c <vec_is_zero>
    for(i=0; i<n; i++)
   165a0:	2300      	movs	r3, #0
    flag &= vec_is_zero(a, sizeof(tmp)) ^ 1;
   165a2:	f080 0001 	eor.w	r0, r0, #1
   165a6:	ea00 0808 	and.w	r8, r0, r8
    mask = (limb_t)0 - flag;
   165aa:	f1c8 0000 	rsb	r0, r8, #0
        ret[i] = (a[i] & ~mask) | (tmp[i] & mask);
   165ae:	f108 38ff 	add.w	r8, r8, #4294967295
   165b2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   165b6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
   165ba:	ea08 0202 	and.w	r2, r8, r2
   165be:	4001      	ands	r1, r0
   165c0:	430a      	orrs	r2, r1
    for(i=0; i<n; i++)
   165c2:	4553      	cmp	r3, sl
        ret[i] = (a[i] & ~mask) | (tmp[i] & mask);
   165c4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    for(i=0; i<n; i++)
   165c8:	f103 0301 	add.w	r3, r3, #1
   165cc:	d1f1      	bne.n	165b2 <cneg_mod_n+0x66>
}
   165ce:	46bd      	mov	sp, r7
   165d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000165d4 <from_mont_n>:
{
   165d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165d8:	b085      	sub	sp, #20
   165da:	af00      	add	r7, sp, #0
   165dc:	607b      	str	r3, [r7, #4]
   165de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   165e0:	4681      	mov	r9, r0
   165e2:	60fb      	str	r3, [r7, #12]
    limb_t mask, borrow, mx, hi, tmp[n];
   165e4:	009b      	lsls	r3, r3, #2
   165e6:	3307      	adds	r3, #7
   165e8:	f023 0307 	bic.w	r3, r3, #7
   165ec:	ebad 0d03 	sub.w	sp, sp, r3
   165f0:	466b      	mov	r3, sp
    for (j=0; j<n; j++) {
   165f2:	2600      	movs	r6, #0
{
   165f4:	460c      	mov	r4, r1
        limbx = (mx * (llimb_t)p[0]) + a[0];
   165f6:	6811      	ldr	r1, [r2, #0]
   165f8:	60b9      	str	r1, [r7, #8]
        mx = n0*a[0];
   165fa:	6820      	ldr	r0, [r4, #0]
   165fc:	6879      	ldr	r1, [r7, #4]
        limbx = (mx * (llimb_t)p[0]) + a[0];
   165fe:	68bd      	ldr	r5, [r7, #8]
        mx = n0*a[0];
   16600:	fb01 fc00 	mul.w	ip, r1, r0
        limbx = (mx * (llimb_t)p[0]) + a[0];
   16604:	2100      	movs	r1, #0
   16606:	fbe5 010c 	umlal	r0, r1, r5, ip
        for (i=1; i<n; i++) {
   1660a:	f04f 0e01 	mov.w	lr, #1
        hi = (limb_t)(limbx >> LIMB_T_BITS);
   1660e:	4608      	mov	r0, r1
        for (i=1; i<n; i++) {
   16610:	f1a3 0804 	sub.w	r8, r3, #4
            limbx = (mx * (llimb_t)p[i] + hi) + a[i];
   16614:	2100      	movs	r1, #0
   16616:	468b      	mov	fp, r1
   16618:	f854 102e 	ldr.w	r1, [r4, lr, lsl #2]
        for (i=1; i<n; i++) {
   1661c:	68fd      	ldr	r5, [r7, #12]
            limbx = (mx * (llimb_t)p[i] + hi) + a[i];
   1661e:	eb10 0a01 	adds.w	sl, r0, r1
   16622:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
   16626:	f14b 0b00 	adc.w	fp, fp, #0
   1662a:	fbe1 ab0c 	umlal	sl, fp, r1, ip
            tmp[i-1] = (limb_t)limbx;
   1662e:	4671      	mov	r1, lr
        for (i=1; i<n; i++) {
   16630:	f10e 0e01 	add.w	lr, lr, #1
   16634:	4575      	cmp	r5, lr
            hi = (limb_t)(limbx >> LIMB_T_BITS);
   16636:	4658      	mov	r0, fp
            tmp[i-1] = (limb_t)limbx;
   16638:	f848 af04 	str.w	sl, [r8, #4]!
        for (i=1; i<n; i++) {
   1663c:	d1ea      	bne.n	16614 <from_mont_n+0x40>
    for (j=0; j<n; j++) {
   1663e:	42b1      	cmp	r1, r6
        tmp[i-1] = hi;
   16640:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
    for (j=0; j<n; j++) {
   16644:	f106 0001 	add.w	r0, r6, #1
   16648:	d12b      	bne.n	166a2 <from_mont_n+0xce>
    for (borrow=0, i=0; i<n; i++) {
   1664a:	2400      	movs	r4, #0
   1664c:	4626      	mov	r6, r4
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   1664e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   16652:	1b04      	subs	r4, r0, r4
   16654:	eb60 0500 	sbc.w	r5, r0, r0
   16658:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
   1665c:	1a24      	subs	r4, r4, r0
   1665e:	f165 0500 	sbc.w	r5, r5, #0
    for (borrow=0, i=0; i<n; i++) {
   16662:	428e      	cmp	r6, r1
        ret[i] = (limb_t)limbx;
   16664:	f849 4026 	str.w	r4, [r9, r6, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16668:	f005 0401 	and.w	r4, r5, #1
    for (borrow=0, i=0; i<n; i++) {
   1666c:	f106 0601 	add.w	r6, r6, #1
   16670:	d1ed      	bne.n	1664e <from_mont_n+0x7a>
    for(i=0; i<n; i++)
   16672:	2500      	movs	r5, #0
    mask = 0 - borrow;
   16674:	f1c4 0c00 	rsb	ip, r4, #0
    for(i=0; i<n; i++)
   16678:	f1a9 0904 	sub.w	r9, r9, #4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   1667c:	3c01      	subs	r4, #1
   1667e:	f859 2f04 	ldr.w	r2, [r9, #4]!
   16682:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
   16686:	4022      	ands	r2, r4
   16688:	ea0c 0606 	and.w	r6, ip, r6
   1668c:	4332      	orrs	r2, r6
    for(i=0; i<n; i++)
   1668e:	42a9      	cmp	r1, r5
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   16690:	f8c9 2000 	str.w	r2, [r9]
    for(i=0; i<n; i++)
   16694:	f105 0501 	add.w	r5, r5, #1
   16698:	d1f1      	bne.n	1667e <from_mont_n+0xaa>
}
   1669a:	3714      	adds	r7, #20
   1669c:	46bd      	mov	sp, r7
   1669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a2:	4606      	mov	r6, r0
   166a4:	461c      	mov	r4, r3
   166a6:	e7a8      	b.n	165fa <from_mont_n+0x26>

000166a8 <redc_mont_n>:
{
   166a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ac:	b087      	sub	sp, #28
    const limb_t *b = a;
   166ae:	468c      	mov	ip, r1
    for (j=0; j<n; j++) {
   166b0:	2600      	movs	r6, #0
{
   166b2:	af00      	add	r7, sp, #0
   166b4:	607b      	str	r3, [r7, #4]
    limb_t mask, carry, borrow, mx, hi, tmp[n];
   166b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
{
   166b8:	4683      	mov	fp, r0
    limb_t mask, carry, borrow, mx, hi, tmp[n];
   166ba:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   166be:	f10a 0307 	add.w	r3, sl, #7
        limbx = (mx * (llimb_t)p[0]) + b[0];
   166c2:	6810      	ldr	r0, [r2, #0]
    limb_t mask, carry, borrow, mx, hi, tmp[n];
   166c4:	f023 0307 	bic.w	r3, r3, #7
   166c8:	ebad 0d03 	sub.w	sp, sp, r3
   166cc:	f8c7 d014 	str.w	sp, [r7, #20]
        limbx = (mx * (llimb_t)p[0]) + b[0];
   166d0:	6138      	str	r0, [r7, #16]
   166d2:	2500      	movs	r5, #0
        mx = n0*b[0];
   166d4:	f8dc 4000 	ldr.w	r4, [ip]
   166d8:	6878      	ldr	r0, [r7, #4]
   166da:	697b      	ldr	r3, [r7, #20]
   166dc:	fb00 f904 	mul.w	r9, r0, r4
        limbx = (mx * (llimb_t)p[0]) + b[0];
   166e0:	6938      	ldr	r0, [r7, #16]
   166e2:	f1a3 0804 	sub.w	r8, r3, #4
   166e6:	fbe0 4509 	umlal	r4, r5, r0, r9
        for (i=1; i<n; i++) {
   166ea:	f04f 0e01 	mov.w	lr, #1
        hi = (limb_t)(limbx >> LIMB_T_BITS);
   166ee:	462c      	mov	r4, r5
   166f0:	4640      	mov	r0, r8
            limbx = (mx * (llimb_t)p[i] + hi) + b[i];
   166f2:	2500      	movs	r5, #0
   166f4:	4623      	mov	r3, r4
   166f6:	462c      	mov	r4, r5
   166f8:	f85c 502e 	ldr.w	r5, [ip, lr, lsl #2]
   166fc:	195b      	adds	r3, r3, r5
   166fe:	f852 502e 	ldr.w	r5, [r2, lr, lsl #2]
   16702:	f144 0400 	adc.w	r4, r4, #0
   16706:	fbe5 3409 	umlal	r3, r4, r5, r9
   1670a:	e9c7 3402 	strd	r3, r4, [r7, #8]
        for (i=1; i<n; i++) {
   1670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
            tmp[i-1] = (limb_t)limbx;
   16710:	68bc      	ldr	r4, [r7, #8]
   16712:	4675      	mov	r5, lr
        for (i=1; i<n; i++) {
   16714:	f10e 0e01 	add.w	lr, lr, #1
   16718:	4573      	cmp	r3, lr
            tmp[i-1] = (limb_t)limbx;
   1671a:	f840 4f04 	str.w	r4, [r0, #4]!
            hi = (limb_t)(limbx >> LIMB_T_BITS);
   1671e:	68fc      	ldr	r4, [r7, #12]
        for (i=1; i<n; i++) {
   16720:	d1e7      	bne.n	166f2 <redc_mont_n+0x4a>
        tmp[i-1] = hi;
   16722:	6978      	ldr	r0, [r7, #20]
    for (j=0; j<n; j++) {
   16724:	42b5      	cmp	r5, r6
        tmp[i-1] = hi;
   16726:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    for (j=0; j<n; j++) {
   1672a:	f106 0001 	add.w	r0, r6, #1
   1672e:	d145      	bne.n	167bc <redc_mont_n+0x114>
    for (carry=0, i=0; i<n; i++) {
   16730:	f04f 0c00 	mov.w	ip, #0
   16734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16736:	448a      	add	sl, r1
   16738:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
        limbx = a[n+i] + (tmp[i] + (llimb_t)carry);
   1673c:	2100      	movs	r1, #0
   1673e:	f858 ef04 	ldr.w	lr, [r8, #4]!
   16742:	f85a 6b04 	ldr.w	r6, [sl], #4
   16746:	eb1c 000e 	adds.w	r0, ip, lr
   1674a:	f141 0100 	adc.w	r1, r1, #0
   1674e:	1980      	adds	r0, r0, r6
   16750:	f141 0100 	adc.w	r1, r1, #0
    for (carry=0, i=0; i<n; i++) {
   16754:	4554      	cmp	r4, sl
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   16756:	468c      	mov	ip, r1
        tmp[i] = (limb_t)limbx;
   16758:	f8c8 0000 	str.w	r0, [r8]
    for (carry=0, i=0; i<n; i++) {
   1675c:	d1ee      	bne.n	1673c <redc_mont_n+0x94>
    for (borrow=0, i=0; i<n; i++) {
   1675e:	2600      	movs	r6, #0
   16760:	4630      	mov	r0, r6
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   16762:	697b      	ldr	r3, [r7, #20]
   16764:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
   16768:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1676c:	1a08      	subs	r0, r1, r0
   1676e:	eb61 0101 	sbc.w	r1, r1, r1
   16772:	1b00      	subs	r0, r0, r4
   16774:	f161 0100 	sbc.w	r1, r1, #0
    for (borrow=0, i=0; i<n; i++) {
   16778:	42b5      	cmp	r5, r6
        ret[i] = (limb_t)limbx;
   1677a:	f84b 0026 	str.w	r0, [fp, r6, lsl #2]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   1677e:	f001 0001 	and.w	r0, r1, #1
    for (borrow=0, i=0; i<n; i++) {
   16782:	f106 0601 	add.w	r6, r6, #1
   16786:	d1ec      	bne.n	16762 <redc_mont_n+0xba>
    for(i=0; i<n; i++)
   16788:	2100      	movs	r1, #0
    mask = carry - borrow;
   1678a:	ebac 0000 	sub.w	r0, ip, r0
    for(i=0; i<n; i++)
   1678e:	f1ab 0b04 	sub.w	fp, fp, #4
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   16792:	697b      	ldr	r3, [r7, #20]
   16794:	f85b 4f04 	ldr.w	r4, [fp, #4]!
   16798:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    for(i=0; i<n; i++)
   1679c:	428d      	cmp	r5, r1
        ret[i] = (ret[i] & ~mask) | (tmp[i] & mask);
   1679e:	ea82 0204 	eor.w	r2, r2, r4
   167a2:	ea02 0200 	and.w	r2, r2, r0
   167a6:	ea82 0204 	eor.w	r2, r2, r4
   167aa:	f8cb 2000 	str.w	r2, [fp]
    for(i=0; i<n; i++)
   167ae:	f101 0101 	add.w	r1, r1, #1
   167b2:	d1ee      	bne.n	16792 <redc_mont_n+0xea>
}
   167b4:	371c      	adds	r7, #28
   167b6:	46bd      	mov	sp, r7
   167b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167bc:	4606      	mov	r6, r0
   167be:	f8d7 c014 	ldr.w	ip, [r7, #20]
   167c2:	e786      	b.n	166d2 <redc_mont_n+0x2a>

000167c4 <smul_n_shift_n>:
{
   167c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c8:	b083      	sub	sp, #12
   167ca:	af00      	add	r7, sp, #0
   167cc:	607b      	str	r3, [r7, #4]
   167ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167d0:	4692      	mov	sl, r2
    limb_t a_[n+1], b_[n+1], f, g, neg, carry, hi;
   167d2:	1c5a      	adds	r2, r3, #1
   167d4:	ea4f 0982 	mov.w	r9, r2, lsl #2
   167d8:	f109 0207 	add.w	r2, r9, #7
   167dc:	f022 0207 	bic.w	r2, r2, #7
   167e0:	ebad 0d02 	sub.w	sp, sp, r2
   167e4:	466c      	mov	r4, sp
   167e6:	ebad 0d02 	sub.w	sp, sp, r2
    f = *f_;
   167ea:	f8da 2000 	ldr.w	r2, [sl]
{
   167ee:	4683      	mov	fp, r0
    neg = 0 - MSB(f);
   167f0:	17d6      	asrs	r6, r2, #31
    f = (f ^ neg) - neg;            /* ensure |f| is positive */
   167f2:	ea82 78e2 	eor.w	r8, r2, r2, asr #31
   167f6:	eba8 78e2 	sub.w	r8, r8, r2, asr #31
    (void)cneg_n(a_, a, neg, n);
   167fa:	4620      	mov	r0, r4
   167fc:	4632      	mov	r2, r6
   167fe:	f7ff fc98 	bl	16132 <cneg_n>
    hi = umul_n(a_, a_, f, n);
   16802:	4642      	mov	r2, r8
   16804:	4621      	mov	r1, r4
   16806:	4620      	mov	r0, r4
   16808:	f7ff fcaa 	bl	16160 <umul_n>
    limb_t a_[n+1], b_[n+1], f, g, neg, carry, hi;
   1680c:	466d      	mov	r5, sp
    g = *g_;
   1680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    a_[n] = hi - (f & neg);
   16810:	ea06 0608 	and.w	r6, r6, r8
    g = *g_;
   16814:	6812      	ldr	r2, [r2, #0]
    a_[n] = hi - (f & neg);
   16816:	1b86      	subs	r6, r0, r6
   16818:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
    g = (g ^ neg) - neg;            /* ensure |g| is positive */
   1681c:	ea82 78e2 	eor.w	r8, r2, r2, asr #31
    neg = 0 - MSB(g);
   16820:	17d6      	asrs	r6, r2, #31
    g = (g ^ neg) - neg;            /* ensure |g| is positive */
   16822:	eba8 78e2 	sub.w	r8, r8, r2, asr #31
    (void)cneg_n(b_, b, neg, n);
   16826:	4628      	mov	r0, r5
   16828:	4632      	mov	r2, r6
   1682a:	6879      	ldr	r1, [r7, #4]
   1682c:	f7ff fc81 	bl	16132 <cneg_n>
    hi = umul_n(b_, b_, g, n);
   16830:	4629      	mov	r1, r5
   16832:	4642      	mov	r2, r8
   16834:	4628      	mov	r0, r5
   16836:	f7ff fc93 	bl	16160 <umul_n>
    b_[n] = hi - (g & neg);
   1683a:	ea06 0608 	and.w	r6, r6, r8
   1683e:	1b86      	subs	r6, r0, r6
   16840:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
    for (carry=0, i=0; i<n; i++) {
   16844:	1f28      	subs	r0, r5, #4
   16846:	2500      	movs	r5, #0
   16848:	f1a9 0104 	sub.w	r1, r9, #4
   1684c:	1f22      	subs	r2, r4, #4
   1684e:	1866      	adds	r6, r4, r1
        limbx = a[i] + (b[i] + (llimb_t)carry);
   16850:	f04f 0900 	mov.w	r9, #0
   16854:	f852 cf04 	ldr.w	ip, [r2, #4]!
   16858:	f850 8f04 	ldr.w	r8, [r0, #4]!
   1685c:	eb18 080c 	adds.w	r8, r8, ip
   16860:	f149 0900 	adc.w	r9, r9, #0
   16864:	eb18 0805 	adds.w	r8, r8, r5
   16868:	f149 0900 	adc.w	r9, r9, #0
    for (carry=0, i=0; i<n; i++) {
   1686c:	4296      	cmp	r6, r2
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   1686e:	464d      	mov	r5, r9
        ret[i] = (limb_t)limbx;
   16870:	f8c2 8000 	str.w	r8, [r2]
    for (carry=0, i=0; i<n; i++) {
   16874:	d1ec      	bne.n	16850 <smul_n_shift_n+0x8c>
    for (carry=a_[0], i=0; i<n; i++) {
   16876:	4658      	mov	r0, fp
   16878:	f854 2b04 	ldr.w	r2, [r4], #4
   1687c:	4459      	add	r1, fp
        hi = carry >> (LIMB_T_BITS-2);
   1687e:	0f95      	lsrs	r5, r2, #30
        carry = a_[i+1];
   16880:	f854 2b04 	ldr.w	r2, [r4], #4
        ret[i] = hi | (carry << 2);
   16884:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
   16888:	f840 5b04 	str.w	r5, [r0], #4
    for (carry=a_[0], i=0; i<n; i++) {
   1688c:	4281      	cmp	r1, r0
   1688e:	d1f6      	bne.n	1687e <smul_n_shift_n+0xba>
    *f_ = (*f_ ^ neg) - neg;
   16890:	f8da 1000 	ldr.w	r1, [sl]
    *g_ = (*g_ ^ neg) - neg;
   16894:	6b38      	ldr	r0, [r7, #48]	; 0x30
    *f_ = (*f_ ^ neg) - neg;
   16896:	ea81 71e2 	eor.w	r1, r1, r2, asr #31
   1689a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   1689e:	f8ca 1000 	str.w	r1, [sl]
    *g_ = (*g_ ^ neg) - neg;
   168a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
   168a4:	6809      	ldr	r1, [r1, #0]
   168a6:	ea81 71e2 	eor.w	r1, r1, r2, asr #31
   168aa:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   168ae:	6001      	str	r1, [r0, #0]
    (void)cneg_n(ret, ret, neg, n);
   168b0:	17d2      	asrs	r2, r2, #31
   168b2:	4659      	mov	r1, fp
   168b4:	4658      	mov	r0, fp
   168b6:	f7ff fc3c 	bl	16132 <cneg_n>
}
   168ba:	370c      	adds	r7, #12
   168bc:	46bd      	mov	sp, r7
   168be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000168c2 <quot_rem_n>:
{
   168c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c6:	4604      	mov	r4, r0
    for (carry=0, i=0; i<n; i++) {
   168c8:	2000      	movs	r0, #0
    limb_t tmp[n+1], carry, mask, borrow;
   168ca:	f103 0e01 	add.w	lr, r3, #1
   168ce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
{
   168d2:	4698      	mov	r8, r3
    limb_t tmp[n+1], carry, mask, borrow;
   168d4:	f10e 0307 	add.w	r3, lr, #7
   168d8:	f023 0307 	bic.w	r3, r3, #7
{
   168dc:	af00      	add	r7, sp, #0
    limb_t tmp[n+1], carry, mask, borrow;
   168de:	ebad 0d03 	sub.w	sp, sp, r3
{
   168e2:	4694      	mov	ip, r2
    limb_t tmp[n+1], carry, mask, borrow;
   168e4:	466d      	mov	r5, sp
    for (carry=0, i=0; i<n; i++) {
   168e6:	4681      	mov	r9, r0
        limbx = (quotient * (llimb_t)divisor[i]) + carry;
   168e8:	4602      	mov	r2, r0
   168ea:	2300      	movs	r3, #0
   168ec:	f851 0029 	ldr.w	r0, [r1, r9, lsl #2]
   168f0:	464e      	mov	r6, r9
   168f2:	fbe0 230c 	umlal	r2, r3, r0, ip
        tmp[i] = (limb_t)limbx;
   168f6:	f845 2029 	str.w	r2, [r5, r9, lsl #2]
    for (carry=0, i=0; i<n; i++) {
   168fa:	f109 0901 	add.w	r9, r9, #1
   168fe:	45c8      	cmp	r8, r9
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   16900:	4618      	mov	r0, r3
    for (carry=0, i=0; i<n; i++) {
   16902:	d1f1      	bne.n	168e8 <quot_rem_n+0x26>
    for (borrow=0, i=0; i<=n; i++) {
   16904:	2000      	movs	r0, #0
   16906:	f1ae 0e04 	sub.w	lr, lr, #4
    tmp[i] = carry;
   1690a:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
    for (borrow=0, i=0; i<=n; i++) {
   1690e:	f1a5 0904 	sub.w	r9, r5, #4
   16912:	f1a4 0804 	sub.w	r8, r4, #4
   16916:	eb04 0a0e 	add.w	sl, r4, lr
        limbx = div_rem[i] - (tmp[i] + (llimb_t)borrow);
   1691a:	f858 2f04 	ldr.w	r2, [r8, #4]!
   1691e:	1a12      	subs	r2, r2, r0
   16920:	f859 0f04 	ldr.w	r0, [r9, #4]!
   16924:	eb62 0302 	sbc.w	r3, r2, r2
   16928:	1a12      	subs	r2, r2, r0
   1692a:	f163 0300 	sbc.w	r3, r3, #0
    for (borrow=0, i=0; i<=n; i++) {
   1692e:	45c2      	cmp	sl, r8
        tmp[i] = (limb_t)limbx;
   16930:	f8c9 2000 	str.w	r2, [r9]
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16934:	f003 0001 	and.w	r0, r3, #1
    for (borrow=0, i=0; i<=n; i++) {
   16938:	d1ef      	bne.n	1691a <quot_rem_n+0x58>
    for (carry=0, i=0; i<n; i++) {
   1693a:	2300      	movs	r3, #0
   1693c:	4698      	mov	r8, r3
    mask = 0 - borrow;
   1693e:	f1c0 0a00 	rsb	sl, r0, #0
        limbx = tmp[i] + ((divisor[i] & mask) + (llimb_t)carry);
   16942:	f04f 0900 	mov.w	r9, #0
   16946:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   1694a:	ea0a 0b02 	and.w	fp, sl, r2
   1694e:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   16952:	eb18 0802 	adds.w	r8, r8, r2
   16956:	f149 0900 	adc.w	r9, r9, #0
   1695a:	eb18 080b 	adds.w	r8, r8, fp
   1695e:	f149 0900 	adc.w	r9, r9, #0
    for (carry=0, i=0; i<n; i++) {
   16962:	429e      	cmp	r6, r3
        div_rem[i] = (limb_t)limbx;
   16964:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
        carry = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16968:	46c8      	mov	r8, r9
    for (carry=0, i=0; i<n; i++) {
   1696a:	f103 0301 	add.w	r3, r3, #1
   1696e:	d1e8      	bne.n	16942 <quot_rem_n+0x80>
    return (div_rem[i] = quotient + mask);
   16970:	ebac 0000 	sub.w	r0, ip, r0
   16974:	f844 000e 	str.w	r0, [r4, lr]
}
   16978:	46bd      	mov	sp, r7
   1697a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001697e <sgn0_pty_mod_n.constprop.0>:
static limb_t sgn0_pty_mod_n(const limb_t a[], const limb_t p[], size_t n)
   1697e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16980:	b08d      	sub	sp, #52	; 0x34
    ret = a[0] & 1; /* parity */
   16982:	466f      	mov	r7, sp
   16984:	4602      	mov	r2, r0
   16986:	463e      	mov	r6, r7
    for (carry=0, i=0; i<n; i++) {
   16988:	2300      	movs	r3, #0
    ret = a[0] & 1; /* parity */
   1698a:	f852 5904 	ldr.w	r5, [r2], #-4
   1698e:	302c      	adds	r0, #44	; 0x2c
   16990:	f005 0501 	and.w	r5, r5, #1
        limb_t a_i = a[i];
   16994:	f852 4f04 	ldr.w	r4, [r2, #4]!
        tmp[i] = a_i<<1 | carry;
   16998:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    for (carry=0, i=0; i<n; i++) {
   1699c:	4290      	cmp	r0, r2
        tmp[i] = a_i<<1 | carry;
   1699e:	f846 3b04 	str.w	r3, [r6], #4
        carry = a_i>>(LIMB_T_BITS-1);
   169a2:	ea4f 73d4 	mov.w	r3, r4, lsr #31
    for (carry=0, i=0; i<n; i++) {
   169a6:	d1f5      	bne.n	16994 <sgn0_pty_mod_n.constprop.0+0x16>
    for (borrow=0, i=0; i<n; i++) {
   169a8:	2200      	movs	r2, #0
   169aa:	1f0e      	subs	r6, r1, #4
   169ac:	f101 0c2c 	add.w	ip, r1, #44	; 0x2c
        limbx = tmp[i] - (p[i] + (llimb_t)borrow);
   169b0:	2100      	movs	r1, #0
   169b2:	f856 ef04 	ldr.w	lr, [r6, #4]!
   169b6:	f857 4b04 	ldr.w	r4, [r7], #4
   169ba:	eb12 000e 	adds.w	r0, r2, lr
   169be:	f141 0100 	adc.w	r1, r1, #0
   169c2:	1a24      	subs	r4, r4, r0
   169c4:	eb61 0241 	sbc.w	r2, r1, r1, lsl #1
    for (borrow=0, i=0; i<n; i++) {
   169c8:	45b4      	cmp	ip, r6
        borrow = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   169ca:	f002 0201 	and.w	r2, r2, #1
    for (borrow=0, i=0; i<n; i++) {
   169ce:	d1ef      	bne.n	169b0 <sgn0_pty_mod_n.constprop.0+0x32>
    ret |= ((carry - borrow) & 2) ^ 2;
   169d0:	1a9b      	subs	r3, r3, r2
   169d2:	43db      	mvns	r3, r3
   169d4:	f003 0302 	and.w	r3, r3, #2
}
   169d8:	ea43 0005 	orr.w	r0, r3, r5
   169dc:	b00d      	add	sp, #52	; 0x34
   169de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000169e0 <smul_2n>:
{
   169e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e4:	b083      	sub	sp, #12
   169e6:	af00      	add	r7, sp, #0
   169e8:	4699      	mov	r9, r3
   169ea:	e9d7 430c 	ldrd	r4, r3, [r7, #48]	; 0x30
   169ee:	6078      	str	r0, [r7, #4]
    limb_t u_[n], v_[n], neg, hi;
   169f0:	0098      	lsls	r0, r3, #2
   169f2:	3007      	adds	r0, #7
   169f4:	f020 0007 	bic.w	r0, r0, #7
   169f8:	ebad 0d00 	sub.w	sp, sp, r0
   169fc:	466e      	mov	r6, sp
    f = (f ^ neg) - neg;            /* ensure |f| is positive */
   169fe:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
    limb_t u_[n], v_[n], neg, hi;
   16a02:	ebad 0d00 	sub.w	sp, sp, r0
    f = (f ^ neg) - neg;            /* ensure |f| is positive */
   16a06:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
    neg = cneg_n(u_, u, neg, n);
   16a0a:	4630      	mov	r0, r6
   16a0c:	17d2      	asrs	r2, r2, #31
   16a0e:	f7ff fb90 	bl	16132 <cneg_n>
    hi = umul_n(u_, u_, f, n) - (f&neg);
   16a12:	462a      	mov	r2, r5
    neg = cneg_n(u_, u, neg, n);
   16a14:	4682      	mov	sl, r0
    hi = umul_n(u_, u_, f, n) - (f&neg);
   16a16:	4631      	mov	r1, r6
   16a18:	4630      	mov	r0, r6
   16a1a:	f7ff fba1 	bl	16160 <umul_n>
    limb_t u_[n], v_[n], neg, hi;
   16a1e:	46e8      	mov	r8, sp
    neg = cneg_n(v_, v, neg, n);
   16a20:	17e2      	asrs	r2, r4, #31
    hi = umul_n(u_, u_, f, n) - (f&neg);
   16a22:	4683      	mov	fp, r0
    neg = cneg_n(v_, v, neg, n);
   16a24:	4649      	mov	r1, r9
   16a26:	4640      	mov	r0, r8
   16a28:	f7ff fb83 	bl	16132 <cneg_n>
    hi = umul_n(u_, u_, f, n) - (f&neg);
   16a2c:	ea05 050a 	and.w	r5, r5, sl
    g = (g ^ neg) - neg;            /* ensure |g| is positive */
   16a30:	ea84 7ae4 	eor.w	sl, r4, r4, asr #31
   16a34:	ebaa 7ae4 	sub.w	sl, sl, r4, asr #31
    hi += umul_n(v_, v_, g, n) - (g&neg);
   16a38:	4652      	mov	r2, sl
    neg = cneg_n(v_, v, neg, n);
   16a3a:	4604      	mov	r4, r0
    hi += umul_n(v_, v_, g, n) - (g&neg);
   16a3c:	4641      	mov	r1, r8
   16a3e:	4640      	mov	r0, r8
   16a40:	f7ff fb8e 	bl	16160 <umul_n>
    for (carry=0, i=0; i<n; i++) {
   16a44:	2200      	movs	r2, #0
    hi += umul_n(v_, v_, g, n) - (g&neg);
   16a46:	eb0b 0c00 	add.w	ip, fp, r0
    for (carry=0, i=0; i<n; i++) {
   16a4a:	4610      	mov	r0, r2
    hi += umul_n(v_, v_, g, n) - (g&neg);
   16a4c:	ebac 0505 	sub.w	r5, ip, r5
   16a50:	ea0a 0c04 	and.w	ip, sl, r4
   16a54:	eba5 0c0c 	sub.w	ip, r5, ip
    for (carry=0, i=0; i<n; i++) {
   16a58:	4293      	cmp	r3, r2
   16a5a:	d104      	bne.n	16a66 <smul_2n+0x86>
}
   16a5c:	4460      	add	r0, ip
   16a5e:	370c      	adds	r7, #12
   16a60:	46bd      	mov	sp, r7
   16a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        limbx = a[i] + (b[i] + (llimb_t)carry);
   16a66:	2500      	movs	r5, #0
   16a68:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   16a6c:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
   16a70:	1864      	adds	r4, r4, r1
   16a72:	f145 0500 	adc.w	r5, r5, #0
        ret[i] = (limb_t)limbx;
   16a76:	6879      	ldr	r1, [r7, #4]
        limbx = a[i] + (b[i] + (llimb_t)carry);
   16a78:	1824      	adds	r4, r4, r0
   16a7a:	f145 0500 	adc.w	r5, r5, #0
        ret[i] = (limb_t)limbx;
   16a7e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   16a82:	4628      	mov	r0, r5
    for (carry=0, i=0; i<n; i++) {
   16a84:	3201      	adds	r2, #1
   16a86:	e7e7      	b.n	16a58 <smul_2n+0x78>

00016a88 <ct_inverse_mod_n>:
{
   16a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a8c:	b09f      	sub	sp, #124	; 0x7c
   16a8e:	af02      	add	r7, sp, #8
   16a90:	f8d7 8098 	ldr.w	r8, [r7, #152]	; 0x98
   16a94:	607b      	str	r3, [r7, #4]
    limb_t a[n], b[n], u[2*n], v[2*n], t[2*n];
   16a96:	ea4f 0388 	mov.w	r3, r8, lsl #2
   16a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   16a9c:	3307      	adds	r3, #7
   16a9e:	f023 0307 	bic.w	r3, r3, #7
   16aa2:	ebad 0d03 	sub.w	sp, sp, r3
   16aa6:	ac02      	add	r4, sp, #8
   16aa8:	ebad 0d03 	sub.w	sp, sp, r3
   16aac:	ea4f 0348 	mov.w	r3, r8, lsl #1
   16ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   16ab2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   16ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   16ab8:	466b      	mov	r3, sp
   16aba:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
   16abe:	ad02      	add	r5, sp, #8
   16ac0:	469d      	mov	sp, r3
   16ac2:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
   16ac6:	ae02      	add	r6, sp, #8
   16ac8:	469d      	mov	sp, r3
   16aca:	ab02      	add	r3, sp, #8
   16acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   16ace:	466b      	mov	r3, sp
   16ad0:	eba3 03c8 	sub.w	r3, r3, r8, lsl #3
   16ad4:	469d      	mov	sp, r3
{
   16ad6:	4691      	mov	r9, r2
    limb_t a[n], b[n], u[2*n], v[2*n], t[2*n];
   16ad8:	ab02      	add	r3, sp, #8
    vec_copy(a, inp, sizeof(a));
   16ada:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
{
   16adc:	6278      	str	r0, [r7, #36]	; 0x24
    vec_copy(a, inp, sizeof(a));
   16ade:	4620      	mov	r0, r4
    limb_t a[n], b[n], u[2*n], v[2*n], t[2*n];
   16ae0:	637b      	str	r3, [r7, #52]	; 0x34
    vec_copy(a, inp, sizeof(a));
   16ae2:	f7ff f9e2 	bl	15eaa <vec_copy>
    vec_copy(b, mod, sizeof(b));
   16ae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16ae8:	4649      	mov	r1, r9
   16aea:	4628      	mov	r0, r5
   16aec:	f7ff f9dd 	bl	15eaa <vec_copy>
    vec_zero(u, sizeof(u)); u[0] = 1;
   16af0:	4630      	mov	r0, r6
   16af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   16af4:	f7ff f9e5 	bl	15ec2 <vec_zero>
   16af8:	2301      	movs	r3, #1
    vec_zero(v, sizeof(v));
   16afa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    vec_zero(u, sizeof(u)); u[0] = 1;
   16afc:	6033      	str	r3, [r6, #0]
    vec_zero(v, sizeof(v));
   16afe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   16b00:	f7ff f9df 	bl	15ec2 <vec_zero>
    for (i=0; i<(2*n*LIMB_T_BITS)/(LIMB_T_BITS-2); i++) {
   16b04:	ea4f 1388 	mov.w	r3, r8, lsl #6
   16b08:	633b      	str	r3, [r7, #48]	; 0x30
   16b0a:	231e      	movs	r3, #30
   16b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16b0e:	fbb2 f3f3 	udiv	r3, r2, r3
    i = n-1;
   16b12:	f108 32ff 	add.w	r2, r8, #4294967295
    for (i=0; i<(2*n*LIMB_T_BITS)/(LIMB_T_BITS-2); i++) {
   16b16:	61fb      	str	r3, [r7, #28]
    a_hi = a[i],    a_lo = a[i-1];
   16b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   16b1c:	61bb      	str	r3, [r7, #24]
   16b1e:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
   16b22:	3b02      	subs	r3, #2
   16b24:	0099      	lsls	r1, r3, #2
   16b26:	6179      	str	r1, [r7, #20]
   16b28:	eb04 0183 	add.w	r1, r4, r3, lsl #2
    b_hi = b[i],    b_lo = b[i-1];
   16b2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   16b30:	60bb      	str	r3, [r7, #8]
    for (i=0; i<(2*n*LIMB_T_BITS)/(LIMB_T_BITS-2); i++) {
   16b32:	2300      	movs	r3, #0
    b_hi = b[i],    b_lo = b[i-1];
   16b34:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    a_hi = a[i],    a_lo = a[i-1];
   16b38:	6139      	str	r1, [r7, #16]
    b_hi = b[i],    b_lo = b[i-1];
   16b3a:	60fa      	str	r2, [r7, #12]
    for (i=0; i<(2*n*LIMB_T_BITS)/(LIMB_T_BITS-2); i++) {
   16b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    a_hi = a[i],    a_lo = a[i-1];
   16b3e:	69bb      	ldr	r3, [r7, #24]
    for (i--; --i;) {
   16b40:	f1a8 0a02 	sub.w	sl, r8, #2
    a_hi = a[i],    a_lo = a[i-1];
   16b44:	681b      	ldr	r3, [r3, #0]
   16b46:	64bb      	str	r3, [r7, #72]	; 0x48
   16b48:	693b      	ldr	r3, [r7, #16]
   16b4a:	6819      	ldr	r1, [r3, #0]
    b_hi = b[i],    b_lo = b[i-1];
   16b4c:	68fb      	ldr	r3, [r7, #12]
   16b4e:	681b      	ldr	r3, [r3, #0]
   16b50:	647b      	str	r3, [r7, #68]	; 0x44
   16b52:	68bb      	ldr	r3, [r7, #8]
   16b54:	681b      	ldr	r3, [r3, #0]
   16b56:	643b      	str	r3, [r7, #64]	; 0x40
    for (i--; --i;) {
   16b58:	e9d7 2311 	ldrd	r2, r3, [r7, #68]	; 0x44
   16b5c:	431a      	orrs	r2, r3
   16b5e:	4610      	mov	r0, r2
   16b60:	f7ff f97f 	bl	15e62 <is_zero>
   16b64:	f10a 3aff 	add.w	sl, sl, #4294967295
   16b68:	6238      	str	r0, [r7, #32]
   16b6a:	f1ba 0f00 	cmp.w	sl, #0
   16b6e:	f040 80f4 	bne.w	16d5a <ct_inverse_mod_n+0x2d2>
    x = l >> 16;
   16b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    mask = 0 - MSB(0 - x);
   16b76:	f1cc 0e00 	rsb	lr, ip, #0
    l ^= (x ^ l) & mask;
   16b7a:	ea8c 0c02 	eor.w	ip, ip, r2
   16b7e:	ea0c 73ee 	and.w	r3, ip, lr, asr #31
   16b82:	4053      	eors	r3, r2
    x = l >> 8;
   16b84:	0a1a      	lsrs	r2, r3, #8
    mask = 0 - MSB(0 - x);
   16b86:	f1c2 0c00 	rsb	ip, r2, #0
    l ^= (x ^ l) & mask;
   16b8a:	405a      	eors	r2, r3
   16b8c:	ea02 72ec 	and.w	r2, r2, ip, asr #31
   16b90:	4053      	eors	r3, r2
    x = l >> 4;
   16b92:	091a      	lsrs	r2, r3, #4
    mask = 0 - MSB(0 - x);
   16b94:	ea4f 70ec 	mov.w	r0, ip, asr #31
    mask = 0 - MSB(0 - x);
   16b98:	f1c2 0c00 	rsb	ip, r2, #0
    l ^= (x ^ l) & mask;
   16b9c:	405a      	eors	r2, r3
   16b9e:	ea02 72ec 	and.w	r2, r2, ip, asr #31
   16ba2:	4053      	eors	r3, r2
    mask = 0 - MSB(0 - x);
   16ba4:	ea4f 79ee 	mov.w	r9, lr, asr #31
    mask = 0 - MSB(0 - x);
   16ba8:	ea4f 7eec 	mov.w	lr, ip, asr #31
    x = l >> 2;
   16bac:	ea4f 0c93 	mov.w	ip, r3, lsr #2
    mask = 0 - MSB(0 - x);
   16bb0:	f1cc 0b00 	rsb	fp, ip, #0
    l ^= (x ^ l) & mask;
   16bb4:	ea83 0c0c 	eor.w	ip, r3, ip
    mask = 0 - MSB(0 - x);
   16bb8:	ea4f 72eb 	mov.w	r2, fp, asr #31
    l ^= (x ^ l) & mask;
   16bbc:	ea0c 7ceb 	and.w	ip, ip, fp, asr #31
    bits += 8 & mask;
   16bc0:	f000 0b08 	and.w	fp, r0, #8
    size_t bits = is_zero(l) ^ 1;
   16bc4:	6a38      	ldr	r0, [r7, #32]
    bits += 16 & mask;
   16bc6:	f009 0910 	and.w	r9, r9, #16
   16bca:	ea49 090b 	orr.w	r9, r9, fp
    size_t bits = is_zero(l) ^ 1;
   16bce:	f080 0001 	eor.w	r0, r0, #1
    bits += 4 & mask;
   16bd2:	f00e 0e04 	and.w	lr, lr, #4
   16bd6:	4481      	add	r9, r0
   16bd8:	44f1      	add	r9, lr
    bits += 2 & mask;
   16bda:	f002 0202 	and.w	r2, r2, #2
    l ^= (x ^ l) & mask;
   16bde:	ea83 0c0c 	eor.w	ip, r3, ip
   16be2:	4491      	add	r9, r2
    bits += l >> 1;
   16be4:	eb09 0b5c 	add.w	fp, r9, ip, lsr #1
    a_[0] = a[0], a_[1] = lshift_2(a_hi, a_lo, i);
   16be8:	6823      	ldr	r3, [r4, #0]
    i = LIMB_T_BITS - num_bits(a_hi | b_hi);
   16bea:	f1cb 0220 	rsb	r2, fp, #32
    limb_t mask = 0 - (is_zero(l)^1);
   16bee:	4610      	mov	r0, r2
    a_[0] = a[0], a_[1] = lshift_2(a_hi, a_lo, i);
   16bf0:	653b      	str	r3, [r7, #80]	; 0x50
    limb_t mask = 0 - (is_zero(l)^1);
   16bf2:	f7ff f936 	bl	15e62 <is_zero>
   16bf6:	f080 0001 	eor.w	r0, r0, #1
   16bfa:	4240      	negs	r0, r0
    return (hi << (l&(LIMB_T_BITS-1))) | ((lo & mask) >> (r&(LIMB_T_BITS-1)));
   16bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16bfe:	f002 021f 	and.w	r2, r2, #31
   16c02:	f00b 0b1f 	and.w	fp, fp, #31
   16c06:	4001      	ands	r1, r0
   16c08:	4093      	lsls	r3, r2
   16c0a:	fa21 f10b 	lsr.w	r1, r1, fp
   16c0e:	4319      	orrs	r1, r3
    b_[0] = b[0], b_[1] = lshift_2(b_hi, b_lo, i);
   16c10:	682b      	ldr	r3, [r5, #0]
    a_[0] = a[0], a_[1] = lshift_2(a_hi, a_lo, i);
   16c12:	6579      	str	r1, [r7, #84]	; 0x54
    b_[0] = b[0], b_[1] = lshift_2(b_hi, b_lo, i);
   16c14:	65bb      	str	r3, [r7, #88]	; 0x58
    return (hi << (l&(LIMB_T_BITS-1))) | ((lo & mask) >> (r&(LIMB_T_BITS-1)));
   16c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        inner_loop_n(&fg, a_, b_, LIMB_T_BITS-2);
   16c18:	f107 0150 	add.w	r1, r7, #80	; 0x50
    return (hi << (l&(LIMB_T_BITS-1))) | ((lo & mask) >> (r&(LIMB_T_BITS-1)));
   16c1c:	4003      	ands	r3, r0
   16c1e:	fa23 fb0b 	lsr.w	fp, r3, fp
   16c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        inner_loop_n(&fg, a_, b_, LIMB_T_BITS-2);
   16c24:	f107 0060 	add.w	r0, r7, #96	; 0x60
    return (hi << (l&(LIMB_T_BITS-1))) | ((lo & mask) >> (r&(LIMB_T_BITS-1)));
   16c28:	4093      	lsls	r3, r2
   16c2a:	ea4b 0203 	orr.w	r2, fp, r3
    b_[0] = b[0], b_[1] = lshift_2(b_hi, b_lo, i);
   16c2e:	65fa      	str	r2, [r7, #92]	; 0x5c
        inner_loop_n(&fg, a_, b_, LIMB_T_BITS-2);
   16c30:	231e      	movs	r3, #30
   16c32:	f107 0258 	add.w	r2, r7, #88	; 0x58
   16c36:	f7ff fa0e 	bl	16056 <inner_loop_n>
        smul_n_shift_n(t, a, &fg.f0, b, &fg.g0, n);
   16c3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
   16c3e:	9300      	str	r3, [sp, #0]
   16c40:	f8cd 8004 	str.w	r8, [sp, #4]
   16c44:	462b      	mov	r3, r5
   16c46:	4621      	mov	r1, r4
   16c48:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16c4a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   16c4e:	f7ff fdb9 	bl	167c4 <smul_n_shift_n>
        smul_n_shift_n(b, a, &fg.f1, b, &fg.g1, n);
   16c52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
   16c56:	4621      	mov	r1, r4
   16c58:	4628      	mov	r0, r5
   16c5a:	9300      	str	r3, [sp, #0]
   16c5c:	f107 0268 	add.w	r2, r7, #104	; 0x68
   16c60:	462b      	mov	r3, r5
   16c62:	f8cd 8004 	str.w	r8, [sp, #4]
   16c66:	f7ff fdad 	bl	167c4 <smul_n_shift_n>
        vec_copy(a, t, sizeof(a));
   16c6a:	4620      	mov	r0, r4
   16c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   16c70:	f7ff f91b 	bl	15eaa <vec_copy>
        smul_2n(t, u, fg.f0, v, fg.g0, 2*n);
   16c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c76:	4631      	mov	r1, r6
   16c78:	9301      	str	r3, [sp, #4]
   16c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   16c7c:	9300      	str	r3, [sp, #0]
   16c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   16c82:	6b78      	ldr	r0, [r7, #52]	; 0x34
   16c84:	f7ff feac 	bl	169e0 <smul_2n>
        smul_2n(v, u, fg.f1, v, fg.g1, 2*n);
   16c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16c8a:	4631      	mov	r1, r6
   16c8c:	9301      	str	r3, [sp, #4]
   16c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16c90:	9300      	str	r3, [sp, #0]
   16c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16c94:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16c96:	4618      	mov	r0, r3
   16c98:	f7ff fea2 	bl	169e0 <smul_2n>
        vec_copy(u, t, sizeof(u));
   16c9c:	e9d7 120d 	ldrd	r1, r2, [r7, #52]	; 0x34
   16ca0:	4630      	mov	r0, r6
   16ca2:	f7ff f902 	bl	15eaa <vec_copy>
    for (i=0; i<(2*n*LIMB_T_BITS)/(LIMB_T_BITS-2); i++) {
   16ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ca8:	3301      	adds	r3, #1
   16caa:	62bb      	str	r3, [r7, #40]	; 0x28
   16cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16cae:	69fb      	ldr	r3, [r7, #28]
   16cb0:	4293      	cmp	r3, r2
   16cb2:	f47f af44 	bne.w	16b3e <ct_inverse_mod_n+0xb6>
    inner_loop_n(&fg, a, b, (2*n*LIMB_T_BITS)%(LIMB_T_BITS-2));
   16cb6:	231e      	movs	r3, #30
   16cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16cba:	6b39      	ldr	r1, [r7, #48]	; 0x30
   16cbc:	fbb2 f2f3 	udiv	r2, r2, r3
   16cc0:	f107 0060 	add.w	r0, r7, #96	; 0x60
   16cc4:	fb03 1312 	mls	r3, r3, r2, r1
   16cc8:	4621      	mov	r1, r4
   16cca:	462a      	mov	r2, r5
   16ccc:	f7ff f9c3 	bl	16056 <inner_loop_n>
    top = smul_2n(ret, u, fg.f1, v, fg.g1, 2*n);
   16cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16cd2:	4631      	mov	r1, r6
   16cd4:	9301      	str	r3, [sp, #4]
   16cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16cd8:	9300      	str	r3, [sp, #0]
   16cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16cdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16cde:	6a78      	ldr	r0, [r7, #36]	; 0x24
   16ce0:	f7ff fe7e 	bl	169e0 <smul_2n>
    sign = 0 - MSB(top);    /* top is 1, 0 or -1 */
   16ce4:	697a      	ldr	r2, [r7, #20]
   16ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16ce8:	3208      	adds	r2, #8
   16cea:	441a      	add	r2, r3
   16cec:	687b      	ldr	r3, [r7, #4]
   16cee:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   16cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   16cf2:	3b04      	subs	r3, #4
   16cf4:	4421      	add	r1, r4
   16cf6:	469e      	mov	lr, r3
   16cf8:	4694      	mov	ip, r2
    for (carry=0, i=0; i<n; i++) {
   16cfa:	4654      	mov	r4, sl
    sign = 0 - MSB(top);    /* top is 1, 0 or -1 */
   16cfc:	ea4f 78e0 	mov.w	r8, r0, asr #31
        limbx = ret[n+i] + ((modx[i] & sign) + (llimb_t)carry);
   16d00:	f85e 5f04 	ldr.w	r5, [lr, #4]!
   16d04:	f8dc 6000 	ldr.w	r6, [ip]
   16d08:	ea08 0905 	and.w	r9, r8, r5
   16d0c:	2500      	movs	r5, #0
   16d0e:	eb14 0409 	adds.w	r4, r4, r9
   16d12:	f145 0500 	adc.w	r5, r5, #0
   16d16:	19a4      	adds	r4, r4, r6
        ret[n+i] = (limb_t)limbx;
   16d18:	f84c 4b04 	str.w	r4, [ip], #4
        limbx = ret[n+i] + ((modx[i] & sign) + (llimb_t)carry);
   16d1c:	f145 0500 	adc.w	r5, r5, #0
    for (carry=0, i=0; i<n; i++) {
   16d20:	4561      	cmp	r1, ip
        carry = (limb_t)(limbx >> LIMB_T_BITS);
   16d22:	462c      	mov	r4, r5
    for (carry=0, i=0; i<n; i++) {
   16d24:	d1ec      	bne.n	16d00 <ct_inverse_mod_n+0x278>
    top += carry;
   16d26:	4428      	add	r0, r5
    sign = 0 - top;         /* top is 1 or 0 */
   16d28:	4240      	negs	r0, r0
        limbx = ret[n+i] - ((modx[i] & sign) + (llimb_t)carry);
   16d2a:	f04f 0b00 	mov.w	fp, #0
   16d2e:	f853 4f04 	ldr.w	r4, [r3, #4]!
   16d32:	6815      	ldr	r5, [r2, #0]
   16d34:	4004      	ands	r4, r0
   16d36:	eb1a 0a04 	adds.w	sl, sl, r4
   16d3a:	f14b 0b00 	adc.w	fp, fp, #0
   16d3e:	ebb5 050a 	subs.w	r5, r5, sl
        ret[n+i] = (limb_t)limbx;
   16d42:	f842 5b04 	str.w	r5, [r2], #4
        limbx = ret[n+i] - ((modx[i] & sign) + (llimb_t)carry);
   16d46:	eb6b 0a4b 	sbc.w	sl, fp, fp, lsl #1
    for (carry=0, i=0; i<n; i++) {
   16d4a:	4291      	cmp	r1, r2
        carry = (limb_t)(limbx >> LIMB_T_BITS) & 1;
   16d4c:	f00a 0a01 	and.w	sl, sl, #1
    for (carry=0, i=0; i<n; i++) {
   16d50:	d1eb      	bne.n	16d2a <ct_inverse_mod_n+0x2a2>
}
   16d52:	3774      	adds	r7, #116	; 0x74
   16d54:	46bd      	mov	sp, r7
   16d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mask = 0 - is_zero(a_hi | b_hi);
   16d5a:	6a3b      	ldr	r3, [r7, #32]
        a_hi = ((a_lo ^ a_hi) & mask) ^ a_hi;
   16d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
        mask = 0 - is_zero(a_hi | b_hi);
   16d5e:	4258      	negs	r0, r3
        a_hi = ((a_lo ^ a_hi) & mask) ^ a_hi;
   16d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   16d62:	404b      	eors	r3, r1
   16d64:	4003      	ands	r3, r0
   16d66:	4053      	eors	r3, r2
   16d68:	64bb      	str	r3, [r7, #72]	; 0x48
        b_hi = ((b_lo ^ b_hi) & mask) ^ b_hi;
   16d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   16d6e:	4053      	eors	r3, r2
   16d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16d72:	4003      	ands	r3, r0
   16d74:	4053      	eors	r3, r2
        a_lo = ((a[i] ^ a_lo) & mask) ^ a_lo;
   16d76:	f854 202a 	ldr.w	r2, [r4, sl, lsl #2]
        b_hi = ((b_lo ^ b_hi) & mask) ^ b_hi;
   16d7a:	647b      	str	r3, [r7, #68]	; 0x44
        a_lo = ((a[i] ^ a_lo) & mask) ^ a_lo;
   16d7c:	404a      	eors	r2, r1
   16d7e:	4002      	ands	r2, r0
        b_lo = ((b[i] ^ b_lo) & mask) ^ b_lo;
   16d80:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
        a_lo = ((a[i] ^ a_lo) & mask) ^ a_lo;
   16d84:	4051      	eors	r1, r2
        b_lo = ((b[i] ^ b_lo) & mask) ^ b_lo;
   16d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16d88:	4053      	eors	r3, r2
   16d8a:	4018      	ands	r0, r3
   16d8c:	4613      	mov	r3, r2
   16d8e:	4043      	eors	r3, r0
   16d90:	643b      	str	r3, [r7, #64]	; 0x40
   16d92:	e6e1      	b.n	16b58 <ct_inverse_mod_n+0xd0>

00016d94 <mul_mont_sparse_256>:
MUL_MONT_IMPL(256)
   16d94:	b513      	push	{r0, r1, r4, lr}
   16d96:	2408      	movs	r4, #8
   16d98:	9401      	str	r4, [sp, #4]
   16d9a:	9c04      	ldr	r4, [sp, #16]
   16d9c:	9400      	str	r4, [sp, #0]
   16d9e:	f7ff f9f1 	bl	16184 <mul_mont_n>
   16da2:	b002      	add	sp, #8
   16da4:	bd10      	pop	{r4, pc}

00016da6 <mul_mont_384>:
MUL_MONT_IMPL(384)
   16da6:	b513      	push	{r0, r1, r4, lr}
   16da8:	240c      	movs	r4, #12
   16daa:	9401      	str	r4, [sp, #4]
   16dac:	9c04      	ldr	r4, [sp, #16]
   16dae:	9400      	str	r4, [sp, #0]
   16db0:	f7ff f9e8 	bl	16184 <mul_mont_n>
   16db4:	b002      	add	sp, #8
   16db6:	bd10      	pop	{r4, pc}

00016db8 <line_by_Px2>:
{
   16db8:	b538      	push	{r3, r4, r5, lr}
   16dba:	460d      	mov	r5, r1
   16dbc:	4604      	mov	r4, r0
    mul_fp(line[1][0], line[1][0], Px2->X);   /* "b01" *= -2*P->X */
   16dbe:	f100 0160 	add.w	r1, r0, #96	; 0x60
   16dc2:	462a      	mov	r2, r5
   16dc4:	4608      	mov	r0, r1
   16dc6:	f7f5 fcf5 	bl	c7b4 <mul_fp>
    mul_fp(line[1][1], line[1][1], Px2->X);
   16dca:	f104 0190 	add.w	r1, r4, #144	; 0x90
   16dce:	462a      	mov	r2, r5
   16dd0:	4608      	mov	r0, r1
   16dd2:	f7f5 fcef 	bl	c7b4 <mul_fp>
    mul_fp(line[2][0], line[2][0], Px2->Y);   /* "b11" *= 2*P->Y */
   16dd6:	3530      	adds	r5, #48	; 0x30
   16dd8:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   16ddc:	462a      	mov	r2, r5
   16dde:	4608      	mov	r0, r1
   16de0:	f7f5 fce8 	bl	c7b4 <mul_fp>
    mul_fp(line[2][1], line[2][1], Px2->Y);
   16de4:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   16de8:	462a      	mov	r2, r5
}
   16dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mul_fp(line[2][1], line[2][1], Px2->Y);
   16dee:	4608      	mov	r0, r1
   16df0:	f7f5 bce0 	b.w	c7b4 <mul_fp>

00016df4 <sqr_mont_384>:
   16df4:	b513      	push	{r0, r1, r4, lr}
   16df6:	240c      	movs	r4, #12
   16df8:	e9cd 3400 	strd	r3, r4, [sp]
   16dfc:	4613      	mov	r3, r2
   16dfe:	460a      	mov	r2, r1
   16e00:	f7ff f9c0 	bl	16184 <mul_mont_n>
   16e04:	b002      	add	sp, #8
   16e06:	bd10      	pop	{r4, pc}

00016e08 <add_mod_384>:
ADD_MOD_IMPL(384)
   16e08:	b513      	push	{r0, r1, r4, lr}
   16e0a:	240c      	movs	r4, #12
   16e0c:	9400      	str	r4, [sp, #0]
   16e0e:	f7ff fa79 	bl	16304 <add_mod_n>
   16e12:	b002      	add	sp, #8
   16e14:	bd10      	pop	{r4, pc}

00016e16 <sub_mod_384>:
SUB_MOD_IMPL(384)
   16e16:	b513      	push	{r0, r1, r4, lr}
   16e18:	240c      	movs	r4, #12
   16e1a:	9400      	str	r4, [sp, #0]
   16e1c:	f7ff f8b0 	bl	15f80 <sub_mod_n>
   16e20:	b002      	add	sp, #8
   16e22:	bd10      	pop	{r4, pc}

00016e24 <POINTonE1_add>:
POINT_ADD_IMPL(POINTonE1, 384, fp)
   16e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e28:	f101 0660 	add.w	r6, r1, #96	; 0x60
   16e2c:	b0fa      	sub	sp, #488	; 0x1e8
   16e2e:	460d      	mov	r5, r1
   16e30:	4680      	mov	r8, r0
   16e32:	2130      	movs	r1, #48	; 0x30
   16e34:	4630      	mov	r0, r6
   16e36:	4614      	mov	r4, r2
   16e38:	f7ff f818 	bl	15e6c <vec_is_zero>
   16e3c:	4631      	mov	r1, r6
   16e3e:	4681      	mov	r9, r0
   16e40:	a802      	add	r0, sp, #8
   16e42:	f7f5 fcd3 	bl	c7ec <sqr_fp>
   16e46:	4632      	mov	r2, r6
   16e48:	a902      	add	r1, sp, #8
   16e4a:	a86e      	add	r0, sp, #440	; 0x1b8
   16e4c:	f7f5 fcb2 	bl	c7b4 <mul_fp>
   16e50:	a96e      	add	r1, sp, #440	; 0x1b8
   16e52:	f104 0230 	add.w	r2, r4, #48	; 0x30
   16e56:	f104 0760 	add.w	r7, r4, #96	; 0x60
   16e5a:	4608      	mov	r0, r1
   16e5c:	f7f5 fcaa 	bl	c7b4 <mul_fp>
   16e60:	2130      	movs	r1, #48	; 0x30
   16e62:	4638      	mov	r0, r7
   16e64:	f7ff f802 	bl	15e6c <vec_is_zero>
   16e68:	4639      	mov	r1, r7
   16e6a:	4682      	mov	sl, r0
   16e6c:	a80e      	add	r0, sp, #56	; 0x38
   16e6e:	f7f5 fcbd 	bl	c7ec <sqr_fp>
   16e72:	463a      	mov	r2, r7
   16e74:	a90e      	add	r1, sp, #56	; 0x38
   16e76:	a826      	add	r0, sp, #152	; 0x98
   16e78:	f7f5 fc9c 	bl	c7b4 <mul_fp>
   16e7c:	a926      	add	r1, sp, #152	; 0x98
   16e7e:	4608      	mov	r0, r1
   16e80:	f105 0230 	add.w	r2, r5, #48	; 0x30
   16e84:	f7f5 fc96 	bl	c7b4 <mul_fp>
   16e88:	a96e      	add	r1, sp, #440	; 0x1b8
   16e8a:	4608      	mov	r0, r1
   16e8c:	aa26      	add	r2, sp, #152	; 0x98
   16e8e:	f7f5 fd1b 	bl	c8c8 <sub_fp>
   16e92:	aa6e      	add	r2, sp, #440	; 0x1b8
   16e94:	4611      	mov	r1, r2
   16e96:	4610      	mov	r0, r2
   16e98:	f7f5 fd10 	bl	c8bc <add_fp>
   16e9c:	4629      	mov	r1, r5
   16e9e:	aa0e      	add	r2, sp, #56	; 0x38
   16ea0:	a81a      	add	r0, sp, #104	; 0x68
   16ea2:	f7f5 fc87 	bl	c7b4 <mul_fp>
   16ea6:	4621      	mov	r1, r4
   16ea8:	aa02      	add	r2, sp, #8
   16eaa:	a832      	add	r0, sp, #200	; 0xc8
   16eac:	f7f5 fc82 	bl	c7b4 <mul_fp>
   16eb0:	a932      	add	r1, sp, #200	; 0xc8
   16eb2:	4608      	mov	r0, r1
   16eb4:	aa1a      	add	r2, sp, #104	; 0x68
   16eb6:	f7f5 fd07 	bl	c8c8 <sub_fp>
   16eba:	aa32      	add	r2, sp, #200	; 0xc8
   16ebc:	4611      	mov	r1, r2
   16ebe:	a83e      	add	r0, sp, #248	; 0xf8
   16ec0:	f7f5 fcfc 	bl	c8bc <add_fp>
   16ec4:	a93e      	add	r1, sp, #248	; 0xf8
   16ec6:	4608      	mov	r0, r1
   16ec8:	f7f5 fc90 	bl	c7ec <sqr_fp>
   16ecc:	aa3e      	add	r2, sp, #248	; 0xf8
   16ece:	a932      	add	r1, sp, #200	; 0xc8
   16ed0:	a84a      	add	r0, sp, #296	; 0x128
   16ed2:	f7f5 fc6f 	bl	c7b4 <mul_fp>
   16ed6:	a926      	add	r1, sp, #152	; 0x98
   16ed8:	4608      	mov	r0, r1
   16eda:	aa4a      	add	r2, sp, #296	; 0x128
   16edc:	f7f5 fc6a 	bl	c7b4 <mul_fp>
   16ee0:	aa3e      	add	r2, sp, #248	; 0xf8
   16ee2:	a91a      	add	r1, sp, #104	; 0x68
   16ee4:	a862      	add	r0, sp, #392	; 0x188
   16ee6:	f7f5 fc65 	bl	c7b4 <mul_fp>
   16eea:	a96e      	add	r1, sp, #440	; 0x1b8
   16eec:	a856      	add	r0, sp, #344	; 0x158
   16eee:	f7f5 fc7d 	bl	c7ec <sqr_fp>
   16ef2:	a956      	add	r1, sp, #344	; 0x158
   16ef4:	4608      	mov	r0, r1
   16ef6:	aa4a      	add	r2, sp, #296	; 0x128
   16ef8:	f7f5 fce6 	bl	c8c8 <sub_fp>
   16efc:	a956      	add	r1, sp, #344	; 0x158
   16efe:	4608      	mov	r0, r1
   16f00:	aa62      	add	r2, sp, #392	; 0x188
   16f02:	f7f5 fce1 	bl	c8c8 <sub_fp>
   16f06:	a956      	add	r1, sp, #344	; 0x158
   16f08:	4608      	mov	r0, r1
   16f0a:	aa62      	add	r2, sp, #392	; 0x188
   16f0c:	f7f5 fcdc 	bl	c8c8 <sub_fp>
   16f10:	a962      	add	r1, sp, #392	; 0x188
   16f12:	4608      	mov	r0, r1
   16f14:	aa56      	add	r2, sp, #344	; 0x158
   16f16:	f7f5 fcd7 	bl	c8c8 <sub_fp>
   16f1a:	a962      	add	r1, sp, #392	; 0x188
   16f1c:	4608      	mov	r0, r1
   16f1e:	aa6e      	add	r2, sp, #440	; 0x1b8
   16f20:	f7f5 fc48 	bl	c7b4 <mul_fp>
   16f24:	a962      	add	r1, sp, #392	; 0x188
   16f26:	4608      	mov	r0, r1
   16f28:	aa26      	add	r2, sp, #152	; 0x98
   16f2a:	f7f5 fccd 	bl	c8c8 <sub_fp>
   16f2e:	a962      	add	r1, sp, #392	; 0x188
   16f30:	4608      	mov	r0, r1
   16f32:	aa26      	add	r2, sp, #152	; 0x98
   16f34:	f7f5 fcc8 	bl	c8c8 <sub_fp>
   16f38:	463a      	mov	r2, r7
   16f3a:	4631      	mov	r1, r6
   16f3c:	a86e      	add	r0, sp, #440	; 0x1b8
   16f3e:	f7f5 fcbd 	bl	c8bc <add_fp>
   16f42:	a96e      	add	r1, sp, #440	; 0x1b8
   16f44:	4608      	mov	r0, r1
   16f46:	f7f5 fc51 	bl	c7ec <sqr_fp>
   16f4a:	a96e      	add	r1, sp, #440	; 0x1b8
   16f4c:	4608      	mov	r0, r1
   16f4e:	aa02      	add	r2, sp, #8
   16f50:	f7f5 fcba 	bl	c8c8 <sub_fp>
   16f54:	a96e      	add	r1, sp, #440	; 0x1b8
   16f56:	4608      	mov	r0, r1
   16f58:	aa0e      	add	r2, sp, #56	; 0x38
   16f5a:	f7f5 fcb5 	bl	c8c8 <sub_fp>
   16f5e:	a96e      	add	r1, sp, #440	; 0x1b8
   16f60:	4608      	mov	r0, r1
   16f62:	aa32      	add	r2, sp, #200	; 0xc8
   16f64:	f7f5 fc26 	bl	c7b4 <mul_fp>
   16f68:	aa56      	add	r2, sp, #344	; 0x158
   16f6a:	4629      	mov	r1, r5
   16f6c:	4610      	mov	r0, r2
   16f6e:	2390      	movs	r3, #144	; 0x90
   16f70:	f8cd a000 	str.w	sl, [sp]
   16f74:	f7fe ff63 	bl	15e3e <vec_select>
   16f78:	2390      	movs	r3, #144	; 0x90
   16f7a:	4621      	mov	r1, r4
   16f7c:	4640      	mov	r0, r8
   16f7e:	f8cd 9000 	str.w	r9, [sp]
   16f82:	aa56      	add	r2, sp, #344	; 0x158
   16f84:	f7fe ff5b 	bl	15e3e <vec_select>
   16f88:	b07a      	add	sp, #488	; 0x1e8
   16f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016f8e <mul_by_3_mod_384>:
MUL_BY_3_MOD_IMPL(384)
   16f8e:	230c      	movs	r3, #12
   16f90:	f7ff ba08 	b.w	163a4 <mul_by_3_mod_n>

00016f94 <lshift_mod_384>:
LSHIFT_MOD_IMPL(384)
   16f94:	b513      	push	{r0, r1, r4, lr}
   16f96:	240c      	movs	r4, #12
   16f98:	9400      	str	r4, [sp, #0]
   16f9a:	f7ff fa8c 	bl	164b6 <lshift_mod_n>
   16f9e:	b002      	add	sp, #8
   16fa0:	bd10      	pop	{r4, pc}

00016fa2 <cneg_mod_384>:
CNEG_MOD_IMPL(384)
   16fa2:	b513      	push	{r0, r1, r4, lr}
   16fa4:	240c      	movs	r4, #12
   16fa6:	9400      	str	r4, [sp, #0]
   16fa8:	f7ff fad0 	bl	1654c <cneg_mod_n>
   16fac:	b002      	add	sp, #8
   16fae:	bd10      	pop	{r4, pc}

00016fb0 <POINTonE1_cneg>:
{   cneg_fp(p->Y, p->Y, cbit);   }
   16fb0:	460a      	mov	r2, r1
   16fb2:	f100 0130 	add.w	r1, r0, #48	; 0x30
   16fb6:	4608      	mov	r0, r1
   16fb8:	f7f5 bd5e 	b.w	ca78 <cneg_fp>

00016fbc <POINTonE1_gather_booth_w4>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE1, 4)
   16fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16fbe:	460c      	mov	r4, r1
   16fc0:	2190      	movs	r1, #144	; 0x90
   16fc2:	4606      	mov	r6, r0
   16fc4:	f3c2 1700 	ubfx	r7, r2, #4, #1
   16fc8:	f002 050f 	and.w	r5, r2, #15
   16fcc:	f7fe ff79 	bl	15ec2 <vec_zero>
   16fd0:	4621      	mov	r1, r4
   16fd2:	2401      	movs	r4, #1
   16fd4:	ea85 0304 	eor.w	r3, r5, r4
{   return ((limb_t)(c) - 1) >> (LIMB_T_BITS - 1);   }
   16fd8:	b2db      	uxtb	r3, r3
   16fda:	3b01      	subs	r3, #1
   16fdc:	0fdb      	lsrs	r3, r3, #31
static inline void ptype##xz_cswap(ptype##xz *restrict a,		\
                                   ptype##xz *restrict b, bool_t cbit) {\
    vec_cswap(a, b, sizeof(ptype##xz), cbit);				\
}

DECLARE_POINT(POINTonE1, 384)
   16fde:	9300      	str	r3, [sp, #0]
   16fe0:	4632      	mov	r2, r6
   16fe2:	2390      	movs	r3, #144	; 0x90
   16fe4:	4630      	mov	r0, r6
   16fe6:	f7fe ff2a 	bl	15e3e <vec_select>
   16fea:	3401      	adds	r4, #1
   16fec:	2c09      	cmp	r4, #9
   16fee:	f101 0190 	add.w	r1, r1, #144	; 0x90
   16ff2:	d1ef      	bne.n	16fd4 <POINTonE1_gather_booth_w4+0x18>
   16ff4:	4639      	mov	r1, r7
   16ff6:	b003      	add	sp, #12
   16ff8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16ffc:	f7ff bfd8 	b.w	16fb0 <POINTonE1_cneg>

00017000 <POINTonE1_gather_booth_w5>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE1, 5)
   17000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17002:	460c      	mov	r4, r1
   17004:	2190      	movs	r1, #144	; 0x90
   17006:	4606      	mov	r6, r0
   17008:	f3c2 1740 	ubfx	r7, r2, #5, #1
   1700c:	f002 051f 	and.w	r5, r2, #31
   17010:	f7fe ff57 	bl	15ec2 <vec_zero>
   17014:	4621      	mov	r1, r4
   17016:	2401      	movs	r4, #1
   17018:	ea85 0304 	eor.w	r3, r5, r4
   1701c:	b2db      	uxtb	r3, r3
   1701e:	3b01      	subs	r3, #1
   17020:	0fdb      	lsrs	r3, r3, #31
   17022:	9300      	str	r3, [sp, #0]
   17024:	4632      	mov	r2, r6
   17026:	2390      	movs	r3, #144	; 0x90
   17028:	4630      	mov	r0, r6
   1702a:	f7fe ff08 	bl	15e3e <vec_select>
   1702e:	3401      	adds	r4, #1
   17030:	2c11      	cmp	r4, #17
   17032:	f101 0190 	add.w	r1, r1, #144	; 0x90
   17036:	d1ef      	bne.n	17018 <POINTonE1_gather_booth_w5+0x18>
   17038:	4639      	mov	r1, r7
   1703a:	b003      	add	sp, #12
   1703c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17040:	f7ff bfb6 	b.w	16fb0 <POINTonE1_cneg>

00017044 <frobenius_map_fp2>:
{
   17044:	b570      	push	{r4, r5, r6, lr}
   17046:	4616      	mov	r6, r2
    vec_copy(ret[0], a[0], sizeof(ret[0]));
   17048:	2230      	movs	r2, #48	; 0x30
   1704a:	f7fe ff2e 	bl	15eaa <vec_copy>
    cneg_fp(ret[1], a[1], n & 1);
   1704e:	f006 0201 	and.w	r2, r6, #1
   17052:	3130      	adds	r1, #48	; 0x30
   17054:	3030      	adds	r0, #48	; 0x30
}
   17056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cneg_fp(ret[1], a[1], n & 1);
   1705a:	f7f5 bd0d 	b.w	ca78 <cneg_fp>

0001705e <POINTonE2_cneg>:
{   cneg_fp2(p->Y, p->Y, cbit);   }
   1705e:	460a      	mov	r2, r1
   17060:	f100 0160 	add.w	r1, r0, #96	; 0x60
   17064:	4608      	mov	r0, r1
   17066:	f7f5 bd0d 	b.w	ca84 <cneg_fp2>

0001706a <POINTonE2_gather_booth_w4>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE2, 4)
   1706a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1706c:	460c      	mov	r4, r1
   1706e:	f44f 7190 	mov.w	r1, #288	; 0x120
   17072:	4606      	mov	r6, r0
   17074:	f3c2 1700 	ubfx	r7, r2, #4, #1
   17078:	f002 050f 	and.w	r5, r2, #15
   1707c:	f7fe ff21 	bl	15ec2 <vec_zero>
   17080:	4621      	mov	r1, r4
   17082:	2401      	movs	r4, #1
   17084:	ea85 0304 	eor.w	r3, r5, r4
   17088:	b2db      	uxtb	r3, r3
   1708a:	3b01      	subs	r3, #1
   1708c:	0fdb      	lsrs	r3, r3, #31

DECLARE_POINT(POINTonE2, 384x)
   1708e:	9300      	str	r3, [sp, #0]
   17090:	4632      	mov	r2, r6
   17092:	f44f 7390 	mov.w	r3, #288	; 0x120
   17096:	4630      	mov	r0, r6
   17098:	f7fe fed1 	bl	15e3e <vec_select>
   1709c:	3401      	adds	r4, #1
   1709e:	2c09      	cmp	r4, #9
   170a0:	f501 7190 	add.w	r1, r1, #288	; 0x120
   170a4:	d1ee      	bne.n	17084 <POINTonE2_gather_booth_w4+0x1a>
   170a6:	4639      	mov	r1, r7
   170a8:	b003      	add	sp, #12
   170aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   170ae:	f7ff bfd6 	b.w	1705e <POINTonE2_cneg>

000170b2 <POINTonE2_gather_booth_w5>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE2, 5)
   170b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   170b4:	460c      	mov	r4, r1
   170b6:	f44f 7190 	mov.w	r1, #288	; 0x120
   170ba:	4606      	mov	r6, r0
   170bc:	f3c2 1740 	ubfx	r7, r2, #5, #1
   170c0:	f002 051f 	and.w	r5, r2, #31
   170c4:	f7fe fefd 	bl	15ec2 <vec_zero>
   170c8:	4621      	mov	r1, r4
   170ca:	2401      	movs	r4, #1
   170cc:	ea85 0304 	eor.w	r3, r5, r4
   170d0:	b2db      	uxtb	r3, r3
   170d2:	3b01      	subs	r3, #1
   170d4:	0fdb      	lsrs	r3, r3, #31
   170d6:	9300      	str	r3, [sp, #0]
   170d8:	4632      	mov	r2, r6
   170da:	f44f 7390 	mov.w	r3, #288	; 0x120
   170de:	4630      	mov	r0, r6
   170e0:	f7fe fead 	bl	15e3e <vec_select>
   170e4:	3401      	adds	r4, #1
   170e6:	2c11      	cmp	r4, #17
   170e8:	f501 7190 	add.w	r1, r1, #288	; 0x120
   170ec:	d1ee      	bne.n	170cc <POINTonE2_gather_booth_w5+0x1a>
   170ee:	4639      	mov	r1, r7
   170f0:	b003      	add	sp, #12
   170f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   170f6:	f7ff bfb2 	b.w	1705e <POINTonE2_cneg>

000170fa <neg_fp6>:
{
   170fa:	b538      	push	{r3, r4, r5, lr}
   170fc:	4604      	mov	r4, r0
   170fe:	460d      	mov	r5, r1
    neg_fp2(ret[0], a[0]);
   17100:	2201      	movs	r2, #1
   17102:	f7f5 fcbf 	bl	ca84 <cneg_fp2>
    neg_fp2(ret[1], a[1]);
   17106:	f105 0160 	add.w	r1, r5, #96	; 0x60
   1710a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1710e:	2201      	movs	r2, #1
   17110:	f7f5 fcb8 	bl	ca84 <cneg_fp2>
    neg_fp2(ret[2], a[2]);
   17114:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   17118:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1711c:	2201      	movs	r2, #1
}
   1711e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    neg_fp2(ret[2], a[2]);
   17122:	f7f5 bcaf 	b.w	ca84 <cneg_fp2>

00017126 <conjugate_fp12>:
{   neg_fp6(a[1], a[1]);   }
   17126:	f500 7190 	add.w	r1, r0, #288	; 0x120
   1712a:	4608      	mov	r0, r1
   1712c:	f7ff bfe5 	b.w	170fa <neg_fp6>

00017130 <from_mont_384>:
FROM_MONT_IMPL(384)
   17130:	b513      	push	{r0, r1, r4, lr}
   17132:	240c      	movs	r4, #12
   17134:	9400      	str	r4, [sp, #0]
   17136:	f7ff fa4d 	bl	165d4 <from_mont_n>
   1713a:	b002      	add	sp, #8
   1713c:	bd10      	pop	{r4, pc}

0001713e <redc_mont_256>:
REDC_MONT_IMPL(256, 512)
   1713e:	b513      	push	{r0, r1, r4, lr}
   17140:	2408      	movs	r4, #8
   17142:	9400      	str	r4, [sp, #0]
   17144:	f7ff fab0 	bl	166a8 <redc_mont_n>
   17148:	b002      	add	sp, #8
   1714a:	bd10      	pop	{r4, pc}

0001714c <redc_mont_384>:
REDC_MONT_IMPL(384, 768)
   1714c:	b513      	push	{r0, r1, r4, lr}
   1714e:	240c      	movs	r4, #12
   17150:	9400      	str	r4, [sp, #0]
   17152:	f7ff faa9 	bl	166a8 <redc_mont_n>
   17156:	b002      	add	sp, #8
   17158:	bd10      	pop	{r4, pc}

0001715a <div_by_2_mod_384>:
DIV_BY_2_MOD_IMPL(384)
   1715a:	b507      	push	{r0, r1, r2, lr}
   1715c:	4613      	mov	r3, r2
   1715e:	220c      	movs	r2, #12
   17160:	9200      	str	r2, [sp, #0]
   17162:	2201      	movs	r2, #1
   17164:	f7fe ff3c 	bl	15fe0 <rshift_mod_n>
   17168:	b003      	add	sp, #12
   1716a:	f85d fb04 	ldr.w	pc, [sp], #4

0001716e <sgn0_pty_mont_384>:
{
   1716e:	4613      	mov	r3, r2
    from_mont_n(tmp, a, p, n0, NLIMBS(384));
   17170:	220c      	movs	r2, #12
{
   17172:	b510      	push	{r4, lr}
   17174:	460c      	mov	r4, r1
   17176:	b08e      	sub	sp, #56	; 0x38
    from_mont_n(tmp, a, p, n0, NLIMBS(384));
   17178:	9200      	str	r2, [sp, #0]
   1717a:	460a      	mov	r2, r1
   1717c:	4601      	mov	r1, r0
   1717e:	a802      	add	r0, sp, #8
   17180:	f7ff fa28 	bl	165d4 <from_mont_n>
    return sgn0_pty_mod_n(tmp, p, NLIMBS(384));
   17184:	4621      	mov	r1, r4
   17186:	a802      	add	r0, sp, #8
   17188:	f7ff fbf9 	bl	1697e <sgn0_pty_mod_n.constprop.0>
}
   1718c:	b00e      	add	sp, #56	; 0x38
   1718e:	bd10      	pop	{r4, pc}

00017190 <sgn0_pty_mod_384x>:
{
   17190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17194:	4607      	mov	r7, r0
   17196:	460c      	mov	r4, r1
    re = sgn0_pty_mod_n(a[0], p, NLIMBS(384));
   17198:	f7ff fbf1 	bl	1697e <sgn0_pty_mod_n.constprop.0>
    im = sgn0_pty_mod_n(a[1], p, NLIMBS(384));
   1719c:	f107 0830 	add.w	r8, r7, #48	; 0x30
    re = sgn0_pty_mod_n(a[0], p, NLIMBS(384));
   171a0:	4605      	mov	r5, r0
    im = sgn0_pty_mod_n(a[1], p, NLIMBS(384));
   171a2:	4621      	mov	r1, r4
   171a4:	4640      	mov	r0, r8
   171a6:	f7ff fbea 	bl	1697e <sgn0_pty_mod_n.constprop.0>
    sign = (limb_t)0 - vec_is_zero(a[1], sizeof(vec384));
   171aa:	2130      	movs	r1, #48	; 0x30
    im = sgn0_pty_mod_n(a[1], p, NLIMBS(384));
   171ac:	4606      	mov	r6, r0
    sign = (limb_t)0 - vec_is_zero(a[1], sizeof(vec384));
   171ae:	4640      	mov	r0, r8
   171b0:	f7fe fe5c 	bl	15e6c <vec_is_zero>
   171b4:	4602      	mov	r2, r0
   171b6:	4244      	negs	r4, r0
    sign = (re & sign) | (im & ~sign);
   171b8:	ea04 0005 	and.w	r0, r4, r5
   171bc:	1e54      	subs	r4, r2, #1
   171be:	4034      	ands	r4, r6
   171c0:	4304      	orrs	r4, r0
    prty = (limb_t)0 - vec_is_zero(a[0], sizeof(vec384));
   171c2:	2130      	movs	r1, #48	; 0x30
   171c4:	4638      	mov	r0, r7
   171c6:	f7fe fe51 	bl	15e6c <vec_is_zero>
   171ca:	4603      	mov	r3, r0
   171cc:	4240      	negs	r0, r0
    prty = (im & prty) | (re & ~prty);
   171ce:	3b01      	subs	r3, #1
   171d0:	4006      	ands	r6, r0
   171d2:	402b      	ands	r3, r5
   171d4:	4333      	orrs	r3, r6
    return (sign & 2) | (prty & 1);
   171d6:	f003 0301 	and.w	r3, r3, #1
   171da:	f004 0002 	and.w	r0, r4, #2
}
   171de:	4318      	orrs	r0, r3
   171e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000171e4 <sgn0_pty_mont_384x>:
{
   171e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    from_mont_n(tmp[0], a[0], p, n0, NLIMBS(384));
   171e6:	270c      	movs	r7, #12
{
   171e8:	460c      	mov	r4, r1
   171ea:	4605      	mov	r5, r0
   171ec:	4616      	mov	r6, r2
   171ee:	b09b      	sub	sp, #108	; 0x6c
    from_mont_n(tmp[0], a[0], p, n0, NLIMBS(384));
   171f0:	4613      	mov	r3, r2
   171f2:	9700      	str	r7, [sp, #0]
   171f4:	460a      	mov	r2, r1
   171f6:	4601      	mov	r1, r0
   171f8:	a802      	add	r0, sp, #8
   171fa:	f7ff f9eb 	bl	165d4 <from_mont_n>
    from_mont_n(tmp[1], a[1], p, n0, NLIMBS(384));
   171fe:	4633      	mov	r3, r6
   17200:	4622      	mov	r2, r4
   17202:	f105 0130 	add.w	r1, r5, #48	; 0x30
   17206:	a80e      	add	r0, sp, #56	; 0x38
   17208:	9700      	str	r7, [sp, #0]
   1720a:	f7ff f9e3 	bl	165d4 <from_mont_n>
    return sgn0_pty_mod_384x(tmp, p);
   1720e:	4621      	mov	r1, r4
   17210:	a802      	add	r0, sp, #8
   17212:	f7ff ffbd 	bl	17190 <sgn0_pty_mod_384x>
}
   17216:	b01b      	add	sp, #108	; 0x6c
   17218:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001721a <mul_mont_384x>:
{
   1721a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    add_mod_n(aa, a[0], a[1], p, NLIMBS(384));
   1721e:	250c      	movs	r5, #12
{
   17220:	4617      	mov	r7, r2
   17222:	461c      	mov	r4, r3
   17224:	4688      	mov	r8, r1
   17226:	4606      	mov	r6, r0
   17228:	b0a7      	sub	sp, #156	; 0x9c
    add_mod_n(aa, a[0], a[1], p, NLIMBS(384));
   1722a:	f101 0a30 	add.w	sl, r1, #48	; 0x30
   1722e:	4652      	mov	r2, sl
   17230:	a802      	add	r0, sp, #8
    add_mod_n(bb, b[0], b[1], p, NLIMBS(384));
   17232:	f107 0b30 	add.w	fp, r7, #48	; 0x30
    add_mod_n(aa, a[0], a[1], p, NLIMBS(384));
   17236:	9500      	str	r5, [sp, #0]
{
   17238:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
    add_mod_n(aa, a[0], a[1], p, NLIMBS(384));
   1723c:	f7ff f862 	bl	16304 <add_mod_n>
    add_mod_n(bb, b[0], b[1], p, NLIMBS(384));
   17240:	4623      	mov	r3, r4
   17242:	465a      	mov	r2, fp
   17244:	4639      	mov	r1, r7
   17246:	a80e      	add	r0, sp, #56	; 0x38
   17248:	9500      	str	r5, [sp, #0]
   1724a:	f7ff f85b 	bl	16304 <add_mod_n>
    mul_mont_n(bb, bb, aa, p, n0, NLIMBS(384));
   1724e:	a90e      	add	r1, sp, #56	; 0x38
   17250:	4623      	mov	r3, r4
   17252:	4608      	mov	r0, r1
   17254:	aa02      	add	r2, sp, #8
   17256:	e9cd 9500 	strd	r9, r5, [sp]
   1725a:	f7fe ff93 	bl	16184 <mul_mont_n>
    mul_mont_n(aa, a[0], b[0], p, n0, NLIMBS(384));
   1725e:	4623      	mov	r3, r4
   17260:	463a      	mov	r2, r7
   17262:	4641      	mov	r1, r8
   17264:	a802      	add	r0, sp, #8
   17266:	e9cd 9500 	strd	r9, r5, [sp]
   1726a:	f7fe ff8b 	bl	16184 <mul_mont_n>
    mul_mont_n(cc, a[1], b[1], p, n0, NLIMBS(384));
   1726e:	4623      	mov	r3, r4
   17270:	465a      	mov	r2, fp
   17272:	4651      	mov	r1, sl
   17274:	a81a      	add	r0, sp, #104	; 0x68
   17276:	e9cd 9500 	strd	r9, r5, [sp]
   1727a:	f7fe ff83 	bl	16184 <mul_mont_n>
    sub_mod_n(ret[0], aa, cc, p, NLIMBS(384));
   1727e:	4623      	mov	r3, r4
   17280:	4630      	mov	r0, r6
   17282:	aa1a      	add	r2, sp, #104	; 0x68
    sub_mod_n(ret[1], bb, aa, p, NLIMBS(384));
   17284:	3630      	adds	r6, #48	; 0x30
    sub_mod_n(ret[0], aa, cc, p, NLIMBS(384));
   17286:	a902      	add	r1, sp, #8
   17288:	9500      	str	r5, [sp, #0]
   1728a:	f7fe fe79 	bl	15f80 <sub_mod_n>
    sub_mod_n(ret[1], bb, aa, p, NLIMBS(384));
   1728e:	4623      	mov	r3, r4
   17290:	4630      	mov	r0, r6
   17292:	aa02      	add	r2, sp, #8
   17294:	a90e      	add	r1, sp, #56	; 0x38
   17296:	9500      	str	r5, [sp, #0]
   17298:	f7fe fe72 	bl	15f80 <sub_mod_n>
    sub_mod_n(ret[1], ret[1], cc, p, NLIMBS(384));
   1729c:	4623      	mov	r3, r4
   1729e:	4631      	mov	r1, r6
   172a0:	4630      	mov	r0, r6
   172a2:	9500      	str	r5, [sp, #0]
   172a4:	aa1a      	add	r2, sp, #104	; 0x68
   172a6:	f7fe fe6b 	bl	15f80 <sub_mod_n>
}
   172aa:	b027      	add	sp, #156	; 0x9c
   172ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000172b0 <map_fp2_times_Zz>:
{
   172b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   172b2:	2460      	movs	r4, #96	; 0x60
   172b4:	4605      	mov	r5, r0
   172b6:	460e      	mov	r6, r1
   172b8:	4617      	mov	r7, r2
   172ba:	435c      	muls	r4, r3
    while (n--)
   172bc:	3c60      	subs	r4, #96	; 0x60
   172be:	f114 0f60 	cmn.w	r4, #96	; 0x60
   172c2:	d100      	bne.n	172c6 <map_fp2_times_Zz+0x16>
}
   172c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        mul_fp2(map[n], isogeny_map[n], Zz_powers[n]);
   172c6:	193a      	adds	r2, r7, r4
   172c8:	1931      	adds	r1, r6, r4
   172ca:	1928      	adds	r0, r5, r4
   172cc:	f7f5 fc32 	bl	cb34 <mul_fp2>
   172d0:	e7f4      	b.n	172bc <map_fp2_times_Zz+0xc>

000172d2 <ct_inverse_mod_384>:
CT_INVERSE_MOD_IMPL(384)
   172d2:	b513      	push	{r0, r1, r4, lr}
   172d4:	240c      	movs	r4, #12
   172d6:	9400      	str	r4, [sp, #0]
   172d8:	f7ff fbd6 	bl	16a88 <ct_inverse_mod_n>
   172dc:	b002      	add	sp, #8
   172de:	bd10      	pop	{r4, pc}

000172e0 <reciprocal_fp2>:

void blst_fp_eucl_inverse(vec384 ret, const vec384 a)
{   reciprocal_fp(ret, a);   }

static void reciprocal_fp2(vec384x out, const vec384x inp)
{
   172e0:	b570      	push	{r4, r5, r6, lr}
   172e2:	460d      	mov	r5, r1
   172e4:	4604      	mov	r4, r0
   172e6:	b098      	sub	sp, #96	; 0x60
    vec384 t0, t1;

    /*
     * |out| = 1/(a + b*i) = a/(a^2+b^2) - b/(a^2+b^2)*i
     */
    sqr_fp(t0, inp[0]);
   172e8:	4668      	mov	r0, sp
    sqr_fp(t1, inp[1]);
   172ea:	f105 0630 	add.w	r6, r5, #48	; 0x30
    sqr_fp(t0, inp[0]);
   172ee:	f7f5 fa7d 	bl	c7ec <sqr_fp>
    sqr_fp(t1, inp[1]);
   172f2:	4631      	mov	r1, r6
   172f4:	a80c      	add	r0, sp, #48	; 0x30
   172f6:	f7f5 fa79 	bl	c7ec <sqr_fp>
    add_fp(t0, t0, t1);
   172fa:	aa0c      	add	r2, sp, #48	; 0x30
   172fc:	4669      	mov	r1, sp
   172fe:	4668      	mov	r0, sp
   17300:	f7f5 fadc 	bl	c8bc <add_fp>
    reciprocal_fp(t1, t0);
   17304:	4669      	mov	r1, sp
   17306:	a80c      	add	r0, sp, #48	; 0x30
   17308:	f7f5 fcaa 	bl	cc60 <reciprocal_fp>
    mul_fp(out[0], inp[0], t1);
   1730c:	4629      	mov	r1, r5
   1730e:	4620      	mov	r0, r4
   17310:	aa0c      	add	r2, sp, #48	; 0x30
    mul_fp(out[1], inp[1], t1);
   17312:	3430      	adds	r4, #48	; 0x30
    mul_fp(out[0], inp[0], t1);
   17314:	f7f5 fa4e 	bl	c7b4 <mul_fp>
    mul_fp(out[1], inp[1], t1);
   17318:	4631      	mov	r1, r6
   1731a:	4620      	mov	r0, r4
   1731c:	aa0c      	add	r2, sp, #48	; 0x30
   1731e:	f7f5 fa49 	bl	c7b4 <mul_fp>
    neg_fp(out[1], out[1]);
   17322:	2201      	movs	r2, #1
   17324:	4621      	mov	r1, r4
   17326:	4620      	mov	r0, r4
   17328:	f7f5 fba6 	bl	ca78 <cneg_fp>
}
   1732c:	b018      	add	sp, #96	; 0x60
   1732e:	bd70      	pop	{r4, r5, r6, pc}

00017330 <div_3_limbs>:
{
   17330:	b5f0      	push	{r4, r5, r6, r7, lr}
    limb_t r_lo = div_top[0], r_hi = div_top[1];
   17332:	e9d0 4300 	ldrd	r4, r3, [r0]
    limb_t Q = 0, mask, borrow, rx;
   17336:	f04f 0c00 	mov.w	ip, #0
    limb_t r_lo = div_top[0], r_hi = div_top[1];
   1733a:	2020      	movs	r0, #32
        Rx = (llimb_t)r_lo - d_lo;
   1733c:	1a66      	subs	r6, r4, r1
   1733e:	eb64 0704 	sbc.w	r7, r4, r4
        borrow = (limb_t)(Rx >> LIMB_T_BITS) & 1;
   17342:	f007 0e01 	and.w	lr, r7, #1
        Rx = r_hi - (d_hi + (llimb_t)borrow);
   17346:	1a9e      	subs	r6, r3, r2
        rx = (limb_t)Rx;
   17348:	eba4 0501 	sub.w	r5, r4, r1
        Rx = r_hi - (d_hi + (llimb_t)borrow);
   1734c:	eb63 0703 	sbc.w	r7, r3, r3
   17350:	ebb6 060e 	subs.w	r6, r6, lr
   17354:	f167 0700 	sbc.w	r7, r7, #0
        r_lo = ((r_lo ^ rx) & borrow) ^ rx;
   17358:	406c      	eors	r4, r5
   1735a:	403c      	ands	r4, r7
   1735c:	406c      	eors	r4, r5
        Q |= ~borrow & 1;
   1735e:	43fd      	mvns	r5, r7
        r_hi = ((r_hi ^ rx) & borrow) ^ rx;
   17360:	4073      	eors	r3, r6
        Q |= ~borrow & 1;
   17362:	f005 0501 	and.w	r5, r5, #1
        r_hi = ((r_hi ^ rx) & borrow) ^ rx;
   17366:	403b      	ands	r3, r7
        Q |= ~borrow & 1;
   17368:	ea45 0c4c 	orr.w	ip, r5, ip, lsl #1
    for (i = 0; i < LIMB_T_BITS; i++) {
   1736c:	3801      	subs	r0, #1
        d_lo >>= 1; d_lo |= d_hi << (LIMB_T_BITS - 1);
   1736e:	ea4f 75c2 	mov.w	r5, r2, lsl #31
        r_hi = ((r_hi ^ rx) & borrow) ^ rx;
   17372:	ea83 0306 	eor.w	r3, r3, r6
        d_lo >>= 1; d_lo |= d_hi << (LIMB_T_BITS - 1);
   17376:	ea45 0151 	orr.w	r1, r5, r1, lsr #1
        d_hi >>= 1;
   1737a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for (i = 0; i < LIMB_T_BITS; i++) {
   1737e:	d1dd      	bne.n	1733c <div_3_limbs+0xc>
    Rx = (llimb_t)r_lo - d_lo;
   17380:	1a64      	subs	r4, r4, r1
   17382:	eb64 0504 	sbc.w	r5, r4, r4
    borrow = (limb_t)(Rx >> LIMB_T_BITS) & 1;
   17386:	f005 0101 	and.w	r1, r5, #1
    Rx = r_hi - (d_hi + (llimb_t)borrow);
   1738a:	1a9a      	subs	r2, r3, r2
   1738c:	eb63 0303 	sbc.w	r3, r3, r3
   17390:	1a52      	subs	r2, r2, r1
   17392:	f163 0300 	sbc.w	r3, r3, #0
    Q |= borrow ^ 1;
   17396:	43d8      	mvns	r0, r3
    Q <<= 1;
   17398:	ea4f 034c 	mov.w	r3, ip, lsl #1
    return (Q | mask);
   1739c:	ea43 7cec 	orr.w	ip, r3, ip, asr #31
    Q |= borrow ^ 1;
   173a0:	f000 0001 	and.w	r0, r0, #1
}
   173a4:	ea40 000c 	orr.w	r0, r0, ip
   173a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000173aa <quot_rem_128>:
{   return quot_rem_n(div_rem, divisor, quotient, NLIMBS(128));   }
   173aa:	2304      	movs	r3, #4
   173ac:	f7ff ba89 	b.w	168c2 <quot_rem_n>

000173b0 <quot_rem_64>:
{   return quot_rem_n(div_rem, divisor, quotient, NLIMBS(64));   }
   173b0:	2302      	movs	r3, #2
   173b2:	f7ff ba86 	b.w	168c2 <quot_rem_n>

000173b6 <blst_sha256_hcopy>:

void blst_sha256_hcopy(unsigned int dst[8], const unsigned int src[8])
{
    size_t i;

    for (i=0; i<8; i++)
   173b6:	2300      	movs	r3, #0
        dst[i] = src[i];
   173b8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   173bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i=0; i<8; i++)
   173c0:	3301      	adds	r3, #1
   173c2:	2b08      	cmp	r3, #8
   173c4:	d1f8      	bne.n	173b8 <blst_sha256_hcopy+0x2>
}
   173c6:	4770      	bx	lr

000173c8 <blst_sha256_emit>:

void blst_sha256_emit(unsigned char md[32], const unsigned int h[8])
{
   173c8:	b510      	push	{r4, lr}
   173ca:	1d03      	adds	r3, r0, #4
   173cc:	3904      	subs	r1, #4
   173ce:	3024      	adds	r0, #36	; 0x24
    size_t i;

    for (i=0; i<8; i++, md+=4) {
        unsigned int h_i = h[i];
   173d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
        md[0] = (unsigned char)(h_i >> 24);
   173d4:	3304      	adds	r3, #4
   173d6:	0e14      	lsrs	r4, r2, #24
   173d8:	f803 4c08 	strb.w	r4, [r3, #-8]
        md[1] = (unsigned char)(h_i >> 16);
   173dc:	0c14      	lsrs	r4, r2, #16
   173de:	f803 4c07 	strb.w	r4, [r3, #-7]
        md[2] = (unsigned char)(h_i >> 8);
   173e2:	0a14      	lsrs	r4, r2, #8
   173e4:	f803 4c06 	strb.w	r4, [r3, #-6]
        md[3] = (unsigned char)h_i;
   173e8:	f803 2c05 	strb.w	r2, [r3, #-5]
    for (i=0; i<8; i++, md+=4) {
   173ec:	4283      	cmp	r3, r0
   173ee:	d1ef      	bne.n	173d0 <blst_sha256_emit+0x8>
    }
}
   173f0:	bd10      	pop	{r4, pc}

000173f2 <sha256_final>:
#endif

static void sha256_final(unsigned char md[32], SHA256_CTX *ctx)
{
    unsigned long long bits = ctx->N * 8;
    size_t n = ctx->off;
   173f2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
{
   173f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned long long bits = ctx->N * 8;
   173f8:	e9d1 6508 	ldrd	r6, r5, [r1, #32]
    unsigned char *tail;

    ctx->buf[n++] = 0x80;
   173fc:	18ca      	adds	r2, r1, r3
{
   173fe:	460c      	mov	r4, r1
    ctx->buf[n++] = 0x80;
   17400:	2180      	movs	r1, #128	; 0x80
   17402:	3301      	adds	r3, #1
    unsigned long long bits = ctx->N * 8;
   17404:	00ed      	lsls	r5, r5, #3

    if (n > (sizeof(ctx->buf) - 8)) {
   17406:	2b38      	cmp	r3, #56	; 0x38
    unsigned long long bits = ctx->N * 8;
   17408:	ea45 7556 	orr.w	r5, r5, r6, lsr #29
{
   1740c:	4607      	mov	r7, r0
    unsigned long long bits = ctx->N * 8;
   1740e:	ea4f 06c6 	mov.w	r6, r6, lsl #3
    ctx->buf[n++] = 0x80;
   17412:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    if (n > (sizeof(ctx->buf) - 8)) {
   17416:	f104 0828 	add.w	r8, r4, #40	; 0x28
   1741a:	d908      	bls.n	1742e <sha256_final+0x3c>
        sha256_block_data_order(ctx->h, ctx->buf, 1);
   1741c:	4641      	mov	r1, r8
   1741e:	4620      	mov	r0, r4
   17420:	2201      	movs	r2, #1
   17422:	f7f5 fd11 	bl	ce48 <blst_sha256_block_data_order>
        vec_zero(ctx->buf, sizeof(ctx->buf));
   17426:	2140      	movs	r1, #64	; 0x40
   17428:	4640      	mov	r0, r8
   1742a:	f7fe fd4a 	bl	15ec2 <vec_zero>
    }

    tail = ctx->buf + sizeof(ctx->buf) - 8;
    __TOBE32(tail, (unsigned int)(bits >> 32));
   1742e:	0e2b      	lsrs	r3, r5, #24
   17430:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
   17434:	0c2b      	lsrs	r3, r5, #16
   17436:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   1743a:	ba36      	rev	r6, r6
   1743c:	0a2b      	lsrs	r3, r5, #8
    __TOBE32(tail + 4, (unsigned int)bits);
    sha256_block_data_order(ctx->h, ctx->buf, 1);
   1743e:	4641      	mov	r1, r8
   17440:	4620      	mov	r0, r4
    __TOBE32(tail, (unsigned int)(bits >> 32));
   17442:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
   17446:	f884 5063 	strb.w	r5, [r4, #99]	; 0x63
    __TOBE32(tail + 4, (unsigned int)bits);
   1744a:	6666      	str	r6, [r4, #100]	; 0x64
    sha256_block_data_order(ctx->h, ctx->buf, 1);
   1744c:	2201      	movs	r2, #1
   1744e:	f7f5 fcfb 	bl	ce48 <blst_sha256_block_data_order>
    sha256_emit(md, ctx->h);
   17452:	4621      	mov	r1, r4
   17454:	4638      	mov	r0, r7
}
   17456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sha256_emit(md, ctx->h);
   1745a:	f7ff bfb5 	b.w	173c8 <blst_sha256_emit>

0001745e <HMAC_final>:
{
   1745e:	b570      	push	{r4, r5, r6, lr}
   17460:	460c      	mov	r4, r1
   17462:	4605      	mov	r5, r0
    sha256_final(ctx->tail.c, &ctx->ctx);
   17464:	f101 06b0 	add.w	r6, r1, #176	; 0xb0
   17468:	4630      	mov	r0, r6
   1746a:	f7ff ffc2 	bl	173f2 <sha256_final>
    sha256_hcopy(ctx->ctx.h, ctx->h_opad);
   1746e:	4620      	mov	r0, r4
   17470:	f104 0190 	add.w	r1, r4, #144	; 0x90
   17474:	f7ff ff9f 	bl	173b6 <blst_sha256_hcopy>
    sha256_block_data_order(ctx->ctx.h, ctx->tail.c, 1);
   17478:	4631      	mov	r1, r6
   1747a:	2201      	movs	r2, #1
   1747c:	f7f5 fce4 	bl	ce48 <blst_sha256_block_data_order>
    sha256_emit(md, ctx->ctx.h);
   17480:	4621      	mov	r1, r4
   17482:	4628      	mov	r0, r5
}
   17484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sha256_emit(md, ctx->ctx.h);
   17488:	f7ff bf9e 	b.w	173c8 <blst_sha256_emit>

0001748c <blst_sha256_bcopy>:
{
    unsigned char *dst = dst_;
    const unsigned char *src = src_;
    size_t i;

    for (i=0; i<len; i++)
   1748c:	2300      	movs	r3, #0
{
   1748e:	b510      	push	{r4, lr}
    for (i=0; i<len; i++)
   17490:	4293      	cmp	r3, r2
   17492:	d100      	bne.n	17496 <blst_sha256_bcopy+0xa>
        dst[i] = src[i];
}
   17494:	bd10      	pop	{r4, pc}
        dst[i] = src[i];
   17496:	5ccc      	ldrb	r4, [r1, r3]
   17498:	54c4      	strb	r4, [r0, r3]
    for (i=0; i<len; i++)
   1749a:	3301      	adds	r3, #1
   1749c:	e7f8      	b.n	17490 <blst_sha256_bcopy+0x4>

0001749e <sha256_update>:
{
   1749e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ctx->N += len;
   174a2:	e9d0 8908 	ldrd	r8, r9, [r0, #32]
   174a6:	eb18 0802 	adds.w	r8, r8, r2
   174aa:	f149 0900 	adc.w	r9, r9, #0
{
   174ae:	4605      	mov	r5, r0
   174b0:	460e      	mov	r6, r1
   174b2:	4614      	mov	r4, r2
    ctx->N += len;
   174b4:	e9c0 8908 	strd	r8, r9, [r0, #32]
    if ((len != 0) & ((n = ctx->off) != 0)) {
   174b8:	6e87      	ldr	r7, [r0, #104]	; 0x68
   174ba:	b302      	cbz	r2, 174fe <sha256_update+0x60>
   174bc:	b1ff      	cbz	r7, 174fe <sha256_update+0x60>
        size_t rem = sizeof(ctx->buf) - n;
   174be:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
        if (rem > len) {
   174c2:	f100 0828 	add.w	r8, r0, #40	; 0x28
   174c6:	454a      	cmp	r2, r9
   174c8:	eb08 0007 	add.w	r0, r8, r7
   174cc:	d206      	bcs.n	174dc <sha256_update+0x3e>
            sha256_bcopy(ctx->buf + n, inp, len);
   174ce:	f7ff ffdd 	bl	1748c <blst_sha256_bcopy>
            ctx->off += len;
   174d2:	6eaa      	ldr	r2, [r5, #104]	; 0x68
   174d4:	4422      	add	r2, r4
   174d6:	66aa      	str	r2, [r5, #104]	; 0x68
}
   174d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            sha256_bcopy(ctx->buf + n, inp, rem);
   174dc:	464a      	mov	r2, r9
   174de:	f7ff ffd5 	bl	1748c <blst_sha256_bcopy>
            sha256_block_data_order(ctx->h, ctx->buf, 1);
   174e2:	2201      	movs	r2, #1
   174e4:	4641      	mov	r1, r8
   174e6:	4628      	mov	r0, r5
   174e8:	f7f5 fcae 	bl	ce48 <blst_sha256_block_data_order>
            vec_zero(ctx->buf, sizeof(ctx->buf));
   174ec:	2140      	movs	r1, #64	; 0x40
   174ee:	4640      	mov	r0, r8
   174f0:	f7fe fce7 	bl	15ec2 <vec_zero>
            ctx->off = 0;
   174f4:	2300      	movs	r3, #0
   174f6:	3c40      	subs	r4, #64	; 0x40
            inp += rem;
   174f8:	444e      	add	r6, r9
            len -= rem;
   174fa:	443c      	add	r4, r7
            ctx->off = 0;
   174fc:	66ab      	str	r3, [r5, #104]	; 0x68
    if (n > 0) {
   174fe:	2c3f      	cmp	r4, #63	; 0x3f
   17500:	d908      	bls.n	17514 <sha256_update+0x76>
        sha256_block_data_order(ctx->h, inp, n);
   17502:	4631      	mov	r1, r6
   17504:	09a2      	lsrs	r2, r4, #6
   17506:	4628      	mov	r0, r5
   17508:	f7f5 fc9e 	bl	ce48 <blst_sha256_block_data_order>
        n *= sizeof(ctx->buf);
   1750c:	f024 033f 	bic.w	r3, r4, #63	; 0x3f
        inp += n;
   17510:	441e      	add	r6, r3
        len -= n;
   17512:	1ae4      	subs	r4, r4, r3
    if (len)
   17514:	2c00      	cmp	r4, #0
   17516:	d0df      	beq.n	174d8 <sha256_update+0x3a>
        sha256_bcopy(ctx->buf, inp, ctx->off = len);
   17518:	4622      	mov	r2, r4
   1751a:	4631      	mov	r1, r6
   1751c:	66ac      	str	r4, [r5, #104]	; 0x68
   1751e:	f105 0028 	add.w	r0, r5, #40	; 0x28
}
   17522:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        sha256_bcopy(ctx->buf, inp, ctx->off = len);
   17526:	f7ff bfb1 	b.w	1748c <blst_sha256_bcopy>

0001752a <mul_by_8_mod_384>:
{   lshift_mod_384(ret, a, 3, mod);   }
   1752a:	4613      	mov	r3, r2
   1752c:	2203      	movs	r2, #3
   1752e:	f7ff bd31 	b.w	16f94 <lshift_mod_384>

00017532 <POINTonE1_precompute_w4>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE1, 4)
   17532:	b570      	push	{r4, r5, r6, lr}
   17534:	2290      	movs	r2, #144	; 0x90
   17536:	4605      	mov	r5, r0
   17538:	f7fe fcb7 	bl	15eaa <vec_copy>
   1753c:	f100 0490 	add.w	r4, r0, #144	; 0x90
   17540:	4620      	mov	r0, r4
   17542:	f7f6 f847 	bl	d5d4 <POINTonE1_double>
   17546:	f505 7690 	add.w	r6, r5, #288	; 0x120
   1754a:	f505 7510 	add.w	r5, r5, #576	; 0x240
   1754e:	4621      	mov	r1, r4
   17550:	4630      	mov	r0, r6
   17552:	f1a4 0290 	sub.w	r2, r4, #144	; 0x90
   17556:	f7ff fc65 	bl	16e24 <POINTonE1_add>
   1755a:	4621      	mov	r1, r4
   1755c:	f106 0090 	add.w	r0, r6, #144	; 0x90
   17560:	3490      	adds	r4, #144	; 0x90
   17562:	f7f6 f837 	bl	d5d4 <POINTonE1_double>
   17566:	42ac      	cmp	r4, r5
   17568:	f506 7690 	add.w	r6, r6, #288	; 0x120
   1756c:	d1ef      	bne.n	1754e <POINTonE1_precompute_w4+0x1c>
   1756e:	bd70      	pop	{r4, r5, r6, pc}

00017570 <POINTonE1_mult_w5>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE1, 5)
   17570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17574:	4616      	mov	r6, r2
   17576:	2290      	movs	r2, #144	; 0x90
   17578:	f6ad 1d94 	subw	sp, sp, #2452	; 0x994
   1757c:	4605      	mov	r5, r0
   1757e:	eb0d 0002 	add.w	r0, sp, r2
   17582:	461c      	mov	r4, r3
   17584:	f7fe fc91 	bl	15eaa <vec_copy>
   17588:	a848      	add	r0, sp, #288	; 0x120
   1758a:	f7f6 f823 	bl	d5d4 <POINTonE1_double>
   1758e:	f04f 0902 	mov.w	r9, #2
   17592:	f50d 78d8 	add.w	r8, sp, #432	; 0x1b0
   17596:	af24      	add	r7, sp, #144	; 0x90
   17598:	463a      	mov	r2, r7
   1759a:	3790      	adds	r7, #144	; 0x90
   1759c:	4640      	mov	r0, r8
   1759e:	4639      	mov	r1, r7
   175a0:	f7ff fc40 	bl	16e24 <POINTonE1_add>
   175a4:	f109 0902 	add.w	r9, r9, #2
   175a8:	f108 0090 	add.w	r0, r8, #144	; 0x90
   175ac:	4639      	mov	r1, r7
   175ae:	f7f6 f811 	bl	d5d4 <POINTonE1_double>
   175b2:	f1b9 0f10 	cmp.w	r9, #16
   175b6:	f508 7890 	add.w	r8, r8, #288	; 0x120
   175ba:	d1ed      	bne.n	17598 <POINTonE1_mult_w5+0x28>
   175bc:	2105      	movs	r1, #5
   175be:	fbb4 f1f1 	udiv	r1, r4, r1
   175c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   175c6:	1a61      	subs	r1, r4, r1
   175c8:	1a64      	subs	r4, r4, r1
   175ca:	f101 0701 	add.w	r7, r1, #1
   175ce:	d032      	beq.n	17636 <POINTonE1_mult_w5+0xc6>
   175d0:	463a      	mov	r2, r7
   175d2:	4630      	mov	r0, r6
   175d4:	1e61      	subs	r1, r4, #1
   175d6:	f7fe fcbb 	bl	15f50 <get_wval>
   175da:	f04f 33ff 	mov.w	r3, #4294967295
   175de:	40bb      	lsls	r3, r7
   175e0:	2105      	movs	r1, #5
   175e2:	ea20 0003 	bic.w	r0, r0, r3
   175e6:	f7fe fcbf 	bl	15f68 <booth_encode>
   175ea:	a924      	add	r1, sp, #144	; 0x90
   175ec:	4602      	mov	r2, r0
   175ee:	4628      	mov	r0, r5
   175f0:	f7ff fd06 	bl	17000 <POINTonE1_gather_booth_w5>
   175f4:	b35c      	cbz	r4, 1764e <POINTonE1_mult_w5+0xde>
   175f6:	2705      	movs	r7, #5
   175f8:	4629      	mov	r1, r5
   175fa:	4628      	mov	r0, r5
   175fc:	f7f5 ffea 	bl	d5d4 <POINTonE1_double>
   17600:	3f01      	subs	r7, #1
   17602:	d1f9      	bne.n	175f8 <POINTonE1_mult_w5+0x88>
   17604:	1f67      	subs	r7, r4, #5
   17606:	d019      	beq.n	1763c <POINTonE1_mult_w5+0xcc>
   17608:	2206      	movs	r2, #6
   1760a:	4630      	mov	r0, r6
   1760c:	1fa1      	subs	r1, r4, #6
   1760e:	f7fe fc9f 	bl	15f50 <get_wval>
   17612:	2105      	movs	r1, #5
   17614:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   17618:	f7fe fca6 	bl	15f68 <booth_encode>
   1761c:	a924      	add	r1, sp, #144	; 0x90
   1761e:	4602      	mov	r2, r0
   17620:	4668      	mov	r0, sp
   17622:	f7ff fced 	bl	17000 <POINTonE1_gather_booth_w5>
   17626:	b167      	cbz	r7, 17642 <POINTonE1_mult_w5+0xd2>
   17628:	466a      	mov	r2, sp
   1762a:	4629      	mov	r1, r5
   1762c:	4628      	mov	r0, r5
   1762e:	f7ff fbf9 	bl	16e24 <POINTonE1_add>
   17632:	463c      	mov	r4, r7
   17634:	e7de      	b.n	175f4 <POINTonE1_mult_w5+0x84>
   17636:	7830      	ldrb	r0, [r6, #0]
   17638:	0040      	lsls	r0, r0, #1
   1763a:	e7ce      	b.n	175da <POINTonE1_mult_w5+0x6a>
   1763c:	7830      	ldrb	r0, [r6, #0]
   1763e:	0040      	lsls	r0, r0, #1
   17640:	e7e7      	b.n	17612 <POINTonE1_mult_w5+0xa2>
   17642:	463b      	mov	r3, r7
   17644:	466a      	mov	r2, sp
   17646:	4629      	mov	r1, r5
   17648:	4628      	mov	r0, r5
   1764a:	f7f5 f943 	bl	c8d4 <POINTonE1_dadd>
   1764e:	f60d 1d94 	addw	sp, sp, #2452	; 0x994
   17652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017656 <POINTonE1s_mult_w4.constprop.0>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE1, 4)
   17656:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1765a:	b0a9      	sub	sp, #164	; 0xa4
   1765c:	f8d1 8000 	ldr.w	r8, [r1]
   17660:	af00      	add	r7, sp, #0
   17662:	f5ad 6d10 	sub.w	sp, sp, #2304	; 0x900
   17666:	4604      	mov	r4, r0
   17668:	460d      	mov	r5, r1
   1766a:	4691      	mov	r9, r2
   1766c:	466e      	mov	r6, sp
   1766e:	f1b8 0f00 	cmp.w	r8, #0
   17672:	d027      	beq.n	176c4 <POINTonE1s_mult_w4.constprop.0+0x6e>
   17674:	3504      	adds	r5, #4
   17676:	4641      	mov	r1, r8
   17678:	4630      	mov	r0, r6
   1767a:	f7ff ff5a 	bl	17532 <POINTonE1_precompute_w4>
   1767e:	6829      	ldr	r1, [r5, #0]
   17680:	b909      	cbnz	r1, 17686 <POINTonE1s_mult_w4.constprop.0+0x30>
   17682:	f108 0190 	add.w	r1, r8, #144	; 0x90
   17686:	46ca      	mov	sl, r9
   17688:	f506 6090 	add.w	r0, r6, #1152	; 0x480
   1768c:	f7ff ff51 	bl	17532 <POINTonE1_precompute_w4>
   17690:	f85a 5b04 	ldr.w	r5, [sl], #4
   17694:	2201      	movs	r2, #1
   17696:	217f      	movs	r1, #127	; 0x7f
   17698:	4628      	mov	r0, r5
   1769a:	f7fe fc59 	bl	15f50 <get_wval>
   1769e:	2104      	movs	r1, #4
   176a0:	f000 0001 	and.w	r0, r0, #1
   176a4:	f7fe fc60 	bl	15f68 <booth_encode>
   176a8:	4631      	mov	r1, r6
   176aa:	4602      	mov	r2, r0
   176ac:	4620      	mov	r0, r4
   176ae:	f7ff fc85 	bl	16fbc <POINTonE1_gather_booth_w4>
   176b2:	f04f 0801 	mov.w	r8, #1
   176b6:	237f      	movs	r3, #127	; 0x7f
   176b8:	e9c7 8302 	strd	r8, r3, [r7, #8]
   176bc:	2300      	movs	r3, #0
   176be:	3301      	adds	r3, #1
   176c0:	607b      	str	r3, [r7, #4]
   176c2:	e004      	b.n	176ce <POINTonE1s_mult_w4.constprop.0+0x78>
   176c4:	f04f 0890 	mov.w	r8, #144	; 0x90
   176c8:	e7d5      	b.n	17676 <POINTonE1s_mult_w4.constprop.0+0x20>
   176ca:	f04f 0801 	mov.w	r8, #1
   176ce:	f8da 3000 	ldr.w	r3, [sl]
   176d2:	b3a3      	cbz	r3, 1773e <POINTonE1s_mult_w4.constprop.0+0xe8>
   176d4:	461d      	mov	r5, r3
   176d6:	f10a 0a04 	add.w	sl, sl, #4
   176da:	687a      	ldr	r2, [r7, #4]
   176dc:	68f9      	ldr	r1, [r7, #12]
   176de:	4628      	mov	r0, r5
   176e0:	f7fe fc36 	bl	15f50 <get_wval>
   176e4:	68bb      	ldr	r3, [r7, #8]
   176e6:	2104      	movs	r1, #4
   176e8:	4018      	ands	r0, r3
   176ea:	f7fe fc3d 	bl	15f68 <booth_encode>
   176ee:	f44f 6390 	mov.w	r3, #1152	; 0x480
   176f2:	4602      	mov	r2, r0
   176f4:	fb03 6108 	mla	r1, r3, r8, r6
   176f8:	f107 0010 	add.w	r0, r7, #16
   176fc:	f7ff fc5e 	bl	16fbc <POINTonE1_gather_booth_w4>
   17700:	2300      	movs	r3, #0
   17702:	4621      	mov	r1, r4
   17704:	4620      	mov	r0, r4
   17706:	f107 0210 	add.w	r2, r7, #16
   1770a:	f7f5 f8e3 	bl	c8d4 <POINTonE1_dadd>
   1770e:	f1b8 0f01 	cmp.w	r8, #1
   17712:	46b3      	mov	fp, r6
   17714:	d1d9      	bne.n	176ca <POINTonE1s_mult_w4.constprop.0+0x74>
   17716:	f04f 0804 	mov.w	r8, #4
   1771a:	4621      	mov	r1, r4
   1771c:	4620      	mov	r0, r4
   1771e:	f7f5 ff59 	bl	d5d4 <POINTonE1_double>
   17722:	f1b8 0801 	subs.w	r8, r8, #1
   17726:	d1f8      	bne.n	1771a <POINTonE1s_mult_w4.constprop.0+0xc4>
   17728:	221f      	movs	r2, #31
   1772a:	68fb      	ldr	r3, [r7, #12]
   1772c:	60ba      	str	r2, [r7, #8]
   1772e:	3b04      	subs	r3, #4
   17730:	60fb      	str	r3, [r7, #12]
   17732:	68fa      	ldr	r2, [r7, #12]
   17734:	2304      	movs	r3, #4
   17736:	3201      	adds	r2, #1
   17738:	d003      	beq.n	17742 <POINTonE1s_mult_w4.constprop.0+0xec>
   1773a:	46ca      	mov	sl, r9
   1773c:	e7bf      	b.n	176be <POINTonE1s_mult_w4.constprop.0+0x68>
   1773e:	3510      	adds	r5, #16
   17740:	e7cb      	b.n	176da <POINTonE1s_mult_w4.constprop.0+0x84>
   17742:	f506 6610 	add.w	r6, r6, #2304	; 0x900
   17746:	f8d9 3000 	ldr.w	r3, [r9]
   1774a:	b1f3      	cbz	r3, 1778a <POINTonE1s_mult_w4.constprop.0+0x134>
   1774c:	461d      	mov	r5, r3
   1774e:	f109 0904 	add.w	r9, r9, #4
   17752:	7828      	ldrb	r0, [r5, #0]
   17754:	2104      	movs	r1, #4
   17756:	0040      	lsls	r0, r0, #1
   17758:	f000 001e 	and.w	r0, r0, #30
   1775c:	f7fe fc04 	bl	15f68 <booth_encode>
   17760:	4659      	mov	r1, fp
   17762:	4602      	mov	r2, r0
   17764:	f107 0010 	add.w	r0, r7, #16
   17768:	f7ff fc28 	bl	16fbc <POINTonE1_gather_booth_w4>
   1776c:	f50b 6b90 	add.w	fp, fp, #1152	; 0x480
   17770:	2300      	movs	r3, #0
   17772:	4621      	mov	r1, r4
   17774:	4620      	mov	r0, r4
   17776:	f107 0210 	add.w	r2, r7, #16
   1777a:	f7f5 f8ab 	bl	c8d4 <POINTonE1_dadd>
   1777e:	455e      	cmp	r6, fp
   17780:	d1e1      	bne.n	17746 <POINTonE1s_mult_w4.constprop.0+0xf0>
   17782:	37a4      	adds	r7, #164	; 0xa4
   17784:	46bd      	mov	sp, r7
   17786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1778a:	3510      	adds	r5, #16
   1778c:	e7e1      	b.n	17752 <POINTonE1s_mult_w4.constprop.0+0xfc>

0001778e <mul_by_3_mod_384x>:
{
   1778e:	b570      	push	{r4, r5, r6, lr}
   17790:	4604      	mov	r4, r0
   17792:	460d      	mov	r5, r1
   17794:	4616      	mov	r6, r2
    mul_by_3_mod_384(ret[0], a[0], mod);
   17796:	f7ff fbfa 	bl	16f8e <mul_by_3_mod_384>
    mul_by_3_mod_384(ret[1], a[1], mod);
   1779a:	4632      	mov	r2, r6
   1779c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   177a0:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
   177a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mul_by_3_mod_384(ret[1], a[1], mod);
   177a8:	f7ff bbf1 	b.w	16f8e <mul_by_3_mod_384>

000177ac <mul_by_8_mod_384x>:
{
   177ac:	b570      	push	{r4, r5, r6, lr}
   177ae:	460d      	mov	r5, r1
   177b0:	4616      	mov	r6, r2
    mul_by_8_mod_384(ret[0], a[0], mod);
   177b2:	f7ff feba 	bl	1752a <mul_by_8_mod_384>
    mul_by_8_mod_384(ret[1], a[1], mod);
   177b6:	4632      	mov	r2, r6
   177b8:	f105 0130 	add.w	r1, r5, #48	; 0x30
   177bc:	3030      	adds	r0, #48	; 0x30
}
   177be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    mul_by_8_mod_384(ret[1], a[1], mod);
   177c2:	f7ff beb2 	b.w	1752a <mul_by_8_mod_384>

000177c6 <mul_by_1_plus_i_mod_384x>:
{
   177c6:	b5f0      	push	{r4, r5, r6, r7, lr}
   177c8:	4604      	mov	r4, r0
   177ca:	460d      	mov	r5, r1
   177cc:	4616      	mov	r6, r2
   177ce:	b08d      	sub	sp, #52	; 0x34
    add_mod_384(t, a[0], a[1], mod);
   177d0:	f101 0730 	add.w	r7, r1, #48	; 0x30
   177d4:	4613      	mov	r3, r2
   177d6:	4668      	mov	r0, sp
   177d8:	463a      	mov	r2, r7
   177da:	f7ff fb15 	bl	16e08 <add_mod_384>
    sub_mod_384(ret[0], a[0], a[1], mod);
   177de:	4633      	mov	r3, r6
   177e0:	463a      	mov	r2, r7
   177e2:	4629      	mov	r1, r5
   177e4:	4620      	mov	r0, r4
   177e6:	f7ff fb16 	bl	16e16 <sub_mod_384>
    vec_copy(ret[1], t, sizeof(t));
   177ea:	2230      	movs	r2, #48	; 0x30
   177ec:	4669      	mov	r1, sp
   177ee:	18a0      	adds	r0, r4, r2
   177f0:	f7fe fb5b 	bl	15eaa <vec_copy>
}
   177f4:	b00d      	add	sp, #52	; 0x34
   177f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000177f8 <add_mod_384x>:
{
   177f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177fc:	4604      	mov	r4, r0
   177fe:	460d      	mov	r5, r1
   17800:	4616      	mov	r6, r2
   17802:	461f      	mov	r7, r3
    add_mod_384(ret[0], a[0], b[0], mod);
   17804:	f7ff fb00 	bl	16e08 <add_mod_384>
    add_mod_384(ret[1], a[1], b[1], mod);
   17808:	463b      	mov	r3, r7
   1780a:	f106 0230 	add.w	r2, r6, #48	; 0x30
   1780e:	f105 0130 	add.w	r1, r5, #48	; 0x30
   17812:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
   17816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    add_mod_384(ret[1], a[1], b[1], mod);
   1781a:	f7ff baf5 	b.w	16e08 <add_mod_384>

0001781e <map_fp2>:
{
   1781e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17822:	4605      	mov	r5, r0
   17824:	460e      	mov	r6, r1
   17826:	4617      	mov	r7, r2
   17828:	461c      	mov	r4, r3
        add_fp2(acc, acc, map[n]);
   1782a:	f04f 0860 	mov.w	r8, #96	; 0x60
    while (n--) {
   1782e:	3c01      	subs	r4, #1
   17830:	d201      	bcs.n	17836 <map_fp2+0x18>
}
   17832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mul_fp2(acc, acc, x);
   17836:	4632      	mov	r2, r6
   17838:	4629      	mov	r1, r5
   1783a:	4628      	mov	r0, r5
   1783c:	f7f5 f97a 	bl	cb34 <mul_fp2>
        add_fp2(acc, acc, map[n]);
   17840:	4629      	mov	r1, r5
   17842:	4628      	mov	r0, r5
   17844:	fb08 7204 	mla	r2, r8, r4, r7
   17848:	f7f5 fff0 	bl	d82c <add_fp2>
   1784c:	e7ef      	b.n	1782e <map_fp2+0x10>

0001784e <add_fp6>:
{
   1784e:	b570      	push	{r4, r5, r6, lr}
   17850:	4604      	mov	r4, r0
   17852:	460d      	mov	r5, r1
   17854:	4616      	mov	r6, r2
    add_fp2(ret[0], a[0], b[0]);
   17856:	f7f5 ffe9 	bl	d82c <add_fp2>
    add_fp2(ret[1], a[1], b[1]);
   1785a:	f106 0260 	add.w	r2, r6, #96	; 0x60
   1785e:	f105 0160 	add.w	r1, r5, #96	; 0x60
   17862:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17866:	f7f5 ffe1 	bl	d82c <add_fp2>
    add_fp2(ret[2], a[2], b[2]);
   1786a:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   1786e:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   17872:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
}
   17876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    add_fp2(ret[2], a[2], b[2]);
   1787a:	f7f5 bfd7 	b.w	d82c <add_fp2>

0001787e <sub_mod_384x>:
{
   1787e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17882:	4604      	mov	r4, r0
   17884:	460d      	mov	r5, r1
   17886:	4616      	mov	r6, r2
   17888:	461f      	mov	r7, r3
    sub_mod_384(ret[0], a[0], b[0], mod);
   1788a:	f7ff fac4 	bl	16e16 <sub_mod_384>
    sub_mod_384(ret[1], a[1], b[1], mod);
   1788e:	463b      	mov	r3, r7
   17890:	f106 0230 	add.w	r2, r6, #48	; 0x30
   17894:	f105 0130 	add.w	r1, r5, #48	; 0x30
   17898:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
   1789c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    sub_mod_384(ret[1], a[1], b[1], mod);
   178a0:	f7ff bab9 	b.w	16e16 <sub_mod_384>

000178a4 <mul_fp6>:
{
   178a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   178a8:	460d      	mov	r5, r1
   178aa:	4614      	mov	r4, r2
   178ac:	4607      	mov	r7, r0
   178ae:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    mul_fp2(t1, a[1], b[1]);
   178b2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   178b6:	f105 0a60 	add.w	sl, r5, #96	; 0x60
    mul_fp2(t0, a[0], b[0]);
   178ba:	4668      	mov	r0, sp
   178bc:	f7f5 f93a 	bl	cb34 <mul_fp2>
    mul_fp2(t2, a[2], b[2]);
   178c0:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
   178c4:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
    mul_fp2(t1, a[1], b[1]);
   178c8:	4632      	mov	r2, r6
   178ca:	4651      	mov	r1, sl
   178cc:	a818      	add	r0, sp, #96	; 0x60
   178ce:	f7f5 f931 	bl	cb34 <mul_fp2>
    mul_fp2(t2, a[2], b[2]);
   178d2:	4642      	mov	r2, r8
   178d4:	4649      	mov	r1, r9
   178d6:	a830      	add	r0, sp, #192	; 0xc0
   178d8:	f7f5 f92c 	bl	cb34 <mul_fp2>
    add_fp2(t4, a[1], a[2]);
   178dc:	464a      	mov	r2, r9
   178de:	4651      	mov	r1, sl
   178e0:	a860      	add	r0, sp, #384	; 0x180
   178e2:	f7f5 ffa3 	bl	d82c <add_fp2>
    add_fp2(t5, b[1], b[2]);
   178e6:	4642      	mov	r2, r8
   178e8:	4631      	mov	r1, r6
   178ea:	a878      	add	r0, sp, #480	; 0x1e0
   178ec:	f7f5 ff9e 	bl	d82c <add_fp2>
    mul_fp2(t3, t4, t5);
   178f0:	aa78      	add	r2, sp, #480	; 0x1e0
   178f2:	a960      	add	r1, sp, #384	; 0x180
   178f4:	a848      	add	r0, sp, #288	; 0x120
   178f6:	f7f5 f91d 	bl	cb34 <mul_fp2>
    sub_fp2(t3, t3, t1);
   178fa:	a948      	add	r1, sp, #288	; 0x120
   178fc:	4608      	mov	r0, r1
   178fe:	aa18      	add	r2, sp, #96	; 0x60
   17900:	f7f5 ff9a 	bl	d838 <sub_fp2>
    sub_fp2(t3, t3, t2);
   17904:	a948      	add	r1, sp, #288	; 0x120
   17906:	aa30      	add	r2, sp, #192	; 0xc0
   17908:	4608      	mov	r0, r1
   1790a:	f7f5 ff95 	bl	d838 <sub_fp2>
    mul_by_u_plus_1_fp2(t3, t3);
   1790e:	a948      	add	r1, sp, #288	; 0x120
   17910:	4608      	mov	r0, r1
   17912:	f7f5 ff85 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(t4, a[0], a[1]);
   17916:	4652      	mov	r2, sl
   17918:	4629      	mov	r1, r5
   1791a:	a860      	add	r0, sp, #384	; 0x180
   1791c:	f7f5 ff86 	bl	d82c <add_fp2>
    add_fp2(t5, b[0], b[1]);
   17920:	4632      	mov	r2, r6
   17922:	4621      	mov	r1, r4
    mul_fp2(ret[1], t4, t5);
   17924:	f107 0660 	add.w	r6, r7, #96	; 0x60
    add_fp2(t5, b[0], b[1]);
   17928:	a878      	add	r0, sp, #480	; 0x1e0
   1792a:	f7f5 ff7f 	bl	d82c <add_fp2>
    mul_fp2(ret[1], t4, t5);
   1792e:	4630      	mov	r0, r6
   17930:	aa78      	add	r2, sp, #480	; 0x1e0
   17932:	a960      	add	r1, sp, #384	; 0x180
   17934:	f7f5 f8fe 	bl	cb34 <mul_fp2>
    sub_fp2(ret[1], ret[1], t0);
   17938:	466a      	mov	r2, sp
   1793a:	4631      	mov	r1, r6
   1793c:	4630      	mov	r0, r6
   1793e:	f7f5 ff7b 	bl	d838 <sub_fp2>
    sub_fp2(ret[1], ret[1], t1);
   17942:	aa18      	add	r2, sp, #96	; 0x60
   17944:	4631      	mov	r1, r6
   17946:	4630      	mov	r0, r6
   17948:	f7f5 ff76 	bl	d838 <sub_fp2>
    mul_by_u_plus_1_fp2(t4, t2);
   1794c:	a930      	add	r1, sp, #192	; 0xc0
   1794e:	a860      	add	r0, sp, #384	; 0x180
   17950:	f7f5 ff66 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[1], ret[1], t4);
   17954:	4631      	mov	r1, r6
   17956:	4630      	mov	r0, r6
   17958:	aa60      	add	r2, sp, #384	; 0x180
   1795a:	f7f5 ff67 	bl	d82c <add_fp2>
    add_fp2(t4, a[0], a[2]);
   1795e:	464a      	mov	r2, r9
   17960:	4629      	mov	r1, r5
   17962:	a860      	add	r0, sp, #384	; 0x180
   17964:	f7f5 ff62 	bl	d82c <add_fp2>
    add_fp2(t5, b[0], b[2]);
   17968:	4642      	mov	r2, r8
   1796a:	4621      	mov	r1, r4
   1796c:	a878      	add	r0, sp, #480	; 0x1e0
    mul_fp2(ret[2], t4, t5);
   1796e:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
    add_fp2(t5, b[0], b[2]);
   17972:	f7f5 ff5b 	bl	d82c <add_fp2>
    mul_fp2(ret[2], t4, t5);
   17976:	4620      	mov	r0, r4
   17978:	aa78      	add	r2, sp, #480	; 0x1e0
   1797a:	a960      	add	r1, sp, #384	; 0x180
   1797c:	f7f5 f8da 	bl	cb34 <mul_fp2>
    sub_fp2(ret[2], ret[2], t0);
   17980:	466a      	mov	r2, sp
   17982:	4621      	mov	r1, r4
   17984:	4620      	mov	r0, r4
   17986:	f7f5 ff57 	bl	d838 <sub_fp2>
    sub_fp2(ret[2], ret[2], t2);
   1798a:	4621      	mov	r1, r4
   1798c:	4620      	mov	r0, r4
   1798e:	aa30      	add	r2, sp, #192	; 0xc0
   17990:	f7f5 ff52 	bl	d838 <sub_fp2>
    add_fp2(ret[2], ret[2], t1);
   17994:	4621      	mov	r1, r4
   17996:	4620      	mov	r0, r4
   17998:	aa18      	add	r2, sp, #96	; 0x60
   1799a:	f7f5 ff47 	bl	d82c <add_fp2>
    add_fp2(ret[0], t3, t0);    /* ... moved from above */
   1799e:	466a      	mov	r2, sp
   179a0:	4638      	mov	r0, r7
   179a2:	a948      	add	r1, sp, #288	; 0x120
   179a4:	f7f5 ff42 	bl	d82c <add_fp2>
}
   179a8:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   179ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000179b0 <sub_fp6>:
{
   179b0:	b570      	push	{r4, r5, r6, lr}
   179b2:	4604      	mov	r4, r0
   179b4:	460d      	mov	r5, r1
   179b6:	4616      	mov	r6, r2
    sub_fp2(ret[0], a[0], b[0]);
   179b8:	f7f5 ff3e 	bl	d838 <sub_fp2>
    sub_fp2(ret[1], a[1], b[1]);
   179bc:	f106 0260 	add.w	r2, r6, #96	; 0x60
   179c0:	f105 0160 	add.w	r1, r5, #96	; 0x60
   179c4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   179c8:	f7f5 ff36 	bl	d838 <sub_fp2>
    sub_fp2(ret[2], a[2], b[2]);
   179cc:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
   179d0:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   179d4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
}
   179d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sub_fp2(ret[2], a[2], b[2]);
   179dc:	f7f5 bf2c 	b.w	d838 <sub_fp2>

000179e0 <mul_fp12>:
{
   179e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179e4:	460d      	mov	r5, r1
   179e6:	4616      	mov	r6, r2
   179e8:	4604      	mov	r4, r0
   179ea:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
    mul_fp6(t1, a[1], b[1]);
   179ee:	f505 7890 	add.w	r8, r5, #288	; 0x120
    mul_fp6(t0, a[0], b[0]);
   179f2:	4668      	mov	r0, sp
    mul_fp6(t1, a[1], b[1]);
   179f4:	f506 7790 	add.w	r7, r6, #288	; 0x120
    mul_fp6(t0, a[0], b[0]);
   179f8:	f7ff ff54 	bl	178a4 <mul_fp6>
    mul_fp6(t1, a[1], b[1]);
   179fc:	463a      	mov	r2, r7
   179fe:	4641      	mov	r1, r8
   17a00:	a848      	add	r0, sp, #288	; 0x120
   17a02:	f7ff ff4f 	bl	178a4 <mul_fp6>
    add_fp6(t2, a[0], a[1]);
   17a06:	4642      	mov	r2, r8
   17a08:	4629      	mov	r1, r5
   17a0a:	a890      	add	r0, sp, #576	; 0x240
    add_fp6(ret[1], b[0], b[1]);
   17a0c:	f504 7590 	add.w	r5, r4, #288	; 0x120
    add_fp6(t2, a[0], a[1]);
   17a10:	f7ff ff1d 	bl	1784e <add_fp6>
    add_fp6(ret[1], b[0], b[1]);
   17a14:	463a      	mov	r2, r7
   17a16:	4631      	mov	r1, r6
   17a18:	4628      	mov	r0, r5
   17a1a:	f7ff ff18 	bl	1784e <add_fp6>
    mul_fp6(ret[1], ret[1], t2);
   17a1e:	4629      	mov	r1, r5
   17a20:	4628      	mov	r0, r5
   17a22:	aa90      	add	r2, sp, #576	; 0x240
   17a24:	f7ff ff3e 	bl	178a4 <mul_fp6>
    sub_fp6(ret[1], ret[1], t0);
   17a28:	466a      	mov	r2, sp
   17a2a:	4629      	mov	r1, r5
   17a2c:	4628      	mov	r0, r5
   17a2e:	f7ff ffbf 	bl	179b0 <sub_fp6>
    sub_fp6(ret[1], ret[1], t1);
   17a32:	aa48      	add	r2, sp, #288	; 0x120
   17a34:	4629      	mov	r1, r5
   17a36:	4628      	mov	r0, r5
   17a38:	f7ff ffba 	bl	179b0 <sub_fp6>
    mul_by_u_plus_1_fp2(t1[2], t1[2]);
   17a3c:	a978      	add	r1, sp, #480	; 0x1e0
   17a3e:	4608      	mov	r0, r1
   17a40:	f7f5 feee 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[0][0], t0[0], t1[2]);
   17a44:	4669      	mov	r1, sp
   17a46:	4620      	mov	r0, r4
   17a48:	aa78      	add	r2, sp, #480	; 0x1e0
   17a4a:	f7f5 feef 	bl	d82c <add_fp2>
    add_fp2(ret[0][1], t0[1], t1[0]);
   17a4e:	aa48      	add	r2, sp, #288	; 0x120
   17a50:	a918      	add	r1, sp, #96	; 0x60
   17a52:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17a56:	f7f5 fee9 	bl	d82c <add_fp2>
    add_fp2(ret[0][2], t0[2], t1[1]);
   17a5a:	aa60      	add	r2, sp, #384	; 0x180
   17a5c:	a930      	add	r1, sp, #192	; 0xc0
   17a5e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   17a62:	f7f5 fee3 	bl	d82c <add_fp2>
}
   17a66:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   17a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017a6e <sqr_fp12>:
{
   17a6e:	b570      	push	{r4, r5, r6, lr}
   17a70:	460d      	mov	r5, r1
   17a72:	4604      	mov	r4, r0
   17a74:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    add_fp6(t0, a[0], a[1]);
   17a78:	f501 7690 	add.w	r6, r1, #288	; 0x120
   17a7c:	4632      	mov	r2, r6
   17a7e:	4668      	mov	r0, sp
   17a80:	f7ff fee5 	bl	1784e <add_fp6>
    mul_by_u_plus_1_fp2(t1[2], a[1][2]);
   17a84:	f505 71f0 	add.w	r1, r5, #480	; 0x1e0
   17a88:	a878      	add	r0, sp, #480	; 0x1e0
   17a8a:	f7f5 fec9 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(t1[0], a[0][0], t1[2]);
   17a8e:	4629      	mov	r1, r5
   17a90:	aa78      	add	r2, sp, #480	; 0x1e0
   17a92:	a848      	add	r0, sp, #288	; 0x120
   17a94:	f7f5 feca 	bl	d82c <add_fp2>
    add_fp2(t1[1], a[0][1], a[1][0]);
   17a98:	4632      	mov	r2, r6
   17a9a:	f105 0160 	add.w	r1, r5, #96	; 0x60
   17a9e:	a860      	add	r0, sp, #384	; 0x180
   17aa0:	f7f5 fec4 	bl	d82c <add_fp2>
    add_fp2(t1[2], a[0][2], a[1][1]);
   17aa4:	f505 72c0 	add.w	r2, r5, #384	; 0x180
   17aa8:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   17aac:	a878      	add	r0, sp, #480	; 0x1e0
   17aae:	f7f5 febd 	bl	d82c <add_fp2>
    mul_fp6(t0, t0, t1);
   17ab2:	4669      	mov	r1, sp
   17ab4:	4668      	mov	r0, sp
   17ab6:	aa48      	add	r2, sp, #288	; 0x120
   17ab8:	f7ff fef4 	bl	178a4 <mul_fp6>
    mul_fp6(t1, a[0], a[1]);
   17abc:	4632      	mov	r2, r6
   17abe:	4629      	mov	r1, r5
   17ac0:	a848      	add	r0, sp, #288	; 0x120
   17ac2:	f7ff feef 	bl	178a4 <mul_fp6>
    add_fp6(ret[1], t1, t1);
   17ac6:	aa48      	add	r2, sp, #288	; 0x120
   17ac8:	4611      	mov	r1, r2
   17aca:	f504 7090 	add.w	r0, r4, #288	; 0x120
   17ace:	f7ff febe 	bl	1784e <add_fp6>
    sub_fp6(ret[0], t0, t1);
   17ad2:	aa48      	add	r2, sp, #288	; 0x120
   17ad4:	4669      	mov	r1, sp
   17ad6:	4620      	mov	r0, r4
   17ad8:	f7ff ff6a 	bl	179b0 <sub_fp6>
    mul_by_u_plus_1_fp2(t1[2], t1[2]);
   17adc:	a978      	add	r1, sp, #480	; 0x1e0
   17ade:	4608      	mov	r0, r1
   17ae0:	f7f5 fe9e 	bl	d820 <mul_by_u_plus_1_fp2>
    sub_fp2(ret[0][0], ret[0][0], t1[2]);
   17ae4:	4621      	mov	r1, r4
   17ae6:	4620      	mov	r0, r4
   17ae8:	aa78      	add	r2, sp, #480	; 0x1e0
   17aea:	f7f5 fea5 	bl	d838 <sub_fp2>
    sub_fp2(ret[0][1], ret[0][1], t1[0]);
   17aee:	f104 0160 	add.w	r1, r4, #96	; 0x60
   17af2:	4608      	mov	r0, r1
   17af4:	aa48      	add	r2, sp, #288	; 0x120
   17af6:	f7f5 fe9f 	bl	d838 <sub_fp2>
    sub_fp2(ret[0][2], ret[0][2], t1[1]);
   17afa:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   17afe:	4608      	mov	r0, r1
   17b00:	aa60      	add	r2, sp, #384	; 0x180
   17b02:	f7f5 fe99 	bl	d838 <sub_fp2>
}
   17b06:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   17b0a:	bd70      	pop	{r4, r5, r6, pc}

00017b0c <mul_by_xy0_fp6>:
{
   17b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17b10:	460e      	mov	r6, r1
   17b12:	4615      	mov	r5, r2
   17b14:	4604      	mov	r4, r0
   17b16:	b0f9      	sub	sp, #484	; 0x1e4
    mul_fp2(t1, a[1], b[1]);
   17b18:	f106 0960 	add.w	r9, r6, #96	; 0x60
   17b1c:	f105 0760 	add.w	r7, r5, #96	; 0x60
    mul_fp2(t0, a[0], b[0]);
   17b20:	4668      	mov	r0, sp
   17b22:	f7f5 f807 	bl	cb34 <mul_fp2>
    mul_fp2(t3, a[2], b[1]);
   17b26:	f106 08c0 	add.w	r8, r6, #192	; 0xc0
    mul_fp2(t1, a[1], b[1]);
   17b2a:	463a      	mov	r2, r7
   17b2c:	4649      	mov	r1, r9
   17b2e:	a818      	add	r0, sp, #96	; 0x60
   17b30:	f7f5 f800 	bl	cb34 <mul_fp2>
    mul_fp2(t3, a[2], b[1]);
   17b34:	463a      	mov	r2, r7
   17b36:	4641      	mov	r1, r8
   17b38:	a830      	add	r0, sp, #192	; 0xc0
   17b3a:	f7f4 fffb 	bl	cb34 <mul_fp2>
    mul_by_u_plus_1_fp2(t3, t3);
   17b3e:	a930      	add	r1, sp, #192	; 0xc0
   17b40:	4608      	mov	r0, r1
   17b42:	f7f5 fe6d 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(t4, a[0], a[1]);
   17b46:	464a      	mov	r2, r9
   17b48:	4631      	mov	r1, r6
   17b4a:	a848      	add	r0, sp, #288	; 0x120
    mul_fp2(ret[1], t4, t5);
   17b4c:	f104 0660 	add.w	r6, r4, #96	; 0x60
    add_fp2(t4, a[0], a[1]);
   17b50:	f7f5 fe6c 	bl	d82c <add_fp2>
    add_fp2(t5, b[0], b[1]);
   17b54:	463a      	mov	r2, r7
   17b56:	4629      	mov	r1, r5
   17b58:	a860      	add	r0, sp, #384	; 0x180
   17b5a:	f7f5 fe67 	bl	d82c <add_fp2>
    mul_fp2(ret[1], t4, t5);
   17b5e:	4630      	mov	r0, r6
   17b60:	aa60      	add	r2, sp, #384	; 0x180
   17b62:	a948      	add	r1, sp, #288	; 0x120
   17b64:	f7f4 ffe6 	bl	cb34 <mul_fp2>
    sub_fp2(ret[1], ret[1], t0);
   17b68:	466a      	mov	r2, sp
   17b6a:	4631      	mov	r1, r6
   17b6c:	4630      	mov	r0, r6
   17b6e:	f7f5 fe63 	bl	d838 <sub_fp2>
    sub_fp2(ret[1], ret[1], t1);
   17b72:	4631      	mov	r1, r6
   17b74:	4630      	mov	r0, r6
   17b76:	aa18      	add	r2, sp, #96	; 0x60
    mul_fp2(ret[2], a[2], b[0]);
   17b78:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
    sub_fp2(ret[1], ret[1], t1);
   17b7c:	f7f5 fe5c 	bl	d838 <sub_fp2>
    mul_fp2(ret[2], a[2], b[0]);
   17b80:	462a      	mov	r2, r5
   17b82:	4641      	mov	r1, r8
   17b84:	4630      	mov	r0, r6
   17b86:	f7f4 ffd5 	bl	cb34 <mul_fp2>
    add_fp2(ret[2], ret[2], t1);
   17b8a:	4631      	mov	r1, r6
   17b8c:	4630      	mov	r0, r6
   17b8e:	aa18      	add	r2, sp, #96	; 0x60
   17b90:	f7f5 fe4c 	bl	d82c <add_fp2>
    add_fp2(ret[0], t3, t0);    /* ... moved from above */
   17b94:	466a      	mov	r2, sp
   17b96:	4620      	mov	r0, r4
   17b98:	a930      	add	r1, sp, #192	; 0xc0
   17b9a:	f7f5 fe47 	bl	d82c <add_fp2>
}
   17b9e:	b079      	add	sp, #484	; 0x1e4
   17ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017ba4 <mul_by_xy00z0_fp12>:
{
   17ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17ba8:	4615      	mov	r5, r2
   17baa:	460e      	mov	r6, r1
   17bac:	4604      	mov	r4, r0
   17bae:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
    mul_by_0y0_fp6(t1, a[1], xy00z0[2]);
   17bb2:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
    mul_by_xy0_fp6(t0, a[0], xy00z0);
   17bb6:	4668      	mov	r0, sp
   17bb8:	f7ff ffa8 	bl	17b0c <mul_by_xy0_fp6>
    mul_fp2(t,      a[2], b);
   17bbc:	463a      	mov	r2, r7
   17bbe:	f506 71f0 	add.w	r1, r6, #480	; 0x1e0
   17bc2:	a890      	add	r0, sp, #576	; 0x240
   17bc4:	f7f4 ffb6 	bl	cb34 <mul_fp2>
    mul_by_0y0_fp6(t1, a[1], xy00z0[2]);
   17bc8:	f506 7890 	add.w	r8, r6, #288	; 0x120
    mul_fp2(ret[2], a[1], b);
   17bcc:	463a      	mov	r2, r7
   17bce:	f506 71c0 	add.w	r1, r6, #384	; 0x180
   17bd2:	a878      	add	r0, sp, #480	; 0x1e0
   17bd4:	f7f4 ffae 	bl	cb34 <mul_fp2>
    mul_fp2(ret[1], a[0], b);
   17bd8:	463a      	mov	r2, r7
   17bda:	4641      	mov	r1, r8
   17bdc:	a860      	add	r0, sp, #384	; 0x180
   17bde:	f7f4 ffa9 	bl	cb34 <mul_fp2>
    mul_by_u_plus_1_fp2(ret[0], t);
   17be2:	a990      	add	r1, sp, #576	; 0x240
   17be4:	a848      	add	r0, sp, #288	; 0x120
   17be6:	f7f5 fe1b 	bl	d820 <mul_by_u_plus_1_fp2>
    vec_copy(t2[0], xy00z0[0], sizeof(t2[0]));
   17bea:	4629      	mov	r1, r5
   17bec:	a890      	add	r0, sp, #576	; 0x240
   17bee:	2260      	movs	r2, #96	; 0x60
   17bf0:	f7fe f95b 	bl	15eaa <vec_copy>
    add_fp2(t2[1], xy00z0[1], xy00z0[2]);
   17bf4:	463a      	mov	r2, r7
   17bf6:	f105 0160 	add.w	r1, r5, #96	; 0x60
   17bfa:	a8a8      	add	r0, sp, #672	; 0x2a0
    add_fp6(ret[1], a[0], a[1]);
   17bfc:	f504 7590 	add.w	r5, r4, #288	; 0x120
    add_fp2(t2[1], xy00z0[1], xy00z0[2]);
   17c00:	f7f5 fe14 	bl	d82c <add_fp2>
    add_fp6(ret[1], a[0], a[1]);
   17c04:	4642      	mov	r2, r8
   17c06:	4631      	mov	r1, r6
   17c08:	4628      	mov	r0, r5
   17c0a:	f7ff fe20 	bl	1784e <add_fp6>
    mul_by_xy0_fp6(ret[1], ret[1], t2);
   17c0e:	4629      	mov	r1, r5
   17c10:	4628      	mov	r0, r5
   17c12:	aa90      	add	r2, sp, #576	; 0x240
   17c14:	f7ff ff7a 	bl	17b0c <mul_by_xy0_fp6>
    sub_fp6(ret[1], ret[1], t0);
   17c18:	466a      	mov	r2, sp
   17c1a:	4629      	mov	r1, r5
   17c1c:	4628      	mov	r0, r5
   17c1e:	f7ff fec7 	bl	179b0 <sub_fp6>
    sub_fp6(ret[1], ret[1], t1);
   17c22:	aa48      	add	r2, sp, #288	; 0x120
   17c24:	4629      	mov	r1, r5
   17c26:	4628      	mov	r0, r5
   17c28:	f7ff fec2 	bl	179b0 <sub_fp6>
    mul_by_u_plus_1_fp2(t1[2], t1[2]);
   17c2c:	a978      	add	r1, sp, #480	; 0x1e0
   17c2e:	4608      	mov	r0, r1
   17c30:	f7f5 fdf6 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[0][0], t0[0], t1[2]);
   17c34:	4669      	mov	r1, sp
   17c36:	4620      	mov	r0, r4
   17c38:	aa78      	add	r2, sp, #480	; 0x1e0
   17c3a:	f7f5 fdf7 	bl	d82c <add_fp2>
    add_fp2(ret[0][1], t0[1], t1[0]);
   17c3e:	aa48      	add	r2, sp, #288	; 0x120
   17c40:	a918      	add	r1, sp, #96	; 0x60
   17c42:	f104 0060 	add.w	r0, r4, #96	; 0x60
   17c46:	f7f5 fdf1 	bl	d82c <add_fp2>
    add_fp2(ret[0][2], t0[2], t1[1]);
   17c4a:	aa60      	add	r2, sp, #384	; 0x180
   17c4c:	a930      	add	r1, sp, #192	; 0xc0
   17c4e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   17c52:	f7f5 fdeb 	bl	d82c <add_fp2>
}
   17c56:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   17c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017c5e <sqr_mont_384x>:
{
   17c5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17c62:	4614      	mov	r4, r2
   17c64:	4606      	mov	r6, r0
   17c66:	460d      	mov	r5, r1
   17c68:	461f      	mov	r7, r3
   17c6a:	b09b      	sub	sp, #108	; 0x6c
    add_mod_384(t0, a[0], a[1], mod);
   17c6c:	f101 0830 	add.w	r8, r1, #48	; 0x30
   17c70:	4613      	mov	r3, r2
   17c72:	a802      	add	r0, sp, #8
   17c74:	4642      	mov	r2, r8
   17c76:	f7ff f8c7 	bl	16e08 <add_mod_384>
    mul_mont_384(ret[1], a[0], a[1], mod, n0);
   17c7a:	f106 0930 	add.w	r9, r6, #48	; 0x30
    sub_mod_384(t1, a[0], a[1], mod);
   17c7e:	4623      	mov	r3, r4
   17c80:	4642      	mov	r2, r8
   17c82:	4629      	mov	r1, r5
   17c84:	a80e      	add	r0, sp, #56	; 0x38
   17c86:	f7ff f8c6 	bl	16e16 <sub_mod_384>
    mul_mont_384(ret[1], a[0], a[1], mod, n0);
   17c8a:	4623      	mov	r3, r4
   17c8c:	4642      	mov	r2, r8
   17c8e:	4629      	mov	r1, r5
   17c90:	4648      	mov	r0, r9
   17c92:	9700      	str	r7, [sp, #0]
   17c94:	f7ff f887 	bl	16da6 <mul_mont_384>
    add_mod_384(ret[1], ret[1], ret[1], mod);
   17c98:	4623      	mov	r3, r4
   17c9a:	464a      	mov	r2, r9
   17c9c:	4649      	mov	r1, r9
   17c9e:	4648      	mov	r0, r9
   17ca0:	f7ff f8b2 	bl	16e08 <add_mod_384>
    mul_mont_384(ret[0], t0, t1, mod, n0);
   17ca4:	4623      	mov	r3, r4
   17ca6:	4630      	mov	r0, r6
   17ca8:	9700      	str	r7, [sp, #0]
   17caa:	aa0e      	add	r2, sp, #56	; 0x38
   17cac:	a902      	add	r1, sp, #8
   17cae:	f7ff f87a 	bl	16da6 <mul_mont_384>
}
   17cb2:	b01b      	add	sp, #108	; 0x6c
   17cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017cb8 <blst_p2_compress>:
{
   17cb8:	b538      	push	{r3, r4, r5, lr}
   17cba:	460d      	mov	r5, r1
   17cbc:	4604      	mov	r4, r0
    if (vec_is_zero(in->Z, sizeof(in->Z))) {
   17cbe:	2160      	movs	r1, #96	; 0x60
   17cc0:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   17cc4:	f7fe f8d2 	bl	15e6c <vec_is_zero>
   17cc8:	b130      	cbz	r0, 17cd8 <blst_p2_compress+0x20>
        bytes_zero(out, 96);
   17cca:	2160      	movs	r1, #96	; 0x60
   17ccc:	4620      	mov	r0, r4
   17cce:	f7fe f8af 	bl	15e30 <bytes_zero>
        out[0] = 0xc0;    /* compressed and infinitiy bits */
   17cd2:	23c0      	movs	r3, #192	; 0xc0
        out[0] |= (unsigned char)(0x80 | ((sign & 2) << 4));
   17cd4:	7023      	strb	r3, [r4, #0]
}
   17cd6:	bd38      	pop	{r3, r4, r5, pc}
        limb_t sign = POINTonE2_Compress_BE(out, in);
   17cd8:	4629      	mov	r1, r5
   17cda:	4620      	mov	r0, r4
   17cdc:	f7f5 fe04 	bl	d8e8 <POINTonE2_Compress_BE>
        out[0] |= (unsigned char)(0x80 | ((sign & 2) << 4));
   17ce0:	0103      	lsls	r3, r0, #4
   17ce2:	7820      	ldrb	r0, [r4, #0]
   17ce4:	f003 0320 	and.w	r3, r3, #32
   17ce8:	4303      	orrs	r3, r0
   17cea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17cee:	e7f1      	b.n	17cd4 <blst_p2_compress+0x1c>

00017cf0 <POINTonE2_add>:
POINT_ADD_IMPL(POINTonE2, 384x, fp2)
   17cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17cf4:	f101 06c0 	add.w	r6, r1, #192	; 0xc0
   17cf8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   17cfc:	460d      	mov	r5, r1
   17cfe:	4680      	mov	r8, r0
   17d00:	2160      	movs	r1, #96	; 0x60
   17d02:	4630      	mov	r0, r6
   17d04:	4614      	mov	r4, r2
   17d06:	f7fe f8b1 	bl	15e6c <vec_is_zero>
   17d0a:	4631      	mov	r1, r6
   17d0c:	4681      	mov	r9, r0
   17d0e:	a802      	add	r0, sp, #8
   17d10:	f7f5 fd98 	bl	d844 <sqr_fp2>
   17d14:	4632      	mov	r2, r6
   17d16:	a902      	add	r1, sp, #8
   17d18:	a8da      	add	r0, sp, #872	; 0x368
   17d1a:	f7f4 ff0b 	bl	cb34 <mul_fp2>
   17d1e:	a9da      	add	r1, sp, #872	; 0x368
   17d20:	f104 0260 	add.w	r2, r4, #96	; 0x60
   17d24:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
   17d28:	4608      	mov	r0, r1
   17d2a:	f7f4 ff03 	bl	cb34 <mul_fp2>
   17d2e:	2160      	movs	r1, #96	; 0x60
   17d30:	4638      	mov	r0, r7
   17d32:	f7fe f89b 	bl	15e6c <vec_is_zero>
   17d36:	4639      	mov	r1, r7
   17d38:	4682      	mov	sl, r0
   17d3a:	a81a      	add	r0, sp, #104	; 0x68
   17d3c:	f7f5 fd82 	bl	d844 <sqr_fp2>
   17d40:	463a      	mov	r2, r7
   17d42:	a91a      	add	r1, sp, #104	; 0x68
   17d44:	a84a      	add	r0, sp, #296	; 0x128
   17d46:	f7f4 fef5 	bl	cb34 <mul_fp2>
   17d4a:	a94a      	add	r1, sp, #296	; 0x128
   17d4c:	4608      	mov	r0, r1
   17d4e:	f105 0260 	add.w	r2, r5, #96	; 0x60
   17d52:	f7f4 feef 	bl	cb34 <mul_fp2>
   17d56:	a9da      	add	r1, sp, #872	; 0x368
   17d58:	4608      	mov	r0, r1
   17d5a:	aa4a      	add	r2, sp, #296	; 0x128
   17d5c:	f7f5 fd6c 	bl	d838 <sub_fp2>
   17d60:	aada      	add	r2, sp, #872	; 0x368
   17d62:	4611      	mov	r1, r2
   17d64:	4610      	mov	r0, r2
   17d66:	f7f5 fd61 	bl	d82c <add_fp2>
   17d6a:	4629      	mov	r1, r5
   17d6c:	aa1a      	add	r2, sp, #104	; 0x68
   17d6e:	a832      	add	r0, sp, #200	; 0xc8
   17d70:	f7f4 fee0 	bl	cb34 <mul_fp2>
   17d74:	4621      	mov	r1, r4
   17d76:	aa02      	add	r2, sp, #8
   17d78:	a862      	add	r0, sp, #392	; 0x188
   17d7a:	f7f4 fedb 	bl	cb34 <mul_fp2>
   17d7e:	a962      	add	r1, sp, #392	; 0x188
   17d80:	4608      	mov	r0, r1
   17d82:	aa32      	add	r2, sp, #200	; 0xc8
   17d84:	f7f5 fd58 	bl	d838 <sub_fp2>
   17d88:	aa62      	add	r2, sp, #392	; 0x188
   17d8a:	4611      	mov	r1, r2
   17d8c:	a87a      	add	r0, sp, #488	; 0x1e8
   17d8e:	f7f5 fd4d 	bl	d82c <add_fp2>
   17d92:	a97a      	add	r1, sp, #488	; 0x1e8
   17d94:	4608      	mov	r0, r1
   17d96:	f7f5 fd55 	bl	d844 <sqr_fp2>
   17d9a:	aa7a      	add	r2, sp, #488	; 0x1e8
   17d9c:	a962      	add	r1, sp, #392	; 0x188
   17d9e:	a892      	add	r0, sp, #584	; 0x248
   17da0:	f7f4 fec8 	bl	cb34 <mul_fp2>
   17da4:	a94a      	add	r1, sp, #296	; 0x128
   17da6:	4608      	mov	r0, r1
   17da8:	aa92      	add	r2, sp, #584	; 0x248
   17daa:	f7f4 fec3 	bl	cb34 <mul_fp2>
   17dae:	aa7a      	add	r2, sp, #488	; 0x1e8
   17db0:	a932      	add	r1, sp, #200	; 0xc8
   17db2:	a8c2      	add	r0, sp, #776	; 0x308
   17db4:	f7f4 febe 	bl	cb34 <mul_fp2>
   17db8:	a9da      	add	r1, sp, #872	; 0x368
   17dba:	a8aa      	add	r0, sp, #680	; 0x2a8
   17dbc:	f7f5 fd42 	bl	d844 <sqr_fp2>
   17dc0:	a9aa      	add	r1, sp, #680	; 0x2a8
   17dc2:	4608      	mov	r0, r1
   17dc4:	aa92      	add	r2, sp, #584	; 0x248
   17dc6:	f7f5 fd37 	bl	d838 <sub_fp2>
   17dca:	a9aa      	add	r1, sp, #680	; 0x2a8
   17dcc:	4608      	mov	r0, r1
   17dce:	aac2      	add	r2, sp, #776	; 0x308
   17dd0:	f7f5 fd32 	bl	d838 <sub_fp2>
   17dd4:	a9aa      	add	r1, sp, #680	; 0x2a8
   17dd6:	4608      	mov	r0, r1
   17dd8:	aac2      	add	r2, sp, #776	; 0x308
   17dda:	f7f5 fd2d 	bl	d838 <sub_fp2>
   17dde:	a9c2      	add	r1, sp, #776	; 0x308
   17de0:	4608      	mov	r0, r1
   17de2:	aaaa      	add	r2, sp, #680	; 0x2a8
   17de4:	f7f5 fd28 	bl	d838 <sub_fp2>
   17de8:	a9c2      	add	r1, sp, #776	; 0x308
   17dea:	4608      	mov	r0, r1
   17dec:	aada      	add	r2, sp, #872	; 0x368
   17dee:	f7f4 fea1 	bl	cb34 <mul_fp2>
   17df2:	a9c2      	add	r1, sp, #776	; 0x308
   17df4:	4608      	mov	r0, r1
   17df6:	aa4a      	add	r2, sp, #296	; 0x128
   17df8:	f7f5 fd1e 	bl	d838 <sub_fp2>
   17dfc:	a9c2      	add	r1, sp, #776	; 0x308
   17dfe:	4608      	mov	r0, r1
   17e00:	aa4a      	add	r2, sp, #296	; 0x128
   17e02:	f7f5 fd19 	bl	d838 <sub_fp2>
   17e06:	463a      	mov	r2, r7
   17e08:	4631      	mov	r1, r6
   17e0a:	a8da      	add	r0, sp, #872	; 0x368
   17e0c:	f7f5 fd0e 	bl	d82c <add_fp2>
   17e10:	a9da      	add	r1, sp, #872	; 0x368
   17e12:	4608      	mov	r0, r1
   17e14:	f7f5 fd16 	bl	d844 <sqr_fp2>
   17e18:	a9da      	add	r1, sp, #872	; 0x368
   17e1a:	4608      	mov	r0, r1
   17e1c:	aa02      	add	r2, sp, #8
   17e1e:	f7f5 fd0b 	bl	d838 <sub_fp2>
   17e22:	a9da      	add	r1, sp, #872	; 0x368
   17e24:	4608      	mov	r0, r1
   17e26:	aa1a      	add	r2, sp, #104	; 0x68
   17e28:	f7f5 fd06 	bl	d838 <sub_fp2>
   17e2c:	a9da      	add	r1, sp, #872	; 0x368
   17e2e:	4608      	mov	r0, r1
   17e30:	aa62      	add	r2, sp, #392	; 0x188
   17e32:	f7f4 fe7f 	bl	cb34 <mul_fp2>
   17e36:	aaaa      	add	r2, sp, #680	; 0x2a8
   17e38:	4629      	mov	r1, r5
   17e3a:	4610      	mov	r0, r2
   17e3c:	f44f 7390 	mov.w	r3, #288	; 0x120
   17e40:	f8cd a000 	str.w	sl, [sp]
   17e44:	f7fd fffb 	bl	15e3e <vec_select>
   17e48:	f44f 7390 	mov.w	r3, #288	; 0x120
   17e4c:	4621      	mov	r1, r4
   17e4e:	4640      	mov	r0, r8
   17e50:	f8cd 9000 	str.w	r9, [sp]
   17e54:	aaaa      	add	r2, sp, #680	; 0x2a8
   17e56:	f7fd fff2 	bl	15e3e <vec_select>
   17e5a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   17e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017e62 <POINTonE2_dadd>:
POINT_DADD_IMPL(POINTonE2, 384x, fp2)
   17e62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e66:	460c      	mov	r4, r1
   17e68:	4615      	mov	r5, r2
   17e6a:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
   17e6e:	460a      	mov	r2, r1
   17e70:	4607      	mov	r7, r0
   17e72:	a8c4      	add	r0, sp, #784	; 0x310
   17e74:	469b      	mov	fp, r3
   17e76:	f7f5 fcd9 	bl	d82c <add_fp2>
   17e7a:	4621      	mov	r1, r4
   17e7c:	a8ac      	add	r0, sp, #688	; 0x2b0
   17e7e:	f7f5 fce1 	bl	d844 <sqr_fp2>
   17e82:	a9ac      	add	r1, sp, #688	; 0x2b0
   17e84:	4608      	mov	r0, r1
   17e86:	f104 0860 	add.w	r8, r4, #96	; 0x60
   17e8a:	f7f5 fcc3 	bl	d814 <mul_by_3_fp2>
   17e8e:	f105 0ac0 	add.w	sl, r5, #192	; 0xc0
   17e92:	4642      	mov	r2, r8
   17e94:	4641      	mov	r1, r8
   17e96:	a894      	add	r0, sp, #592	; 0x250
   17e98:	f7f5 fcc8 	bl	d82c <add_fp2>
   17e9c:	2160      	movs	r1, #96	; 0x60
   17e9e:	4650      	mov	r0, sl
   17ea0:	f7fd ffe4 	bl	15e6c <vec_is_zero>
   17ea4:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
   17ea8:	4651      	mov	r1, sl
   17eaa:	4681      	mov	r9, r0
   17eac:	a804      	add	r0, sp, #16
   17eae:	f7f5 fcc9 	bl	d844 <sqr_fp2>
   17eb2:	4652      	mov	r2, sl
   17eb4:	4631      	mov	r1, r6
   17eb6:	a834      	add	r0, sp, #208	; 0xd0
   17eb8:	f7f4 fe3c 	bl	cb34 <mul_fp2>
   17ebc:	2160      	movs	r1, #96	; 0x60
   17ebe:	4630      	mov	r0, r6
   17ec0:	f7fd ffd4 	bl	15e6c <vec_is_zero>
   17ec4:	4631      	mov	r1, r6
   17ec6:	9003      	str	r0, [sp, #12]
   17ec8:	a84c      	add	r0, sp, #304	; 0x130
   17eca:	f7f5 fcbb 	bl	d844 <sqr_fp2>
   17ece:	f1bb 0f00 	cmp.w	fp, #0
   17ed2:	d00d      	beq.n	17ef0 <POINTonE2_dadd+0x8e>
   17ed4:	a94c      	add	r1, sp, #304	; 0x130
   17ed6:	a81c      	add	r0, sp, #112	; 0x70
   17ed8:	f7f5 fcb4 	bl	d844 <sqr_fp2>
   17edc:	a91c      	add	r1, sp, #112	; 0x70
   17ede:	4608      	mov	r0, r1
   17ee0:	465a      	mov	r2, fp
   17ee2:	f7f4 fe27 	bl	cb34 <mul_fp2>
   17ee6:	a9ac      	add	r1, sp, #688	; 0x2b0
   17ee8:	4608      	mov	r0, r1
   17eea:	aa1c      	add	r2, sp, #112	; 0x70
   17eec:	f7f5 fc9e 	bl	d82c <add_fp2>
   17ef0:	4652      	mov	r2, sl
   17ef2:	4641      	mov	r1, r8
   17ef4:	a81c      	add	r0, sp, #112	; 0x70
   17ef6:	f7f4 fe1d 	bl	cb34 <mul_fp2>
   17efa:	a91c      	add	r1, sp, #112	; 0x70
   17efc:	4608      	mov	r0, r1
   17efe:	aa04      	add	r2, sp, #16
   17f00:	f7f4 fe18 	bl	cb34 <mul_fp2>
   17f04:	4632      	mov	r2, r6
   17f06:	f105 0160 	add.w	r1, r5, #96	; 0x60
   17f0a:	a864      	add	r0, sp, #400	; 0x190
   17f0c:	f7f4 fe12 	bl	cb34 <mul_fp2>
   17f10:	a964      	add	r1, sp, #400	; 0x190
   17f12:	4608      	mov	r0, r1
   17f14:	aa4c      	add	r2, sp, #304	; 0x130
   17f16:	f7f4 fe0d 	bl	cb34 <mul_fp2>
   17f1a:	a964      	add	r1, sp, #400	; 0x190
   17f1c:	4608      	mov	r0, r1
   17f1e:	aa1c      	add	r2, sp, #112	; 0x70
   17f20:	f7f5 fc8a 	bl	d838 <sub_fp2>
   17f24:	a904      	add	r1, sp, #16
   17f26:	4622      	mov	r2, r4
   17f28:	4608      	mov	r0, r1
   17f2a:	f7f4 fe03 	bl	cb34 <mul_fp2>
   17f2e:	a94c      	add	r1, sp, #304	; 0x130
   17f30:	462a      	mov	r2, r5
   17f32:	4608      	mov	r0, r1
   17f34:	f7f4 fdfe 	bl	cb34 <mul_fp2>
   17f38:	aa04      	add	r2, sp, #16
   17f3a:	a94c      	add	r1, sp, #304	; 0x130
   17f3c:	a87c      	add	r0, sp, #496	; 0x1f0
   17f3e:	f7f5 fc75 	bl	d82c <add_fp2>
   17f42:	a94c      	add	r1, sp, #304	; 0x130
   17f44:	aa04      	add	r2, sp, #16
   17f46:	4608      	mov	r0, r1
   17f48:	f7f5 fc76 	bl	d838 <sub_fp2>
   17f4c:	21c0      	movs	r1, #192	; 0xc0
   17f4e:	a84c      	add	r0, sp, #304	; 0x130
   17f50:	f7fd ff8c 	bl	15e6c <vec_is_zero>
   17f54:	4606      	mov	r6, r0
   17f56:	aa04      	add	r2, sp, #16
   17f58:	4621      	mov	r1, r4
   17f5a:	9000      	str	r0, [sp, #0]
   17f5c:	f44f 7390 	mov.w	r3, #288	; 0x120
   17f60:	4610      	mov	r0, r2
   17f62:	f7fd ff6c 	bl	15e3e <vec_select>
   17f66:	aa4c      	add	r2, sp, #304	; 0x130
   17f68:	f44f 7390 	mov.w	r3, #288	; 0x120
   17f6c:	4610      	mov	r0, r2
   17f6e:	a994      	add	r1, sp, #592	; 0x250
   17f70:	9600      	str	r6, [sp, #0]
   17f72:	f7fd ff64 	bl	15e3e <vec_select>
   17f76:	a934      	add	r1, sp, #208	; 0xd0
   17f78:	aa4c      	add	r2, sp, #304	; 0x130
   17f7a:	4608      	mov	r0, r1
   17f7c:	f7f4 fdda 	bl	cb34 <mul_fp2>
   17f80:	a94c      	add	r1, sp, #304	; 0x130
   17f82:	a894      	add	r0, sp, #592	; 0x250
   17f84:	f7f5 fc5e 	bl	d844 <sqr_fp2>
   17f88:	aa4c      	add	r2, sp, #304	; 0x130
   17f8a:	a994      	add	r1, sp, #592	; 0x250
   17f8c:	a8ac      	add	r0, sp, #688	; 0x2b0
   17f8e:	f7f4 fdd1 	bl	cb34 <mul_fp2>
   17f92:	a9ac      	add	r1, sp, #688	; 0x2b0
   17f94:	4608      	mov	r0, r1
   17f96:	aa1c      	add	r2, sp, #112	; 0x70
   17f98:	f7f4 fdcc 	bl	cb34 <mul_fp2>
   17f9c:	aa04      	add	r2, sp, #16
   17f9e:	a994      	add	r1, sp, #592	; 0x250
   17fa0:	a81c      	add	r0, sp, #112	; 0x70
   17fa2:	f7f4 fdc7 	bl	cb34 <mul_fp2>
   17fa6:	a994      	add	r1, sp, #592	; 0x250
   17fa8:	aa7c      	add	r2, sp, #496	; 0x1f0
   17faa:	4608      	mov	r0, r1
   17fac:	f7f4 fdc2 	bl	cb34 <mul_fp2>
   17fb0:	a964      	add	r1, sp, #400	; 0x190
   17fb2:	a804      	add	r0, sp, #16
   17fb4:	f7f5 fc46 	bl	d844 <sqr_fp2>
   17fb8:	a904      	add	r1, sp, #16
   17fba:	4608      	mov	r0, r1
   17fbc:	aa94      	add	r2, sp, #592	; 0x250
   17fbe:	f7f5 fc3b 	bl	d838 <sub_fp2>
   17fc2:	a91c      	add	r1, sp, #112	; 0x70
   17fc4:	4608      	mov	r0, r1
   17fc6:	aa04      	add	r2, sp, #16
   17fc8:	f7f5 fc36 	bl	d838 <sub_fp2>
   17fcc:	a91c      	add	r1, sp, #112	; 0x70
   17fce:	4608      	mov	r0, r1
   17fd0:	aa64      	add	r2, sp, #400	; 0x190
   17fd2:	f7f4 fdaf 	bl	cb34 <mul_fp2>
   17fd6:	a91c      	add	r1, sp, #112	; 0x70
   17fd8:	4608      	mov	r0, r1
   17fda:	aaac      	add	r2, sp, #688	; 0x2b0
   17fdc:	f7f5 fc2c 	bl	d838 <sub_fp2>
   17fe0:	aa04      	add	r2, sp, #16
   17fe2:	4621      	mov	r1, r4
   17fe4:	4610      	mov	r0, r2
   17fe6:	f44f 7390 	mov.w	r3, #288	; 0x120
   17fea:	f8cd 9000 	str.w	r9, [sp]
   17fee:	f7fd ff26 	bl	15e3e <vec_select>
   17ff2:	9b03      	ldr	r3, [sp, #12]
   17ff4:	4629      	mov	r1, r5
   17ff6:	9300      	str	r3, [sp, #0]
   17ff8:	4638      	mov	r0, r7
   17ffa:	f44f 7390 	mov.w	r3, #288	; 0x120
   17ffe:	aa04      	add	r2, sp, #16
   18000:	f7fd ff1d 	bl	15e3e <vec_select>
   18004:	f50d 7d5d 	add.w	sp, sp, #884	; 0x374
   18008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001800c <POINTonE2_precompute_w4>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE2, 4)
   1800c:	b570      	push	{r4, r5, r6, lr}
   1800e:	f44f 7290 	mov.w	r2, #288	; 0x120
   18012:	4605      	mov	r5, r0
   18014:	f7fd ff49 	bl	15eaa <vec_copy>
   18018:	f500 7490 	add.w	r4, r0, #288	; 0x120
   1801c:	4620      	mov	r0, r4
   1801e:	f7f5 fd9f 	bl	db60 <POINTonE2_double>
   18022:	f505 7610 	add.w	r6, r5, #576	; 0x240
   18026:	f505 6590 	add.w	r5, r5, #1152	; 0x480
   1802a:	4621      	mov	r1, r4
   1802c:	4630      	mov	r0, r6
   1802e:	f5a4 7290 	sub.w	r2, r4, #288	; 0x120
   18032:	f7ff fe5d 	bl	17cf0 <POINTonE2_add>
   18036:	4621      	mov	r1, r4
   18038:	f506 7090 	add.w	r0, r6, #288	; 0x120
   1803c:	f504 7490 	add.w	r4, r4, #288	; 0x120
   18040:	f7f5 fd8e 	bl	db60 <POINTonE2_double>
   18044:	42ac      	cmp	r4, r5
   18046:	f506 7610 	add.w	r6, r6, #576	; 0x240
   1804a:	d1ee      	bne.n	1802a <POINTonE2_precompute_w4+0x1e>
   1804c:	bd70      	pop	{r4, r5, r6, pc}

0001804e <POINTonE2_mult_w5>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE2, 5)
   1804e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18052:	4616      	mov	r6, r2
   18054:	f44f 7290 	mov.w	r2, #288	; 0x120
   18058:	f5ad 5d99 	sub.w	sp, sp, #4896	; 0x1320
   1805c:	b081      	sub	sp, #4
   1805e:	4605      	mov	r5, r0
   18060:	eb0d 0002 	add.w	r0, sp, r2
   18064:	461c      	mov	r4, r3
   18066:	f7fd ff20 	bl	15eaa <vec_copy>
   1806a:	a890      	add	r0, sp, #576	; 0x240
   1806c:	f7f5 fd78 	bl	db60 <POINTonE2_double>
   18070:	f04f 0902 	mov.w	r9, #2
   18074:	f50d 7858 	add.w	r8, sp, #864	; 0x360
   18078:	af48      	add	r7, sp, #288	; 0x120
   1807a:	463a      	mov	r2, r7
   1807c:	f507 7790 	add.w	r7, r7, #288	; 0x120
   18080:	4640      	mov	r0, r8
   18082:	4639      	mov	r1, r7
   18084:	f7ff fe34 	bl	17cf0 <POINTonE2_add>
   18088:	f109 0902 	add.w	r9, r9, #2
   1808c:	f508 7090 	add.w	r0, r8, #288	; 0x120
   18090:	4639      	mov	r1, r7
   18092:	f7f5 fd65 	bl	db60 <POINTonE2_double>
   18096:	f1b9 0f10 	cmp.w	r9, #16
   1809a:	f508 7810 	add.w	r8, r8, #576	; 0x240
   1809e:	d1ec      	bne.n	1807a <POINTonE2_mult_w5+0x2c>
   180a0:	2105      	movs	r1, #5
   180a2:	fbb4 f1f1 	udiv	r1, r4, r1
   180a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   180aa:	1a61      	subs	r1, r4, r1
   180ac:	1a64      	subs	r4, r4, r1
   180ae:	f101 0701 	add.w	r7, r1, #1
   180b2:	d032      	beq.n	1811a <POINTonE2_mult_w5+0xcc>
   180b4:	463a      	mov	r2, r7
   180b6:	4630      	mov	r0, r6
   180b8:	1e61      	subs	r1, r4, #1
   180ba:	f7fd ff49 	bl	15f50 <get_wval>
   180be:	f04f 33ff 	mov.w	r3, #4294967295
   180c2:	40bb      	lsls	r3, r7
   180c4:	2105      	movs	r1, #5
   180c6:	ea20 0003 	bic.w	r0, r0, r3
   180ca:	f7fd ff4d 	bl	15f68 <booth_encode>
   180ce:	a948      	add	r1, sp, #288	; 0x120
   180d0:	4602      	mov	r2, r0
   180d2:	4628      	mov	r0, r5
   180d4:	f7fe ffed 	bl	170b2 <POINTonE2_gather_booth_w5>
   180d8:	b35c      	cbz	r4, 18132 <POINTonE2_mult_w5+0xe4>
   180da:	2705      	movs	r7, #5
   180dc:	4629      	mov	r1, r5
   180de:	4628      	mov	r0, r5
   180e0:	f7f5 fd3e 	bl	db60 <POINTonE2_double>
   180e4:	3f01      	subs	r7, #1
   180e6:	d1f9      	bne.n	180dc <POINTonE2_mult_w5+0x8e>
   180e8:	1f67      	subs	r7, r4, #5
   180ea:	d019      	beq.n	18120 <POINTonE2_mult_w5+0xd2>
   180ec:	2206      	movs	r2, #6
   180ee:	4630      	mov	r0, r6
   180f0:	1fa1      	subs	r1, r4, #6
   180f2:	f7fd ff2d 	bl	15f50 <get_wval>
   180f6:	2105      	movs	r1, #5
   180f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   180fc:	f7fd ff34 	bl	15f68 <booth_encode>
   18100:	a948      	add	r1, sp, #288	; 0x120
   18102:	4602      	mov	r2, r0
   18104:	4668      	mov	r0, sp
   18106:	f7fe ffd4 	bl	170b2 <POINTonE2_gather_booth_w5>
   1810a:	b167      	cbz	r7, 18126 <POINTonE2_mult_w5+0xd8>
   1810c:	466a      	mov	r2, sp
   1810e:	4629      	mov	r1, r5
   18110:	4628      	mov	r0, r5
   18112:	f7ff fded 	bl	17cf0 <POINTonE2_add>
   18116:	463c      	mov	r4, r7
   18118:	e7de      	b.n	180d8 <POINTonE2_mult_w5+0x8a>
   1811a:	7830      	ldrb	r0, [r6, #0]
   1811c:	0040      	lsls	r0, r0, #1
   1811e:	e7ce      	b.n	180be <POINTonE2_mult_w5+0x70>
   18120:	7830      	ldrb	r0, [r6, #0]
   18122:	0040      	lsls	r0, r0, #1
   18124:	e7e7      	b.n	180f6 <POINTonE2_mult_w5+0xa8>
   18126:	463b      	mov	r3, r7
   18128:	466a      	mov	r2, sp
   1812a:	4629      	mov	r1, r5
   1812c:	4628      	mov	r0, r5
   1812e:	f7ff fe98 	bl	17e62 <POINTonE2_dadd>
   18132:	f50d 5d99 	add.w	sp, sp, #4896	; 0x1320
   18136:	b001      	add	sp, #4
   18138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001813c <POINTonE2_add_n_dbl>:
{
   1813c:	b538      	push	{r3, r4, r5, lr}
   1813e:	4614      	mov	r4, r2
    POINTonE2_dadd(out, out, p, NULL);
   18140:	2300      	movs	r3, #0
   18142:	460a      	mov	r2, r1
   18144:	4601      	mov	r1, r0
{
   18146:	4605      	mov	r5, r0
    POINTonE2_dadd(out, out, p, NULL);
   18148:	f7ff fe8b 	bl	17e62 <POINTonE2_dadd>
    while(n--)
   1814c:	3c01      	subs	r4, #1
   1814e:	d200      	bcs.n	18152 <POINTonE2_add_n_dbl+0x16>
}
   18150:	bd38      	pop	{r3, r4, r5, pc}
        POINTonE2_double(out, out);
   18152:	4629      	mov	r1, r5
   18154:	4628      	mov	r0, r5
   18156:	f7f5 fd03 	bl	db60 <POINTonE2_double>
   1815a:	e7f7      	b.n	1814c <POINTonE2_add_n_dbl+0x10>

0001815c <POINTonE2_times_minus_z>:
{
   1815c:	b538      	push	{r3, r4, r5, lr}
   1815e:	4604      	mov	r4, r0
   18160:	460d      	mov	r5, r1
    POINTonE2_double(out, in);          /*      1: 0x2                  */
   18162:	f7f5 fcfd 	bl	db60 <POINTonE2_double>
    POINTonE2_add_n_dbl(out, in, 2);    /*   2..4: 0x3..0xc             */
   18166:	4629      	mov	r1, r5
   18168:	4620      	mov	r0, r4
   1816a:	2202      	movs	r2, #2
   1816c:	f7ff ffe6 	bl	1813c <POINTonE2_add_n_dbl>
    POINTonE2_add_n_dbl(out, in, 3);    /*   5..8: 0xd..0x68            */
   18170:	4629      	mov	r1, r5
   18172:	4620      	mov	r0, r4
   18174:	2203      	movs	r2, #3
   18176:	f7ff ffe1 	bl	1813c <POINTonE2_add_n_dbl>
    POINTonE2_add_n_dbl(out, in, 9);    /*  9..18: 0x69..0xd200         */
   1817a:	4629      	mov	r1, r5
   1817c:	4620      	mov	r0, r4
   1817e:	2209      	movs	r2, #9
   18180:	f7ff ffdc 	bl	1813c <POINTonE2_add_n_dbl>
    POINTonE2_add_n_dbl(out, in, 32);   /* 19..51: ..0xd20100000000     */
   18184:	4629      	mov	r1, r5
   18186:	4620      	mov	r0, r4
   18188:	2220      	movs	r2, #32
   1818a:	f7ff ffd7 	bl	1813c <POINTonE2_add_n_dbl>
    POINTonE2_add_n_dbl(out, in, 16);   /* 52..68: ..0xd201000000010000 */
   1818e:	4629      	mov	r1, r5
   18190:	4620      	mov	r0, r4
}
   18192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    POINTonE2_add_n_dbl(out, in, 16);   /* 52..68: ..0xd201000000010000 */
   18196:	2210      	movs	r2, #16
   18198:	f7ff bfd0 	b.w	1813c <POINTonE2_add_n_dbl>

0001819c <POINTonE2_in_G2>:

static bool_t POINTonE2_in_G2(const POINTonE2 *P)
{
   1819c:	b510      	push	{r4, lr}
   1819e:	f5ad 7d58 	sub.w	sp, sp, #864	; 0x360
   181a2:	4604      	mov	r4, r0
    POINTonE2 t0, t1, t2;

    /* Bowe, S., "Faster subgroup checks for BLS12-381"                 */
    psi(&t0, P);                        /* Ψ(P)                         */
   181a4:	4601      	mov	r1, r0
   181a6:	4668      	mov	r0, sp
   181a8:	f7f4 fcd2 	bl	cb50 <psi>
    psi(&t0, &t0);                      /* Ψ²(P)                        */
   181ac:	4669      	mov	r1, sp
   181ae:	4668      	mov	r0, sp
   181b0:	f7f4 fcce 	bl	cb50 <psi>
    psi(&t1, &t0);                      /* Ψ³(P)                        */
   181b4:	4669      	mov	r1, sp
   181b6:	a848      	add	r0, sp, #288	; 0x120
   181b8:	f7f4 fcca 	bl	cb50 <psi>

    POINTonE2_times_minus_z(&t2, &t1);
   181bc:	a948      	add	r1, sp, #288	; 0x120
   181be:	a890      	add	r0, sp, #576	; 0x240
   181c0:	f7ff ffcc 	bl	1815c <POINTonE2_times_minus_z>
    POINTonE2_dadd(&t0, &t0, &t2, NULL);
   181c4:	aa90      	add	r2, sp, #576	; 0x240
   181c6:	2300      	movs	r3, #0
   181c8:	4669      	mov	r1, sp
   181ca:	4668      	mov	r0, sp
   181cc:	f7ff fe49 	bl	17e62 <POINTonE2_dadd>
    POINTonE2_cneg(&t0, 1);
   181d0:	4668      	mov	r0, sp
   181d2:	2101      	movs	r1, #1
   181d4:	f7fe ff43 	bl	1705e <POINTonE2_cneg>
    POINTonE2_dadd(&t0, &t0, P, NULL);  /* [z]Ψ³(P) - Ψ²(P) + P         */
   181d8:	4669      	mov	r1, sp
   181da:	2300      	movs	r3, #0
   181dc:	4622      	mov	r2, r4
   181de:	4608      	mov	r0, r1
   181e0:	f7ff fe3f 	bl	17e62 <POINTonE2_dadd>

    return vec_is_zero(t0.Z, sizeof(t0.Z));
   181e4:	2160      	movs	r1, #96	; 0x60
   181e6:	a830      	add	r0, sp, #192	; 0xc0
   181e8:	f7fd fe40 	bl	15e6c <vec_is_zero>
}
   181ec:	f50d 7d58 	add.w	sp, sp, #864	; 0x360
   181f0:	bd10      	pop	{r4, pc}

000181f2 <POINTonE2s_mult_w4.constprop.0>:
POINT_MULT_SCALAR_WX_IMPL(POINTonE2, 4)
   181f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f6:	b0cd      	sub	sp, #308	; 0x134
   181f8:	af00      	add	r7, sp, #0
   181fa:	f5ad 5d10 	sub.w	sp, sp, #9216	; 0x2400
   181fe:	46ea      	mov	sl, sp
   18200:	4605      	mov	r5, r0
   18202:	460c      	mov	r4, r1
   18204:	4690      	mov	r8, r2
   18206:	4656      	mov	r6, sl
   18208:	f04f 0900 	mov.w	r9, #0
   1820c:	f50a 5310 	add.w	r3, sl, #9216	; 0x2400
   18210:	f8c7 a00c 	str.w	sl, [r7, #12]
   18214:	607b      	str	r3, [r7, #4]
   18216:	6823      	ldr	r3, [r4, #0]
   18218:	2b00      	cmp	r3, #0
   1821a:	d056      	beq.n	182ca <POINTonE2s_mult_w4.constprop.0+0xd8>
   1821c:	4699      	mov	r9, r3
   1821e:	3404      	adds	r4, #4
   18220:	4630      	mov	r0, r6
   18222:	4649      	mov	r1, r9
   18224:	f7ff fef2 	bl	1800c <POINTonE2_precompute_w4>
   18228:	687b      	ldr	r3, [r7, #4]
   1822a:	f506 6610 	add.w	r6, r6, #2304	; 0x900
   1822e:	42b3      	cmp	r3, r6
   18230:	d1f1      	bne.n	18216 <POINTonE2s_mult_w4.constprop.0+0x24>
   18232:	46c1      	mov	r9, r8
   18234:	f859 6b04 	ldr.w	r6, [r9], #4
   18238:	2201      	movs	r2, #1
   1823a:	213f      	movs	r1, #63	; 0x3f
   1823c:	4630      	mov	r0, r6
   1823e:	f7fd fe87 	bl	15f50 <get_wval>
   18242:	2104      	movs	r1, #4
   18244:	f000 0001 	and.w	r0, r0, #1
   18248:	f7fd fe8e 	bl	15f68 <booth_encode>
   1824c:	2401      	movs	r4, #1
   1824e:	4602      	mov	r2, r0
   18250:	4651      	mov	r1, sl
   18252:	4628      	mov	r0, r5
   18254:	f7fe ff09 	bl	1706a <POINTonE2_gather_booth_w4>
   18258:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
   1825c:	2300      	movs	r3, #0
   1825e:	60bc      	str	r4, [r7, #8]
   18260:	3301      	adds	r3, #1
   18262:	603b      	str	r3, [r7, #0]
   18264:	f8d9 3000 	ldr.w	r3, [r9]
   18268:	b393      	cbz	r3, 182d0 <POINTonE2s_mult_w4.constprop.0+0xde>
   1826a:	461e      	mov	r6, r3
   1826c:	f109 0904 	add.w	r9, r9, #4
   18270:	683a      	ldr	r2, [r7, #0]
   18272:	4659      	mov	r1, fp
   18274:	4630      	mov	r0, r6
   18276:	f7fd fe6b 	bl	15f50 <get_wval>
   1827a:	68bb      	ldr	r3, [r7, #8]
   1827c:	2104      	movs	r1, #4
   1827e:	4018      	ands	r0, r3
   18280:	f7fd fe72 	bl	15f68 <booth_encode>
   18284:	f44f 6310 	mov.w	r3, #2304	; 0x900
   18288:	4602      	mov	r2, r0
   1828a:	fb03 a104 	mla	r1, r3, r4, sl
   1828e:	f107 0010 	add.w	r0, r7, #16
   18292:	f7fe feea 	bl	1706a <POINTonE2_gather_booth_w4>
   18296:	3401      	adds	r4, #1
   18298:	2300      	movs	r3, #0
   1829a:	4629      	mov	r1, r5
   1829c:	4628      	mov	r0, r5
   1829e:	f107 0210 	add.w	r2, r7, #16
   182a2:	f7ff fdde 	bl	17e62 <POINTonE2_dadd>
   182a6:	2c04      	cmp	r4, #4
   182a8:	d1dc      	bne.n	18264 <POINTonE2s_mult_w4.constprop.0+0x72>
   182aa:	4629      	mov	r1, r5
   182ac:	4628      	mov	r0, r5
   182ae:	f7f5 fc57 	bl	db60 <POINTonE2_double>
   182b2:	3c01      	subs	r4, #1
   182b4:	d1f9      	bne.n	182aa <POINTonE2s_mult_w4.constprop.0+0xb8>
   182b6:	231f      	movs	r3, #31
   182b8:	f1ab 0b04 	sub.w	fp, fp, #4
   182bc:	f1bb 3fff 	cmp.w	fp, #4294967295
   182c0:	60bb      	str	r3, [r7, #8]
   182c2:	d007      	beq.n	182d4 <POINTonE2s_mult_w4.constprop.0+0xe2>
   182c4:	46c1      	mov	r9, r8
   182c6:	2304      	movs	r3, #4
   182c8:	e7ca      	b.n	18260 <POINTonE2s_mult_w4.constprop.0+0x6e>
   182ca:	f509 7990 	add.w	r9, r9, #288	; 0x120
   182ce:	e7a7      	b.n	18220 <POINTonE2s_mult_w4.constprop.0+0x2e>
   182d0:	3608      	adds	r6, #8
   182d2:	e7cd      	b.n	18270 <POINTonE2s_mult_w4.constprop.0+0x7e>
   182d4:	f8d8 3000 	ldr.w	r3, [r8]
   182d8:	b31b      	cbz	r3, 18322 <POINTonE2s_mult_w4.constprop.0+0x130>
   182da:	461e      	mov	r6, r3
   182dc:	f108 0804 	add.w	r8, r8, #4
   182e0:	7830      	ldrb	r0, [r6, #0]
   182e2:	2104      	movs	r1, #4
   182e4:	0040      	lsls	r0, r0, #1
   182e6:	f000 001e 	and.w	r0, r0, #30
   182ea:	f7fd fe3d 	bl	15f68 <booth_encode>
   182ee:	68f9      	ldr	r1, [r7, #12]
   182f0:	4602      	mov	r2, r0
   182f2:	f107 0010 	add.w	r0, r7, #16
   182f6:	f7fe feb8 	bl	1706a <POINTonE2_gather_booth_w4>
   182fa:	2300      	movs	r3, #0
   182fc:	f107 0210 	add.w	r2, r7, #16
   18300:	4629      	mov	r1, r5
   18302:	4628      	mov	r0, r5
   18304:	f7ff fdad 	bl	17e62 <POINTonE2_dadd>
   18308:	68fb      	ldr	r3, [r7, #12]
   1830a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
   1830e:	60fb      	str	r3, [r7, #12]
   18310:	68fa      	ldr	r2, [r7, #12]
   18312:	687b      	ldr	r3, [r7, #4]
   18314:	4293      	cmp	r3, r2
   18316:	d1dd      	bne.n	182d4 <POINTonE2s_mult_w4.constprop.0+0xe2>
   18318:	f507 779a 	add.w	r7, r7, #308	; 0x134
   1831c:	46bd      	mov	sp, r7
   1831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18322:	3608      	adds	r6, #8
   18324:	e7dc      	b.n	182e0 <POINTonE2s_mult_w4.constprop.0+0xee>

00018326 <POINTonE2_mult_gls>:
{
   18326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1832a:	460e      	mov	r6, r1
   1832c:	4607      	mov	r7, r0
   1832e:	f5ad 7d68 	sub.w	sp, sp, #928	; 0x3a0
    limbs_from_le_bytes(val.l, SK, 32);
   18332:	ac08      	add	r4, sp, #32
{
   18334:	4611      	mov	r1, r2
    limbs_from_le_bytes(val.l, SK, 32);
   18336:	4620      	mov	r0, r4
   18338:	2220      	movs	r2, #32
   1833a:	f7fd fde7 	bl	15f0c <limbs_from_le_bytes>
    div_by_zz(val.l);
   1833e:	f7f4 fd3f 	bl	cdc0 <div_by_zz>
    div_by_z(val.l + NLIMBS(256)/2);
   18342:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
    div_by_z(val.l);
   18346:	4620      	mov	r0, r4
   18348:	f7f4 fd5c 	bl	ce04 <div_by_z>
    div_by_z(val.l + NLIMBS(256)/2);
   1834c:	4650      	mov	r0, sl
   1834e:	f7f4 fd59 	bl	ce04 <div_by_z>
        psi(&P[0], in);
   18352:	ad10      	add	r5, sp, #64	; 0x40
    le_bytes_from_limbs(val.s, val.l, 32);
   18354:	2220      	movs	r2, #32
   18356:	4621      	mov	r1, r4
   18358:	4620      	mov	r0, r4
   1835a:	f7fd fde3 	bl	15f24 <le_bytes_from_limbs>
        psi(&P[1], &P[0]);
   1835e:	f50d 79b0 	add.w	r9, sp, #352	; 0x160
        psi(&P[0], in);
   18362:	4631      	mov	r1, r6
   18364:	4628      	mov	r0, r5
   18366:	f7f4 fbf3 	bl	cb50 <psi>
        psi(&P[2], &P[1]);
   1836a:	f50d 7820 	add.w	r8, sp, #640	; 0x280
        psi(&P[1], &P[0]);
   1836e:	4629      	mov	r1, r5
   18370:	4648      	mov	r0, r9
   18372:	f7f4 fbed 	bl	cb50 <psi>
        psi(&P[2], &P[1]);
   18376:	4649      	mov	r1, r9
   18378:	4640      	mov	r0, r8
   1837a:	f7f4 fbe9 	bl	cb50 <psi>
        POINTonE2_cneg(&P[0], 1);   /* account for z being negative */
   1837e:	4628      	mov	r0, r5
   18380:	2101      	movs	r1, #1
   18382:	f7fe fe6c 	bl	1705e <POINTonE2_cneg>
        POINTonE2_cneg(&P[2], 1);
   18386:	4640      	mov	r0, r8
   18388:	2101      	movs	r1, #1
   1838a:	f7fe fe68 	bl	1705e <POINTonE2_cneg>
        points[1] = &P[0],  scalars[1] = val.s + 8;
   1838e:	ab0a      	add	r3, sp, #40	; 0x28
        POINTonE2s_mult_w4(out, points, 4, scalars, 64, NULL);
   18390:	4669      	mov	r1, sp
   18392:	4638      	mov	r0, r7
        points[1] = &P[0],  scalars[1] = val.s + 8;
   18394:	9305      	str	r3, [sp, #20]
        POINTonE2s_mult_w4(out, points, 4, scalars, 64, NULL);
   18396:	aa04      	add	r2, sp, #16
        points[3] = &P[2],  scalars[3] = val.s + 24;
   18398:	ab0e      	add	r3, sp, #56	; 0x38
   1839a:	9307      	str	r3, [sp, #28]
        points[0] = in,     scalars[0] = val.s;
   1839c:	9600      	str	r6, [sp, #0]
   1839e:	9404      	str	r4, [sp, #16]
        points[1] = &P[0],  scalars[1] = val.s + 8;
   183a0:	9501      	str	r5, [sp, #4]
        points[2] = &P[1],  scalars[2] = val.s + 16;
   183a2:	f8cd 9008 	str.w	r9, [sp, #8]
   183a6:	f8cd a018 	str.w	sl, [sp, #24]
        points[3] = &P[2],  scalars[3] = val.s + 24;
   183aa:	f8cd 800c 	str.w	r8, [sp, #12]
        POINTonE2s_mult_w4(out, points, 4, scalars, 64, NULL);
   183ae:	f7ff ff20 	bl	181f2 <POINTonE2s_mult_w4.constprop.0>
    vec_zero(val.l, sizeof(val));   /* scrub the copy of SK */
   183b2:	2120      	movs	r1, #32
   183b4:	4620      	mov	r0, r4
   183b6:	f7fd fd84 	bl	15ec2 <vec_zero>
}
   183ba:	f50d 7d68 	add.w	sp, sp, #928	; 0x3a0
   183be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000183c2 <Hash_to_G2>:
{
   183c2:	b510      	push	{r4, lr}
   183c4:	4604      	mov	r4, r0
   183c6:	b0b4      	sub	sp, #208	; 0xd0
    hash_to_field(u[0], 4, aug, aug_len, msg, msg_len, DST, DST_len);
   183c8:	9836      	ldr	r0, [sp, #216]	; 0xd8
   183ca:	e9cd 1200 	strd	r1, r2, [sp]
   183ce:	e9cd 3002 	strd	r3, r0, [sp, #8]
   183d2:	e9dd 2337 	ldrd	r2, r3, [sp, #220]	; 0xdc
   183d6:	a804      	add	r0, sp, #16
   183d8:	2104      	movs	r1, #4
   183da:	f7f4 fe1d 	bl	d018 <hash_to_field>
    map_to_g2(p, u[0], u[1]);
   183de:	4620      	mov	r0, r4
   183e0:	aa1c      	add	r2, sp, #112	; 0x70
   183e2:	a904      	add	r1, sp, #16
   183e4:	f7f5 fdb2 	bl	df4c <map_to_g2>
}
   183e8:	b034      	add	sp, #208	; 0xd0
   183ea:	bd10      	pop	{r4, pc}

000183ec <sqr_fp4>:
{
   183ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   183ee:	4605      	mov	r5, r0
   183f0:	4616      	mov	r6, r2
   183f2:	460f      	mov	r7, r1
   183f4:	b0b1      	sub	sp, #196	; 0xc4
    sqr_fp2(t0, a0);
   183f6:	4668      	mov	r0, sp
    add_fp2(ret[1], a0, a1);
   183f8:	f105 0460 	add.w	r4, r5, #96	; 0x60
    sqr_fp2(t0, a0);
   183fc:	f7f5 fa22 	bl	d844 <sqr_fp2>
    sqr_fp2(t1, a1);
   18400:	4631      	mov	r1, r6
   18402:	a818      	add	r0, sp, #96	; 0x60
   18404:	f7f5 fa1e 	bl	d844 <sqr_fp2>
    add_fp2(ret[1], a0, a1);
   18408:	4632      	mov	r2, r6
   1840a:	4639      	mov	r1, r7
   1840c:	4620      	mov	r0, r4
   1840e:	f7f5 fa0d 	bl	d82c <add_fp2>
    mul_by_u_plus_1_fp2(ret[0], t1);
   18412:	4628      	mov	r0, r5
   18414:	a918      	add	r1, sp, #96	; 0x60
   18416:	f7f5 fa03 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[0], ret[0], t0);
   1841a:	466a      	mov	r2, sp
   1841c:	4629      	mov	r1, r5
   1841e:	4628      	mov	r0, r5
   18420:	f7f5 fa04 	bl	d82c <add_fp2>
    sqr_fp2(ret[1], ret[1]);
   18424:	4621      	mov	r1, r4
   18426:	4620      	mov	r0, r4
   18428:	f7f5 fa0c 	bl	d844 <sqr_fp2>
    sub_fp2(ret[1], ret[1], t0);
   1842c:	466a      	mov	r2, sp
   1842e:	4621      	mov	r1, r4
   18430:	4620      	mov	r0, r4
   18432:	f7f5 fa01 	bl	d838 <sub_fp2>
    sub_fp2(ret[1], ret[1], t1);
   18436:	4621      	mov	r1, r4
   18438:	4620      	mov	r0, r4
   1843a:	aa18      	add	r2, sp, #96	; 0x60
   1843c:	f7f5 f9fc 	bl	d838 <sub_fp2>
}
   18440:	b031      	add	sp, #196	; 0xc4
   18442:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018444 <cyclotomic_sqr_fp12>:
{
   18444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18448:	460d      	mov	r5, r1
   1844a:	4604      	mov	r4, r0
   1844c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    sqr_fp4(t0, a[0][0], a[1][1]);
   18450:	f501 77c0 	add.w	r7, r1, #384	; 0x180
   18454:	f501 7890 	add.w	r8, r1, #288	; 0x120
    sqr_fp4(t1, a[1][0], a[0][2]);
   18458:	f105 09c0 	add.w	r9, r5, #192	; 0xc0
    sqr_fp4(t0, a[0][0], a[1][1]);
   1845c:	463a      	mov	r2, r7
   1845e:	4668      	mov	r0, sp
   18460:	f7ff ffc4 	bl	183ec <sqr_fp4>
    sqr_fp4(t2, a[0][1], a[1][2]);
   18464:	f105 0a60 	add.w	sl, r5, #96	; 0x60
   18468:	f505 76f0 	add.w	r6, r5, #480	; 0x1e0
    sqr_fp4(t1, a[1][0], a[0][2]);
   1846c:	464a      	mov	r2, r9
   1846e:	4641      	mov	r1, r8
   18470:	a830      	add	r0, sp, #192	; 0xc0
   18472:	f7ff ffbb 	bl	183ec <sqr_fp4>
    sqr_fp4(t2, a[0][1], a[1][2]);
   18476:	4632      	mov	r2, r6
   18478:	4651      	mov	r1, sl
   1847a:	a860      	add	r0, sp, #384	; 0x180
   1847c:	f7ff ffb6 	bl	183ec <sqr_fp4>
    sub_fp2(ret[0][0], t0[0],     a[0][0]);
   18480:	462a      	mov	r2, r5
   18482:	4669      	mov	r1, sp
   18484:	4620      	mov	r0, r4
   18486:	f7f5 f9d7 	bl	d838 <sub_fp2>
    add_fp2(ret[0][0], ret[0][0], ret[0][0]);
   1848a:	4622      	mov	r2, r4
   1848c:	4621      	mov	r1, r4
   1848e:	4620      	mov	r0, r4
    sub_fp2(ret[0][1], t1[0],     a[0][1]);
   18490:	f104 0560 	add.w	r5, r4, #96	; 0x60
    add_fp2(ret[0][0], ret[0][0], ret[0][0]);
   18494:	f7f5 f9ca 	bl	d82c <add_fp2>
    add_fp2(ret[0][0], ret[0][0], t0[0]);
   18498:	466a      	mov	r2, sp
   1849a:	4621      	mov	r1, r4
   1849c:	4620      	mov	r0, r4
   1849e:	f7f5 f9c5 	bl	d82c <add_fp2>
    sub_fp2(ret[0][1], t1[0],     a[0][1]);
   184a2:	4652      	mov	r2, sl
   184a4:	4628      	mov	r0, r5
   184a6:	a930      	add	r1, sp, #192	; 0xc0
   184a8:	f7f5 f9c6 	bl	d838 <sub_fp2>
    add_fp2(ret[0][1], ret[0][1], ret[0][1]);
   184ac:	462a      	mov	r2, r5
   184ae:	4629      	mov	r1, r5
   184b0:	4628      	mov	r0, r5
   184b2:	f7f5 f9bb 	bl	d82c <add_fp2>
    add_fp2(ret[0][1], ret[0][1], t1[0]);
   184b6:	4629      	mov	r1, r5
   184b8:	4628      	mov	r0, r5
   184ba:	aa30      	add	r2, sp, #192	; 0xc0
    sub_fp2(ret[0][2], t2[0],     a[0][2]);
   184bc:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
    add_fp2(ret[0][1], ret[0][1], t1[0]);
   184c0:	f7f5 f9b4 	bl	d82c <add_fp2>
    sub_fp2(ret[0][2], t2[0],     a[0][2]);
   184c4:	464a      	mov	r2, r9
   184c6:	4628      	mov	r0, r5
   184c8:	a960      	add	r1, sp, #384	; 0x180
   184ca:	f7f5 f9b5 	bl	d838 <sub_fp2>
    add_fp2(ret[0][2], ret[0][2], ret[0][2]);
   184ce:	462a      	mov	r2, r5
   184d0:	4629      	mov	r1, r5
   184d2:	4628      	mov	r0, r5
   184d4:	f7f5 f9aa 	bl	d82c <add_fp2>
    add_fp2(ret[0][2], ret[0][2], t2[0]);
   184d8:	aa60      	add	r2, sp, #384	; 0x180
   184da:	4629      	mov	r1, r5
   184dc:	4628      	mov	r0, r5
   184de:	f7f5 f9a5 	bl	d82c <add_fp2>
    mul_by_u_plus_1_fp2(t2[1], t2[1]);
   184e2:	a978      	add	r1, sp, #480	; 0x1e0
    add_fp2(ret[1][0], t2[1],     a[1][0]);
   184e4:	f504 7590 	add.w	r5, r4, #288	; 0x120
    mul_by_u_plus_1_fp2(t2[1], t2[1]);
   184e8:	4608      	mov	r0, r1
   184ea:	f7f5 f999 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[1][0], t2[1],     a[1][0]);
   184ee:	4642      	mov	r2, r8
   184f0:	4628      	mov	r0, r5
   184f2:	a978      	add	r1, sp, #480	; 0x1e0
   184f4:	f7f5 f99a 	bl	d82c <add_fp2>
    add_fp2(ret[1][0], ret[1][0], ret[1][0]);
   184f8:	462a      	mov	r2, r5
   184fa:	4629      	mov	r1, r5
   184fc:	4628      	mov	r0, r5
   184fe:	f7f5 f995 	bl	d82c <add_fp2>
    add_fp2(ret[1][0], ret[1][0], t2[1]);
   18502:	4629      	mov	r1, r5
   18504:	4628      	mov	r0, r5
   18506:	aa78      	add	r2, sp, #480	; 0x1e0
    add_fp2(ret[1][1], t0[1],     a[1][1]);
   18508:	f504 75c0 	add.w	r5, r4, #384	; 0x180
    add_fp2(ret[1][0], ret[1][0], t2[1]);
   1850c:	f7f5 f98e 	bl	d82c <add_fp2>
    add_fp2(ret[1][1], t0[1],     a[1][1]);
   18510:	463a      	mov	r2, r7
   18512:	4628      	mov	r0, r5
   18514:	a918      	add	r1, sp, #96	; 0x60
   18516:	f7f5 f989 	bl	d82c <add_fp2>
    add_fp2(ret[1][1], ret[1][1], ret[1][1]);
   1851a:	462a      	mov	r2, r5
   1851c:	4629      	mov	r1, r5
   1851e:	4628      	mov	r0, r5
    add_fp2(ret[1][2], t1[1],     a[1][2]);
   18520:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    add_fp2(ret[1][1], ret[1][1], ret[1][1]);
   18524:	f7f5 f982 	bl	d82c <add_fp2>
    add_fp2(ret[1][1], ret[1][1], t0[1]);
   18528:	4629      	mov	r1, r5
   1852a:	4628      	mov	r0, r5
   1852c:	aa18      	add	r2, sp, #96	; 0x60
   1852e:	f7f5 f97d 	bl	d82c <add_fp2>
    add_fp2(ret[1][2], t1[1],     a[1][2]);
   18532:	4632      	mov	r2, r6
   18534:	4620      	mov	r0, r4
   18536:	a948      	add	r1, sp, #288	; 0x120
   18538:	f7f5 f978 	bl	d82c <add_fp2>
    add_fp2(ret[1][2], ret[1][2], ret[1][2]);
   1853c:	4622      	mov	r2, r4
   1853e:	4621      	mov	r1, r4
   18540:	4620      	mov	r0, r4
   18542:	f7f5 f973 	bl	d82c <add_fp2>
    add_fp2(ret[1][2], ret[1][2], t1[1]);
   18546:	4621      	mov	r1, r4
   18548:	4620      	mov	r0, r4
   1854a:	aa48      	add	r2, sp, #288	; 0x120
   1854c:	f7f5 f96e 	bl	d82c <add_fp2>
}
   18550:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
   18554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00018558 <mul_n_sqr>:
    miller_loop_lines(ret, lines, P);
}
#endif

static void mul_n_sqr(vec384fp12 ret, const vec384fp12 a, size_t n)
{
   18558:	b538      	push	{r3, r4, r5, lr}
   1855a:	4614      	mov	r4, r2
    mul_fp12(ret, ret, a);
   1855c:	460a      	mov	r2, r1
   1855e:	4601      	mov	r1, r0
{
   18560:	4605      	mov	r5, r0
    mul_fp12(ret, ret, a);
   18562:	f7ff fa3d 	bl	179e0 <mul_fp12>
    while (n--)
   18566:	3c01      	subs	r4, #1
   18568:	d200      	bcs.n	1856c <mul_n_sqr+0x14>
        cyclotomic_sqr_fp12(ret, ret);
}
   1856a:	bd38      	pop	{r3, r4, r5, pc}
        cyclotomic_sqr_fp12(ret, ret);
   1856c:	4629      	mov	r1, r5
   1856e:	4628      	mov	r0, r5
   18570:	f7ff ff68 	bl	18444 <cyclotomic_sqr_fp12>
   18574:	e7f7      	b.n	18566 <mul_n_sqr+0xe>

00018576 <raise_to_z_div_by_2>:

static void raise_to_z_div_by_2(vec384fp12 ret, const vec384fp12 a)
{
   18576:	b538      	push	{r3, r4, r5, lr}
   18578:	4604      	mov	r4, r0
   1857a:	460d      	mov	r5, r1
    cyclotomic_sqr_fp12(ret, a);                /* 0x2                  */
   1857c:	f7ff ff62 	bl	18444 <cyclotomic_sqr_fp12>
    mul_n_sqr(ret, a, 2);                       /* ..0xc                */
   18580:	4629      	mov	r1, r5
   18582:	4620      	mov	r0, r4
   18584:	2202      	movs	r2, #2
   18586:	f7ff ffe7 	bl	18558 <mul_n_sqr>
    mul_n_sqr(ret, a, 3);                       /* ..0x68               */
   1858a:	4629      	mov	r1, r5
   1858c:	4620      	mov	r0, r4
   1858e:	2203      	movs	r2, #3
   18590:	f7ff ffe2 	bl	18558 <mul_n_sqr>
    mul_n_sqr(ret, a, 9);                       /* ..0xd200             */
   18594:	4629      	mov	r1, r5
   18596:	4620      	mov	r0, r4
   18598:	2209      	movs	r2, #9
   1859a:	f7ff ffdd 	bl	18558 <mul_n_sqr>
    mul_n_sqr(ret, a, 32);                      /* ..0xd20100000000     */
   1859e:	4629      	mov	r1, r5
   185a0:	4620      	mov	r0, r4
   185a2:	2220      	movs	r2, #32
   185a4:	f7ff ffd8 	bl	18558 <mul_n_sqr>
    mul_n_sqr(ret, a, 16-1);                    /* ..0x6900800000008000 */
   185a8:	4620      	mov	r0, r4
   185aa:	4629      	mov	r1, r5
   185ac:	220f      	movs	r2, #15
   185ae:	f7ff ffd3 	bl	18558 <mul_n_sqr>
    conjugate_fp12(ret);                /* account for z being negative */
   185b2:	4620      	mov	r0, r4
}
   185b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    conjugate_fp12(ret);                /* account for z being negative */
   185b8:	f7fe bdb5 	b.w	17126 <conjugate_fp12>

000185bc <sqr_fp6>:
{
   185bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185c0:	460e      	mov	r6, r1
   185c2:	4605      	mov	r5, r0
   185c4:	b0e0      	sub	sp, #384	; 0x180
    mul_fp2(m01, a[0], a[1]);
   185c6:	f106 0860 	add.w	r8, r6, #96	; 0x60
    sqr_fp2(s0, a[0]);
   185ca:	4668      	mov	r0, sp
   185cc:	f7f5 f93a 	bl	d844 <sqr_fp2>
    mul_fp2(m01, a[0], a[1]);
   185d0:	4642      	mov	r2, r8
   185d2:	4631      	mov	r1, r6
   185d4:	a818      	add	r0, sp, #96	; 0x60
   185d6:	f7f4 faad 	bl	cb34 <mul_fp2>
    add_fp2(m01, m01, m01);
   185da:	aa18      	add	r2, sp, #96	; 0x60
    mul_fp2(m12, a[1], a[2]);
   185dc:	f106 07c0 	add.w	r7, r6, #192	; 0xc0
    add_fp2(m01, m01, m01);
   185e0:	4611      	mov	r1, r2
   185e2:	4610      	mov	r0, r2
   185e4:	f7f5 f922 	bl	d82c <add_fp2>
    mul_fp2(m12, a[1], a[2]);
   185e8:	463a      	mov	r2, r7
   185ea:	4641      	mov	r1, r8
   185ec:	a830      	add	r0, sp, #192	; 0xc0
   185ee:	f7f4 faa1 	bl	cb34 <mul_fp2>
    add_fp2(m12, m12, m12);
   185f2:	aa30      	add	r2, sp, #192	; 0xc0
   185f4:	4611      	mov	r1, r2
   185f6:	4610      	mov	r0, r2
    add_fp2(ret[2], a[2], a[1]);
   185f8:	f105 04c0 	add.w	r4, r5, #192	; 0xc0
    add_fp2(m12, m12, m12);
   185fc:	f7f5 f916 	bl	d82c <add_fp2>
    sqr_fp2(s2, a[2]);
   18600:	4639      	mov	r1, r7
   18602:	a848      	add	r0, sp, #288	; 0x120
   18604:	f7f5 f91e 	bl	d844 <sqr_fp2>
    add_fp2(ret[2], a[2], a[1]);
   18608:	4642      	mov	r2, r8
   1860a:	4639      	mov	r1, r7
   1860c:	4620      	mov	r0, r4
   1860e:	f7f5 f90d 	bl	d82c <add_fp2>
    add_fp2(ret[2], ret[2], a[0]);
   18612:	4632      	mov	r2, r6
   18614:	4621      	mov	r1, r4
   18616:	4620      	mov	r0, r4
   18618:	f7f5 f908 	bl	d82c <add_fp2>
    sqr_fp2(ret[2], ret[2]);
   1861c:	4621      	mov	r1, r4
   1861e:	4620      	mov	r0, r4
   18620:	f7f5 f910 	bl	d844 <sqr_fp2>
    sub_fp2(ret[2], ret[2], s0);
   18624:	466a      	mov	r2, sp
   18626:	4621      	mov	r1, r4
   18628:	4620      	mov	r0, r4
   1862a:	f7f5 f905 	bl	d838 <sub_fp2>
    sub_fp2(ret[2], ret[2], s2);
   1862e:	4621      	mov	r1, r4
   18630:	4620      	mov	r0, r4
   18632:	aa48      	add	r2, sp, #288	; 0x120
   18634:	f7f5 f900 	bl	d838 <sub_fp2>
    sub_fp2(ret[2], ret[2], m01);
   18638:	4621      	mov	r1, r4
   1863a:	4620      	mov	r0, r4
   1863c:	aa18      	add	r2, sp, #96	; 0x60
   1863e:	f7f5 f8fb 	bl	d838 <sub_fp2>
    sub_fp2(ret[2], ret[2], m12);
   18642:	aa30      	add	r2, sp, #192	; 0xc0
   18644:	4621      	mov	r1, r4
   18646:	4620      	mov	r0, r4
   18648:	f7f5 f8f6 	bl	d838 <sub_fp2>
    mul_by_u_plus_1_fp2(ret[0], m12);
   1864c:	4628      	mov	r0, r5
   1864e:	a930      	add	r1, sp, #192	; 0xc0
   18650:	f7f5 f8e6 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[0], ret[0], s0);
   18654:	466a      	mov	r2, sp
   18656:	4629      	mov	r1, r5
   18658:	4628      	mov	r0, r5
    mul_by_u_plus_1_fp2(ret[1], s2);
   1865a:	3560      	adds	r5, #96	; 0x60
    add_fp2(ret[0], ret[0], s0);
   1865c:	f7f5 f8e6 	bl	d82c <add_fp2>
    mul_by_u_plus_1_fp2(ret[1], s2);
   18660:	4628      	mov	r0, r5
   18662:	a948      	add	r1, sp, #288	; 0x120
   18664:	f7f5 f8dc 	bl	d820 <mul_by_u_plus_1_fp2>
    add_fp2(ret[1], ret[1], m01);
   18668:	4629      	mov	r1, r5
   1866a:	4628      	mov	r0, r5
   1866c:	aa18      	add	r2, sp, #96	; 0x60
   1866e:	f7f5 f8dd 	bl	d82c <add_fp2>
}
   18672:	b060      	add	sp, #384	; 0x180
   18674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018678 <inverse_fp12>:
{
   18678:	b570      	push	{r4, r5, r6, lr}
   1867a:	460d      	mov	r5, r1
   1867c:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
   18680:	4604      	mov	r4, r0
    sqr_fp6(t1, a[1]);
   18682:	f505 7690 	add.w	r6, r5, #288	; 0x120
    sqr_fp6(t0, a[0]);
   18686:	a878      	add	r0, sp, #480	; 0x1e0
   18688:	f7ff ff98 	bl	185bc <sqr_fp6>
    sqr_fp6(t1, a[1]);
   1868c:	4631      	mov	r1, r6
   1868e:	a8c0      	add	r0, sp, #768	; 0x300
   18690:	f7ff ff94 	bl	185bc <sqr_fp6>
    mul_by_u_plus_1_fp2(t1[2], t1[2]);
   18694:	a9f0      	add	r1, sp, #960	; 0x3c0
   18696:	4608      	mov	r0, r1
   18698:	f7f5 f8c2 	bl	d820 <mul_by_u_plus_1_fp2>
    sub_fp2(t0[0], t0[0], t1[2]);
   1869c:	a978      	add	r1, sp, #480	; 0x1e0
   1869e:	4608      	mov	r0, r1
   186a0:	aaf0      	add	r2, sp, #960	; 0x3c0
   186a2:	f7f5 f8c9 	bl	d838 <sub_fp2>
    sub_fp2(t0[1], t0[1], t1[0]);
   186a6:	a990      	add	r1, sp, #576	; 0x240
   186a8:	4608      	mov	r0, r1
   186aa:	aac0      	add	r2, sp, #768	; 0x300
   186ac:	f7f5 f8c4 	bl	d838 <sub_fp2>
    sub_fp2(t0[2], t0[2], t1[1]);
   186b0:	a9a8      	add	r1, sp, #672	; 0x2a0
   186b2:	aad8      	add	r2, sp, #864	; 0x360
   186b4:	4608      	mov	r0, r1
   186b6:	f7f5 f8bf 	bl	d838 <sub_fp2>
    sqr_fp2(c0, a[0]);
   186ba:	4668      	mov	r0, sp
   186bc:	a978      	add	r1, sp, #480	; 0x1e0
   186be:	f7f5 f8c1 	bl	d844 <sqr_fp2>
    mul_fp2(t0, a[1], a[2]);
   186c2:	aaa8      	add	r2, sp, #672	; 0x2a0
   186c4:	a990      	add	r1, sp, #576	; 0x240
   186c6:	a848      	add	r0, sp, #288	; 0x120
   186c8:	f7f4 fa34 	bl	cb34 <mul_fp2>
    mul_by_u_plus_1_fp2(t0, t0);
   186cc:	a948      	add	r1, sp, #288	; 0x120
   186ce:	4608      	mov	r0, r1
   186d0:	f7f5 f8a6 	bl	d820 <mul_by_u_plus_1_fp2>
    sub_fp2(c0, c0, t0);
   186d4:	aa48      	add	r2, sp, #288	; 0x120
   186d6:	4669      	mov	r1, sp
   186d8:	4668      	mov	r0, sp
   186da:	f7f5 f8ad 	bl	d838 <sub_fp2>
    sqr_fp2(c1, a[2]);
   186de:	a9a8      	add	r1, sp, #672	; 0x2a0
   186e0:	a818      	add	r0, sp, #96	; 0x60
   186e2:	f7f5 f8af 	bl	d844 <sqr_fp2>
    mul_by_u_plus_1_fp2(c1, c1);
   186e6:	a918      	add	r1, sp, #96	; 0x60
   186e8:	4608      	mov	r0, r1
   186ea:	f7f5 f899 	bl	d820 <mul_by_u_plus_1_fp2>
    mul_fp2(t0, a[0], a[1]);
   186ee:	aa90      	add	r2, sp, #576	; 0x240
   186f0:	a978      	add	r1, sp, #480	; 0x1e0
   186f2:	a848      	add	r0, sp, #288	; 0x120
   186f4:	f7f4 fa1e 	bl	cb34 <mul_fp2>
    sub_fp2(c1, c1, t0);
   186f8:	a918      	add	r1, sp, #96	; 0x60
   186fa:	aa48      	add	r2, sp, #288	; 0x120
   186fc:	4608      	mov	r0, r1
   186fe:	f7f5 f89b 	bl	d838 <sub_fp2>
    sqr_fp2(c2, a[1]);
   18702:	a990      	add	r1, sp, #576	; 0x240
   18704:	a830      	add	r0, sp, #192	; 0xc0
   18706:	f7f5 f89d 	bl	d844 <sqr_fp2>
    mul_fp2(t0, a[0], a[2]);
   1870a:	aaa8      	add	r2, sp, #672	; 0x2a0
   1870c:	a978      	add	r1, sp, #480	; 0x1e0
   1870e:	a848      	add	r0, sp, #288	; 0x120
   18710:	f7f4 fa10 	bl	cb34 <mul_fp2>
    sub_fp2(c2, c2, t0);
   18714:	a930      	add	r1, sp, #192	; 0xc0
   18716:	4608      	mov	r0, r1
   18718:	aa48      	add	r2, sp, #288	; 0x120
   1871a:	f7f5 f88d 	bl	d838 <sub_fp2>
    mul_fp2(t0, c1, a[2]);
   1871e:	aaa8      	add	r2, sp, #672	; 0x2a0
   18720:	a918      	add	r1, sp, #96	; 0x60
   18722:	a848      	add	r0, sp, #288	; 0x120
   18724:	f7f4 fa06 	bl	cb34 <mul_fp2>
    mul_fp2(t1, c2, a[1]);
   18728:	aa90      	add	r2, sp, #576	; 0x240
   1872a:	a930      	add	r1, sp, #192	; 0xc0
   1872c:	a860      	add	r0, sp, #384	; 0x180
   1872e:	f7f4 fa01 	bl	cb34 <mul_fp2>
    add_fp2(t0, t0, t1);
   18732:	a948      	add	r1, sp, #288	; 0x120
   18734:	aa60      	add	r2, sp, #384	; 0x180
   18736:	4608      	mov	r0, r1
   18738:	f7f5 f878 	bl	d82c <add_fp2>
    mul_by_u_plus_1_fp2(t0, t0);
   1873c:	a948      	add	r1, sp, #288	; 0x120
   1873e:	4608      	mov	r0, r1
   18740:	f7f5 f86e 	bl	d820 <mul_by_u_plus_1_fp2>
    mul_fp2(t1, c0, a[0]);
   18744:	4669      	mov	r1, sp
   18746:	aa78      	add	r2, sp, #480	; 0x1e0
   18748:	a860      	add	r0, sp, #384	; 0x180
   1874a:	f7f4 f9f3 	bl	cb34 <mul_fp2>
    add_fp2(t0, t0, t1);
   1874e:	a948      	add	r1, sp, #288	; 0x120
   18750:	aa60      	add	r2, sp, #384	; 0x180
   18752:	4608      	mov	r0, r1
   18754:	f7f5 f86a 	bl	d82c <add_fp2>
    reciprocal_fp2(t1, t0);
   18758:	a948      	add	r1, sp, #288	; 0x120
   1875a:	a860      	add	r0, sp, #384	; 0x180
   1875c:	f7fe fdc0 	bl	172e0 <reciprocal_fp2>
    mul_fp2(ret[0], c0, t1);
   18760:	4669      	mov	r1, sp
   18762:	aa60      	add	r2, sp, #384	; 0x180
   18764:	a8c0      	add	r0, sp, #768	; 0x300
   18766:	f7f4 f9e5 	bl	cb34 <mul_fp2>
    mul_fp2(ret[1], c1, t1);
   1876a:	aa60      	add	r2, sp, #384	; 0x180
   1876c:	a918      	add	r1, sp, #96	; 0x60
   1876e:	a8d8      	add	r0, sp, #864	; 0x360
   18770:	f7f4 f9e0 	bl	cb34 <mul_fp2>
    mul_fp2(ret[2], c2, t1);
   18774:	aa60      	add	r2, sp, #384	; 0x180
   18776:	a930      	add	r1, sp, #192	; 0xc0
   18778:	a8f0      	add	r0, sp, #960	; 0x3c0
   1877a:	f7f4 f9db 	bl	cb34 <mul_fp2>
    mul_fp6(ret[0], a[0], t1);
   1877e:	4629      	mov	r1, r5
   18780:	4620      	mov	r0, r4
   18782:	aac0      	add	r2, sp, #768	; 0x300
    mul_fp6(ret[1], a[1], t1);
   18784:	f504 7490 	add.w	r4, r4, #288	; 0x120
    mul_fp6(ret[0], a[0], t1);
   18788:	f7ff f88c 	bl	178a4 <mul_fp6>
    mul_fp6(ret[1], a[1], t1);
   1878c:	4631      	mov	r1, r6
   1878e:	4620      	mov	r0, r4
   18790:	aac0      	add	r2, sp, #768	; 0x300
   18792:	f7ff f887 	bl	178a4 <mul_fp6>
    neg_fp6(ret[1], ret[1]);
   18796:	4621      	mov	r1, r4
   18798:	4620      	mov	r0, r4
   1879a:	f7fe fcae 	bl	170fa <neg_fp6>
}
   1879e:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   187a2:	bd70      	pop	{r4, r5, r6, pc}

000187a4 <final_exp>:
 */
static void final_exp(vec384fp12 ret, const vec384fp12 f)
{
    vec384fp12 y0, y1, y2, y3;

    vec_copy(y1, f, sizeof(y1));
   187a4:	f44f 7210 	mov.w	r2, #576	; 0x240
{
   187a8:	b530      	push	{r4, r5, lr}
   187aa:	460d      	mov	r5, r1
   187ac:	4604      	mov	r4, r0
   187ae:	f6ad 1d04 	subw	sp, sp, #2308	; 0x904
    vec_copy(y1, f, sizeof(y1));
   187b2:	eb0d 0002 	add.w	r0, sp, r2
   187b6:	f7fd fb78 	bl	15eaa <vec_copy>
    conjugate_fp12(y1);
   187ba:	a890      	add	r0, sp, #576	; 0x240
   187bc:	f7fe fcb3 	bl	17126 <conjugate_fp12>
    inverse_fp12(y2, f);
   187c0:	4629      	mov	r1, r5
   187c2:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   187c6:	f7ff ff57 	bl	18678 <inverse_fp12>
    mul_fp12(ret, y1, y2);
   187ca:	4620      	mov	r0, r4
   187cc:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   187d0:	a990      	add	r1, sp, #576	; 0x240
   187d2:	f7ff f905 	bl	179e0 <mul_fp12>
    frobenius_map_fp12(y2, ret, 2);
   187d6:	4621      	mov	r1, r4
   187d8:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   187dc:	2202      	movs	r2, #2
   187de:	f7f4 fa17 	bl	cc10 <frobenius_map_fp12>
    mul_fp12(ret, ret, y2);
   187e2:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   187e6:	4621      	mov	r1, r4
   187e8:	4620      	mov	r0, r4
   187ea:	f7ff f8f9 	bl	179e0 <mul_fp12>

    cyclotomic_sqr_fp12(y0, ret);
   187ee:	4621      	mov	r1, r4
   187f0:	4668      	mov	r0, sp
   187f2:	f7ff fe27 	bl	18444 <cyclotomic_sqr_fp12>
    raise_to_z(y1, y0);
   187f6:	4669      	mov	r1, sp
   187f8:	a890      	add	r0, sp, #576	; 0x240
   187fa:	f7ff febc 	bl	18576 <raise_to_z_div_by_2>
   187fe:	a990      	add	r1, sp, #576	; 0x240
   18800:	4608      	mov	r0, r1
   18802:	f7ff fe1f 	bl	18444 <cyclotomic_sqr_fp12>
    raise_to_z_div_by_2(y2, y1);
   18806:	a990      	add	r1, sp, #576	; 0x240
   18808:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1880c:	f7ff feb3 	bl	18576 <raise_to_z_div_by_2>
    vec_copy(y3, ret, sizeof(y3));
   18810:	4621      	mov	r1, r4
   18812:	f44f 7210 	mov.w	r2, #576	; 0x240
   18816:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   1881a:	f7fd fb46 	bl	15eaa <vec_copy>
    conjugate_fp12(y3);
   1881e:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   18822:	f7fe fc80 	bl	17126 <conjugate_fp12>
    mul_fp12(y1, y1, y3);
   18826:	a990      	add	r1, sp, #576	; 0x240
   18828:	4608      	mov	r0, r1
   1882a:	f50d 62d8 	add.w	r2, sp, #1728	; 0x6c0
   1882e:	f7ff f8d7 	bl	179e0 <mul_fp12>
    conjugate_fp12(y1);
   18832:	a890      	add	r0, sp, #576	; 0x240
   18834:	f7fe fc77 	bl	17126 <conjugate_fp12>
    mul_fp12(y1, y1, y2);
   18838:	a990      	add	r1, sp, #576	; 0x240
   1883a:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   1883e:	4608      	mov	r0, r1
   18840:	f7ff f8ce 	bl	179e0 <mul_fp12>
    raise_to_z(y2, y1);
   18844:	a990      	add	r1, sp, #576	; 0x240
   18846:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   1884a:	f7ff fe94 	bl	18576 <raise_to_z_div_by_2>
   1884e:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   18852:	4608      	mov	r0, r1
   18854:	f7ff fdf6 	bl	18444 <cyclotomic_sqr_fp12>
    raise_to_z(y3, y2);
   18858:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   1885c:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
   18860:	f7ff fe89 	bl	18576 <raise_to_z_div_by_2>
   18864:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   18868:	4608      	mov	r0, r1
   1886a:	f7ff fdeb 	bl	18444 <cyclotomic_sqr_fp12>
    conjugate_fp12(y1);
   1886e:	a890      	add	r0, sp, #576	; 0x240
   18870:	f7fe fc59 	bl	17126 <conjugate_fp12>
    mul_fp12(y3, y3, y1);
   18874:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   18878:	4608      	mov	r0, r1
   1887a:	aa90      	add	r2, sp, #576	; 0x240
   1887c:	f7ff f8b0 	bl	179e0 <mul_fp12>
    conjugate_fp12(y1);
   18880:	a890      	add	r0, sp, #576	; 0x240
   18882:	f7fe fc50 	bl	17126 <conjugate_fp12>
    frobenius_map_fp12(y1, y1, 3);
   18886:	a990      	add	r1, sp, #576	; 0x240
   18888:	4608      	mov	r0, r1
   1888a:	2203      	movs	r2, #3
   1888c:	f7f4 f9c0 	bl	cc10 <frobenius_map_fp12>
    frobenius_map_fp12(y2, y2, 2);
   18890:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   18894:	4608      	mov	r0, r1
   18896:	2202      	movs	r2, #2
   18898:	f7f4 f9ba 	bl	cc10 <frobenius_map_fp12>
    mul_fp12(y1, y1, y2);
   1889c:	a990      	add	r1, sp, #576	; 0x240
   1889e:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   188a2:	4608      	mov	r0, r1
   188a4:	f7ff f89c 	bl	179e0 <mul_fp12>
    raise_to_z(y2, y3);
   188a8:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   188ac:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   188b0:	f7ff fe61 	bl	18576 <raise_to_z_div_by_2>
   188b4:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   188b8:	4608      	mov	r0, r1
   188ba:	f7ff fdc3 	bl	18444 <cyclotomic_sqr_fp12>
    mul_fp12(y2, y2, y0);
   188be:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   188c2:	466a      	mov	r2, sp
   188c4:	4608      	mov	r0, r1
   188c6:	f7ff f88b 	bl	179e0 <mul_fp12>
    mul_fp12(y2, y2, ret);
   188ca:	f50d 6190 	add.w	r1, sp, #1152	; 0x480
   188ce:	4622      	mov	r2, r4
   188d0:	4608      	mov	r0, r1
   188d2:	f7ff f885 	bl	179e0 <mul_fp12>
    mul_fp12(y1, y1, y2);
   188d6:	a990      	add	r1, sp, #576	; 0x240
   188d8:	4608      	mov	r0, r1
   188da:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   188de:	f7ff f87f 	bl	179e0 <mul_fp12>
    frobenius_map_fp12(y2, y3, 1);
   188e2:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
   188e6:	f50d 6090 	add.w	r0, sp, #1152	; 0x480
   188ea:	2201      	movs	r2, #1
   188ec:	f7f4 f990 	bl	cc10 <frobenius_map_fp12>
    mul_fp12(ret, y1, y2);
   188f0:	4620      	mov	r0, r4
   188f2:	f50d 6290 	add.w	r2, sp, #1152	; 0x480
   188f6:	a990      	add	r1, sp, #576	; 0x240
   188f8:	f7ff f872 	bl	179e0 <mul_fp12>
}
   188fc:	f60d 1d04 	addw	sp, sp, #2308	; 0x904
   18900:	bd30      	pop	{r4, r5, pc}

00018902 <start_dbl_n>:
{
   18902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18906:	4617      	mov	r7, r2
   18908:	4604      	mov	r4, r0
   1890a:	b0c8      	sub	sp, #288	; 0x120
    line_dbl(line, T+0, T+0);           line_by_Px2(line, Px2+0);
   1890c:	460a      	mov	r2, r1
   1890e:	4668      	mov	r0, sp
{
   18910:	4698      	mov	r8, r3
   18912:	460e      	mov	r6, r1
    line_dbl(line, T+0, T+0);           line_by_Px2(line, Px2+0);
   18914:	f7f5 fc0e 	bl	e134 <line_dbl>
   18918:	4639      	mov	r1, r7
   1891a:	4668      	mov	r0, sp
   1891c:	f7fe fa4c 	bl	16db8 <line_by_Px2>
    vec_zero(ret, sizeof(vec384fp12));
   18920:	f44f 7110 	mov.w	r1, #576	; 0x240
   18924:	4620      	mov	r0, r4
   18926:	f7fd facc 	bl	15ec2 <vec_zero>
    vec_copy(ret[0][0], line[0], 2*sizeof(vec384fp2));
   1892a:	22c0      	movs	r2, #192	; 0xc0
   1892c:	4669      	mov	r1, sp
   1892e:	4620      	mov	r0, r4
   18930:	f7fd fabb 	bl	15eaa <vec_copy>
    vec_copy(ret[1][1], line[2], sizeof(vec384fp2));
   18934:	2260      	movs	r2, #96	; 0x60
   18936:	a930      	add	r1, sp, #192	; 0xc0
   18938:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   1893c:	f7fd fab5 	bl	15eaa <vec_copy>
    for (i = 1; i < n; i++) {
   18940:	2501      	movs	r5, #1
   18942:	f44f 7990 	mov.w	r9, #288	; 0x120
        line_dbl(line, T+i, T+i);       line_by_Px2(line, Px2+i);
   18946:	f04f 0a60 	mov.w	sl, #96	; 0x60
    for (i = 1; i < n; i++) {
   1894a:	4545      	cmp	r5, r8
   1894c:	d302      	bcc.n	18954 <start_dbl_n+0x52>
}
   1894e:	b048      	add	sp, #288	; 0x120
   18950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        line_dbl(line, T+i, T+i);       line_by_Px2(line, Px2+i);
   18954:	fb09 6205 	mla	r2, r9, r5, r6
   18958:	4668      	mov	r0, sp
   1895a:	4611      	mov	r1, r2
   1895c:	f7f5 fbea 	bl	e134 <line_dbl>
   18960:	fb0a 7105 	mla	r1, sl, r5, r7
   18964:	4668      	mov	r0, sp
   18966:	f7fe fa27 	bl	16db8 <line_by_Px2>
        mul_by_xy00z0_fp12(ret, ret, line);
   1896a:	466a      	mov	r2, sp
   1896c:	4621      	mov	r1, r4
   1896e:	4620      	mov	r0, r4
   18970:	f7ff f918 	bl	17ba4 <mul_by_xy00z0_fp12>
    for (i = 1; i < n; i++) {
   18974:	3501      	adds	r5, #1
   18976:	e7e8      	b.n	1894a <start_dbl_n+0x48>

00018978 <line_add>:
{
   18978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1897c:	4698      	mov	r8, r3
   1897e:	4616      	mov	r6, r2
   18980:	4607      	mov	r7, r0
   18982:	460c      	mov	r4, r1
   18984:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
    sqr_fp2(Z1Z1, R->Z);                /* Z1Z1 = Z1^2 */
   18988:	f102 09c0 	add.w	r9, r2, #192	; 0xc0
   1898c:	4649      	mov	r1, r9
   1898e:	4668      	mov	r0, sp
   18990:	f7f4 ff58 	bl	d844 <sqr_fp2>
    mul_fp2(S2, Q->Y, R->Z);
   18994:	f108 0a60 	add.w	sl, r8, #96	; 0x60
    mul_fp2(U2, Q->X, Z1Z1);            /* U2 = X2*Z1Z1 */
   18998:	466a      	mov	r2, sp
   1899a:	4641      	mov	r1, r8
   1899c:	a818      	add	r0, sp, #96	; 0x60
   1899e:	f7f4 f8c9 	bl	cb34 <mul_fp2>
    mul_fp2(S2, Q->Y, R->Z);
   189a2:	464a      	mov	r2, r9
   189a4:	4651      	mov	r1, sl
   189a6:	a830      	add	r0, sp, #192	; 0xc0
   189a8:	f7f4 f8c4 	bl	cb34 <mul_fp2>
    mul_fp2(S2, S2, Z1Z1);              /* S2 = Y2*Z1*Z1Z1 */
   189ac:	a930      	add	r1, sp, #192	; 0xc0
   189ae:	466a      	mov	r2, sp
   189b0:	4608      	mov	r0, r1
   189b2:	f7f4 f8bf 	bl	cb34 <mul_fp2>
    sub_fp2(H, U2, R->X);               /* H = U2-X1 */
   189b6:	4632      	mov	r2, r6
   189b8:	a918      	add	r1, sp, #96	; 0x60
   189ba:	a848      	add	r0, sp, #288	; 0x120
   189bc:	f7f4 ff3c 	bl	d838 <sub_fp2>
    sqr_fp2(HH, H);                     /* HH = H^2 */
   189c0:	a948      	add	r1, sp, #288	; 0x120
   189c2:	a860      	add	r0, sp, #384	; 0x180
   189c4:	f7f4 ff3e 	bl	d844 <sqr_fp2>
    add_fp2(I, HH, HH);
   189c8:	aa60      	add	r2, sp, #384	; 0x180
   189ca:	4611      	mov	r1, r2
   189cc:	a878      	add	r0, sp, #480	; 0x1e0
   189ce:	f7f4 ff2d 	bl	d82c <add_fp2>
    add_fp2(I, I, I);                   /* I = 4*HH */
   189d2:	aa78      	add	r2, sp, #480	; 0x1e0
   189d4:	4611      	mov	r1, r2
   189d6:	4610      	mov	r0, r2
    sub_fp2(r, S2, R->Y);
   189d8:	f107 0560 	add.w	r5, r7, #96	; 0x60
    add_fp2(I, I, I);                   /* I = 4*HH */
   189dc:	f7f4 ff26 	bl	d82c <add_fp2>
    sub_fp2(r, S2, R->Y);
   189e0:	f106 0b60 	add.w	fp, r6, #96	; 0x60
    mul_fp2(J, H, I);                   /* J = H*I */
   189e4:	aa78      	add	r2, sp, #480	; 0x1e0
   189e6:	a948      	add	r1, sp, #288	; 0x120
   189e8:	a890      	add	r0, sp, #576	; 0x240
   189ea:	f7f4 f8a3 	bl	cb34 <mul_fp2>
    sub_fp2(r, S2, R->Y);
   189ee:	465a      	mov	r2, fp
   189f0:	4628      	mov	r0, r5
   189f2:	a930      	add	r1, sp, #192	; 0xc0
   189f4:	f7f4 ff20 	bl	d838 <sub_fp2>
    add_fp2(r, r, r);                   /* r = 2*(S2-Y1) */
   189f8:	462a      	mov	r2, r5
   189fa:	4629      	mov	r1, r5
   189fc:	4628      	mov	r0, r5
   189fe:	f7f4 ff15 	bl	d82c <add_fp2>
    mul_fp2(V, R->X, I);                /* V = X1*I */
   18a02:	aa78      	add	r2, sp, #480	; 0x1e0
   18a04:	4631      	mov	r1, r6
   18a06:	a8a8      	add	r0, sp, #672	; 0x2a0
   18a08:	f7f4 f894 	bl	cb34 <mul_fp2>
    sqr_fp2(T->X, r);
   18a0c:	4629      	mov	r1, r5
   18a0e:	4620      	mov	r0, r4
   18a10:	f7f4 ff18 	bl	d844 <sqr_fp2>
    sub_fp2(T->X, T->X, J);
   18a14:	4621      	mov	r1, r4
   18a16:	4620      	mov	r0, r4
   18a18:	aa90      	add	r2, sp, #576	; 0x240
   18a1a:	f7f4 ff0d 	bl	d838 <sub_fp2>
    sub_fp2(T->X, T->X, V);
   18a1e:	4621      	mov	r1, r4
   18a20:	4620      	mov	r0, r4
   18a22:	aaa8      	add	r2, sp, #672	; 0x2a0
   18a24:	f7f4 ff08 	bl	d838 <sub_fp2>
    sub_fp2(T->X, T->X, V);             /* X3 = r^2-J-2*V */
   18a28:	4621      	mov	r1, r4
   18a2a:	4620      	mov	r0, r4
   18a2c:	aaa8      	add	r2, sp, #672	; 0x2a0
   18a2e:	f7f4 ff03 	bl	d838 <sub_fp2>
    mul_fp2(J, J, R->Y);
   18a32:	a990      	add	r1, sp, #576	; 0x240
    sub_fp2(T->Y, V, T->X);
   18a34:	f104 0660 	add.w	r6, r4, #96	; 0x60
    mul_fp2(J, J, R->Y);
   18a38:	465a      	mov	r2, fp
   18a3a:	4608      	mov	r0, r1
   18a3c:	f7f4 f87a 	bl	cb34 <mul_fp2>
    sub_fp2(T->Y, V, T->X);
   18a40:	4622      	mov	r2, r4
   18a42:	4630      	mov	r0, r6
   18a44:	a9a8      	add	r1, sp, #672	; 0x2a0
   18a46:	f7f4 fef7 	bl	d838 <sub_fp2>
    mul_fp2(T->Y, T->Y, r);
   18a4a:	462a      	mov	r2, r5
   18a4c:	4631      	mov	r1, r6
   18a4e:	4630      	mov	r0, r6
   18a50:	f7f4 f870 	bl	cb34 <mul_fp2>
    sub_fp2(T->Y, T->Y, J);
   18a54:	4631      	mov	r1, r6
   18a56:	4630      	mov	r0, r6
   18a58:	aa90      	add	r2, sp, #576	; 0x240
    add_fp2(T->Z, R->Z, H);
   18a5a:	34c0      	adds	r4, #192	; 0xc0
    sub_fp2(T->Y, T->Y, J);
   18a5c:	f7f4 feec 	bl	d838 <sub_fp2>
    sub_fp2(T->Y, T->Y, J);             /* Y3 = r*(V-X3)-2*Y1*J */
   18a60:	4631      	mov	r1, r6
   18a62:	4630      	mov	r0, r6
   18a64:	aa90      	add	r2, sp, #576	; 0x240
   18a66:	f7f4 fee7 	bl	d838 <sub_fp2>
    add_fp2(T->Z, R->Z, H);
   18a6a:	aa48      	add	r2, sp, #288	; 0x120
   18a6c:	4649      	mov	r1, r9
   18a6e:	4620      	mov	r0, r4
   18a70:	f7f4 fedc 	bl	d82c <add_fp2>
    sqr_fp2(T->Z, T->Z);
   18a74:	4621      	mov	r1, r4
   18a76:	4620      	mov	r0, r4
   18a78:	f7f4 fee4 	bl	d844 <sqr_fp2>
    sub_fp2(T->Z, T->Z, Z1Z1);
   18a7c:	466a      	mov	r2, sp
   18a7e:	4621      	mov	r1, r4
   18a80:	4620      	mov	r0, r4
   18a82:	f7f4 fed9 	bl	d838 <sub_fp2>
    sub_fp2(T->Z, T->Z, HH);            /* Z3 = (Z1+H)^2-Z1Z1-HH */
   18a86:	4621      	mov	r1, r4
   18a88:	4620      	mov	r0, r4
   18a8a:	aa60      	add	r2, sp, #384	; 0x180
   18a8c:	f7f4 fed4 	bl	d838 <sub_fp2>
    mul_fp2(I, r, Q->X);
   18a90:	4642      	mov	r2, r8
   18a92:	4629      	mov	r1, r5
   18a94:	a878      	add	r0, sp, #480	; 0x1e0
   18a96:	f7f4 f84d 	bl	cb34 <mul_fp2>
    mul_fp2(J, Q->Y, T->Z);
   18a9a:	4622      	mov	r2, r4
   18a9c:	4651      	mov	r1, sl
   18a9e:	a890      	add	r0, sp, #576	; 0x240
   18aa0:	f7f4 f848 	bl	cb34 <mul_fp2>
    sub_fp2(I, I, J);
   18aa4:	a978      	add	r1, sp, #480	; 0x1e0
   18aa6:	4608      	mov	r0, r1
   18aa8:	aa90      	add	r2, sp, #576	; 0x240
   18aaa:	f7f4 fec5 	bl	d838 <sub_fp2>
    add_fp2(line[0], I, I);          /* 2*(r*X2 - Y2*Z3) */
   18aae:	aa78      	add	r2, sp, #480	; 0x1e0
   18ab0:	4611      	mov	r1, r2
   18ab2:	4638      	mov	r0, r7
   18ab4:	f7f4 feba 	bl	d82c <add_fp2>
    vec_copy(line[2], T->Z, sizeof(T->Z));
   18ab8:	2260      	movs	r2, #96	; 0x60
   18aba:	4621      	mov	r1, r4
   18abc:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
   18ac0:	f7fd f9f3 	bl	15eaa <vec_copy>
}
   18ac4:	f50d 7d41 	add.w	sp, sp, #772	; 0x304
   18ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018acc <add_n_dbl_n>:
{
   18acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ad0:	4605      	mov	r5, r0
   18ad2:	460e      	mov	r6, r1
   18ad4:	4691      	mov	r9, r2
   18ad6:	4698      	mov	r8, r3
    for (i = 0; i < n; i++) {
   18ad8:	2400      	movs	r4, #0
   18ada:	f44f 7a90 	mov.w	sl, #288	; 0x120
        line_add(line, T+i, T+i, Q+i);  line_by_Px2(line, Px2+i);
   18ade:	f04f 0bc0 	mov.w	fp, #192	; 0xc0
{
   18ae2:	b0c9      	sub	sp, #292	; 0x124
   18ae4:	9f52      	ldr	r7, [sp, #328]	; 0x148
    for (i = 0; i < n; i++) {
   18ae6:	42bc      	cmp	r4, r7
   18ae8:	d109      	bne.n	18afe <add_n_dbl_n+0x32>
   18aea:	fb0a 6404 	mla	r4, sl, r4, r6
    while (k--) {
   18aee:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   18af0:	3b01      	subs	r3, #1
   18af2:	9353      	str	r3, [sp, #332]	; 0x14c
   18af4:	3301      	adds	r3, #1
   18af6:	d117      	bne.n	18b28 <add_n_dbl_n+0x5c>
}
   18af8:	b049      	add	sp, #292	; 0x124
   18afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        line_add(line, T+i, T+i, Q+i);  line_by_Px2(line, Px2+i);
   18afe:	fb0a 6204 	mla	r2, sl, r4, r6
   18b02:	fb0b 9304 	mla	r3, fp, r4, r9
   18b06:	4611      	mov	r1, r2
   18b08:	4668      	mov	r0, sp
   18b0a:	f7ff ff35 	bl	18978 <line_add>
   18b0e:	2160      	movs	r1, #96	; 0x60
   18b10:	4668      	mov	r0, sp
   18b12:	fb01 8104 	mla	r1, r1, r4, r8
   18b16:	f7fe f94f 	bl	16db8 <line_by_Px2>
        mul_by_xy00z0_fp12(ret, ret, line);
   18b1a:	466a      	mov	r2, sp
   18b1c:	4629      	mov	r1, r5
   18b1e:	4628      	mov	r0, r5
   18b20:	f7ff f840 	bl	17ba4 <mul_by_xy00z0_fp12>
    for (i = 0; i < n; i++) {
   18b24:	3401      	adds	r4, #1
   18b26:	e7de      	b.n	18ae6 <add_n_dbl_n+0x1a>
        sqr_fp12(ret, ret);
   18b28:	4629      	mov	r1, r5
   18b2a:	4628      	mov	r0, r5
   18b2c:	f7fe ff9f 	bl	17a6e <sqr_fp12>
        for (i = 0; i < n; i++) {
   18b30:	46c1      	mov	r9, r8
   18b32:	4637      	mov	r7, r6
   18b34:	42a7      	cmp	r7, r4
   18b36:	d0da      	beq.n	18aee <add_n_dbl_n+0x22>
            line_dbl(line, T+i, T+i);   line_by_Px2(line, Px2+i);
   18b38:	463a      	mov	r2, r7
   18b3a:	4639      	mov	r1, r7
   18b3c:	4668      	mov	r0, sp
   18b3e:	f7f5 faf9 	bl	e134 <line_dbl>
   18b42:	4649      	mov	r1, r9
   18b44:	4668      	mov	r0, sp
   18b46:	f7fe f937 	bl	16db8 <line_by_Px2>
            mul_by_xy00z0_fp12(ret, ret, line);
   18b4a:	466a      	mov	r2, sp
   18b4c:	4629      	mov	r1, r5
   18b4e:	4628      	mov	r0, r5
   18b50:	f7ff f828 	bl	17ba4 <mul_by_xy00z0_fp12>
        for (i = 0; i < n; i++) {
   18b54:	f507 7790 	add.w	r7, r7, #288	; 0x120
   18b58:	f109 0960 	add.w	r9, r9, #96	; 0x60
   18b5c:	e7ea      	b.n	18b34 <add_n_dbl_n+0x68>

00018b5e <PAIRING_Commit>:
{
   18b5e:	b530      	push	{r4, r5, lr}
    if ((n = ctx->nelems) != 0) {
   18b60:	6843      	ldr	r3, [r0, #4]
{
   18b62:	4604      	mov	r4, r0
   18b64:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    if ((n = ctx->nelems) != 0) {
   18b68:	b193      	cbz	r3, 18b90 <PAIRING_Commit+0x32>
        if (ctx->ctrl & AGGR_GT_SET) {
   18b6a:	f100 0510 	add.w	r5, r0, #16
   18b6e:	f500 715c 	add.w	r1, r0, #880	; 0x370
   18b72:	f500 6217 	add.w	r2, r0, #2416	; 0x970
   18b76:	6800      	ldr	r0, [r0, #0]
   18b78:	0680      	lsls	r0, r0, #26
   18b7a:	d50c      	bpl.n	18b96 <PAIRING_Commit+0x38>
            miller_loop_n(GT, ctx->Q, ctx->P, n);
   18b7c:	4668      	mov	r0, sp
   18b7e:	f7f5 fb81 	bl	e284 <miller_loop_n>
            mul_fp12(ctx->GT, ctx->GT, GT);
   18b82:	466a      	mov	r2, sp
   18b84:	4629      	mov	r1, r5
   18b86:	4628      	mov	r0, r5
   18b88:	f7fe ff2a 	bl	179e0 <mul_fp12>
        ctx->nelems = 0;
   18b8c:	2300      	movs	r3, #0
   18b8e:	6063      	str	r3, [r4, #4]
}
   18b90:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   18b94:	bd30      	pop	{r4, r5, pc}
            miller_loop_n(ctx->GT, ctx->Q, ctx->P, n);
   18b96:	4628      	mov	r0, r5
   18b98:	f7f5 fb74 	bl	e284 <miller_loop_n>
            ctx->ctrl |= AGGR_GT_SET;
   18b9c:	6823      	ldr	r3, [r4, #0]
   18b9e:	f043 0320 	orr.w	r3, r3, #32
   18ba2:	6023      	str	r3, [r4, #0]
   18ba4:	e7f2      	b.n	18b8c <PAIRING_Commit+0x2e>

00018ba6 <blst_core_verify_pk_in_g1>:
                                     const POINTonE2_affine *signature,
                                     int hash_or_encode,
                                     const void *msg, size_t msg_len,
                                     const void *DST, size_t DST_len,
                                     const void *aug, size_t aug_len)
{
   18ba6:	b510      	push	{r4, lr}
   18ba8:	2400      	movs	r4, #0
    PAIRING ctx;
    BLST_ERROR ret;

    ctx.ctrl = AGGR_UNDEFINED | (hash_or_encode ? AGGR_HASH_OR_ENCODE : 0);
   18baa:	42a2      	cmp	r2, r4
   18bac:	bf0c      	ite	eq
   18bae:	4622      	moveq	r2, r4
   18bb0:	2240      	movne	r2, #64	; 0x40
{
   18bb2:	f5ad 6d49 	sub.w	sp, sp, #3216	; 0xc90
    ctx.nelems = 0;
   18bb6:	e9cd 2408 	strd	r2, r4, [sp, #32]
    ctx.DST = DST;
   18bba:	f8dd 2c9c 	ldr.w	r2, [sp, #3228]	; 0xc9c
    ctx.DST_len = DST_len;

    ret = PAIRING_Aggregate_PK_in_G1(&ctx, pk, 1, signature, 1, NULL, 0,
   18bbe:	e9cd 4401 	strd	r4, r4, [sp, #4]
    ctx.DST = DST;
   18bc2:	920a      	str	r2, [sp, #40]	; 0x28
    ctx.DST_len = DST_len;
   18bc4:	f8dd 2ca0 	ldr.w	r2, [sp, #3232]	; 0xca0
   18bc8:	920b      	str	r2, [sp, #44]	; 0x2c
    ret = PAIRING_Aggregate_PK_in_G1(&ctx, pk, 1, signature, 1, NULL, 0,
   18bca:	f8dd 2ca8 	ldr.w	r2, [sp, #3240]	; 0xca8
   18bce:	9206      	str	r2, [sp, #24]
   18bd0:	f8dd 2ca4 	ldr.w	r2, [sp, #3236]	; 0xca4
   18bd4:	9205      	str	r2, [sp, #20]
   18bd6:	f8dd 2c98 	ldr.w	r2, [sp, #3224]	; 0xc98
   18bda:	e9cd 3203 	strd	r3, r2, [sp, #12]
   18bde:	2201      	movs	r2, #1
   18be0:	460b      	mov	r3, r1
   18be2:	9200      	str	r2, [sp, #0]
   18be4:	4601      	mov	r1, r0
   18be6:	a808      	add	r0, sp, #32
   18be8:	f7f5 fbee 	bl	e3c8 <PAIRING_Aggregate_PK_in_G1>
                                     msg, msg_len, aug, aug_len);
    if (ret != BLST_SUCCESS)
   18bec:	4604      	mov	r4, r0
   18bee:	b948      	cbnz	r0, 18c04 <blst_core_verify_pk_in_g1+0x5e>
        return ret;

    PAIRING_Commit(&ctx);
   18bf0:	a808      	add	r0, sp, #32
   18bf2:	f7ff ffb4 	bl	18b5e <PAIRING_Commit>

    return PAIRING_FinalVerify(&ctx, NULL) ? BLST_SUCCESS : BLST_VERIFY_FAIL;
   18bf6:	4621      	mov	r1, r4
   18bf8:	a808      	add	r0, sp, #32
   18bfa:	f7f5 fd01 	bl	e600 <PAIRING_FinalVerify>
   18bfe:	2800      	cmp	r0, #0
   18c00:	bf08      	it	eq
   18c02:	2405      	moveq	r4, #5
}
   18c04:	4620      	mov	r0, r4
   18c06:	f50d 6d49 	add.w	sp, sp, #3216	; 0xc90
   18c0a:	bd10      	pop	{r4, pc}

00018c0c <blst_bendian_from_scalar>:
    le_bytes_from_limbs(ret, out, sizeof(out));
    vec_zero(out, sizeof(out));
}

void blst_bendian_from_scalar(unsigned char ret[32], const pow256 a)
{
   18c0c:	b510      	push	{r4, lr}
   18c0e:	4604      	mov	r4, r0
   18c10:	b088      	sub	sp, #32
    vec256 out;
    limbs_from_le_bytes(out, a, sizeof(out));
   18c12:	4668      	mov	r0, sp
   18c14:	2220      	movs	r2, #32
   18c16:	f7fd f979 	bl	15f0c <limbs_from_le_bytes>
    be_bytes_from_limbs(ret, out, sizeof(out));
   18c1a:	2220      	movs	r2, #32
   18c1c:	4669      	mov	r1, sp
   18c1e:	4620      	mov	r0, r4
   18c20:	f7fd f966 	bl	15ef0 <be_bytes_from_limbs>
    vec_zero(out, sizeof(out));
   18c24:	2120      	movs	r1, #32
   18c26:	4668      	mov	r0, sp
   18c28:	f7fd f94b 	bl	15ec2 <vec_zero>
}
   18c2c:	b008      	add	sp, #32
   18c2e:	bd10      	pop	{r4, pc}

00018c30 <main>:
SHELL_CMD_ARG_REGISTER(benchmark, NULL, "Benchmark for key generation and signature proccess", cmd_benchmark, 1, 0);

void main(void)
{

}
   18c30:	4770      	bx	lr

00018c32 <string_cmp>:
	return strcmp((const char *)p_a, (const char *)p_b);
   18c32:	f002 baf6 	b.w	1b222 <strcmp>

00018c36 <swapfunc>:
 * Qsort routine from Bentley & McIlroy's "Engineering a Sort Function".
 */

static inline void
swapfunc(char *a, char *b, size_t es)
{
   18c36:	b510      	push	{r4, lr}
   18c38:	4402      	add	r2, r0
	char t;

	do {
		t = *a;
		*a++ = *b;
   18c3a:	780c      	ldrb	r4, [r1, #0]
		t = *a;
   18c3c:	7803      	ldrb	r3, [r0, #0]
		*a++ = *b;
   18c3e:	f800 4b01 	strb.w	r4, [r0], #1
		*b++ = t;
	} while (--es > 0);
   18c42:	4290      	cmp	r0, r2
		*b++ = t;
   18c44:	f801 3b01 	strb.w	r3, [r1], #1
	} while (--es > 0);
   18c48:	d1f7      	bne.n	18c3a <swapfunc+0x4>
}
   18c4a:	bd10      	pop	{r4, pc}

00018c4c <med3.isra.0>:
#else
#define	CMP(t, x, y) (cmp((x), (y)))
#endif

static inline char *
med3(char *a, char *b, char *c, cmp_t *cmp, void *thunk)
   18c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c4e:	460f      	mov	r7, r1
   18c50:	4614      	mov	r4, r2
   18c52:	4606      	mov	r6, r0
   18c54:	461d      	mov	r5, r3
{
	return CMP(thunk, a, b) < 0 ?
   18c56:	4798      	blx	r3
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   18c58:	2800      	cmp	r0, #0
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   18c5a:	4621      	mov	r1, r4
   18c5c:	4638      	mov	r0, r7
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   18c5e:	da0c      	bge.n	18c7a <med3.isra.0+0x2e>
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   18c60:	47a8      	blx	r5
   18c62:	2800      	cmp	r0, #0
   18c64:	da02      	bge.n	18c6c <med3.isra.0+0x20>
   18c66:	463c      	mov	r4, r7
}
   18c68:	4620      	mov	r0, r4
   18c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	       (CMP(thunk, b, c) < 0 ? b : (CMP(thunk, a, c) < 0 ? c : a))
   18c6c:	4621      	mov	r1, r4
   18c6e:	4630      	mov	r0, r6
   18c70:	47a8      	blx	r5
   18c72:	2800      	cmp	r0, #0
   18c74:	dbf8      	blt.n	18c68 <med3.isra.0+0x1c>
   18c76:	4634      	mov	r4, r6
   18c78:	e7f6      	b.n	18c68 <med3.isra.0+0x1c>
	      : (CMP(thunk, b, c) > 0 ? b : (CMP(thunk, a, c) < 0 ? a : c));
   18c7a:	47a8      	blx	r5
   18c7c:	2800      	cmp	r0, #0
   18c7e:	dcf2      	bgt.n	18c66 <med3.isra.0+0x1a>
   18c80:	4621      	mov	r1, r4
   18c82:	4630      	mov	r0, r6
   18c84:	47a8      	blx	r5
   18c86:	2800      	cmp	r0, #0
   18c88:	daee      	bge.n	18c68 <med3.isra.0+0x1c>
   18c8a:	e7f4      	b.n	18c76 <med3.isra.0+0x2a>

00018c8c <qsort>:
void qsort_r(void *a, size_t n, size_t es, void *thunk, cmp_t *cmp)
#else
#define	thunk NULL
void qsort(void *a, size_t n, size_t es, cmp_t *cmp)
#endif
{
   18c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c90:	4606      	mov	r6, r0
   18c92:	468b      	mov	fp, r1
   18c94:	4614      	mov	r4, r2
   18c96:	4698      	mov	r8, r3
   18c98:	b085      	sub	sp, #20
	int cmp_result;
	int swap_cnt;

loop:
	swap_cnt = 0;
	if (n < 7) {
   18c9a:	1933      	adds	r3, r6, r4
   18c9c:	f1bb 0f06 	cmp.w	fp, #6
   18ca0:	9300      	str	r3, [sp, #0]
   18ca2:	d81a      	bhi.n	18cda <qsort+0x4e>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   18ca4:	461f      	mov	r7, r3
   18ca6:	fb04 6b0b 	mla	fp, r4, fp, r6
   18caa:	45bb      	cmp	fp, r7
   18cac:	d802      	bhi.n	18cb4 <qsort+0x28>
			/* qsort(a, d1 / es, es, cmp); */
			n = d1 / es;
			goto loop;
		}
	}
}
   18cae:	b005      	add	sp, #20
   18cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cb4:	46b9      	mov	r9, r7
   18cb6:	e00c      	b.n	18cd2 <qsort+0x46>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   18cb8:	eba9 0a04 	sub.w	sl, r9, r4
   18cbc:	4649      	mov	r1, r9
   18cbe:	4650      	mov	r0, sl
   18cc0:	47c0      	blx	r8
   18cc2:	2800      	cmp	r0, #0
   18cc4:	dd07      	ble.n	18cd6 <qsort+0x4a>
				swapfunc(pl, pl - es, es);
   18cc6:	4648      	mov	r0, r9
   18cc8:	4622      	mov	r2, r4
   18cca:	4651      	mov	r1, sl
   18ccc:	f7ff ffb3 	bl	18c36 <swapfunc>
			     pl -= es) {
   18cd0:	46d1      	mov	r9, sl
			for (pl = pm;
   18cd2:	454e      	cmp	r6, r9
   18cd4:	d3f0      	bcc.n	18cb8 <qsort+0x2c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   18cd6:	4427      	add	r7, r4
   18cd8:	e7e7      	b.n	18caa <qsort+0x1e>
	pm = (char *)a + (n / 2) * es;
   18cda:	ea4f 095b 	mov.w	r9, fp, lsr #1
   18cde:	f10b 35ff 	add.w	r5, fp, #4294967295
	if (n > 7) {
   18ce2:	f1bb 0f07 	cmp.w	fp, #7
	pm = (char *)a + (n / 2) * es;
   18ce6:	fb04 6909 	mla	r9, r4, r9, r6
	if (n > 7) {
   18cea:	fb04 6505 	mla	r5, r4, r5, r6
   18cee:	d027      	beq.n	18d40 <qsort+0xb4>
		if (n > 40) {
   18cf0:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
   18cf4:	d945      	bls.n	18d82 <qsort+0xf6>
			size_t d = (n / 8) * es;
   18cf6:	ea4f 0adb 	mov.w	sl, fp, lsr #3
   18cfa:	fb04 fa0a 	mul.w	sl, r4, sl
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   18cfe:	4643      	mov	r3, r8
   18d00:	eb06 024a 	add.w	r2, r6, sl, lsl #1
   18d04:	eb06 010a 	add.w	r1, r6, sl
   18d08:	4630      	mov	r0, r6
   18d0a:	f7ff ff9f 	bl	18c4c <med3.isra.0>
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   18d0e:	4649      	mov	r1, r9
   18d10:	eb09 020a 	add.w	r2, r9, sl
   18d14:	4643      	mov	r3, r8
			pl = med3(pl, pl + d, pl + 2 * d, cmp, thunk);
   18d16:	4607      	mov	r7, r0
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   18d18:	eba9 000a 	sub.w	r0, r9, sl
   18d1c:	f7ff ff96 	bl	18c4c <med3.isra.0>
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   18d20:	462a      	mov	r2, r5
			pm = med3(pm - d, pm, pm + d, cmp, thunk);
   18d22:	4681      	mov	r9, r0
			pn = med3(pn - 2 * d, pn - d, pn, cmp, thunk);
   18d24:	4643      	mov	r3, r8
   18d26:	eba5 010a 	sub.w	r1, r5, sl
   18d2a:	eba5 004a 	sub.w	r0, r5, sl, lsl #1
   18d2e:	f7ff ff8d 	bl	18c4c <med3.isra.0>
   18d32:	4602      	mov	r2, r0
		pm = med3(pl, pm, pn, cmp, thunk);
   18d34:	4649      	mov	r1, r9
   18d36:	4643      	mov	r3, r8
   18d38:	4638      	mov	r0, r7
   18d3a:	f7ff ff87 	bl	18c4c <med3.isra.0>
   18d3e:	4681      	mov	r9, r0
	swapfunc(a, pm, es);
   18d40:	4622      	mov	r2, r4
   18d42:	4649      	mov	r1, r9
	pa = pb = (char *)a + es;
   18d44:	1937      	adds	r7, r6, r4
	swapfunc(a, pm, es);
   18d46:	4630      	mov	r0, r6
   18d48:	f7ff ff75 	bl	18c36 <swapfunc>
	pc = pd = (char *)a + (n - 1) * es;
   18d4c:	46b9      	mov	r9, r7
	swap_cnt = 0;
   18d4e:	2200      	movs	r2, #0
	pa = pb = (char *)a + es;
   18d50:	e9cd 7500 	strd	r7, r5, [sp]
   18d54:	4263      	negs	r3, r4
   18d56:	9302      	str	r3, [sp, #8]
		while (pb <= pc && (cmp_result = CMP(thunk, pb, a)) <= 0) {
   18d58:	45a9      	cmp	r9, r5
   18d5a:	d823      	bhi.n	18da4 <qsort+0x118>
   18d5c:	4631      	mov	r1, r6
   18d5e:	4648      	mov	r0, r9
   18d60:	9203      	str	r2, [sp, #12]
   18d62:	47c0      	blx	r8
   18d64:	2800      	cmp	r0, #0
   18d66:	9a03      	ldr	r2, [sp, #12]
   18d68:	dc24      	bgt.n	18db4 <qsort+0x128>
			if (cmp_result == 0) {
   18d6a:	d108      	bne.n	18d7e <qsort+0xf2>
				swapfunc(pa, pb, es);
   18d6c:	4622      	mov	r2, r4
   18d6e:	4649      	mov	r1, r9
   18d70:	9800      	ldr	r0, [sp, #0]
   18d72:	f7ff ff60 	bl	18c36 <swapfunc>
				pa += es;
   18d76:	9b00      	ldr	r3, [sp, #0]
   18d78:	4423      	add	r3, r4
   18d7a:	9300      	str	r3, [sp, #0]
				swap_cnt = 1;
   18d7c:	2201      	movs	r2, #1
			pb += es;
   18d7e:	44a1      	add	r9, r4
   18d80:	e7ea      	b.n	18d58 <qsort+0xcc>
		pn = (char *)a + (n - 1) * es;
   18d82:	462a      	mov	r2, r5
   18d84:	4637      	mov	r7, r6
   18d86:	e7d5      	b.n	18d34 <qsort+0xa8>
			if (cmp_result == 0) {
   18d88:	d109      	bne.n	18d9e <qsort+0x112>
				swapfunc(pc, pd, es);
   18d8a:	4622      	mov	r2, r4
   18d8c:	4628      	mov	r0, r5
   18d8e:	9901      	ldr	r1, [sp, #4]
   18d90:	f7ff ff51 	bl	18c36 <swapfunc>
				pd -= es;
   18d94:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   18d98:	4413      	add	r3, r2
				swap_cnt = 1;
   18d9a:	2201      	movs	r2, #1
				pd -= es;
   18d9c:	9301      	str	r3, [sp, #4]
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   18d9e:	45d1      	cmp	r9, sl
			pc -= es;
   18da0:	4655      	mov	r5, sl
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   18da2:	d907      	bls.n	18db4 <qsort+0x128>
	if (swap_cnt == 0) {  /* Switch to insertion sort */
   18da4:	fb04 6a0b 	mla	sl, r4, fp, r6
   18da8:	bb32      	cbnz	r2, 18df8 <qsort+0x16c>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   18daa:	45ba      	cmp	sl, r7
   18dac:	f67f af7f 	bls.w	18cae <qsort+0x22>
   18db0:	463d      	mov	r5, r7
   18db2:	e01d      	b.n	18df0 <qsort+0x164>
		while (pb <= pc && (cmp_result = CMP(thunk, pc, a)) >= 0) {
   18db4:	4631      	mov	r1, r6
   18db6:	4628      	mov	r0, r5
   18db8:	9203      	str	r2, [sp, #12]
   18dba:	47c0      	blx	r8
   18dbc:	9b02      	ldr	r3, [sp, #8]
   18dbe:	2800      	cmp	r0, #0
   18dc0:	9a03      	ldr	r2, [sp, #12]
   18dc2:	eb05 0a03 	add.w	sl, r5, r3
   18dc6:	dadf      	bge.n	18d88 <qsort+0xfc>
		swapfunc(pb, pc, es);
   18dc8:	4629      	mov	r1, r5
   18dca:	4622      	mov	r2, r4
   18dcc:	4648      	mov	r0, r9
   18dce:	f7ff ff32 	bl	18c36 <swapfunc>
		pc -= es;
   18dd2:	4655      	mov	r5, sl
	for (;;) {
   18dd4:	e7d2      	b.n	18d7c <qsort+0xf0>
			     pl > (char *)a && CMP(thunk, pl - es, pl) > 0;
   18dd6:	eba5 0904 	sub.w	r9, r5, r4
   18dda:	4629      	mov	r1, r5
   18ddc:	4648      	mov	r0, r9
   18dde:	47c0      	blx	r8
   18de0:	2800      	cmp	r0, #0
   18de2:	dd07      	ble.n	18df4 <qsort+0x168>
				swapfunc(pl, pl - es, es);
   18de4:	4628      	mov	r0, r5
   18de6:	4622      	mov	r2, r4
   18de8:	4649      	mov	r1, r9
   18dea:	f7ff ff24 	bl	18c36 <swapfunc>
			     pl -= es) {
   18dee:	464d      	mov	r5, r9
			for (pl = pm;
   18df0:	42ae      	cmp	r6, r5
   18df2:	d3f0      	bcc.n	18dd6 <qsort+0x14a>
		for (pm = (char *)a + es; pm < (char *)a + n * es; pm += es) {
   18df4:	4427      	add	r7, r4
   18df6:	e7d8      	b.n	18daa <qsort+0x11e>
	d1 = MIN(pa - (char *)a, pb - pa);
   18df8:	9b00      	ldr	r3, [sp, #0]
   18dfa:	eba9 0b03 	sub.w	fp, r9, r3
   18dfe:	1b9a      	subs	r2, r3, r6
   18e00:	455a      	cmp	r2, fp
   18e02:	bfa8      	it	ge
   18e04:	465a      	movge	r2, fp
	vecswap(a, pb - d1, d1);
   18e06:	b122      	cbz	r2, 18e12 <qsort+0x186>
   18e08:	4630      	mov	r0, r6
   18e0a:	eba9 0102 	sub.w	r1, r9, r2
   18e0e:	f7ff ff12 	bl	18c36 <swapfunc>
	d1 = MIN(pd - pc, pn - pd - es);
   18e12:	9b01      	ldr	r3, [sp, #4]
   18e14:	ebaa 0203 	sub.w	r2, sl, r3
   18e18:	1b5d      	subs	r5, r3, r5
   18e1a:	1b12      	subs	r2, r2, r4
   18e1c:	42aa      	cmp	r2, r5
   18e1e:	bf28      	it	cs
   18e20:	462a      	movcs	r2, r5
	vecswap(pb, pn - d1, d1);
   18e22:	b122      	cbz	r2, 18e2e <qsort+0x1a2>
   18e24:	4648      	mov	r0, r9
   18e26:	ebaa 0102 	sub.w	r1, sl, r2
   18e2a:	f7ff ff04 	bl	18c36 <swapfunc>
	if (d1 <= d2) {
   18e2e:	455d      	cmp	r5, fp
   18e30:	d310      	bcc.n	18e54 <qsort+0x1c8>
		if (d1 > es) {
   18e32:	455c      	cmp	r4, fp
   18e34:	d206      	bcs.n	18e44 <qsort+0x1b8>
			qsort(a, d1 / es, es, cmp);
   18e36:	4643      	mov	r3, r8
   18e38:	4622      	mov	r2, r4
   18e3a:	fbbb f1f4 	udiv	r1, fp, r4
   18e3e:	4630      	mov	r0, r6
   18e40:	f7ff ff24 	bl	18c8c <qsort>
		if (d2 > es) {
   18e44:	42a5      	cmp	r5, r4
   18e46:	f67f af32 	bls.w	18cae <qsort+0x22>
			n = d2 / es;
   18e4a:	fbb5 fbf4 	udiv	fp, r5, r4
			a = pn - d2;
   18e4e:	ebaa 0605 	sub.w	r6, sl, r5
			goto loop;
   18e52:	e722      	b.n	18c9a <qsort+0xe>
		if (d2 > es) {
   18e54:	42a5      	cmp	r5, r4
   18e56:	d907      	bls.n	18e68 <qsort+0x1dc>
			qsort(pn - d2, d2 / es, es, cmp);
   18e58:	4643      	mov	r3, r8
   18e5a:	4622      	mov	r2, r4
   18e5c:	fbb5 f1f4 	udiv	r1, r5, r4
   18e60:	ebaa 0005 	sub.w	r0, sl, r5
   18e64:	f7ff ff12 	bl	18c8c <qsort>
		if (d1 > es) {
   18e68:	455c      	cmp	r4, fp
   18e6a:	f4bf af20 	bcs.w	18cae <qsort+0x22>
			n = d1 / es;
   18e6e:	fbbb fbf4 	udiv	fp, fp, r4
			goto loop;
   18e72:	e712      	b.n	18c9a <qsort+0xe>

00018e74 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   18e74:	070b      	lsls	r3, r1, #28
   18e76:	d504      	bpl.n	18e82 <foldcase+0xe>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   18e78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   18e7c:	2b19      	cmp	r3, #25
			((ua | 32U) - (unsigned)'a' < 6U));
}

static inline int tolower(int chr)
{
	return (chr >= (int)'A' && chr <= (int)'Z') ? (chr + 32) : (chr);
   18e7e:	bf98      	it	ls
   18e80:	3020      	addls	r0, #32
        return tolower(ch);
    return ch;
}
   18e82:	4770      	bx	lr

00018e84 <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   18e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e88:	b087      	sub	sp, #28
   18e8a:	468a      	mov	sl, r1
   18e8c:	4614      	mov	r4, r2
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   18e8e:	4605      	mov	r5, r0
{
   18e90:	9302      	str	r3, [sp, #8]
    if ((pattern == NULL) || (string == NULL))
   18e92:	b918      	cbnz	r0, 18e9c <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   18e94:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   18e96:	b007      	add	sp, #28
   18e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   18e9c:	2900      	cmp	r1, #0
   18e9e:	d0f9      	beq.n	18e94 <fnmatchx+0x10>
    if (recursion-- == 0)
   18ea0:	9b02      	ldr	r3, [sp, #8]
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	f000 811a 	beq.w	190dc <fnmatchx+0x258>
   18ea8:	460a      	mov	r2, r1
            if (*string == '.' && (flags & FNM_PERIOD) &&
   18eaa:	f004 0304 	and.w	r3, r4, #4
   18eae:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   18eb0:	46a8      	mov	r8, r5
   18eb2:	4621      	mov	r1, r4
   18eb4:	f818 0b01 	ldrb.w	r0, [r8], #1
   18eb8:	f7ff ffdc 	bl	18e74 <foldcase>
   18ebc:	4603      	mov	r3, r0
   18ebe:	b2c0      	uxtb	r0, r0
   18ec0:	283f      	cmp	r0, #63	; 0x3f
   18ec2:	4606      	mov	r6, r0
   18ec4:	7817      	ldrb	r7, [r2, #0]
   18ec6:	d024      	beq.n	18f12 <fnmatchx+0x8e>
   18ec8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   18ecc:	d10a      	bne.n	18ee4 <fnmatchx+0x60>
   18ece:	b1c0      	cbz	r0, 18f02 <fnmatchx+0x7e>
   18ed0:	282a      	cmp	r0, #42	; 0x2a
   18ed2:	d035      	beq.n	18f40 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   18ed4:	4621      	mov	r1, r4
   18ed6:	4638      	mov	r0, r7
   18ed8:	3201      	adds	r2, #1
   18eda:	f7ff ffcb 	bl	18e74 <foldcase>
   18ede:	4286      	cmp	r6, r0
   18ee0:	d01e      	beq.n	18f20 <fnmatchx+0x9c>
   18ee2:	e7d7      	b.n	18e94 <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   18ee4:	285b      	cmp	r0, #91	; 0x5b
   18ee6:	d07b      	beq.n	18fe0 <fnmatchx+0x15c>
   18ee8:	285c      	cmp	r0, #92	; 0x5c
   18eea:	d1f3      	bne.n	18ed4 <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   18eec:	07e3      	lsls	r3, r4, #31
   18eee:	d4f1      	bmi.n	18ed4 <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   18ef0:	7868      	ldrb	r0, [r5, #1]
   18ef2:	f7ff ffbf 	bl	18e74 <foldcase>
   18ef6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   18efa:	bf18      	it	ne
   18efc:	f105 0802 	addne.w	r8, r5, #2
   18f00:	e7e8      	b.n	18ed4 <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   18f02:	06e4      	lsls	r4, r4, #27
   18f04:	d501      	bpl.n	18f0a <fnmatchx+0x86>
   18f06:	2f2f      	cmp	r7, #47	; 0x2f
   18f08:	d0c5      	beq.n	18e96 <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   18f0a:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   18f0c:	bf18      	it	ne
   18f0e:	2001      	movne	r0, #1
   18f10:	e7c1      	b.n	18e96 <fnmatchx+0x12>
            if (*string == EOS)
   18f12:	2f00      	cmp	r7, #0
   18f14:	d0be      	beq.n	18e94 <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   18f16:	2f2f      	cmp	r7, #47	; 0x2f
   18f18:	d104      	bne.n	18f24 <fnmatchx+0xa0>
   18f1a:	07a1      	lsls	r1, r4, #30
   18f1c:	d4ba      	bmi.n	18e94 <fnmatchx+0x10>
            ++string;
   18f1e:	3201      	adds	r2, #1
            break;
   18f20:	4645      	mov	r5, r8
   18f22:	e7c5      	b.n	18eb0 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   18f24:	2f2e      	cmp	r7, #46	; 0x2e
   18f26:	d1fa      	bne.n	18f1e <fnmatchx+0x9a>
   18f28:	9b04      	ldr	r3, [sp, #16]
   18f2a:	2b00      	cmp	r3, #0
   18f2c:	d0f7      	beq.n	18f1e <fnmatchx+0x9a>
   18f2e:	4552      	cmp	r2, sl
   18f30:	d0b0      	beq.n	18e94 <fnmatchx+0x10>
                (string == stringstart ||
   18f32:	07a3      	lsls	r3, r4, #30
   18f34:	d5f3      	bpl.n	18f1e <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   18f36:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   18f3a:	2b2f      	cmp	r3, #47	; 0x2f
   18f3c:	d1ef      	bne.n	18f1e <fnmatchx+0x9a>
   18f3e:	e7a9      	b.n	18e94 <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   18f40:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   18f42:	f7ff ff97 	bl	18e74 <foldcase>
   18f46:	b2c1      	uxtb	r1, r0
            while (c == '*')
   18f48:	292a      	cmp	r1, #42	; 0x2a
   18f4a:	d018      	beq.n	18f7e <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   18f4c:	2f2e      	cmp	r7, #46	; 0x2e
   18f4e:	d109      	bne.n	18f64 <fnmatchx+0xe0>
   18f50:	9b04      	ldr	r3, [sp, #16]
   18f52:	b13b      	cbz	r3, 18f64 <fnmatchx+0xe0>
   18f54:	4552      	cmp	r2, sl
   18f56:	d09d      	beq.n	18e94 <fnmatchx+0x10>
                (string == stringstart ||
   18f58:	07a7      	lsls	r7, r4, #30
   18f5a:	d503      	bpl.n	18f64 <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   18f5c:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   18f60:	2b2f      	cmp	r3, #47	; 0x2f
   18f62:	d097      	beq.n	18e94 <fnmatchx+0x10>
            if (c == EOS) {
   18f64:	b979      	cbnz	r1, 18f86 <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   18f66:	f014 0002 	ands.w	r0, r4, #2
   18f6a:	d094      	beq.n	18e96 <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   18f6c:	06e6      	lsls	r6, r4, #27
   18f6e:	f100 80b7 	bmi.w	190e0 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   18f72:	212f      	movs	r1, #47	; 0x2f
   18f74:	4610      	mov	r0, r2
   18f76:	f002 f93f 	bl	1b1f8 <strchr>
                        0 : FNM_NOMATCH;
   18f7a:	3800      	subs	r0, #0
   18f7c:	e7c6      	b.n	18f0c <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   18f7e:	4621      	mov	r1, r4
   18f80:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   18f84:	e7dd      	b.n	18f42 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   18f86:	292f      	cmp	r1, #47	; 0x2f
   18f88:	d021      	beq.n	18fce <fnmatchx+0x14a>
   18f8a:	4616      	mov	r6, r2
    if (recursion-- == 0)
   18f8c:	9b02      	ldr	r3, [sp, #8]
                switch ((e = fnmatchx(pattern, string,
   18f8e:	f024 0904 	bic.w	r9, r4, #4
    if (recursion-- == 0)
   18f92:	1e5f      	subs	r7, r3, #1
                if (test == '/' && flags & FNM_PATHNAME)
   18f94:	f004 0a02 	and.w	sl, r4, #2
   18f98:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   18f9a:	4621      	mov	r1, r4
   18f9c:	f89b 0000 	ldrb.w	r0, [fp]
   18fa0:	f7ff ff68 	bl	18e74 <foldcase>
   18fa4:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   18fa8:	f106 0601 	add.w	r6, r6, #1
   18fac:	f43f af72 	beq.w	18e94 <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   18fb0:	463b      	mov	r3, r7
   18fb2:	464a      	mov	r2, r9
   18fb4:	4659      	mov	r1, fp
   18fb6:	4640      	mov	r0, r8
   18fb8:	f7ff ff64 	bl	18e84 <fnmatchx>
   18fbc:	2801      	cmp	r0, #1
   18fbe:	f47f af6a 	bne.w	18e96 <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   18fc2:	2d2f      	cmp	r5, #47	; 0x2f
   18fc4:	d1e8      	bne.n	18f98 <fnmatchx+0x114>
   18fc6:	f1ba 0f00 	cmp.w	sl, #0
   18fca:	d0e5      	beq.n	18f98 <fnmatchx+0x114>
   18fcc:	e762      	b.n	18e94 <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   18fce:	07a5      	lsls	r5, r4, #30
   18fd0:	d5db      	bpl.n	18f8a <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   18fd2:	4610      	mov	r0, r2
   18fd4:	f002 f910 	bl	1b1f8 <strchr>
   18fd8:	4602      	mov	r2, r0
   18fda:	2800      	cmp	r0, #0
   18fdc:	d1a0      	bne.n	18f20 <fnmatchx+0x9c>
   18fde:	e759      	b.n	18e94 <fnmatchx+0x10>
            if (*string == EOS)
   18fe0:	2f00      	cmp	r7, #0
   18fe2:	f43f af57 	beq.w	18e94 <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   18fe6:	2f2f      	cmp	r7, #47	; 0x2f
   18fe8:	d102      	bne.n	18ff0 <fnmatchx+0x16c>
   18fea:	07a0      	lsls	r0, r4, #30
   18fec:	f53f af52 	bmi.w	18e94 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   18ff0:	4621      	mov	r1, r4
   18ff2:	4638      	mov	r0, r7
   18ff4:	f7ff ff3e 	bl	18e74 <foldcase>
   18ff8:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   18ffa:	f1b8 0f00 	cmp.w	r8, #0
   18ffe:	f43f af49 	beq.w	18e94 <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   19002:	786b      	ldrb	r3, [r5, #1]
   19004:	2b21      	cmp	r3, #33	; 0x21
   19006:	d001      	beq.n	1900c <fnmatchx+0x188>
   19008:	2b5e      	cmp	r3, #94	; 0x5e
   1900a:	d126      	bne.n	1905a <fnmatchx+0x1d6>
        ++pattern;
   1900c:	2301      	movs	r3, #1
   1900e:	3502      	adds	r5, #2
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   19010:	9301      	str	r3, [sp, #4]
    need = 1;
   19012:	2301      	movs	r3, #1
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   19014:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   19018:	ea04 0103 	and.w	r1, r4, r3
   1901c:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   1901e:	462e      	mov	r6, r5
   19020:	4621      	mov	r1, r4
   19022:	f816 0b01 	ldrb.w	r0, [r6], #1
   19026:	9305      	str	r3, [sp, #20]
   19028:	f7ff ff24 	bl	18e74 <foldcase>
   1902c:	fa5f f980 	uxtb.w	r9, r0
   19030:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   19034:	9b05      	ldr	r3, [sp, #20]
   19036:	d113      	bne.n	19060 <fnmatchx+0x1dc>
   19038:	bb2b      	cbnz	r3, 19086 <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   1903a:	9b01      	ldr	r3, [sp, #4]
   1903c:	455b      	cmp	r3, fp
   1903e:	f43f af29 	beq.w	18e94 <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   19042:	2e00      	cmp	r6, #0
   19044:	f43f af26 	beq.w	18e94 <fnmatchx+0x10>
            if (r == (void *)-1) {
   19048:	1c71      	adds	r1, r6, #1
   1904a:	d103      	bne.n	19054 <fnmatchx+0x1d0>
                if (*string != '[')
   1904c:	2f5b      	cmp	r7, #91	; 0x5b
   1904e:	f47f af21 	bne.w	18e94 <fnmatchx+0x10>
   19052:	4646      	mov	r6, r8
            break;
   19054:	46b0      	mov	r8, r6
            ++string;
   19056:	3201      	adds	r2, #1
            break;
   19058:	e762      	b.n	18f20 <fnmatchx+0x9c>
   1905a:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   1905c:	2300      	movs	r3, #0
   1905e:	e7d7      	b.n	19010 <fnmatchx+0x18c>
        if (c == '/')
   19060:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   19064:	d0f2      	beq.n	1904c <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   19066:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1906a:	d108      	bne.n	1907e <fnmatchx+0x1fa>
   1906c:	9b03      	ldr	r3, [sp, #12]
   1906e:	b953      	cbnz	r3, 19086 <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   19070:	4621      	mov	r1, r4
   19072:	7868      	ldrb	r0, [r5, #1]
   19074:	f7ff fefe 	bl	18e74 <foldcase>
   19078:	1cae      	adds	r6, r5, #2
   1907a:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   1907e:	f1b9 0f00 	cmp.w	r9, #0
   19082:	f43f af07 	beq.w	18e94 <fnmatchx+0x10>
        if (*pattern == '-' 
   19086:	7833      	ldrb	r3, [r6, #0]
   19088:	2b2d      	cmp	r3, #45	; 0x2d
   1908a:	d120      	bne.n	190ce <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   1908c:	4621      	mov	r1, r4
   1908e:	7870      	ldrb	r0, [r6, #1]
   19090:	f7ff fef0 	bl	18e74 <foldcase>
   19094:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   19098:	d019      	beq.n	190ce <fnmatchx+0x24a>
   1909a:	285d      	cmp	r0, #93	; 0x5d
   1909c:	d017      	beq.n	190ce <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   1909e:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   190a0:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   190a4:	d10a      	bne.n	190bc <fnmatchx+0x238>
   190a6:	9b03      	ldr	r3, [sp, #12]
   190a8:	b943      	cbnz	r3, 190bc <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   190aa:	78b0      	ldrb	r0, [r6, #2]
   190ac:	f7ff fee2 	bl	18e74 <foldcase>
            if (c2 == EOS)
   190b0:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   190b4:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   190b8:	f43f aeec 	beq.w	18e94 <fnmatchx+0x10>
            if (c <= test && test <= c2)
   190bc:	9b00      	ldr	r3, [sp, #0]
   190be:	454b      	cmp	r3, r9
   190c0:	db03      	blt.n	190ca <fnmatchx+0x246>
                ok = 1;
   190c2:	4283      	cmp	r3, r0
   190c4:	bfd8      	it	le
   190c6:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   190ca:	2300      	movs	r3, #0
   190cc:	e7a7      	b.n	1901e <fnmatchx+0x19a>
        } else if (c == test)
   190ce:	9b00      	ldr	r3, [sp, #0]
   190d0:	4635      	mov	r5, r6
   190d2:	454b      	cmp	r3, r9
   190d4:	bf08      	it	eq
   190d6:	f04f 0b01 	moveq.w	fp, #1
   190da:	e7f6      	b.n	190ca <fnmatchx+0x246>
        return FNM_NORES;
   190dc:	2003      	movs	r0, #3
   190de:	e6da      	b.n	18e96 <fnmatchx+0x12>
                return 0;
   190e0:	4608      	mov	r0, r1
   190e2:	e6d8      	b.n	18e96 <fnmatchx+0x12>

000190e4 <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   190e4:	2340      	movs	r3, #64	; 0x40
   190e6:	f7ff becd 	b.w	18e84 <fnmatchx>

000190ea <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   190ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   190ee:	b2db      	uxtb	r3, r3
   190f0:	2b09      	cmp	r3, #9
   190f2:	d802      	bhi.n	190fa <char2hex+0x10>
		*x = c - '0';
   190f4:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   190f6:	2000      	movs	r0, #0
   190f8:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   190fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   190fe:	2b05      	cmp	r3, #5
   19100:	d802      	bhi.n	19108 <char2hex+0x1e>
		*x = c - 'a' + 10;
   19102:	3857      	subs	r0, #87	; 0x57
   19104:	7008      	strb	r0, [r1, #0]
   19106:	e7f6      	b.n	190f6 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   19108:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1910c:	2b05      	cmp	r3, #5
   1910e:	d801      	bhi.n	19114 <char2hex+0x2a>
		*x = c - 'A' + 10;
   19110:	3837      	subs	r0, #55	; 0x37
   19112:	e7f7      	b.n	19104 <char2hex+0x1a>
		return -EINVAL;
   19114:	f06f 0015 	mvn.w	r0, #21
}
   19118:	4770      	bx	lr

0001911a <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   1911a:	2809      	cmp	r0, #9
   1911c:	d803      	bhi.n	19126 <hex2char+0xc>
		*c = x + '0';
   1911e:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   19120:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   19122:	2000      	movs	r0, #0
   19124:	4770      	bx	lr
	} else  if (x <= 15) {
   19126:	280f      	cmp	r0, #15
   19128:	d801      	bhi.n	1912e <hex2char+0x14>
		*c = x - 10 + 'a';
   1912a:	3057      	adds	r0, #87	; 0x57
   1912c:	e7f8      	b.n	19120 <hex2char+0x6>
		return -EINVAL;
   1912e:	f06f 0015 	mvn.w	r0, #21
}
   19132:	4770      	bx	lr

00019134 <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   19134:	3301      	adds	r3, #1
   19136:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   1913a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1913e:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   19140:	ea4f 0641 	mov.w	r6, r1, lsl #1
   19144:	d203      	bcs.n	1914e <bin2hex+0x1a>
		return 0;
   19146:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   19148:	4630      	mov	r0, r6
   1914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1914e:	4603      	mov	r3, r0
   19150:	1c55      	adds	r5, r2, #1
   19152:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   19154:	42bb      	cmp	r3, r7
   19156:	d103      	bne.n	19160 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   19158:	2300      	movs	r3, #0
   1915a:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   1915e:	e7f3      	b.n	19148 <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   19160:	7818      	ldrb	r0, [r3, #0]
   19162:	1e69      	subs	r1, r5, #1
   19164:	0900      	lsrs	r0, r0, #4
   19166:	4698      	mov	r8, r3
   19168:	f7ff ffd7 	bl	1911a <hex2char>
   1916c:	2800      	cmp	r0, #0
   1916e:	dbea      	blt.n	19146 <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   19170:	f898 0000 	ldrb.w	r0, [r8]
   19174:	4629      	mov	r1, r5
   19176:	f000 000f 	and.w	r0, r0, #15
   1917a:	3301      	adds	r3, #1
   1917c:	f7ff ffcd 	bl	1911a <hex2char>
   19180:	2800      	cmp	r0, #0
   19182:	f105 0502 	add.w	r5, r5, #2
   19186:	dae5      	bge.n	19154 <bin2hex+0x20>
   19188:	e7dd      	b.n	19146 <bin2hex+0x12>

0001918a <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1918a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1918c:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1918e:	f001 0001 	and.w	r0, r1, #1
   19192:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   19196:	429d      	cmp	r5, r3
   19198:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1919c:	d903      	bls.n	191a6 <hex2bin+0x1c>
		return 0;
   1919e:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   191a0:	4628      	mov	r0, r5
   191a2:	b003      	add	sp, #12
   191a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   191a6:	b158      	cbz	r0, 191c0 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   191a8:	7820      	ldrb	r0, [r4, #0]
   191aa:	f10d 0107 	add.w	r1, sp, #7
   191ae:	f7ff ff9c 	bl	190ea <char2hex>
   191b2:	2800      	cmp	r0, #0
   191b4:	dbf3      	blt.n	1919e <hex2bin+0x14>
		buf[0] = dec;
   191b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   191ba:	3401      	adds	r4, #1
		buf[0] = dec;
   191bc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   191c0:	3401      	adds	r4, #1
   191c2:	4416      	add	r6, r2
   191c4:	42b2      	cmp	r2, r6
   191c6:	d0eb      	beq.n	191a0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   191c8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   191cc:	f10d 0107 	add.w	r1, sp, #7
   191d0:	f7ff ff8b 	bl	190ea <char2hex>
   191d4:	2800      	cmp	r0, #0
   191d6:	dbe2      	blt.n	1919e <hex2bin+0x14>
		buf[i] = dec << 4;
   191d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   191dc:	f10d 0107 	add.w	r1, sp, #7
		buf[i] = dec << 4;
   191e0:	011b      	lsls	r3, r3, #4
   191e2:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   191e4:	f814 0b02 	ldrb.w	r0, [r4], #2
   191e8:	f7ff ff7f 	bl	190ea <char2hex>
   191ec:	2800      	cmp	r0, #0
   191ee:	dbd6      	blt.n	1919e <hex2bin+0x14>
		buf[i] += dec;
   191f0:	7813      	ldrb	r3, [r2, #0]
   191f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   191f6:	440b      	add	r3, r1
   191f8:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   191fc:	e7e2      	b.n	191c4 <hex2bin+0x3a>

000191fe <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   191fe:	4603      	mov	r3, r0
   19200:	b140      	cbz	r0, 19214 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19202:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19204:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19208:	2a02      	cmp	r2, #2
   1920a:	d006      	beq.n	1921a <sys_notify_validate+0x1c>
   1920c:	2a03      	cmp	r2, #3
   1920e:	d004      	beq.n	1921a <sys_notify_validate+0x1c>
   19210:	2a01      	cmp	r2, #1
   19212:	d005      	beq.n	19220 <sys_notify_validate+0x22>
		return -EINVAL;
   19214:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   19218:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1921a:	681a      	ldr	r2, [r3, #0]
   1921c:	2a00      	cmp	r2, #0
   1921e:	d0f9      	beq.n	19214 <sys_notify_validate+0x16>
		notify->result = 0;
   19220:	2000      	movs	r0, #0
   19222:	6098      	str	r0, [r3, #8]
   19224:	4770      	bx	lr

00019226 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19226:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   19228:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   1922a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1922e:	2a02      	cmp	r2, #2
{
   19230:	4603      	mov	r3, r0
	notify->result = res;
   19232:	6081      	str	r1, [r0, #8]
	switch (method) {
   19234:	d00a      	beq.n	1924c <sys_notify_finalize+0x26>
   19236:	2a03      	cmp	r2, #3
   19238:	d10b      	bne.n	19252 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1923a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1923c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1923e:	2200      	movs	r2, #0
   19240:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19242:	b108      	cbz	r0, 19248 <sys_notify_finalize+0x22>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   19244:	f7fc fda2 	bl	15d8c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19248:	4620      	mov	r0, r4
   1924a:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = 0;
   1924c:	2400      	movs	r4, #0
		sig = notify->method.signal;
   1924e:	6800      	ldr	r0, [r0, #0]
		break;
   19250:	e7f5      	b.n	1923e <sys_notify_finalize+0x18>
	switch (method) {
   19252:	2400      	movs	r4, #0
   19254:	4620      	mov	r0, r4
   19256:	e7f2      	b.n	1923e <sys_notify_finalize+0x18>

00019258 <arch_printk_char_out>:
}
   19258:	2000      	movs	r0, #0
   1925a:	4770      	bx	lr

0001925c <str_out>:
{
   1925c:	b530      	push	{r4, r5, lr}
   1925e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19260:	680c      	ldr	r4, [r1, #0]
   19262:	1c55      	adds	r5, r2, #1
   19264:	b114      	cbz	r4, 1926c <str_out+0x10>
   19266:	684b      	ldr	r3, [r1, #4]
   19268:	4293      	cmp	r3, r2
   1926a:	dc01      	bgt.n	19270 <str_out+0x14>
		ctx->count++;
   1926c:	608d      	str	r5, [r1, #8]
}
   1926e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19270:	3b01      	subs	r3, #1
   19272:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19274:	bf08      	it	eq
   19276:	2200      	moveq	r2, #0
   19278:	608d      	str	r5, [r1, #8]
   1927a:	bf0c      	ite	eq
   1927c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1927e:	54a0      	strbne	r0, [r4, r2]
   19280:	e7f5      	b.n	1926e <str_out+0x12>

00019282 <printk>:
{
   19282:	b40f      	push	{r0, r1, r2, r3}
   19284:	b507      	push	{r0, r1, r2, lr}
   19286:	a904      	add	r1, sp, #16
   19288:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1928c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1928e:	f7f5 fe3f 	bl	ef10 <vprintk>
}
   19292:	b003      	add	sp, #12
   19294:	f85d eb04 	ldr.w	lr, [sp], #4
   19298:	b004      	add	sp, #16
   1929a:	4770      	bx	lr

0001929c <snprintk>:
{
   1929c:	b40c      	push	{r2, r3}
   1929e:	b507      	push	{r0, r1, r2, lr}
   192a0:	ab04      	add	r3, sp, #16
   192a2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   192a6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   192a8:	f7f5 fe40 	bl	ef2c <vsnprintk>
}
   192ac:	b003      	add	sp, #12
   192ae:	f85d eb04 	ldr.w	lr, [sp], #4
   192b2:	b002      	add	sp, #8
   192b4:	4770      	bx	lr

000192b6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   192b6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   192b8:	f013 0307 	ands.w	r3, r3, #7
   192bc:	d105      	bne.n	192ca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   192be:	6803      	ldr	r3, [r0, #0]
   192c0:	2b00      	cmp	r3, #0
		evt = EVT_START;
   192c2:	bf0c      	ite	eq
   192c4:	2000      	moveq	r0, #0
   192c6:	2003      	movne	r0, #3
   192c8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   192ca:	2b02      	cmp	r3, #2
   192cc:	d105      	bne.n	192da <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   192ce:	8b43      	ldrh	r3, [r0, #26]
   192d0:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   192d2:	bf14      	ite	ne
   192d4:	2000      	movne	r0, #0
   192d6:	2004      	moveq	r0, #4
   192d8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   192da:	2b01      	cmp	r3, #1
   192dc:	d105      	bne.n	192ea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   192de:	6803      	ldr	r3, [r0, #0]
   192e0:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   192e2:	bf0c      	ite	eq
   192e4:	2000      	moveq	r0, #0
   192e6:	2005      	movne	r0, #5
   192e8:	4770      	bx	lr
	int evt = EVT_NOP;
   192ea:	2000      	movs	r0, #0
}
   192ec:	4770      	bx	lr

000192ee <notify_one>:
{
   192ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   192f2:	460d      	mov	r5, r1
   192f4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   192f6:	4619      	mov	r1, r3
   192f8:	1d28      	adds	r0, r5, #4
{
   192fa:	4690      	mov	r8, r2
   192fc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   192fe:	f7ff ff92 	bl	19226 <sys_notify_finalize>
	if (cb) {
   19302:	4604      	mov	r4, r0
   19304:	b138      	cbz	r0, 19316 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19306:	4633      	mov	r3, r6
   19308:	4642      	mov	r2, r8
   1930a:	4629      	mov	r1, r5
   1930c:	4638      	mov	r0, r7
   1930e:	46a4      	mov	ip, r4
}
   19310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19314:	4760      	bx	ip
}
   19316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001931a <transition_complete>:
{
   1931a:	b410      	push	{r4}
	__asm__ volatile(
   1931c:	f04f 0420 	mov.w	r4, #32
   19320:	f3ef 8211 	mrs	r2, BASEPRI
   19324:	f384 8811 	msr	BASEPRI, r4
   19328:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1932c:	6141      	str	r1, [r0, #20]
}
   1932e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19330:	2101      	movs	r1, #1
   19332:	f7f5 be0f 	b.w	ef54 <process_event>

00019336 <validate_args>:
{
   19336:	b510      	push	{r4, lr}
   19338:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1933a:	b140      	cbz	r0, 1934e <validate_args+0x18>
   1933c:	b139      	cbz	r1, 1934e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1933e:	1d08      	adds	r0, r1, #4
   19340:	f7ff ff5d 	bl	191fe <sys_notify_validate>
	if ((rv == 0)
   19344:	b928      	cbnz	r0, 19352 <validate_args+0x1c>
	    && ((cli->notify.flags
   19346:	68a3      	ldr	r3, [r4, #8]
   19348:	f033 0303 	bics.w	r3, r3, #3
   1934c:	d001      	beq.n	19352 <validate_args+0x1c>
		rv = -EINVAL;
   1934e:	f06f 0015 	mvn.w	r0, #21
}
   19352:	bd10      	pop	{r4, pc}

00019354 <onoff_manager_init>:
{
   19354:	b538      	push	{r3, r4, r5, lr}
   19356:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19358:	4605      	mov	r5, r0
   1935a:	b158      	cbz	r0, 19374 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1935c:	b151      	cbz	r1, 19374 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1935e:	680b      	ldr	r3, [r1, #0]
   19360:	b143      	cbz	r3, 19374 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19362:	684b      	ldr	r3, [r1, #4]
   19364:	b133      	cbz	r3, 19374 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19366:	221c      	movs	r2, #28
   19368:	2100      	movs	r1, #0
   1936a:	f001 ffc7 	bl	1b2fc <memset>
	return 0;
   1936e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19370:	612c      	str	r4, [r5, #16]
}
   19372:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19374:	f06f 0015 	mvn.w	r0, #21
   19378:	e7fb      	b.n	19372 <onoff_manager_init+0x1e>

0001937a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1937a:	b570      	push	{r4, r5, r6, lr}
   1937c:	4604      	mov	r4, r0
   1937e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19380:	f7ff ffd9 	bl	19336 <validate_args>

	if (rv < 0) {
   19384:	1e05      	subs	r5, r0, #0
   19386:	db31      	blt.n	193ec <onoff_request+0x72>
   19388:	f04f 0320 	mov.w	r3, #32
   1938c:	f3ef 8111 	mrs	r1, BASEPRI
   19390:	f383 8811 	msr	BASEPRI, r3
   19394:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19398:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1939c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1939e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   193a0:	42ab      	cmp	r3, r5
   193a2:	f000 0207 	and.w	r2, r0, #7
   193a6:	d02e      	beq.n	19406 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   193a8:	2a02      	cmp	r2, #2
   193aa:	d10e      	bne.n	193ca <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   193ac:	3301      	adds	r3, #1
   193ae:	8363      	strh	r3, [r4, #26]
	rv = state;
   193b0:	4615      	mov	r5, r2
		notify = true;
   193b2:	2301      	movs	r3, #1
	__asm__ volatile(
   193b4:	f381 8811 	msr	BASEPRI, r1
   193b8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   193bc:	b1b3      	cbz	r3, 193ec <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   193be:	2300      	movs	r3, #0
   193c0:	4631      	mov	r1, r6
   193c2:	4620      	mov	r0, r4
   193c4:	f7ff ff93 	bl	192ee <notify_one>
   193c8:	e010      	b.n	193ec <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   193ca:	0783      	lsls	r3, r0, #30
   193cc:	d001      	beq.n	193d2 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   193ce:	2a06      	cmp	r2, #6
   193d0:	d10e      	bne.n	193f0 <onoff_request+0x76>
	parent->next = child;
   193d2:	2300      	movs	r3, #0
   193d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   193d6:	6863      	ldr	r3, [r4, #4]
   193d8:	b993      	cbnz	r3, 19400 <onoff_request+0x86>
	list->head = node;
   193da:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   193de:	4615      	mov	r5, r2
   193e0:	b962      	cbnz	r2, 193fc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   193e2:	460a      	mov	r2, r1
   193e4:	4620      	mov	r0, r4
   193e6:	2102      	movs	r1, #2
   193e8:	f7f5 fdb4 	bl	ef54 <process_event>
		}
	}

	return rv;
}
   193ec:	4628      	mov	r0, r5
   193ee:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   193f0:	2a05      	cmp	r2, #5
   193f2:	bf0c      	ite	eq
   193f4:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   193f8:	f06f 0504 	mvnne.w	r5, #4
   193fc:	2300      	movs	r3, #0
   193fe:	e7d9      	b.n	193b4 <onoff_request+0x3a>
	parent->next = child;
   19400:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19402:	6066      	str	r6, [r4, #4]
}
   19404:	e7eb      	b.n	193de <onoff_request+0x64>
		rv = -EAGAIN;
   19406:	f06f 050a 	mvn.w	r5, #10
   1940a:	e7f7      	b.n	193fc <onoff_request+0x82>

0001940c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1940c:	4604      	mov	r4, r0
   1940e:	b508      	push	{r3, lr}
   19410:	4608      	mov	r0, r1
   19412:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19414:	461a      	mov	r2, r3
   19416:	47a0      	blx	r4
	return z_impl_k_current_get();
   19418:	f7fc f87e 	bl	15518 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1941c:	f7fa f892 	bl	13544 <z_impl_k_thread_abort>

00019420 <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   19420:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   19422:	f7f5 fe7d 	bl	f120 <timeutil_timegm64>
   19426:	4605      	mov	r5, r0
   19428:	460c      	mov	r4, r1
   1942a:	f7fb f96b 	bl	14704 <z_impl_z_errno>
	time_t rv = (time_t)time;

	errno = 0;
   1942e:	2300      	movs	r3, #0
		|| (time > (int64_t)INT32_MAX))) {
		errno = ERANGE;
		rv = -1;
	}
	return rv;
}
   19430:	4621      	mov	r1, r4
	errno = 0;
   19432:	6003      	str	r3, [r0, #0]
}
   19434:	4628      	mov	r0, r5
   19436:	bd38      	pop	{r3, r4, r5, pc}

00019438 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19438:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1943a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1943e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19442:	bf2c      	ite	cs
   19444:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   19448:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1944c:	4770      	bx	lr

0001944e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1944e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   19452:	6880      	ldr	r0, [r0, #8]
   19454:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   19458:	bf2c      	ite	cs
   1945a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1945e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   19462:	4770      	bx	lr

00019464 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19464:	2201      	movs	r2, #1
{
   19466:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19468:	f7ff ffe6 	bl	19438 <chunk_field>
}
   1946c:	0840      	lsrs	r0, r0, #1
   1946e:	bd08      	pop	{r3, pc}

00019470 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19470:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19472:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1947a:	d308      	bcc.n	1948e <set_chunk_used+0x1e>
		if (used) {
   1947c:	684b      	ldr	r3, [r1, #4]
   1947e:	b11a      	cbz	r2, 19488 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19480:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19484:	604b      	str	r3, [r1, #4]
   19486:	4770      	bx	lr
   19488:	f023 0301 	bic.w	r3, r3, #1
   1948c:	e7fa      	b.n	19484 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1948e:	884b      	ldrh	r3, [r1, #2]
   19490:	b11a      	cbz	r2, 1949a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19492:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19496:	804b      	strh	r3, [r1, #2]
		}
	}
}
   19498:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1949a:	f023 0301 	bic.w	r3, r3, #1
   1949e:	e7fa      	b.n	19496 <set_chunk_used+0x26>

000194a0 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   194a0:	0053      	lsls	r3, r2, #1
   194a2:	2201      	movs	r2, #1
   194a4:	f7ff bfd3 	b.w	1944e <chunk_set>

000194a8 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   194a8:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   194aa:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   194ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   194b0:	bf2c      	ite	cs
   194b2:	2002      	movcs	r0, #2
   194b4:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   194b6:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   194b8:	fab0 f080 	clz	r0, r0
}
   194bc:	f1c0 001f 	rsb	r0, r0, #31
   194c0:	4770      	bx	lr

000194c2 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   194c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194c6:	4614      	mov	r4, r2
   194c8:	460e      	mov	r6, r1
   194ca:	4605      	mov	r5, r0
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	size_t sz0 = chunk_size(h, lc);
   194cc:	f7ff ffca 	bl	19464 <chunk_size>
	size_t lsz = rc - lc;
   194d0:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   194d4:	1b37      	subs	r7, r6, r4
   194d6:	4407      	add	r7, r0

	set_chunk_size(h, lc, lsz);
   194d8:	4642      	mov	r2, r8
   194da:	4631      	mov	r1, r6
   194dc:	4628      	mov	r0, r5
   194de:	f7ff ffdf 	bl	194a0 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   194e2:	463a      	mov	r2, r7
   194e4:	4621      	mov	r1, r4
   194e6:	4628      	mov	r0, r5
   194e8:	f7ff ffda 	bl	194a0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   194ec:	4643      	mov	r3, r8
   194ee:	2200      	movs	r2, #0
   194f0:	4621      	mov	r1, r4
   194f2:	4628      	mov	r0, r5
   194f4:	f7ff ffab 	bl	1944e <chunk_set>
	return c + chunk_size(h, c);
   194f8:	4621      	mov	r1, r4
   194fa:	4628      	mov	r0, r5
   194fc:	f7ff ffb2 	bl	19464 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19500:	463b      	mov	r3, r7
   19502:	1821      	adds	r1, r4, r0
   19504:	2200      	movs	r2, #0
   19506:	4628      	mov	r0, r5
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   19508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1950c:	f7ff bf9f 	b.w	1944e <chunk_set>

00019510 <free_list_remove_bidx>:
{
   19510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19514:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19516:	2203      	movs	r2, #3
   19518:	460e      	mov	r6, r1
   1951a:	4604      	mov	r4, r0
   1951c:	f7ff ff8c 	bl	19438 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19520:	4286      	cmp	r6, r0
   19522:	4605      	mov	r5, r0
   19524:	f107 0804 	add.w	r8, r7, #4
   19528:	d10b      	bne.n	19542 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1952a:	2301      	movs	r3, #1
   1952c:	fa03 f707 	lsl.w	r7, r3, r7
   19530:	68e3      	ldr	r3, [r4, #12]
   19532:	ea23 0307 	bic.w	r3, r3, r7
   19536:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   19538:	2300      	movs	r3, #0
   1953a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1953e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   19542:	4631      	mov	r1, r6
   19544:	2202      	movs	r2, #2
   19546:	4620      	mov	r0, r4
   19548:	f7ff ff76 	bl	19438 <chunk_field>
   1954c:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1954e:	462b      	mov	r3, r5
   19550:	4601      	mov	r1, r0
   19552:	2203      	movs	r2, #3
   19554:	4620      	mov	r0, r4
		b->next = second;
   19556:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1955a:	f7ff ff78 	bl	1944e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1955e:	4633      	mov	r3, r6
   19560:	4629      	mov	r1, r5
   19562:	4620      	mov	r0, r4
}
   19564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19568:	2202      	movs	r2, #2
   1956a:	f7ff bf70 	b.w	1944e <chunk_set>

0001956e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1956e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19572:	4604      	mov	r4, r0
   19574:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19576:	f7ff ff97 	bl	194a8 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1957a:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1957c:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1957e:	4620      	mov	r0, r4
   19580:	f7ff ff92 	bl	194a8 <bucket_idx>
   19584:	42a8      	cmp	r0, r5
   19586:	da03      	bge.n	19590 <alloc_chunk+0x22>
		return 0;
   19588:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1958a:	4630      	mov	r0, r6
   1958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19590:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19594:	f8da 9010 	ldr.w	r9, [sl, #16]
   19598:	f1b9 0f00 	cmp.w	r9, #0
   1959c:	d019      	beq.n	195d2 <alloc_chunk+0x64>
   1959e:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   195a0:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   195a4:	4620      	mov	r0, r4
   195a6:	4631      	mov	r1, r6
   195a8:	f7ff ff5c 	bl	19464 <chunk_size>
   195ac:	4540      	cmp	r0, r8
   195ae:	d305      	bcc.n	195bc <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   195b0:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   195b2:	4631      	mov	r1, r6
   195b4:	4620      	mov	r0, r4
   195b6:	f7ff ffab 	bl	19510 <free_list_remove_bidx>
		return c;
   195ba:	e7e6      	b.n	1958a <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   195bc:	2203      	movs	r2, #3
   195be:	4631      	mov	r1, r6
   195c0:	4620      	mov	r0, r4
   195c2:	f7ff ff39 	bl	19438 <chunk_field>
		} while (--i && b->next != first);
   195c6:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   195c8:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   195cc:	d001      	beq.n	195d2 <alloc_chunk+0x64>
   195ce:	4581      	cmp	r9, r0
   195d0:	d1e6      	bne.n	195a0 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   195d2:	f04f 32ff 	mov.w	r2, #4294967295
   195d6:	68e3      	ldr	r3, [r4, #12]
   195d8:	3501      	adds	r5, #1
   195da:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   195dc:	401a      	ands	r2, r3
   195de:	d0d3      	beq.n	19588 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   195e0:	fa92 f2a2 	rbit	r2, r2
   195e4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   195e8:	1d13      	adds	r3, r2, #4
   195ea:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   195ee:	e7e0      	b.n	195b2 <alloc_chunk+0x44>

000195f0 <free_list_add>:
{
   195f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195f4:	4604      	mov	r4, r0
   195f6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   195f8:	f7ff ff34 	bl	19464 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   195fc:	68a3      	ldr	r3, [r4, #8]
   195fe:	4601      	mov	r1, r0
   19600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19604:	d301      	bcc.n	1960a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19606:	2801      	cmp	r0, #1
   19608:	d035      	beq.n	19676 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1960a:	4620      	mov	r0, r4
   1960c:	f7ff ff4c 	bl	194a8 <bucket_idx>
	if (b->next == 0U) {
   19610:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19614:	6916      	ldr	r6, [r2, #16]
   19616:	b99e      	cbnz	r6, 19640 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19618:	2301      	movs	r3, #1
   1961a:	fa03 f000 	lsl.w	r0, r3, r0
   1961e:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19620:	4629      	mov	r1, r5
   19622:	4303      	orrs	r3, r0
   19624:	60e3      	str	r3, [r4, #12]
   19626:	4620      	mov	r0, r4
		b->next = c;
   19628:	6115      	str	r5, [r2, #16]
   1962a:	462b      	mov	r3, r5
   1962c:	2202      	movs	r2, #2
   1962e:	f7ff ff0e 	bl	1944e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19632:	2203      	movs	r2, #3
   19634:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19636:	4620      	mov	r0, r4
}
   19638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1963c:	f7ff bf07 	b.w	1944e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19640:	2202      	movs	r2, #2
   19642:	4631      	mov	r1, r6
   19644:	4620      	mov	r0, r4
   19646:	f7ff fef7 	bl	19438 <chunk_field>
   1964a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1964c:	4603      	mov	r3, r0
   1964e:	2202      	movs	r2, #2
   19650:	4629      	mov	r1, r5
   19652:	4620      	mov	r0, r4
   19654:	f7ff fefb 	bl	1944e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19658:	4633      	mov	r3, r6
   1965a:	2203      	movs	r2, #3
   1965c:	4629      	mov	r1, r5
   1965e:	4620      	mov	r0, r4
   19660:	f7ff fef5 	bl	1944e <chunk_set>
   19664:	2203      	movs	r2, #3
   19666:	4639      	mov	r1, r7
   19668:	462b      	mov	r3, r5
   1966a:	4620      	mov	r0, r4
   1966c:	f7ff feef 	bl	1944e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19670:	2202      	movs	r2, #2
   19672:	4631      	mov	r1, r6
   19674:	e7df      	b.n	19636 <free_list_add+0x46>
   19676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001967a <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1967a:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1967c:	b909      	cbnz	r1, 19682 <sys_heap_alloc+0x8>
		return NULL;
   1967e:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   19680:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   19682:	6805      	ldr	r5, [r0, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19684:	1dcc      	adds	r4, r1, #7
	return big_heap(h) ? 8 : 4;
   19686:	68ab      	ldr	r3, [r5, #8]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19688:	4628      	mov	r0, r5
   1968a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1968e:	bf2c      	ite	cs
   19690:	2208      	movcs	r2, #8
   19692:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19694:	4414      	add	r4, r2
   19696:	08e4      	lsrs	r4, r4, #3
   19698:	4621      	mov	r1, r4
   1969a:	f7ff ff68 	bl	1956e <alloc_chunk>
	if (c == 0U) {
   1969e:	4606      	mov	r6, r0
   196a0:	2800      	cmp	r0, #0
   196a2:	d0ec      	beq.n	1967e <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   196a4:	4601      	mov	r1, r0
   196a6:	4628      	mov	r0, r5
   196a8:	f7ff fedc 	bl	19464 <chunk_size>
   196ac:	42a0      	cmp	r0, r4
   196ae:	d909      	bls.n	196c4 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   196b0:	4434      	add	r4, r6
   196b2:	4631      	mov	r1, r6
   196b4:	4628      	mov	r0, r5
   196b6:	4622      	mov	r2, r4
   196b8:	f7ff ff03 	bl	194c2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   196bc:	4621      	mov	r1, r4
   196be:	4628      	mov	r0, r5
   196c0:	f7ff ff96 	bl	195f0 <free_list_add>
	set_chunk_used(h, c, true);
   196c4:	4628      	mov	r0, r5
   196c6:	2201      	movs	r2, #1
   196c8:	4631      	mov	r1, r6
   196ca:	f7ff fed1 	bl	19470 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   196ce:	68ab      	ldr	r3, [r5, #8]
   196d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   196d4:	bf2c      	ite	cs
   196d6:	2008      	movcs	r0, #8
   196d8:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   196da:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   196de:	4428      	add	r0, r5
	return chunk_mem(h, c);
   196e0:	e7ce      	b.n	19680 <sys_heap_alloc+0x6>

000196e2 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   196e2:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   196e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196e8:	bf2c      	ite	cs
   196ea:	2508      	movcs	r5, #8
   196ec:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   196ee:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   196f0:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   196f2:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   196f4:	1dcc      	adds	r4, r1, #7
   196f6:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   196fa:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   196fc:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   19700:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19702:	440d      	add	r5, r1
   19704:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   19708:	1b2d      	subs	r5, r5, r4
   1970a:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1970c:	4629      	mov	r1, r5
   1970e:	4620      	mov	r0, r4
	h->len = buf_sz;
   19710:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   19712:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   19714:	f7ff fec8 	bl	194a8 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   19718:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1971a:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1971c:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1971e:	361b      	adds	r6, #27
   19720:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   19722:	f104 0210 	add.w	r2, r4, #16
   19726:	428b      	cmp	r3, r1
   19728:	db29      	blt.n	1977e <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1972a:	4632      	mov	r2, r6
   1972c:	4620      	mov	r0, r4
   1972e:	2100      	movs	r1, #0
   19730:	f7ff feb6 	bl	194a0 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19734:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   19736:	4620      	mov	r0, r4
   19738:	2201      	movs	r2, #1
   1973a:	2100      	movs	r1, #0
   1973c:	f7ff fe98 	bl	19470 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   19740:	463a      	mov	r2, r7
   19742:	4631      	mov	r1, r6
   19744:	f7ff feac 	bl	194a0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19748:	4633      	mov	r3, r6
   1974a:	4631      	mov	r1, r6
   1974c:	4620      	mov	r0, r4
   1974e:	2200      	movs	r2, #0
   19750:	f7ff fe7d 	bl	1944e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   19754:	4629      	mov	r1, r5
   19756:	4620      	mov	r0, r4
   19758:	2200      	movs	r2, #0
   1975a:	f7ff fea1 	bl	194a0 <set_chunk_size>
   1975e:	463b      	mov	r3, r7
   19760:	4629      	mov	r1, r5
   19762:	4620      	mov	r0, r4
   19764:	2200      	movs	r2, #0
   19766:	f7ff fe72 	bl	1944e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1976a:	4629      	mov	r1, r5
   1976c:	4620      	mov	r0, r4
   1976e:	2201      	movs	r2, #1
   19770:	f7ff fe7e 	bl	19470 <set_chunk_used>

	free_list_add(h, chunk0_size);
   19774:	4631      	mov	r1, r6
}
   19776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1977a:	f7ff bf39 	b.w	195f0 <free_list_add>
		h->buckets[i].next = 0;
   1977e:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   19782:	3301      	adds	r3, #1
   19784:	e7cf      	b.n	19726 <sys_heap_init+0x44>

00019786 <encode_uint>:
{
   19786:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1978a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   1978c:	78d3      	ldrb	r3, [r2, #3]
{
   1978e:	4614      	mov	r4, r2
	switch (specifier) {
   19790:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19792:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   19796:	4606      	mov	r6, r0
   19798:	460f      	mov	r7, r1
   1979a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   1979c:	d02d      	beq.n	197fa <encode_uint+0x74>
   1979e:	d828      	bhi.n	197f2 <encode_uint+0x6c>
		return 16;
   197a0:	2b58      	cmp	r3, #88	; 0x58
   197a2:	bf14      	ite	ne
   197a4:	250a      	movne	r5, #10
   197a6:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   197a8:	46aa      	mov	sl, r5
   197aa:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   197ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   197b2:	4652      	mov	r2, sl
   197b4:	465b      	mov	r3, fp
   197b6:	4630      	mov	r0, r6
   197b8:	4639      	mov	r1, r7
   197ba:	f7f2 fd91 	bl	c2e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   197be:	2a09      	cmp	r2, #9
   197c0:	b2d3      	uxtb	r3, r2
   197c2:	d81f      	bhi.n	19804 <encode_uint+0x7e>
   197c4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   197c6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   197c8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   197ca:	bf08      	it	eq
   197cc:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   197ce:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   197d2:	d301      	bcc.n	197d8 <encode_uint+0x52>
   197d4:	45c8      	cmp	r8, r9
   197d6:	d812      	bhi.n	197fe <encode_uint+0x78>
	if (conv->flag_hash) {
   197d8:	7823      	ldrb	r3, [r4, #0]
   197da:	069b      	lsls	r3, r3, #26
   197dc:	d505      	bpl.n	197ea <encode_uint+0x64>
		if (radix == 8) {
   197de:	2d08      	cmp	r5, #8
   197e0:	d116      	bne.n	19810 <encode_uint+0x8a>
			conv->altform_0 = true;
   197e2:	78a3      	ldrb	r3, [r4, #2]
   197e4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   197e8:	70a3      	strb	r3, [r4, #2]
}
   197ea:	4640      	mov	r0, r8
   197ec:	b003      	add	sp, #12
   197ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   197f2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   197f6:	2b70      	cmp	r3, #112	; 0x70
   197f8:	e7d3      	b.n	197a2 <encode_uint+0x1c>
	switch (specifier) {
   197fa:	2508      	movs	r5, #8
   197fc:	e7d4      	b.n	197a8 <encode_uint+0x22>
		value /= radix;
   197fe:	4606      	mov	r6, r0
   19800:	460f      	mov	r7, r1
   19802:	e7d6      	b.n	197b2 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19804:	9a01      	ldr	r2, [sp, #4]
   19806:	2a19      	cmp	r2, #25
   19808:	bf94      	ite	ls
   1980a:	3337      	addls	r3, #55	; 0x37
   1980c:	3357      	addhi	r3, #87	; 0x57
   1980e:	e7da      	b.n	197c6 <encode_uint+0x40>
		} else if (radix == 16) {
   19810:	2d10      	cmp	r5, #16
   19812:	d1ea      	bne.n	197ea <encode_uint+0x64>
			conv->altform_0c = true;
   19814:	78a3      	ldrb	r3, [r4, #2]
   19816:	f043 0310 	orr.w	r3, r3, #16
   1981a:	e7e5      	b.n	197e8 <encode_uint+0x62>

0001981c <outs>:
{
   1981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19820:	4607      	mov	r7, r0
   19822:	4688      	mov	r8, r1
   19824:	4615      	mov	r5, r2
   19826:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19828:	4614      	mov	r4, r2
   1982a:	42b4      	cmp	r4, r6
   1982c:	eba4 0005 	sub.w	r0, r4, r5
   19830:	d302      	bcc.n	19838 <outs+0x1c>
   19832:	b93e      	cbnz	r6, 19844 <outs+0x28>
   19834:	7823      	ldrb	r3, [r4, #0]
   19836:	b12b      	cbz	r3, 19844 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19838:	4641      	mov	r1, r8
   1983a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1983e:	47b8      	blx	r7
		if (rc < 0) {
   19840:	2800      	cmp	r0, #0
   19842:	daf2      	bge.n	1982a <outs+0xe>
}
   19844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019848 <ring_buf_get_rewind_threshold>:
 * rewinding earlier.
 */
uint32_t __weak ring_buf_get_rewind_threshold(void)
{
	return RING_BUFFER_MAX_SIZE;
}
   19848:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1984c:	4770      	bx	lr

0001984e <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1984e:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   19850:	6985      	ldr	r5, [r0, #24]
{
   19852:	4604      	mov	r4, r0
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   19854:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   19856:	6907      	ldr	r7, [r0, #16]
   19858:	b185      	cbz	r5, 1987c <ring_buf_put_claim+0x2e>
   1985a:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   1985c:	6823      	ldr	r3, [r4, #0]
   1985e:	443b      	add	r3, r7
   19860:	1b98      	subs	r0, r3, r6
	trail_size = buf->size - tmp_trail_mod;

	/* Limit requested size to available size. */
	size = MIN(size, space);
   19862:	4290      	cmp	r0, r2
   19864:	bf28      	it	cs
   19866:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   19868:	1b7f      	subs	r7, r7, r5

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   1986a:	42b8      	cmp	r0, r7
   1986c:	bf28      	it	cs
   1986e:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   19870:	6963      	ldr	r3, [r4, #20]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   19872:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   19874:	441d      	add	r5, r3
   19876:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   19878:	60a6      	str	r6, [r4, #8]

	return allocated;
}
   1987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1987c:	fbb6 f5f7 	udiv	r5, r6, r7
   19880:	fb07 6515 	mls	r5, r7, r5, r6
   19884:	e7ea      	b.n	1985c <ring_buf_put_claim+0xe>

00019886 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->tail + size) > (buf->head + buf->size)) {
   19886:	6843      	ldr	r3, [r0, #4]
   19888:	6902      	ldr	r2, [r0, #16]
   1988a:	4419      	add	r1, r3
   1988c:	6803      	ldr	r3, [r0, #0]
   1988e:	4413      	add	r3, r2
   19890:	4299      	cmp	r1, r3
		return -EINVAL;
	}

	buf->tail += size;
	buf->misc.byte_mode.tmp_tail = buf->tail;
   19892:	bf9a      	itte	ls
   19894:	e9c0 1101 	strdls	r1, r1, [r0, #4]

	return 0;
   19898:	2000      	movls	r0, #0
		return -EINVAL;
   1989a:	f06f 0015 	mvnhi.w	r0, #21
}
   1989e:	4770      	bx	lr

000198a0 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   198a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   198a4:	4680      	mov	r8, r0
   198a6:	460e      	mov	r6, r1
   198a8:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   198aa:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   198ac:	462a      	mov	r2, r5
   198ae:	a901      	add	r1, sp, #4
   198b0:	4640      	mov	r0, r8
   198b2:	f7ff ffcc 	bl	1984e <ring_buf_put_claim>
   198b6:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   198b8:	4602      	mov	r2, r0
   198ba:	4631      	mov	r1, r6
   198bc:	9801      	ldr	r0, [sp, #4]
   198be:	f001 fcf2 	bl	1b2a6 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   198c2:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   198c4:	4427      	add	r7, r4
		data += partial_size;
   198c6:	4426      	add	r6, r4
	} while (size && partial_size);
   198c8:	d001      	beq.n	198ce <ring_buf_put+0x2e>
   198ca:	2c00      	cmp	r4, #0
   198cc:	d1ee      	bne.n	198ac <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   198ce:	4639      	mov	r1, r7
   198d0:	4640      	mov	r0, r8
   198d2:	f7ff ffd8 	bl	19886 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   198d6:	4638      	mov	r0, r7
   198d8:	b002      	add	sp, #8
   198da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000198de <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   198de:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   198e0:	6985      	ldr	r5, [r0, #24]
{
   198e2:	4604      	mov	r4, r0
	uint32_t space, granted_size, trail_size, tmp_head_mod;

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   198e4:	68c6      	ldr	r6, [r0, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   198e6:	6903      	ldr	r3, [r0, #16]
   198e8:	b185      	cbz	r5, 1990c <ring_buf_get_claim+0x2e>
   198ea:	4035      	ands	r5, r6
	space = buf->tail - buf->misc.byte_mode.tmp_head;
   198ec:	6867      	ldr	r7, [r4, #4]
   198ee:	1bb8      	subs	r0, r7, r6
	trail_size = buf->size - tmp_head_mod;

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   198f0:	4290      	cmp	r0, r2
   198f2:	bf28      	it	cs
   198f4:	4610      	movcs	r0, r2
   198f6:	4607      	mov	r7, r0
	trail_size = buf->size - tmp_head_mod;
   198f8:	1b58      	subs	r0, r3, r5

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   198fa:	42b8      	cmp	r0, r7
   198fc:	bf28      	it	cs
   198fe:	4638      	movcs	r0, r7

	*data = &buf->buf.buf8[tmp_head_mod];
   19900:	6963      	ldr	r3, [r4, #20]
	buf->misc.byte_mode.tmp_head += granted_size;
   19902:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   19904:	441d      	add	r5, r3
   19906:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   19908:	60e6      	str	r6, [r4, #12]

	return granted_size;
}
   1990a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   1990c:	fbb6 f5f3 	udiv	r5, r6, r3
   19910:	fb03 6515 	mls	r5, r3, r5, r6
   19914:	e7ea      	b.n	198ec <ring_buf_get_claim+0xe>

00019916 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
	if ((buf->head + size) > buf->tail) {
   19916:	6803      	ldr	r3, [r0, #0]
{
   19918:	b510      	push	{r4, lr}
	if ((buf->head + size) > buf->tail) {
   1991a:	4419      	add	r1, r3
   1991c:	6843      	ldr	r3, [r0, #4]
{
   1991e:	4604      	mov	r4, r0
	if ((buf->head + size) > buf->tail) {
   19920:	4299      	cmp	r1, r3
   19922:	d824      	bhi.n	1996e <ring_buf_get_finish+0x58>
		return -EINVAL;
	}

	buf->head += size;
   19924:	6001      	str	r1, [r0, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   19926:	60c1      	str	r1, [r0, #12]
	uint32_t threshold = ring_buf_get_rewind_threshold();
   19928:	f7ff ff8e 	bl	19848 <ring_buf_get_rewind_threshold>
	if (buf->head < threshold) {
   1992c:	6823      	ldr	r3, [r4, #0]
   1992e:	4298      	cmp	r0, r3
   19930:	d81b      	bhi.n	1996a <ring_buf_get_finish+0x54>
	rewind = buf->size * (threshold / buf->size);
   19932:	6923      	ldr	r3, [r4, #16]
   19934:	fbb0 f0f3 	udiv	r0, r0, r3
   19938:	4358      	muls	r0, r3
	__asm__ volatile(
   1993a:	f04f 0320 	mov.w	r3, #32
   1993e:	f3ef 8211 	mrs	r2, BASEPRI
   19942:	f383 8811 	msr	BASEPRI, r3
   19946:	f3bf 8f6f 	isb	sy
	buf->tail -= rewind;
   1994a:	6863      	ldr	r3, [r4, #4]
   1994c:	1a1b      	subs	r3, r3, r0
   1994e:	6063      	str	r3, [r4, #4]
	buf->head -= rewind;
   19950:	6823      	ldr	r3, [r4, #0]
   19952:	1a1b      	subs	r3, r3, r0
   19954:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head -= rewind;
   19956:	68e3      	ldr	r3, [r4, #12]
   19958:	1a1b      	subs	r3, r3, r0
   1995a:	60e3      	str	r3, [r4, #12]
	buf->misc.byte_mode.tmp_tail -= rewind;
   1995c:	68a3      	ldr	r3, [r4, #8]
   1995e:	1a18      	subs	r0, r3, r0
   19960:	60a0      	str	r0, [r4, #8]
	__asm__ volatile(
   19962:	f382 8811 	msr	BASEPRI, r2
   19966:	f3bf 8f6f 	isb	sy

	byte_indexes_rewind(buf);

	return 0;
   1996a:	2000      	movs	r0, #0
   1996c:	e001      	b.n	19972 <ring_buf_get_finish+0x5c>
		return -EINVAL;
   1996e:	f06f 0015 	mvn.w	r0, #21
}
   19972:	bd10      	pop	{r4, pc}

00019974 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   19974:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   19978:	4680      	mov	r8, r0
   1997a:	460e      	mov	r6, r1
   1997c:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1997e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   19980:	462a      	mov	r2, r5
   19982:	a901      	add	r1, sp, #4
   19984:	4640      	mov	r0, r8
   19986:	f7ff ffaa 	bl	198de <ring_buf_get_claim>
   1998a:	4604      	mov	r4, r0
		memcpy(data, src, partial_size);
   1998c:	4602      	mov	r2, r0
   1998e:	9901      	ldr	r1, [sp, #4]
   19990:	4630      	mov	r0, r6
   19992:	f001 fc88 	bl	1b2a6 <memcpy>
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   19996:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   19998:	4427      	add	r7, r4
		data += partial_size;
   1999a:	4426      	add	r6, r4
	} while (size && partial_size);
   1999c:	d001      	beq.n	199a2 <ring_buf_get+0x2e>
   1999e:	2c00      	cmp	r4, #0
   199a0:	d1ee      	bne.n	19980 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   199a2:	4639      	mov	r1, r7
   199a4:	4640      	mov	r0, r8
   199a6:	f7ff ffb6 	bl	19916 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   199aa:	4638      	mov	r0, r7
   199ac:	b002      	add	sp, #8
   199ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000199b2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   199b2:	4770      	bx	lr

000199b4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   199b4:	f7fa bd64 	b.w	14480 <SystemInit>

000199b8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   199b8:	2300      	movs	r3, #0
	list->head = NULL;
   199ba:	e9c0 3300 	strd	r3, r3, [r0]
}
   199be:	4770      	bx	lr

000199c0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   199c0:	6803      	ldr	r3, [r0, #0]
   199c2:	b923      	cbnz	r3, 199ce <log_list_add_tail+0xe>
		list->head = msg;
   199c4:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   199c6:	2300      	movs	r3, #0
	list->tail = msg;
   199c8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   199ca:	600b      	str	r3, [r1, #0]
}
   199cc:	4770      	bx	lr
		list->tail->next = msg;
   199ce:	6843      	ldr	r3, [r0, #4]
   199d0:	6019      	str	r1, [r3, #0]
   199d2:	e7f8      	b.n	199c6 <log_list_add_tail+0x6>

000199d4 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   199d4:	6800      	ldr	r0, [r0, #0]
   199d6:	4770      	bx	lr

000199d8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   199d8:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   199da:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   199dc:	b108      	cbz	r0, 199e2 <log_list_head_get+0xa>
		list->head = list->head->next;
   199de:	6802      	ldr	r2, [r0, #0]
   199e0:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   199e2:	4770      	bx	lr

000199e4 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   199e4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   199e6:	f7f6 faf3 	bl	ffd0 <log_msg_chunk_alloc>

	if (msg != NULL) {
   199ea:	b118      	cbz	r0, 199f4 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   199ec:	2301      	movs	r3, #1
   199ee:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   199f0:	2300      	movs	r3, #0
   199f2:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   199f4:	bd08      	pop	{r3, pc}

000199f6 <k_cycle_get_32_wrapper>:
   199f6:	f7f9 b8c7 	b.w	12b88 <z_timer_cycle_get_32>

000199fa <dummy_timestamp>:
   199fa:	2000      	movs	r0, #0
   199fc:	4770      	bx	lr

000199fe <z_log_get_s_mask>:
{
   199fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   19a00:	4605      	mov	r5, r0
	uint32_t mask = 0;
   19a02:	2000      	movs	r0, #0
				mask |= BIT(arg);
   19a04:	2701      	movs	r7, #1
	uint32_t arg = 0;
   19a06:	4603      	mov	r3, r0
	bool arm = false;
   19a08:	4602      	mov	r2, r0
	while ((curr = *str++) && arg < nargs) {
   19a0a:	f815 4b01 	ldrb.w	r4, [r5], #1
   19a0e:	b10c      	cbz	r4, 19a14 <z_log_get_s_mask+0x16>
   19a10:	428b      	cmp	r3, r1
   19a12:	d300      	bcc.n	19a16 <z_log_get_s_mask+0x18>
}
   19a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   19a16:	2c25      	cmp	r4, #37	; 0x25
   19a18:	d102      	bne.n	19a20 <z_log_get_s_mask+0x22>
			arm = !arm;
   19a1a:	f082 0201 	eor.w	r2, r2, #1
   19a1e:	e7f4      	b.n	19a0a <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   19a20:	2a00      	cmp	r2, #0
   19a22:	d0f2      	beq.n	19a0a <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   19a24:	f044 0620 	orr.w	r6, r4, #32
   19a28:	3e61      	subs	r6, #97	; 0x61
   19a2a:	2e19      	cmp	r6, #25
   19a2c:	d8ed      	bhi.n	19a0a <z_log_get_s_mask+0xc>
			if (curr == 's') {
   19a2e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   19a30:	bf04      	itt	eq
   19a32:	fa07 f203 	lsleq.w	r2, r7, r3
   19a36:	4310      	orreq	r0, r2
			arg++;
   19a38:	3301      	adds	r3, #1
			arm = false;
   19a3a:	2200      	movs	r2, #0
   19a3c:	e7e5      	b.n	19a0a <z_log_get_s_mask+0xc>

00019a3e <log_backend_disable>:
	backend->cb->active = false;
   19a3e:	2100      	movs	r1, #0
   19a40:	6843      	ldr	r3, [r0, #4]
   19a42:	7159      	strb	r1, [r3, #5]
	backend_filter_set(backend, LOG_LEVEL_NONE);
   19a44:	f7f6 b864 	b.w	fb10 <backend_filter_set>

00019a48 <log_0>:
{
   19a48:	b538      	push	{r3, r4, r5, lr}
   19a4a:	4605      	mov	r5, r0
   19a4c:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   19a4e:	f7ff ffc9 	bl	199e4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19a52:	b128      	cbz	r0, 19a60 <log_0+0x18>
		msg_finalize(msg, src_level);
   19a54:	4621      	mov	r1, r4
		msg->str = str;
   19a56:	6105      	str	r5, [r0, #16]
}
   19a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   19a5c:	f7f6 b9da 	b.w	fe14 <msg_finalize>
}
   19a60:	bd38      	pop	{r3, r4, r5, pc}

00019a62 <log_1>:
{
   19a62:	b570      	push	{r4, r5, r6, lr}
   19a64:	4606      	mov	r6, r0
   19a66:	460d      	mov	r5, r1
   19a68:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19a6a:	f7ff ffbb 	bl	199e4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19a6e:	b158      	cbz	r0, 19a88 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   19a70:	2101      	movs	r1, #1
   19a72:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   19a74:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   19a76:	f361 1207 	bfi	r2, r1, #4, #4
   19a7a:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   19a7c:	4621      	mov	r1, r4
		msg->payload.single.args[0] = arg1;
   19a7e:	6145      	str	r5, [r0, #20]
}
   19a80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   19a84:	f7f6 b9c6 	b.w	fe14 <msg_finalize>
}
   19a88:	bd70      	pop	{r4, r5, r6, pc}

00019a8a <log_2>:
{
   19a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a8e:	4680      	mov	r8, r0
   19a90:	460f      	mov	r7, r1
   19a92:	4616      	mov	r6, r2
   19a94:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19a96:	f7ff ffa5 	bl	199e4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19a9a:	b168      	cbz	r0, 19ab8 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   19a9c:	2202      	movs	r2, #2
   19a9e:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   19aa0:	4629      	mov	r1, r5
   19aa2:	f362 1307 	bfi	r3, r2, #4, #4
   19aa6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   19aa8:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   19aac:	f8c0 8010 	str.w	r8, [r0, #16]
}
   19ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   19ab4:	f7f6 b9ae 	b.w	fe14 <msg_finalize>
}
   19ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019abc <log_3>:
{
   19abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19ac0:	4680      	mov	r8, r0
   19ac2:	460f      	mov	r7, r1
   19ac4:	4616      	mov	r6, r2
   19ac6:	461d      	mov	r5, r3
   19ac8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   19acc:	f7ff ff8a 	bl	199e4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   19ad0:	b170      	cbz	r0, 19af0 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   19ad2:	2203      	movs	r2, #3
   19ad4:	7a43      	ldrb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   19ad6:	4649      	mov	r1, r9
   19ad8:	f362 1307 	bfi	r3, r2, #4, #4
   19adc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   19ade:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->str = str;
   19ae2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   19ae6:	61c5      	str	r5, [r0, #28]
}
   19ae8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   19aec:	f7f6 b992 	b.w	fe14 <msg_finalize>
}
   19af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019af4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   19af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19af8:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   19afa:	8903      	ldrh	r3, [r0, #8]
{
   19afc:	460e      	mov	r6, r1
   19afe:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   19b00:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   19b04:	42a2      	cmp	r2, r4
{
   19b06:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (offset >= available_len) {
   19b0a:	d803      	bhi.n	19b14 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   19b0c:	2300      	movs	r3, #0
   19b0e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   19b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   19b14:	680b      	ldr	r3, [r1, #0]
   19b16:	4423      	add	r3, r4
   19b18:	4293      	cmp	r3, r2
		*length = available_len - offset;
   19b1a:	bf84      	itt	hi
   19b1c:	1b13      	subhi	r3, r2, r4
   19b1e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19b20:	2a0c      	cmp	r2, #12
	req_len = *length;
   19b22:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   19b26:	d92a      	bls.n	19b7e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   19b28:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   19b2a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   19b2e:	d82d      	bhi.n	19b8c <log_msg_hexdump_data_op+0x98>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   19b30:	2208      	movs	r2, #8
		head_data = msg->payload.ext.data.bytes;
   19b32:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19b34:	454a      	cmp	r2, r9
   19b36:	bf28      	it	cs
   19b38:	464a      	movcs	r2, r9
   19b3a:	4420      	add	r0, r4
   19b3c:	4615      	mov	r5, r2
		if (put_op) {
   19b3e:	b317      	cbz	r7, 19b86 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   19b40:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   19b42:	f001 fbb0 	bl	1b2a6 <memcpy>
		req_len -= cpy_len;
   19b46:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   19b4a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   19b4c:	f1b9 0f00 	cmp.w	r9, #0
   19b50:	d0de      	beq.n	19b10 <log_msg_hexdump_data_op+0x1c>
   19b52:	f1b8 0f00 	cmp.w	r8, #0
   19b56:	d0db      	beq.n	19b10 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   19b58:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   19b5c:	454d      	cmp	r5, r9
   19b5e:	bf28      	it	cs
   19b60:	464d      	movcs	r5, r9
		if (put_op) {
   19b62:	1d20      	adds	r0, r4, #4
			(void)memcpy(&cont->payload.bytes[offset],
   19b64:	462a      	mov	r2, r5
   19b66:	4440      	add	r0, r8
		if (put_op) {
   19b68:	b1bf      	cbz	r7, 19b9a <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   19b6a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   19b6c:	f001 fb9b 	bl	1b2a6 <memcpy>
		offset = 0;
   19b70:	2400      	movs	r4, #0
		cont = cont->next;
   19b72:	f8d8 8000 	ldr.w	r8, [r8]
		req_len -= cpy_len;
   19b76:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   19b7a:	442e      	add	r6, r5
   19b7c:	e7e6      	b.n	19b4c <log_msg_hexdump_data_op+0x58>
	struct log_msg_cont *cont = NULL;
   19b7e:	f04f 0800 	mov.w	r8, #0
		head_data = msg->payload.single.bytes;
   19b82:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   19b84:	e7d6      	b.n	19b34 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   19b86:	4601      	mov	r1, r0
   19b88:	4630      	mov	r0, r6
   19b8a:	e7da      	b.n	19b42 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   19b8c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   19b8e:	2c1b      	cmp	r4, #27
   19b90:	d9dc      	bls.n	19b4c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   19b92:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   19b96:	3c1c      	subs	r4, #28
   19b98:	e7f9      	b.n	19b8e <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   19b9a:	4601      	mov	r1, r0
   19b9c:	4630      	mov	r0, r6
   19b9e:	e7e5      	b.n	19b6c <log_msg_hexdump_data_op+0x78>

00019ba0 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19ba0:	3004      	adds	r0, #4
   19ba2:	e8d0 3fef 	ldaex	r3, [r0]
   19ba6:	3301      	adds	r3, #1
   19ba8:	e8c0 3fe2 	stlex	r2, r3, [r0]
   19bac:	2a00      	cmp	r2, #0
   19bae:	d1f8      	bne.n	19ba2 <log_msg_get+0x2>
}
   19bb0:	4770      	bx	lr

00019bb2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   19bb2:	7a40      	ldrb	r0, [r0, #9]
}
   19bb4:	0900      	lsrs	r0, r0, #4
   19bb6:	4770      	bx	lr

00019bb8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   19bb8:	7a43      	ldrb	r3, [r0, #9]
   19bba:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   19bbe:	ea4f 1213 	mov.w	r2, r3, lsr #4
   19bc2:	d216      	bcs.n	19bf2 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   19bc4:	2a03      	cmp	r2, #3
   19bc6:	d803      	bhi.n	19bd0 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   19bc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   19bcc:	6948      	ldr	r0, [r1, #20]
   19bce:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   19bd0:	2901      	cmp	r1, #1
   19bd2:	d803      	bhi.n	19bdc <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   19bd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   19bd8:	6988      	ldr	r0, [r1, #24]
   19bda:	4770      	bx	lr
	cont = msg->payload.ext.next;
   19bdc:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   19bde:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   19be0:	2906      	cmp	r1, #6
   19be2:	d803      	bhi.n	19bec <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   19be4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   19be8:	6848      	ldr	r0, [r1, #4]
   19bea:	4770      	bx	lr
		cont = cont->next;
   19bec:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   19bee:	3907      	subs	r1, #7
		cont = cont->next;
   19bf0:	e7f6      	b.n	19be0 <log_msg_arg_get+0x28>
		return 0;
   19bf2:	2000      	movs	r0, #0
}
   19bf4:	4770      	bx	lr

00019bf6 <log_msg_put>:
{
   19bf6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19bf8:	1d02      	adds	r2, r0, #4
   19bfa:	e8d2 1fef 	ldaex	r1, [r2]
   19bfe:	3901      	subs	r1, #1
   19c00:	e8c2 1fec 	stlex	ip, r1, [r2]
   19c04:	f1bc 0f00 	cmp.w	ip, #0
   19c08:	d1f7      	bne.n	19bfa <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   19c0a:	685b      	ldr	r3, [r3, #4]
   19c0c:	b90b      	cbnz	r3, 19c12 <log_msg_put+0x1c>
		msg_free(msg);
   19c0e:	f7f6 b9f3 	b.w	fff8 <msg_free>
}
   19c12:	4770      	bx	lr

00019c14 <log_msg_str_get>:
}
   19c14:	6900      	ldr	r0, [r0, #16]
   19c16:	4770      	bx	lr

00019c18 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   19c18:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   19c1a:	2400      	movs	r4, #0
   19c1c:	9400      	str	r4, [sp, #0]
   19c1e:	f7ff ff69 	bl	19af4 <log_msg_hexdump_data_op>
}
   19c22:	b002      	add	sp, #8
   19c24:	bd10      	pop	{r4, pc}

00019c26 <buffer_write>:
{
   19c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c28:	4606      	mov	r6, r0
   19c2a:	460d      	mov	r5, r1
   19c2c:	4614      	mov	r4, r2
   19c2e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   19c30:	4621      	mov	r1, r4
   19c32:	4628      	mov	r0, r5
   19c34:	463a      	mov	r2, r7
   19c36:	47b0      	blx	r6
	} while (len != 0);
   19c38:	1a24      	subs	r4, r4, r0
		buf += processed;
   19c3a:	4405      	add	r5, r0
	} while (len != 0);
   19c3c:	d1f8      	bne.n	19c30 <buffer_write+0xa>
}
   19c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019c40 <std_print>:
{
   19c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c44:	b08e      	sub	sp, #56	; 0x38
   19c46:	af0e      	add	r7, sp, #56	; 0x38
   19c48:	4680      	mov	r8, r0
   19c4a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   19c4c:	f7ff ffe2 	bl	19c14 <log_msg_str_get>
   19c50:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   19c52:	4640      	mov	r0, r8
   19c54:	f7ff ffad 	bl	19bb2 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   19c58:	f04f 0900 	mov.w	r9, #0
	uint32_t nargs = log_msg_nargs_get(msg);
   19c5c:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   19c5e:	0083      	lsls	r3, r0, #2
   19c60:	3307      	adds	r3, #7
   19c62:	f023 0307 	bic.w	r3, r3, #7
   19c66:	ebad 0d03 	sub.w	sp, sp, r3
   19c6a:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   19c6c:	45d1      	cmp	r9, sl
   19c6e:	d116      	bne.n	19c9e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   19c70:	4640      	mov	r0, r8
   19c72:	f7ff ff9e 	bl	19bb2 <log_msg_nargs_get>
   19c76:	280f      	cmp	r0, #15
   19c78:	d81e      	bhi.n	19cb8 <std_print+0x78>
   19c7a:	e8df f010 	tbh	[pc, r0, lsl #1]
   19c7e:	0019      	.short	0x0019
   19c80:	00260020 	.word	0x00260020
   19c84:	0036002d 	.word	0x0036002d
   19c88:	004e0041 	.word	0x004e0041
   19c8c:	006e005d 	.word	0x006e005d
   19c90:	00960081 	.word	0x00960081
   19c94:	00c600ad 	.word	0x00c600ad
   19c98:	00fe00e1 	.word	0x00fe00e1
   19c9c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   19c9e:	4649      	mov	r1, r9
   19ca0:	4640      	mov	r0, r8
   19ca2:	f7ff ff89 	bl	19bb8 <log_msg_arg_get>
   19ca6:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   19caa:	f109 0901 	add.w	r9, r9, #1
   19cae:	e7dd      	b.n	19c6c <std_print+0x2c>
		print_formatted(log_output, str);
   19cb0:	4631      	mov	r1, r6
   19cb2:	4628      	mov	r0, r5
   19cb4:	f7f6 f9de 	bl	10074 <print_formatted>
}
   19cb8:	46bd      	mov	sp, r7
   19cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   19cbe:	4631      	mov	r1, r6
   19cc0:	4628      	mov	r0, r5
   19cc2:	6822      	ldr	r2, [r4, #0]
   19cc4:	f7f6 f9d6 	bl	10074 <print_formatted>
		break;
   19cc8:	e7f6      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   19cca:	4631      	mov	r1, r6
   19ccc:	e9d4 2300 	ldrd	r2, r3, [r4]
   19cd0:	4628      	mov	r0, r5
   19cd2:	f7f6 f9cf 	bl	10074 <print_formatted>
		break;
   19cd6:	e7ef      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   19cd8:	68a3      	ldr	r3, [r4, #8]
   19cda:	4631      	mov	r1, r6
   19cdc:	9300      	str	r3, [sp, #0]
   19cde:	4628      	mov	r0, r5
   19ce0:	e9d4 2300 	ldrd	r2, r3, [r4]
   19ce4:	f7f6 f9c6 	bl	10074 <print_formatted>
		break;
   19ce8:	e7e6      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19cea:	68e3      	ldr	r3, [r4, #12]
   19cec:	4631      	mov	r1, r6
   19cee:	9301      	str	r3, [sp, #4]
   19cf0:	68a3      	ldr	r3, [r4, #8]
   19cf2:	4628      	mov	r0, r5
   19cf4:	9300      	str	r3, [sp, #0]
   19cf6:	e9d4 2300 	ldrd	r2, r3, [r4]
   19cfa:	f7f6 f9bb 	bl	10074 <print_formatted>
		break;
   19cfe:	e7db      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19d00:	6923      	ldr	r3, [r4, #16]
   19d02:	4631      	mov	r1, r6
   19d04:	9302      	str	r3, [sp, #8]
   19d06:	68e3      	ldr	r3, [r4, #12]
   19d08:	4628      	mov	r0, r5
   19d0a:	9301      	str	r3, [sp, #4]
   19d0c:	68a3      	ldr	r3, [r4, #8]
   19d0e:	9300      	str	r3, [sp, #0]
   19d10:	e9d4 2300 	ldrd	r2, r3, [r4]
   19d14:	f7f6 f9ae 	bl	10074 <print_formatted>
		break;
   19d18:	e7ce      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19d1a:	6963      	ldr	r3, [r4, #20]
   19d1c:	4631      	mov	r1, r6
   19d1e:	9303      	str	r3, [sp, #12]
   19d20:	6923      	ldr	r3, [r4, #16]
   19d22:	4628      	mov	r0, r5
   19d24:	9302      	str	r3, [sp, #8]
   19d26:	68e3      	ldr	r3, [r4, #12]
   19d28:	9301      	str	r3, [sp, #4]
   19d2a:	68a3      	ldr	r3, [r4, #8]
   19d2c:	9300      	str	r3, [sp, #0]
   19d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
   19d32:	f7f6 f99f 	bl	10074 <print_formatted>
		break;
   19d36:	e7bf      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19d38:	69a3      	ldr	r3, [r4, #24]
   19d3a:	4631      	mov	r1, r6
   19d3c:	9304      	str	r3, [sp, #16]
   19d3e:	6963      	ldr	r3, [r4, #20]
   19d40:	4628      	mov	r0, r5
   19d42:	9303      	str	r3, [sp, #12]
   19d44:	6923      	ldr	r3, [r4, #16]
   19d46:	9302      	str	r3, [sp, #8]
   19d48:	68e3      	ldr	r3, [r4, #12]
   19d4a:	9301      	str	r3, [sp, #4]
   19d4c:	68a3      	ldr	r3, [r4, #8]
   19d4e:	9300      	str	r3, [sp, #0]
   19d50:	e9d4 2300 	ldrd	r2, r3, [r4]
   19d54:	f7f6 f98e 	bl	10074 <print_formatted>
		break;
   19d58:	e7ae      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19d5a:	69e3      	ldr	r3, [r4, #28]
   19d5c:	4631      	mov	r1, r6
   19d5e:	9305      	str	r3, [sp, #20]
   19d60:	69a3      	ldr	r3, [r4, #24]
   19d62:	4628      	mov	r0, r5
   19d64:	9304      	str	r3, [sp, #16]
   19d66:	6963      	ldr	r3, [r4, #20]
   19d68:	9303      	str	r3, [sp, #12]
   19d6a:	6923      	ldr	r3, [r4, #16]
   19d6c:	9302      	str	r3, [sp, #8]
   19d6e:	68e3      	ldr	r3, [r4, #12]
   19d70:	9301      	str	r3, [sp, #4]
   19d72:	68a3      	ldr	r3, [r4, #8]
   19d74:	9300      	str	r3, [sp, #0]
   19d76:	e9d4 2300 	ldrd	r2, r3, [r4]
   19d7a:	f7f6 f97b 	bl	10074 <print_formatted>
		break;
   19d7e:	e79b      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19d80:	6a23      	ldr	r3, [r4, #32]
   19d82:	4631      	mov	r1, r6
   19d84:	9306      	str	r3, [sp, #24]
   19d86:	69e3      	ldr	r3, [r4, #28]
   19d88:	4628      	mov	r0, r5
   19d8a:	9305      	str	r3, [sp, #20]
   19d8c:	69a3      	ldr	r3, [r4, #24]
   19d8e:	9304      	str	r3, [sp, #16]
   19d90:	6963      	ldr	r3, [r4, #20]
   19d92:	9303      	str	r3, [sp, #12]
   19d94:	6923      	ldr	r3, [r4, #16]
   19d96:	9302      	str	r3, [sp, #8]
   19d98:	68e3      	ldr	r3, [r4, #12]
   19d9a:	9301      	str	r3, [sp, #4]
   19d9c:	68a3      	ldr	r3, [r4, #8]
   19d9e:	9300      	str	r3, [sp, #0]
   19da0:	e9d4 2300 	ldrd	r2, r3, [r4]
   19da4:	f7f6 f966 	bl	10074 <print_formatted>
		break;
   19da8:	e786      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19dac:	4631      	mov	r1, r6
   19dae:	9307      	str	r3, [sp, #28]
   19db0:	6a23      	ldr	r3, [r4, #32]
   19db2:	4628      	mov	r0, r5
   19db4:	9306      	str	r3, [sp, #24]
   19db6:	69e3      	ldr	r3, [r4, #28]
   19db8:	9305      	str	r3, [sp, #20]
   19dba:	69a3      	ldr	r3, [r4, #24]
   19dbc:	9304      	str	r3, [sp, #16]
   19dbe:	6963      	ldr	r3, [r4, #20]
   19dc0:	9303      	str	r3, [sp, #12]
   19dc2:	6923      	ldr	r3, [r4, #16]
   19dc4:	9302      	str	r3, [sp, #8]
   19dc6:	68e3      	ldr	r3, [r4, #12]
   19dc8:	9301      	str	r3, [sp, #4]
   19dca:	68a3      	ldr	r3, [r4, #8]
   19dcc:	9300      	str	r3, [sp, #0]
   19dce:	e9d4 2300 	ldrd	r2, r3, [r4]
   19dd2:	f7f6 f94f 	bl	10074 <print_formatted>
		break;
   19dd6:	e76f      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19dd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19dda:	4631      	mov	r1, r6
   19ddc:	9308      	str	r3, [sp, #32]
   19dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19de0:	4628      	mov	r0, r5
   19de2:	9307      	str	r3, [sp, #28]
   19de4:	6a23      	ldr	r3, [r4, #32]
   19de6:	9306      	str	r3, [sp, #24]
   19de8:	69e3      	ldr	r3, [r4, #28]
   19dea:	9305      	str	r3, [sp, #20]
   19dec:	69a3      	ldr	r3, [r4, #24]
   19dee:	9304      	str	r3, [sp, #16]
   19df0:	6963      	ldr	r3, [r4, #20]
   19df2:	9303      	str	r3, [sp, #12]
   19df4:	6923      	ldr	r3, [r4, #16]
   19df6:	9302      	str	r3, [sp, #8]
   19df8:	68e3      	ldr	r3, [r4, #12]
   19dfa:	9301      	str	r3, [sp, #4]
   19dfc:	68a3      	ldr	r3, [r4, #8]
   19dfe:	9300      	str	r3, [sp, #0]
   19e00:	e9d4 2300 	ldrd	r2, r3, [r4]
   19e04:	f7f6 f936 	bl	10074 <print_formatted>
		break;
   19e08:	e756      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19e0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19e0c:	4631      	mov	r1, r6
   19e0e:	9309      	str	r3, [sp, #36]	; 0x24
   19e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19e12:	4628      	mov	r0, r5
   19e14:	9308      	str	r3, [sp, #32]
   19e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19e18:	9307      	str	r3, [sp, #28]
   19e1a:	6a23      	ldr	r3, [r4, #32]
   19e1c:	9306      	str	r3, [sp, #24]
   19e1e:	69e3      	ldr	r3, [r4, #28]
   19e20:	9305      	str	r3, [sp, #20]
   19e22:	69a3      	ldr	r3, [r4, #24]
   19e24:	9304      	str	r3, [sp, #16]
   19e26:	6963      	ldr	r3, [r4, #20]
   19e28:	9303      	str	r3, [sp, #12]
   19e2a:	6923      	ldr	r3, [r4, #16]
   19e2c:	9302      	str	r3, [sp, #8]
   19e2e:	68e3      	ldr	r3, [r4, #12]
   19e30:	9301      	str	r3, [sp, #4]
   19e32:	68a3      	ldr	r3, [r4, #8]
   19e34:	9300      	str	r3, [sp, #0]
   19e36:	e9d4 2300 	ldrd	r2, r3, [r4]
   19e3a:	f7f6 f91b 	bl	10074 <print_formatted>
		break;
   19e3e:	e73b      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19e42:	4631      	mov	r1, r6
   19e44:	930a      	str	r3, [sp, #40]	; 0x28
   19e46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19e48:	4628      	mov	r0, r5
   19e4a:	9309      	str	r3, [sp, #36]	; 0x24
   19e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19e4e:	9308      	str	r3, [sp, #32]
   19e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19e52:	9307      	str	r3, [sp, #28]
   19e54:	6a23      	ldr	r3, [r4, #32]
   19e56:	9306      	str	r3, [sp, #24]
   19e58:	69e3      	ldr	r3, [r4, #28]
   19e5a:	9305      	str	r3, [sp, #20]
   19e5c:	69a3      	ldr	r3, [r4, #24]
   19e5e:	9304      	str	r3, [sp, #16]
   19e60:	6963      	ldr	r3, [r4, #20]
   19e62:	9303      	str	r3, [sp, #12]
   19e64:	6923      	ldr	r3, [r4, #16]
   19e66:	9302      	str	r3, [sp, #8]
   19e68:	68e3      	ldr	r3, [r4, #12]
   19e6a:	9301      	str	r3, [sp, #4]
   19e6c:	68a3      	ldr	r3, [r4, #8]
   19e6e:	9300      	str	r3, [sp, #0]
   19e70:	e9d4 2300 	ldrd	r2, r3, [r4]
   19e74:	f7f6 f8fe 	bl	10074 <print_formatted>
		break;
   19e78:	e71e      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19e7c:	4631      	mov	r1, r6
   19e7e:	930b      	str	r3, [sp, #44]	; 0x2c
   19e80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19e82:	4628      	mov	r0, r5
   19e84:	930a      	str	r3, [sp, #40]	; 0x28
   19e86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19e88:	9309      	str	r3, [sp, #36]	; 0x24
   19e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19e8c:	9308      	str	r3, [sp, #32]
   19e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19e90:	9307      	str	r3, [sp, #28]
   19e92:	6a23      	ldr	r3, [r4, #32]
   19e94:	9306      	str	r3, [sp, #24]
   19e96:	69e3      	ldr	r3, [r4, #28]
   19e98:	9305      	str	r3, [sp, #20]
   19e9a:	69a3      	ldr	r3, [r4, #24]
   19e9c:	9304      	str	r3, [sp, #16]
   19e9e:	6963      	ldr	r3, [r4, #20]
   19ea0:	9303      	str	r3, [sp, #12]
   19ea2:	6923      	ldr	r3, [r4, #16]
   19ea4:	9302      	str	r3, [sp, #8]
   19ea6:	68e3      	ldr	r3, [r4, #12]
   19ea8:	9301      	str	r3, [sp, #4]
   19eaa:	68a3      	ldr	r3, [r4, #8]
   19eac:	9300      	str	r3, [sp, #0]
   19eae:	e9d4 2300 	ldrd	r2, r3, [r4]
   19eb2:	f7f6 f8df 	bl	10074 <print_formatted>
		break;
   19eb6:	e6ff      	b.n	19cb8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   19eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19eba:	4631      	mov	r1, r6
   19ebc:	930c      	str	r3, [sp, #48]	; 0x30
   19ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   19ec0:	4628      	mov	r0, r5
   19ec2:	930b      	str	r3, [sp, #44]	; 0x2c
   19ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ec6:	930a      	str	r3, [sp, #40]	; 0x28
   19ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   19eca:	9309      	str	r3, [sp, #36]	; 0x24
   19ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19ece:	9308      	str	r3, [sp, #32]
   19ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19ed2:	9307      	str	r3, [sp, #28]
   19ed4:	6a23      	ldr	r3, [r4, #32]
   19ed6:	9306      	str	r3, [sp, #24]
   19ed8:	69e3      	ldr	r3, [r4, #28]
   19eda:	9305      	str	r3, [sp, #20]
   19edc:	69a3      	ldr	r3, [r4, #24]
   19ede:	9304      	str	r3, [sp, #16]
   19ee0:	6963      	ldr	r3, [r4, #20]
   19ee2:	9303      	str	r3, [sp, #12]
   19ee4:	6923      	ldr	r3, [r4, #16]
   19ee6:	9302      	str	r3, [sp, #8]
   19ee8:	68e3      	ldr	r3, [r4, #12]
   19eea:	9301      	str	r3, [sp, #4]
   19eec:	68a3      	ldr	r3, [r4, #8]
   19eee:	9300      	str	r3, [sp, #0]
   19ef0:	e9d4 2300 	ldrd	r2, r3, [r4]
   19ef4:	f7f6 f8be 	bl	10074 <print_formatted>
}
   19ef8:	e6de      	b.n	19cb8 <std_print+0x78>

00019efa <log_output_flush>:
		     log_output->control_block->offset,
   19efa:	6842      	ldr	r2, [r0, #4]
{
   19efc:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   19efe:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   19f02:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   19f04:	6881      	ldr	r1, [r0, #8]
   19f06:	6800      	ldr	r0, [r0, #0]
   19f08:	f7ff fe8d 	bl	19c26 <buffer_write>
	log_output->control_block->offset = 0;
   19f0c:	2200      	movs	r2, #0
   19f0e:	6863      	ldr	r3, [r4, #4]
   19f10:	601a      	str	r2, [r3, #0]
}
   19f12:	bd10      	pop	{r4, pc}

00019f14 <out_func>:
{
   19f14:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   19f16:	684b      	ldr	r3, [r1, #4]
{
   19f18:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   19f1a:	681a      	ldr	r2, [r3, #0]
   19f1c:	68cb      	ldr	r3, [r1, #12]
{
   19f1e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   19f20:	429a      	cmp	r2, r3
   19f22:	d102      	bne.n	19f2a <out_func+0x16>
		log_output_flush(out_ctx);
   19f24:	4608      	mov	r0, r1
   19f26:	f7ff ffe8 	bl	19efa <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   19f2a:	6863      	ldr	r3, [r4, #4]
   19f2c:	e8d3 2fef 	ldaex	r2, [r3]
   19f30:	1c51      	adds	r1, r2, #1
   19f32:	e8c3 1fe0 	stlex	r0, r1, [r3]
   19f36:	2800      	cmp	r0, #0
   19f38:	d1f8      	bne.n	19f2c <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
   19f3a:	68a3      	ldr	r3, [r4, #8]
}
   19f3c:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
   19f3e:	549d      	strb	r5, [r3, r2]
}
   19f40:	bd38      	pop	{r3, r4, r5, pc}

00019f42 <log_halt>:
   19f42:	2000      	movs	r0, #0
   19f44:	684b      	ldr	r3, [r1, #4]
   19f46:	7158      	strb	r0, [r3, #5]
}
   19f48:	4770      	bx	lr

00019f4a <log_go>:
	backend->cb->active = true;
   19f4a:	2201      	movs	r2, #1
   19f4c:	684b      	ldr	r3, [r1, #4]
}
   19f4e:	2000      	movs	r0, #0
   19f50:	715a      	strb	r2, [r3, #5]
   19f52:	4770      	bx	lr

00019f54 <cmd_log_self_halt>:
{
   19f54:	b510      	push	{r4, lr}
   19f56:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   19f58:	f7f6 fb94 	bl	10684 <shell_state_precheck>
   19f5c:	b120      	cbz	r0, 19f68 <cmd_log_self_halt+0x14>
	backend->cb->active = false;
   19f5e:	2200      	movs	r2, #0
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   19f60:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   19f62:	681b      	ldr	r3, [r3, #0]
   19f64:	685b      	ldr	r3, [r3, #4]
   19f66:	715a      	strb	r2, [r3, #5]
}
   19f68:	2000      	movs	r0, #0
   19f6a:	bd10      	pop	{r4, pc}

00019f6c <cmd_log_self_go>:
{
   19f6c:	b510      	push	{r4, lr}
   19f6e:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   19f70:	f7f6 fb88 	bl	10684 <shell_state_precheck>
   19f74:	b120      	cbz	r0, 19f80 <cmd_log_self_go+0x14>
	backend->cb->active = true;
   19f76:	2201      	movs	r2, #1
	return log_go(shell, shell->log_backend->backend, argc, argv);
   19f78:	69e3      	ldr	r3, [r4, #28]
	log_backend_activate(backend, backend->cb->ctx);
   19f7a:	681b      	ldr	r3, [r3, #0]
   19f7c:	685b      	ldr	r3, [r3, #4]
   19f7e:	715a      	strb	r2, [r3, #5]
}
   19f80:	2000      	movs	r0, #0
   19f82:	bd10      	pop	{r4, pc}

00019f84 <cmd_log_self_status>:
{
   19f84:	b570      	push	{r4, r5, r6, lr}
   19f86:	4604      	mov	r4, r0
   19f88:	460d      	mov	r5, r1
   19f8a:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19f8c:	f7f6 fb7a 	bl	10684 <shell_state_precheck>
   19f90:	b130      	cbz	r0, 19fa0 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   19f92:	69e1      	ldr	r1, [r4, #28]
   19f94:	4633      	mov	r3, r6
   19f96:	462a      	mov	r2, r5
   19f98:	4620      	mov	r0, r4
   19f9a:	6809      	ldr	r1, [r1, #0]
   19f9c:	f7f6 fab0 	bl	10500 <log_status>
}
   19fa0:	2000      	movs	r0, #0
   19fa2:	bd70      	pop	{r4, r5, r6, pc}

00019fa4 <cmd_log_self_enable>:
{
   19fa4:	b570      	push	{r4, r5, r6, lr}
   19fa6:	4604      	mov	r4, r0
   19fa8:	460d      	mov	r5, r1
   19faa:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19fac:	f7f6 fb6a 	bl	10684 <shell_state_precheck>
   19fb0:	b140      	cbz	r0, 19fc4 <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   19fb2:	69e1      	ldr	r1, [r4, #28]
   19fb4:	4633      	mov	r3, r6
   19fb6:	462a      	mov	r2, r5
   19fb8:	4620      	mov	r0, r4
}
   19fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   19fbe:	6809      	ldr	r1, [r1, #0]
   19fc0:	f7f6 bbd8 	b.w	10774 <log_enable>
}
   19fc4:	bd70      	pop	{r4, r5, r6, pc}

00019fc6 <log_disable>:
{
   19fc6:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   19fc8:	2400      	movs	r4, #0
   19fca:	3304      	adds	r3, #4
   19fcc:	9400      	str	r4, [sp, #0]
   19fce:	3a01      	subs	r2, #1
   19fd0:	f7f6 fb68 	bl	106a4 <filters_set>
}
   19fd4:	4620      	mov	r0, r4
   19fd6:	b002      	add	sp, #8
   19fd8:	bd10      	pop	{r4, pc}

00019fda <cmd_log_self_disable>:
{
   19fda:	b570      	push	{r4, r5, r6, lr}
   19fdc:	4604      	mov	r4, r0
   19fde:	460d      	mov	r5, r1
   19fe0:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   19fe2:	f7f6 fb4f 	bl	10684 <shell_state_precheck>
   19fe6:	b140      	cbz	r0, 19ffa <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   19fe8:	69e1      	ldr	r1, [r4, #28]
   19fea:	4633      	mov	r3, r6
   19fec:	462a      	mov	r2, r5
   19fee:	4620      	mov	r0, r4
}
   19ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   19ff4:	6809      	ldr	r1, [r1, #0]
   19ff6:	f7ff bfe6 	b.w	19fc6 <log_disable>
}
   19ffa:	bd70      	pop	{r4, r5, r6, pc}

00019ffc <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   19ffc:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_WARM);
   19ffe:	2000      	movs	r0, #0
   1a000:	f7f8 fa74 	bl	124ec <sys_reboot>
	return 0;
}
   1a004:	2000      	movs	r0, #0
   1a006:	bd08      	pop	{r3, pc}

0001a008 <cmd_kernel_reboot_cold>:

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   1a008:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	sys_reboot(SYS_REBOOT_COLD);
   1a00a:	2001      	movs	r0, #1
   1a00c:	f7f8 fa6e 	bl	124ec <sys_reboot>
	return 0;
}
   1a010:	2000      	movs	r0, #0
   1a012:	bd08      	pop	{r3, pc}

0001a014 <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   1a014:	b510      	push	{r4, lr}
   1a016:	4604      	mov	r4, r0
   1a018:	b08e      	sub	sp, #56	; 0x38
   1a01a:	2001      	movs	r0, #1
   1a01c:	4669      	mov	r1, sp
   1a01e:	f7f9 fd89 	bl	13b34 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   1a022:	a905      	add	r1, sp, #20
   1a024:	4668      	mov	r0, sp
   1a026:	f7f9 fca3 	bl	13970 <gmtime_r>

	date_print(shell, &tm);
   1a02a:	4620      	mov	r0, r4
   1a02c:	a905      	add	r1, sp, #20
   1a02e:	f7f6 fd87 	bl	10b40 <date_print>

	return 0;
}
   1a032:	2000      	movs	r0, #0
   1a034:	b00e      	add	sp, #56	; 0x38
   1a036:	bd10      	pop	{r4, pc}

0001a038 <shell_signal_handle>:
{
   1a038:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   1a03a:	6885      	ldr	r5, [r0, #8]
   1a03c:	0109      	lsls	r1, r1, #4
   1a03e:	f501 7117 	add.w	r1, r1, #604	; 0x25c
{
   1a042:	4604      	mov	r4, r0
   1a044:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   1a046:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(signal, signaled, result);
   1a048:	4669      	mov	r1, sp
   1a04a:	4628      	mov	r0, r5
   1a04c:	aa01      	add	r2, sp, #4
   1a04e:	f001 fecf 	bl	1bdf0 <z_impl_k_poll_signal_check>
	if (set) {
   1a052:	9b00      	ldr	r3, [sp, #0]
   1a054:	b11b      	cbz	r3, 1a05e <shell_signal_handle+0x26>
	signal->signaled = 0U;
   1a056:	2300      	movs	r3, #0
		handler(shell);
   1a058:	4620      	mov	r0, r4
   1a05a:	60ab      	str	r3, [r5, #8]
   1a05c:	47b0      	blx	r6
}
   1a05e:	b002      	add	sp, #8
   1a060:	bd70      	pop	{r4, r5, r6, pc}

0001a062 <kill_handler>:
{
   1a062:	b538      	push	{r3, r4, r5, lr}
	if (flag_processing_get(shell)) {
   1a064:	6883      	ldr	r3, [r0, #8]
{
   1a066:	4604      	mov	r4, r0
	return shell->ctx->internal.flags.processing == 1;
   1a068:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
	if (flag_processing_get(shell)) {
   1a06c:	071b      	lsls	r3, r3, #28
   1a06e:	d40d      	bmi.n	1a08c <kill_handler+0x2a>
		shell_log_backend_disable(shell->log_backend);
   1a070:	69c0      	ldr	r0, [r0, #28]
   1a072:	f000 fe79 	bl	1ad68 <shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   1a076:	6860      	ldr	r0, [r4, #4]
   1a078:	6803      	ldr	r3, [r0, #0]
   1a07a:	685b      	ldr	r3, [r3, #4]
   1a07c:	4798      	blx	r3
	if (err != 0) {
   1a07e:	4605      	mov	r5, r0
   1a080:	b920      	cbnz	r0, 1a08c <kill_handler+0x2a>
	shell_history_purge(shell->history);
   1a082:	68e0      	ldr	r0, [r4, #12]
   1a084:	f000 fd30 	bl	1aae8 <shell_history_purge>
	shell->ctx->state = state;
   1a088:	68a3      	ldr	r3, [r4, #8]
   1a08a:	711d      	strb	r5, [r3, #4]
	return z_impl_k_current_get();
   1a08c:	f7fb fa44 	bl	15518 <z_impl_k_current_get>
}
   1a090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   1a094:	f7f9 ba56 	b.w	13544 <z_impl_k_thread_abort>

0001a098 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1a098:	f7fa be68 	b.w	14d6c <z_impl_k_mutex_unlock>

0001a09c <shell_strlen>:
{
   1a09c:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1a09e:	b110      	cbz	r0, 1a0a6 <shell_strlen+0xa>
   1a0a0:	f001 f8b8 	bl	1b214 <strlen>
   1a0a4:	b280      	uxth	r0, r0
}
   1a0a6:	bd08      	pop	{r3, pc}

0001a0a8 <shell_raw_fprintf>:
{
   1a0a8:	b40e      	push	{r1, r2, r3}
   1a0aa:	b503      	push	{r0, r1, lr}
   1a0ac:	aa03      	add	r2, sp, #12
   1a0ae:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a0b2:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a0b4:	f7f7 fce4 	bl	11a80 <shell_fprintf_fmt>
}
   1a0b8:	b002      	add	sp, #8
   1a0ba:	f85d eb04 	ldr.w	lr, [sp], #4
   1a0be:	b003      	add	sp, #12
   1a0c0:	4770      	bx	lr

0001a0c2 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   1a0c2:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   1a0c4:	b920      	cbnz	r0, 1a0d0 <transport_evt_handler+0xe>
   1a0c6:	f503 7017 	add.w	r0, r3, #604	; 0x25c
	return z_impl_k_poll_signal_raise(signal, result);
   1a0ca:	2100      	movs	r1, #0
   1a0cc:	f7fb be5e 	b.w	15d8c <z_impl_k_poll_signal_raise>
   1a0d0:	f503 7023 	add.w	r0, r3, #652	; 0x28c
   1a0d4:	e7f9      	b.n	1a0ca <transport_evt_handler+0x8>

0001a0d6 <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1a0d6:	f7fa bdd1 	b.w	14c7c <z_impl_k_mutex_lock>

0001a0da <shell_log_process>:
	int signaled = 0;
   1a0da:	2300      	movs	r3, #0
{
   1a0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a0de:	4604      	mov	r4, r0
	int signaled = 0;
   1a0e0:	9300      	str	r3, [sp, #0]
			shell_cmd_line_erase(shell);
   1a0e2:	4620      	mov	r0, r4
   1a0e4:	f000 fb32 	bl	1a74c <shell_cmd_line_erase>
			processed = shell_log_backend_process(shell->log_backend);
   1a0e8:	69e0      	ldr	r0, [r4, #28]
   1a0ea:	f000 fe4d 	bl	1ad88 <shell_log_backend_process>
   1a0ee:	4605      	mov	r5, r0
		shell_print_prompt_and_cmd(shell);
   1a0f0:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   1a0f2:	68a6      	ldr	r6, [r4, #8]
		shell_print_prompt_and_cmd(shell);
   1a0f4:	f7f7 fe66 	bl	11dc4 <shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   1a0f8:	68a3      	ldr	r3, [r4, #8]
		struct k_poll_signal *signal =
   1a0fa:	f506 7617 	add.w	r6, r6, #604	; 0x25c
		if (shell->ctx->cmd_buff_len) {
   1a0fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1a100:	b123      	cbz	r3, 1a10c <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   1a102:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   1a106:	2100      	movs	r1, #0
   1a108:	f7fb f9e6 	bl	154d8 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(signal, signaled, result);
   1a10c:	4669      	mov	r1, sp
   1a10e:	4630      	mov	r0, r6
   1a110:	aa01      	add	r2, sp, #4
   1a112:	f001 fe6d 	bl	1bdf0 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   1a116:	b115      	cbz	r5, 1a11e <shell_log_process+0x44>
   1a118:	9b00      	ldr	r3, [sp, #0]
   1a11a:	2b00      	cmp	r3, #0
   1a11c:	d0e1      	beq.n	1a0e2 <shell_log_process+0x8>
}
   1a11e:	b002      	add	sp, #8
   1a120:	bd70      	pop	{r4, r5, r6, pc}

0001a122 <shell_vfprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_vfprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, va_list args)
{
   1a122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a124:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(shell->ctx);
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	/* Sending a message to a non-active shell leads to a dead lock. */
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   1a126:	6880      	ldr	r0, [r0, #8]
{
   1a128:	461f      	mov	r7, r3
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   1a12a:	7903      	ldrb	r3, [r0, #4]
{
   1a12c:	460d      	mov	r5, r1
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   1a12e:	2b02      	cmp	r3, #2
{
   1a130:	4616      	mov	r6, r2
	if (state_get(shell) != SHELL_STATE_ACTIVE) {
   1a132:	d006      	beq.n	1a142 <shell_vfprintf+0x20>
	shell->ctx->internal.flags.print_noinit = val ? 1 : 0;
   1a134:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1a138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1a13c:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
	if (!flag_cmd_ctx_get(shell)) {
		shell_print_prompt_and_cmd(shell);
	}
	transport_buffer_flush(shell);
	k_mutex_unlock(&shell->ctx->wr_mtx);
}
   1a140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1a142:	f04f 32ff 	mov.w	r2, #4294967295
   1a146:	f04f 33ff 	mov.w	r3, #4294967295
   1a14a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1a14e:	f7ff ffc2 	bl	1a0d6 <k_mutex_lock.constprop.0>
	if (!flag_cmd_ctx_get(shell)) {
   1a152:	68a3      	ldr	r3, [r4, #8]
	return shell->ctx->internal.flags.cmd_ctx == 1;
   1a154:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1a158:	061a      	lsls	r2, r3, #24
   1a15a:	d402      	bmi.n	1a162 <shell_vfprintf+0x40>
		shell_cmd_line_erase(shell);
   1a15c:	4620      	mov	r0, r4
   1a15e:	f000 faf5 	bl	1a74c <shell_cmd_line_erase>
	shell_internal_vfprintf(shell, color, fmt, args);
   1a162:	463b      	mov	r3, r7
   1a164:	4632      	mov	r2, r6
   1a166:	4629      	mov	r1, r5
   1a168:	4620      	mov	r0, r4
   1a16a:	f000 fb40 	bl	1a7ee <shell_internal_vfprintf>
	if (!flag_cmd_ctx_get(shell)) {
   1a16e:	68a3      	ldr	r3, [r4, #8]
   1a170:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1a174:	061b      	lsls	r3, r3, #24
   1a176:	d402      	bmi.n	1a17e <shell_vfprintf+0x5c>
		shell_print_prompt_and_cmd(shell);
   1a178:	4620      	mov	r0, r4
   1a17a:	f7f7 fe23 	bl	11dc4 <shell_print_prompt_and_cmd>
	shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1a17e:	6960      	ldr	r0, [r4, #20]
   1a180:	f000 f829 	bl	1a1d6 <shell_fprintf_buffer_flush>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   1a184:	68a0      	ldr	r0, [r4, #8]
}
   1a186:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   1a18a:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1a18e:	f7ff bf83 	b.w	1a098 <k_mutex_unlock>

0001a192 <shell_fprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_fprintf(const struct shell *shell, enum shell_vt100_color color,
		   const char *fmt, ...)
{
   1a192:	b40c      	push	{r2, r3}
   1a194:	b507      	push	{r0, r1, r2, lr}
   1a196:	ab04      	add	r3, sp, #16
   1a198:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;

	va_start(args, fmt);
   1a19c:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   1a19e:	f7ff ffc0 	bl	1a122 <shell_vfprintf>
	va_end(args);
}
   1a1a2:	b003      	add	sp, #12
   1a1a4:	f85d eb04 	ldr.w	lr, [sp], #4
   1a1a8:	b002      	add	sp, #8
   1a1aa:	4770      	bx	lr

0001a1ac <shell_help>:

	return 0;
}

void shell_help(const struct shell *shell)
{
   1a1ac:	b510      	push	{r4, lr}
   1a1ae:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1a1b0:	6880      	ldr	r0, [r0, #8]
   1a1b2:	f04f 32ff 	mov.w	r2, #4294967295
   1a1b6:	f04f 33ff 	mov.w	r3, #4294967295
   1a1ba:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1a1be:	f7ff ff8a 	bl	1a0d6 <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   1a1c2:	4620      	mov	r0, r4
   1a1c4:	f7f6 fdba 	bl	10d3c <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   1a1c8:	68a0      	ldr	r0, [r4, #8]
}
   1a1ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   1a1ce:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
   1a1d2:	f7ff bf61 	b.w	1a098 <k_mutex_unlock>

0001a1d6 <shell_fprintf_buffer_flush>:


void shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   1a1d6:	6902      	ldr	r2, [r0, #16]
{
   1a1d8:	b510      	push	{r4, lr}
   1a1da:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   1a1dc:	6883      	ldr	r3, [r0, #8]
   1a1de:	6812      	ldr	r2, [r2, #0]
   1a1e0:	6801      	ldr	r1, [r0, #0]
   1a1e2:	68c0      	ldr	r0, [r0, #12]
   1a1e4:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   1a1e6:	2200      	movs	r2, #0
   1a1e8:	6923      	ldr	r3, [r4, #16]
   1a1ea:	601a      	str	r2, [r3, #0]
}
   1a1ec:	bd10      	pop	{r4, pc}

0001a1ee <out_func>:
{
   1a1ee:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   1a1f0:	68cb      	ldr	r3, [r1, #12]
{
   1a1f2:	4605      	mov	r5, r0
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   1a1f4:	7c1b      	ldrb	r3, [r3, #16]
{
   1a1f6:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   1a1f8:	2b02      	cmp	r3, #2
   1a1fa:	d104      	bne.n	1a206 <out_func+0x18>
   1a1fc:	280a      	cmp	r0, #10
   1a1fe:	d102      	bne.n	1a206 <out_func+0x18>
		(void)out_func('\r', ctx);
   1a200:	200d      	movs	r0, #13
   1a202:	f7ff fff4 	bl	1a1ee <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   1a206:	6923      	ldr	r3, [r4, #16]
   1a208:	6822      	ldr	r2, [r4, #0]
   1a20a:	681b      	ldr	r3, [r3, #0]
   1a20c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   1a20e:	6922      	ldr	r2, [r4, #16]
   1a210:	6813      	ldr	r3, [r2, #0]
   1a212:	3301      	adds	r3, #1
   1a214:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   1a216:	6862      	ldr	r2, [r4, #4]
   1a218:	4293      	cmp	r3, r2
   1a21a:	d102      	bne.n	1a222 <out_func+0x34>
		shell_fprintf_buffer_flush(sh_fprintf);
   1a21c:	4620      	mov	r0, r4
   1a21e:	f7ff ffda 	bl	1a1d6 <shell_fprintf_buffer_flush>
}
   1a222:	2000      	movs	r0, #0
   1a224:	bd38      	pop	{r3, r4, r5, pc}

0001a226 <isspace>:
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1a226:	2820      	cmp	r0, #32
   1a228:	d005      	beq.n	1a236 <isspace+0x10>
   1a22a:	3809      	subs	r0, #9
   1a22c:	2804      	cmp	r0, #4
   1a22e:	bf8c      	ite	hi
   1a230:	2000      	movhi	r0, #0
   1a232:	2001      	movls	r0, #1
   1a234:	4770      	bx	lr
   1a236:	2001      	movs	r0, #1
}
   1a238:	4770      	bx	lr

0001a23a <shell_strlen>:
{
   1a23a:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1a23c:	b110      	cbz	r0, 1a244 <shell_strlen+0xa>
   1a23e:	f000 ffe9 	bl	1b214 <strlen>
   1a242:	b280      	uxth	r0, r0
}
   1a244:	bd08      	pop	{r3, pc}

0001a246 <column_span_with_buffer_offsets_get>:
{
   1a246:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   1a248:	7b04      	ldrb	r4, [r0, #12]
   1a24a:	8943      	ldrh	r3, [r0, #10]
   1a24c:	4422      	add	r2, r4
   1a24e:	4421      	add	r1, r4
   1a250:	fbb2 f0f3 	udiv	r0, r2, r3
   1a254:	fbb1 f4f3 	udiv	r4, r1, r3
   1a258:	fb03 2010 	mls	r0, r3, r0, r2
   1a25c:	fb03 1114 	mls	r1, r3, r4, r1
}
   1a260:	1a40      	subs	r0, r0, r1
   1a262:	bd10      	pop	{r4, pc}

0001a264 <row_span_with_buffer_offsets_get>:
{
   1a264:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   1a266:	7b04      	ldrb	r4, [r0, #12]
   1a268:	8943      	ldrh	r3, [r0, #10]
   1a26a:	4421      	add	r1, r4
   1a26c:	1910      	adds	r0, r2, r4
   1a26e:	fbb0 f0f3 	udiv	r0, r0, r3
   1a272:	fbb1 f1f3 	udiv	r1, r1, r3
}
   1a276:	1a40      	subs	r0, r0, r1
   1a278:	bd10      	pop	{r4, pc}

0001a27a <shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1a27a:	7b03      	ldrb	r3, [r0, #12]
{
   1a27c:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1a27e:	8944      	ldrh	r4, [r0, #10]
   1a280:	4419      	add	r1, r3
   1a282:	fbb1 f5f4 	udiv	r5, r1, r4
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1a286:	441a      	add	r2, r3
   1a288:	fbb2 f3f4 	udiv	r3, r2, r4
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   1a28c:	fb04 1115 	mls	r1, r4, r5, r1
   1a290:	3101      	adds	r1, #1
   1a292:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1a294:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1a296:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   1a29a:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1a29c:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   1a29e:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   1a2a0:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   1a2a2:	8043      	strh	r3, [r0, #2]
}
   1a2a4:	bd30      	pop	{r4, r5, pc}

0001a2a6 <shell_make_argv>:
{
   1a2a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*argc = 0;
   1a2aa:	2500      	movs	r5, #0
{
   1a2ac:	4606      	mov	r6, r0
   1a2ae:	460f      	mov	r7, r1
   1a2b0:	4614      	mov	r4, r2
   1a2b2:	4698      	mov	r8, r3
	*argc = 0;
   1a2b4:	6005      	str	r5, [r0, #0]
		c = *cmd;
   1a2b6:	7820      	ldrb	r0, [r4, #0]
		if (c == '\0') {
   1a2b8:	2800      	cmp	r0, #0
   1a2ba:	f000 80b5 	beq.w	1a428 <shell_make_argv+0x182>
		if (isspace((int) c)) {
   1a2be:	f7ff ffb2 	bl	1a226 <isspace>
   1a2c2:	b118      	cbz	r0, 1a2cc <shell_make_argv+0x26>
			*cmd++ = '\0';
   1a2c4:	2300      	movs	r3, #0
   1a2c6:	f804 3b01 	strb.w	r3, [r4], #1
			continue;
   1a2ca:	e7f4      	b.n	1a2b6 <shell_make_argv+0x10>
		argv[(*argc)++] = cmd;
   1a2cc:	6832      	ldr	r2, [r6, #0]
   1a2ce:	1c53      	adds	r3, r2, #1
		if (*argc == max_argc) {
   1a2d0:	4543      	cmp	r3, r8
		argv[(*argc)++] = cmd;
   1a2d2:	6033      	str	r3, [r6, #0]
   1a2d4:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
		if (*argc == max_argc) {
   1a2d8:	f000 80a6 	beq.w	1a428 <shell_make_argv+0x182>
	char quote = 0;
   1a2dc:	4605      	mov	r5, r0
		c = *cmd;
   1a2de:	f894 9000 	ldrb.w	r9, [r4]
		if (c == '\0') {
   1a2e2:	f1b9 0f00 	cmp.w	r9, #0
   1a2e6:	d0e6      	beq.n	1a2b6 <shell_make_argv+0x10>
		if (!quote) {
   1a2e8:	2d00      	cmp	r5, #0
   1a2ea:	f040 8089 	bne.w	1a400 <shell_make_argv+0x15a>
			switch (c) {
   1a2ee:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1a2f2:	d006      	beq.n	1a302 <shell_make_argv+0x5c>
   1a2f4:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1a2f8:	f000 808a 	beq.w	1a410 <shell_make_argv+0x16a>
   1a2fc:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
   1a300:	d176      	bne.n	1a3f0 <shell_make_argv+0x14a>
						shell_strlen(cmd));
   1a302:	4620      	mov	r0, r4
   1a304:	f7ff ff99 	bl	1a23a <shell_strlen>
				memmove(cmd, cmd + 1,
   1a308:	1c61      	adds	r1, r4, #1
						shell_strlen(cmd));
   1a30a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   1a30c:	4620      	mov	r0, r4
   1a30e:	f000 ffb3 	bl	1b278 <memmove>
				continue;
   1a312:	464d      	mov	r5, r9
   1a314:	e7e3      	b.n	1a2de <shell_make_argv+0x38>
			memmove(cmd, cmd + 1, shell_strlen(cmd));
   1a316:	4620      	mov	r0, r4
   1a318:	f7ff ff8f 	bl	1a23a <shell_strlen>
   1a31c:	1c61      	adds	r1, r4, #1
   1a31e:	4602      	mov	r2, r0
   1a320:	4620      	mov	r0, r4
   1a322:	f000 ffa9 	bl	1b278 <memmove>
			quote = 0;
   1a326:	2500      	movs	r5, #0
			continue;
   1a328:	e7d9      	b.n	1a2de <shell_make_argv+0x38>
			if (t == '0') {
   1a32a:	2930      	cmp	r1, #48	; 0x30
   1a32c:	d125      	bne.n	1a37a <shell_make_argv+0xd4>
   1a32e:	2302      	movs	r3, #2
				uint8_t v = 0U;
   1a330:	f04f 0a00 	mov.w	sl, #0
					t = *(cmd + i);
   1a334:	5ce1      	ldrb	r1, [r4, r3]
   1a336:	fa5f f983 	uxtb.w	r9, r3
					if (t >= '0' && t <= '7') {
   1a33a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1a33e:	b2d0      	uxtb	r0, r2
   1a340:	2807      	cmp	r0, #7
   1a342:	d817      	bhi.n	1a374 <shell_make_argv+0xce>
						v = (v << 3) | (t - '0');
   1a344:	3301      	adds	r3, #1
   1a346:	ea42 0aca 	orr.w	sl, r2, sl, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   1a34a:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   1a34c:	fa5f fa8a 	uxtb.w	sl, sl
				for (i = 2U; i < (2 + 3); i++) {
   1a350:	d1f0      	bne.n	1a334 <shell_make_argv+0x8e>
   1a352:	4699      	mov	r9, r3
						shell_strlen(cmd) - (i - 2));
   1a354:	4620      	mov	r0, r4
   1a356:	f7ff ff70 	bl	1a23a <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   1a35a:	f109 3bff 	add.w	fp, r9, #4294967295
   1a35e:	44a3      	add	fp, r4
						shell_strlen(cmd) - (i - 2));
   1a360:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   1a362:	4659      	mov	r1, fp
   1a364:	4620      	mov	r0, r4
   1a366:	eba2 0209 	sub.w	r2, r2, r9
   1a36a:	f000 ff85 	bl	1b278 <memmove>
					*cmd++ = v;
   1a36e:	f804 ab01 	strb.w	sl, [r4], #1
					continue;
   1a372:	e7b4      	b.n	1a2de <shell_make_argv+0x38>
				if (i > 2) {
   1a374:	f1b9 0f02 	cmp.w	r9, #2
   1a378:	d1ec      	bne.n	1a354 <shell_make_argv+0xae>
			if (t == 'x') {
   1a37a:	2978      	cmp	r1, #120	; 0x78
   1a37c:	d13e      	bne.n	1a3fc <shell_make_argv+0x156>
   1a37e:	2302      	movs	r3, #2
				uint8_t v = 0U;
   1a380:	f04f 0900 	mov.w	r9, #0
					t = *(cmd + i);
   1a384:	5ce2      	ldrb	r2, [r4, r3]
   1a386:	b2d8      	uxtb	r0, r3
					if (t >= '0' && t <= '9') {
   1a388:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1a38c:	fa5f fc81 	uxtb.w	ip, r1
   1a390:	f1bc 0f09 	cmp.w	ip, #9
   1a394:	d819      	bhi.n	1a3ca <shell_make_argv+0x124>
						v = (v << 4) | (t - '0');
   1a396:	ea41 1209 	orr.w	r2, r1, r9, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   1a39a:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   1a39c:	fa5f f982 	uxtb.w	r9, r2
				for (i = 2U; i < (2 + 2); i++) {
   1a3a0:	d111      	bne.n	1a3c6 <shell_make_argv+0x120>
   1a3a2:	f04f 0b04 	mov.w	fp, #4
						shell_strlen(cmd) - (i - 2));
   1a3a6:	4620      	mov	r0, r4
   1a3a8:	f7ff ff47 	bl	1a23a <shell_strlen>
					memmove(cmd, cmd + (i - 1),
   1a3ac:	f10b 3aff 	add.w	sl, fp, #4294967295
   1a3b0:	44a2      	add	sl, r4
						shell_strlen(cmd) - (i - 2));
   1a3b2:	1c82      	adds	r2, r0, #2
					memmove(cmd, cmd + (i - 1),
   1a3b4:	4651      	mov	r1, sl
   1a3b6:	4620      	mov	r0, r4
   1a3b8:	eba2 020b 	sub.w	r2, r2, fp
   1a3bc:	f000 ff5c 	bl	1b278 <memmove>
					*cmd++ = v;
   1a3c0:	f804 9b01 	strb.w	r9, [r4], #1
					continue;
   1a3c4:	e78b      	b.n	1a2de <shell_make_argv+0x38>
   1a3c6:	2303      	movs	r3, #3
   1a3c8:	e7dc      	b.n	1a384 <shell_make_argv+0xde>
					} else if ((t >= 'a') &&
   1a3ca:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1a3ce:	2905      	cmp	r1, #5
   1a3d0:	d803      	bhi.n	1a3da <shell_make_argv+0x134>
						v = (v << 4) | (t - 'a' + 10);
   1a3d2:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   1a3d4:	ea42 1209 	orr.w	r2, r2, r9, lsl #4
   1a3d8:	e7df      	b.n	1a39a <shell_make_argv+0xf4>
					} else if ((t >= 'A') && (t <= 'F')) {
   1a3da:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   1a3de:	2905      	cmp	r1, #5
   1a3e0:	d801      	bhi.n	1a3e6 <shell_make_argv+0x140>
						v = (v << 4) | (t - 'A' + 10);
   1a3e2:	3a37      	subs	r2, #55	; 0x37
   1a3e4:	e7f6      	b.n	1a3d4 <shell_make_argv+0x12e>
				if (i > 2) {
   1a3e6:	2802      	cmp	r0, #2
   1a3e8:	d008      	beq.n	1a3fc <shell_make_argv+0x156>
   1a3ea:	f04f 0b03 	mov.w	fp, #3
   1a3ee:	e7da      	b.n	1a3a6 <shell_make_argv+0x100>
		if (!quote && isspace((int) c)) {
   1a3f0:	4648      	mov	r0, r9
   1a3f2:	f7ff ff18 	bl	1a226 <isspace>
   1a3f6:	2800      	cmp	r0, #0
   1a3f8:	f47f af5d 	bne.w	1a2b6 <shell_make_argv+0x10>
		cmd += 1;
   1a3fc:	3401      	adds	r4, #1
   1a3fe:	e76e      	b.n	1a2de <shell_make_argv+0x38>
		if (quote == c) {
   1a400:	45a9      	cmp	r9, r5
   1a402:	d088      	beq.n	1a316 <shell_make_argv+0x70>
		if (quote && c == '\\') {
   1a404:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   1a408:	d1f8      	bne.n	1a3fc <shell_make_argv+0x156>
   1a40a:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   1a40c:	428d      	cmp	r5, r1
   1a40e:	d18c      	bne.n	1a32a <shell_make_argv+0x84>
						shell_strlen(cmd));
   1a410:	4620      	mov	r0, r4
   1a412:	f7ff ff12 	bl	1a23a <shell_strlen>
				memmove(cmd, cmd + 1,
   1a416:	f104 0901 	add.w	r9, r4, #1
						shell_strlen(cmd));
   1a41a:	4602      	mov	r2, r0
				memmove(cmd, cmd + 1,
   1a41c:	4649      	mov	r1, r9
   1a41e:	4620      	mov	r0, r4
   1a420:	f000 ff2a 	bl	1b278 <memmove>
				cmd += 1;
   1a424:	464c      	mov	r4, r9
				continue;
   1a426:	e75a      	b.n	1a2de <shell_make_argv+0x38>
}
   1a428:	4628      	mov	r0, r5
   1a42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a42e <shell_pattern_remove>:
{
   1a42e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a430:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   1a432:	4611      	mov	r1, r2
{
   1a434:	4615      	mov	r5, r2
   1a436:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   1a438:	f000 fea1 	bl	1b17e <strstr>
   1a43c:	4604      	mov	r4, r0
	uint16_t pattern_len = shell_strlen(pattern);
   1a43e:	4628      	mov	r0, r5
   1a440:	f7ff fefb 	bl	1a23a <shell_strlen>
   1a444:	4605      	mov	r5, r0
	if (!pattern_addr) {
   1a446:	b1c4      	cbz	r4, 1a47a <shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   1a448:	42a7      	cmp	r7, r4
   1a44a:	d207      	bcs.n	1a45c <shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   1a44c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   1a450:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   1a452:	bf02      	ittt	eq
   1a454:	3501      	addeq	r5, #1
   1a456:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   1a458:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a45c:	4620      	mov	r0, r4
   1a45e:	f7ff feec 	bl	1a23a <shell_strlen>
	*buff_len -= pattern_len;
   1a462:	8833      	ldrh	r3, [r6, #0]
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a464:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   1a466:	1b5b      	subs	r3, r3, r5
	shift = shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   1a468:	3201      	adds	r2, #1
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1a46a:	4620      	mov	r0, r4
	*buff_len -= pattern_len;
   1a46c:	8033      	strh	r3, [r6, #0]
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1a46e:	1961      	adds	r1, r4, r5
   1a470:	b292      	uxth	r2, r2
}
   1a472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	memmove(pattern_addr, pattern_addr + pattern_len, shift);
   1a476:	f000 beff 	b.w	1b278 <memmove>
}
   1a47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a47c <shell_find_cmd>:
 */
const struct shell_static_entry *shell_find_cmd(
					const struct shell_static_entry *parent,
					const char *cmd_str,
					struct shell_static_entry *dloc)
{
   1a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a480:	4605      	mov	r5, r0
   1a482:	4688      	mov	r8, r1
   1a484:	4617      	mov	r7, r2
	const struct shell_static_entry *entry;
	size_t idx = 0;
   1a486:	2600      	movs	r6, #0

	while ((entry = shell_cmd_get(parent, idx++, dloc)) != NULL) {
   1a488:	4631      	mov	r1, r6
   1a48a:	463a      	mov	r2, r7
   1a48c:	4628      	mov	r0, r5
   1a48e:	f7f7 fb0b 	bl	11aa8 <shell_cmd_get>
   1a492:	3601      	adds	r6, #1
   1a494:	4604      	mov	r4, r0
   1a496:	b128      	cbz	r0, 1a4a4 <shell_find_cmd+0x28>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   1a498:	4640      	mov	r0, r8
   1a49a:	6821      	ldr	r1, [r4, #0]
   1a49c:	f000 fec1 	bl	1b222 <strcmp>
   1a4a0:	2800      	cmp	r0, #0
   1a4a2:	d1f1      	bne.n	1a488 <shell_find_cmd+0xc>
			return entry;
		}
	};

	return NULL;
}
   1a4a4:	4620      	mov	r0, r4
   1a4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a4aa <shell_get_last_command>:
					size_t argc,
					const char *argv[],
					size_t *match_arg,
					struct shell_static_entry *dloc,
					bool only_static)
{
   1a4aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a4ae:	461c      	mov	r4, r3
	const struct shell_static_entry *prev_entry = NULL;

	*match_arg = SHELL_CMD_ROOT_LVL;
   1a4b0:	2300      	movs	r3, #0
{
   1a4b2:	460f      	mov	r7, r1
   1a4b4:	4616      	mov	r6, r2
   1a4b6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1a4ba:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = SHELL_CMD_ROOT_LVL;
   1a4be:	6023      	str	r3, [r4, #0]

	while (*match_arg < argc) {
   1a4c0:	6823      	ldr	r3, [r4, #0]

		if (IS_ENABLED(CONFIG_SHELL_WILDCARD)) {
			/* ignore wildcard argument */
			if (shell_wildcard_character_exist(argv[*match_arg])) {
				(*match_arg)++;
				continue;
   1a4c2:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   1a4c4:	42bb      	cmp	r3, r7
   1a4c6:	d21b      	bcs.n	1a500 <shell_get_last_command+0x56>
			if (shell_wildcard_character_exist(argv[*match_arg])) {
   1a4c8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   1a4cc:	f000 fcc4 	bl	1ae58 <shell_wildcard_character_exist>
   1a4d0:	6823      	ldr	r3, [r4, #0]
   1a4d2:	4682      	mov	sl, r0
   1a4d4:	b118      	cbz	r0, 1a4de <shell_get_last_command+0x34>
				(*match_arg)++;
   1a4d6:	3301      	adds	r3, #1
				continue;
   1a4d8:	4628      	mov	r0, r5
				(*match_arg)++;
   1a4da:	6023      	str	r3, [r4, #0]
				continue;
   1a4dc:	e7f0      	b.n	1a4c0 <shell_get_last_command+0x16>
			}
		}

		prev_entry = entry;
		entry = shell_find_cmd(entry, argv[*match_arg], dloc);
   1a4de:	4642      	mov	r2, r8
   1a4e0:	4628      	mov	r0, r5
   1a4e2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1a4e6:	f7ff ffc9 	bl	1a47c <shell_find_cmd>
		if (entry) {
   1a4ea:	b148      	cbz	r0, 1a500 <shell_get_last_command+0x56>
			(*match_arg)++;
   1a4ec:	6823      	ldr	r3, [r4, #0]
   1a4ee:	1c5a      	adds	r2, r3, #1
   1a4f0:	6022      	str	r2, [r4, #0]
		} else {
			entry = prev_entry;
			break;
		}

		if (only_static && (entry == dloc)) {
   1a4f2:	f1b9 0f00 	cmp.w	r9, #0
   1a4f6:	d0e3      	beq.n	1a4c0 <shell_get_last_command+0x16>
   1a4f8:	4580      	cmp	r8, r0
   1a4fa:	d1e1      	bne.n	1a4c0 <shell_get_last_command+0x16>
			(*match_arg)--;
			return NULL;
   1a4fc:	4655      	mov	r5, sl
			(*match_arg)--;
   1a4fe:	6023      	str	r3, [r4, #0]
		}
	}

	return entry;
}
   1a500:	4628      	mov	r0, r5
   1a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a506 <shell_spaces_trim>:

	return 0;
}

void shell_spaces_trim(char *str)
{
   1a506:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a50a:	4606      	mov	r6, r0
	uint16_t len = shell_strlen(str);
   1a50c:	f7ff fe95 	bl	1a23a <shell_strlen>
   1a510:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   1a512:	bb56      	cbnz	r6, 1a56a <shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   1a514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   1a518:	b14c      	cbz	r4, 1a52e <shell_spaces_trim+0x28>
						len - j + 1);
   1a51a:	1c6a      	adds	r2, r5, #1
   1a51c:	b29b      	uxth	r3, r3
					memmove(&str[i + 1],
   1a51e:	3701      	adds	r7, #1
   1a520:	1ad2      	subs	r2, r2, r3
   1a522:	19f0      	adds	r0, r6, r7
					len -= shift;
   1a524:	1b2d      	subs	r5, r5, r4
					memmove(&str[i + 1],
   1a526:	f000 fea7 	bl	1b278 <memmove>
					shift = 0U;
   1a52a:	464c      	mov	r4, r9
					len -= shift;
   1a52c:	b2ad      	uxth	r5, r5
	for (uint16_t i = 0; i < len - 1; i++) {
   1a52e:	f108 0801 	add.w	r8, r8, #1
   1a532:	fa1f f388 	uxth.w	r3, r8
   1a536:	1e6a      	subs	r2, r5, #1
   1a538:	4293      	cmp	r3, r2
   1a53a:	461f      	mov	r7, r3
   1a53c:	daea      	bge.n	1a514 <shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   1a53e:	5df0      	ldrb	r0, [r6, r7]
   1a540:	f7ff fe71 	bl	1a226 <isspace>
   1a544:	2800      	cmp	r0, #0
   1a546:	d0f2      	beq.n	1a52e <shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   1a548:	3301      	adds	r3, #1
   1a54a:	b29b      	uxth	r3, r3
   1a54c:	b29a      	uxth	r2, r3
   1a54e:	4295      	cmp	r5, r2
   1a550:	d9ed      	bls.n	1a52e <shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   1a552:	5cf0      	ldrb	r0, [r6, r3]
   1a554:	18f1      	adds	r1, r6, r3
   1a556:	f7ff fe66 	bl	1a226 <isspace>
   1a55a:	4681      	mov	r9, r0
   1a55c:	1c5a      	adds	r2, r3, #1
   1a55e:	2800      	cmp	r0, #0
   1a560:	d0da      	beq.n	1a518 <shell_spaces_trim+0x12>
					shift++;
   1a562:	3401      	adds	r4, #1
   1a564:	4613      	mov	r3, r2
   1a566:	b2a4      	uxth	r4, r4
			for (uint16_t j = i + 1; j < len; j++) {
   1a568:	e7f0      	b.n	1a54c <shell_spaces_trim+0x46>
   1a56a:	f04f 0800 	mov.w	r8, #0
	uint16_t shift = 0U;
   1a56e:	4644      	mov	r4, r8
   1a570:	e7df      	b.n	1a532 <shell_spaces_trim+0x2c>

0001a572 <shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void shell_cmd_trim(const struct shell *shell)
{
   1a572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1a574:	6884      	ldr	r4, [r0, #8]
{
   1a576:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   1a578:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a57c:	b953      	cbnz	r3, 1a594 <shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   1a57e:	68ab      	ldr	r3, [r5, #8]
   1a580:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   1a582:	869a      	strh	r2, [r3, #52]	; 0x34
}
   1a584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   1a586:	3a01      	subs	r2, #1
   1a588:	b292      	uxth	r2, r2
   1a58a:	8662      	strh	r2, [r4, #50]	; 0x32
		if (*buff_len == 0U) {
   1a58c:	b922      	cbnz	r2, 1a598 <shell_cmd_trim+0x26>
			buff[0] = '\0';
   1a58e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
			return;
   1a592:	e7f4      	b.n	1a57e <shell_cmd_trim+0xc>
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1a594:	f104 0638 	add.w	r6, r4, #56	; 0x38
	while (isspace((int) buff[*buff_len - 1U])) {
   1a598:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1a59a:	18b3      	adds	r3, r6, r2
   1a59c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   1a5a0:	f7ff fe41 	bl	1a226 <isspace>
   1a5a4:	4603      	mov	r3, r0
   1a5a6:	2800      	cmp	r0, #0
   1a5a8:	d1ed      	bne.n	1a586 <shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   1a5aa:	54b0      	strb	r0, [r6, r2]
	while (isspace((int) buff[i++])) {
   1a5ac:	b29f      	uxth	r7, r3
   1a5ae:	5df0      	ldrb	r0, [r6, r7]
   1a5b0:	fa16 f183 	uxtah	r1, r6, r3
   1a5b4:	f7ff fe37 	bl	1a226 <isspace>
   1a5b8:	3301      	adds	r3, #1
   1a5ba:	2800      	cmp	r0, #0
   1a5bc:	d1f6      	bne.n	1a5ac <shell_cmd_trim+0x3a>
	if (--i > 0) {
   1a5be:	2f00      	cmp	r7, #0
   1a5c0:	d0dd      	beq.n	1a57e <shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   1a5c2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a5c4:	4630      	mov	r0, r6
   1a5c6:	3301      	adds	r3, #1
   1a5c8:	1bda      	subs	r2, r3, r7
   1a5ca:	f000 fe55 	bl	1b278 <memmove>
		*buff_len = *buff_len - i;
   1a5ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1a5d0:	1bdb      	subs	r3, r3, r7
   1a5d2:	8663      	strh	r3, [r4, #50]	; 0x32
   1a5d4:	e7d3      	b.n	1a57e <shell_cmd_trim+0xc>

0001a5d6 <shell_raw_fprintf>:
{
   1a5d6:	b40e      	push	{r1, r2, r3}
   1a5d8:	b503      	push	{r0, r1, lr}
   1a5da:	aa03      	add	r2, sp, #12
   1a5dc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a5e0:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a5e2:	f7f7 fa4d 	bl	11a80 <shell_fprintf_fmt>
}
   1a5e6:	b002      	add	sp, #8
   1a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
   1a5ec:	b003      	add	sp, #12
   1a5ee:	4770      	bx	lr

0001a5f0 <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a5f0:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   1a5f2:	b538      	push	{r3, r4, r5, lr}
   1a5f4:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a5f6:	6810      	ldr	r0, [r2, #0]
   1a5f8:	8e55      	ldrh	r5, [r2, #50]	; 0x32
	return str == NULL ? 0U : (uint16_t)strlen(str);
   1a5fa:	b110      	cbz	r0, 1a602 <full_line_cmd.isra.0+0x12>
   1a5fc:	f000 fe0a 	bl	1b214 <strlen>
   1a600:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a602:	6822      	ldr	r2, [r4, #0]
	return ((shell->ctx->cmd_buff_len + shell_strlen(shell->ctx->prompt))
   1a604:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a606:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1a608:	fbb3 f0f2 	udiv	r0, r3, r2
   1a60c:	fb02 3010 	mls	r0, r2, r0, r3
}
   1a610:	fab0 f080 	clz	r0, r0
   1a614:	0940      	lsrs	r0, r0, #5
   1a616:	bd38      	pop	{r3, r4, r5, pc}

0001a618 <shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a618:	6882      	ldr	r2, [r0, #8]
{
   1a61a:	b538      	push	{r3, r4, r5, lr}
   1a61c:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a61e:	6810      	ldr	r0, [r2, #0]
   1a620:	8e95      	ldrh	r5, [r2, #52]	; 0x34
   1a622:	b110      	cbz	r0, 1a62a <shell_cursor_in_empty_line+0x12>
   1a624:	f000 fdf6 	bl	1b214 <strlen>
   1a628:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a62a:	68a2      	ldr	r2, [r4, #8]
	return ((shell->ctx->cmd_buff_pos + shell_strlen(shell->ctx->prompt))
   1a62c:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   1a62e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1a630:	fbb3 f0f2 	udiv	r0, r3, r2
   1a634:	fb02 3010 	mls	r0, r2, r0, r3
}
   1a638:	fab0 f080 	clz	r0, r0
   1a63c:	0940      	lsrs	r0, r0, #5
   1a63e:	bd38      	pop	{r3, r4, r5, pc}

0001a640 <shell_op_cursor_move>:
{
   1a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a642:	4604      	mov	r4, r0
   1a644:	460d      	mov	r5, r1
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   1a646:	6880      	ldr	r0, [r0, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1a648:	8e81      	ldrh	r1, [r0, #52]	; 0x34
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1a64a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1a64c:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1a64e:	440d      	add	r5, r1
	shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1a650:	f7ff fe13 	bl	1a27a <shell_multiline_data_calc>
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   1a654:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   1a656:	b2ad      	uxth	r5, r5
	row_span = row_span_with_buffer_offsets_get(&shell->ctx->vt100_ctx.cons,
   1a658:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a65a:	462a      	mov	r2, r5
   1a65c:	3020      	adds	r0, #32
   1a65e:	f7ff fe01 	bl	1a264 <row_span_with_buffer_offsets_get>
   1a662:	4607      	mov	r7, r0
						    &shell->ctx->vt100_ctx.cons,
   1a664:	68a0      	ldr	r0, [r4, #8]
	col_span = column_span_with_buffer_offsets_get(
   1a666:	462a      	mov	r2, r5
   1a668:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a66a:	3020      	adds	r0, #32
   1a66c:	f7ff fdeb 	bl	1a246 <column_span_with_buffer_offsets_get>
   1a670:	4606      	mov	r6, r0
	shell_op_cursor_vert_move(shell, -row_span);
   1a672:	4279      	negs	r1, r7
   1a674:	4620      	mov	r0, r4
   1a676:	f7f7 fa45 	bl	11b04 <shell_op_cursor_vert_move>
	shell_op_cursor_horiz_move(shell, col_span);
   1a67a:	4631      	mov	r1, r6
   1a67c:	4620      	mov	r0, r4
   1a67e:	f7f7 fa51 	bl	11b24 <shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   1a682:	68a3      	ldr	r3, [r4, #8]
   1a684:	869d      	strh	r5, [r3, #52]	; 0x34
}
   1a686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a688 <shell_op_cursor_word_move>:
{
   1a688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (val < 0) {
   1a68c:	1e0c      	subs	r4, r1, #0
{
   1a68e:	4606      	mov	r6, r0
	if (val < 0) {
   1a690:	da32      	bge.n	1a6f8 <shell_op_cursor_word_move+0x70>
		sign = -1;
   1a692:	f04f 35ff 	mov.w	r5, #4294967295
		val = -val;
   1a696:	4264      	negs	r4, r4
   1a698:	b224      	sxth	r4, r4
		sign = -1;
   1a69a:	b2af      	uxth	r7, r5
   1a69c:	e022      	b.n	1a6e4 <shell_op_cursor_word_move+0x5c>
		shift = shift_calc(shell->ctx->cmd_buff,
   1a69e:	68b3      	ldr	r3, [r6, #8]
	bool found = false;
   1a6a0:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   1a6a2:	f8b3 e034 	ldrh.w	lr, [r3, #52]	; 0x34
   1a6a6:	f8b3 9032 	ldrh.w	r9, [r3, #50]	; 0x32
   1a6aa:	f103 0838 	add.w	r8, r3, #56	; 0x38
   1a6ae:	4673      	mov	r3, lr
		idx = pos + ret * sign;
   1a6b0:	eba3 010e 	sub.w	r1, r3, lr
   1a6b4:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   1a6b6:	b90b      	cbnz	r3, 1a6bc <shell_op_cursor_word_move+0x34>
   1a6b8:	1c6a      	adds	r2, r5, #1
   1a6ba:	d010      	beq.n	1a6de <shell_op_cursor_word_move+0x56>
   1a6bc:	4599      	cmp	r9, r3
   1a6be:	d101      	bne.n	1a6c4 <shell_op_cursor_word_move+0x3c>
		    ((idx == len) && (sign > 0))) {
   1a6c0:	2d01      	cmp	r5, #1
   1a6c2:	d00c      	beq.n	1a6de <shell_op_cursor_word_move+0x56>
		if (isalnum((int)str[idx]) != 0) {
   1a6c4:	f818 2003 	ldrb.w	r2, [r8, r3]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1a6c8:	f042 0c20 	orr.w	ip, r2, #32
   1a6cc:	f1ac 0c61 	sub.w	ip, ip, #97	; 0x61
				(int)'z') ? (chr - 32) : (chr));
}

static inline int isalnum(int chr)
{
	return (int)(isalpha(chr) || isdigit(chr));
   1a6d0:	f1bc 0f19 	cmp.w	ip, #25
   1a6d4:	d90c      	bls.n	1a6f0 <shell_op_cursor_word_move+0x68>
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1a6d6:	3a30      	subs	r2, #48	; 0x30
	return (int)(isalpha(chr) || isdigit(chr));
   1a6d8:	2a09      	cmp	r2, #9
   1a6da:	d909      	bls.n	1a6f0 <shell_op_cursor_word_move+0x68>
			if (found) {
   1a6dc:	b148      	cbz	r0, 1a6f2 <shell_op_cursor_word_move+0x6a>
		shell_op_cursor_move(shell, sign * shift);
   1a6de:	4630      	mov	r0, r6
   1a6e0:	f7ff ffae 	bl	1a640 <shell_op_cursor_move>
	while (val--) {
   1a6e4:	3c01      	subs	r4, #1
   1a6e6:	b224      	sxth	r4, r4
   1a6e8:	1c63      	adds	r3, r4, #1
   1a6ea:	d1d8      	bne.n	1a69e <shell_op_cursor_word_move+0x16>
}
   1a6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   1a6f0:	2001      	movs	r0, #1
	while (1) {
   1a6f2:	443b      	add	r3, r7
   1a6f4:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   1a6f6:	e7db      	b.n	1a6b0 <shell_op_cursor_word_move+0x28>
		sign = 1;
   1a6f8:	2501      	movs	r5, #1
   1a6fa:	e7ce      	b.n	1a69a <shell_op_cursor_word_move+0x12>

0001a6fc <shell_op_cursor_home_move>:
	shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   1a6fc:	6883      	ldr	r3, [r0, #8]
   1a6fe:	8e99      	ldrh	r1, [r3, #52]	; 0x34
   1a700:	4249      	negs	r1, r1
   1a702:	b209      	sxth	r1, r1
   1a704:	f7ff bf9c 	b.w	1a640 <shell_op_cursor_move>

0001a708 <shell_op_cursor_end_move>:
	shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   1a708:	6883      	ldr	r3, [r0, #8]
   1a70a:	8e59      	ldrh	r1, [r3, #50]	; 0x32
   1a70c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a70e:	1ac9      	subs	r1, r1, r3
   1a710:	b209      	sxth	r1, r1
   1a712:	f7ff bf95 	b.w	1a640 <shell_op_cursor_move>

0001a716 <shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   1a716:	6883      	ldr	r3, [r0, #8]
   1a718:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a71a:	b11b      	cbz	r3, 1a724 <shell_op_left_arrow+0xe>
		shell_op_cursor_move(shell, -1);
   1a71c:	f04f 31ff 	mov.w	r1, #4294967295
   1a720:	f7ff bf8e 	b.w	1a640 <shell_op_cursor_move>
}
   1a724:	4770      	bx	lr

0001a726 <shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   1a726:	6883      	ldr	r3, [r0, #8]
   1a728:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a72a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   1a72c:	429a      	cmp	r2, r3
   1a72e:	d202      	bcs.n	1a736 <shell_op_right_arrow+0x10>
		shell_op_cursor_move(shell, 1);
   1a730:	2101      	movs	r1, #1
   1a732:	f7ff bf85 	b.w	1a640 <shell_op_cursor_move>
}
   1a736:	4770      	bx	lr

0001a738 <shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   1a738:	6883      	ldr	r3, [r0, #8]
   1a73a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a73c:	865a      	strh	r2, [r3, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   1a73e:	4413      	add	r3, r2
   1a740:	2200      	movs	r2, #0
   1a742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	clear_eos(shell);
   1a746:	6940      	ldr	r0, [r0, #20]
   1a748:	f7f7 b9d4 	b.w	11af4 <clear_eos.isra.0>

0001a74c <shell_cmd_line_erase>:
{
   1a74c:	b510      	push	{r4, lr}
   1a74e:	4604      	mov	r4, r0
	shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1a750:	6880      	ldr	r0, [r0, #8]
   1a752:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1a754:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1a756:	3020      	adds	r0, #32
   1a758:	f7ff fd8f 	bl	1a27a <shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   1a75c:	68a3      	ldr	r3, [r4, #8]
	shell_op_cursor_horiz_move(shell,
   1a75e:	4620      	mov	r0, r4
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   1a760:	8c19      	ldrh	r1, [r3, #32]
	shell_op_cursor_horiz_move(shell,
   1a762:	f1c1 0101 	rsb	r1, r1, #1
   1a766:	f7f7 f9dd 	bl	11b24 <shell_op_cursor_horiz_move>
	shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   1a76a:	68a3      	ldr	r3, [r4, #8]
   1a76c:	4620      	mov	r0, r4
   1a76e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   1a770:	3901      	subs	r1, #1
   1a772:	f7f7 f9c7 	bl	11b04 <shell_op_cursor_vert_move>
	clear_eos(shell);
   1a776:	6960      	ldr	r0, [r4, #20]
}
   1a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	clear_eos(shell);
   1a77c:	f7f7 b9ba 	b.w	11af4 <clear_eos.isra.0>

0001a780 <shell_write>:
{
   1a780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a784:	4605      	mov	r5, r0
   1a786:	4688      	mov	r8, r1
   1a788:	4614      	mov	r4, r2
	size_t offset = 0;
   1a78a:	2700      	movs	r7, #0
	while (length) {
   1a78c:	b914      	cbnz	r4, 1a794 <shell_write+0x14>
}
   1a78e:	b002      	add	sp, #8
   1a790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		int err = shell->iface->api->write(shell->iface,
   1a794:	6868      	ldr	r0, [r5, #4]
   1a796:	4622      	mov	r2, r4
   1a798:	6803      	ldr	r3, [r0, #0]
   1a79a:	eb08 0107 	add.w	r1, r8, r7
   1a79e:	68de      	ldr	r6, [r3, #12]
   1a7a0:	ab01      	add	r3, sp, #4
   1a7a2:	47b0      	blx	r6
		offset += tmp_cnt;
   1a7a4:	9e01      	ldr	r6, [sp, #4]
   1a7a6:	4437      	add	r7, r6
		length -= tmp_cnt;
   1a7a8:	1ba4      	subs	r4, r4, r6
		if (tmp_cnt == 0 &&
   1a7aa:	2e00      	cmp	r6, #0
   1a7ac:	d1ee      	bne.n	1a78c <shell_write+0xc>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   1a7ae:	68a8      	ldr	r0, [r5, #8]
   1a7b0:	7903      	ldrb	r3, [r0, #4]
		if (tmp_cnt == 0 &&
   1a7b2:	2b03      	cmp	r3, #3
   1a7b4:	d0ea      	beq.n	1a78c <shell_write+0xc>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   1a7b6:	2b02      	cmp	r3, #2
   1a7b8:	d80c      	bhi.n	1a7d4 <shell_write+0x54>
	return z_impl_k_poll(events, num_events, timeout);
   1a7ba:	f04f 32ff 	mov.w	r2, #4294967295
   1a7be:	f04f 33ff 	mov.w	r3, #4294967295
   1a7c2:	2101      	movs	r1, #1
   1a7c4:	f500 7036 	add.w	r0, r0, #728	; 0x2d8
   1a7c8:	f7fb fa84 	bl	15cd4 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   1a7cc:	68ab      	ldr	r3, [r5, #8]
   1a7ce:	f8c3 6294 	str.w	r6, [r3, #660]	; 0x294
   1a7d2:	e7db      	b.n	1a78c <shell_write+0xc>
	return shell->ctx->internal.flags.tx_rdy == 1;
   1a7d4:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
		while (!flag_tx_rdy_get(shell)) {
   1a7d8:	06db      	lsls	r3, r3, #27
   1a7da:	d5fb      	bpl.n	1a7d4 <shell_write+0x54>
	shell->ctx->internal.flags.tx_rdy = val ? 1 : 0;
   1a7dc:	f8d0 3258 	ldr.w	r3, [r0, #600]	; 0x258
   1a7e0:	f36f 1304 	bfc	r3, #4, #1
   1a7e4:	f8c0 3258 	str.w	r3, [r0, #600]	; 0x258
}
   1a7e8:	e7d0      	b.n	1a78c <shell_write+0xc>

0001a7ea <shell_print_stream>:
	shell_write((const struct shell *) user_ctx, data, data_len);
   1a7ea:	f7ff bfc9 	b.w	1a780 <shell_write>

0001a7ee <shell_internal_vfprintf>:

void shell_internal_vfprintf(const struct shell *shell,
			     enum shell_vt100_color color, const char *fmt,
			     va_list args)
{
   1a7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a7f0:	460f      	mov	r7, r1
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
	    shell->ctx->internal.flags.use_colors &&
   1a7f2:	6881      	ldr	r1, [r0, #8]
{
   1a7f4:	461e      	mov	r6, r3
	    shell->ctx->internal.flags.use_colors &&
   1a7f6:	f8d1 3258 	ldr.w	r3, [r1, #600]	; 0x258
{
   1a7fa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1a7fc:	079b      	lsls	r3, r3, #30
{
   1a7fe:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   1a800:	d517      	bpl.n	1a832 <shell_internal_vfprintf+0x44>
	    shell->ctx->internal.flags.use_colors &&
   1a802:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
   1a806:	42bb      	cmp	r3, r7
   1a808:	d013      	beq.n	1a832 <shell_internal_vfprintf+0x44>
			   enum shell_vt100_color color);

static inline void shell_vt100_colors_store(const struct shell *shell,
					    struct shell_vt100_colors *color)
{
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   1a80a:	2202      	movs	r2, #2
   1a80c:	312e      	adds	r1, #46	; 0x2e
   1a80e:	a801      	add	r0, sp, #4
   1a810:	f000 fd49 	bl	1b2a6 <memcpy>
	    (color != shell->ctx->vt100_ctx.col.col)) {
		struct shell_vt100_colors col;

		shell_vt100_colors_store(shell, &col);
		shell_vt100_color_set(shell, color);
   1a814:	4639      	mov	r1, r7
   1a816:	4620      	mov	r0, r4
   1a818:	f7f7 f9da 	bl	11bd0 <shell_vt100_color_set>

		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1a81c:	4629      	mov	r1, r5
   1a81e:	6960      	ldr	r0, [r4, #20]
   1a820:	4632      	mov	r2, r6
   1a822:	f7f7 f92d 	bl	11a80 <shell_fprintf_fmt>

		shell_vt100_colors_restore(shell, &col);
   1a826:	4620      	mov	r0, r4
   1a828:	a901      	add	r1, sp, #4
   1a82a:	f7f7 f9f5 	bl	11c18 <shell_vt100_colors_restore>
	} else {
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
	}
}
   1a82e:	b003      	add	sp, #12
   1a830:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   1a832:	4632      	mov	r2, r6
   1a834:	4629      	mov	r1, r5
   1a836:	6960      	ldr	r0, [r4, #20]
   1a838:	f7f7 f922 	bl	11a80 <shell_fprintf_fmt>
}
   1a83c:	e7f7      	b.n	1a82e <shell_internal_vfprintf+0x40>

0001a83e <shell_internal_fprintf>:

void shell_internal_fprintf(const struct shell *shell,
			    enum shell_vt100_color color,
			    const char *fmt, ...)
{
   1a83e:	b40c      	push	{r2, r3}
   1a840:	b507      	push	{r0, r1, r2, lr}
   1a842:	ab04      	add	r3, sp, #16
   1a844:	f853 2b04 	ldr.w	r2, [r3], #4
	__ASSERT_NO_MSG(shell->fprintf_ctx);
	__ASSERT_NO_MSG(fmt);

	va_list args;

	va_start(args, fmt);
   1a848:	9301      	str	r3, [sp, #4]
	shell_internal_vfprintf(shell, color, fmt, args);
   1a84a:	f7ff ffd0 	bl	1a7ee <shell_internal_vfprintf>
	va_end(args);
}
   1a84e:	b003      	add	sp, #12
   1a850:	f85d eb04 	ldr.w	lr, [sp], #4
   1a854:	b002      	add	sp, #8
   1a856:	4770      	bx	lr

0001a858 <data_insert>:
{
   1a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a85c:	6886      	ldr	r6, [r0, #8]
{
   1a85e:	4607      	mov	r7, r0
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a860:	8e75      	ldrh	r5, [r6, #50]	; 0x32
{
   1a862:	4688      	mov	r8, r1
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1a864:	18ab      	adds	r3, r5, r2
   1a866:	2bff      	cmp	r3, #255	; 0xff
{
   1a868:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1a86a:	dc1f      	bgt.n	1a8ac <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a86c:	8eb3      	ldrh	r3, [r6, #52]	; 0x34
   1a86e:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   1a870:	3338      	adds	r3, #56	; 0x38
   1a872:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a874:	b2ad      	uxth	r5, r5
	memmove(curr_pos + len, curr_pos, after);
   1a876:	462a      	mov	r2, r5
   1a878:	4631      	mov	r1, r6
   1a87a:	1930      	adds	r0, r6, r4
   1a87c:	f000 fcfc 	bl	1b278 <memmove>
	memcpy(curr_pos, data, len);
   1a880:	4622      	mov	r2, r4
   1a882:	4641      	mov	r1, r8
   1a884:	4630      	mov	r0, r6
   1a886:	f000 fd0e 	bl	1b2a6 <memcpy>
	shell->ctx->cmd_buff_len += len;
   1a88a:	68ba      	ldr	r2, [r7, #8]
   1a88c:	8e53      	ldrh	r3, [r2, #50]	; 0x32
   1a88e:	4423      	add	r3, r4
   1a890:	b29b      	uxth	r3, r3
   1a892:	8653      	strh	r3, [r2, #50]	; 0x32
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   1a894:	4413      	add	r3, r2
   1a896:	2200      	movs	r2, #0
   1a898:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (!flag_echo_get(shell)) {
   1a89c:	68bb      	ldr	r3, [r7, #8]
	return shell->ctx->internal.flags.echo == 1;
   1a89e:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
   1a8a2:	0749      	lsls	r1, r1, #29
   1a8a4:	d404      	bmi.n	1a8b0 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   1a8a6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   1a8a8:	4414      	add	r4, r2
   1a8aa:	869c      	strh	r4, [r3, #52]	; 0x34
}
   1a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   1a8b0:	4629      	mov	r1, r5
   1a8b2:	4638      	mov	r0, r7
}
   1a8b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   1a8b8:	f7f7 ba28 	b.w	11d0c <reprint_from_cursor>

0001a8bc <shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   1a8bc:	f7ff bfcc 	b.w	1a858 <data_insert>

0001a8c0 <shell_op_char_delete>:
{
   1a8c0:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a8c2:	6883      	ldr	r3, [r0, #8]
{
   1a8c4:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   1a8c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
   1a8c8:	8e98      	ldrh	r0, [r3, #52]	; 0x34
   1a8ca:	1a24      	subs	r4, r4, r0
   1a8cc:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   1a8ce:	b18c      	cbz	r4, 1a8f4 <shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   1a8d0:	3038      	adds	r0, #56	; 0x38
   1a8d2:	4418      	add	r0, r3
	memmove(str, str + 1, diff);
   1a8d4:	4622      	mov	r2, r4
   1a8d6:	1c41      	adds	r1, r0, #1
   1a8d8:	f000 fcce 	bl	1b278 <memmove>
	--shell->ctx->cmd_buff_len;
   1a8dc:	68aa      	ldr	r2, [r5, #8]
	reprint_from_cursor(shell, --diff, true);
   1a8de:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   1a8e0:	8e53      	ldrh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   1a8e2:	4628      	mov	r0, r5
	--shell->ctx->cmd_buff_len;
   1a8e4:	3b01      	subs	r3, #1
   1a8e6:	8653      	strh	r3, [r2, #50]	; 0x32
	reprint_from_cursor(shell, --diff, true);
   1a8e8:	b289      	uxth	r1, r1
   1a8ea:	2201      	movs	r2, #1
}
   1a8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   1a8f0:	f7f7 ba0c 	b.w	11d0c <reprint_from_cursor>
}
   1a8f4:	bd38      	pop	{r3, r4, r5, pc}

0001a8f6 <shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   1a8f6:	6883      	ldr	r3, [r0, #8]
{
   1a8f8:	b510      	push	{r4, lr}
	if ((shell->ctx->cmd_buff_len == 0) ||
   1a8fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
{
   1a8fc:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   1a8fe:	b152      	cbz	r2, 1a916 <shell_op_char_backspace+0x20>
   1a900:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   1a902:	b143      	cbz	r3, 1a916 <shell_op_char_backspace+0x20>
	shell_op_cursor_move(shell, -1);
   1a904:	f04f 31ff 	mov.w	r1, #4294967295
   1a908:	f7ff fe9a 	bl	1a640 <shell_op_cursor_move>
	shell_op_char_delete(shell);
   1a90c:	4620      	mov	r0, r4
}
   1a90e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	shell_op_char_delete(shell);
   1a912:	f7ff bfd5 	b.w	1a8c0 <shell_op_char_delete>
}
   1a916:	bd10      	pop	{r4, pc}

0001a918 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   1a918:	6883      	ldr	r3, [r0, #8]
   1a91a:	6a1b      	ldr	r3, [r3, #32]
   1a91c:	b103      	cbz	r3, 1a920 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   1a91e:	4718      	bx	r3
}
   1a920:	4770      	bx	lr

0001a922 <uninit>:
{
   1a922:	b508      	push	{r3, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   1a924:	6843      	ldr	r3, [r0, #4]
   1a926:	681b      	ldr	r3, [r3, #0]
   1a928:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   1a92a:	6883      	ldr	r3, [r0, #8]
   1a92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a92e:	b103      	cbz	r3, 1a932 <uninit+0x10>
		api->irq_rx_disable(dev);
   1a930:	4798      	blx	r3
}
   1a932:	2000      	movs	r0, #0
   1a934:	bd08      	pop	{r3, pc}

0001a936 <read>:
{
   1a936:	b510      	push	{r4, lr}
   1a938:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   1a93a:	6843      	ldr	r3, [r0, #4]
   1a93c:	68d8      	ldr	r0, [r3, #12]
   1a93e:	f7ff f819 	bl	19974 <ring_buf_get>
   1a942:	6020      	str	r0, [r4, #0]
}
   1a944:	2000      	movs	r0, #0
   1a946:	bd10      	pop	{r4, pc}

0001a948 <write>:
{
   1a948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   1a94c:	6845      	ldr	r5, [r0, #4]
{
   1a94e:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   1a950:	682b      	ldr	r3, [r5, #0]
{
   1a952:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1a954:	7c1b      	ldrb	r3, [r3, #16]
{
   1a956:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   1a958:	b153      	cbz	r3, 1a970 <write+0x28>
   1a95a:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   1a95e:	4544      	cmp	r4, r8
   1a960:	682b      	ldr	r3, [r5, #0]
   1a962:	d11c      	bne.n	1a99e <write+0x56>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1a964:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1a968:	2001      	movs	r0, #1
		*cnt = length;
   1a96a:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1a96c:	4790      	blx	r2
   1a96e:	e013      	b.n	1a998 <write+0x50>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   1a970:	68a8      	ldr	r0, [r5, #8]
   1a972:	f7fe ff95 	bl	198a0 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a976:	2101      	movs	r1, #1
   1a978:	682b      	ldr	r3, [r5, #0]
   1a97a:	6030      	str	r0, [r6, #0]
   1a97c:	330c      	adds	r3, #12
   1a97e:	e8d3 2fef 	ldaex	r2, [r3]
   1a982:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1a986:	2800      	cmp	r0, #0
   1a988:	d1f9      	bne.n	1a97e <write+0x36>
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   1a98a:	b92a      	cbnz	r2, 1a998 <write+0x50>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   1a98c:	682b      	ldr	r3, [r5, #0]
   1a98e:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable) {
   1a990:	6883      	ldr	r3, [r0, #8]
   1a992:	69db      	ldr	r3, [r3, #28]
   1a994:	b103      	cbz	r3, 1a998 <write+0x50>
		api->irq_tx_enable(dev);
   1a996:	4798      	blx	r3
}
   1a998:	2000      	movs	r0, #0
   1a99a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   1a99e:	6818      	ldr	r0, [r3, #0]
   1a9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   1a9a4:	6883      	ldr	r3, [r0, #8]
   1a9a6:	685b      	ldr	r3, [r3, #4]
   1a9a8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1a9aa:	e7d8      	b.n	1a95e <write+0x16>

0001a9ac <enable>:
{
   1a9ac:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   1a9ae:	6843      	ldr	r3, [r0, #4]
   1a9b0:	681b      	ldr	r3, [r3, #0]
   1a9b2:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   1a9b4:	b111      	cbz	r1, 1a9bc <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   1a9b6:	6818      	ldr	r0, [r3, #0]
   1a9b8:	f7ff ffae 	bl	1a918 <z_impl_uart_irq_tx_disable>
}
   1a9bc:	2000      	movs	r0, #0
   1a9be:	bd08      	pop	{r3, pc}

0001a9c0 <shell_raw_fprintf>:
{
   1a9c0:	b40e      	push	{r1, r2, r3}
   1a9c2:	b503      	push	{r0, r1, lr}
   1a9c4:	aa03      	add	r2, sp, #12
   1a9c6:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1a9ca:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1a9cc:	f7f7 f858 	bl	11a80 <shell_fprintf_fmt>
}
   1a9d0:	b002      	add	sp, #8
   1a9d2:	f85d eb04 	ldr.w	lr, [sp], #4
   1a9d6:	b003      	add	sp, #12
   1a9d8:	4770      	bx	lr

0001a9da <cmd_bacskpace_mode_backspace>:
	flag_mode_delete_set(shell, false);
   1a9da:	6883      	ldr	r3, [r0, #8]
}
   1a9dc:	2000      	movs	r0, #0
	shell->ctx->internal.flags.mode_delete = val ? 1 : 0;
   1a9de:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1a9e2:	f36f 1245 	bfc	r2, #5, #1
   1a9e6:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1a9ea:	4770      	bx	lr

0001a9ec <cmd_bacskpace_mode_delete>:
	flag_mode_delete_set(shell, true);
   1a9ec:	6882      	ldr	r2, [r0, #8]
}
   1a9ee:	2000      	movs	r0, #0
   1a9f0:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1a9f4:	f043 0320 	orr.w	r3, r3, #32
   1a9f8:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   1a9fc:	4770      	bx	lr

0001a9fe <cmd_colors_off>:
	flag_use_colors_set(shell, false);
   1a9fe:	6883      	ldr	r3, [r0, #8]
}
   1aa00:	2000      	movs	r0, #0
	shell->ctx->internal.flags.use_colors = val ? 1 : 0;
   1aa02:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1aa06:	f36f 0241 	bfc	r2, #1, #1
   1aa0a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1aa0e:	4770      	bx	lr

0001aa10 <cmd_colors_on>:
	flag_use_colors_set(shell, true);
   1aa10:	6882      	ldr	r2, [r0, #8]
}
   1aa12:	2000      	movs	r0, #0
   1aa14:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1aa18:	f043 0302 	orr.w	r3, r3, #2
   1aa1c:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   1aa20:	4770      	bx	lr

0001aa22 <cmd_echo_off>:
	flag_echo_set(shell, false);
   1aa22:	6883      	ldr	r3, [r0, #8]
}
   1aa24:	2000      	movs	r0, #0
	shell->ctx->internal.flags.echo = val ? 1 : 0;
   1aa26:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
   1aa2a:	f36f 0282 	bfc	r2, #2, #1
   1aa2e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
   1aa32:	4770      	bx	lr

0001aa34 <cmd_echo_on>:
	flag_echo_set(shell, true);
   1aa34:	6882      	ldr	r2, [r0, #8]
}
   1aa36:	2000      	movs	r0, #0
   1aa38:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
   1aa3c:	f043 0304 	orr.w	r3, r3, #4
   1aa40:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
   1aa44:	4770      	bx	lr

0001aa46 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   1aa46:	6983      	ldr	r3, [r0, #24]
   1aa48:	2000      	movs	r0, #0
   1aa4a:	6018      	str	r0, [r3, #0]
}
   1aa4c:	4770      	bx	lr

0001aa4e <shell_raw_fprintf>:
{
   1aa4e:	b40e      	push	{r1, r2, r3}
   1aa50:	b503      	push	{r0, r1, lr}
   1aa52:	aa03      	add	r2, sp, #12
   1aa54:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   1aa58:	9201      	str	r2, [sp, #4]
	shell_fprintf_fmt(ctx, fmt, args);
   1aa5a:	f7f7 f811 	bl	11a80 <shell_fprintf_fmt>
}
   1aa5e:	b002      	add	sp, #8
   1aa60:	f85d eb04 	ldr.w	lr, [sp], #4
   1aa64:	b003      	add	sp, #12
   1aa66:	4770      	bx	lr

0001aa68 <remove_from_tail.part.0>:
	memcpy(item->data, src, len);
	sys_dlist_prepend(&history->list, &item->dnode);
}

/* Returns true if element was removed. */
static bool remove_from_tail(struct shell_history *history)
   1aa68:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1aa6a:	6883      	ldr	r3, [r0, #8]

	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);

	total_len = offsetof(struct shell_history_item, data) +
			h_item->len + h_item->padding;
	ring_buf_get_finish(history->ring_buf, total_len);
   1aa6c:	6800      	ldr	r0, [r0, #0]
	node->prev->next = node->next;
   1aa6e:	e9d3 2100 	ldrd	r2, r1, [r3]
   1aa72:	600a      	str	r2, [r1, #0]
	node->next->prev = node->prev;
   1aa74:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   1aa76:	2200      	movs	r2, #0
			h_item->len + h_item->padding;
   1aa78:	8919      	ldrh	r1, [r3, #8]
	node->prev = NULL;
   1aa7a:	e9c3 2200 	strd	r2, r2, [r3]
   1aa7e:	895b      	ldrh	r3, [r3, #10]
   1aa80:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   1aa82:	310c      	adds	r1, #12
   1aa84:	f7fe ff47 	bl	19916 <ring_buf_get_finish>

	return true;
}
   1aa88:	2001      	movs	r0, #1
   1aa8a:	bd08      	pop	{r3, pc}

0001aa8c <shell_history_mode_exit>:
	history->current = NULL;
   1aa8c:	2300      	movs	r3, #0
   1aa8e:	60c3      	str	r3, [r0, #12]
}
   1aa90:	4770      	bx	lr

0001aa92 <shell_history_get>:
{
   1aa92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa94:	461f      	mov	r7, r3
	return list->head == list;
   1aa96:	4603      	mov	r3, r0
   1aa98:	f853 4f04 	ldr.w	r4, [r3, #4]!
   1aa9c:	4616      	mov	r6, r2
	if (sys_dlist_is_empty(&history->list)) {
   1aa9e:	429c      	cmp	r4, r3
   1aaa0:	d102      	bne.n	1aaa8 <shell_history_get+0x16>
		*len = 0U;
   1aaa2:	2000      	movs	r0, #0
   1aaa4:	8038      	strh	r0, [r7, #0]
}
   1aaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   1aaa8:	68c5      	ldr	r5, [r0, #12]
   1aaaa:	b9b1      	cbnz	r1, 1aada <shell_history_get+0x48>
		if (history->current == NULL) {
   1aaac:	2d00      	cmp	r5, #0
   1aaae:	d0f8      	beq.n	1aaa2 <shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   1aab0:	42ac      	cmp	r4, r5
   1aab2:	d102      	bne.n	1aaba <shell_history_get+0x28>
	history->current = l_item;
   1aab4:	2300      	movs	r3, #0
   1aab6:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   1aab8:	e7f3      	b.n	1aaa2 <shell_history_get+0x10>
   1aaba:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   1aabc:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   1aabe:	2c00      	cmp	r4, #0
   1aac0:	d0ef      	beq.n	1aaa2 <shell_history_get+0x10>
		memcpy(dst, h_item->data, h_item->len);
   1aac2:	8922      	ldrh	r2, [r4, #8]
   1aac4:	4630      	mov	r0, r6
   1aac6:	f104 010c 	add.w	r1, r4, #12
   1aaca:	f000 fbec 	bl	1b2a6 <memcpy>
		dst[*len] = '\0';
   1aace:	2200      	movs	r2, #0
		*len = h_item->len;
   1aad0:	8923      	ldrh	r3, [r4, #8]
		return true;
   1aad2:	2001      	movs	r0, #1
		*len = h_item->len;
   1aad4:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   1aad6:	54f2      	strb	r2, [r6, r3]
		return true;
   1aad8:	e7e5      	b.n	1aaa6 <shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   1aada:	2d00      	cmp	r5, #0
   1aadc:	d0ee      	beq.n	1aabc <shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   1aade:	6883      	ldr	r3, [r0, #8]
   1aae0:	42ab      	cmp	r3, r5
   1aae2:	d0e7      	beq.n	1aab4 <shell_history_get+0x22>
   1aae4:	682c      	ldr	r4, [r5, #0]
   1aae6:	e7e9      	b.n	1aabc <shell_history_get+0x2a>

0001aae8 <shell_history_purge>:

void shell_history_purge(struct shell_history *history)
{
   1aae8:	b538      	push	{r3, r4, r5, lr}
   1aaea:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   1aaec:	1d05      	adds	r5, r0, #4
   1aaee:	6863      	ldr	r3, [r4, #4]
   1aaf0:	42ab      	cmp	r3, r5
   1aaf2:	d004      	beq.n	1aafe <shell_history_purge+0x16>
   1aaf4:	4620      	mov	r0, r4
   1aaf6:	f7ff ffb7 	bl	1aa68 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   1aafa:	2800      	cmp	r0, #0
   1aafc:	d1f7      	bne.n	1aaee <shell_history_purge+0x6>
	}
}
   1aafe:	bd38      	pop	{r3, r4, r5, pc}

0001ab00 <shell_history_put>:

void shell_history_put(struct shell_history *history, uint8_t *line, size_t len)
{
   1ab00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1ab04:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   1ab06:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1ab0a:	f1c5 0800 	rsb	r8, r5, #0
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1ab0e:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1ab10:	f008 0803 	and.w	r8, r8, #3
	total_len += padding;
   1ab14:	4445      	add	r5, r8
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1ab16:	429d      	cmp	r5, r3
{
   1ab18:	4604      	mov	r4, r0
   1ab1a:	468a      	mov	sl, r1
   1ab1c:	4617      	mov	r7, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1ab1e:	d841      	bhi.n	1aba4 <shell_history_put+0xa4>
	history->current = NULL;
   1ab20:	2300      	movs	r3, #0
   1ab22:	60c3      	str	r3, [r0, #12]
		return;
	}

	shell_history_mode_exit(history);

	if (len == 0) {
   1ab24:	2a00      	cmp	r2, #0
   1ab26:	d03d      	beq.n	1aba4 <shell_history_put+0xa4>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   1ab28:	f100 0904 	add.w	r9, r0, #4
	return list->head == list;
   1ab2c:	6840      	ldr	r0, [r0, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ab2e:	4581      	cmp	r9, r0
   1ab30:	d12d      	bne.n	1ab8e <shell_history_put+0x8e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   1ab32:	9301      	str	r3, [sp, #4]
			add_to_head(history, h_item, line, len, padding);
			ring_buf_put_finish(history->ring_buf, claim_len);
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
   1ab34:	f04f 0b00 	mov.w	fp, #0
		claim_len = ring_buf_put_claim(history->ring_buf,
   1ab38:	462a      	mov	r2, r5
   1ab3a:	6820      	ldr	r0, [r4, #0]
   1ab3c:	a901      	add	r1, sp, #4
   1ab3e:	f7fe fe86 	bl	1984e <ring_buf_put_claim>
		if (claim_len < total_len) {
   1ab42:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   1ab44:	4606      	mov	r6, r0
		if (claim_len < total_len) {
   1ab46:	d930      	bls.n	1abaa <shell_history_put+0xaa>
				ring_buf_put_claim(history->ring_buf,
   1ab48:	462a      	mov	r2, r5
   1ab4a:	6820      	ldr	r0, [r4, #0]
   1ab4c:	a901      	add	r1, sp, #4
   1ab4e:	f7fe fe7e 	bl	1984e <ring_buf_put_claim>
			if (claim2_len == total_len) {
   1ab52:	4285      	cmp	r5, r0
   1ab54:	d12a      	bne.n	1abac <shell_history_put+0xac>
				ring_buf_put_finish(history->ring_buf,
   1ab56:	4631      	mov	r1, r6
   1ab58:	6820      	ldr	r0, [r4, #0]
				padding += claim_len;
   1ab5a:	44b0      	add	r8, r6
				ring_buf_put_finish(history->ring_buf,
   1ab5c:	f7fe fe93 	bl	19886 <ring_buf_put_finish>
				padding += claim_len;
   1ab60:	462e      	mov	r6, r5
   1ab62:	fa1f f888 	uxth.w	r8, r8
			add_to_head(history, h_item, line, len, padding);
   1ab66:	9d01      	ldr	r5, [sp, #4]
	memcpy(item->data, src, len);
   1ab68:	4651      	mov	r1, sl
   1ab6a:	463a      	mov	r2, r7
	item->len = len;
   1ab6c:	812f      	strh	r7, [r5, #8]
	item->padding = padding;
   1ab6e:	f8a5 800a 	strh.w	r8, [r5, #10]
	memcpy(item->data, src, len);
   1ab72:	f105 000c 	add.w	r0, r5, #12
   1ab76:	f000 fb96 	bl	1b2a6 <memcpy>
	node->next = list->head;
   1ab7a:	6863      	ldr	r3, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   1ab7c:	4631      	mov	r1, r6
	node->prev = list;
   1ab7e:	e9c5 3900 	strd	r3, r9, [r5]
   1ab82:	6820      	ldr	r0, [r4, #0]
	list->head->prev = node;
   1ab84:	605d      	str	r5, [r3, #4]
	list->head = node;
   1ab86:	6065      	str	r5, [r4, #4]
   1ab88:	f7fe fe7d 	bl	19886 <ring_buf_put_finish>
			break;
   1ab8c:	e00a      	b.n	1aba4 <shell_history_put+0xa4>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   1ab8e:	9001      	str	r0, [sp, #4]
	if (l_item &&
   1ab90:	2800      	cmp	r0, #0
   1ab92:	d0cf      	beq.n	1ab34 <shell_history_put+0x34>
	   (h_item->len == len) &&
   1ab94:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   1ab96:	4293      	cmp	r3, r2
   1ab98:	d1cc      	bne.n	1ab34 <shell_history_put+0x34>
	   (memcmp(h_item->data, line, len) == 0)) {
   1ab9a:	300c      	adds	r0, #12
   1ab9c:	f000 fb5c 	bl	1b258 <memcmp>
	   (h_item->len == len) &&
   1aba0:	2800      	cmp	r0, #0
   1aba2:	d1c7      	bne.n	1ab34 <shell_history_put+0x34>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   1aba4:	b003      	add	sp, #12
   1aba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   1abaa:	d0dc      	beq.n	1ab66 <shell_history_put+0x66>
		ring_buf_put_finish(history->ring_buf, 0);
   1abac:	2100      	movs	r1, #0
   1abae:	6820      	ldr	r0, [r4, #0]
   1abb0:	f7fe fe69 	bl	19886 <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   1abb4:	6863      	ldr	r3, [r4, #4]
   1abb6:	4599      	cmp	r9, r3
   1abb8:	d108      	bne.n	1abcc <shell_history_put+0xcc>
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
	buf->tail = 0;
	memset(&buf->misc, 0, sizeof(buf->misc));
   1abba:	2208      	movs	r2, #8
			ring_buf_reset(history->ring_buf);
   1abbc:	6820      	ldr	r0, [r4, #0]
   1abbe:	2100      	movs	r1, #0
	buf->tail = 0;
   1abc0:	e9c0 bb00 	strd	fp, fp, [r0]
	memset(&buf->misc, 0, sizeof(buf->misc));
   1abc4:	4410      	add	r0, r2
   1abc6:	f000 fb99 	bl	1b2fc <memset>
}
   1abca:	e7b5      	b.n	1ab38 <shell_history_put+0x38>
   1abcc:	4620      	mov	r0, r4
   1abce:	f7ff ff4b 	bl	1aa68 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   1abd2:	2800      	cmp	r0, #0
   1abd4:	d1b0      	bne.n	1ab38 <shell_history_put+0x38>
   1abd6:	e7f0      	b.n	1abba <shell_history_put+0xba>

0001abd8 <shell_history_init>:

void shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   1abd8:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   1abda:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   1abde:	2300      	movs	r3, #0
   1abe0:	60c3      	str	r3, [r0, #12]
}
   1abe2:	4770      	bx	lr

0001abe4 <msg_from_fifo.isra.0>:
	backend->control_block->dropped_cnt = 0;
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
	}
}

static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   1abe4:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   1abe6:	2200      	movs	r2, #0
   1abe8:	2300      	movs	r3, #0
   1abea:	4669      	mov	r1, sp
   1abec:	f7f9 ffe6 	bl	14bbc <z_impl_k_msgq_get>
	struct shell_log_backend_msg msg;
	int err;

	err = k_msgq_get(backend->msgq, &msg, K_NO_WAIT);

	return (err == 0) ? msg.msg : NULL;
   1abf0:	b918      	cbnz	r0, 1abfa <msg_from_fifo.isra.0+0x16>
   1abf2:	9800      	ldr	r0, [sp, #0]
}
   1abf4:	b003      	add	sp, #12
   1abf6:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   1abfa:	2000      	movs	r0, #0
   1abfc:	e7fa      	b.n	1abf4 <msg_from_fifo.isra.0+0x10>

0001abfe <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1abfe:	6843      	ldr	r3, [r0, #4]
   1ac00:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1ac02:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   1ac06:	e8d3 0fef 	ldaex	r0, [r3]
   1ac0a:	4408      	add	r0, r1
   1ac0c:	e8c3 0fec 	stlex	ip, r0, [r3]
   1ac10:	f1bc 0f00 	cmp.w	ip, #0
   1ac14:	d1f7      	bne.n	1ac06 <dropped+0x8>
   1ac16:	68d3      	ldr	r3, [r2, #12]
   1ac18:	e8d3 2fef 	ldaex	r2, [r3]
   1ac1c:	440a      	add	r2, r1
   1ac1e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1ac22:	2800      	cmp	r0, #0
   1ac24:	d1f8      	bne.n	1ac18 <dropped+0x1a>
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   1ac26:	4770      	bx	lr

0001ac28 <put>:
{
   1ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1ac2a:	6843      	ldr	r3, [r0, #4]
{
   1ac2c:	b087      	sub	sp, #28
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1ac2e:	681c      	ldr	r4, [r3, #0]
	log_msg_get(msg);
   1ac30:	4608      	mov	r0, r1
			shell->ctx->internal.flags.use_colors;
   1ac32:	68a3      	ldr	r3, [r4, #8]
{
   1ac34:	460d      	mov	r5, r1
			shell->ctx->internal.flags.use_colors;
   1ac36:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	log_msg_get(msg);
   1ac3a:	f7fe ffb1 	bl	19ba0 <log_msg_get>
	switch (shell->log_backend->control_block->state) {
   1ac3e:	69e3      	ldr	r3, [r4, #28]
			shell->ctx->internal.flags.use_colors;
   1ac40:	f3c6 0640 	ubfx	r6, r6, #1, #1
	switch (shell->log_backend->control_block->state) {
   1ac44:	68db      	ldr	r3, [r3, #12]
   1ac46:	791b      	ldrb	r3, [r3, #4]
   1ac48:	2b01      	cmp	r3, #1
   1ac4a:	d005      	beq.n	1ac58 <put+0x30>
   1ac4c:	2b03      	cmp	r3, #3
   1ac4e:	d065      	beq.n	1ad1c <put+0xf4>
		log_msg_put(msg);
   1ac50:	4628      	mov	r0, r5
   1ac52:	f7fe ffd0 	bl	19bf6 <log_msg_put>
}
   1ac56:	e05f      	b.n	1ad18 <put+0xf0>
	struct shell_log_backend_msg t_msg = {
   1ac58:	e9cd 5501 	strd	r5, r5, [sp, #4]
	return z_impl_k_uptime_ticks();
   1ac5c:	f000 ff1c 	bl	1ba98 <z_impl_k_uptime_ticks>
   1ac60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ac64:	460a      	mov	r2, r1
   1ac66:	fba0 0103 	umull	r0, r1, r0, r3
   1ac6a:	fb03 1102 	mla	r1, r3, r2, r1
   1ac6e:	0bc3      	lsrs	r3, r0, #15
   1ac70:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1ac74:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1ac78:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ac7c:	2100      	movs	r1, #0
	return (uint32_t)k_uptime_get();
   1ac7e:	9303      	str	r3, [sp, #12]
	err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   1ac80:	69e3      	ldr	r3, [r4, #28]
   1ac82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ac86:	691f      	ldr	r7, [r3, #16]
   1ac88:	685d      	ldr	r5, [r3, #4]
   1ac8a:	fbe6 0107 	umlal	r0, r1, r6, r7
   1ac8e:	2300      	movs	r3, #0
   1ac90:	f7f1 fb26 	bl	c2e0 <__aeabi_uldivmod>
   1ac94:	4602      	mov	r2, r0
   1ac96:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   1ac98:	4628      	mov	r0, r5
   1ac9a:	a902      	add	r1, sp, #8
   1ac9c:	f7f9 ff3a 	bl	14b14 <z_impl_k_msgq_put>
	switch (err) {
   1aca0:	f110 0f50 	cmn.w	r0, #80	; 0x50
   1aca4:	d001      	beq.n	1acaa <put+0x82>
   1aca6:	300b      	adds	r0, #11
   1aca8:	d130      	bne.n	1ad0c <put+0xe4>
	struct k_msgq *msgq = shell->log_backend->msgq;
   1acaa:	69e3      	ldr	r3, [r4, #28]
   1acac:	685e      	ldr	r6, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   1acae:	691f      	ldr	r7, [r3, #16]
	return z_impl_k_uptime_ticks();
   1acb0:	f000 fef2 	bl	1ba98 <z_impl_k_uptime_ticks>
   1acb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1acb8:	460a      	mov	r2, r1
   1acba:	fba0 0103 	umull	r0, r1, r0, r3
   1acbe:	fb03 1102 	mla	r1, r3, r2, r1
   1acc2:	0bc5      	lsrs	r5, r0, #15
   1acc4:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   1acc8:	4630      	mov	r0, r6
   1acca:	a904      	add	r1, sp, #16
   1accc:	f000 fcfa 	bl	1b6c4 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   1acd0:	b9a8      	cbnz	r0, 1acfe <put+0xd6>
   1acd2:	9b05      	ldr	r3, [sp, #20]
   1acd4:	1aeb      	subs	r3, r5, r3
   1acd6:	429f      	cmp	r7, r3
   1acd8:	d211      	bcs.n	1acfe <put+0xd6>
	return z_impl_k_msgq_get(msgq, data, timeout);
   1acda:	2300      	movs	r3, #0
   1acdc:	2200      	movs	r2, #0
   1acde:	a904      	add	r1, sp, #16
   1ace0:	4630      	mov	r0, r6
   1ace2:	f7f9 ff6b 	bl	14bbc <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   1ace6:	9804      	ldr	r0, [sp, #16]
   1ace8:	f7fe ff85 	bl	19bf6 <log_msg_put>
   1acec:	69a3      	ldr	r3, [r4, #24]
   1acee:	e8d3 2fef 	ldaex	r2, [r3]
   1acf2:	3201      	adds	r2, #1
   1acf4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1acf8:	2900      	cmp	r1, #0
   1acfa:	d0e5      	beq.n	1acc8 <put+0xa0>
   1acfc:	e7f7      	b.n	1acee <put+0xc6>
		err = k_msgq_put(shell->log_backend->msgq, &msg, K_NO_WAIT);
   1acfe:	69e3      	ldr	r3, [r4, #28]
   1ad00:	6858      	ldr	r0, [r3, #4]
	return z_impl_k_msgq_put(msgq, data, timeout);
   1ad02:	2200      	movs	r2, #0
   1ad04:	2300      	movs	r3, #0
   1ad06:	a901      	add	r1, sp, #4
   1ad08:	f7f9 ff04 	bl	14b14 <z_impl_k_msgq_put>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   1ad0c:	68a0      	ldr	r0, [r4, #8]
   1ad0e:	f500 701b 	add.w	r0, r0, #620	; 0x26c
	return z_impl_k_poll_signal_raise(signal, result);
   1ad12:	2100      	movs	r1, #0
   1ad14:	f7fb f83a 	bl	15d8c <z_impl_k_poll_signal_raise>
}
   1ad18:	b007      	add	sp, #28
   1ad1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_cmd_line_erase(shell);
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f7ff fd15 	bl	1a74c <shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   1ad22:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   1ad24:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   1ad26:	bf0c      	ite	eq
   1ad28:	220e      	moveq	r2, #14
   1ad2a:	220f      	movne	r2, #15
   1ad2c:	4629      	mov	r1, r5
   1ad2e:	6898      	ldr	r0, [r3, #8]
   1ad30:	f7f5 facc 	bl	102cc <log_output_msg_process>
	log_msg_put(msg);
   1ad34:	e78c      	b.n	1ac50 <put+0x28>

0001ad36 <shell_log_backend_output_func>:
{
   1ad36:	4613      	mov	r3, r2
   1ad38:	b510      	push	{r4, lr}
   1ad3a:	460c      	mov	r4, r1
	shell_print_stream(ctx, data, length);
   1ad3c:	460a      	mov	r2, r1
   1ad3e:	4601      	mov	r1, r0
   1ad40:	4618      	mov	r0, r3
   1ad42:	f7ff fd52 	bl	1a7ea <shell_print_stream>
}
   1ad46:	4620      	mov	r0, r4
   1ad48:	bd10      	pop	{r4, pc}

0001ad4a <shell_log_backend_enable>:
{
   1ad4a:	b538      	push	{r3, r4, r5, lr}
   1ad4c:	4604      	mov	r4, r0
   1ad4e:	460d      	mov	r5, r1
		log_backend_enable(backend->backend, ctx, init_log_level);
   1ad50:	6800      	ldr	r0, [r0, #0]
   1ad52:	f7f4 fef5 	bl	fb40 <log_backend_enable>
	backend->control_block->dropped_cnt = 0;
   1ad56:	2200      	movs	r2, #0
		log_output_ctx_set(backend->log_output, ctx);
   1ad58:	68a3      	ldr	r3, [r4, #8]
   1ad5a:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
   1ad5c:	605d      	str	r5, [r3, #4]
	backend->control_block->dropped_cnt = 0;
   1ad5e:	68e3      	ldr	r3, [r4, #12]
   1ad60:	601a      	str	r2, [r3, #0]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   1ad62:	2201      	movs	r2, #1
   1ad64:	711a      	strb	r2, [r3, #4]
}
   1ad66:	bd38      	pop	{r3, r4, r5, pc}

0001ad68 <shell_log_backend_disable>:
{
   1ad68:	b510      	push	{r4, lr}
   1ad6a:	4604      	mov	r4, r0
	while ((msg = msg_from_fifo(backend)) != NULL) {
   1ad6c:	6860      	ldr	r0, [r4, #4]
   1ad6e:	f7ff ff39 	bl	1abe4 <msg_from_fifo.isra.0>
   1ad72:	b930      	cbnz	r0, 1ad82 <shell_log_backend_disable+0x1a>
	log_backend_disable(backend->backend);
   1ad74:	6820      	ldr	r0, [r4, #0]
   1ad76:	f7fe fe62 	bl	19a3e <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   1ad7a:	2202      	movs	r2, #2
   1ad7c:	68e3      	ldr	r3, [r4, #12]
   1ad7e:	711a      	strb	r2, [r3, #4]
}
   1ad80:	bd10      	pop	{r4, pc}
		log_msg_put(msg);
   1ad82:	f7fe ff38 	bl	19bf6 <log_msg_put>
   1ad86:	e7f1      	b.n	1ad6c <shell_log_backend_disable+0x4>

0001ad88 <shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   1ad88:	6803      	ldr	r3, [r0, #0]
{
   1ad8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct shell *shell =
   1ad8e:	685b      	ldr	r3, [r3, #4]
{
   1ad90:	4605      	mov	r5, r0
	const struct shell *shell =
   1ad92:	681f      	ldr	r7, [r3, #0]
	struct log_msg *msg = msg_from_fifo(backend);
   1ad94:	6840      	ldr	r0, [r0, #4]
			shell->ctx->internal.flags.use_colors;
   1ad96:	68bb      	ldr	r3, [r7, #8]
   1ad98:	f8d3 6258 	ldr.w	r6, [r3, #600]	; 0x258
	struct log_msg *msg = msg_from_fifo(backend);
   1ad9c:	f7ff ff22 	bl	1abe4 <msg_from_fifo.isra.0>
			shell->ctx->internal.flags.use_colors;
   1ada0:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (!msg) {
   1ada4:	4604      	mov	r4, r0
   1ada6:	b358      	cbz	r0, 1ae00 <shell_log_backend_process+0x78>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ada8:	2200      	movs	r2, #0
   1adaa:	68eb      	ldr	r3, [r5, #12]
   1adac:	e8d3 8fef 	ldaex	r8, [r3]
   1adb0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1adb4:	2900      	cmp	r1, #0
   1adb6:	d1f9      	bne.n	1adac <shell_log_backend_process+0x24>
	if (dropped) {
   1adb8:	f1b8 0f00 	cmp.w	r8, #0
   1adbc:	d013      	beq.n	1ade6 <shell_log_backend_process+0x5e>
		if (colors) {
   1adbe:	b14e      	cbz	r6, 1add4 <shell_log_backend_process+0x4c>
	memcpy(color, &shell->ctx->vt100_ctx.col, sizeof(*color));
   1adc0:	68b9      	ldr	r1, [r7, #8]
   1adc2:	2202      	movs	r2, #2
   1adc4:	312e      	adds	r1, #46	; 0x2e
   1adc6:	a801      	add	r0, sp, #4
   1adc8:	f000 fa6d 	bl	1b2a6 <memcpy>
			shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   1adcc:	2102      	movs	r1, #2
   1adce:	4638      	mov	r0, r7
   1add0:	f7f6 fefe 	bl	11bd0 <shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   1add4:	4641      	mov	r1, r8
   1add6:	68a8      	ldr	r0, [r5, #8]
   1add8:	f7f5 faf4 	bl	103c4 <log_output_dropped_process>
		if (colors) {
   1addc:	b11e      	cbz	r6, 1ade6 <shell_log_backend_process+0x5e>
			shell_vt100_colors_restore(shell, &col);
   1adde:	4638      	mov	r0, r7
   1ade0:	a901      	add	r1, sp, #4
   1ade2:	f7f6 ff19 	bl	11c18 <shell_vt100_colors_restore>
	msg_process(shell->log_backend->log_output, msg, colors);
   1ade6:	69fb      	ldr	r3, [r7, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   1ade8:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   1adea:	6898      	ldr	r0, [r3, #8]
   1adec:	bf0c      	ite	eq
   1adee:	220e      	moveq	r2, #14
   1adf0:	220f      	movne	r2, #15
   1adf2:	4621      	mov	r1, r4
   1adf4:	f7f5 fa6a 	bl	102cc <log_output_msg_process>
	log_msg_put(msg);
   1adf8:	4620      	mov	r0, r4
   1adfa:	f7fe fefc 	bl	19bf6 <log_msg_put>
	return true;
   1adfe:	2001      	movs	r0, #1
}
   1ae00:	b002      	add	sp, #8
   1ae02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae06 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1ae06:	6843      	ldr	r3, [r0, #4]
{
   1ae08:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   1ae0a:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   1ae0c:	2101      	movs	r1, #1
   1ae0e:	6860      	ldr	r0, [r4, #4]
   1ae10:	6803      	ldr	r3, [r0, #0]
   1ae12:	689b      	ldr	r3, [r3, #8]
   1ae14:	4798      	blx	r3
	if (err == 0) {
   1ae16:	b9d0      	cbnz	r0, 1ae4e <panic+0x48>
		shell->log_backend->control_block->state =
   1ae18:	2203      	movs	r2, #3
   1ae1a:	69e3      	ldr	r3, [r4, #28]
   1ae1c:	68db      	ldr	r3, [r3, #12]
   1ae1e:	711a      	strb	r2, [r3, #4]
		shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   1ae20:	68a0      	ldr	r0, [r4, #8]
   1ae22:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1ae24:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   1ae26:	3020      	adds	r0, #32
   1ae28:	f7ff fa27 	bl	1a27a <shell_multiline_data_calc>
		shell_op_cursor_vert_move(shell, -1);
   1ae2c:	f04f 31ff 	mov.w	r1, #4294967295
   1ae30:	4620      	mov	r0, r4
   1ae32:	f7f6 fe67 	bl	11b04 <shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   1ae36:	68a3      	ldr	r3, [r4, #8]
		shell_op_cursor_horiz_move(shell,
   1ae38:	4620      	mov	r0, r4
					   -shell->ctx->vt100_ctx.cons.cur_x);
   1ae3a:	8c19      	ldrh	r1, [r3, #32]
		shell_op_cursor_horiz_move(shell,
   1ae3c:	4249      	negs	r1, r1
   1ae3e:	f7f6 fe71 	bl	11b24 <shell_op_cursor_horiz_move>
		while (shell_log_backend_process(shell->log_backend)) {
   1ae42:	69e0      	ldr	r0, [r4, #28]
   1ae44:	f7ff ffa0 	bl	1ad88 <shell_log_backend_process>
   1ae48:	2800      	cmp	r0, #0
   1ae4a:	d1fa      	bne.n	1ae42 <panic+0x3c>
}
   1ae4c:	bd10      	pop	{r4, pc}
		shell_log_backend_disable(shell->log_backend);
   1ae4e:	69e0      	ldr	r0, [r4, #28]
}
   1ae50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_log_backend_disable(shell->log_backend);
   1ae54:	f7ff bf88 	b.w	1ad68 <shell_log_backend_disable>

0001ae58 <shell_wildcard_character_exist>:
{
   1ae58:	b510      	push	{r4, lr}
   1ae5a:	4604      	mov	r4, r0
   1ae5c:	b908      	cbnz	r0, 1ae62 <shell_wildcard_character_exist+0xa>
	return false;
   1ae5e:	2000      	movs	r0, #0
}
   1ae60:	bd10      	pop	{r4, pc}
   1ae62:	f000 f9d7 	bl	1b214 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   1ae66:	2300      	movs	r3, #0
   1ae68:	b280      	uxth	r0, r0
   1ae6a:	4283      	cmp	r3, r0
   1ae6c:	d2f7      	bcs.n	1ae5e <shell_wildcard_character_exist+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   1ae6e:	5ce2      	ldrb	r2, [r4, r3]
   1ae70:	2a3f      	cmp	r2, #63	; 0x3f
   1ae72:	d003      	beq.n	1ae7c <shell_wildcard_character_exist+0x24>
   1ae74:	2a2a      	cmp	r2, #42	; 0x2a
   1ae76:	d001      	beq.n	1ae7c <shell_wildcard_character_exist+0x24>
	for (size_t i = 0; i < str_len; i++) {
   1ae78:	3301      	adds	r3, #1
   1ae7a:	e7f6      	b.n	1ae6a <shell_wildcard_character_exist+0x12>
			return true;
   1ae7c:	2001      	movs	r0, #1
   1ae7e:	e7ef      	b.n	1ae60 <shell_wildcard_character_exist+0x8>

0001ae80 <shell_wildcard_prepare>:
{
   1ae80:	b510      	push	{r4, lr}
   1ae82:	4604      	mov	r4, r0
	memset(shell->ctx->temp_buff, 0, sizeof(shell->ctx->temp_buff));
   1ae84:	6880      	ldr	r0, [r0, #8]
   1ae86:	f44f 7280 	mov.w	r2, #256	; 0x100
   1ae8a:	2100      	movs	r1, #0
   1ae8c:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1ae90:	f000 fa34 	bl	1b2fc <memset>
	memcpy(shell->ctx->temp_buff,
   1ae94:	68a0      	ldr	r0, [r4, #8]
   1ae96:	8e42      	ldrh	r2, [r0, #50]	; 0x32
   1ae98:	f100 0138 	add.w	r1, r0, #56	; 0x38
   1ae9c:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1aea0:	f000 fa01 	bl	1b2a6 <memcpy>
	shell_spaces_trim(shell->ctx->temp_buff);
   1aea4:	68a0      	ldr	r0, [r4, #8]
   1aea6:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1aeaa:	f7ff fb2c 	bl	1a506 <shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = shell_strlen(shell->ctx->temp_buff) + 1;
   1aeae:	68a3      	ldr	r3, [r4, #8]
   1aeb0:	f513 709c 	adds.w	r0, r3, #312	; 0x138
   1aeb4:	d006      	beq.n	1aec4 <shell_wildcard_prepare+0x44>
   1aeb6:	f000 f9ad 	bl	1b214 <strlen>
   1aeba:	b283      	uxth	r3, r0
   1aebc:	68a2      	ldr	r2, [r4, #8]
   1aebe:	3301      	adds	r3, #1
   1aec0:	86d3      	strh	r3, [r2, #54]	; 0x36
}
   1aec2:	bd10      	pop	{r4, pc}
   1aec4:	4603      	mov	r3, r0
   1aec6:	e7f9      	b.n	1aebc <shell_wildcard_prepare+0x3c>

0001aec8 <shell_wildcard_finalize>:

void shell_wildcard_finalize(const struct shell *shell)
{
   1aec8:	b510      	push	{r4, lr}
   1aeca:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   1aecc:	6880      	ldr	r0, [r0, #8]
   1aece:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
   1aed0:	f500 719c 	add.w	r1, r0, #312	; 0x138
   1aed4:	3038      	adds	r0, #56	; 0x38
   1aed6:	f000 f9e6 	bl	1b2a6 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   1aeda:	68a3      	ldr	r3, [r4, #8]
   1aedc:	8eda      	ldrh	r2, [r3, #54]	; 0x36
   1aede:	865a      	strh	r2, [r3, #50]	; 0x32
}
   1aee0:	bd10      	pop	{r4, pc}

0001aee2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1aee2:	b2cb      	uxtb	r3, r1
   1aee4:	210c      	movs	r1, #12
   1aee6:	68c2      	ldr	r2, [r0, #12]
   1aee8:	fb03 2101 	mla	r1, r3, r1, r2
   1aeec:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1aeee:	f000 0007 	and.w	r0, r0, #7
   1aef2:	4770      	bx	lr

0001aef4 <set_off_state>:
	__asm__ volatile(
   1aef4:	f04f 0320 	mov.w	r3, #32
   1aef8:	f3ef 8211 	mrs	r2, BASEPRI
   1aefc:	f383 8811 	msr	BASEPRI, r3
   1af00:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1af04:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1af06:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1af0a:	d001      	beq.n	1af10 <set_off_state+0x1c>
   1af0c:	428b      	cmp	r3, r1
   1af0e:	d107      	bne.n	1af20 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1af10:	2301      	movs	r3, #1
   1af12:	6003      	str	r3, [r0, #0]
	int err = 0;
   1af14:	2000      	movs	r0, #0
	__asm__ volatile(
   1af16:	f382 8811 	msr	BASEPRI, r2
   1af1a:	f3bf 8f6f 	isb	sy
}
   1af1e:	4770      	bx	lr
		err = -EPERM;
   1af20:	f04f 30ff 	mov.w	r0, #4294967295
   1af24:	e7f7      	b.n	1af16 <set_off_state+0x22>

0001af26 <set_starting_state>:
{
   1af26:	b510      	push	{r4, lr}
	__asm__ volatile(
   1af28:	f04f 0320 	mov.w	r3, #32
   1af2c:	f3ef 8211 	mrs	r2, BASEPRI
   1af30:	f383 8811 	msr	BASEPRI, r3
   1af34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1af38:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1af3a:	f003 0407 	and.w	r4, r3, #7
   1af3e:	2c01      	cmp	r4, #1
   1af40:	d106      	bne.n	1af50 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1af42:	6001      	str	r1, [r0, #0]
	int err = 0;
   1af44:	2000      	movs	r0, #0
	__asm__ volatile(
   1af46:	f382 8811 	msr	BASEPRI, r2
   1af4a:	f3bf 8f6f 	isb	sy
}
   1af4e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1af50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1af54:	428b      	cmp	r3, r1
		err = -EALREADY;
   1af56:	bf14      	ite	ne
   1af58:	f04f 30ff 	movne.w	r0, #4294967295
   1af5c:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1af60:	e7f1      	b.n	1af46 <set_starting_state+0x20>

0001af62 <set_on_state>:
	__asm__ volatile(
   1af62:	f04f 0320 	mov.w	r3, #32
   1af66:	f3ef 8211 	mrs	r2, BASEPRI
   1af6a:	f383 8811 	msr	BASEPRI, r3
   1af6e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1af72:	6803      	ldr	r3, [r0, #0]
   1af74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1af78:	f043 0302 	orr.w	r3, r3, #2
   1af7c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1af7e:	f382 8811 	msr	BASEPRI, r2
   1af82:	f3bf 8f6f 	isb	sy
}
   1af86:	4770      	bx	lr

0001af88 <onoff_started_callback>:
{
   1af88:	b410      	push	{r4}
	notify(mgr, 0);
   1af8a:	241c      	movs	r4, #28
	return &data->mgr[type];
   1af8c:	68c0      	ldr	r0, [r0, #12]
   1af8e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1af90:	fb03 0004 	mla	r0, r3, r4, r0
   1af94:	2100      	movs	r1, #0
}
   1af96:	bc10      	pop	{r4}
	notify(mgr, 0);
   1af98:	4710      	bx	r2

0001af9a <blocking_start_callback>:
{
   1af9a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1af9c:	f7fa bac2 	b.w	15524 <z_impl_k_sem_give>

0001afa0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1afa0:	2000      	movs	r0, #0
   1afa2:	f7f9 bab7 	b.w	14514 <nrfx_clock_stop>

0001afa6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1afa6:	2000      	movs	r0, #0
   1afa8:	f7f9 ba82 	b.w	144b0 <nrfx_clock_start>

0001afac <api_stop>:
{
   1afac:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   1afae:	240c      	movs	r4, #12
   1afb0:	b2c9      	uxtb	r1, r1
   1afb2:	434c      	muls	r4, r1
{
   1afb4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1afb6:	68c0      	ldr	r0, [r0, #12]
   1afb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1afbc:	2180      	movs	r1, #128	; 0x80
   1afbe:	4418      	add	r0, r3
   1afc0:	f7ff ff98 	bl	1aef4 <set_off_state>
	if (err < 0) {
   1afc4:	2800      	cmp	r0, #0
   1afc6:	db04      	blt.n	1afd2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1afc8:	6869      	ldr	r1, [r5, #4]
   1afca:	440c      	add	r4, r1
   1afcc:	6863      	ldr	r3, [r4, #4]
   1afce:	4798      	blx	r3
	return 0;
   1afd0:	2000      	movs	r0, #0
}
   1afd2:	bd38      	pop	{r3, r4, r5, pc}

0001afd4 <api_start>:
{
   1afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   1afd8:	240c      	movs	r4, #12
   1afda:	b2c9      	uxtb	r1, r1
   1afdc:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1afde:	68c5      	ldr	r5, [r0, #12]
{
   1afe0:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1afe2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1afe6:	2180      	movs	r1, #128	; 0x80
   1afe8:	4428      	add	r0, r5
{
   1afea:	4690      	mov	r8, r2
   1afec:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   1afee:	f7ff ff9a 	bl	1af26 <set_starting_state>
	if (err < 0) {
   1aff2:	2800      	cmp	r0, #0
   1aff4:	db06      	blt.n	1b004 <api_start+0x30>
	subdata->cb = cb;
   1aff6:	4425      	add	r5, r4
	subdata->user_data = user_data;
   1aff8:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1affc:	6873      	ldr	r3, [r6, #4]
   1affe:	591b      	ldr	r3, [r3, r4]
   1b000:	4798      	blx	r3
	return 0;
   1b002:	2000      	movs	r0, #0
}
   1b004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b008 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1b008:	4770      	bx	lr

0001b00a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b00a:	4770      	bx	lr

0001b00c <sys_clock_disable>:
   1b00c:	4770      	bx	lr

0001b00e <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1b00e:	b510      	push	{r4, lr}
   1b010:	b40f      	push	{r0, r1, r2, r3}
   1b012:	f7f9 ff47 	bl	14ea4 <k_sched_lock>
   1b016:	bc0f      	pop	{r0, r1, r2, r3}
   1b018:	f7ec ffe6 	bl	7fe8 <spm_request_random_number_nse>
   1b01c:	b40f      	push	{r0, r1, r2, r3}
   1b01e:	f7f9 ff93 	bl	14f48 <k_sched_unlock>
   1b022:	bc0f      	pop	{r0, r1, r2, r3}
   1b024:	bd10      	pop	{r4, pc}

0001b026 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b026:	2100      	movs	r1, #0
   1b028:	2001      	movs	r0, #1
   1b02a:	f7f7 be4f 	b.w	12ccc <z_arm_fatal_error>

0001b02e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b02e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   1b032:	f383 880b 	msr	PSPLIM, r3
}
   1b036:	4770      	bx	lr

0001b038 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b038:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b03a:	6800      	ldr	r0, [r0, #0]
   1b03c:	f7f7 be46 	b.w	12ccc <z_arm_fatal_error>

0001b040 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b040:	b508      	push	{r3, lr}
	handler();
   1b042:	f7f7 ff09 	bl	12e58 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b04a:	f7f7 bf51 	b.w	12ef0 <z_arm_exc_exit>

0001b04e <mpu_configure_region>:
{
   1b04e:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   1b050:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   1b052:	680c      	ldr	r4, [r1, #0]
{
   1b054:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   1b056:	890a      	ldrh	r2, [r1, #8]
   1b058:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   1b05a:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b05c:	3b01      	subs	r3, #1
   1b05e:	f024 041f 	bic.w	r4, r4, #31
   1b062:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   1b064:	f002 021f 	and.w	r2, r2, #31
   1b068:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b06c:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   1b070:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   1b072:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1b076:	9303      	str	r3, [sp, #12]
   1b078:	f7f8 fac8 	bl	1360c <region_allocate_and_init>
}
   1b07c:	b005      	add	sp, #20
   1b07e:	bd30      	pop	{r4, r5, pc}

0001b080 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b080:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1b084:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b088:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   1b08a:	bf08      	it	eq
   1b08c:	f06f 0015 	mvneq.w	r0, #21
   1b090:	4770      	bx	lr

0001b092 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1b092:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b096:	4684      	mov	ip, r0
   1b098:	4688      	mov	r8, r1
	register const char *s = nptr;
   1b09a:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1b09c:	460c      	mov	r4, r1
   1b09e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1b0a2:	2b20      	cmp	r3, #32
   1b0a4:	d033      	beq.n	1b10e <strtol+0x7c>
   1b0a6:	f1a3 0009 	sub.w	r0, r3, #9
   1b0aa:	2804      	cmp	r0, #4
   1b0ac:	d92f      	bls.n	1b10e <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1b0ae:	2b2d      	cmp	r3, #45	; 0x2d
   1b0b0:	d12f      	bne.n	1b112 <strtol+0x80>
		neg = 1;
		c = *s++;
   1b0b2:	784b      	ldrb	r3, [r1, #1]
   1b0b4:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1b0b6:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1b0b8:	2a00      	cmp	r2, #0
   1b0ba:	d05c      	beq.n	1b176 <strtol+0xe4>
   1b0bc:	2a10      	cmp	r2, #16
   1b0be:	d109      	bne.n	1b0d4 <strtol+0x42>
   1b0c0:	2b30      	cmp	r3, #48	; 0x30
   1b0c2:	d107      	bne.n	1b0d4 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1b0c4:	7823      	ldrb	r3, [r4, #0]
   1b0c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b0ca:	2b58      	cmp	r3, #88	; 0x58
   1b0cc:	d14e      	bne.n	1b16c <strtol+0xda>
		c = s[1];
		s += 2;
		base = 16;
   1b0ce:	2210      	movs	r2, #16
		c = s[1];
   1b0d0:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1b0d2:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1b0d4:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1b0d6:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1b0da:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1b0dc:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1b0e0:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1b0e2:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1b0e6:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1b0ea:	2d09      	cmp	r5, #9
   1b0ec:	d817      	bhi.n	1b11e <strtol+0x8c>
			c -= '0';
   1b0ee:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1b0f0:	429a      	cmp	r2, r3
   1b0f2:	dd24      	ble.n	1b13e <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1b0f4:	1c75      	adds	r5, r6, #1
   1b0f6:	d007      	beq.n	1b108 <strtol+0x76>
   1b0f8:	4570      	cmp	r0, lr
   1b0fa:	d81d      	bhi.n	1b138 <strtol+0xa6>
   1b0fc:	d101      	bne.n	1b102 <strtol+0x70>
   1b0fe:	454b      	cmp	r3, r9
   1b100:	dc1a      	bgt.n	1b138 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
   1b102:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1b104:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1b108:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1b10c:	e7eb      	b.n	1b0e6 <strtol+0x54>
{
   1b10e:	4621      	mov	r1, r4
   1b110:	e7c4      	b.n	1b09c <strtol+0xa>
	} else if (c == '+') {
   1b112:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1b114:	bf04      	itt	eq
   1b116:	784b      	ldrbeq	r3, [r1, #1]
   1b118:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1b11a:	2100      	movs	r1, #0
   1b11c:	e7cc      	b.n	1b0b8 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1b11e:	f043 0520 	orr.w	r5, r3, #32
   1b122:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1b124:	2d19      	cmp	r5, #25
   1b126:	d80a      	bhi.n	1b13e <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b128:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1b12c:	2d1a      	cmp	r5, #26
   1b12e:	bf34      	ite	cc
   1b130:	2537      	movcc	r5, #55	; 0x37
   1b132:	2557      	movcs	r5, #87	; 0x57
   1b134:	1b5b      	subs	r3, r3, r5
   1b136:	e7db      	b.n	1b0f0 <strtol+0x5e>
			any = -1;
   1b138:	f04f 36ff 	mov.w	r6, #4294967295
   1b13c:	e7e4      	b.n	1b108 <strtol+0x76>
		}
	}

	if (any < 0) {
   1b13e:	1c73      	adds	r3, r6, #1
   1b140:	d109      	bne.n	1b156 <strtol+0xc4>
   1b142:	f7f9 fadf 	bl	14704 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1b146:	2326      	movs	r3, #38	; 0x26
   1b148:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1b14a:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1b14c:	f1b8 0f00 	cmp.w	r8, #0
   1b150:	d107      	bne.n	1b162 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1b152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1b156:	b101      	cbz	r1, 1b15a <strtol+0xc8>
		acc = -acc;
   1b158:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1b15a:	f1b8 0f00 	cmp.w	r8, #0
   1b15e:	d0f8      	beq.n	1b152 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1b160:	b10e      	cbz	r6, 1b166 <strtol+0xd4>
   1b162:	f104 3cff 	add.w	ip, r4, #4294967295
   1b166:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1b16a:	e7f2      	b.n	1b152 <strtol+0xc0>
	if (base == 0) {
   1b16c:	2330      	movs	r3, #48	; 0x30
   1b16e:	2a00      	cmp	r2, #0
   1b170:	d1b0      	bne.n	1b0d4 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1b172:	2208      	movs	r2, #8
   1b174:	e7ae      	b.n	1b0d4 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1b176:	2b30      	cmp	r3, #48	; 0x30
   1b178:	d0a4      	beq.n	1b0c4 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1b17a:	220a      	movs	r2, #10
   1b17c:	e7aa      	b.n	1b0d4 <strtol+0x42>

0001b17e <strstr>:
/*
 * Find the first occurrence of find in s.
 */
char *
strstr(const char *s, const char *find)
{
   1b17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char c, sc;
	size_t len;

	c = *find++;
   1b182:	f891 8000 	ldrb.w	r8, [r1]
{
   1b186:	4605      	mov	r5, r0
	if (c != 0) {
   1b188:	f1b8 0f00 	cmp.w	r8, #0
   1b18c:	d010      	beq.n	1b1b0 <strstr+0x32>
	c = *find++;
   1b18e:	1c4c      	adds	r4, r1, #1
		len = strlen(find);
   1b190:	4620      	mov	r0, r4
   1b192:	f000 f83f 	bl	1b214 <strlen>
   1b196:	4607      	mov	r7, r0
		do {
			do {
				sc = *s++;
   1b198:	462e      	mov	r6, r5
   1b19a:	f816 3b01 	ldrb.w	r3, [r6], #1
				if (sc == 0) {
   1b19e:	b163      	cbz	r3, 1b1ba <strstr+0x3c>
					return NULL;
				}
			} while (sc != c);
   1b1a0:	4598      	cmp	r8, r3
   1b1a2:	d108      	bne.n	1b1b6 <strstr+0x38>
		} while (strncmp(s, find, len) != 0);
   1b1a4:	463a      	mov	r2, r7
   1b1a6:	4621      	mov	r1, r4
   1b1a8:	4630      	mov	r0, r6
   1b1aa:	f000 f846 	bl	1b23a <strncmp>
   1b1ae:	b910      	cbnz	r0, 1b1b6 <strstr+0x38>
	s--;
	}
	return (char *)s;
}
   1b1b0:	4628      	mov	r0, r5
   1b1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   1b1b6:	4635      	mov	r5, r6
   1b1b8:	e7ee      	b.n	1b198 <strstr+0x1a>
					return NULL;
   1b1ba:	461d      	mov	r5, r3
   1b1bc:	e7f8      	b.n	1b1b0 <strstr+0x32>

0001b1be <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1b1be:	4603      	mov	r3, r0
   1b1c0:	3901      	subs	r1, #1
   1b1c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1b1c6:	b90a      	cbnz	r2, 1b1cc <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1b1c8:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1b1ca:	4770      	bx	lr
		*d = *s;
   1b1cc:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1b1d0:	e7f7      	b.n	1b1c2 <strcpy+0x4>

0001b1d2 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1b1d2:	b570      	push	{r4, r5, r6, lr}
   1b1d4:	4605      	mov	r5, r0
   1b1d6:	3901      	subs	r1, #1
   1b1d8:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1b1da:	b142      	cbz	r2, 1b1ee <strncpy+0x1c>
   1b1dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b1e0:	1e56      	subs	r6, r2, #1
   1b1e2:	b92b      	cbnz	r3, 1b1f0 <strncpy+0x1e>
   1b1e4:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1b1e6:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1b1ea:	42a2      	cmp	r2, r4
   1b1ec:	d1fb      	bne.n	1b1e6 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1b1ee:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1b1f0:	4632      	mov	r2, r6
		*d = *s;
   1b1f2:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1b1f6:	e7ef      	b.n	1b1d8 <strncpy+0x6>

0001b1f8 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1b1f8:	4603      	mov	r3, r0
   1b1fa:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1b1fc:	781a      	ldrb	r2, [r3, #0]
   1b1fe:	4618      	mov	r0, r3
   1b200:	428a      	cmp	r2, r1
   1b202:	f103 0301 	add.w	r3, r3, #1
   1b206:	d004      	beq.n	1b212 <strchr+0x1a>
   1b208:	2a00      	cmp	r2, #0
   1b20a:	d1f7      	bne.n	1b1fc <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1b20c:	2900      	cmp	r1, #0
   1b20e:	bf18      	it	ne
   1b210:	2000      	movne	r0, #0
}
   1b212:	4770      	bx	lr

0001b214 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b214:	4603      	mov	r3, r0
	size_t n = 0;
   1b216:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b218:	5c1a      	ldrb	r2, [r3, r0]
   1b21a:	b902      	cbnz	r2, 1b21e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b21c:	4770      	bx	lr
		n++;
   1b21e:	3001      	adds	r0, #1
   1b220:	e7fa      	b.n	1b218 <strlen+0x4>

0001b222 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b222:	1e43      	subs	r3, r0, #1
   1b224:	3901      	subs	r1, #1
   1b226:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b22a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b22e:	4282      	cmp	r2, r0
   1b230:	d101      	bne.n	1b236 <strcmp+0x14>
   1b232:	2a00      	cmp	r2, #0
   1b234:	d1f7      	bne.n	1b226 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b236:	1a10      	subs	r0, r2, r0
   1b238:	4770      	bx	lr

0001b23a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1b23a:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b23c:	2400      	movs	r4, #0
   1b23e:	42a2      	cmp	r2, r4
   1b240:	d008      	beq.n	1b254 <strncmp+0x1a>
   1b242:	5d03      	ldrb	r3, [r0, r4]
   1b244:	5d0d      	ldrb	r5, [r1, r4]
   1b246:	42ab      	cmp	r3, r5
   1b248:	d102      	bne.n	1b250 <strncmp+0x16>
   1b24a:	3401      	adds	r4, #1
   1b24c:	2b00      	cmp	r3, #0
   1b24e:	d1f6      	bne.n	1b23e <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1b250:	1b58      	subs	r0, r3, r5
   1b252:	e000      	b.n	1b256 <strncmp+0x1c>
   1b254:	2000      	movs	r0, #0
}
   1b256:	bd30      	pop	{r4, r5, pc}

0001b258 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1b258:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1b25a:	b15a      	cbz	r2, 1b274 <memcmp+0x1c>
   1b25c:	3901      	subs	r1, #1
   1b25e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1b260:	f810 2b01 	ldrb.w	r2, [r0], #1
   1b264:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1b268:	42a0      	cmp	r0, r4
   1b26a:	d001      	beq.n	1b270 <memcmp+0x18>
   1b26c:	429a      	cmp	r2, r3
   1b26e:	d0f7      	beq.n	1b260 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1b270:	1ad0      	subs	r0, r2, r3
}
   1b272:	bd10      	pop	{r4, pc}
		return 0;
   1b274:	4610      	mov	r0, r2
   1b276:	e7fc      	b.n	1b272 <memcmp+0x1a>

0001b278 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   1b278:	1a43      	subs	r3, r0, r1
   1b27a:	4293      	cmp	r3, r2
{
   1b27c:	b510      	push	{r4, lr}
   1b27e:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   1b282:	d308      	bcc.n	1b296 <memmove+0x1e>
	char *dest = d;
   1b284:	4602      	mov	r2, r0
   1b286:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   1b288:	429a      	cmp	r2, r3
   1b28a:	d00b      	beq.n	1b2a4 <memmove+0x2c>
			*dest = *src;
   1b28c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1b290:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   1b294:	e7f8      	b.n	1b288 <memmove+0x10>
   1b296:	440a      	add	r2, r1
			dest[n] = src[n];
   1b298:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   1b29c:	428a      	cmp	r2, r1
			dest[n] = src[n];
   1b29e:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   1b2a2:	d1f9      	bne.n	1b298 <memmove+0x20>
		}
	}

	return d;
}
   1b2a4:	bd10      	pop	{r4, pc}

0001b2a6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1b2a6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1b2a8:	ea81 0400 	eor.w	r4, r1, r0
   1b2ac:	07a5      	lsls	r5, r4, #30
   1b2ae:	4603      	mov	r3, r0
   1b2b0:	d00b      	beq.n	1b2ca <memcpy+0x24>
   1b2b2:	3b01      	subs	r3, #1
   1b2b4:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1b2b6:	4291      	cmp	r1, r2
   1b2b8:	d11b      	bne.n	1b2f2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1b2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1b2bc:	2a00      	cmp	r2, #0
   1b2be:	d0fc      	beq.n	1b2ba <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1b2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1b2c4:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1b2c6:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1b2ca:	079c      	lsls	r4, r3, #30
   1b2cc:	d1f6      	bne.n	1b2bc <memcpy+0x16>
   1b2ce:	f022 0403 	bic.w	r4, r2, #3
   1b2d2:	1f1d      	subs	r5, r3, #4
   1b2d4:	0896      	lsrs	r6, r2, #2
   1b2d6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1b2d8:	42b9      	cmp	r1, r7
   1b2da:	d105      	bne.n	1b2e8 <memcpy+0x42>
   1b2dc:	f06f 0503 	mvn.w	r5, #3
   1b2e0:	4423      	add	r3, r4
   1b2e2:	fb05 2206 	mla	r2, r5, r6, r2
   1b2e6:	e7e4      	b.n	1b2b2 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1b2e8:	f851 cb04 	ldr.w	ip, [r1], #4
   1b2ec:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1b2f0:	e7f2      	b.n	1b2d8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1b2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1b2fa:	e7dc      	b.n	1b2b6 <memcpy+0x10>

0001b2fc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1b2fc:	4603      	mov	r3, r0
{
   1b2fe:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   1b300:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1b302:	079c      	lsls	r4, r3, #30
   1b304:	d111      	bne.n	1b32a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1b306:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1b30a:	f022 0603 	bic.w	r6, r2, #3
   1b30e:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1b312:	441e      	add	r6, r3
   1b314:	0894      	lsrs	r4, r2, #2
   1b316:	42b3      	cmp	r3, r6
   1b318:	d10d      	bne.n	1b336 <memset+0x3a>
   1b31a:	f06f 0503 	mvn.w	r5, #3
   1b31e:	fb05 2204 	mla	r2, r5, r4, r2
   1b322:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1b324:	4293      	cmp	r3, r2
   1b326:	d109      	bne.n	1b33c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1b328:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1b32a:	2a00      	cmp	r2, #0
   1b32c:	d0fc      	beq.n	1b328 <memset+0x2c>
		*(d_byte++) = c_byte;
   1b32e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b332:	3a01      	subs	r2, #1
   1b334:	e7e5      	b.n	1b302 <memset+0x6>
		*(d_word++) = c_word;
   1b336:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1b33a:	e7ec      	b.n	1b316 <memset+0x1a>
		*(d_byte++) = c_byte;
   1b33c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1b340:	e7f0      	b.n	1b324 <memset+0x28>

0001b342 <_stdout_hook_default>:
}
   1b342:	f04f 30ff 	mov.w	r0, #4294967295
   1b346:	4770      	bx	lr

0001b348 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   1b348:	f7f8 badc 	b.w	13904 <z_impl_zephyr_fputc>

0001b34c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1b34c:	684b      	ldr	r3, [r1, #4]
   1b34e:	2b01      	cmp	r3, #1
   1b350:	dd07      	ble.n	1b362 <sprintf_out+0x16>
		*(p->ptr) = c;
   1b352:	680b      	ldr	r3, [r1, #0]
   1b354:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1b356:	680b      	ldr	r3, [r1, #0]
   1b358:	3301      	adds	r3, #1
   1b35a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1b35c:	684b      	ldr	r3, [r1, #4]
   1b35e:	3b01      	subs	r3, #1
   1b360:	604b      	str	r3, [r1, #4]
}
   1b362:	2000      	movs	r0, #0
   1b364:	4770      	bx	lr

0001b366 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b366:	6843      	ldr	r3, [r0, #4]
}
   1b368:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b36a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1b36c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1b36e:	600b      	str	r3, [r1, #0]
}
   1b370:	4770      	bx	lr

0001b372 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b372:	6843      	ldr	r3, [r0, #4]
   1b374:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1b376:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1b378:	4042      	eors	r2, r0
   1b37a:	400a      	ands	r2, r1
   1b37c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1b37e:	605a      	str	r2, [r3, #4]
}
   1b380:	2000      	movs	r0, #0
   1b382:	4770      	bx	lr

0001b384 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b384:	6843      	ldr	r3, [r0, #4]
}
   1b386:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b388:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1b38a:	6099      	str	r1, [r3, #8]
}
   1b38c:	4770      	bx	lr

0001b38e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b38e:	6843      	ldr	r3, [r0, #4]
}
   1b390:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b392:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1b394:	60d9      	str	r1, [r3, #12]
}
   1b396:	4770      	bx	lr

0001b398 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b398:	6843      	ldr	r3, [r0, #4]
}
   1b39a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1b39c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1b39e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1b3a0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1b3a2:	6053      	str	r3, [r2, #4]
}
   1b3a4:	4770      	bx	lr

0001b3a6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b3a6:	68c3      	ldr	r3, [r0, #12]
{
   1b3a8:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   1b3aa:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1b3ac:	b158      	cbz	r0, 1b3c6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b3ae:	2400      	movs	r4, #0
   1b3b0:	4281      	cmp	r1, r0
   1b3b2:	d113      	bne.n	1b3dc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1b3b4:	6808      	ldr	r0, [r1, #0]
   1b3b6:	b95c      	cbnz	r4, 1b3d0 <gpio_nrfx_manage_callback+0x2a>
   1b3b8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1b3ba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b3bc:	42a1      	cmp	r1, r4
   1b3be:	d100      	bne.n	1b3c2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1b3c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1b3c2:	2000      	movs	r0, #0
   1b3c4:	6008      	str	r0, [r1, #0]
	if (set) {
   1b3c6:	b972      	cbnz	r2, 1b3e6 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1b3c8:	2000      	movs	r0, #0
}
   1b3ca:	bd30      	pop	{r4, r5, pc}
   1b3cc:	4628      	mov	r0, r5
   1b3ce:	e7ef      	b.n	1b3b0 <gpio_nrfx_manage_callback+0xa>
   1b3d0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b3d2:	6898      	ldr	r0, [r3, #8]
   1b3d4:	4281      	cmp	r1, r0
	list->tail = node;
   1b3d6:	bf08      	it	eq
   1b3d8:	609c      	streq	r4, [r3, #8]
}
   1b3da:	e7f2      	b.n	1b3c2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b3dc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b3de:	4604      	mov	r4, r0
   1b3e0:	2d00      	cmp	r5, #0
   1b3e2:	d1f3      	bne.n	1b3cc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1b3e4:	b13a      	cbz	r2, 1b3f6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1b3e6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1b3e8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b3ea:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1b3ec:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b3ee:	2800      	cmp	r0, #0
   1b3f0:	d1ea      	bne.n	1b3c8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1b3f2:	6099      	str	r1, [r3, #8]
}
   1b3f4:	e7e9      	b.n	1b3ca <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1b3f6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1b3fa:	e7e6      	b.n	1b3ca <gpio_nrfx_manage_callback+0x24>

0001b3fc <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1b3fc:	6843      	ldr	r3, [r0, #4]
{
   1b3fe:	b410      	push	{r4}
	return config->uarte_regs;
   1b400:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1b402:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1b406:	05d2      	lsls	r2, r2, #23
   1b408:	d518      	bpl.n	1b43c <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b40a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1b40e:	b1aa      	cbz	r2, 1b43c <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1b410:	f04f 0120 	mov.w	r1, #32
   1b414:	f3ef 8211 	mrs	r2, BASEPRI
   1b418:	f381 8811 	msr	BASEPRI, r1
   1b41c:	f3bf 8f6f 	isb	sy
   1b420:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1b424:	b131      	cbz	r1, 1b434 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b426:	2100      	movs	r1, #0
   1b428:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1b42c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b430:	2101      	movs	r1, #1
   1b432:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1b434:	f382 8811 	msr	BASEPRI, r2
   1b438:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1b43c:	68c2      	ldr	r2, [r0, #12]
   1b43e:	68d2      	ldr	r2, [r2, #12]
   1b440:	b15a      	cbz	r2, 1b45a <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b442:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1b446:	b151      	cbz	r1, 1b45e <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1b448:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1b44a:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1b44c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1b44e:	b134      	cbz	r4, 1b45e <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1b450:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1b454:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1b458:	7391      	strb	r1, [r2, #14]
}
   1b45a:	bc10      	pop	{r4}
   1b45c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b45e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1b462:	b121      	cbz	r1, 1b46e <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b464:	2100      	movs	r1, #0
   1b466:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1b46a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1b46e:	6813      	ldr	r3, [r2, #0]
   1b470:	2b00      	cmp	r3, #0
   1b472:	d0f2      	beq.n	1b45a <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1b474:	6851      	ldr	r1, [r2, #4]
}
   1b476:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1b478:	4718      	bx	r3

0001b47a <uarte_nrfx_config_get>:
{
   1b47a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1b47c:	68c2      	ldr	r2, [r0, #12]
   1b47e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1b482:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1b486:	2000      	movs	r0, #0
   1b488:	4770      	bx	lr

0001b48a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1b48a:	6843      	ldr	r3, [r0, #4]
   1b48c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1b48e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1b492:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1b496:	4770      	bx	lr

0001b498 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   1b498:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   1b49a:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b49c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1b4a0:	b938      	cbnz	r0, 1b4b2 <is_tx_ready+0x1a>
   1b4a2:	7992      	ldrb	r2, [r2, #6]
   1b4a4:	b932      	cbnz	r2, 1b4b4 <is_tx_ready+0x1c>
   1b4a6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   1b4aa:	3800      	subs	r0, #0
   1b4ac:	bf18      	it	ne
   1b4ae:	2001      	movne	r0, #1
   1b4b0:	4770      	bx	lr
   1b4b2:	2001      	movs	r0, #1
}
   1b4b4:	4770      	bx	lr

0001b4b6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1b4b6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b4b8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1b4ba:	681b      	ldr	r3, [r3, #0]
   1b4bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b4c0:	b148      	cbz	r0, 1b4d6 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b4c2:	2000      	movs	r0, #0
	*c = data->rx_data;
   1b4c4:	7c52      	ldrb	r2, [r2, #17]
   1b4c6:	700a      	strb	r2, [r1, #0]
   1b4c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b4cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b4d0:	2201      	movs	r2, #1
   1b4d2:	601a      	str	r2, [r3, #0]
	return 0;
   1b4d4:	4770      	bx	lr
		return -1;
   1b4d6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b4da:	4770      	bx	lr

0001b4dc <uarte_nrfx_fifo_fill>:
{
   1b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1b4de:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b4e0:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1b4e2:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1b4e4:	68f3      	ldr	r3, [r6, #12]
   1b4e6:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b4e8:	3310      	adds	r3, #16
   1b4ea:	4294      	cmp	r4, r2
   1b4ec:	bfa8      	it	ge
   1b4ee:	4614      	movge	r4, r2
   1b4f0:	2201      	movs	r2, #1
   1b4f2:	e8d3 7fef 	ldaex	r7, [r3]
   1b4f6:	2f00      	cmp	r7, #0
   1b4f8:	d104      	bne.n	1b504 <uarte_nrfx_fifo_fill+0x28>
   1b4fa:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b4fe:	f1bc 0f00 	cmp.w	ip, #0
   1b502:	d1f6      	bne.n	1b4f2 <uarte_nrfx_fifo_fill+0x16>
   1b504:	bf0c      	ite	eq
   1b506:	4613      	moveq	r3, r2
   1b508:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1b50a:	d01c      	beq.n	1b546 <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   1b50c:	461c      	mov	r4, r3
}
   1b50e:	4620      	mov	r0, r4
   1b510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1b512:	68f2      	ldr	r2, [r6, #12]
   1b514:	5ccf      	ldrb	r7, [r1, r3]
   1b516:	6892      	ldr	r2, [r2, #8]
   1b518:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1b51a:	3301      	adds	r3, #1
   1b51c:	42a3      	cmp	r3, r4
   1b51e:	dbf8      	blt.n	1b512 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1b520:	f04f 0320 	mov.w	r3, #32
   1b524:	f3ef 8111 	mrs	r1, BASEPRI
   1b528:	f383 8811 	msr	BASEPRI, r3
   1b52c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1b530:	f7ff ffb2 	bl	1b498 <is_tx_ready>
   1b534:	68f3      	ldr	r3, [r6, #12]
   1b536:	b940      	cbnz	r0, 1b54a <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   1b538:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1b53a:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1b53c:	f381 8811 	msr	BASEPRI, r1
   1b540:	f3bf 8f6f 	isb	sy
	return len;
   1b544:	e7e3      	b.n	1b50e <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1b546:	2300      	movs	r3, #0
   1b548:	e7e8      	b.n	1b51c <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1b54a:	689b      	ldr	r3, [r3, #8]
   1b54c:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b550:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1b552:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b556:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1b55a:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1b55e:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1b562:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b566:	2301      	movs	r3, #1
   1b568:	60ab      	str	r3, [r5, #8]
}
   1b56a:	e7e7      	b.n	1b53c <uarte_nrfx_fifo_fill+0x60>

0001b56c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1b56c:	6843      	ldr	r3, [r0, #4]
{
   1b56e:	4602      	mov	r2, r0
	return config->uarte_regs;
   1b570:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b572:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1b576:	b148      	cbz	r0, 1b58c <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1b578:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   1b57a:	68d2      	ldr	r2, [r2, #12]
   1b57c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1b580:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1b584:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1b586:	7c52      	ldrb	r2, [r2, #17]
   1b588:	700a      	strb	r2, [r1, #0]
   1b58a:	6018      	str	r0, [r3, #0]
}
   1b58c:	4770      	bx	lr

0001b58e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1b58e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1b590:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1b592:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1b594:	f04f 0020 	mov.w	r0, #32
   1b598:	f3ef 8311 	mrs	r3, BASEPRI
   1b59c:	f380 8811 	msr	BASEPRI, r0
   1b5a0:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1b5a4:	2000      	movs	r0, #0
   1b5a6:	68c9      	ldr	r1, [r1, #12]
   1b5a8:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1b5aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1b5ae:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1b5b2:	f383 8811 	msr	BASEPRI, r3
   1b5b6:	f3bf 8f6f 	isb	sy
}
   1b5ba:	4770      	bx	lr

0001b5bc <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1b5bc:	2201      	movs	r2, #1
   1b5be:	68c3      	ldr	r3, [r0, #12]
   1b5c0:	68db      	ldr	r3, [r3, #12]
   1b5c2:	739a      	strb	r2, [r3, #14]
}
   1b5c4:	4770      	bx	lr

0001b5c6 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   1b5c6:	68c3      	ldr	r3, [r0, #12]
   1b5c8:	68db      	ldr	r3, [r3, #12]
   1b5ca:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1b5cc:	b94b      	cbnz	r3, 1b5e2 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   1b5ce:	6843      	ldr	r3, [r0, #4]
   1b5d0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b5d2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return !data->int_driven->disable_tx_irq &&
   1b5d6:	b128      	cbz	r0, 1b5e4 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   1b5d8:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1b5dc:	f3c0 5080 	ubfx	r0, r0, #22, #1
   1b5e0:	4770      	bx	lr
   1b5e2:	2000      	movs	r0, #0
}
   1b5e4:	4770      	bx	lr

0001b5e6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1b5e6:	6843      	ldr	r3, [r0, #4]
   1b5e8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b5ea:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1b5ee:	3800      	subs	r0, #0
   1b5f0:	bf18      	it	ne
   1b5f2:	2001      	movne	r0, #1
   1b5f4:	4770      	bx	lr

0001b5f6 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1b5f6:	2210      	movs	r2, #16
	return config->uarte_regs;
   1b5f8:	6843      	ldr	r3, [r0, #4]
   1b5fa:	681b      	ldr	r3, [r3, #0]
   1b5fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b600:	4770      	bx	lr

0001b602 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1b602:	2210      	movs	r2, #16
	return config->uarte_regs;
   1b604:	6843      	ldr	r3, [r0, #4]
   1b606:	681b      	ldr	r3, [r3, #0]
   1b608:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b60c:	4770      	bx	lr

0001b60e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1b60e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1b612:	6843      	ldr	r3, [r0, #4]
   1b614:	681b      	ldr	r3, [r3, #0]
   1b616:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1b61a:	4770      	bx	lr

0001b61c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1b61c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1b620:	6843      	ldr	r3, [r0, #4]
   1b622:	681b      	ldr	r3, [r3, #0]
   1b624:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1b628:	4770      	bx	lr

0001b62a <uarte_nrfx_irq_update>:
}
   1b62a:	2001      	movs	r0, #1
   1b62c:	4770      	bx	lr

0001b62e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1b62e:	68c3      	ldr	r3, [r0, #12]
   1b630:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1b632:	e9c3 1200 	strd	r1, r2, [r3]
}
   1b636:	4770      	bx	lr

0001b638 <uarte_nrfx_irq_is_pending>:
{
   1b638:	b508      	push	{r3, lr}
	return config->uarte_regs;
   1b63a:	6843      	ldr	r3, [r0, #4]
{
   1b63c:	4602      	mov	r2, r0
	return config->uarte_regs;
   1b63e:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   1b640:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   1b644:	025b      	lsls	r3, r3, #9
   1b646:	d405      	bmi.n	1b654 <uarte_nrfx_irq_is_pending+0x1c>
   1b648:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   1b64c:	f010 0010 	ands.w	r0, r0, #16
   1b650:	d106      	bne.n	1b660 <uarte_nrfx_irq_is_pending+0x28>
}
   1b652:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1b654:	f7ff ffb7 	bl	1b5c6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1b658:	2800      	cmp	r0, #0
   1b65a:	d0f5      	beq.n	1b648 <uarte_nrfx_irq_is_pending+0x10>
		||
   1b65c:	2001      	movs	r0, #1
   1b65e:	e7f8      	b.n	1b652 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1b660:	4610      	mov	r0, r2
   1b662:	f7ff ffc0 	bl	1b5e6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1b666:	3800      	subs	r0, #0
   1b668:	bf18      	it	ne
   1b66a:	2001      	movne	r0, #1
   1b66c:	e7f1      	b.n	1b652 <uarte_nrfx_irq_is_pending+0x1a>

0001b66e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1b66e:	4700      	bx	r0

0001b670 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1b670:	f000 b9aa 	b.w	1b9c8 <z_impl_k_busy_wait>

0001b674 <nrfx_clock_enable>:
{
   1b674:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1b676:	2005      	movs	r0, #5
   1b678:	f7f7 facc 	bl	12c14 <arch_irq_is_enabled>
   1b67c:	b920      	cbnz	r0, 1b688 <nrfx_clock_enable+0x14>
}
   1b67e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1b682:	2005      	movs	r0, #5
   1b684:	f7f7 bab6 	b.w	12bf4 <arch_irq_enable>
   1b688:	bd08      	pop	{r3, pc}

0001b68a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1b68a:	f7ff bcbe 	b.w	1b00a <z_clock_idle_exit>

0001b68e <k_mem_slab_init>:
{
   1b68e:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   1b690:	2400      	movs	r4, #0
   1b692:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b694:	ea41 0402 	orr.w	r4, r1, r2
   1b698:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   1b69c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   1b6a0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b6a2:	d10c      	bne.n	1b6be <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   1b6a4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b6a6:	42a3      	cmp	r3, r4
   1b6a8:	d103      	bne.n	1b6b2 <k_mem_slab_init+0x24>
   1b6aa:	e9c0 0000 	strd	r0, r0, [r0]
}
   1b6ae:	2000      	movs	r0, #0
}
   1b6b0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   1b6b2:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b6b4:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   1b6b6:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   1b6b8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   1b6ba:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   1b6bc:	e7f3      	b.n	1b6a6 <k_mem_slab_init+0x18>
		return -EINVAL;
   1b6be:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b6c2:	e7f5      	b.n	1b6b0 <k_mem_slab_init+0x22>

0001b6c4 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   1b6c4:	4603      	mov	r3, r0
   1b6c6:	b510      	push	{r4, lr}
   1b6c8:	4608      	mov	r0, r1
	__asm__ volatile(
   1b6ca:	f04f 0220 	mov.w	r2, #32
   1b6ce:	f3ef 8411 	mrs	r4, BASEPRI
   1b6d2:	f382 8811 	msr	BASEPRI, r2
   1b6d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);

	if (msgq->used_msgs > 0) {
   1b6da:	6a1a      	ldr	r2, [r3, #32]
   1b6dc:	b14a      	cbz	r2, 1b6f2 <z_impl_k_msgq_peek+0x2e>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1b6de:	689a      	ldr	r2, [r3, #8]
   1b6e0:	6999      	ldr	r1, [r3, #24]
   1b6e2:	f7ff fde0 	bl	1b2a6 <memcpy>
		result = 0;
   1b6e6:	2000      	movs	r0, #0
	__asm__ volatile(
   1b6e8:	f384 8811 	msr	BASEPRI, r4
   1b6ec:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b6f0:	bd10      	pop	{r4, pc}
		result = -ENOMSG;
   1b6f2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
   1b6f6:	e7f7      	b.n	1b6e8 <z_impl_k_msgq_peek+0x24>

0001b6f8 <z_impl_k_mutex_init>:
{
   1b6f8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1b6fa:	2000      	movs	r0, #0
   1b6fc:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1b700:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1b704:	4770      	bx	lr

0001b706 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1b706:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b70a:	4699      	mov	r9, r3
   1b70c:	4604      	mov	r4, r0
   1b70e:	460d      	mov	r5, r1
   1b710:	4690      	mov	r8, r2
   1b712:	f89d 3020 	ldrb.w	r3, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b716:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1b71a:	f04f 0220 	mov.w	r2, #32
   1b71e:	f3ef 8711 	mrs	r7, BASEPRI
   1b722:	f382 8811 	msr	BASEPRI, r2
   1b726:	f3bf 8f6f 	isb	sy

	if (is_append) {
   1b72a:	b103      	cbz	r3, 1b72e <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   1b72c:	6845      	ldr	r5, [r0, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1b72e:	4630      	mov	r0, r6
   1b730:	f000 f91f 	bl	1b972 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1b734:	b160      	cbz	r0, 1b750 <queue_insert+0x4a>
   1b736:	2400      	movs	r4, #0
   1b738:	f8c0 8014 	str.w	r8, [r0, #20]
   1b73c:	f8c0 40b4 	str.w	r4, [r0, #180]	; 0xb4
	z_ready_thread(thread);
   1b740:	f000 f8bc 	bl	1b8bc <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1b744:	4630      	mov	r0, r6
   1b746:	4639      	mov	r1, r7
   1b748:	f7f9 fb9a 	bl	14e80 <z_reschedule>
	return 0;
   1b74c:	2000      	movs	r0, #0
   1b74e:	e00c      	b.n	1b76a <queue_insert+0x64>
	if (alloc) {
   1b750:	f1b9 0f00 	cmp.w	r9, #0
   1b754:	d01b      	beq.n	1b78e <queue_insert+0x88>
		anode = z_thread_malloc(sizeof(*anode));
   1b756:	2008      	movs	r0, #8
   1b758:	f7fa fb40 	bl	15ddc <z_thread_malloc>
		if (anode == NULL) {
   1b75c:	b938      	cbnz	r0, 1b76e <queue_insert+0x68>
	__asm__ volatile(
   1b75e:	f387 8811 	msr	BASEPRI, r7
   1b762:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1b766:	f06f 000b 	mvn.w	r0, #11
}
   1b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   1b76e:	2301      	movs	r3, #1
		anode->data = data;
   1b770:	f8c0 8004 	str.w	r8, [r0, #4]
   1b774:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   1b776:	6803      	ldr	r3, [r0, #0]
   1b778:	f003 0203 	and.w	r2, r3, #3
   1b77c:	b95d      	cbnz	r5, 1b796 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b77e:	6823      	ldr	r3, [r4, #0]
   1b780:	4313      	orrs	r3, r2
   1b782:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1b784:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1b786:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1b788:	b973      	cbnz	r3, 1b7a8 <queue_insert+0xa2>
	list->tail = node;
   1b78a:	6060      	str	r0, [r4, #4]
}
   1b78c:	e00c      	b.n	1b7a8 <queue_insert+0xa2>
}
   1b78e:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1b790:	f8c8 9000 	str.w	r9, [r8]
}
   1b794:	e7ef      	b.n	1b776 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b796:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1b798:	f033 0303 	bics.w	r3, r3, #3
   1b79c:	d110      	bne.n	1b7c0 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b79e:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1b7a0:	6862      	ldr	r2, [r4, #4]
   1b7a2:	b93a      	cbnz	r2, 1b7b4 <queue_insert+0xae>
	list->head = node;
   1b7a4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1b7a8:	2104      	movs	r1, #4
   1b7aa:	f104 0010 	add.w	r0, r4, #16
   1b7ae:	f000 fb0c 	bl	1bdca <z_handle_obj_poll_events>
   1b7b2:	e7c7      	b.n	1b744 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b7b4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b7b6:	f003 0303 	and.w	r3, r3, #3
   1b7ba:	4303      	orrs	r3, r0
   1b7bc:	6013      	str	r3, [r2, #0]
   1b7be:	e7e4      	b.n	1b78a <queue_insert+0x84>
   1b7c0:	4313      	orrs	r3, r2
   1b7c2:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1b7c4:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1b7c6:	f003 0303 	and.w	r3, r3, #3
   1b7ca:	4303      	orrs	r3, r0
   1b7cc:	602b      	str	r3, [r5, #0]
}
   1b7ce:	e7eb      	b.n	1b7a8 <queue_insert+0xa2>

0001b7d0 <k_queue_append>:
	(void)queue_insert(queue, prev, data, false, false);
}

void k_queue_append(struct k_queue *queue, void *data)
{
	(void)queue_insert(queue, NULL, data, false, true);
   1b7d0:	2301      	movs	r3, #1
{
   1b7d2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1b7d4:	9300      	str	r3, [sp, #0]
   1b7d6:	2300      	movs	r3, #0
{
   1b7d8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1b7da:	4619      	mov	r1, r3
   1b7dc:	f7ff ff93 	bl	1b706 <queue_insert>
}
   1b7e0:	b003      	add	sp, #12
   1b7e2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7e6 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1b7e6:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1b7ea:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1b7ee:	4298      	cmp	r0, r3
   1b7f0:	bfac      	ite	ge
   1b7f2:	2000      	movge	r0, #0
   1b7f4:	2001      	movlt	r0, #1
   1b7f6:	4770      	bx	lr

0001b7f8 <z_find_first_thread_to_unpend>:
{
   1b7f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7fa:	f04f 0320 	mov.w	r3, #32
   1b7fe:	f3ef 8411 	mrs	r4, BASEPRI
   1b802:	f383 8811 	msr	BASEPRI, r3
   1b806:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b80a:	f000 f84d 	bl	1b8a8 <z_priq_dumb_best>
	__asm__ volatile(
   1b80e:	f384 8811 	msr	BASEPRI, r4
   1b812:	f3bf 8f6f 	isb	sy
}
   1b816:	bd10      	pop	{r4, pc}

0001b818 <z_unpend_thread_no_timeout>:
{
   1b818:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b81a:	f04f 0320 	mov.w	r3, #32
   1b81e:	f3ef 8411 	mrs	r4, BASEPRI
   1b822:	f383 8811 	msr	BASEPRI, r3
   1b826:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b82a:	f000 f81b 	bl	1b864 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b82e:	f384 8811 	msr	BASEPRI, r4
   1b832:	f3bf 8f6f 	isb	sy
}
   1b836:	bd10      	pop	{r4, pc}

0001b838 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b838:	4603      	mov	r3, r0
   1b83a:	b920      	cbnz	r0, 1b846 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b83c:	f3ef 8205 	mrs	r2, IPSR
   1b840:	b90a      	cbnz	r2, 1b846 <z_reschedule_irqlock+0xe>
   1b842:	f7f7 b9bb 	b.w	12bbc <arch_swap>
   1b846:	f383 8811 	msr	BASEPRI, r3
   1b84a:	f3bf 8f6f 	isb	sy
}
   1b84e:	4770      	bx	lr

0001b850 <z_reschedule_unlocked>:
	__asm__ volatile(
   1b850:	f04f 0320 	mov.w	r3, #32
   1b854:	f3ef 8011 	mrs	r0, BASEPRI
   1b858:	f383 8811 	msr	BASEPRI, r3
   1b85c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b860:	f7ff bfea 	b.w	1b838 <z_reschedule_irqlock>

0001b864 <unpend_thread_no_timeout>:
{
   1b864:	4601      	mov	r1, r0
   1b866:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1b868:	6880      	ldr	r0, [r0, #8]
   1b86a:	f7f9 fb2f 	bl	14ecc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1b86e:	7b4b      	ldrb	r3, [r1, #13]
   1b870:	f023 0302 	bic.w	r3, r3, #2
   1b874:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1b876:	2300      	movs	r3, #0
   1b878:	608b      	str	r3, [r1, #8]
}
   1b87a:	bd08      	pop	{r3, pc}

0001b87c <z_unpend_thread>:
{
   1b87c:	b538      	push	{r3, r4, r5, lr}
   1b87e:	4604      	mov	r4, r0
   1b880:	f04f 0320 	mov.w	r3, #32
   1b884:	f3ef 8511 	mrs	r5, BASEPRI
   1b888:	f383 8811 	msr	BASEPRI, r3
   1b88c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b890:	f7ff ffe8 	bl	1b864 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b894:	f385 8811 	msr	BASEPRI, r5
   1b898:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1b89c:	f104 0018 	add.w	r0, r4, #24
}
   1b8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b8a4:	f000 b8a4 	b.w	1b9f0 <z_abort_timeout>

0001b8a8 <z_priq_dumb_best>:
{
   1b8a8:	4603      	mov	r3, r0
	return list->head == list;
   1b8aa:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8ac:	4283      	cmp	r3, r0
   1b8ae:	d003      	beq.n	1b8b8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   1b8b0:	2800      	cmp	r0, #0
   1b8b2:	bf38      	it	cc
   1b8b4:	2000      	movcc	r0, #0
   1b8b6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1b8b8:	2000      	movs	r0, #0
}
   1b8ba:	4770      	bx	lr

0001b8bc <z_ready_thread>:
{
   1b8bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b8be:	f04f 0320 	mov.w	r3, #32
   1b8c2:	f3ef 8411 	mrs	r4, BASEPRI
   1b8c6:	f383 8811 	msr	BASEPRI, r3
   1b8ca:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1b8ce:	f7f9 fb57 	bl	14f80 <ready_thread>
	__asm__ volatile(
   1b8d2:	f384 8811 	msr	BASEPRI, r4
   1b8d6:	f3bf 8f6f 	isb	sy
}
   1b8da:	bd10      	pop	{r4, pc}

0001b8dc <z_thread_timeout>:
{
   1b8dc:	b570      	push	{r4, r5, r6, lr}
   1b8de:	4604      	mov	r4, r0
	__asm__ volatile(
   1b8e0:	f04f 0320 	mov.w	r3, #32
   1b8e4:	f3ef 8611 	mrs	r6, BASEPRI
   1b8e8:	f383 8811 	msr	BASEPRI, r3
   1b8ec:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1b8f0:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1b8f4:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1b8f8:	b113      	cbz	r3, 1b900 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1b8fa:	4628      	mov	r0, r5
   1b8fc:	f7ff ffb2 	bl	1b864 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1b900:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   1b904:	4628      	mov	r0, r5
   1b906:	f023 0314 	bic.w	r3, r3, #20
   1b90a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1b90e:	f7f9 fb37 	bl	14f80 <ready_thread>
	__asm__ volatile(
   1b912:	f386 8811 	msr	BASEPRI, r6
   1b916:	f3bf 8f6f 	isb	sy
}
   1b91a:	bd70      	pop	{r4, r5, r6, pc}

0001b91c <add_to_waitq_locked>:
{
   1b91c:	b538      	push	{r3, r4, r5, lr}
   1b91e:	4604      	mov	r4, r0
   1b920:	460d      	mov	r5, r1
	unready_thread(thread);
   1b922:	f7f9 fcb9 	bl	15298 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1b926:	7b63      	ldrb	r3, [r4, #13]
   1b928:	f043 0302 	orr.w	r3, r3, #2
   1b92c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1b92e:	b1c5      	cbz	r5, 1b962 <add_to_waitq_locked+0x46>
	return list->head == list;
   1b930:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1b932:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b934:	429d      	cmp	r5, r3
   1b936:	bf08      	it	eq
   1b938:	2300      	moveq	r3, #0
   1b93a:	2b00      	cmp	r3, #0
   1b93c:	bf38      	it	cc
   1b93e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b940:	b183      	cbz	r3, 1b964 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b942:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1b946:	f993 200e 	ldrsb.w	r2, [r3, #14]
   1b94a:	4291      	cmp	r1, r2
   1b94c:	db04      	blt.n	1b958 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   1b94e:	686a      	ldr	r2, [r5, #4]
   1b950:	429a      	cmp	r2, r3
   1b952:	d007      	beq.n	1b964 <add_to_waitq_locked+0x48>
   1b954:	681b      	ldr	r3, [r3, #0]
   1b956:	e7f3      	b.n	1b940 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   1b958:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b95a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1b95e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b960:	605c      	str	r4, [r3, #4]
}
   1b962:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   1b964:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1b966:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   1b968:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1b96a:	686b      	ldr	r3, [r5, #4]
   1b96c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b96e:	606c      	str	r4, [r5, #4]
   1b970:	e7f7      	b.n	1b962 <add_to_waitq_locked+0x46>

0001b972 <z_unpend_first_thread>:
{
   1b972:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1b974:	f04f 0320 	mov.w	r3, #32
   1b978:	f3ef 8211 	mrs	r2, BASEPRI
   1b97c:	f383 8811 	msr	BASEPRI, r3
   1b980:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1b984:	f7ff ff90 	bl	1b8a8 <z_priq_dumb_best>
   1b988:	4604      	mov	r4, r0
	__asm__ volatile(
   1b98a:	f382 8811 	msr	BASEPRI, r2
   1b98e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1b992:	b188      	cbz	r0, 1b9b8 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1b994:	f04f 0320 	mov.w	r3, #32
   1b998:	f3ef 8511 	mrs	r5, BASEPRI
   1b99c:	f383 8811 	msr	BASEPRI, r3
   1b9a0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1b9a4:	f7ff ff5e 	bl	1b864 <unpend_thread_no_timeout>
	__asm__ volatile(
   1b9a8:	f385 8811 	msr	BASEPRI, r5
   1b9ac:	f3bf 8f6f 	isb	sy
   1b9b0:	f104 0018 	add.w	r0, r4, #24
   1b9b4:	f000 f81c 	bl	1b9f0 <z_abort_timeout>
}
   1b9b8:	4620      	mov	r0, r4
   1b9ba:	bd38      	pop	{r3, r4, r5, pc}

0001b9bc <k_is_in_isr>:
   1b9bc:	f3ef 8005 	mrs	r0, IPSR
}
   1b9c0:	3800      	subs	r0, #0
   1b9c2:	bf18      	it	ne
   1b9c4:	2001      	movne	r0, #1
   1b9c6:	4770      	bx	lr

0001b9c8 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1b9c8:	b108      	cbz	r0, 1b9ce <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1b9ca:	f7f3 bf9b 	b.w	f904 <arch_busy_wait>
}
   1b9ce:	4770      	bx	lr

0001b9d0 <k_thread_name_get>:
}
   1b9d0:	307c      	adds	r0, #124	; 0x7c
   1b9d2:	4770      	bx	lr

0001b9d4 <z_impl_k_thread_stack_space_get>:
int z_impl_k_thread_stack_space_get(const struct k_thread *thread,
				    size_t *unused_ptr)
{
	const uint8_t *start = (uint8_t *)thread->stack_info.start;
	size_t size = thread->stack_info.size;
	size_t unused = 0;
   1b9d4:	2300      	movs	r3, #0
{
   1b9d6:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   1b9d8:	e9d0 4228 	ldrd	r4, r2, [r0, #160]	; 0xa0
		 */
		checked_stack += 4;
		size -= 4;
	}

	for (size_t i = 0; i < size; i++) {
   1b9dc:	4293      	cmp	r3, r2
   1b9de:	d102      	bne.n	1b9e6 <z_impl_k_thread_stack_space_get+0x12>
	}

	*unused_ptr = unused;

	return 0;
}
   1b9e0:	2000      	movs	r0, #0
	*unused_ptr = unused;
   1b9e2:	600b      	str	r3, [r1, #0]
}
   1b9e4:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   1b9e6:	5ce0      	ldrb	r0, [r4, r3]
   1b9e8:	28aa      	cmp	r0, #170	; 0xaa
   1b9ea:	d1f9      	bne.n	1b9e0 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   1b9ec:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   1b9ee:	e7f5      	b.n	1b9dc <z_impl_k_thread_stack_space_get+0x8>

0001b9f0 <z_abort_timeout>:
{
   1b9f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b9f2:	f04f 0220 	mov.w	r2, #32
   1b9f6:	f3ef 8411 	mrs	r4, BASEPRI
   1b9fa:	f382 8811 	msr	BASEPRI, r2
   1b9fe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1ba02:	6803      	ldr	r3, [r0, #0]
   1ba04:	b13b      	cbz	r3, 1ba16 <z_abort_timeout+0x26>
			remove_timeout(to);
   1ba06:	f7f9 ff6b 	bl	158e0 <remove_timeout>
			ret = 0;
   1ba0a:	2000      	movs	r0, #0
	__asm__ volatile(
   1ba0c:	f384 8811 	msr	BASEPRI, r4
   1ba10:	f3bf 8f6f 	isb	sy
}
   1ba14:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1ba16:	f06f 0015 	mvn.w	r0, #21
   1ba1a:	e7f7      	b.n	1ba0c <z_abort_timeout+0x1c>

0001ba1c <z_timeout_remaining>:
{
   1ba1c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ba1e:	f04f 0320 	mov.w	r3, #32
   1ba22:	f3ef 8411 	mrs	r4, BASEPRI
   1ba26:	f383 8811 	msr	BASEPRI, r3
   1ba2a:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   1ba2e:	f7f9 ff9d 	bl	1596c <timeout_rem>
	__asm__ volatile(
   1ba32:	f384 8811 	msr	BASEPRI, r4
   1ba36:	f3bf 8f6f 	isb	sy
}
   1ba3a:	bd10      	pop	{r4, pc}

0001ba3c <z_get_next_timeout_expiry>:
{
   1ba3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ba3e:	f04f 0320 	mov.w	r3, #32
   1ba42:	f3ef 8411 	mrs	r4, BASEPRI
   1ba46:	f383 8811 	msr	BASEPRI, r3
   1ba4a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1ba4e:	f7f9 ff61 	bl	15914 <next_timeout>
	__asm__ volatile(
   1ba52:	f384 8811 	msr	BASEPRI, r4
   1ba56:	f3bf 8f6f 	isb	sy
}
   1ba5a:	bd10      	pop	{r4, pc}

0001ba5c <z_set_timeout_expiry>:
{
   1ba5c:	b570      	push	{r4, r5, r6, lr}
   1ba5e:	4604      	mov	r4, r0
   1ba60:	460d      	mov	r5, r1
	__asm__ volatile(
   1ba62:	f04f 0320 	mov.w	r3, #32
   1ba66:	f3ef 8611 	mrs	r6, BASEPRI
   1ba6a:	f383 8811 	msr	BASEPRI, r3
   1ba6e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1ba72:	f7f9 ff4f 	bl	15914 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1ba76:	2801      	cmp	r0, #1
   1ba78:	dd05      	ble.n	1ba86 <z_set_timeout_expiry+0x2a>
   1ba7a:	42a0      	cmp	r0, r4
   1ba7c:	dd03      	ble.n	1ba86 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1ba7e:	4629      	mov	r1, r5
   1ba80:	4620      	mov	r0, r4
   1ba82:	f7f6 ffff 	bl	12a84 <z_clock_set_timeout>
	__asm__ volatile(
   1ba86:	f386 8811 	msr	BASEPRI, r6
   1ba8a:	f3bf 8f6f 	isb	sy
}
   1ba8e:	bd70      	pop	{r4, r5, r6, pc}

0001ba90 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1ba90:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1ba92:	f7fa f883 	bl	15b9c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1ba96:	bd08      	pop	{r3, pc}

0001ba98 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1ba98:	f7fa b880 	b.w	15b9c <z_tick_get>

0001ba9c <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1ba9c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ba9e:	1c4b      	adds	r3, r1, #1
   1baa0:	bf08      	it	eq
   1baa2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1baa6:	4604      	mov	r4, r0
   1baa8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1baaa:	d013      	beq.n	1bad4 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1baac:	ea54 0105 	orrs.w	r1, r4, r5
   1bab0:	d103      	bne.n	1baba <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   1bab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1bab6:	f7fa b871 	b.w	15b9c <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1baba:	f06f 0101 	mvn.w	r1, #1
   1babe:	1a0a      	subs	r2, r1, r0
   1bac0:	f04f 31ff 	mov.w	r1, #4294967295
   1bac4:	eb61 0305 	sbc.w	r3, r1, r5
   1bac8:	2a00      	cmp	r2, #0
   1baca:	f173 0100 	sbcs.w	r1, r3, #0
   1bace:	db02      	blt.n	1bad6 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1bad0:	4610      	mov	r0, r2
   1bad2:	4619      	mov	r1, r3
}
   1bad4:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1bad6:	f7fa f861 	bl	15b9c <z_tick_get>
   1bada:	2c01      	cmp	r4, #1
   1badc:	f175 0300 	sbcs.w	r3, r5, #0
   1bae0:	bfbc      	itt	lt
   1bae2:	2401      	movlt	r4, #1
   1bae4:	2500      	movlt	r5, #0
   1bae6:	1820      	adds	r0, r4, r0
   1bae8:	eb45 0101 	adc.w	r1, r5, r1
   1baec:	e7f2      	b.n	1bad4 <z_timeout_end_calc+0x38>

0001baee <k_timer_init>:
	timer->status = 0U;
   1baee:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   1baf0:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
   1baf4:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   1baf8:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   1bafc:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   1bb00:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   1bb02:	6343      	str	r3, [r0, #52]	; 0x34
}
   1bb04:	4770      	bx	lr

0001bb06 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1bb06:	b510      	push	{r4, lr}
   1bb08:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1bb0a:	f7ff ff71 	bl	1b9f0 <z_abort_timeout>

	if (inactive) {
   1bb0e:	b9d8      	cbnz	r0, 1bb48 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   1bb10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bb12:	b10b      	cbz	r3, 1bb18 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1bb14:	4620      	mov	r0, r4
   1bb16:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1bb18:	f104 0018 	add.w	r0, r4, #24
   1bb1c:	2100      	movs	r1, #0
   1bb1e:	f7ff fe6b 	bl	1b7f8 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1bb22:	4604      	mov	r4, r0
   1bb24:	b180      	cbz	r0, 1bb48 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1bb26:	f7ff fe77 	bl	1b818 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   1bb2a:	4620      	mov	r0, r4
   1bb2c:	f7ff fec6 	bl	1b8bc <z_ready_thread>
	__asm__ volatile(
   1bb30:	f04f 0320 	mov.w	r3, #32
   1bb34:	f3ef 8011 	mrs	r0, BASEPRI
   1bb38:	f383 8811 	msr	BASEPRI, r3
   1bb3c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1bb40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1bb44:	f7ff be78 	b.w	1b838 <z_reschedule_irqlock>
   1bb48:	bd10      	pop	{r4, pc}

0001bb4a <clear_event_registrations>:
	while (num_events--) {
   1bb4a:	2314      	movs	r3, #20
{
   1bb4c:	b530      	push	{r4, r5, lr}
	event->poller = NULL;
   1bb4e:	2400      	movs	r4, #0
   1bb50:	fb03 0101 	mla	r1, r3, r1, r0
	while (num_events--) {
   1bb54:	4281      	cmp	r1, r0
   1bb56:	d100      	bne.n	1bb5a <clear_event_registrations+0x10>
}
   1bb58:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1bb5a:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1bb5e:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1bb62:	f003 030f 	and.w	r3, r3, #15
   1bb66:	2b02      	cmp	r3, #2
   1bb68:	d80a      	bhi.n	1bb80 <clear_event_registrations+0x36>
   1bb6a:	b15b      	cbz	r3, 1bb84 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1bb6c:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1bb70:	b143      	cbz	r3, 1bb84 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   1bb72:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1bb76:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1bb78:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1bb7a:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1bb7e:	e001      	b.n	1bb84 <clear_event_registrations+0x3a>
	switch (event->type) {
   1bb80:	2b04      	cmp	r3, #4
   1bb82:	d0f3      	beq.n	1bb6c <clear_event_registrations+0x22>
	__asm__ volatile(
   1bb84:	f382 8811 	msr	BASEPRI, r2
   1bb88:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bb8c:	f04f 0320 	mov.w	r3, #32
   1bb90:	f3ef 8211 	mrs	r2, BASEPRI
   1bb94:	f383 8811 	msr	BASEPRI, r3
   1bb98:	f3bf 8f6f 	isb	sy
   1bb9c:	3914      	subs	r1, #20
   1bb9e:	e7d9      	b.n	1bb54 <clear_event_registrations+0xa>

0001bba0 <k_work_submit_to_queue>:
{
   1bba0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bba2:	f101 0308 	add.w	r3, r1, #8
   1bba6:	e8d3 2fef 	ldaex	r2, [r3]
   1bbaa:	f042 0c01 	orr.w	ip, r2, #1
   1bbae:	e8c3 cfee 	stlex	lr, ip, [r3]
   1bbb2:	f1be 0f00 	cmp.w	lr, #0
   1bbb6:	d1f6      	bne.n	1bba6 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1bbb8:	07d3      	lsls	r3, r2, #31
   1bbba:	d403      	bmi.n	1bbc4 <k_work_submit_to_queue+0x24>
}
   1bbbc:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1bbc0:	f7ff be06 	b.w	1b7d0 <k_queue_append>
}
   1bbc4:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbc8 <signal_poll_event>:
{
   1bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1bbcc:	6884      	ldr	r4, [r0, #8]
{
   1bbce:	4605      	mov	r5, r0
   1bbd0:	460e      	mov	r6, r1
	if (poller) {
   1bbd2:	b144      	cbz	r4, 1bbe6 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   1bbd4:	7863      	ldrb	r3, [r4, #1]
   1bbd6:	2b01      	cmp	r3, #1
   1bbd8:	d138      	bne.n	1bc4c <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   1bbda:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1bbde:	f013 0302 	ands.w	r3, r3, #2
   1bbe2:	d10a      	bne.n	1bbfa <signal_poll_event+0x32>
		poller->is_polling = false;
   1bbe4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1bbe6:	2000      	movs	r0, #0
	event->state |= state;
   1bbe8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1bbea:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1bbec:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1bbf0:	430e      	orrs	r6, r1
   1bbf2:	f366 3310 	bfi	r3, r6, #12, #5
   1bbf6:	60eb      	str	r3, [r5, #12]
	return retcode;
   1bbf8:	e00d      	b.n	1bc16 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   1bbfa:	f04f 31ff 	mov.w	r1, #4294967295
   1bbfe:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   1bc02:	f06f 0001 	mvn.w	r0, #1
   1bc06:	428b      	cmp	r3, r1
   1bc08:	bf08      	it	eq
   1bc0a:	4282      	cmpeq	r2, r0
   1bc0c:	d105      	bne.n	1bc1a <signal_poll_event+0x52>
		poller->is_polling = false;
   1bc0e:	2300      	movs	r3, #0
		return -EAGAIN;
   1bc10:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1bc14:	7023      	strb	r3, [r4, #0]
}
   1bc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1bc1a:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   1bc1e:	4640      	mov	r0, r8
   1bc20:	f7ff fe2c 	bl	1b87c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1bc24:	2e08      	cmp	r6, #8
   1bc26:	bf0c      	ite	eq
   1bc28:	f06f 0303 	mvneq.w	r3, #3
   1bc2c:	2300      	movne	r3, #0
   1bc2e:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bc30:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   1bc34:	06db      	lsls	r3, r3, #27
   1bc36:	d102      	bne.n	1bc3e <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   1bc38:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   1bc3c:	b10f      	cbz	r7, 1bc42 <signal_poll_event+0x7a>
		poller->is_polling = false;
   1bc3e:	2300      	movs	r3, #0
   1bc40:	e7d0      	b.n	1bbe4 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   1bc42:	4640      	mov	r0, r8
   1bc44:	f7ff fe3a 	bl	1b8bc <z_ready_thread>
		poller->is_polling = false;
   1bc48:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1bc4a:	e7cc      	b.n	1bbe6 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   1bc4c:	2b02      	cmp	r3, #2
   1bc4e:	d1f6      	bne.n	1bc3e <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1bc50:	7823      	ldrb	r3, [r4, #0]
   1bc52:	2b00      	cmp	r3, #0
   1bc54:	d0c7      	beq.n	1bbe6 <signal_poll_event+0x1e>
   1bc56:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1bc5a:	2f00      	cmp	r7, #0
   1bc5c:	d0f4      	beq.n	1bc48 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1bc5e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1bc62:	f1a4 0910 	sub.w	r9, r4, #16
   1bc66:	f104 0010 	add.w	r0, r4, #16
   1bc6a:	f7ff fec1 	bl	1b9f0 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1bc6e:	4649      	mov	r1, r9
   1bc70:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1bc72:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1bc76:	f7ff ff93 	bl	1bba0 <k_work_submit_to_queue>
		poller->is_polling = false;
   1bc7a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1bc7e:	e7b2      	b.n	1bbe6 <signal_poll_event+0x1e>

0001bc80 <add_event>:
{
   1bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc82:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1bc84:	e9d0 2300 	ldrd	r2, r3, [r0]
   1bc88:	4290      	cmp	r0, r2
   1bc8a:	4604      	mov	r4, r0
   1bc8c:	460d      	mov	r5, r1
   1bc8e:	d106      	bne.n	1bc9e <add_event+0x1e>
	node->prev = list->tail;
   1bc90:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1bc92:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1bc94:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1bc96:	6863      	ldr	r3, [r4, #4]
   1bc98:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1bc9a:	6065      	str	r5, [r4, #4]
}
   1bc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1bc9e:	2b00      	cmp	r3, #0
   1bca0:	d0f6      	beq.n	1bc90 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1bca2:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1bca4:	b100      	cbz	r0, 1bca8 <add_event+0x28>
   1bca6:	3864      	subs	r0, #100	; 0x64
   1bca8:	b107      	cbz	r7, 1bcac <add_event+0x2c>
   1bcaa:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1bcac:	4639      	mov	r1, r7
   1bcae:	f7ff fd9a 	bl	1b7e6 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1bcb2:	2800      	cmp	r0, #0
   1bcb4:	d1ec      	bne.n	1bc90 <add_event+0x10>
	return list->head == list;
   1bcb6:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcb8:	42b4      	cmp	r4, r6
   1bcba:	d0e9      	beq.n	1bc90 <add_event+0x10>
   1bcbc:	2e00      	cmp	r6, #0
   1bcbe:	bf38      	it	cc
   1bcc0:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1bcc2:	2e00      	cmp	r6, #0
   1bcc4:	d0e4      	beq.n	1bc90 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1bcc6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1bcc8:	b101      	cbz	r1, 1bccc <add_event+0x4c>
   1bcca:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1bccc:	4638      	mov	r0, r7
   1bcce:	f7ff fd8a 	bl	1b7e6 <z_is_t1_higher_prio_than_t2>
   1bcd2:	b128      	cbz	r0, 1bce0 <add_event+0x60>
	node->prev = successor->prev;
   1bcd4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1bcd6:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1bcda:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1bcdc:	6075      	str	r5, [r6, #4]
			return;
   1bcde:	e7dd      	b.n	1bc9c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1bce0:	6863      	ldr	r3, [r4, #4]
   1bce2:	42b3      	cmp	r3, r6
   1bce4:	d0d4      	beq.n	1bc90 <add_event+0x10>
   1bce6:	6836      	ldr	r6, [r6, #0]
   1bce8:	e7eb      	b.n	1bcc2 <add_event+0x42>

0001bcea <register_events>:
{
   1bcea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1bcee:	f04f 0a00 	mov.w	sl, #0
{
   1bcf2:	460e      	mov	r6, r1
   1bcf4:	4614      	mov	r4, r2
   1bcf6:	461f      	mov	r7, r3
   1bcf8:	4683      	mov	fp, r0
	int events_registered = 0;
   1bcfa:	4655      	mov	r5, sl
	event->poller = NULL;
   1bcfc:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1bcfe:	45b2      	cmp	sl, r6
   1bd00:	db02      	blt.n	1bd08 <register_events+0x1e>
}
   1bd02:	4628      	mov	r0, r5
   1bd04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd08:	f04f 0320 	mov.w	r3, #32
   1bd0c:	f3ef 8911 	mrs	r9, BASEPRI
   1bd10:	f383 8811 	msr	BASEPRI, r3
   1bd14:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1bd18:	f89b 200d 	ldrb.w	r2, [fp, #13]
   1bd1c:	f002 020f 	and.w	r2, r2, #15
   1bd20:	2a02      	cmp	r2, #2
   1bd22:	d006      	beq.n	1bd32 <register_events+0x48>
   1bd24:	2a04      	cmp	r2, #4
   1bd26:	d008      	beq.n	1bd3a <register_events+0x50>
   1bd28:	2a01      	cmp	r2, #1
   1bd2a:	d120      	bne.n	1bd6e <register_events+0x84>
		if (event->signal->signaled != 0U) {
   1bd2c:	f8db 3010 	ldr.w	r3, [fp, #16]
   1bd30:	e001      	b.n	1bd36 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   1bd32:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1bd36:	689b      	ldr	r3, [r3, #8]
   1bd38:	e002      	b.n	1bd40 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1bd3a:	f8db 3010 	ldr.w	r3, [fp, #16]
   1bd3e:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   1bd40:	b1ab      	cbz	r3, 1bd6e <register_events+0x84>
	event->state |= state;
   1bd42:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1bd46:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1bd4a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1bd4e:	430a      	orrs	r2, r1
   1bd50:	f362 3310 	bfi	r3, r2, #12, #5
   1bd54:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1bd58:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1bd5c:	f389 8811 	msr	BASEPRI, r9
   1bd60:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1bd64:	f10a 0a01 	add.w	sl, sl, #1
   1bd68:	f10b 0b14 	add.w	fp, fp, #20
   1bd6c:	e7c7      	b.n	1bcfe <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1bd6e:	2f00      	cmp	r7, #0
   1bd70:	d1f4      	bne.n	1bd5c <register_events+0x72>
   1bd72:	7823      	ldrb	r3, [r4, #0]
   1bd74:	2b00      	cmp	r3, #0
   1bd76:	d0f1      	beq.n	1bd5c <register_events+0x72>
	switch (event->type) {
   1bd78:	f89b 300d 	ldrb.w	r3, [fp, #13]
   1bd7c:	f003 030f 	and.w	r3, r3, #15
   1bd80:	2b02      	cmp	r3, #2
   1bd82:	d008      	beq.n	1bd96 <register_events+0xac>
   1bd84:	2b04      	cmp	r3, #4
   1bd86:	d006      	beq.n	1bd96 <register_events+0xac>
   1bd88:	2b01      	cmp	r3, #1
   1bd8a:	d10b      	bne.n	1bda4 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   1bd8c:	4622      	mov	r2, r4
   1bd8e:	4659      	mov	r1, fp
   1bd90:	f8db 0010 	ldr.w	r0, [fp, #16]
   1bd94:	e004      	b.n	1bda0 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1bd96:	4622      	mov	r2, r4
   1bd98:	4659      	mov	r1, fp
   1bd9a:	f8db 0010 	ldr.w	r0, [fp, #16]
   1bd9e:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1bda0:	f7ff ff6e 	bl	1bc80 <add_event>
	event->poller = poller;
   1bda4:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   1bda8:	3501      	adds	r5, #1
   1bdaa:	e7d7      	b.n	1bd5c <register_events+0x72>

0001bdac <k_poll_event_init>:
{
   1bdac:	b510      	push	{r4, lr}
	event->poller = NULL;
   1bdae:	2400      	movs	r4, #0
	event->type = type;
   1bdb0:	0452      	lsls	r2, r2, #17
   1bdb2:	0209      	lsls	r1, r1, #8
   1bdb4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   1bdb8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   1bdbc:	430a      	orrs	r2, r1
   1bdbe:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1bdc0:	6084      	str	r4, [r0, #8]
	event->type = type;
   1bdc2:	430a      	orrs	r2, r1
	event->obj = obj;
   1bdc4:	e9c0 2303 	strd	r2, r3, [r0, #12]
}
   1bdc8:	bd10      	pop	{r4, pc}

0001bdca <z_handle_obj_poll_events>:
{
   1bdca:	4603      	mov	r3, r0
	return list->head == list;
   1bdcc:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1bdce:	4283      	cmp	r3, r0
   1bdd0:	d008      	beq.n	1bde4 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1bdd2:	e9d0 3200 	ldrd	r3, r2, [r0]
   1bdd6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1bdd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1bdda:	2300      	movs	r3, #0
	node->prev = NULL;
   1bddc:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1bde0:	f7ff bef2 	b.w	1bbc8 <signal_poll_event>
}
   1bde4:	4770      	bx	lr

0001bde6 <z_impl_k_poll_signal_init>:
	signal->signaled = 0U;
   1bde6:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   1bde8:	e9c0 0000 	strd	r0, r0, [r0]
   1bdec:	6083      	str	r3, [r0, #8]
}
   1bdee:	4770      	bx	lr

0001bdf0 <z_impl_k_poll_signal_check>:
	*signaled = signal->signaled;
   1bdf0:	6883      	ldr	r3, [r0, #8]
   1bdf2:	600b      	str	r3, [r1, #0]
	*result = signal->result;
   1bdf4:	68c3      	ldr	r3, [r0, #12]
   1bdf6:	6013      	str	r3, [r2, #0]
}
   1bdf8:	4770      	bx	lr

0001bdfa <k_mem_pool_malloc>:
{
   1bdfa:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1bdfc:	2408      	movs	r4, #8
   1bdfe:	190a      	adds	r2, r1, r4
   1be00:	d208      	bcs.n	1be14 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1be02:	2600      	movs	r6, #0
   1be04:	2700      	movs	r7, #0
   1be06:	eb0d 0104 	add.w	r1, sp, r4
   1be0a:	e9cd 6700 	strd	r6, r7, [sp]
   1be0e:	f000 f857 	bl	1bec0 <k_mem_pool_alloc>
   1be12:	b110      	cbz	r0, 1be1a <k_mem_pool_malloc+0x20>
		return NULL;
   1be14:	2000      	movs	r0, #0
}
   1be16:	b004      	add	sp, #16
   1be18:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1be1a:	4622      	mov	r2, r4
   1be1c:	9802      	ldr	r0, [sp, #8]
   1be1e:	a902      	add	r1, sp, #8
   1be20:	f7ff fa41 	bl	1b2a6 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1be24:	9802      	ldr	r0, [sp, #8]
   1be26:	3008      	adds	r0, #8
   1be28:	e7f5      	b.n	1be16 <k_mem_pool_malloc+0x1c>

0001be2a <k_heap_init>:
{
   1be2a:	b410      	push	{r4}
   1be2c:	f100 040c 	add.w	r4, r0, #12
   1be30:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1be34:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1be36:	f7fd bc54 	b.w	196e2 <sys_heap_init>

0001be3a <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1be3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be3e:	4604      	mov	r4, r0
   1be40:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1be42:	4610      	mov	r0, r2
   1be44:	4619      	mov	r1, r3
{
   1be46:	b085      	sub	sp, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1be48:	f7ff fe28 	bl	1ba9c <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1be4c:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1be50:	4605      	mov	r5, r0
   1be52:	460f      	mov	r7, r1
	__asm__ volatile(
   1be54:	f04f 0220 	mov.w	r2, #32
   1be58:	f3ef 8311 	mrs	r3, BASEPRI
   1be5c:	f382 8811 	msr	BASEPRI, r2
   1be60:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1be64:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   1be68:	4631      	mov	r1, r6
   1be6a:	4620      	mov	r0, r4
   1be6c:	9303      	str	r3, [sp, #12]
   1be6e:	f7fd fc04 	bl	1967a <sys_heap_alloc>
   1be72:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   1be74:	f7f9 fe92 	bl	15b9c <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1be78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1be7c:	b13a      	cbz	r2, 1be8e <k_heap_alloc+0x54>
	__asm__ volatile(
   1be7e:	f383 8811 	msr	BASEPRI, r3
   1be82:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1be86:	4610      	mov	r0, r2
   1be88:	b005      	add	sp, #20
   1be8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1be8e:	ebb5 0800 	subs.w	r8, r5, r0
   1be92:	eb67 0901 	sbc.w	r9, r7, r1
   1be96:	f1b8 0f01 	cmp.w	r8, #1
   1be9a:	f179 0100 	sbcs.w	r1, r9, #0
   1be9e:	dbee      	blt.n	1be7e <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1bea0:	465a      	mov	r2, fp
   1bea2:	4619      	mov	r1, r3
   1bea4:	4650      	mov	r0, sl
   1bea6:	e9cd 8900 	strd	r8, r9, [sp]
   1beaa:	f7f9 fa35 	bl	15318 <z_pend_curr>
	__asm__ volatile(
   1beae:	f04f 0220 	mov.w	r2, #32
   1beb2:	f3ef 8311 	mrs	r3, BASEPRI
   1beb6:	f382 8811 	msr	BASEPRI, r2
   1beba:	f3bf 8f6f 	isb	sy
   1bebe:	e7d3      	b.n	1be68 <k_heap_alloc+0x2e>

0001bec0 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1bec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bec2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1bec6:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   1bec8:	6800      	ldr	r0, [r0, #0]
{
   1beca:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   1becc:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   1bece:	4632      	mov	r2, r6
   1bed0:	463b      	mov	r3, r7
   1bed2:	4621      	mov	r1, r4
   1bed4:	f7ff ffb1 	bl	1be3a <k_heap_alloc>
   1bed8:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1beda:	b144      	cbz	r4, 1beee <k_mem_pool_alloc+0x2e>
   1bedc:	b938      	cbnz	r0, 1beee <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   1bede:	ea56 0307 	orrs.w	r3, r6, r7
   1bee2:	bf0c      	ite	eq
   1bee4:	f06f 000b 	mvneq.w	r0, #11
   1bee8:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1beec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1beee:	2000      	movs	r0, #0
   1bef0:	e7fc      	b.n	1beec <k_mem_pool_alloc+0x2c>

0001bef2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1bef2:	4770      	bx	lr
